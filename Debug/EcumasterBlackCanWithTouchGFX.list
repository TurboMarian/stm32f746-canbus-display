
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000263c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000050bc  08026590  08026590  00036590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003ce4  0802b64c  0802b64c  0003b64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802f330  0802f330  0003f330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000234  08062828  08062828  00072828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08062a5c  08062a5c  00080110  2**0
                  CONTENTS
  7 .ARM          00000008  08062a5c  08062a5c  00072a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08062a64  08062a64  00080110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08062a64  08062a64  00072a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08062a78  08062a78  00072a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000110  20000000  08062a80  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c944  20000110  08062b90  00080110  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000ca54  08062b90  0008ca54  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080110  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005b160  00000000  00000000  00080140  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ef7b  00000000  00000000  000db2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004148  00000000  00000000  000ea220  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003b28  00000000  00000000  000ee368  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003af09  00000000  00000000  000f1e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004173a  00000000  00000000  0012cd99  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012f165  00000000  00000000  0016e4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0029d638  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001184c  00000000  00000000  0029d734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08026578 	.word	0x08026578

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	08026578 	.word	0x08026578

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000012c 	.word	0x2000012c
 8000b3c:	20000184 	.word	0x20000184

08000b40 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b09a      	sub	sp, #104	; 0x68
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b48:	4ba9      	ldr	r3, [pc, #676]	; (8000df0 <SecondTask+0x2b0>)
 8000b4a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5c:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b60:	4ba4      	ldr	r3, [pc, #656]	; (8000df4 <SecondTask+0x2b4>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f00b feb2 	bl	800c8d4 <xQueueGenericSend>
	osDelay(150);
 8000b70:	2096      	movs	r0, #150	; 0x96
 8000b72:	f00b fbc1 	bl	800c2f8 <osDelay>

	static const int demo_mode = 1;
	for(;;)
	{
		if(demo_mode)
 8000b76:	4ba0      	ldr	r3, [pc, #640]	; (8000df8 <SecondTask+0x2b8>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 80e0 	beq.w	8000d40 <SecondTask+0x200>
		{

			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b80:	4b9e      	ldr	r3, [pc, #632]	; (8000dfc <SecondTask+0x2bc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b88:	da03      	bge.n	8000b92 <SecondTask+0x52>
 8000b8a:	4b9c      	ldr	r3, [pc, #624]	; (8000dfc <SecondTask+0x2bc>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3364      	adds	r3, #100	; 0x64
 8000b90:	e000      	b.n	8000b94 <SecondTask+0x54>
 8000b92:	2300      	movs	r3, #0
 8000b94:	4a99      	ldr	r2, [pc, #612]	; (8000dfc <SecondTask+0x2bc>)
 8000b96:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b98:	4b99      	ldr	r3, [pc, #612]	; (8000e00 <SecondTask+0x2c0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2bf9      	cmp	r3, #249	; 0xf9
 8000b9e:	dc03      	bgt.n	8000ba8 <SecondTask+0x68>
 8000ba0:	4b97      	ldr	r3, [pc, #604]	; (8000e00 <SecondTask+0x2c0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	e001      	b.n	8000bac <SecondTask+0x6c>
 8000ba8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000bac:	4a94      	ldr	r2, [pc, #592]	; (8000e00 <SecondTask+0x2c0>)
 8000bae:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000bb0:	4b94      	ldr	r3, [pc, #592]	; (8000e04 <SecondTask+0x2c4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bb8:	da03      	bge.n	8000bc2 <SecondTask+0x82>
 8000bba:	4b92      	ldr	r3, [pc, #584]	; (8000e04 <SecondTask+0x2c4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	e000      	b.n	8000bc4 <SecondTask+0x84>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4a8f      	ldr	r2, [pc, #572]	; (8000e04 <SecondTask+0x2c4>)
 8000bc6:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bc8:	4b8f      	ldr	r3, [pc, #572]	; (8000e08 <SecondTask+0x2c8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fcd3 	bl	8000578 <__aeabi_f2d>
 8000bd2:	a37d      	add	r3, pc, #500	; (adr r3, 8000dc8 <SecondTask+0x288>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fd9a 	bl	8000710 <__aeabi_dcmpge>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SecondTask+0xa6>
 8000be2:	4b8a      	ldr	r3, [pc, #552]	; (8000e0c <SecondTask+0x2cc>)
 8000be4:	e010      	b.n	8000c08 <SecondTask+0xc8>
 8000be6:	4b88      	ldr	r3, [pc, #544]	; (8000e08 <SecondTask+0x2c8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcc4 	bl	8000578 <__aeabi_f2d>
 8000bf0:	a377      	add	r3, pc, #476	; (adr r3, 8000dd0 <SecondTask+0x290>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fb61 	bl	80002bc <__adddf3>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4621      	mov	r1, r4
 8000c02:	f7ff fd99 	bl	8000738 <__aeabi_d2f>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a7f      	ldr	r2, [pc, #508]	; (8000e08 <SecondTask+0x2c8>)
 8000c0a:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c0c:	4b80      	ldr	r3, [pc, #512]	; (8000e10 <SecondTask+0x2d0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fcb1 	bl	8000578 <__aeabi_f2d>
 8000c16:	a36c      	add	r3, pc, #432	; (adr r3, 8000dc8 <SecondTask+0x288>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fd78 	bl	8000710 <__aeabi_dcmpge>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SecondTask+0xea>
 8000c26:	4b7b      	ldr	r3, [pc, #492]	; (8000e14 <SecondTask+0x2d4>)
 8000c28:	e010      	b.n	8000c4c <SecondTask+0x10c>
 8000c2a:	4b79      	ldr	r3, [pc, #484]	; (8000e10 <SecondTask+0x2d0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fca2 	bl	8000578 <__aeabi_f2d>
 8000c34:	a368      	add	r3, pc, #416	; (adr r3, 8000dd8 <SecondTask+0x298>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fb3f 	bl	80002bc <__adddf3>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460c      	mov	r4, r1
 8000c42:	4618      	mov	r0, r3
 8000c44:	4621      	mov	r1, r4
 8000c46:	f7ff fd77 	bl	8000738 <__aeabi_d2f>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a70      	ldr	r2, [pc, #448]	; (8000e10 <SecondTask+0x2d0>)
 8000c4e:	6013      	str	r3, [r2, #0]
			vehicle_spd = (vehicle_spd >= 400) ? 0: vehicle_spd + 6;
 8000c50:	4b71      	ldr	r3, [pc, #452]	; (8000e18 <SecondTask+0x2d8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c58:	da03      	bge.n	8000c62 <SecondTask+0x122>
 8000c5a:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <SecondTask+0x2d8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3306      	adds	r3, #6
 8000c60:	e000      	b.n	8000c64 <SecondTask+0x124>
 8000c62:	2300      	movs	r3, #0
 8000c64:	4a6c      	ldr	r2, [pc, #432]	; (8000e18 <SecondTask+0x2d8>)
 8000c66:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c68:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <SecondTask+0x2dc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b9f      	cmp	r3, #159	; 0x9f
 8000c6e:	dc03      	bgt.n	8000c78 <SecondTask+0x138>
 8000c70:	4b6a      	ldr	r3, [pc, #424]	; (8000e1c <SecondTask+0x2dc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3302      	adds	r3, #2
 8000c76:	e000      	b.n	8000c7a <SecondTask+0x13a>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	4a68      	ldr	r2, [pc, #416]	; (8000e1c <SecondTask+0x2dc>)
 8000c7c:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c7e:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <SecondTask+0x2e0>)
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c90:	db01      	blt.n	8000c96 <SecondTask+0x156>
 8000c92:	4b64      	ldr	r3, [pc, #400]	; (8000e24 <SecondTask+0x2e4>)
 8000c94:	e010      	b.n	8000cb8 <SecondTask+0x178>
 8000c96:	4b62      	ldr	r3, [pc, #392]	; (8000e20 <SecondTask+0x2e0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fc6c 	bl	8000578 <__aeabi_f2d>
 8000ca0:	a34f      	add	r3, pc, #316	; (adr r3, 8000de0 <SecondTask+0x2a0>)
 8000ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca6:	f7ff fb09 	bl	80002bc <__adddf3>
 8000caa:	4603      	mov	r3, r0
 8000cac:	460c      	mov	r4, r1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	f7ff fd41 	bl	8000738 <__aeabi_d2f>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <SecondTask+0x2e0>)
 8000cba:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cbc:	4b5a      	ldr	r3, [pc, #360]	; (8000e28 <SecondTask+0x2e8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b63      	cmp	r3, #99	; 0x63
 8000cc2:	dc03      	bgt.n	8000ccc <SecondTask+0x18c>
 8000cc4:	4b58      	ldr	r3, [pc, #352]	; (8000e28 <SecondTask+0x2e8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3302      	adds	r3, #2
 8000cca:	e000      	b.n	8000cce <SecondTask+0x18e>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	4a56      	ldr	r2, [pc, #344]	; (8000e28 <SecondTask+0x2e8>)
 8000cd0:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cd2:	4b56      	ldr	r3, [pc, #344]	; (8000e2c <SecondTask+0x2ec>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cda:	da03      	bge.n	8000ce4 <SecondTask+0x1a4>
 8000cdc:	4b53      	ldr	r3, [pc, #332]	; (8000e2c <SecondTask+0x2ec>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	330c      	adds	r3, #12
 8000ce2:	e001      	b.n	8000ce8 <SecondTask+0x1a8>
 8000ce4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce8:	4a50      	ldr	r2, [pc, #320]	; (8000e2c <SecondTask+0x2ec>)
 8000cea:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000cec:	4b50      	ldr	r3, [pc, #320]	; (8000e30 <SecondTask+0x2f0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b63      	cmp	r3, #99	; 0x63
 8000cf2:	dc03      	bgt.n	8000cfc <SecondTask+0x1bc>
 8000cf4:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <SecondTask+0x2f0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	e000      	b.n	8000cfe <SecondTask+0x1be>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4a4c      	ldr	r2, [pc, #304]	; (8000e30 <SecondTask+0x2f0>)
 8000d00:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d02:	4b4c      	ldr	r3, [pc, #304]	; (8000e34 <SecondTask+0x2f4>)
 8000d04:	edd3 7a00 	vldr	s15, [r3]
 8000d08:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	db01      	blt.n	8000d1a <SecondTask+0x1da>
 8000d16:	4b48      	ldr	r3, [pc, #288]	; (8000e38 <SecondTask+0x2f8>)
 8000d18:	e010      	b.n	8000d3c <SecondTask+0x1fc>
 8000d1a:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <SecondTask+0x2f4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fc2a 	bl	8000578 <__aeabi_f2d>
 8000d24:	a330      	add	r3, pc, #192	; (adr r3, 8000de8 <SecondTask+0x2a8>)
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	f7ff fac7 	bl	80002bc <__adddf3>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	460c      	mov	r4, r1
 8000d32:	4618      	mov	r0, r3
 8000d34:	4621      	mov	r1, r4
 8000d36:	f7ff fcff 	bl	8000738 <__aeabi_d2f>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <SecondTask+0x2f4>)
 8000d3e:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, vehicle_spd, oil_tmp, oil_press, iat, egt, tps, batt_v};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2234      	movs	r2, #52	; 0x34
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f024 fc98 	bl	802567e <memset>
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <SecondTask+0x2bc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <SecondTask+0x2c0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <SecondTask+0x2c4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <SecondTask+0x2c8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <SecondTask+0x2d0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <SecondTask+0x2d8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	623b      	str	r3, [r7, #32]
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <SecondTask+0x2dc>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <SecondTask+0x2e0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <SecondTask+0x2e8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <SecondTask+0x2ec>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <SecondTask+0x2f0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <SecondTask+0x2f4>)
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000da4:	ee17 3a90 	vmov	r3, s15
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
	    xQueueSend(messageQ, &dispVals,0);
 8000daa:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <SecondTask+0x2fc>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	f107 010c 	add.w	r1, r7, #12
 8000db2:	2300      	movs	r3, #0
 8000db4:	2200      	movs	r2, #0
 8000db6:	f00b fd8d 	bl	800c8d4 <xQueueGenericSend>
		osDelay(50);
 8000dba:	2032      	movs	r0, #50	; 0x32
 8000dbc:	f00b fa9c 	bl	800c2f8 <osDelay>
	{
 8000dc0:	e6d9      	b.n	8000b76 <SecondTask+0x36>
 8000dc2:	bf00      	nop
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	66666666 	.word	0x66666666
 8000dcc:	3ff66666 	.word	0x3ff66666
 8000dd0:	9999999a 	.word	0x9999999a
 8000dd4:	3fa99999 	.word	0x3fa99999
 8000dd8:	eb851eb8 	.word	0xeb851eb8
 8000ddc:	3faeb851 	.word	0x3faeb851
 8000de0:	9999999a 	.word	0x9999999a
 8000de4:	3fb99999 	.word	0x3fb99999
 8000de8:	33333333 	.word	0x33333333
 8000dec:	3fe33333 	.word	0x3fe33333
 8000df0:	08026590 	.word	0x08026590
 8000df4:	200086c4 	.word	0x200086c4
 8000df8:	08026d00 	.word	0x08026d00
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000010 	.word	0x20000010
 8000e0c:	3f19999a 	.word	0x3f19999a
 8000e10:	20000014 	.word	0x20000014
 8000e14:	3f266666 	.word	0x3f266666
 8000e18:	20000394 	.word	0x20000394
 8000e1c:	20000398 	.word	0x20000398
 8000e20:	2000039c 	.word	0x2000039c
 8000e24:	3dcccccd 	.word	0x3dcccccd
 8000e28:	200003a0 	.word	0x200003a0
 8000e2c:	200003a4 	.word	0x200003a4
 8000e30:	200003a8 	.word	0x200003a8
 8000e34:	200003ac 	.word	0x200003ac
 8000e38:	41200000 	.word	0x41200000
 8000e3c:	200086c0 	.word	0x200086c0

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f002 fcf2 	bl	800382e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4a:	f000 f85f 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4e:	f001 f9c5 	bl	80021dc <MX_GPIO_Init>
  MX_ADC3_Init();
 8000e52:	f000 f917 	bl	8001084 <MX_ADC3_Init>
  MX_CRC_Init();
 8000e56:	f000 fafd 	bl	8001454 <MX_CRC_Init>
  MX_DCMI_Init();
 8000e5a:	f000 fb1d 	bl	8001498 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000e5e:	f000 fb4f 	bl	8001500 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e62:	f001 f90f 	bl	8002084 <MX_FMC_Init>
  MX_LTDC_Init();
 8000e66:	f000 fb7d 	bl	8001564 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000e6a:	f000 fbfd 	bl	8001668 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000e6e:	f000 fc27 	bl	80016c0 <MX_RTC_Init>
  MX_SAI2_Init();
 8000e72:	f000 fccd 	bl	8001810 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000e76:	f000 fd73 	bl	8001960 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000e7a:	f000 fd91 	bl	80019a0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000e7e:	f000 fdbf 	bl	8001a00 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000e82:	f000 fdfb 	bl	8001a7c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e86:	f000 fea5 	bl	8001bd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e8a:	f000 ff19 	bl	8001cc0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000e8e:	f000 ff8d 	bl	8001dac <MX_TIM5_Init>
  MX_TIM8_Init();
 8000e92:	f001 f801 	bl	8001e98 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000e96:	f001 f851 	bl	8001f3c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000e9a:	f001 f893 	bl	8001fc4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000e9e:	f001 f8c1 	bl	8002024 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000ea2:	f00a fee5 	bl	800bc70 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000ea6:	f000 f93f 	bl	8001128 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000eaa:	f00d ff53 	bl	800ed54 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <main+0xbc>)
 8000eb0:	f107 041c 	add.w	r4, r7, #28
 8000eb4:	461d      	mov	r5, r3
 8000eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00b f9c9 	bl	800c260 <osThreadCreate>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <main+0xc0>)
 8000ed2:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <main+0xc4>)
 8000ed6:	463c      	mov	r4, r7
 8000ed8:	461d      	mov	r5, r3
 8000eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ede:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00b f9b8 	bl	800c260 <osThreadCreate>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <main+0xc8>)
 8000ef4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ef6:	f00b f990 	bl	800c21a <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <main+0xba>
 8000efc:	080265c4 	.word	0x080265c4
 8000f00:	2000bed4 	.word	0x2000bed4
 8000f04:	080265e8 	.word	0x080265e8
 8000f08:	2000bed0 	.word	0x2000bed0

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0b4      	sub	sp, #208	; 0xd0
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f16:	2230      	movs	r2, #48	; 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f024 fbaf 	bl	802567e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	2284      	movs	r2, #132	; 0x84
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f024 fba0 	bl	802567e <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f3e:	f005 f94b 	bl	80061d8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <SystemClock_Config+0x16c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a4c      	ldr	r2, [pc, #304]	; (8001078 <SystemClock_Config+0x16c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <SystemClock_Config+0x16c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5a:	4b48      	ldr	r3, [pc, #288]	; (800107c <SystemClock_Config+0x170>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a47      	ldr	r2, [pc, #284]	; (800107c <SystemClock_Config+0x170>)
 8000f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b45      	ldr	r3, [pc, #276]	; (800107c <SystemClock_Config+0x170>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f72:	2309      	movs	r3, #9
 8000f74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f80:	2301      	movs	r3, #1
 8000f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f94:	2319      	movs	r3, #25
 8000f96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000f9a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fa8:	2309      	movs	r3, #9
 8000faa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f005 fa32 	bl	800641c <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000fbe:	f001 fb41 	bl	8002644 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc2:	f005 f919 	bl	80061f8 <HAL_PWREx_EnableOverDrive>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fcc:	f001 fb3a 	bl	8002644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000ff2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ff6:	2106      	movs	r1, #6
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f005 fcb3 	bl	8006964 <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001004:	f001 fb1e 	bl	8002644 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <SystemClock_Config+0x174>)
 800100a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800100c:	2364      	movs	r3, #100	; 0x64
 800100e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800101c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001020:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001022:	2305      	movs	r3, #5
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001026:	2302      	movs	r3, #2
 8001028:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800102a:	2303      	movs	r3, #3
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800102e:	2301      	movs	r3, #1
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001036:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800103c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001040:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001042:	2300      	movs	r3, #0
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001046:	2300      	movs	r3, #0
 8001048:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800104a:	2300      	movs	r3, #0
 800104c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800104e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	4618      	mov	r0, r3
 8001062:	f005 fe83 	bl	8006d6c <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x164>
  {
    Error_Handler();
 800106c:	f001 faea 	bl	8002644 <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	37d0      	adds	r7, #208	; 0xd0
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000
 8001080:	01b00868 	.word	0x01b00868

08001084 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_ADC3_Init+0x98>)
 8001098:	4a21      	ldr	r2, [pc, #132]	; (8001120 <MX_ADC3_Init+0x9c>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_ADC3_Init+0x98>)
 800109e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_ADC3_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_ADC3_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_ADC3_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_ADC3_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_ADC3_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_ADC3_Init+0x98>)
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <MX_ADC3_Init+0xa0>)
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_ADC3_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_ADC3_Init+0x98>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_ADC3_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_ADC3_Init+0x98>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <MX_ADC3_Init+0x98>)
 80010e6:	f002 fbf1 	bl	80038cc <HAL_ADC_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80010f0:	f001 faa8 	bl	8002644 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010f4:	2304      	movs	r3, #4
 80010f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_ADC3_Init+0x98>)
 8001106:	f002 fc25 	bl	8003954 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001110:	f001 fa98 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000c21c 	.word	0x2000c21c
 8001120:	40012200 	.word	0x40012200
 8001124:	0f000001 	.word	0x0f000001

08001128 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800112e:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <MX_CAN1_Init+0xc8>)
 8001130:	4a30      	ldr	r2, [pc, #192]	; (80011f4 <MX_CAN1_Init+0xcc>)
 8001132:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <MX_CAN1_Init+0xc8>)
 8001136:	2214      	movs	r2, #20
 8001138:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <MX_CAN1_Init+0xc8>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <MX_CAN1_Init+0xc8>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <MX_CAN1_Init+0xc8>)
 8001148:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800114c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MX_CAN1_Init+0xc8>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_CAN1_Init+0xc8>)
 8001156:	2200      	movs	r2, #0
 8001158:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <MX_CAN1_Init+0xc8>)
 800115c:	2200      	movs	r2, #0
 800115e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_CAN1_Init+0xc8>)
 8001162:	2200      	movs	r2, #0
 8001164:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001166:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <MX_CAN1_Init+0xc8>)
 8001168:	2200      	movs	r2, #0
 800116a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_CAN1_Init+0xc8>)
 800116e:	2200      	movs	r2, #0
 8001170:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_CAN1_Init+0xc8>)
 8001174:	2200      	movs	r2, #0
 8001176:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001178:	481d      	ldr	r0, [pc, #116]	; (80011f0 <MX_CAN1_Init+0xc8>)
 800117a:	f002 fe2f 	bl	8003ddc <HAL_CAN_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001184:	f001 fa5e 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001190:	2301      	movs	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80011ac:	230e      	movs	r3, #14
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	480e      	ldr	r0, [pc, #56]	; (80011f0 <MX_CAN1_Init+0xc8>)
 80011b6:	f002 ff0d 	bl	8003fd4 <HAL_CAN_ConfigFilter>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80011c0:	f001 fa40 	bl	8002644 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <MX_CAN1_Init+0xc8>)
 80011c6:	f002 ffe5 	bl	8004194 <HAL_CAN_Start>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 80011d0:	f001 fa38 	bl	8002644 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80011d4:	2102      	movs	r1, #2
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <MX_CAN1_Init+0xc8>)
 80011d8:	f003 f932 	bl	8004440 <HAL_CAN_ActivateNotification>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 80011e2:	f001 fa2f 	bl	8002644 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	; 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000c49c 	.word	0x2000c49c
 80011f4:	40006400 	.word	0x40006400

080011f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001200:	4b82      	ldr	r3, [pc, #520]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001202:	4a83      	ldr	r2, [pc, #524]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001204:	2100      	movs	r1, #0
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f003 f808 	bl	800421c <HAL_CAN_GetRxMessage>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001212:	f001 fa17 	bl	8002644 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001216:	4b7e      	ldr	r3, [pc, #504]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800121e:	d145      	bne.n	80012ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001220:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d141      	bne.n	80012ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8001228:	4b79      	ldr	r3, [pc, #484]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d13d      	bne.n	80012ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8001230:	4b76      	ldr	r3, [pc, #472]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b75      	ldr	r3, [pc, #468]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21b      	sxth	r3, r3
 8001242:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t tps_in = RxData[2];
 8001244:	4b71      	ldr	r3, [pc, #452]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t iat_in = RxData[3];
 800124c:	4b6f      	ldr	r3, [pc, #444]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800124e:	78db      	ldrb	r3, [r3, #3]
 8001250:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 uint16_t map_in = (RxData[4] << 0) | (RxData[7] << 8);
 8001254:	4b6d      	ldr	r3, [pc, #436]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001256:	791b      	ldrb	r3, [r3, #4]
 8001258:	b21a      	sxth	r2, r3
 800125a:	4b6c      	ldr	r3, [pc, #432]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800125c:	79db      	ldrb	r3, [r3, #7]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b21b      	sxth	r3, r3
 8001266:	847b      	strh	r3, [r7, #34]	; 0x22

	 rpm = (int)rpm_in;
 8001268:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800126a:	4a6a      	ldr	r2, [pc, #424]	; (8001414 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800126c:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 800126e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127c:	ee17 2a90 	vmov	r2, s15
 8001280:	4b65      	ldr	r3, [pc, #404]	; (8001418 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001282:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 8001284:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001288:	4a64      	ldr	r2, [pc, #400]	; (800141c <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800128a:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 800128c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001298:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a4:	ee17 2a90 	vmov	r2, s15
 80012a8:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 80012aa:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80012ac:	4b58      	ldr	r3, [pc, #352]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f240 6202 	movw	r2, #1538	; 0x602
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d139      	bne.n	800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
 80012b8:	4b55      	ldr	r3, [pc, #340]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d135      	bne.n	800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d131      	bne.n	800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
  {

	 uint16_t vehicle_spd_in = (RxData[1] << 0) | (RxData[2] << 8);
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b4f      	ldr	r3, [pc, #316]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b21b      	sxth	r3, r3
 80012da:	843b      	strh	r3, [r7, #32]
	 uint8_t oil_tmp_in = RxData[3];
 80012dc:	4b4b      	ldr	r3, [pc, #300]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	77fb      	strb	r3, [r7, #31]
	 uint8_t oil_press_in = RxData[4];
 80012e2:	4b4a      	ldr	r3, [pc, #296]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012e4:	791b      	ldrb	r3, [r3, #4]
 80012e6:	77bb      	strb	r3, [r7, #30]
	 uint8_t fuel_press_in = RxData[5];
 80012e8:	4b48      	ldr	r3, [pc, #288]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012ea:	795b      	ldrb	r3, [r3, #5]
 80012ec:	777b      	strb	r3, [r7, #29]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012f0:	799b      	ldrb	r3, [r3, #6]
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80012f6:	79db      	ldrb	r3, [r3, #7]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	837b      	strh	r3, [r7, #26]

	 vehicle_spd = ((int)vehicle_spd_in)*1;
 8001302:	8c3b      	ldrh	r3, [r7, #32]
 8001304:	4a47      	ldr	r2, [pc, #284]	; (8001424 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001306:	6013      	str	r3, [r2, #0]
	 oil_tmp = ((int)oil_tmp_in) * 1;
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	4a47      	ldr	r2, [pc, #284]	; (8001428 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800130c:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 800130e:	7fbb      	ldrb	r3, [r7, #30]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001318:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800142c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
 800131c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001320:	4b43      	ldr	r3, [pc, #268]	; (8001430 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001322:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 8001326:	8b7b      	ldrh	r3, [r7, #26]
 8001328:	4a42      	ldr	r2, [pc, #264]	; (8001434 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 800132a:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800132c:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f240 6203 	movw	r2, #1539	; 0x603
 8001334:	4293      	cmp	r3, r2
 8001336:	d123      	bne.n	8001380 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d11f      	bne.n	8001380 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	2b08      	cmp	r3, #8
 8001346:	d11b      	bne.n	8001380 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
  {
	 uint8_t lambda_in = RxData[2];
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800134a:	789b      	ldrb	r3, [r3, #2]
 800134c:	767b      	strb	r3, [r7, #25]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	b21a      	sxth	r2, r3
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001356:	795b      	ldrb	r3, [r3, #5]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21b      	sxth	r3, r3
 8001360:	82fb      	strh	r3, [r7, #22]
	 lambda = ((float)lambda_in)*0.0078125f;
 8001362:	7e7b      	ldrb	r3, [r7, #25]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001438 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>
 8001370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001376:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 800137a:	8afb      	ldrh	r3, [r7, #22]
 800137c:	4a30      	ldr	r2, [pc, #192]	; (8001440 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800137e:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f240 6204 	movw	r2, #1540	; 0x604
 8001388:	4293      	cmp	r3, r2
 800138a:	d11f      	bne.n	80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d11b      	bne.n	80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	2b08      	cmp	r3, #8
 800139a:	d117      	bne.n	80013cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800139e:	789b      	ldrb	r3, [r3, #2]
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80013a4:	78db      	ldrb	r3, [r3, #3]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	82bb      	strh	r3, [r7, #20]
	 float battery_voltage = ((float)batt_in)*0.027f;
 80013b0:	8abb      	ldrh	r3, [r7, #20]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ba:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001444 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 80013be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c2:	edc7 7a04 	vstr	s15, [r7, #16]
	 batt_v = battery_voltage;
 80013c6:	4a20      	ldr	r2, [pc, #128]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013d4:	d116      	bne.n	8001404 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d112      	bne.n	8001404 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d10e      	bne.n	8001404 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>
    {
  	 uint16_t lambda_targ_in = RxData[7];
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80013e8:	79db      	ldrb	r3, [r3, #7]
 80013ea:	81fb      	strh	r3, [r7, #14]
  	 lambda_targ = lambda_targ_in / 100.0f;
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f6:	eddf 6a15 	vldr	s13, [pc, #84]	; 800144c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>
 80013fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8001400:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000c454 	.word	0x2000c454
 8001410:	2000c538 	.word	0x2000c538
 8001414:	20000004 	.word	0x20000004
 8001418:	20000008 	.word	0x20000008
 800141c:	200003a0 	.word	0x200003a0
 8001420:	200003a8 	.word	0x200003a8
 8001424:	20000394 	.word	0x20000394
 8001428:	20000398 	.word	0x20000398
 800142c:	3d800000 	.word	0x3d800000
 8001430:	2000039c 	.word	0x2000039c
 8001434:	2000000c 	.word	0x2000000c
 8001438:	3c000000 	.word	0x3c000000
 800143c:	20000010 	.word	0x20000010
 8001440:	200003a4 	.word	0x200003a4
 8001444:	3cdd2f1b 	.word	0x3cdd2f1b
 8001448:	200003ac 	.word	0x200003ac
 800144c:	42c80000 	.word	0x42c80000
 8001450:	20000014 	.word	0x20000014

08001454 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MX_CRC_Init+0x3c>)
 800145a:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <MX_CRC_Init+0x40>)
 800145c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_CRC_Init+0x3c>)
 8001460:	2200      	movs	r2, #0
 8001462:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_CRC_Init+0x3c>)
 8001466:	2200      	movs	r2, #0
 8001468:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_CRC_Init+0x3c>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_CRC_Init+0x3c>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_CRC_Init+0x3c>)
 8001478:	2201      	movs	r2, #1
 800147a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_CRC_Init+0x3c>)
 800147e:	f003 fb41 	bl	8004b04 <HAL_CRC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001488:	f001 f8dc 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000c04c 	.word	0x2000c04c
 8001494:	40023000 	.word	0x40023000

08001498 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_DCMI_Init+0x60>)
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <MX_DCMI_Init+0x64>)
 80014a0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014da:	2200      	movs	r2, #0
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_DCMI_Init+0x60>)
 80014e6:	f003 fbf7 	bl	8004cd8 <HAL_DCMI_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80014f0:	f001 f8a8 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000c264 	.word	0x2000c264
 80014fc:	50050000 	.word	0x50050000

08001500 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_DMA2D_Init+0x5c>)
 8001506:	4a16      	ldr	r2, [pc, #88]	; (8001560 <MX_DMA2D_Init+0x60>)
 8001508:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_DMA2D_Init+0x5c>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_DMA2D_Init+0x5c>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_DMA2D_Init+0x5c>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_DMA2D_Init+0x5c>)
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_DMA2D_Init+0x5c>)
 8001524:	2200      	movs	r2, #0
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_DMA2D_Init+0x5c>)
 800152a:	2200      	movs	r2, #0
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_DMA2D_Init+0x5c>)
 8001530:	2200      	movs	r2, #0
 8001532:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001534:	4809      	ldr	r0, [pc, #36]	; (800155c <MX_DMA2D_Init+0x5c>)
 8001536:	f003 fce3 	bl	8004f00 <HAL_DMA2D_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001540:	f001 f880 	bl	8002644 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001544:	2101      	movs	r1, #1
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_DMA2D_Init+0x5c>)
 8001548:	f003 ffa4 	bl	8005494 <HAL_DMA2D_ConfigLayer>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001552:	f001 f877 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000c414 	.word	0x2000c414
 8001560:	4002b000 	.word	0x4002b000

08001564 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2234      	movs	r2, #52	; 0x34
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f024 f884 	bl	802567e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001576:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <MX_LTDC_Init+0xfc>)
 8001578:	4a3a      	ldr	r2, [pc, #232]	; (8001664 <MX_LTDC_Init+0x100>)
 800157a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800157c:	4b38      	ldr	r3, [pc, #224]	; (8001660 <MX_LTDC_Init+0xfc>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001582:	4b37      	ldr	r3, [pc, #220]	; (8001660 <MX_LTDC_Init+0xfc>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <MX_LTDC_Init+0xfc>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800158e:	4b34      	ldr	r3, [pc, #208]	; (8001660 <MX_LTDC_Init+0xfc>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <MX_LTDC_Init+0xfc>)
 8001596:	2228      	movs	r2, #40	; 0x28
 8001598:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <MX_LTDC_Init+0xfc>)
 800159c:	2209      	movs	r2, #9
 800159e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80015a0:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <MX_LTDC_Init+0xfc>)
 80015a2:	2235      	movs	r2, #53	; 0x35
 80015a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <MX_LTDC_Init+0xfc>)
 80015a8:	220b      	movs	r2, #11
 80015aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80015ac:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <MX_LTDC_Init+0xfc>)
 80015ae:	f240 2215 	movw	r2, #533	; 0x215
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <MX_LTDC_Init+0xfc>)
 80015b6:	f240 121b 	movw	r2, #283	; 0x11b
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <MX_LTDC_Init+0xfc>)
 80015be:	f240 2235 	movw	r2, #565	; 0x235
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <MX_LTDC_Init+0xfc>)
 80015c6:	f240 121d 	movw	r2, #285	; 0x11d
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <MX_LTDC_Init+0xfc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <MX_LTDC_Init+0xfc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_LTDC_Init+0xfc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015e4:	481e      	ldr	r0, [pc, #120]	; (8001660 <MX_LTDC_Init+0xfc>)
 80015e6:	f004 fa5f 	bl	8005aa8 <HAL_LTDC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80015f0:	f001 f828 	bl	8002644 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80015f8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015fc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001602:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001606:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001608:	2301      	movs	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800160c:	23ff      	movs	r3, #255	; 0xff
 800160e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001618:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800161a:	2305      	movs	r3, #5
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800161e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001624:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800162a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_LTDC_Init+0xfc>)
 800164a:	f004 fbb5 	bl	8005db8 <HAL_LTDC_ConfigLayer>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001654:	f000 fff6 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3738      	adds	r7, #56	; 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000c174 	.word	0x2000c174
 8001664:	40016800 	.word	0x40016800

08001668 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_QUADSPI_Init+0x50>)
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <MX_QUADSPI_Init+0x54>)
 8001670:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_QUADSPI_Init+0x50>)
 8001674:	22ff      	movs	r2, #255	; 0xff
 8001676:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_QUADSPI_Init+0x50>)
 800167a:	2201      	movs	r2, #1
 800167c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_QUADSPI_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_QUADSPI_Init+0x50>)
 8001686:	2201      	movs	r2, #1
 8001688:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_QUADSPI_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_QUADSPI_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_QUADSPI_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_QUADSPI_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_QUADSPI_Init+0x50>)
 80016a4:	f004 fdf8 	bl	8006298 <HAL_QSPI_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80016ae:	f000 ffc9 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000c554 	.word	0x2000c554
 80016bc:	a0001000 	.word	0xa0001000

080016c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b092      	sub	sp, #72	; 0x48
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80016dc:	463b      	mov	r3, r7
 80016de:	222c      	movs	r2, #44	; 0x2c
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f023 ffcb 	bl	802567e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80016e8:	4b47      	ldr	r3, [pc, #284]	; (8001808 <MX_RTC_Init+0x148>)
 80016ea:	4a48      	ldr	r2, [pc, #288]	; (800180c <MX_RTC_Init+0x14c>)
 80016ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <MX_RTC_Init+0x148>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <MX_RTC_Init+0x148>)
 80016f6:	227f      	movs	r2, #127	; 0x7f
 80016f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <MX_RTC_Init+0x148>)
 80016fc:	22ff      	movs	r2, #255	; 0xff
 80016fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <MX_RTC_Init+0x148>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <MX_RTC_Init+0x148>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800170c:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <MX_RTC_Init+0x148>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001712:	483d      	ldr	r0, [pc, #244]	; (8001808 <MX_RTC_Init+0x148>)
 8001714:	f006 f84c 	bl	80077b0 <HAL_RTC_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800171e:	f000 ff91 	bl	8002644 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800173c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001740:	2201      	movs	r2, #1
 8001742:	4619      	mov	r1, r3
 8001744:	4830      	ldr	r0, [pc, #192]	; (8001808 <MX_RTC_Init+0x148>)
 8001746:	f006 f8af 	bl	80078a8 <HAL_RTC_SetTime>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001750:	f000 ff78 	bl	8002644 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001766:	2300      	movs	r3, #0
 8001768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800176c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	4824      	ldr	r0, [pc, #144]	; (8001808 <MX_RTC_Init+0x148>)
 8001776:	f006 f955 	bl	8007a24 <HAL_RTC_SetDate>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001780:	f000 ff60 	bl	8002644 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001784:	2300      	movs	r3, #0
 8001786:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001788:	2300      	movs	r3, #0
 800178a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800178c:	2300      	movs	r3, #0
 800178e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017b4:	463b      	mov	r3, r7
 80017b6:	2201      	movs	r2, #1
 80017b8:	4619      	mov	r1, r3
 80017ba:	4813      	ldr	r0, [pc, #76]	; (8001808 <MX_RTC_Init+0x148>)
 80017bc:	f006 f9da 	bl	8007b74 <HAL_RTC_SetAlarm>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80017c6:	f000 ff3d 	bl	8002644 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 80017d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017d6:	463b      	mov	r3, r7
 80017d8:	2201      	movs	r2, #1
 80017da:	4619      	mov	r1, r3
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <MX_RTC_Init+0x148>)
 80017de:	f006 f9c9 	bl	8007b74 <HAL_RTC_SetAlarm>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 80017e8:	f000 ff2c 	bl	8002644 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80017ec:	2202      	movs	r2, #2
 80017ee:	2100      	movs	r1, #0
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_RTC_Init+0x148>)
 80017f2:	f006 fb49 	bl	8007e88 <HAL_RTCEx_SetTimeStamp>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 80017fc:	f000 ff22 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	3748      	adds	r7, #72	; 0x48
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000c334 	.word	0x2000c334
 800180c:	40002800 	.word	0x40002800

08001810 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001814:	4b4d      	ldr	r3, [pc, #308]	; (800194c <MX_SAI2_Init+0x13c>)
 8001816:	4a4e      	ldr	r2, [pc, #312]	; (8001950 <MX_SAI2_Init+0x140>)
 8001818:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800181a:	4b4c      	ldr	r3, [pc, #304]	; (800194c <MX_SAI2_Init+0x13c>)
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001820:	4b4a      	ldr	r3, [pc, #296]	; (800194c <MX_SAI2_Init+0x13c>)
 8001822:	2200      	movs	r2, #0
 8001824:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001826:	4b49      	ldr	r3, [pc, #292]	; (800194c <MX_SAI2_Init+0x13c>)
 8001828:	2240      	movs	r2, #64	; 0x40
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800182c:	4b47      	ldr	r3, [pc, #284]	; (800194c <MX_SAI2_Init+0x13c>)
 800182e:	2200      	movs	r2, #0
 8001830:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <MX_SAI2_Init+0x13c>)
 8001834:	2200      	movs	r2, #0
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001838:	4b44      	ldr	r3, [pc, #272]	; (800194c <MX_SAI2_Init+0x13c>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800183e:	4b43      	ldr	r3, [pc, #268]	; (800194c <MX_SAI2_Init+0x13c>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001844:	4b41      	ldr	r3, [pc, #260]	; (800194c <MX_SAI2_Init+0x13c>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800184a:	4b40      	ldr	r3, [pc, #256]	; (800194c <MX_SAI2_Init+0x13c>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001850:	4b3e      	ldr	r3, [pc, #248]	; (800194c <MX_SAI2_Init+0x13c>)
 8001852:	4a40      	ldr	r2, [pc, #256]	; (8001954 <MX_SAI2_Init+0x144>)
 8001854:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001856:	4b3d      	ldr	r3, [pc, #244]	; (800194c <MX_SAI2_Init+0x13c>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800185c:	4b3b      	ldr	r3, [pc, #236]	; (800194c <MX_SAI2_Init+0x13c>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001862:	4b3a      	ldr	r3, [pc, #232]	; (800194c <MX_SAI2_Init+0x13c>)
 8001864:	2200      	movs	r2, #0
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001868:	4b38      	ldr	r3, [pc, #224]	; (800194c <MX_SAI2_Init+0x13c>)
 800186a:	2200      	movs	r2, #0
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <MX_SAI2_Init+0x13c>)
 8001870:	2208      	movs	r2, #8
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001874:	4b35      	ldr	r3, [pc, #212]	; (800194c <MX_SAI2_Init+0x13c>)
 8001876:	2201      	movs	r2, #1
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <MX_SAI2_Init+0x13c>)
 800187c:	2200      	movs	r2, #0
 800187e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001880:	4b32      	ldr	r3, [pc, #200]	; (800194c <MX_SAI2_Init+0x13c>)
 8001882:	2200      	movs	r2, #0
 8001884:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <MX_SAI2_Init+0x13c>)
 8001888:	2200      	movs	r2, #0
 800188a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <MX_SAI2_Init+0x13c>)
 800188e:	2200      	movs	r2, #0
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001892:	4b2e      	ldr	r3, [pc, #184]	; (800194c <MX_SAI2_Init+0x13c>)
 8001894:	2200      	movs	r2, #0
 8001896:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001898:	4b2c      	ldr	r3, [pc, #176]	; (800194c <MX_SAI2_Init+0x13c>)
 800189a:	2201      	movs	r2, #1
 800189c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <MX_SAI2_Init+0x13c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80018a4:	4829      	ldr	r0, [pc, #164]	; (800194c <MX_SAI2_Init+0x13c>)
 80018a6:	f006 fb45 	bl	8007f34 <HAL_SAI_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80018b0:	f000 fec8 	bl	8002644 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <MX_SAI2_Init+0x148>)
 80018b6:	4a29      	ldr	r2, [pc, #164]	; (800195c <MX_SAI2_Init+0x14c>)
 80018b8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80018ba:	4b27      	ldr	r3, [pc, #156]	; (8001958 <MX_SAI2_Init+0x148>)
 80018bc:	2200      	movs	r2, #0
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <MX_SAI2_Init+0x148>)
 80018c2:	2203      	movs	r2, #3
 80018c4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <MX_SAI2_Init+0x148>)
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <MX_SAI2_Init+0x148>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <MX_SAI2_Init+0x148>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <MX_SAI2_Init+0x148>)
 80018da:	2201      	movs	r2, #1
 80018dc:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <MX_SAI2_Init+0x148>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <MX_SAI2_Init+0x148>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <MX_SAI2_Init+0x148>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <MX_SAI2_Init+0x148>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <MX_SAI2_Init+0x148>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_SAI2_Init+0x148>)
 80018fe:	2200      	movs	r2, #0
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <MX_SAI2_Init+0x148>)
 8001904:	2208      	movs	r2, #8
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <MX_SAI2_Init+0x148>)
 800190a:	2201      	movs	r2, #1
 800190c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_SAI2_Init+0x148>)
 8001910:	2200      	movs	r2, #0
 8001912:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <MX_SAI2_Init+0x148>)
 8001916:	2200      	movs	r2, #0
 8001918:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_SAI2_Init+0x148>)
 800191c:	2200      	movs	r2, #0
 800191e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <MX_SAI2_Init+0x148>)
 8001922:	2200      	movs	r2, #0
 8001924:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_SAI2_Init+0x148>)
 8001928:	2200      	movs	r2, #0
 800192a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <MX_SAI2_Init+0x148>)
 800192e:	2201      	movs	r2, #1
 8001930:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_SAI2_Init+0x148>)
 8001934:	2200      	movs	r2, #0
 8001936:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_SAI2_Init+0x148>)
 800193a:	f006 fafb 	bl	8007f34 <HAL_SAI_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001944:	f000 fe7e 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000bfc8 	.word	0x2000bfc8
 8001950:	40015c04 	.word	0x40015c04
 8001954:	0002ee00 	.word	0x0002ee00
 8001958:	2000be4c 	.word	0x2000be4c
 800195c:	40015c24 	.word	0x40015c24

08001960 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_SDMMC1_SD_Init+0x38>)
 8001966:	4a0d      	ldr	r2, [pc, #52]	; (800199c <MX_SDMMC1_SD_Init+0x3c>)
 8001968:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_SDMMC1_SD_Init+0x38>)
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_SDMMC1_SD_Init+0x38>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_SDMMC1_SD_Init+0x38>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_SDMMC1_SD_Init+0x38>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <MX_SDMMC1_SD_Init+0x38>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <MX_SDMMC1_SD_Init+0x38>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	2000c070 	.word	0x2000c070
 800199c:	40012c00 	.word	0x40012c00

080019a0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019a6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80019aa:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <MX_SPDIFRX_Init+0x5c>)
 80019ea:	f007 fd37 	bl	800945c <HAL_SPDIFRX_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80019f4:	f000 fe26 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000bf7c 	.word	0x2000bf7c

08001a00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a06:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <MX_SPI2_Init+0x78>)
 8001a08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a32:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a4e:	2207      	movs	r2, #7
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_SPI2_Init+0x74>)
 8001a60:	f007 fd58 	bl	8009514 <HAL_SPI_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a6a:	f000 fdeb 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000bed8 	.word	0x2000bed8
 8001a78:	40003800 	.word	0x40003800

08001a7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b09a      	sub	sp, #104	; 0x68
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	615a      	str	r2, [r3, #20]
 8001aae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	222c      	movs	r2, #44	; 0x2c
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f023 fde1 	bl	802567e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001abc:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001abe:	4a44      	ldr	r2, [pc, #272]	; (8001bd0 <MX_TIM1_Init+0x154>)
 8001ac0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ac2:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac8:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ae6:	4839      	ldr	r0, [pc, #228]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001ae8:	f007 fda6 	bl	8009638 <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001af2:	f000 fda7 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001afc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b00:	4619      	mov	r1, r3
 8001b02:	4832      	ldr	r0, [pc, #200]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001b04:	f008 f850 	bl	8009ba8 <HAL_TIM_ConfigClockSource>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b0e:	f000 fd99 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b12:	482e      	ldr	r0, [pc, #184]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001b14:	f007 fde6 	bl	80096e4 <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b1e:	f000 fd91 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b32:	4619      	mov	r1, r3
 8001b34:	4825      	ldr	r0, [pc, #148]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001b36:	f008 fcb1 	bl	800a49c <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001b40:	f000 fd80 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b44:	2360      	movs	r3, #96	; 0x60
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4818      	ldr	r0, [pc, #96]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001b6a:	f007 ff05 	bl	8009978 <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001b74:	f000 fd66 	bl	8002644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001bae:	f008 fd03 	bl	800a5b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001bb8:	f000 fd44 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM1_Init+0x150>)
 8001bbe:	f001 fa3b 	bl	8003038 <HAL_TIM_MspPostInit>

}
 8001bc2:	bf00      	nop
 8001bc4:	3768      	adds	r7, #104	; 0x68
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000c354 	.word	0x2000c354
 8001bd0:	40010000 	.word	0x40010000

08001bd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08e      	sub	sp, #56	; 0x38
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c06:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c2c:	4823      	ldr	r0, [pc, #140]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c2e:	f007 fd03 	bl	8009638 <HAL_TIM_Base_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c38:	f000 fd04 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c46:	4619      	mov	r1, r3
 8001c48:	481c      	ldr	r0, [pc, #112]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c4a:	f007 ffad 	bl	8009ba8 <HAL_TIM_ConfigClockSource>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c54:	f000 fcf6 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c58:	4818      	ldr	r0, [pc, #96]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c5a:	f007 fd43 	bl	80096e4 <HAL_TIM_PWM_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c64:	f000 fcee 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4811      	ldr	r0, [pc, #68]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c78:	f008 fc10 	bl	800a49c <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c82:	f000 fcdf 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c86:	2360      	movs	r3, #96	; 0x60
 8001c88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4807      	ldr	r0, [pc, #28]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001c9e:	f007 fe6b 	bl	8009978 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ca8:	f000 fccc 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <MX_TIM2_Init+0xe8>)
 8001cae:	f001 f9c3 	bl	8003038 <HAL_TIM_MspPostInit>

}
 8001cb2:	bf00      	nop
 8001cb4:	3738      	adds	r7, #56	; 0x38
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000c45c 	.word	0x2000c45c

08001cc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08e      	sub	sp, #56	; 0x38
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	615a      	str	r2, [r3, #20]
 8001cf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001cf4:	4a2c      	ldr	r2, [pc, #176]	; (8001da8 <MX_TIM3_Init+0xe8>)
 8001cf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d16:	4823      	ldr	r0, [pc, #140]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001d18:	f007 fc8e 	bl	8009638 <HAL_TIM_Base_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d22:	f000 fc8f 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d30:	4619      	mov	r1, r3
 8001d32:	481c      	ldr	r0, [pc, #112]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001d34:	f007 ff38 	bl	8009ba8 <HAL_TIM_ConfigClockSource>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d3e:	f000 fc81 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d42:	4818      	ldr	r0, [pc, #96]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001d44:	f007 fcce 	bl	80096e4 <HAL_TIM_PWM_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d4e:	f000 fc79 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4810      	ldr	r0, [pc, #64]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001d62:	f008 fb9b 	bl	800a49c <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d6c:	f000 fc6a 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d70:	2360      	movs	r3, #96	; 0x60
 8001d72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d80:	463b      	mov	r3, r7
 8001d82:	2200      	movs	r2, #0
 8001d84:	4619      	mov	r1, r3
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001d88:	f007 fdf6 	bl	8009978 <HAL_TIM_PWM_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d92:	f000 fc57 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d96:	4803      	ldr	r0, [pc, #12]	; (8001da4 <MX_TIM3_Init+0xe4>)
 8001d98:	f001 f94e 	bl	8003038 <HAL_TIM_MspPostInit>

}
 8001d9c:	bf00      	nop
 8001d9e:	3738      	adds	r7, #56	; 0x38
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2000c134 	.word	0x2000c134
 8001da8:	40000400 	.word	0x40000400

08001dac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dcc:	463b      	mov	r3, r7
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
 8001dd8:	611a      	str	r2, [r3, #16]
 8001dda:	615a      	str	r2, [r3, #20]
 8001ddc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dde:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001de0:	4a2c      	ldr	r2, [pc, #176]	; (8001e94 <MX_TIM5_Init+0xe8>)
 8001de2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dea:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e02:	4823      	ldr	r0, [pc, #140]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001e04:	f007 fc18 	bl	8009638 <HAL_TIM_Base_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001e0e:	f000 fc19 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481c      	ldr	r0, [pc, #112]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001e20:	f007 fec2 	bl	8009ba8 <HAL_TIM_ConfigClockSource>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001e2a:	f000 fc0b 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e2e:	4818      	ldr	r0, [pc, #96]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001e30:	f007 fc58 	bl	80096e4 <HAL_TIM_PWM_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001e3a:	f000 fc03 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4810      	ldr	r0, [pc, #64]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001e4e:	f008 fb25 	bl	800a49c <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001e58:	f000 fbf4 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5c:	2360      	movs	r3, #96	; 0x60
 8001e5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	220c      	movs	r2, #12
 8001e70:	4619      	mov	r1, r3
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001e74:	f007 fd80 	bl	8009978 <HAL_TIM_PWM_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001e7e:	f000 fbe1 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e82:	4803      	ldr	r0, [pc, #12]	; (8001e90 <MX_TIM5_Init+0xe4>)
 8001e84:	f001 f8d8 	bl	8003038 <HAL_TIM_MspPostInit>

}
 8001e88:	bf00      	nop
 8001e8a:	3738      	adds	r7, #56	; 0x38
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2000c0f4 	.word	0x2000c0f4
 8001e94:	40000c00 	.word	0x40000c00

08001e98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <MX_TIM8_Init+0x9c>)
 8001eb8:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <MX_TIM8_Init+0xa0>)
 8001eba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <MX_TIM8_Init+0x9c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <MX_TIM8_Init+0x9c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <MX_TIM8_Init+0x9c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <MX_TIM8_Init+0x9c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <MX_TIM8_Init+0x9c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_TIM8_Init+0x9c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ee0:	4814      	ldr	r0, [pc, #80]	; (8001f34 <MX_TIM8_Init+0x9c>)
 8001ee2:	f007 fba9 	bl	8009638 <HAL_TIM_Base_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001eec:	f000 fbaa 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	4619      	mov	r1, r3
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <MX_TIM8_Init+0x9c>)
 8001efe:	f007 fe53 	bl	8009ba8 <HAL_TIM_ConfigClockSource>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001f08:	f000 fb9c 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_TIM8_Init+0x9c>)
 8001f1e:	f008 fabd 	bl	800a49c <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001f28:	f000 fb8c 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	3720      	adds	r7, #32
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000bf3c 	.word	0x2000bf3c
 8001f38:	40010400 	.word	0x40010400

08001f3c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
 8001f50:	615a      	str	r2, [r3, #20]
 8001f52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <MX_TIM12_Init+0x80>)
 8001f56:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <MX_TIM12_Init+0x84>)
 8001f58:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_TIM12_Init+0x80>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <MX_TIM12_Init+0x80>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_TIM12_Init+0x80>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_TIM12_Init+0x80>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_TIM12_Init+0x80>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f78:	4810      	ldr	r0, [pc, #64]	; (8001fbc <MX_TIM12_Init+0x80>)
 8001f7a:	f007 fbb3 	bl	80096e4 <HAL_TIM_PWM_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001f84:	f000 fb5e 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f88:	2360      	movs	r3, #96	; 0x60
 8001f8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4807      	ldr	r0, [pc, #28]	; (8001fbc <MX_TIM12_Init+0x80>)
 8001fa0:	f007 fcea 	bl	8009978 <HAL_TIM_PWM_ConfigChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001faa:	f000 fb4b 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001fae:	4803      	ldr	r0, [pc, #12]	; (8001fbc <MX_TIM12_Init+0x80>)
 8001fb0:	f001 f842 	bl	8003038 <HAL_TIM_MspPostInit>

}
 8001fb4:	bf00      	nop
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000c4c4 	.word	0x2000c4c4
 8001fc0:	40001800 	.word	0x40001800

08001fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fca:	4a15      	ldr	r2, [pc, #84]	; (8002020 <MX_USART1_UART_Init+0x5c>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USART1_UART_Init+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_USART1_UART_Init+0x58>)
 8002008:	f008 fb72 	bl	800a6f0 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002012:	f000 fb17 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000c2b4 	.word	0x2000c2b4
 8002020:	40011000 	.word	0x40011000

08002024 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <MX_USART6_UART_Init+0x58>)
 800202a:	4a15      	ldr	r2, [pc, #84]	; (8002080 <MX_USART6_UART_Init+0x5c>)
 800202c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <MX_USART6_UART_Init+0x58>)
 8002030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002034:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <MX_USART6_UART_Init+0x58>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MX_USART6_UART_Init+0x58>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_USART6_UART_Init+0x58>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MX_USART6_UART_Init+0x58>)
 800204a:	220c      	movs	r2, #12
 800204c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <MX_USART6_UART_Init+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_USART6_UART_Init+0x58>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <MX_USART6_UART_Init+0x58>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_USART6_UART_Init+0x58>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_USART6_UART_Init+0x58>)
 8002068:	f008 fb42 	bl	800a6f0 <HAL_UART_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002072:	f000 fae7 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000c394 	.word	0x2000c394
 8002080:	40011400 	.word	0x40011400

08002084 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
 8002098:	615a      	str	r2, [r3, #20]
 800209a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800209c:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <MX_FMC_Init+0x14c>)
 800209e:	4a4d      	ldr	r2, [pc, #308]	; (80021d4 <MX_FMC_Init+0x150>)
 80020a0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80020a2:	4b4b      	ldr	r3, [pc, #300]	; (80021d0 <MX_FMC_Init+0x14c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80020a8:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <MX_FMC_Init+0x14c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80020ae:	4b48      	ldr	r3, [pc, #288]	; (80021d0 <MX_FMC_Init+0x14c>)
 80020b0:	2204      	movs	r2, #4
 80020b2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80020b4:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <MX_FMC_Init+0x14c>)
 80020b6:	2210      	movs	r2, #16
 80020b8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80020ba:	4b45      	ldr	r3, [pc, #276]	; (80021d0 <MX_FMC_Init+0x14c>)
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80020c0:	4b43      	ldr	r3, [pc, #268]	; (80021d0 <MX_FMC_Init+0x14c>)
 80020c2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80020c6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80020c8:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <MX_FMC_Init+0x14c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <MX_FMC_Init+0x14c>)
 80020d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80020d6:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <MX_FMC_Init+0x14c>)
 80020d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80020de:	4b3c      	ldr	r3, [pc, #240]	; (80021d0 <MX_FMC_Init+0x14c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80020e4:	2302      	movs	r3, #2
 80020e6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80020e8:	2307      	movs	r3, #7
 80020ea:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80020ec:	2304      	movs	r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80020f0:	2307      	movs	r3, #7
 80020f2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80020f4:	2303      	movs	r3, #3
 80020f6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80020fc:	2302      	movs	r3, #2
 80020fe:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4832      	ldr	r0, [pc, #200]	; (80021d0 <MX_FMC_Init+0x14c>)
 8002106:	f007 f929 	bl	800935c <HAL_SDRAM_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002110:	f000 fa98 	bl	8002644 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <MX_FMC_Init+0x154>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800211e:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <MX_FMC_Init+0x154>)
 8002120:	2210      	movs	r2, #16
 8002122:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002124:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <MX_FMC_Init+0x154>)
 8002126:	2201      	movs	r2, #1
 8002128:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800212a:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <MX_FMC_Init+0x154>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002134:	4928      	ldr	r1, [pc, #160]	; (80021d8 <MX_FMC_Init+0x154>)
 8002136:	4826      	ldr	r0, [pc, #152]	; (80021d0 <MX_FMC_Init+0x14c>)
 8002138:	f007 f944 	bl	80093c4 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800213c:	2001      	movs	r0, #1
 800213e:	f001 fba3 	bl	8003888 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002142:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <MX_FMC_Init+0x154>)
 8002144:	2202      	movs	r2, #2
 8002146:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <MX_FMC_Init+0x154>)
 800214a:	2210      	movs	r2, #16
 800214c:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <MX_FMC_Init+0x154>)
 8002150:	2201      	movs	r2, #1
 8002152:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002154:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_FMC_Init+0x154>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800215a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800215e:	491e      	ldr	r1, [pc, #120]	; (80021d8 <MX_FMC_Init+0x154>)
 8002160:	481b      	ldr	r0, [pc, #108]	; (80021d0 <MX_FMC_Init+0x14c>)
 8002162:	f007 f92f 	bl	80093c4 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <MX_FMC_Init+0x154>)
 8002168:	2203      	movs	r2, #3
 800216a:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_FMC_Init+0x154>)
 800216e:	2210      	movs	r2, #16
 8002170:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8002172:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <MX_FMC_Init+0x154>)
 8002174:	2208      	movs	r2, #8
 8002176:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <MX_FMC_Init+0x154>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800217e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002182:	4915      	ldr	r1, [pc, #84]	; (80021d8 <MX_FMC_Init+0x154>)
 8002184:	4812      	ldr	r0, [pc, #72]	; (80021d0 <MX_FMC_Init+0x14c>)
 8002186:	f007 f91d 	bl	80093c4 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800218a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800218e:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <MX_FMC_Init+0x154>)
 8002192:	2204      	movs	r2, #4
 8002194:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <MX_FMC_Init+0x154>)
 8002198:	2210      	movs	r2, #16
 800219a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <MX_FMC_Init+0x154>)
 800219e:	2201      	movs	r2, #1
 80021a0:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <MX_FMC_Init+0x154>)
 80021a6:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80021a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ac:	490a      	ldr	r1, [pc, #40]	; (80021d8 <MX_FMC_Init+0x154>)
 80021ae:	4808      	ldr	r0, [pc, #32]	; (80021d0 <MX_FMC_Init+0x14c>)
 80021b0:	f007 f908 	bl	80093c4 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80021b4:	f240 712b 	movw	r1, #1835	; 0x72b
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_FMC_Init+0x14c>)
 80021ba:	f007 f92e 	bl	800941a <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80021be:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80021c2:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80021c6:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 80021c8:	bf00      	nop
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000c504 	.word	0x2000c504
 80021d4:	a0000140 	.word	0xa0000140
 80021d8:	20000384 	.word	0x20000384

080021dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b090      	sub	sp, #64	; 0x40
 80021e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021f2:	4baf      	ldr	r3, [pc, #700]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4aae      	ldr	r2, [pc, #696]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80021f8:	f043 0310 	orr.w	r3, r3, #16
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4bac      	ldr	r3, [pc, #688]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800220a:	4ba9      	ldr	r3, [pc, #676]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4aa8      	ldr	r2, [pc, #672]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4ba6      	ldr	r3, [pc, #664]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	4ba3      	ldr	r3, [pc, #652]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4aa2      	ldr	r2, [pc, #648]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4ba0      	ldr	r3, [pc, #640]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800223a:	4b9d      	ldr	r3, [pc, #628]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a9c      	ldr	r2, [pc, #624]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b9a      	ldr	r3, [pc, #616]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002252:	4b97      	ldr	r3, [pc, #604]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a96      	ldr	r2, [pc, #600]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b94      	ldr	r3, [pc, #592]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	4b91      	ldr	r3, [pc, #580]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a90      	ldr	r2, [pc, #576]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b8e      	ldr	r3, [pc, #568]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002282:	4b8b      	ldr	r3, [pc, #556]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a8a      	ldr	r2, [pc, #552]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002288:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b88      	ldr	r3, [pc, #544]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800229a:	4b85      	ldr	r3, [pc, #532]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a84      	ldr	r2, [pc, #528]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b82      	ldr	r3, [pc, #520]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80022b2:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a7e      	ldr	r2, [pc, #504]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b7c      	ldr	r3, [pc, #496]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ca:	4b79      	ldr	r3, [pc, #484]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a78      	ldr	r2, [pc, #480]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022d0:	f043 0320 	orr.w	r3, r3, #32
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b76      	ldr	r3, [pc, #472]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e2:	4b73      	ldr	r3, [pc, #460]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a72      	ldr	r2, [pc, #456]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b70      	ldr	r3, [pc, #448]	; (80024b0 <MX_GPIO_Init+0x2d4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80022fa:	2201      	movs	r2, #1
 80022fc:	2120      	movs	r1, #32
 80022fe:	486d      	ldr	r0, [pc, #436]	; (80024b4 <MX_GPIO_Init+0x2d8>)
 8002300:	f003 fbb8 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
 8002306:	210c      	movs	r1, #12
 8002308:	486b      	ldr	r0, [pc, #428]	; (80024b8 <MX_GPIO_Init+0x2dc>)
 800230a:	f003 fbb3 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	2108      	movs	r1, #8
 8002312:	486a      	ldr	r0, [pc, #424]	; (80024bc <MX_GPIO_Init+0x2e0>)
 8002314:	f003 fbae 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002318:	2201      	movs	r2, #1
 800231a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800231e:	4866      	ldr	r0, [pc, #408]	; (80024b8 <MX_GPIO_Init+0x2dc>)
 8002320:	f003 fba8 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800232a:	4865      	ldr	r0, [pc, #404]	; (80024c0 <MX_GPIO_Init+0x2e4>)
 800232c:	f003 fba2 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	21c8      	movs	r1, #200	; 0xc8
 8002334:	4863      	ldr	r0, [pc, #396]	; (80024c4 <MX_GPIO_Init+0x2e8>)
 8002336:	f003 fb9d 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800233a:	2308      	movs	r3, #8
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233e:	2300      	movs	r3, #0
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234a:	4619      	mov	r1, r3
 800234c:	485e      	ldr	r0, [pc, #376]	; (80024c8 <MX_GPIO_Init+0x2ec>)
 800234e:	f003 f9cf 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002352:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002364:	230b      	movs	r3, #11
 8002366:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236c:	4619      	mov	r1, r3
 800236e:	4855      	ldr	r0, [pc, #340]	; (80024c4 <MX_GPIO_Init+0x2e8>)
 8002370:	f003 f9be 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8002374:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002386:	230a      	movs	r3, #10
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800238e:	4619      	mov	r1, r3
 8002390:	484e      	ldr	r0, [pc, #312]	; (80024cc <MX_GPIO_Init+0x2f0>)
 8002392:	f003 f9ad 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239c:	2300      	movs	r3, #0
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a8:	4619      	mov	r1, r3
 80023aa:	4849      	ldr	r0, [pc, #292]	; (80024d0 <MX_GPIO_Init+0x2f4>)
 80023ac:	f003 f9a0 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80023b0:	2340      	movs	r3, #64	; 0x40
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023b4:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <MX_GPIO_Init+0x2f8>)
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c0:	4619      	mov	r1, r3
 80023c2:	483c      	ldr	r0, [pc, #240]	; (80024b4 <MX_GPIO_Init+0x2d8>)
 80023c4:	f003 f994 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80023c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023da:	230a      	movs	r3, #10
 80023dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e2:	4619      	mov	r1, r3
 80023e4:	483c      	ldr	r0, [pc, #240]	; (80024d8 <MX_GPIO_Init+0x2fc>)
 80023e6:	f003 f983 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80023ea:	2320      	movs	r3, #32
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fe:	4619      	mov	r1, r3
 8002400:	482c      	ldr	r0, [pc, #176]	; (80024b4 <MX_GPIO_Init+0x2d8>)
 8002402:	f003 f975 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002406:	f241 030c 	movw	r3, #4108	; 0x100c
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	2301      	movs	r3, #1
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241c:	4619      	mov	r1, r3
 800241e:	4826      	ldr	r0, [pc, #152]	; (80024b8 <MX_GPIO_Init+0x2dc>)
 8002420:	f003 f966 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242a:	2300      	movs	r3, #0
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002436:	4619      	mov	r1, r3
 8002438:	4828      	ldr	r0, [pc, #160]	; (80024dc <MX_GPIO_Init+0x300>)
 800243a:	f003 f959 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800243e:	2308      	movs	r3, #8
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002442:	2301      	movs	r3, #1
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002452:	4619      	mov	r1, r3
 8002454:	4819      	ldr	r0, [pc, #100]	; (80024bc <MX_GPIO_Init+0x2e0>)
 8002456:	f003 f94b 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800245a:	2310      	movs	r3, #16
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245e:	2300      	movs	r3, #0
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246a:	4619      	mov	r1, r3
 800246c:	4811      	ldr	r0, [pc, #68]	; (80024b4 <MX_GPIO_Init+0x2d8>)
 800246e:	f003 f93f 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002472:	f248 0304 	movw	r3, #32772	; 0x8004
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002478:	2300      	movs	r3, #0
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002484:	4619      	mov	r1, r3
 8002486:	480e      	ldr	r0, [pc, #56]	; (80024c0 <MX_GPIO_Init+0x2e4>)
 8002488:	f003 f932 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800248c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002492:	2301      	movs	r3, #1
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800249e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a2:	4619      	mov	r1, r3
 80024a4:	4806      	ldr	r0, [pc, #24]	; (80024c0 <MX_GPIO_Init+0x2e4>)
 80024a6:	f003 f923 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80024aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ae:	e017      	b.n	80024e0 <MX_GPIO_Init+0x304>
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40022800 	.word	0x40022800
 80024c0:	40021c00 	.word	0x40021c00
 80024c4:	40021800 	.word	0x40021800
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40020400 	.word	0x40020400
 80024d0:	40022400 	.word	0x40022400
 80024d4:	10120000 	.word	0x10120000
 80024d8:	40020000 	.word	0x40020000
 80024dc:	40020800 	.word	0x40020800
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024e2:	4b44      	ldr	r3, [pc, #272]	; (80025f4 <MX_GPIO_Init+0x418>)
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80024ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ee:	4619      	mov	r1, r3
 80024f0:	4841      	ldr	r0, [pc, #260]	; (80025f8 <MX_GPIO_Init+0x41c>)
 80024f2:	f003 f8fd 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80024f6:	2310      	movs	r3, #16
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002506:	230a      	movs	r3, #10
 8002508:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250e:	4619      	mov	r1, r3
 8002510:	483a      	ldr	r0, [pc, #232]	; (80025fc <MX_GPIO_Init+0x420>)
 8002512:	f003 f8ed 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002516:	23c8      	movs	r3, #200	; 0xc8
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251a:	2301      	movs	r3, #1
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252a:	4619      	mov	r1, r3
 800252c:	4834      	ldr	r0, [pc, #208]	; (8002600 <MX_GPIO_Init+0x424>)
 800252e:	f003 f8df 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002532:	2305      	movs	r3, #5
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002542:	230a      	movs	r3, #10
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	482d      	ldr	r0, [pc, #180]	; (8002604 <MX_GPIO_Init+0x428>)
 800254e:	f003 f8cf 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002552:	2332      	movs	r3, #50	; 0x32
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002562:	230b      	movs	r3, #11
 8002564:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256a:	4619      	mov	r1, r3
 800256c:	4825      	ldr	r0, [pc, #148]	; (8002604 <MX_GPIO_Init+0x428>)
 800256e:	f003 f8bf 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002572:	2304      	movs	r3, #4
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002576:	2300      	movs	r3, #0
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002582:	4619      	mov	r1, r3
 8002584:	481e      	ldr	r0, [pc, #120]	; (8002600 <MX_GPIO_Init+0x424>)
 8002586:	f003 f8b3 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800258a:	2386      	movs	r3, #134	; 0x86
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800259a:	230b      	movs	r3, #11
 800259c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a2:	4619      	mov	r1, r3
 80025a4:	4818      	ldr	r0, [pc, #96]	; (8002608 <MX_GPIO_Init+0x42c>)
 80025a6:	f003 f8a3 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80025aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b0:	2312      	movs	r3, #18
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b4:	2301      	movs	r3, #1
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025bc:	2304      	movs	r3, #4
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c4:	4619      	mov	r1, r3
 80025c6:	480d      	ldr	r0, [pc, #52]	; (80025fc <MX_GPIO_Init+0x420>)
 80025c8:	f003 f892 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80025cc:	2328      	movs	r3, #40	; 0x28
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025dc:	230a      	movs	r3, #10
 80025de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e4:	4619      	mov	r1, r3
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <MX_GPIO_Init+0x42c>)
 80025e8:	f003 f882 	bl	80056f0 <HAL_GPIO_Init>

}
 80025ec:	bf00      	nop
 80025ee:	3740      	adds	r7, #64	; 0x40
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	10120000 	.word	0x10120000
 80025f8:	40022000 	.word	0x40022000
 80025fc:	40021c00 	.word	0x40021c00
 8002600:	40021800 	.word	0x40021800
 8002604:	40020800 	.word	0x40020800
 8002608:	40020000 	.word	0x40020000

0800260c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8002614:	f00c fba4 	bl	800ed60 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002618:	2001      	movs	r0, #1
 800261a:	f009 fe6d 	bl	800c2f8 <osDelay>
 800261e:	e7fb      	b.n	8002618 <StartDefaultTask+0xc>

08002620 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002632:	f001 f909 	bl	8003848 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40001000 	.word	0x40001000

08002644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_MspInit+0x4c>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <HAL_MspInit+0x4c>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_MspInit+0x4c>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_MspInit+0x4c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_MspInit+0x4c>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_MspInit+0x4c>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	210f      	movs	r1, #15
 800268e:	f06f 0001 	mvn.w	r0, #1
 8002692:	f002 f9ff 	bl	8004a94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800

080026a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a21      	ldr	r2, [pc, #132]	; (8002748 <HAL_ADC_MspInit+0xa4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d13c      	bne.n	8002740 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026c6:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_ADC_MspInit+0xa8>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a20      	ldr	r2, [pc, #128]	; (800274c <HAL_ADC_MspInit+0xa8>)
 80026cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <HAL_ADC_MspInit+0xa8>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_ADC_MspInit+0xa8>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_ADC_MspInit+0xa8>)
 80026e4:	f043 0320 	orr.w	r3, r3, #32
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_ADC_MspInit+0xa8>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_ADC_MspInit+0xa8>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a14      	ldr	r2, [pc, #80]	; (800274c <HAL_ADC_MspInit+0xa8>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_ADC_MspInit+0xa8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800270e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002712:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002714:	2303      	movs	r3, #3
 8002716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4619      	mov	r1, r3
 8002722:	480b      	ldr	r0, [pc, #44]	; (8002750 <HAL_ADC_MspInit+0xac>)
 8002724:	f002 ffe4 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002728:	2301      	movs	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800272c:	2303      	movs	r3, #3
 800272e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	4806      	ldr	r0, [pc, #24]	; (8002754 <HAL_ADC_MspInit+0xb0>)
 800273c:	f002 ffd8 	bl	80056f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40012200 	.word	0x40012200
 800274c:	40023800 	.word	0x40023800
 8002750:	40021400 	.word	0x40021400
 8002754:	40020000 	.word	0x40020000

08002758 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	; 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <HAL_CAN_MspInit+0x8c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d130      	bne.n	80027dc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_CAN_MspInit+0x90>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <HAL_CAN_MspInit+0x90>)
 8002780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_CAN_MspInit+0x90>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_CAN_MspInit+0x90>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <HAL_CAN_MspInit+0x90>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_CAN_MspInit+0x90>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80027bc:	2309      	movs	r3, #9
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	4809      	ldr	r0, [pc, #36]	; (80027ec <HAL_CAN_MspInit+0x94>)
 80027c8:	f002 ff92 	bl	80056f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2105      	movs	r1, #5
 80027d0:	2014      	movs	r0, #20
 80027d2:	f002 f95f 	bl	8004a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80027d6:	2014      	movs	r0, #20
 80027d8:	f002 f978 	bl	8004acc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80027dc:	bf00      	nop
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40006400 	.word	0x40006400
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020400 	.word	0x40020400

080027f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_CRC_MspInit+0x38>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d10b      	bne.n	800281a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_CRC_MspInit+0x3c>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a09      	ldr	r2, [pc, #36]	; (800282c <HAL_CRC_MspInit+0x3c>)
 8002808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_CRC_MspInit+0x3c>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40023000 	.word	0x40023000
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08e      	sub	sp, #56	; 0x38
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a50      	ldr	r2, [pc, #320]	; (8002990 <HAL_DCMI_MspInit+0x160>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f040 809a 	bne.w	8002988 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002854:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	4a4e      	ldr	r2, [pc, #312]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6353      	str	r3, [r2, #52]	; 0x34
 8002860:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 8002862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800286c:	4b49      	ldr	r3, [pc, #292]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	4a48      	ldr	r2, [pc, #288]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 8002872:	f043 0310 	orr.w	r3, r3, #16
 8002876:	6313      	str	r3, [r2, #48]	; 0x30
 8002878:	4b46      	ldr	r3, [pc, #280]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002884:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	4a42      	ldr	r2, [pc, #264]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	6313      	str	r3, [r2, #48]	; 0x30
 8002890:	4b40      	ldr	r3, [pc, #256]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800289c:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	4a3c      	ldr	r2, [pc, #240]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 80028a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a6:	6313      	str	r3, [r2, #48]	; 0x30
 80028a8:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80028b4:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	4a36      	ldr	r2, [pc, #216]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 80028ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028be:	6313      	str	r3, [r2, #48]	; 0x30
 80028c0:	4b34      	ldr	r3, [pc, #208]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028cc:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	4a30      	ldr	r2, [pc, #192]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6313      	str	r3, [r2, #48]	; 0x30
 80028d8:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_DCMI_MspInit+0x164>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80028e4:	2360      	movs	r3, #96	; 0x60
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028f4:	230d      	movs	r3, #13
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fc:	4619      	mov	r1, r3
 80028fe:	4826      	ldr	r0, [pc, #152]	; (8002998 <HAL_DCMI_MspInit+0x168>)
 8002900:	f002 fef6 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002904:	2308      	movs	r3, #8
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002914:	230d      	movs	r3, #13
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291c:	4619      	mov	r1, r3
 800291e:	481f      	ldr	r0, [pc, #124]	; (800299c <HAL_DCMI_MspInit+0x16c>)
 8002920:	f002 fee6 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2300      	movs	r3, #0
 8002934:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002936:	230d      	movs	r3, #13
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800293a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293e:	4619      	mov	r1, r3
 8002940:	4817      	ldr	r0, [pc, #92]	; (80029a0 <HAL_DCMI_MspInit+0x170>)
 8002942:	f002 fed5 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002946:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002958:	230d      	movs	r3, #13
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800295c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002960:	4619      	mov	r1, r3
 8002962:	4810      	ldr	r0, [pc, #64]	; (80029a4 <HAL_DCMI_MspInit+0x174>)
 8002964:	f002 fec4 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002968:	2350      	movs	r3, #80	; 0x50
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002978:	230d      	movs	r3, #13
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002980:	4619      	mov	r1, r3
 8002982:	4809      	ldr	r0, [pc, #36]	; (80029a8 <HAL_DCMI_MspInit+0x178>)
 8002984:	f002 feb4 	bl	80056f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002988:	bf00      	nop
 800298a:	3738      	adds	r7, #56	; 0x38
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	50050000 	.word	0x50050000
 8002994:	40023800 	.word	0x40023800
 8002998:	40021000 	.word	0x40021000
 800299c:	40020c00 	.word	0x40020c00
 80029a0:	40021800 	.word	0x40021800
 80029a4:	40021c00 	.word	0x40021c00
 80029a8:	40020000 	.word	0x40020000

080029ac <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_DMA2D_MspInit+0x44>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d113      	bne.n	80029e6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <HAL_DMA2D_MspInit+0x48>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <HAL_DMA2D_MspInit+0x48>)
 80029c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_DMA2D_MspInit+0x48>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2105      	movs	r1, #5
 80029da:	205a      	movs	r0, #90	; 0x5a
 80029dc:	f002 f85a 	bl	8004a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80029e0:	205a      	movs	r0, #90	; 0x5a
 80029e2:	f002 f873 	bl	8004acc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	4002b000 	.word	0x4002b000
 80029f4:	40023800 	.word	0x40023800

080029f8 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_DMA2D_MspDeInit+0x2c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d108      	bne.n	8002a1c <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002a0a:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_DMA2D_MspDeInit+0x30>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <HAL_DMA2D_MspDeInit+0x30>)
 8002a10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002a16:	205a      	movs	r0, #90	; 0x5a
 8002a18:	f002 f866 	bl	8004ae8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	4002b000 	.word	0x4002b000
 8002a28:	40023800 	.word	0x40023800

08002a2c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	; 0x38
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a55      	ldr	r2, [pc, #340]	; (8002ba0 <HAL_LTDC_MspInit+0x174>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	f040 80a3 	bne.w	8002b96 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a50:	4b54      	ldr	r3, [pc, #336]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	4a53      	ldr	r2, [pc, #332]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5c:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a68:	4b4e      	ldr	r3, [pc, #312]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a6e:	f043 0310 	orr.w	r3, r3, #16
 8002a72:	6313      	str	r3, [r2, #48]	; 0x30
 8002a74:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a80:	4b48      	ldr	r3, [pc, #288]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4a47      	ldr	r2, [pc, #284]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8c:	4b45      	ldr	r3, [pc, #276]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a98:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	4a41      	ldr	r2, [pc, #260]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa4:	4b3f      	ldr	r3, [pc, #252]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aba:	6313      	str	r3, [r2, #48]	; 0x30
 8002abc:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4a35      	ldr	r2, [pc, #212]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad4:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <HAL_LTDC_MspInit+0x178>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002af0:	230e      	movs	r3, #14
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af8:	4619      	mov	r1, r3
 8002afa:	482b      	ldr	r0, [pc, #172]	; (8002ba8 <HAL_LTDC_MspInit+0x17c>)
 8002afc:	f002 fdf8 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002b00:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b12:	230e      	movs	r3, #14
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4823      	ldr	r0, [pc, #140]	; (8002bac <HAL_LTDC_MspInit+0x180>)
 8002b1e:	f002 fde7 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002b22:	23f7      	movs	r3, #247	; 0xf7
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b26:	2302      	movs	r3, #2
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b32:	230e      	movs	r3, #14
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	481c      	ldr	r0, [pc, #112]	; (8002bb0 <HAL_LTDC_MspInit+0x184>)
 8002b3e:	f002 fdd7 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b54:	2309      	movs	r3, #9
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4815      	ldr	r0, [pc, #84]	; (8002bb4 <HAL_LTDC_MspInit+0x188>)
 8002b60:	f002 fdc6 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002b64:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b76:	230e      	movs	r3, #14
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7e:	4619      	mov	r1, r3
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <HAL_LTDC_MspInit+0x18c>)
 8002b82:	f002 fdb5 	bl	80056f0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2105      	movs	r1, #5
 8002b8a:	2058      	movs	r0, #88	; 0x58
 8002b8c:	f001 ff82 	bl	8004a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002b90:	2058      	movs	r0, #88	; 0x58
 8002b92:	f001 ff9b 	bl	8004acc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002b96:	bf00      	nop
 8002b98:	3738      	adds	r7, #56	; 0x38
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40016800 	.word	0x40016800
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40022400 	.word	0x40022400
 8002bb0:	40022800 	.word	0x40022800
 8002bb4:	40021800 	.word	0x40021800
 8002bb8:	40022000 	.word	0x40022000

08002bbc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 031c 	add.w	r3, r7, #28
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a3b      	ldr	r2, [pc, #236]	; (8002cc8 <HAL_QSPI_MspInit+0x10c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d170      	bne.n	8002cc0 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	4a3a      	ldr	r2, [pc, #232]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	6393      	str	r3, [r2, #56]	; 0x38
 8002bea:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bf6:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a34      	ldr	r2, [pc, #208]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002bfc:	f043 0310 	orr.w	r3, r3, #16
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	4a2e      	ldr	r2, [pc, #184]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002c2c:	f043 0308 	orr.w	r3, r3, #8
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_QSPI_MspInit+0x110>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002c3e:	2304      	movs	r3, #4
 8002c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c4e:	2309      	movs	r3, #9
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	4619      	mov	r1, r3
 8002c58:	481d      	ldr	r0, [pc, #116]	; (8002cd0 <HAL_QSPI_MspInit+0x114>)
 8002c5a:	f002 fd49 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002c5e:	2340      	movs	r3, #64	; 0x40
 8002c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c6e:	230a      	movs	r3, #10
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002c72:	f107 031c 	add.w	r3, r7, #28
 8002c76:	4619      	mov	r1, r3
 8002c78:	4816      	ldr	r0, [pc, #88]	; (8002cd4 <HAL_QSPI_MspInit+0x118>)
 8002c7a:	f002 fd39 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c7e:	2304      	movs	r3, #4
 8002c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c8e:	2309      	movs	r3, #9
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c92:	f107 031c 	add.w	r3, r7, #28
 8002c96:	4619      	mov	r1, r3
 8002c98:	480e      	ldr	r0, [pc, #56]	; (8002cd4 <HAL_QSPI_MspInit+0x118>)
 8002c9a:	f002 fd29 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002c9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002cb0:	2309      	movs	r3, #9
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <HAL_QSPI_MspInit+0x11c>)
 8002cbc:	f002 fd18 	bl	80056f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002cc0:	bf00      	nop
 8002cc2:	3730      	adds	r7, #48	; 0x30
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	a0001000 	.word	0xa0001000
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40020400 	.word	0x40020400
 8002cd8:	40020c00 	.word	0x40020c00

08002cdc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_RTC_MspInit+0x2c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d105      	bne.n	8002cfa <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <HAL_RTC_MspInit+0x30>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a06      	ldr	r2, [pc, #24]	; (8002d0c <HAL_RTC_MspInit+0x30>)
 8002cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40002800 	.word	0x40002800
 8002d0c:	40023800 	.word	0x40023800

08002d10 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <HAL_SD_MspInit+0xb4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d144      	bne.n	8002dbc <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002d32:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_SD_MspInit+0xb8>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <HAL_SD_MspInit+0xb8>)
 8002d38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <HAL_SD_MspInit+0xb8>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <HAL_SD_MspInit+0xb8>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <HAL_SD_MspInit+0xb8>)
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <HAL_SD_MspInit+0xb8>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_SD_MspInit+0xb8>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <HAL_SD_MspInit+0xb8>)
 8002d68:	f043 0308 	orr.w	r3, r3, #8
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_SD_MspInit+0xb8>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002d7a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002d7e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4619      	mov	r1, r3
 8002d96:	480d      	ldr	r0, [pc, #52]	; (8002dcc <HAL_SD_MspInit+0xbc>)
 8002d98:	f002 fcaa 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002dac:	230c      	movs	r3, #12
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4619      	mov	r1, r3
 8002db6:	4806      	ldr	r0, [pc, #24]	; (8002dd0 <HAL_SD_MspInit+0xc0>)
 8002db8:	f002 fc9a 	bl	80056f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002dbc:	bf00      	nop
 8002dbe:	3728      	adds	r7, #40	; 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020800 	.word	0x40020800
 8002dd0:	40020c00 	.word	0x40020c00

08002dd4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002df4:	d127      	bne.n	8002e46 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_SPDIFRX_MspInit+0x7c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <HAL_SPDIFRX_MspInit+0x7c>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e14:	f043 0308 	orr.w	r3, r3, #8
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_SPDIFRX_MspInit+0x7c>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e36:	2308      	movs	r3, #8
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4804      	ldr	r0, [pc, #16]	; (8002e54 <HAL_SPDIFRX_MspInit+0x80>)
 8002e42:	f002 fc55 	bl	80056f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002e46:	bf00      	nop
 8002e48:	3728      	adds	r7, #40	; 0x28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40020c00 	.word	0x40020c00

08002e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <HAL_SPI_MspInit+0xb4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d144      	bne.n	8002f04 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e7a:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_SPI_MspInit+0xb8>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a24      	ldr	r2, [pc, #144]	; (8002f10 <HAL_SPI_MspInit+0xb8>)
 8002e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_SPI_MspInit+0xb8>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e92:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <HAL_SPI_MspInit+0xb8>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <HAL_SPI_MspInit+0xb8>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <HAL_SPI_MspInit+0xb8>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eaa:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_SPI_MspInit+0xb8>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <HAL_SPI_MspInit+0xb8>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <HAL_SPI_MspInit+0xb8>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ed2:	2305      	movs	r3, #5
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	f107 0314 	add.w	r3, r7, #20
 8002eda:	4619      	mov	r1, r3
 8002edc:	480d      	ldr	r0, [pc, #52]	; (8002f14 <HAL_SPI_MspInit+0xbc>)
 8002ede:	f002 fc07 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002ee2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ef4:	2305      	movs	r3, #5
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	4619      	mov	r1, r3
 8002efe:	4806      	ldr	r0, [pc, #24]	; (8002f18 <HAL_SPI_MspInit+0xc0>)
 8002f00:	f002 fbf6 	bl	80056f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f04:	bf00      	nop
 8002f06:	3728      	adds	r7, #40	; 0x28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40003800 	.word	0x40003800
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40022000 	.word	0x40022000
 8002f18:	40020400 	.word	0x40020400

08002f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2e      	ldr	r2, [pc, #184]	; (8002fe4 <HAL_TIM_Base_MspInit+0xc8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10c      	bne.n	8002f48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f2e:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a2d      	ldr	r2, [pc, #180]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f46:	e046      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d10c      	bne.n	8002f6c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f52:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	69bb      	ldr	r3, [r7, #24]
}
 8002f6a:	e034      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <HAL_TIM_Base_MspInit+0xd0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10c      	bne.n	8002f90 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	697b      	ldr	r3, [r7, #20]
}
 8002f8e:	e022      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_TIM_Base_MspInit+0xd4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10c      	bne.n	8002fb4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002fa0:	f043 0308 	orr.w	r3, r3, #8
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]
}
 8002fb2:	e010      	b.n	8002fd6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <HAL_TIM_Base_MspInit+0xd8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <HAL_TIM_Base_MspInit+0xcc>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	bf00      	nop
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	40010400 	.word	0x40010400

08002ff8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_TIM_PWM_MspInit+0x38>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10b      	bne.n	8003022 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_TIM_PWM_MspInit+0x3c>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	4a09      	ldr	r2, [pc, #36]	; (8003034 <HAL_TIM_PWM_MspInit+0x3c>)
 8003010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003014:	6413      	str	r3, [r2, #64]	; 0x40
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <HAL_TIM_PWM_MspInit+0x3c>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40001800 	.word	0x40001800
 8003034:	40023800 	.word	0x40023800

08003038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08c      	sub	sp, #48	; 0x30
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 031c 	add.w	r3, r7, #28
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a56      	ldr	r2, [pc, #344]	; (80031b0 <HAL_TIM_MspPostInit+0x178>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d11d      	bne.n	8003096 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	4b56      	ldr	r3, [pc, #344]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a55      	ldr	r2, [pc, #340]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b53      	ldr	r3, [pc, #332]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003080:	2300      	movs	r3, #0
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003084:	2301      	movs	r3, #1
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003088:	f107 031c 	add.w	r3, r7, #28
 800308c:	4619      	mov	r1, r3
 800308e:	484a      	ldr	r0, [pc, #296]	; (80031b8 <HAL_TIM_MspPostInit+0x180>)
 8003090:	f002 fb2e 	bl	80056f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003094:	e087      	b.n	80031a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d11d      	bne.n	80030dc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4a43      	ldr	r2, [pc, #268]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6313      	str	r3, [r2, #48]	; 0x30
 80030ac:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80030b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030ca:	2301      	movs	r3, #1
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80030ce:	f107 031c 	add.w	r3, r7, #28
 80030d2:	4619      	mov	r1, r3
 80030d4:	4838      	ldr	r0, [pc, #224]	; (80031b8 <HAL_TIM_MspPostInit+0x180>)
 80030d6:	f002 fb0b 	bl	80056f0 <HAL_GPIO_Init>
}
 80030da:	e064      	b.n	80031a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a36      	ldr	r2, [pc, #216]	; (80031bc <HAL_TIM_MspPostInit+0x184>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d11c      	bne.n	8003120 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e6:	4b33      	ldr	r3, [pc, #204]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a32      	ldr	r2, [pc, #200]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b30      	ldr	r3, [pc, #192]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80030fe:	2310      	movs	r3, #16
 8003100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2300      	movs	r3, #0
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800310e:	2302      	movs	r3, #2
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003112:	f107 031c 	add.w	r3, r7, #28
 8003116:	4619      	mov	r1, r3
 8003118:	4829      	ldr	r0, [pc, #164]	; (80031c0 <HAL_TIM_MspPostInit+0x188>)
 800311a:	f002 fae9 	bl	80056f0 <HAL_GPIO_Init>
}
 800311e:	e042      	b.n	80031a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <HAL_TIM_MspPostInit+0x18c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d11c      	bne.n	8003164 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800312a:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a21      	ldr	r2, [pc, #132]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	2300      	movs	r3, #0
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003152:	2302      	movs	r3, #2
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003156:	f107 031c 	add.w	r3, r7, #28
 800315a:	4619      	mov	r1, r3
 800315c:	481a      	ldr	r0, [pc, #104]	; (80031c8 <HAL_TIM_MspPostInit+0x190>)
 800315e:	f002 fac7 	bl	80056f0 <HAL_GPIO_Init>
}
 8003162:	e020      	b.n	80031a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a18      	ldr	r2, [pc, #96]	; (80031cc <HAL_TIM_MspPostInit+0x194>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d11b      	bne.n	80031a6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	4a10      	ldr	r2, [pc, #64]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 8003174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_TIM_MspPostInit+0x17c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003186:	2340      	movs	r3, #64	; 0x40
 8003188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003192:	2300      	movs	r3, #0
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003196:	2309      	movs	r3, #9
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800319a:	f107 031c 	add.w	r3, r7, #28
 800319e:	4619      	mov	r1, r3
 80031a0:	480b      	ldr	r0, [pc, #44]	; (80031d0 <HAL_TIM_MspPostInit+0x198>)
 80031a2:	f002 faa5 	bl	80056f0 <HAL_GPIO_Init>
}
 80031a6:	bf00      	nop
 80031a8:	3730      	adds	r7, #48	; 0x30
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40010000 	.word	0x40010000
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020000 	.word	0x40020000
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40020400 	.word	0x40020400
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40022000 	.word	0x40022000
 80031cc:	40001800 	.word	0x40001800
 80031d0:	40021c00 	.word	0x40021c00

080031d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	; 0x30
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031dc:	f107 031c 	add.w	r3, r7, #28
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <HAL_UART_MspInit+0x110>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d145      	bne.n	8003282 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031f6:	4b3c      	ldr	r3, [pc, #240]	; (80032e8 <HAL_UART_MspInit+0x114>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	4a3b      	ldr	r2, [pc, #236]	; (80032e8 <HAL_UART_MspInit+0x114>)
 80031fc:	f043 0310 	orr.w	r3, r3, #16
 8003200:	6453      	str	r3, [r2, #68]	; 0x44
 8003202:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <HAL_UART_MspInit+0x114>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <HAL_UART_MspInit+0x114>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a35      	ldr	r2, [pc, #212]	; (80032e8 <HAL_UART_MspInit+0x114>)
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <HAL_UART_MspInit+0x114>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003226:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <HAL_UART_MspInit+0x114>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	4a2f      	ldr	r2, [pc, #188]	; (80032e8 <HAL_UART_MspInit+0x114>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6313      	str	r3, [r2, #48]	; 0x30
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_UART_MspInit+0x114>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800324e:	2307      	movs	r3, #7
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	4619      	mov	r1, r3
 8003258:	4824      	ldr	r0, [pc, #144]	; (80032ec <HAL_UART_MspInit+0x118>)
 800325a:	f002 fa49 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800325e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326c:	2300      	movs	r3, #0
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003270:	2307      	movs	r3, #7
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003274:	f107 031c 	add.w	r3, r7, #28
 8003278:	4619      	mov	r1, r3
 800327a:	481d      	ldr	r0, [pc, #116]	; (80032f0 <HAL_UART_MspInit+0x11c>)
 800327c:	f002 fa38 	bl	80056f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003280:	e02c      	b.n	80032dc <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <HAL_UART_MspInit+0x120>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d127      	bne.n	80032dc <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <HAL_UART_MspInit+0x114>)
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <HAL_UART_MspInit+0x114>)
 8003292:	f043 0320 	orr.w	r3, r3, #32
 8003296:	6453      	str	r3, [r2, #68]	; 0x44
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <HAL_UART_MspInit+0x114>)
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_UART_MspInit+0x114>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <HAL_UART_MspInit+0x114>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6313      	str	r3, [r2, #48]	; 0x30
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_UART_MspInit+0x114>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80032bc:	23c0      	movs	r3, #192	; 0xc0
 80032be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c8:	2303      	movs	r3, #3
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80032cc:	2308      	movs	r3, #8
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d0:	f107 031c 	add.w	r3, r7, #28
 80032d4:	4619      	mov	r1, r3
 80032d6:	4808      	ldr	r0, [pc, #32]	; (80032f8 <HAL_UART_MspInit+0x124>)
 80032d8:	f002 fa0a 	bl	80056f0 <HAL_GPIO_Init>
}
 80032dc:	bf00      	nop
 80032de:	3730      	adds	r7, #48	; 0x30
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40011000 	.word	0x40011000
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40020400 	.word	0x40020400
 80032f0:	40020000 	.word	0x40020000
 80032f4:	40011400 	.word	0x40011400
 80032f8:	40020800 	.word	0x40020800

080032fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003310:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <HAL_FMC_MspInit+0x100>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d16d      	bne.n	80033f4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003318:	4b38      	ldr	r3, [pc, #224]	; (80033fc <HAL_FMC_MspInit+0x100>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800331e:	4b38      	ldr	r3, [pc, #224]	; (8003400 <HAL_FMC_MspInit+0x104>)
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	4a37      	ldr	r2, [pc, #220]	; (8003400 <HAL_FMC_MspInit+0x104>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6393      	str	r3, [r2, #56]	; 0x38
 800332a:	4b35      	ldr	r3, [pc, #212]	; (8003400 <HAL_FMC_MspInit+0x104>)
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003336:	f64f 7383 	movw	r3, #65411	; 0xff83
 800333a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003344:	2303      	movs	r3, #3
 8003346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003348:	230c      	movs	r3, #12
 800334a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	4619      	mov	r1, r3
 8003350:	482c      	ldr	r0, [pc, #176]	; (8003404 <HAL_FMC_MspInit+0x108>)
 8003352:	f002 f9cd 	bl	80056f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003356:	f248 1333 	movw	r3, #33075	; 0x8133
 800335a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003368:	230c      	movs	r3, #12
 800336a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4825      	ldr	r0, [pc, #148]	; (8003408 <HAL_FMC_MspInit+0x10c>)
 8003372:	f002 f9bd 	bl	80056f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003376:	f24c 7303 	movw	r3, #50947	; 0xc703
 800337a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003388:	230c      	movs	r3, #12
 800338a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	4619      	mov	r1, r3
 8003390:	481e      	ldr	r0, [pc, #120]	; (800340c <HAL_FMC_MspInit+0x110>)
 8003392:	f002 f9ad 	bl	80056f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003396:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800339a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a4:	2303      	movs	r3, #3
 80033a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033a8:	230c      	movs	r3, #12
 80033aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	4817      	ldr	r0, [pc, #92]	; (8003410 <HAL_FMC_MspInit+0x114>)
 80033b2:	f002 f99d 	bl	80056f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80033b6:	2328      	movs	r3, #40	; 0x28
 80033b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c2:	2303      	movs	r3, #3
 80033c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033c6:	230c      	movs	r3, #12
 80033c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4811      	ldr	r0, [pc, #68]	; (8003414 <HAL_FMC_MspInit+0x118>)
 80033d0:	f002 f98e 	bl	80056f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80033d4:	2308      	movs	r3, #8
 80033d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e0:	2303      	movs	r3, #3
 80033e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033e4:	230c      	movs	r3, #12
 80033e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	4619      	mov	r1, r3
 80033ec:	480a      	ldr	r0, [pc, #40]	; (8003418 <HAL_FMC_MspInit+0x11c>)
 80033ee:	f002 f97f 	bl	80056f0 <HAL_GPIO_Init>
 80033f2:	e000      	b.n	80033f6 <HAL_FMC_MspInit+0xfa>
    return;
 80033f4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200003b0 	.word	0x200003b0
 8003400:	40023800 	.word	0x40023800
 8003404:	40021000 	.word	0x40021000
 8003408:	40021800 	.word	0x40021800
 800340c:	40020c00 	.word	0x40020c00
 8003410:	40021400 	.word	0x40021400
 8003414:	40021c00 	.word	0x40021c00
 8003418:	40020800 	.word	0x40020800

0800341c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003424:	f7ff ff6a 	bl	80032fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <HAL_SAI_MspInit+0xbc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d124      	bne.n	800348c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003442:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <HAL_SAI_MspInit+0xc0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800344a:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_SAI_MspInit+0xc4>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <HAL_SAI_MspInit+0xc4>)
 8003450:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003454:	6453      	str	r3, [r2, #68]	; 0x44
 8003456:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HAL_SAI_MspInit+0xc4>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003462:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <HAL_SAI_MspInit+0xc0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	4a21      	ldr	r2, [pc, #132]	; (80034f0 <HAL_SAI_MspInit+0xc0>)
 800346a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800346c:	23f0      	movs	r3, #240	; 0xf0
 800346e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2302      	movs	r3, #2
 8003472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003478:	2300      	movs	r3, #0
 800347a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800347c:	230a      	movs	r3, #10
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	4619      	mov	r1, r3
 8003486:	481c      	ldr	r0, [pc, #112]	; (80034f8 <HAL_SAI_MspInit+0xc8>)
 8003488:	f002 f932 	bl	80056f0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <HAL_SAI_MspInit+0xcc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d125      	bne.n	80034e2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <HAL_SAI_MspInit+0xc0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10b      	bne.n	80034b6 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_SAI_MspInit+0xc4>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <HAL_SAI_MspInit+0xc4>)
 80034a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034a8:	6453      	str	r3, [r2, #68]	; 0x44
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_SAI_MspInit+0xc4>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_SAI_MspInit+0xc0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	4a0c      	ldr	r2, [pc, #48]	; (80034f0 <HAL_SAI_MspInit+0xc0>)
 80034be:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80034c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034d2:	230a      	movs	r3, #10
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4808      	ldr	r0, [pc, #32]	; (8003500 <HAL_SAI_MspInit+0xd0>)
 80034de:	f002 f907 	bl	80056f0 <HAL_GPIO_Init>

    }
}
 80034e2:	bf00      	nop
 80034e4:	3728      	adds	r7, #40	; 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40015c04 	.word	0x40015c04
 80034f0:	200003b4 	.word	0x200003b4
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40022000 	.word	0x40022000
 80034fc:	40015c24 	.word	0x40015c24
 8003500:	40021800 	.word	0x40021800

08003504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	; 0x30
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003514:	2200      	movs	r2, #0
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	2036      	movs	r0, #54	; 0x36
 800351a:	f001 fabb 	bl	8004a94 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800351e:	2036      	movs	r0, #54	; 0x36
 8003520:	f001 fad4 	bl	8004acc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003524:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <HAL_InitTick+0xa0>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_InitTick+0xa0>)
 800352a:	f043 0310 	orr.w	r3, r3, #16
 800352e:	6413      	str	r3, [r2, #64]	; 0x40
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <HAL_InitTick+0xa0>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800353c:	f107 0210 	add.w	r2, r7, #16
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f003 fbde 	bl	8006d08 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800354c:	f003 fbb4 	bl	8006cb8 <HAL_RCC_GetPCLK1Freq>
 8003550:	4603      	mov	r3, r0
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <HAL_InitTick+0xa4>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	0c9b      	lsrs	r3, r3, #18
 8003560:	3b01      	subs	r3, #1
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_InitTick+0xa8>)
 8003566:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <HAL_InitTick+0xac>)
 8003568:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <HAL_InitTick+0xa8>)
 800356c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003570:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003572:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <HAL_InitTick+0xa8>)
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <HAL_InitTick+0xa8>)
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_InitTick+0xa8>)
 8003580:	2200      	movs	r2, #0
 8003582:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003584:	4809      	ldr	r0, [pc, #36]	; (80035ac <HAL_InitTick+0xa8>)
 8003586:	f006 f857 	bl	8009638 <HAL_TIM_Base_Init>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003590:	4806      	ldr	r0, [pc, #24]	; (80035ac <HAL_InitTick+0xa8>)
 8003592:	f006 f87d 	bl	8009690 <HAL_TIM_Base_Start_IT>
 8003596:	4603      	mov	r3, r0
 8003598:	e000      	b.n	800359c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
}
 800359c:	4618      	mov	r0, r3
 800359e:	3730      	adds	r7, #48	; 0x30
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	431bde83 	.word	0x431bde83
 80035ac:	2000c5a0 	.word	0x2000c5a0
 80035b0:	40001000 	.word	0x40001000

080035b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035c2:	b480      	push	{r7}
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035c6:	e7fe      	b.n	80035c6 <HardFault_Handler+0x4>

080035c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035cc:	e7fe      	b.n	80035cc <MemManage_Handler+0x4>

080035ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d2:	e7fe      	b.n	80035d2 <BusFault_Handler+0x4>

080035d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <UsageFault_Handler+0x4>

080035da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <CAN1_RX0_IRQHandler+0x10>)
 80035ee:	f000 ff4d 	bl	800448c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	2000c49c 	.word	0x2000c49c

080035fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <TIM6_DAC_IRQHandler+0x10>)
 8003602:	f006 f89a 	bl	800973a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	2000c5a0 	.word	0x2000c5a0

08003610 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <LTDC_IRQHandler+0x10>)
 8003616:	f002 fb17 	bl	8005c48 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	2000c174 	.word	0x2000c174

08003624 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003628:	4802      	ldr	r0, [pc, #8]	; (8003634 <DMA2D_IRQHandler+0x10>)
 800362a:	f001 fe22 	bl	8005272 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	2000c414 	.word	0x2000c414

08003638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	return 1;
 800363c:	2301      	movs	r3, #1
}
 800363e:	4618      	mov	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <_kill>:

int _kill(int pid, int sig)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003652:	f021 ffbd 	bl	80255d0 <__errno>
 8003656:	4602      	mov	r2, r0
 8003658:	2316      	movs	r3, #22
 800365a:	6013      	str	r3, [r2, #0]
	return -1;
 800365c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_exit>:

void _exit (int status)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003670:	f04f 31ff 	mov.w	r1, #4294967295
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ffe7 	bl	8003648 <_kill>
	while (1) {}		/* Make sure we hang here */
 800367a:	e7fe      	b.n	800367a <_exit+0x12>

0800367c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	e00a      	b.n	80036a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800368e:	f3af 8000 	nop.w
 8003692:	4601      	mov	r1, r0
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	60ba      	str	r2, [r7, #8]
 800369a:	b2ca      	uxtb	r2, r1
 800369c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3301      	adds	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	dbf0      	blt.n	800368e <_read+0x12>
	}

return len;
 80036ac:	687b      	ldr	r3, [r7, #4]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e009      	b.n	80036dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	60ba      	str	r2, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3301      	adds	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	dbf1      	blt.n	80036c8 <_write+0x12>
	}
	return len;
 80036e4:	687b      	ldr	r3, [r7, #4]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <_close>:

int _close(int file)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
	return -1;
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003716:	605a      	str	r2, [r3, #4]
	return 0;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <_isatty>:

int _isatty(int file)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
	return 1;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
	return 0;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <_sbrk+0x50>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <_sbrk+0x16>
		heap_end = &end;
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <_sbrk+0x50>)
 800376a:	4a10      	ldr	r2, [pc, #64]	; (80037ac <_sbrk+0x54>)
 800376c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <_sbrk+0x50>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <_sbrk+0x50>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4413      	add	r3, r2
 800377c:	466a      	mov	r2, sp
 800377e:	4293      	cmp	r3, r2
 8003780:	d907      	bls.n	8003792 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003782:	f021 ff25 	bl	80255d0 <__errno>
 8003786:	4602      	mov	r2, r0
 8003788:	230c      	movs	r3, #12
 800378a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800378c:	f04f 33ff 	mov.w	r3, #4294967295
 8003790:	e006      	b.n	80037a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <_sbrk+0x50>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	4a03      	ldr	r2, [pc, #12]	; (80037a8 <_sbrk+0x50>)
 800379c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800379e:	68fb      	ldr	r3, [r7, #12]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200003b8 	.word	0x200003b8
 80037ac:	2000ca58 	.word	0x2000ca58

080037b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037b4:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <SystemInit+0x28>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <SystemInit+0x28>)
 80037bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <SystemInit+0x28>)
 80037c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037ca:	609a      	str	r2, [r3, #8]
#endif
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003814 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037e2:	e003      	b.n	80037ec <LoopCopyDataInit>

080037e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037ea:	3104      	adds	r1, #4

080037ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037ec:	480b      	ldr	r0, [pc, #44]	; (800381c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037f4:	d3f6      	bcc.n	80037e4 <CopyDataInit>
  ldr  r2, =_sbss
 80037f6:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037f8:	e002      	b.n	8003800 <LoopFillZerobss>

080037fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037fc:	f842 3b04 	str.w	r3, [r2], #4

08003800 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003802:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003804:	d3f9      	bcc.n	80037fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003806:	f7ff ffd3 	bl	80037b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800380a:	f021 fef9 	bl	8025600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800380e:	f7fd fb17 	bl	8000e40 <main>
  bx  lr    
 8003812:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003814:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003818:	08062a80 	.word	0x08062a80
  ldr  r0, =_sdata
 800381c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003820:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8003824:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8003828:	2000ca54 	.word	0x2000ca54

0800382c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800382c:	e7fe      	b.n	800382c <ADC_IRQHandler>

0800382e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003832:	2003      	movs	r0, #3
 8003834:	f001 f923 	bl	8004a7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003838:	2000      	movs	r0, #0
 800383a:	f7ff fe63 	bl	8003504 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800383e:	f7fe ff09 	bl	8002654 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x20>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_IncTick+0x24>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4413      	add	r3, r2
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_IncTick+0x24>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000020 	.word	0x20000020
 800386c:	2000c5e0 	.word	0x2000c5e0

08003870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_GetTick+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	2000c5e0 	.word	0x2000c5e0

08003888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff ffee 	bl	8003870 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d005      	beq.n	80038ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_Delay+0x40>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ae:	bf00      	nop
 80038b0:	f7ff ffde 	bl	8003870 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d8f7      	bhi.n	80038b0 <HAL_Delay+0x28>
  {
  }
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000020 	.word	0x20000020

080038cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e031      	b.n	8003946 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fe feda 	bl	80026a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d116      	bne.n	8003938 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_ADC_Init+0x84>)
 8003910:	4013      	ands	r3, r2
 8003912:	f043 0202 	orr.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f964 	bl	8003be8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	f043 0201 	orr.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
 8003936:	e001      	b.n	800393c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	ffffeefd 	.word	0xffffeefd

08003954 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x1c>
 800396c:	2302      	movs	r3, #2
 800396e:	e12a      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x272>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b09      	cmp	r3, #9
 800397e:	d93a      	bls.n	80039f6 <HAL_ADC_ConfigChannel+0xa2>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003988:	d035      	beq.n	80039f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68d9      	ldr	r1, [r3, #12]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	4613      	mov	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	4413      	add	r3, r2
 800399e:	3b1e      	subs	r3, #30
 80039a0:	2207      	movs	r2, #7
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43da      	mvns	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	400a      	ands	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a87      	ldr	r2, [pc, #540]	; (8003bd4 <HAL_ADC_ConfigChannel+0x280>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d10a      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68d9      	ldr	r1, [r3, #12]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	061a      	lsls	r2, r3, #24
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ce:	e035      	b.n	8003a3c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68d9      	ldr	r1, [r3, #12]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4618      	mov	r0, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4403      	add	r3, r0
 80039e8:	3b1e      	subs	r3, #30
 80039ea:	409a      	lsls	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039f4:	e022      	b.n	8003a3c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6919      	ldr	r1, [r3, #16]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	2207      	movs	r2, #7
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43da      	mvns	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	400a      	ands	r2, r1
 8003a18:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6919      	ldr	r1, [r3, #16]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4403      	add	r3, r0
 8003a32:	409a      	lsls	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b06      	cmp	r3, #6
 8003a42:	d824      	bhi.n	8003a8e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	3b05      	subs	r3, #5
 8003a56:	221f      	movs	r2, #31
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	400a      	ands	r2, r1
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	4618      	mov	r0, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3b05      	subs	r3, #5
 8003a80:	fa00 f203 	lsl.w	r2, r0, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8003a8c:	e04c      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d824      	bhi.n	8003ae0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3b23      	subs	r3, #35	; 0x23
 8003aa8:	221f      	movs	r2, #31
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	400a      	ands	r2, r1
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	3b23      	subs	r3, #35	; 0x23
 8003ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
 8003ade:	e023      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	3b41      	subs	r3, #65	; 0x41
 8003af2:	221f      	movs	r2, #31
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43da      	mvns	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	400a      	ands	r2, r1
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	4618      	mov	r0, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	3b41      	subs	r3, #65	; 0x41
 8003b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <HAL_ADC_ConfigChannel+0x284>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10a      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x1f4>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b3a:	d105      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b3c:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_ADC_ConfigChannel+0x288>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a26      	ldr	r2, [pc, #152]	; (8003bdc <HAL_ADC_ConfigChannel+0x288>)
 8003b42:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b46:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <HAL_ADC_ConfigChannel+0x284>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d109      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x212>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b12      	cmp	r3, #18
 8003b58:	d105      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_ADC_ConfigChannel+0x288>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <HAL_ADC_ConfigChannel+0x288>)
 8003b60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b64:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_ADC_ConfigChannel+0x284>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d125      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x268>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <HAL_ADC_ConfigChannel+0x280>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <HAL_ADC_ConfigChannel+0x22e>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b11      	cmp	r3, #17
 8003b80:	d11c      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <HAL_ADC_ConfigChannel+0x288>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <HAL_ADC_ConfigChannel+0x288>)
 8003b88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b8c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a10      	ldr	r2, [pc, #64]	; (8003bd4 <HAL_ADC_ConfigChannel+0x280>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d111      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <HAL_ADC_ConfigChannel+0x28c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a11      	ldr	r2, [pc, #68]	; (8003be4 <HAL_ADC_ConfigChannel+0x290>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	0c9a      	lsrs	r2, r3, #18
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bae:	e002      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f9      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	10000012 	.word	0x10000012
 8003bd8:	40012000 	.word	0x40012000
 8003bdc:	40012300 	.word	0x40012300
 8003be0:	20000018 	.word	0x20000018
 8003be4:	431bde83 	.word	0x431bde83

08003be8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003bf0:	4b78      	ldr	r3, [pc, #480]	; (8003dd4 <ADC_Init+0x1ec>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a77      	ldr	r2, [pc, #476]	; (8003dd4 <ADC_Init+0x1ec>)
 8003bf6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003bfa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003bfc:	4b75      	ldr	r3, [pc, #468]	; (8003dd4 <ADC_Init+0x1ec>)
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4973      	ldr	r1, [pc, #460]	; (8003dd4 <ADC_Init+0x1ec>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	021a      	lsls	r2, r3, #8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6899      	ldr	r1, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <ADC_Init+0x1f0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d022      	beq.n	8003cc2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6899      	ldr	r1, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6899      	ldr	r1, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	e00f      	b.n	8003ce2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ce0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0202 	bic.w	r2, r2, #2
 8003cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6899      	ldr	r1, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	005a      	lsls	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01b      	beq.n	8003d48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	035a      	lsls	r2, r3, #13
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	e007      	b.n	8003d58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	051a      	lsls	r2, r3, #20
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6899      	ldr	r1, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d9a:	025a      	lsls	r2, r3, #9
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6899      	ldr	r1, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	029a      	lsls	r2, r3, #10
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	609a      	str	r2, [r3, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40012300 	.word	0x40012300
 8003dd8:	0f000001 	.word	0x0f000001

08003ddc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0ed      	b.n	8003fca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe fcac 	bl	8002758 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0202 	bic.w	r2, r2, #2
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e10:	f7ff fd2e 	bl	8003870 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e16:	e012      	b.n	8003e3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e18:	f7ff fd2a 	bl	8003870 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b0a      	cmp	r3, #10
 8003e24:	d90b      	bls.n	8003e3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2205      	movs	r2, #5
 8003e36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e0c5      	b.n	8003fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e5      	bne.n	8003e18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e5c:	f7ff fd08 	bl	8003870 <HAL_GetTick>
 8003e60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e62:	e012      	b.n	8003e8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e64:	f7ff fd04 	bl	8003870 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b0a      	cmp	r3, #10
 8003e70:	d90b      	bls.n	8003e8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2205      	movs	r2, #5
 8003e82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e09f      	b.n	8003fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0e5      	beq.n	8003e64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	7e1b      	ldrb	r3, [r3, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d108      	bne.n	8003eb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e007      	b.n	8003ec2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7e5b      	ldrb	r3, [r3, #25]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d108      	bne.n	8003edc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e007      	b.n	8003eec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	7e9b      	ldrb	r3, [r3, #26]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d108      	bne.n	8003f06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0220 	orr.w	r2, r2, #32
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e007      	b.n	8003f16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0220 	bic.w	r2, r2, #32
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7edb      	ldrb	r3, [r3, #27]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d108      	bne.n	8003f30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0210 	bic.w	r2, r2, #16
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e007      	b.n	8003f40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0210 	orr.w	r2, r2, #16
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7f1b      	ldrb	r3, [r3, #28]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d108      	bne.n	8003f5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0208 	orr.w	r2, r2, #8
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e007      	b.n	8003f6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0208 	bic.w	r2, r2, #8
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7f5b      	ldrb	r3, [r3, #29]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d108      	bne.n	8003f84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0204 	orr.w	r2, r2, #4
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e007      	b.n	8003f94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0204 	bic.w	r2, r2, #4
 8003f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	ea42 0103 	orr.w	r1, r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	1e5a      	subs	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d003      	beq.n	8003ffa <HAL_CAN_ConfigFilter+0x26>
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	f040 80be 	bne.w	8004176 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003ffa:	4b65      	ldr	r3, [pc, #404]	; (8004190 <HAL_CAN_ConfigFilter+0x1bc>)
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004014:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	431a      	orrs	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	2201      	movs	r2, #1
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	43db      	mvns	r3, r3
 800404c:	401a      	ands	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d123      	bne.n	80040a4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	43db      	mvns	r3, r3
 8004066:	401a      	ands	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800407e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3248      	adds	r2, #72	; 0x48
 8004084:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004098:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800409a:	6979      	ldr	r1, [r7, #20]
 800409c:	3348      	adds	r3, #72	; 0x48
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d122      	bne.n	80040f2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3248      	adds	r2, #72	; 0x48
 80040d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040e8:	6979      	ldr	r1, [r7, #20]
 80040ea:	3348      	adds	r3, #72	; 0x48
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	440b      	add	r3, r1
 80040f0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	43db      	mvns	r3, r3
 8004104:	401a      	ands	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800410c:	e007      	b.n	800411e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	431a      	orrs	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	43db      	mvns	r3, r3
 8004130:	401a      	ands	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004138:	e007      	b.n	800414a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	431a      	orrs	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d107      	bne.n	8004162 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	431a      	orrs	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004168:	f023 0201 	bic.w	r2, r3, #1
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e006      	b.n	8004184 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40006400 	.word	0x40006400

08004194 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d12e      	bne.n	8004206 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041c0:	f7ff fb56 	bl	8003870 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041c6:	e012      	b.n	80041ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041c8:	f7ff fb52 	bl	8003870 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b0a      	cmp	r3, #10
 80041d4:	d90b      	bls.n	80041ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2205      	movs	r2, #5
 80041e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e012      	b.n	8004214 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e006      	b.n	8004214 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
  }
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004230:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d003      	beq.n	8004240 <HAL_CAN_GetRxMessage+0x24>
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b02      	cmp	r3, #2
 800423c:	f040 80f3 	bne.w	8004426 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10e      	bne.n	8004264 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d116      	bne.n	8004282 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0e7      	b.n	8004434 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d107      	bne.n	8004282 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0d8      	b.n	8004434 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	331b      	adds	r3, #27
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	4413      	add	r3, r2
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0204 	and.w	r2, r3, #4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10c      	bne.n	80042ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	331b      	adds	r3, #27
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	4413      	add	r3, r2
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	0d5b      	lsrs	r3, r3, #21
 80042b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	e00b      	b.n	80042d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	331b      	adds	r3, #27
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	4413      	add	r3, r2
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	08db      	lsrs	r3, r3, #3
 80042ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	331b      	adds	r3, #27
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	4413      	add	r3, r2
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0202 	and.w	r2, r3, #2
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	331b      	adds	r3, #27
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	4413      	add	r3, r2
 80042f4:	3304      	adds	r3, #4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 020f 	and.w	r2, r3, #15
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	331b      	adds	r3, #27
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	4413      	add	r3, r2
 800430c:	3304      	adds	r3, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	b2da      	uxtb	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	331b      	adds	r3, #27
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	4413      	add	r3, r2
 800433a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	4413      	add	r3, r2
 8004350:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	0a1a      	lsrs	r2, r3, #8
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	3301      	adds	r3, #1
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	4413      	add	r3, r2
 800436a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0c1a      	lsrs	r2, r3, #16
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	3302      	adds	r3, #2
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	4413      	add	r3, r2
 8004384:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	0e1a      	lsrs	r2, r3, #24
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	3303      	adds	r3, #3
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	4413      	add	r3, r2
 800439e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	3304      	adds	r3, #4
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	0a1a      	lsrs	r2, r3, #8
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	3305      	adds	r3, #5
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	0c1a      	lsrs	r2, r3, #16
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	3306      	adds	r3, #6
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	0e1a      	lsrs	r2, r3, #24
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	3307      	adds	r3, #7
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d108      	bne.n	8004412 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0220 	orr.w	r2, r2, #32
 800440e:	60da      	str	r2, [r3, #12]
 8004410:	e007      	b.n	8004422 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0220 	orr.w	r2, r2, #32
 8004420:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e006      	b.n	8004434 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
  }
}
 8004434:	4618      	mov	r0, r3
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004450:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d002      	beq.n	800445e <HAL_CAN_ActivateNotification+0x1e>
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d109      	bne.n	8004472 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6959      	ldr	r1, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e006      	b.n	8004480 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
  }
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004494:	2300      	movs	r3, #0
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d07c      	beq.n	80045cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d023      	beq.n	8004524 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2201      	movs	r2, #1
 80044e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f97d 	bl	80047ee <HAL_CAN_TxMailbox0CompleteCallback>
 80044f4:	e016      	b.n	8004524 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	e00c      	b.n	8004524 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
 800451c:	e002      	b.n	8004524 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f983 	bl	800482a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d024      	beq.n	8004578 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004536:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f95d 	bl	8004802 <HAL_CAN_TxMailbox1CompleteCallback>
 8004548:	e016      	b.n	8004578 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d004      	beq.n	800455e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
 800455c:	e00c      	b.n	8004578 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
 8004570:	e002      	b.n	8004578 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f963 	bl	800483e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d024      	beq.n	80045cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800458a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f93d 	bl	8004816 <HAL_CAN_TxMailbox2CompleteCallback>
 800459c:	e016      	b.n	80045cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	e00c      	b.n	80045cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d004      	beq.n	80045c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
 80045c4:	e002      	b.n	80045cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f943 	bl	8004852 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2210      	movs	r2, #16
 80045ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d006      	beq.n	8004612 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2208      	movs	r2, #8
 800460a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f92a 	bl	8004866 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fde4 	bl	80011f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800464a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2210      	movs	r2, #16
 8004652:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d006      	beq.n	8004676 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2208      	movs	r2, #8
 800466e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f90c 	bl	800488e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d009      	beq.n	8004694 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8f3 	bl	800487a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d006      	beq.n	80046b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2210      	movs	r2, #16
 80046ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f8f6 	bl	80048a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d006      	beq.n	80046d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2208      	movs	r2, #8
 80046d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f8ef 	bl	80048b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d075      	beq.n	80047ce <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d06c      	beq.n	80047c6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f043 0302 	orr.w	r3, r3, #2
 8004722:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472a:	2b00      	cmp	r3, #0
 800472c:	d008      	beq.n	8004740 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f043 0304 	orr.w	r3, r3, #4
 800473e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004746:	2b00      	cmp	r3, #0
 8004748:	d03d      	beq.n	80047c6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004750:	2b00      	cmp	r3, #0
 8004752:	d038      	beq.n	80047c6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800475a:	2b30      	cmp	r3, #48	; 0x30
 800475c:	d017      	beq.n	800478e <HAL_CAN_IRQHandler+0x302>
 800475e:	2b30      	cmp	r3, #48	; 0x30
 8004760:	d804      	bhi.n	800476c <HAL_CAN_IRQHandler+0x2e0>
 8004762:	2b10      	cmp	r3, #16
 8004764:	d009      	beq.n	800477a <HAL_CAN_IRQHandler+0x2ee>
 8004766:	2b20      	cmp	r3, #32
 8004768:	d00c      	beq.n	8004784 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800476a:	e024      	b.n	80047b6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800476c:	2b50      	cmp	r3, #80	; 0x50
 800476e:	d018      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x316>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d01b      	beq.n	80047ac <HAL_CAN_IRQHandler+0x320>
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d00f      	beq.n	8004798 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004778:	e01d      	b.n	80047b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	f043 0308 	orr.w	r3, r3, #8
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004782:	e018      	b.n	80047b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	f043 0310 	orr.w	r3, r3, #16
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800478c:	e013      	b.n	80047b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	f043 0320 	orr.w	r3, r3, #32
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004796:	e00e      	b.n	80047b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047a0:	e009      	b.n	80047b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047aa:	e004      	b.n	80047b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2204      	movs	r2, #4
 80047cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f872 	bl	80048ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047e6:	bf00      	nop
 80047e8:	3728      	adds	r7, #40	; 0x28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <__NVIC_SetPriorityGrouping+0x40>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048fc:	4013      	ands	r3, r2
 80048fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <__NVIC_SetPriorityGrouping+0x44>)
 800490a:	4313      	orrs	r3, r2
 800490c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800490e:	4a04      	ldr	r2, [pc, #16]	; (8004920 <__NVIC_SetPriorityGrouping+0x40>)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	60d3      	str	r3, [r2, #12]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	e000ed00 	.word	0xe000ed00
 8004924:	05fa0000 	.word	0x05fa0000

08004928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <__NVIC_GetPriorityGrouping+0x18>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	f003 0307 	and.w	r3, r3, #7
}
 8004936:	4618      	mov	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	2b00      	cmp	r3, #0
 8004954:	db0b      	blt.n	800496e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	f003 021f 	and.w	r2, r3, #31
 800495c:	4907      	ldr	r1, [pc, #28]	; (800497c <__NVIC_EnableIRQ+0x38>)
 800495e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	2001      	movs	r0, #1
 8004966:	fa00 f202 	lsl.w	r2, r0, r2
 800496a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	e000e100 	.word	0xe000e100

08004980 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800498a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498e:	2b00      	cmp	r3, #0
 8004990:	db10      	blt.n	80049b4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	f003 021f 	and.w	r2, r3, #31
 8004998:	4909      	ldr	r1, [pc, #36]	; (80049c0 <__NVIC_DisableIRQ+0x40>)
 800499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2001      	movs	r0, #1
 80049a2:	fa00 f202 	lsl.w	r2, r0, r2
 80049a6:	3320      	adds	r3, #32
 80049a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80049ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80049b0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	e000e100 	.word	0xe000e100

080049c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	6039      	str	r1, [r7, #0]
 80049ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	db0a      	blt.n	80049ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	490c      	ldr	r1, [pc, #48]	; (8004a10 <__NVIC_SetPriority+0x4c>)
 80049de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e2:	0112      	lsls	r2, r2, #4
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	440b      	add	r3, r1
 80049e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049ec:	e00a      	b.n	8004a04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	4908      	ldr	r1, [pc, #32]	; (8004a14 <__NVIC_SetPriority+0x50>)
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	3b04      	subs	r3, #4
 80049fc:	0112      	lsls	r2, r2, #4
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	440b      	add	r3, r1
 8004a02:	761a      	strb	r2, [r3, #24]
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	e000e100 	.word	0xe000e100
 8004a14:	e000ed00 	.word	0xe000ed00

08004a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f1c3 0307 	rsb	r3, r3, #7
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	bf28      	it	cs
 8004a36:	2304      	movcs	r3, #4
 8004a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	d902      	bls.n	8004a48 <NVIC_EncodePriority+0x30>
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3b03      	subs	r3, #3
 8004a46:	e000      	b.n	8004a4a <NVIC_EncodePriority+0x32>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43da      	mvns	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a60:	f04f 31ff 	mov.w	r1, #4294967295
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	43d9      	mvns	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a70:	4313      	orrs	r3, r2
         );
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3724      	adds	r7, #36	; 0x24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff ff2a 	bl	80048e0 <__NVIC_SetPriorityGrouping>
}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa6:	f7ff ff3f 	bl	8004928 <__NVIC_GetPriorityGrouping>
 8004aaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	6978      	ldr	r0, [r7, #20]
 8004ab2:	f7ff ffb1 	bl	8004a18 <NVIC_EncodePriority>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff ff80 	bl	80049c4 <__NVIC_SetPriority>
}
 8004ac4:	bf00      	nop
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff ff32 	bl	8004944 <__NVIC_EnableIRQ>
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff ff42 	bl	8004980 <__NVIC_DisableIRQ>
}
 8004afc:	bf00      	nop
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e054      	b.n	8004bc0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	7f5b      	ldrb	r3, [r3, #29]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fd fe62 	bl	80027f0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	791b      	ldrb	r3, [r3, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10c      	bne.n	8004b54 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <HAL_CRC_Init+0xc4>)
 8004b40:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0218 	bic.w	r2, r2, #24
 8004b50:	609a      	str	r2, [r3, #8]
 8004b52:	e00c      	b.n	8004b6e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6899      	ldr	r1, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f834 	bl	8004bcc <HAL_CRCEx_Polynomial_Set>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e028      	b.n	8004bc0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	795b      	ldrb	r3, [r3, #5]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d105      	bne.n	8004b82 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7e:	611a      	str	r2, [r3, #16]
 8004b80:	e004      	b.n	8004b8c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6912      	ldr	r2, [r2, #16]
 8004b8a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699a      	ldr	r2, [r3, #24]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	04c11db7 	.word	0x04c11db7

08004bcc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004bdc:	231f      	movs	r3, #31
 8004bde:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004be0:	bf00      	nop
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1e5a      	subs	r2, r3, #1
 8004be6:	613a      	str	r2, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d009      	beq.n	8004c00 <HAL_CRCEx_Polynomial_Set+0x34>
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f003 031f 	and.w	r3, r3, #31
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b18      	cmp	r3, #24
 8004c04:	d846      	bhi.n	8004c94 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004c06:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c9b 	.word	0x08004c9b
 8004c10:	08004c95 	.word	0x08004c95
 8004c14:	08004c95 	.word	0x08004c95
 8004c18:	08004c95 	.word	0x08004c95
 8004c1c:	08004c95 	.word	0x08004c95
 8004c20:	08004c95 	.word	0x08004c95
 8004c24:	08004c95 	.word	0x08004c95
 8004c28:	08004c95 	.word	0x08004c95
 8004c2c:	08004c89 	.word	0x08004c89
 8004c30:	08004c95 	.word	0x08004c95
 8004c34:	08004c95 	.word	0x08004c95
 8004c38:	08004c95 	.word	0x08004c95
 8004c3c:	08004c95 	.word	0x08004c95
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004c95 	.word	0x08004c95
 8004c48:	08004c95 	.word	0x08004c95
 8004c4c:	08004c7d 	.word	0x08004c7d
 8004c50:	08004c95 	.word	0x08004c95
 8004c54:	08004c95 	.word	0x08004c95
 8004c58:	08004c95 	.word	0x08004c95
 8004c5c:	08004c95 	.word	0x08004c95
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004c95 	.word	0x08004c95
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	08004c71 	.word	0x08004c71
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d913      	bls.n	8004c9e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c7a:	e010      	b.n	8004c9e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b07      	cmp	r3, #7
 8004c80:	d90f      	bls.n	8004ca2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c86:	e00c      	b.n	8004ca2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b0f      	cmp	r3, #15
 8004c8c:	d90b      	bls.n	8004ca6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c92:	e008      	b.n	8004ca6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	75fb      	strb	r3, [r7, #23]
      break;
 8004c98:	e006      	b.n	8004ca8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e004      	b.n	8004ca8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c9e:	bf00      	nop
 8004ca0:	e002      	b.n	8004ca8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e000      	b.n	8004ca8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004ca6:	bf00      	nop
  }
  if (status == HAL_OK)
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10d      	bne.n	8004cca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f023 0118 	bic.w	r1, r3, #24
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e069      	b.n	8004dbe <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fd fd9a 	bl	8002830 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6819      	ldr	r1, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <HAL_DCMI_Init+0xf0>)
 8004d1e:	400b      	ands	r3, r1
 8004d20:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6819      	ldr	r1, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d36:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004d42:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004d4e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004d5a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004d66:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d112      	bne.n	8004d9e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	7f1b      	ldrb	r3, [r3, #28]
 8004d7c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7f5b      	ldrb	r3, [r3, #29]
 8004d82:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d84:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	7f9b      	ldrb	r3, [r3, #30]
 8004d8a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004d8c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	7fdb      	ldrb	r3, [r3, #31]
 8004d94:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004d9a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004d9c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 021e 	orr.w	r2, r2, #30
 8004dac:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	ffe0f007 	.word	0xffe0f007

08004dcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_DMA_Start_IT+0x26>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e048      	b.n	8004e84 <HAL_DMA_Start_IT+0xb8>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d137      	bne.n	8004e76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f842 	bl	8004ea4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	223f      	movs	r2, #63	; 0x3f
 8004e26:	409a      	lsls	r2, r3
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0216 	orr.w	r2, r2, #22
 8004e3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e4a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0208 	orr.w	r2, r2, #8
 8004e62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e005      	b.n	8004e82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ec0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d108      	bne.n	8004ee4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ee2:	e007      	b.n	8004ef4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	60da      	str	r2, [r3, #12]
}
 8004ef4:	bf00      	nop
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e039      	b.n	8004f86 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fd fd40 	bl	80029ac <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	f023 0107 	bic.w	r1, r3, #7
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_DMA2D_Init+0x90>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68d1      	ldr	r1, [r2, #12]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	430b      	orrs	r3, r1
 8004f74:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	ffffc000 	.word	0xffffc000

08004f94 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e05f      	b.n	8005066 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004fa6:	4b32      	ldr	r3, [pc, #200]	; (8005070 <HAL_DMA2D_DeInit+0xdc>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d02e      	beq.n	8005010 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d107      	bne.n	8004fd0 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f8c1 	bl	8005148 <HAL_DMA2D_Abort>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d021      	beq.n	8005010 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e04a      	b.n	8005066 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d108      	bne.n	8004ff0 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8004fde:	2100      	movs	r1, #0
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f8f7 	bl	80051d4 <HAL_DMA2D_CLUTLoading_Abort>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d011      	beq.n	8005010 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e03a      	b.n	8005066 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d108      	bne.n	8005010 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8004ffe:	2101      	movs	r1, #1
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f8e7 	bl	80051d4 <HAL_DMA2D_CLUTLoading_Abort>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e02a      	b.n	8005066 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	223f      	movs	r2, #63	; 0x3f
 800501e:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2200      	movs	r2, #0
 8005026:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2200      	movs	r2, #0
 800502e:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2200      	movs	r2, #0
 800503e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2200      	movs	r2, #0
 8005046:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fd fcd5 	bl	80029f8 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800

08005074 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_DMA2D_Start_IT+0x1c>
 800508c:	2302      	movs	r3, #2
 800508e:	e020      	b.n	80050d2 <HAL_DMA2D_Start_IT+0x5e>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fa84 	bl	80055b8 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80050be:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af02      	add	r7, sp, #8
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e024      	b.n	8005140 <HAL_DMA2D_BlendingStart_IT+0x66>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fa4d 	bl	80055b8 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800512c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 0205 	bic.w	r2, r3, #5
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0204 	orr.w	r2, r2, #4
 8005162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005164:	f7fe fb84 	bl	8003870 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800516a:	e017      	b.n	800519c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800516c:	f7fe fb80 	bl	8003870 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800517a:	d90f      	bls.n	800519c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2203      	movs	r2, #3
 800518c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e017      	b.n	80051cc <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e0      	bne.n	800516c <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80051b8:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3324      	adds	r3, #36	; 0x24
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0204 	orr.w	r2, r2, #4
 80051f4:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d103      	bne.n	8005204 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	331c      	adds	r3, #28
 8005202:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8005204:	f7fe fb34 	bl	8003870 <HAL_GetTick>
 8005208:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800520a:	e017      	b.n	800523c <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800520c:	f7fe fb30 	bl	8003870 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800521a:	d90f      	bls.n	800523c <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005220:	f043 0220 	orr.w	r2, r3, #32
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2203      	movs	r2, #3
 800522c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e016      	b.n	800526a <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e1      	bne.n	800520c <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8005256:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d026      	beq.n	80052e2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d021      	beq.n	80052e2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ac:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	f043 0201 	orr.w	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2204      	movs	r2, #4
 80052c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d026      	beq.n	800533a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d021      	beq.n	800533a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005304:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2220      	movs	r2, #32
 800530c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	f043 0202 	orr.w	r2, r3, #2
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d026      	beq.n	8005392 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534a:	2b00      	cmp	r3, #0
 800534c:	d021      	beq.n	8005392 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800535c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2208      	movs	r2, #8
 8005364:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	f043 0204 	orr.w	r2, r3, #4
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2204      	movs	r2, #4
 8005376:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d013      	beq.n	80053c4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00e      	beq.n	80053c4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2204      	movs	r2, #4
 80053bc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f853 	bl	800546a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d024      	beq.n	8005418 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01f      	beq.n	8005418 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2202      	movs	r2, #2
 80053ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	d01f      	beq.n	8005462 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01a      	beq.n	8005462 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800543a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2210      	movs	r2, #16
 8005442:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f80e 	bl	800547e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_DMA2D_ConfigLayer+0x20>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e079      	b.n	80055a8 <HAL_DMA2D_ConfigLayer+0x114>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	3318      	adds	r3, #24
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80054de:	4b35      	ldr	r3, [pc, #212]	; (80055b4 <HAL_DMA2D_ConfigLayer+0x120>)
 80054e0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b0a      	cmp	r3, #10
 80054e8:	d003      	beq.n	80054f2 <HAL_DMA2D_ConfigLayer+0x5e>
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b09      	cmp	r3, #9
 80054f0:	d107      	bne.n	8005502 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e005      	b.n	800550e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d120      	bne.n	8005556 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	43db      	mvns	r3, r3
 800551e:	ea02 0103 	and.w	r1, r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	430a      	orrs	r2, r1
 800552a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b0a      	cmp	r3, #10
 800553c:	d003      	beq.n	8005546 <HAL_DMA2D_ConfigLayer+0xb2>
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2b09      	cmp	r3, #9
 8005544:	d127      	bne.n	8005596 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
 8005554:	e01f      	b.n	8005596 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	43db      	mvns	r3, r3
 8005560:	ea02 0103 	and.w	r1, r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	430a      	orrs	r2, r1
 800556c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	6812      	ldr	r2, [r2, #0]
 8005576:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b0a      	cmp	r3, #10
 800557e:	d003      	beq.n	8005588 <HAL_DMA2D_ConfigLayer+0xf4>
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b09      	cmp	r3, #9
 8005586:	d106      	bne.n	8005596 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005594:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	ff03000f 	.word	0xff03000f

080055b8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b08b      	sub	sp, #44	; 0x2c
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055cc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	041a      	lsls	r2, r3, #16
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055f0:	d174      	bne.n	80056dc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055f8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005600:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005608:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d108      	bne.n	800562a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	431a      	orrs	r2, r3
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	4313      	orrs	r3, r2
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
 8005628:	e053      	b.n	80056d2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d106      	bne.n	8005640 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4313      	orrs	r3, r2
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
 800563e:	e048      	b.n	80056d2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d111      	bne.n	800566c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	0cdb      	lsrs	r3, r3, #19
 800564c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	0a9b      	lsrs	r3, r3, #10
 8005652:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	08db      	lsrs	r3, r3, #3
 8005658:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	02db      	lsls	r3, r3, #11
 8005662:	4313      	orrs	r3, r2
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
 800566a:	e032      	b.n	80056d2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d117      	bne.n	80056a4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	0fdb      	lsrs	r3, r3, #31
 8005678:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	0cdb      	lsrs	r3, r3, #19
 800567e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	0adb      	lsrs	r3, r3, #11
 8005684:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	08db      	lsrs	r3, r3, #3
 800568a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	029b      	lsls	r3, r3, #10
 8005694:	431a      	orrs	r2, r3
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	03db      	lsls	r3, r3, #15
 800569a:	4313      	orrs	r3, r2
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
 80056a2:	e016      	b.n	80056d2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	0f1b      	lsrs	r3, r3, #28
 80056a8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	0d1b      	lsrs	r3, r3, #20
 80056ae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	0b1b      	lsrs	r3, r3, #12
 80056b4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	011a      	lsls	r2, r3, #4
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	431a      	orrs	r2, r3
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	031b      	lsls	r3, r3, #12
 80056ca:	4313      	orrs	r3, r2
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80056da:	e003      	b.n	80056e4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	60da      	str	r2, [r3, #12]
}
 80056e4:	bf00      	nop
 80056e6:	372c      	adds	r7, #44	; 0x2c
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b089      	sub	sp, #36	; 0x24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005702:	2300      	movs	r3, #0
 8005704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	e175      	b.n	80059fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005710:	2201      	movs	r2, #1
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4013      	ands	r3, r2
 8005722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	429a      	cmp	r2, r3
 800572a:	f040 8164 	bne.w	80059f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d00b      	beq.n	800574e <HAL_GPIO_Init+0x5e>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d007      	beq.n	800574e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005742:	2b11      	cmp	r3, #17
 8005744:	d003      	beq.n	800574e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b12      	cmp	r3, #18
 800574c:	d130      	bne.n	80057b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	2203      	movs	r2, #3
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	43db      	mvns	r3, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4013      	ands	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005784:	2201      	movs	r2, #1
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4013      	ands	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	f003 0201 	and.w	r2, r3, #1
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	2203      	movs	r2, #3
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	43db      	mvns	r3, r3
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4013      	ands	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d003      	beq.n	80057f0 <HAL_GPIO_Init+0x100>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b12      	cmp	r3, #18
 80057ee:	d123      	bne.n	8005838 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	08da      	lsrs	r2, r3, #3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3208      	adds	r2, #8
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	220f      	movs	r2, #15
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	08da      	lsrs	r2, r3, #3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3208      	adds	r2, #8
 8005832:	69b9      	ldr	r1, [r7, #24]
 8005834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	2203      	movs	r2, #3
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0203 	and.w	r2, r3, #3
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80be 	beq.w	80059f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800587a:	4b65      	ldr	r3, [pc, #404]	; (8005a10 <HAL_GPIO_Init+0x320>)
 800587c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587e:	4a64      	ldr	r2, [pc, #400]	; (8005a10 <HAL_GPIO_Init+0x320>)
 8005880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005884:	6453      	str	r3, [r2, #68]	; 0x44
 8005886:	4b62      	ldr	r3, [pc, #392]	; (8005a10 <HAL_GPIO_Init+0x320>)
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005892:	4a60      	ldr	r2, [pc, #384]	; (8005a14 <HAL_GPIO_Init+0x324>)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	089b      	lsrs	r3, r3, #2
 8005898:	3302      	adds	r3, #2
 800589a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800589e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	220f      	movs	r2, #15
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43db      	mvns	r3, r3
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4013      	ands	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a57      	ldr	r2, [pc, #348]	; (8005a18 <HAL_GPIO_Init+0x328>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d037      	beq.n	800592e <HAL_GPIO_Init+0x23e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a56      	ldr	r2, [pc, #344]	; (8005a1c <HAL_GPIO_Init+0x32c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d031      	beq.n	800592a <HAL_GPIO_Init+0x23a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a55      	ldr	r2, [pc, #340]	; (8005a20 <HAL_GPIO_Init+0x330>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d02b      	beq.n	8005926 <HAL_GPIO_Init+0x236>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a54      	ldr	r2, [pc, #336]	; (8005a24 <HAL_GPIO_Init+0x334>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d025      	beq.n	8005922 <HAL_GPIO_Init+0x232>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a53      	ldr	r2, [pc, #332]	; (8005a28 <HAL_GPIO_Init+0x338>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <HAL_GPIO_Init+0x22e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a52      	ldr	r2, [pc, #328]	; (8005a2c <HAL_GPIO_Init+0x33c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d019      	beq.n	800591a <HAL_GPIO_Init+0x22a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a51      	ldr	r2, [pc, #324]	; (8005a30 <HAL_GPIO_Init+0x340>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_GPIO_Init+0x226>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a50      	ldr	r2, [pc, #320]	; (8005a34 <HAL_GPIO_Init+0x344>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00d      	beq.n	8005912 <HAL_GPIO_Init+0x222>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a4f      	ldr	r2, [pc, #316]	; (8005a38 <HAL_GPIO_Init+0x348>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <HAL_GPIO_Init+0x21e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a4e      	ldr	r2, [pc, #312]	; (8005a3c <HAL_GPIO_Init+0x34c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_GPIO_Init+0x21a>
 8005906:	2309      	movs	r3, #9
 8005908:	e012      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800590a:	230a      	movs	r3, #10
 800590c:	e010      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800590e:	2308      	movs	r3, #8
 8005910:	e00e      	b.n	8005930 <HAL_GPIO_Init+0x240>
 8005912:	2307      	movs	r3, #7
 8005914:	e00c      	b.n	8005930 <HAL_GPIO_Init+0x240>
 8005916:	2306      	movs	r3, #6
 8005918:	e00a      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800591a:	2305      	movs	r3, #5
 800591c:	e008      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800591e:	2304      	movs	r3, #4
 8005920:	e006      	b.n	8005930 <HAL_GPIO_Init+0x240>
 8005922:	2303      	movs	r3, #3
 8005924:	e004      	b.n	8005930 <HAL_GPIO_Init+0x240>
 8005926:	2302      	movs	r3, #2
 8005928:	e002      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <HAL_GPIO_Init+0x240>
 800592e:	2300      	movs	r3, #0
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	f002 0203 	and.w	r2, r2, #3
 8005936:	0092      	lsls	r2, r2, #2
 8005938:	4093      	lsls	r3, r2
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4313      	orrs	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005940:	4934      	ldr	r1, [pc, #208]	; (8005a14 <HAL_GPIO_Init+0x324>)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	089b      	lsrs	r3, r3, #2
 8005946:	3302      	adds	r3, #2
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800594e:	4b3c      	ldr	r3, [pc, #240]	; (8005a40 <HAL_GPIO_Init+0x350>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	43db      	mvns	r3, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4013      	ands	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005972:	4a33      	ldr	r2, [pc, #204]	; (8005a40 <HAL_GPIO_Init+0x350>)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005978:	4b31      	ldr	r3, [pc, #196]	; (8005a40 <HAL_GPIO_Init+0x350>)
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	43db      	mvns	r3, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4013      	ands	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800599c:	4a28      	ldr	r2, [pc, #160]	; (8005a40 <HAL_GPIO_Init+0x350>)
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059a2:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <HAL_GPIO_Init+0x350>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	43db      	mvns	r3, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4013      	ands	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059c6:	4a1e      	ldr	r2, [pc, #120]	; (8005a40 <HAL_GPIO_Init+0x350>)
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059cc:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <HAL_GPIO_Init+0x350>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	43db      	mvns	r3, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <HAL_GPIO_Init+0x350>)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	3301      	adds	r3, #1
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	2b0f      	cmp	r3, #15
 8005a00:	f67f ae86 	bls.w	8005710 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a04:	bf00      	nop
 8005a06:	3724      	adds	r7, #36	; 0x24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40023800 	.word	0x40023800
 8005a14:	40013800 	.word	0x40013800
 8005a18:	40020000 	.word	0x40020000
 8005a1c:	40020400 	.word	0x40020400
 8005a20:	40020800 	.word	0x40020800
 8005a24:	40020c00 	.word	0x40020c00
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	40021400 	.word	0x40021400
 8005a30:	40021800 	.word	0x40021800
 8005a34:	40021c00 	.word	0x40021c00
 8005a38:	40022000 	.word	0x40022000
 8005a3c:	40022400 	.word	0x40022400
 8005a40:	40013c00 	.word	0x40013c00

08005a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	887b      	ldrh	r3, [r7, #2]
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
 8005a60:	e001      	b.n	8005a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	807b      	strh	r3, [r7, #2]
 8005a80:	4613      	mov	r3, r2
 8005a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a84:	787b      	ldrb	r3, [r7, #1]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a8a:	887a      	ldrh	r2, [r7, #2]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a90:	e003      	b.n	8005a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a92:	887b      	ldrh	r3, [r7, #2]
 8005a94:	041a      	lsls	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	619a      	str	r2, [r3, #24]
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e0bf      	b.n	8005c3a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fc ffac 	bl	8002a2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005aea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6999      	ldr	r1, [r3, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6899      	ldr	r1, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b4a      	ldr	r3, [pc, #296]	; (8005c44 <HAL_LTDC_Init+0x19c>)
 8005b1c:	400b      	ands	r3, r1
 8005b1e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	041b      	lsls	r3, r3, #16
 8005b26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6899      	ldr	r1, [r3, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68d9      	ldr	r1, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4b3e      	ldr	r3, [pc, #248]	; (8005c44 <HAL_LTDC_Init+0x19c>)
 8005b4a:	400b      	ands	r3, r1
 8005b4c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68d9      	ldr	r1, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1a      	ldr	r2, [r3, #32]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6919      	ldr	r1, [r3, #16]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b33      	ldr	r3, [pc, #204]	; (8005c44 <HAL_LTDC_Init+0x19c>)
 8005b78:	400b      	ands	r3, r1
 8005b7a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6919      	ldr	r1, [r3, #16]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6959      	ldr	r1, [r3, #20]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <HAL_LTDC_Init+0x19c>)
 8005ba6:	400b      	ands	r3, r1
 8005ba8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	041b      	lsls	r3, r3, #16
 8005bb0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6959      	ldr	r1, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005bd8:	041b      	lsls	r3, r3, #16
 8005bda:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0206 	orr.w	r2, r2, #6
 8005c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	f000f800 	.word	0xf000f800

08005c48 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d023      	beq.n	8005cb2 <HAL_LTDC_IRQHandler+0x6a>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01e      	beq.n	8005cb2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0204 	bic.w	r2, r2, #4
 8005c82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c92:	f043 0201 	orr.w	r2, r3, #1
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f86f 	bl	8005d90 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d023      	beq.n	8005d04 <HAL_LTDC_IRQHandler+0xbc>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d01e      	beq.n	8005d04 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0202 	bic.w	r2, r2, #2
 8005cd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ce4:	f043 0202 	orr.w	r2, r3, #2
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f846 	bl	8005d90 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01b      	beq.n	8005d46 <HAL_LTDC_IRQHandler+0xfe>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d016      	beq.n	8005d46 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0201 	bic.w	r2, r2, #1
 8005d26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f00e fe77 	bl	8014a34 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01b      	beq.n	8005d88 <HAL_LTDC_IRQHandler+0x140>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d016      	beq.n	8005d88 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0208 	bic.w	r2, r2, #8
 8005d68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2208      	movs	r2, #8
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f80e 	bl	8005da4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d88:	bf00      	nop
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005db8:	b5b0      	push	{r4, r5, r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_LTDC_ConfigLayer+0x1a>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e02c      	b.n	8005e2c <HAL_LTDC_ConfigLayer+0x74>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2134      	movs	r1, #52	; 0x34
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	4413      	add	r3, r2
 8005dee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4614      	mov	r4, r2
 8005df6:	461d      	mov	r5, r3
 8005df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f849 	bl	8005ea4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2201      	movs	r2, #1
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bdb0      	pop	{r4, r5, r7, pc}

08005e34 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_LTDC_ProgramLineEvent+0x18>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e023      	b.n	8005e94 <HAL_LTDC_ProgramLineEvent+0x60>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005e6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ea0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0201 	orr.w	r2, r2, #1
 8005e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	40016800 	.word	0x40016800

08005ea4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	0c1b      	lsrs	r3, r3, #16
 8005ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec0:	4413      	add	r3, r2
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	01db      	lsls	r3, r3, #7
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3384      	adds	r3, #132	; 0x84
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	4611      	mov	r1, r2
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	01d2      	lsls	r2, r2, #7
 8005ee0:	440a      	add	r2, r1
 8005ee2:	3284      	adds	r2, #132	; 0x84
 8005ee4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ee8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005efa:	4413      	add	r3, r2
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	01db      	lsls	r3, r3, #7
 8005f08:	440b      	add	r3, r1
 8005f0a:	3384      	adds	r3, #132	; 0x84
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f22:	4413      	add	r3, r2
 8005f24:	041b      	lsls	r3, r3, #16
 8005f26:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	01db      	lsls	r3, r3, #7
 8005f32:	4413      	add	r3, r2
 8005f34:	3384      	adds	r3, #132	; 0x84
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	01d2      	lsls	r2, r2, #7
 8005f42:	440a      	add	r2, r1
 8005f44:	3284      	adds	r2, #132	; 0x84
 8005f46:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f4a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f5a:	4413      	add	r3, r2
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4619      	mov	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	01db      	lsls	r3, r3, #7
 8005f68:	440b      	add	r3, r1
 8005f6a:	3384      	adds	r3, #132	; 0x84
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	01db      	lsls	r3, r3, #7
 8005f7e:	4413      	add	r3, r2
 8005f80:	3384      	adds	r3, #132	; 0x84
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	4611      	mov	r1, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	01d2      	lsls	r2, r2, #7
 8005f8e:	440a      	add	r2, r1
 8005f90:	3284      	adds	r2, #132	; 0x84
 8005f92:	f023 0307 	bic.w	r3, r3, #7
 8005f96:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	01db      	lsls	r3, r3, #7
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3384      	adds	r3, #132	; 0x84
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005fbe:	041b      	lsls	r3, r3, #16
 8005fc0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	01db      	lsls	r3, r3, #7
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3384      	adds	r3, #132	; 0x84
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	01db      	lsls	r3, r3, #7
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3384      	adds	r3, #132	; 0x84
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2300      	movs	r3, #0
 8005fec:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	01db      	lsls	r3, r3, #7
 8006008:	440b      	add	r3, r1
 800600a:	3384      	adds	r3, #132	; 0x84
 800600c:	4619      	mov	r1, r3
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	01db      	lsls	r3, r3, #7
 800601e:	4413      	add	r3, r2
 8006020:	3384      	adds	r3, #132	; 0x84
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	4611      	mov	r1, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	01d2      	lsls	r2, r2, #7
 800602e:	440a      	add	r2, r1
 8006030:	3284      	adds	r2, #132	; 0x84
 8006032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006036:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	01db      	lsls	r3, r3, #7
 8006042:	4413      	add	r3, r2
 8006044:	3384      	adds	r3, #132	; 0x84
 8006046:	461a      	mov	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	01db      	lsls	r3, r3, #7
 8006058:	4413      	add	r3, r2
 800605a:	3384      	adds	r3, #132	; 0x84
 800605c:	69da      	ldr	r2, [r3, #28]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	01db      	lsls	r3, r3, #7
 8006068:	440b      	add	r3, r1
 800606a:	3384      	adds	r3, #132	; 0x84
 800606c:	4619      	mov	r1, r3
 800606e:	4b58      	ldr	r3, [pc, #352]	; (80061d0 <LTDC_SetConfig+0x32c>)
 8006070:	4013      	ands	r3, r2
 8006072:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	68f9      	ldr	r1, [r7, #12]
 800607e:	6809      	ldr	r1, [r1, #0]
 8006080:	4608      	mov	r0, r1
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	01c9      	lsls	r1, r1, #7
 8006086:	4401      	add	r1, r0
 8006088:	3184      	adds	r1, #132	; 0x84
 800608a:	4313      	orrs	r3, r2
 800608c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	01db      	lsls	r3, r3, #7
 8006098:	4413      	add	r3, r2
 800609a:	3384      	adds	r3, #132	; 0x84
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	01db      	lsls	r3, r3, #7
 80060a8:	4413      	add	r3, r2
 80060aa:	3384      	adds	r3, #132	; 0x84
 80060ac:	461a      	mov	r2, r3
 80060ae:	2300      	movs	r3, #0
 80060b0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	01db      	lsls	r3, r3, #7
 80060bc:	4413      	add	r3, r2
 80060be:	3384      	adds	r3, #132	; 0x84
 80060c0:	461a      	mov	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80060d0:	2304      	movs	r3, #4
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	e01b      	b.n	800610e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d102      	bne.n	80060e4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80060de:	2303      	movs	r3, #3
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	e014      	b.n	800610e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d00b      	beq.n	8006104 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d007      	beq.n	8006104 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d003      	beq.n	8006104 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006100:	2b07      	cmp	r3, #7
 8006102:	d102      	bne.n	800610a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006104:	2302      	movs	r3, #2
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e001      	b.n	800610e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800610a:	2301      	movs	r3, #1
 800610c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	01db      	lsls	r3, r3, #7
 8006118:	4413      	add	r3, r2
 800611a:	3384      	adds	r3, #132	; 0x84
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	4611      	mov	r1, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	01d2      	lsls	r2, r2, #7
 8006128:	440a      	add	r2, r1
 800612a:	3284      	adds	r2, #132	; 0x84
 800612c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006130:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	fb02 f303 	mul.w	r3, r2, r3
 800613c:	041a      	lsls	r2, r3, #16
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6859      	ldr	r1, [r3, #4]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	1acb      	subs	r3, r1, r3
 8006148:	69f9      	ldr	r1, [r7, #28]
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	3303      	adds	r3, #3
 8006150:	68f9      	ldr	r1, [r7, #12]
 8006152:	6809      	ldr	r1, [r1, #0]
 8006154:	4608      	mov	r0, r1
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	01c9      	lsls	r1, r1, #7
 800615a:	4401      	add	r1, r0
 800615c:	3184      	adds	r1, #132	; 0x84
 800615e:	4313      	orrs	r3, r2
 8006160:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	01db      	lsls	r3, r3, #7
 800616c:	4413      	add	r3, r2
 800616e:	3384      	adds	r3, #132	; 0x84
 8006170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4619      	mov	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	01db      	lsls	r3, r3, #7
 800617c:	440b      	add	r3, r1
 800617e:	3384      	adds	r3, #132	; 0x84
 8006180:	4619      	mov	r1, r3
 8006182:	4b14      	ldr	r3, [pc, #80]	; (80061d4 <LTDC_SetConfig+0x330>)
 8006184:	4013      	ands	r3, r2
 8006186:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	01db      	lsls	r3, r3, #7
 8006192:	4413      	add	r3, r2
 8006194:	3384      	adds	r3, #132	; 0x84
 8006196:	461a      	mov	r2, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	01db      	lsls	r3, r3, #7
 80061a8:	4413      	add	r3, r2
 80061aa:	3384      	adds	r3, #132	; 0x84
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	4611      	mov	r1, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	01d2      	lsls	r2, r2, #7
 80061b8:	440a      	add	r2, r1
 80061ba:	3284      	adds	r2, #132	; 0x84
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	6013      	str	r3, [r2, #0]
}
 80061c2:	bf00      	nop
 80061c4:	3724      	adds	r7, #36	; 0x24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	fffff8f8 	.word	0xfffff8f8
 80061d4:	fffff800 	.word	0xfffff800

080061d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061dc:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a04      	ldr	r2, [pc, #16]	; (80061f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e6:	6013      	str	r3, [r2, #0]
}
 80061e8:	bf00      	nop
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40007000 	.word	0x40007000

080061f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006202:	4b23      	ldr	r3, [pc, #140]	; (8006290 <HAL_PWREx_EnableOverDrive+0x98>)
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	4a22      	ldr	r2, [pc, #136]	; (8006290 <HAL_PWREx_EnableOverDrive+0x98>)
 8006208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800620c:	6413      	str	r3, [r2, #64]	; 0x40
 800620e:	4b20      	ldr	r3, [pc, #128]	; (8006290 <HAL_PWREx_EnableOverDrive+0x98>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800621a:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006224:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006226:	f7fd fb23 	bl	8003870 <HAL_GetTick>
 800622a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800622c:	e009      	b.n	8006242 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800622e:	f7fd fb1f 	bl	8003870 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800623c:	d901      	bls.n	8006242 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e022      	b.n	8006288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800624a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624e:	d1ee      	bne.n	800622e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006250:	4b10      	ldr	r3, [pc, #64]	; (8006294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a0f      	ldr	r2, [pc, #60]	; (8006294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800625a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800625c:	f7fd fb08 	bl	8003870 <HAL_GetTick>
 8006260:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006262:	e009      	b.n	8006278 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006264:	f7fd fb04 	bl	8003870 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006272:	d901      	bls.n	8006278 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e007      	b.n	8006288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006284:	d1ee      	bne.n	8006264 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40023800 	.word	0x40023800
 8006294:	40007000 	.word	0x40007000

08006298 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af02      	add	r7, sp, #8
 800629e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80062a0:	f7fd fae6 	bl	8003870 <HAL_GetTick>
 80062a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e067      	b.n	8006380 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10b      	bne.n	80062d4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7fc fc79 	bl	8002bbc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80062ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f85e 	bl	8006390 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	021a      	lsls	r2, r3, #8
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	2120      	movs	r1, #32
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f856 	bl	80063ac <QSPI_WaitFlagStateUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006304:	7afb      	ldrb	r3, [r7, #11]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d135      	bne.n	8006376 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	4b1d      	ldr	r3, [pc, #116]	; (8006388 <HAL_QSPI_Init+0xf0>)
 8006312:	4013      	ands	r3, r2
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6852      	ldr	r2, [r2, #4]
 8006318:	0611      	lsls	r1, r2, #24
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68d2      	ldr	r2, [r2, #12]
 800631e:	4311      	orrs	r1, r2
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	69d2      	ldr	r2, [r2, #28]
 8006324:	4311      	orrs	r1, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6a12      	ldr	r2, [r2, #32]
 800632a:	4311      	orrs	r1, r2
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	430b      	orrs	r3, r1
 8006332:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	4b14      	ldr	r3, [pc, #80]	; (800638c <HAL_QSPI_Init+0xf4>)
 800633c:	4013      	ands	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6912      	ldr	r2, [r2, #16]
 8006342:	0411      	lsls	r1, r2, #16
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6952      	ldr	r2, [r2, #20]
 8006348:	4311      	orrs	r1, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6992      	ldr	r2, [r2, #24]
 800634e:	4311      	orrs	r1, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6812      	ldr	r2, [r2, #0]
 8006354:	430b      	orrs	r3, r1
 8006356:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800637e:	7afb      	ldrb	r3, [r7, #11]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	00ffff2f 	.word	0x00ffff2f
 800638c:	ffe0f8fe 	.word	0xffe0f8fe

08006390 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	649a      	str	r2, [r3, #72]	; 0x48
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063bc:	e01a      	b.n	80063f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c4:	d016      	beq.n	80063f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c6:	f7fd fa53 	bl	8003870 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d302      	bcc.n	80063dc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10b      	bne.n	80063f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2204      	movs	r2, #4
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	f043 0201 	orr.w	r2, r3, #1
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e00e      	b.n	8006412 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bf14      	ite	ne
 8006402:	2301      	movne	r3, #1
 8006404:	2300      	moveq	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	429a      	cmp	r2, r3
 800640e:	d1d6      	bne.n	80063be <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006424:	2300      	movs	r3, #0
 8006426:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e291      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 8087 	beq.w	800654e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006440:	4b96      	ldr	r3, [pc, #600]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	2b04      	cmp	r3, #4
 800644a:	d00c      	beq.n	8006466 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800644c:	4b93      	ldr	r3, [pc, #588]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 030c 	and.w	r3, r3, #12
 8006454:	2b08      	cmp	r3, #8
 8006456:	d112      	bne.n	800647e <HAL_RCC_OscConfig+0x62>
 8006458:	4b90      	ldr	r3, [pc, #576]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006464:	d10b      	bne.n	800647e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006466:	4b8d      	ldr	r3, [pc, #564]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d06c      	beq.n	800654c <HAL_RCC_OscConfig+0x130>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d168      	bne.n	800654c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e26b      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006486:	d106      	bne.n	8006496 <HAL_RCC_OscConfig+0x7a>
 8006488:	4b84      	ldr	r3, [pc, #528]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a83      	ldr	r2, [pc, #524]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800648e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	e02e      	b.n	80064f4 <HAL_RCC_OscConfig+0xd8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10c      	bne.n	80064b8 <HAL_RCC_OscConfig+0x9c>
 800649e:	4b7f      	ldr	r3, [pc, #508]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a7e      	ldr	r2, [pc, #504]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	4b7c      	ldr	r3, [pc, #496]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a7b      	ldr	r2, [pc, #492]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e01d      	b.n	80064f4 <HAL_RCC_OscConfig+0xd8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c0:	d10c      	bne.n	80064dc <HAL_RCC_OscConfig+0xc0>
 80064c2:	4b76      	ldr	r3, [pc, #472]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a75      	ldr	r2, [pc, #468]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4b73      	ldr	r3, [pc, #460]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a72      	ldr	r2, [pc, #456]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e00b      	b.n	80064f4 <HAL_RCC_OscConfig+0xd8>
 80064dc:	4b6f      	ldr	r3, [pc, #444]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a6e      	ldr	r2, [pc, #440]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	4b6c      	ldr	r3, [pc, #432]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a6b      	ldr	r2, [pc, #428]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80064ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d013      	beq.n	8006524 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fd f9b8 	bl	8003870 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006504:	f7fd f9b4 	bl	8003870 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	; 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e21f      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006516:	4b61      	ldr	r3, [pc, #388]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f0      	beq.n	8006504 <HAL_RCC_OscConfig+0xe8>
 8006522:	e014      	b.n	800654e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006524:	f7fd f9a4 	bl	8003870 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800652c:	f7fd f9a0 	bl	8003870 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b64      	cmp	r3, #100	; 0x64
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e20b      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800653e:	4b57      	ldr	r3, [pc, #348]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0x110>
 800654a:	e000      	b.n	800654e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800654c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d069      	beq.n	800662e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800655a:	4b50      	ldr	r3, [pc, #320]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 030c 	and.w	r3, r3, #12
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00b      	beq.n	800657e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006566:	4b4d      	ldr	r3, [pc, #308]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
 800656e:	2b08      	cmp	r3, #8
 8006570:	d11c      	bne.n	80065ac <HAL_RCC_OscConfig+0x190>
 8006572:	4b4a      	ldr	r3, [pc, #296]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d116      	bne.n	80065ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657e:	4b47      	ldr	r3, [pc, #284]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_RCC_OscConfig+0x17a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d001      	beq.n	8006596 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e1df      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006596:	4b41      	ldr	r3, [pc, #260]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	493d      	ldr	r1, [pc, #244]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065aa:	e040      	b.n	800662e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d023      	beq.n	80065fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065b4:	4b39      	ldr	r3, [pc, #228]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a38      	ldr	r2, [pc, #224]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fd f956 	bl	8003870 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c8:	f7fd f952 	bl	8003870 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e1bd      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065da:	4b30      	ldr	r3, [pc, #192]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e6:	4b2d      	ldr	r3, [pc, #180]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	4929      	ldr	r1, [pc, #164]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	600b      	str	r3, [r1, #0]
 80065fa:	e018      	b.n	800662e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065fc:	4b27      	ldr	r3, [pc, #156]	; (800669c <HAL_RCC_OscConfig+0x280>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a26      	ldr	r2, [pc, #152]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006608:	f7fd f932 	bl	8003870 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006610:	f7fd f92e 	bl	8003870 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e199      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006622:	4b1e      	ldr	r3, [pc, #120]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f0      	bne.n	8006610 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d038      	beq.n	80066ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d019      	beq.n	8006676 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006642:	4b16      	ldr	r3, [pc, #88]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006646:	4a15      	ldr	r2, [pc, #84]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664e:	f7fd f90f 	bl	8003870 <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006656:	f7fd f90b 	bl	8003870 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e176      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006668:	4b0c      	ldr	r3, [pc, #48]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800666a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0f0      	beq.n	8006656 <HAL_RCC_OscConfig+0x23a>
 8006674:	e01a      	b.n	80066ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <HAL_RCC_OscConfig+0x280>)
 8006678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667a:	4a08      	ldr	r2, [pc, #32]	; (800669c <HAL_RCC_OscConfig+0x280>)
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006682:	f7fd f8f5 	bl	8003870 <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006688:	e00a      	b.n	80066a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800668a:	f7fd f8f1 	bl	8003870 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d903      	bls.n	80066a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e15c      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
 800669c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066a0:	4b91      	ldr	r3, [pc, #580]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80066a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1ee      	bne.n	800668a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80a4 	beq.w	8006802 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ba:	4b8b      	ldr	r3, [pc, #556]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10d      	bne.n	80066e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80066c6:	4b88      	ldr	r3, [pc, #544]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	4a87      	ldr	r2, [pc, #540]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80066cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d0:	6413      	str	r3, [r2, #64]	; 0x40
 80066d2:	4b85      	ldr	r3, [pc, #532]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066da:	60bb      	str	r3, [r7, #8]
 80066dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066de:	2301      	movs	r3, #1
 80066e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066e2:	4b82      	ldr	r3, [pc, #520]	; (80068ec <HAL_RCC_OscConfig+0x4d0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d118      	bne.n	8006720 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80066ee:	4b7f      	ldr	r3, [pc, #508]	; (80068ec <HAL_RCC_OscConfig+0x4d0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a7e      	ldr	r2, [pc, #504]	; (80068ec <HAL_RCC_OscConfig+0x4d0>)
 80066f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066fa:	f7fd f8b9 	bl	8003870 <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006702:	f7fd f8b5 	bl	8003870 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b64      	cmp	r3, #100	; 0x64
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e120      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006714:	4b75      	ldr	r3, [pc, #468]	; (80068ec <HAL_RCC_OscConfig+0x4d0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d106      	bne.n	8006736 <HAL_RCC_OscConfig+0x31a>
 8006728:	4b6f      	ldr	r3, [pc, #444]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	4a6e      	ldr	r2, [pc, #440]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800672e:	f043 0301 	orr.w	r3, r3, #1
 8006732:	6713      	str	r3, [r2, #112]	; 0x70
 8006734:	e02d      	b.n	8006792 <HAL_RCC_OscConfig+0x376>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10c      	bne.n	8006758 <HAL_RCC_OscConfig+0x33c>
 800673e:	4b6a      	ldr	r3, [pc, #424]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	4a69      	ldr	r2, [pc, #420]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	6713      	str	r3, [r2, #112]	; 0x70
 800674a:	4b67      	ldr	r3, [pc, #412]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	4a66      	ldr	r2, [pc, #408]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006750:	f023 0304 	bic.w	r3, r3, #4
 8006754:	6713      	str	r3, [r2, #112]	; 0x70
 8006756:	e01c      	b.n	8006792 <HAL_RCC_OscConfig+0x376>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b05      	cmp	r3, #5
 800675e:	d10c      	bne.n	800677a <HAL_RCC_OscConfig+0x35e>
 8006760:	4b61      	ldr	r3, [pc, #388]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006764:	4a60      	ldr	r2, [pc, #384]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006766:	f043 0304 	orr.w	r3, r3, #4
 800676a:	6713      	str	r3, [r2, #112]	; 0x70
 800676c:	4b5e      	ldr	r3, [pc, #376]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800676e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006770:	4a5d      	ldr	r2, [pc, #372]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	6713      	str	r3, [r2, #112]	; 0x70
 8006778:	e00b      	b.n	8006792 <HAL_RCC_OscConfig+0x376>
 800677a:	4b5b      	ldr	r3, [pc, #364]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677e:	4a5a      	ldr	r2, [pc, #360]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	6713      	str	r3, [r2, #112]	; 0x70
 8006786:	4b58      	ldr	r3, [pc, #352]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4a57      	ldr	r2, [pc, #348]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800678c:	f023 0304 	bic.w	r3, r3, #4
 8006790:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d015      	beq.n	80067c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679a:	f7fd f869 	bl	8003870 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a0:	e00a      	b.n	80067b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a2:	f7fd f865 	bl	8003870 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e0ce      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b8:	4b4b      	ldr	r3, [pc, #300]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80067ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0ee      	beq.n	80067a2 <HAL_RCC_OscConfig+0x386>
 80067c4:	e014      	b.n	80067f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c6:	f7fd f853 	bl	8003870 <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067cc:	e00a      	b.n	80067e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ce:	f7fd f84f 	bl	8003870 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067dc:	4293      	cmp	r3, r2
 80067de:	d901      	bls.n	80067e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e0b8      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067e4:	4b40      	ldr	r3, [pc, #256]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80067e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1ee      	bne.n	80067ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d105      	bne.n	8006802 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067f6:	4b3c      	ldr	r3, [pc, #240]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	4a3b      	ldr	r2, [pc, #236]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80067fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006800:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80a4 	beq.w	8006954 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800680c:	4b36      	ldr	r3, [pc, #216]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 030c 	and.w	r3, r3, #12
 8006814:	2b08      	cmp	r3, #8
 8006816:	d06b      	beq.n	80068f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d149      	bne.n	80068b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006820:	4b31      	ldr	r3, [pc, #196]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a30      	ldr	r2, [pc, #192]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800682a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fd f820 	bl	8003870 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006834:	f7fd f81c 	bl	8003870 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e087      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006846:	4b28      	ldr	r3, [pc, #160]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f0      	bne.n	8006834 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69da      	ldr	r2, [r3, #28]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	019b      	lsls	r3, r3, #6
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	085b      	lsrs	r3, r3, #1
 800686a:	3b01      	subs	r3, #1
 800686c:	041b      	lsls	r3, r3, #16
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	061b      	lsls	r3, r3, #24
 8006876:	4313      	orrs	r3, r2
 8006878:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 800687a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800687e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006880:	4b19      	ldr	r3, [pc, #100]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 8006886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800688a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7fc fff0 	bl	8003870 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006894:	f7fc ffec 	bl	8003870 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e057      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a6:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0f0      	beq.n	8006894 <HAL_RCC_OscConfig+0x478>
 80068b2:	e04f      	b.n	8006954 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a0b      	ldr	r2, [pc, #44]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80068ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fc ffd6 	bl	8003870 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c8:	f7fc ffd2 	bl	8003870 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e03d      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068da:	4b03      	ldr	r3, [pc, #12]	; (80068e8 <HAL_RCC_OscConfig+0x4cc>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x4ac>
 80068e6:	e035      	b.n	8006954 <HAL_RCC_OscConfig+0x538>
 80068e8:	40023800 	.word	0x40023800
 80068ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80068f0:	4b1b      	ldr	r3, [pc, #108]	; (8006960 <HAL_RCC_OscConfig+0x544>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d028      	beq.n	8006950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006908:	429a      	cmp	r2, r3
 800690a:	d121      	bne.n	8006950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006916:	429a      	cmp	r2, r3
 8006918:	d11a      	bne.n	8006950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006920:	4013      	ands	r3, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006926:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006928:	4293      	cmp	r3, r2
 800692a:	d111      	bne.n	8006950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	3b01      	subs	r3, #1
 800693a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800693c:	429a      	cmp	r2, r3
 800693e:	d107      	bne.n	8006950 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800694c:	429a      	cmp	r2, r3
 800694e:	d001      	beq.n	8006954 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e000      	b.n	8006956 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40023800 	.word	0x40023800

08006964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0d0      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800697c:	4b6a      	ldr	r3, [pc, #424]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d910      	bls.n	80069ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800698a:	4b67      	ldr	r3, [pc, #412]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f023 020f 	bic.w	r2, r3, #15
 8006992:	4965      	ldr	r1, [pc, #404]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b63      	ldr	r3, [pc, #396]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0b8      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d020      	beq.n	80069fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069c4:	4b59      	ldr	r3, [pc, #356]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4a58      	ldr	r2, [pc, #352]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069dc:	4b53      	ldr	r3, [pc, #332]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	4a52      	ldr	r2, [pc, #328]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e8:	4b50      	ldr	r3, [pc, #320]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	494d      	ldr	r1, [pc, #308]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d040      	beq.n	8006a88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0e:	4b47      	ldr	r3, [pc, #284]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d115      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e07f      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d107      	bne.n	8006a36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a26:	4b41      	ldr	r3, [pc, #260]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e073      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a36:	4b3d      	ldr	r3, [pc, #244]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e06b      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a46:	4b39      	ldr	r3, [pc, #228]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f023 0203 	bic.w	r2, r3, #3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	4936      	ldr	r1, [pc, #216]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a58:	f7fc ff0a 	bl	8003870 <HAL_GetTick>
 8006a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5e:	e00a      	b.n	8006a76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a60:	f7fc ff06 	bl	8003870 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e053      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a76:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 020c 	and.w	r2, r3, #12
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d1eb      	bne.n	8006a60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a88:	4b27      	ldr	r3, [pc, #156]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d210      	bcs.n	8006ab8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a96:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 020f 	bic.w	r2, r3, #15
 8006a9e:	4922      	ldr	r1, [pc, #136]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e032      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ac4:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4916      	ldr	r1, [pc, #88]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ae2:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	490e      	ldr	r1, [pc, #56]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006af6:	f000 f821 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8006afa:	4601      	mov	r1, r0
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	4a0a      	ldr	r2, [pc, #40]	; (8006b30 <HAL_RCC_ClockConfig+0x1cc>)
 8006b08:	5cd3      	ldrb	r3, [r2, r3]
 8006b0a:	fa21 f303 	lsr.w	r3, r1, r3
 8006b0e:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <HAL_RCC_ClockConfig+0x1d0>)
 8006b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <HAL_RCC_ClockConfig+0x1d4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fc fcf4 	bl	8003504 <HAL_InitTick>

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40023c00 	.word	0x40023c00
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	08026d04 	.word	0x08026d04
 8006b34:	20000018 	.word	0x20000018
 8006b38:	2000001c 	.word	0x2000001c

08006b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	607b      	str	r3, [r7, #4]
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b52:	4b50      	ldr	r3, [pc, #320]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 030c 	and.w	r3, r3, #12
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d007      	beq.n	8006b6e <HAL_RCC_GetSysClockFreq+0x32>
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d008      	beq.n	8006b74 <HAL_RCC_GetSysClockFreq+0x38>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f040 808d 	bne.w	8006c82 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b68:	4b4b      	ldr	r3, [pc, #300]	; (8006c98 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b6a:	60bb      	str	r3, [r7, #8]
      break;
 8006b6c:	e08c      	b.n	8006c88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b6e:	4b4b      	ldr	r3, [pc, #300]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8006b70:	60bb      	str	r3, [r7, #8]
      break;
 8006b72:	e089      	b.n	8006c88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b74:	4b47      	ldr	r3, [pc, #284]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b7c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b7e:	4b45      	ldr	r3, [pc, #276]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d023      	beq.n	8006bd2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b8a:	4b42      	ldr	r3, [pc, #264]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	099b      	lsrs	r3, r3, #6
 8006b90:	f04f 0400 	mov.w	r4, #0
 8006b94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	ea03 0501 	and.w	r5, r3, r1
 8006ba0:	ea04 0602 	and.w	r6, r4, r2
 8006ba4:	4a3d      	ldr	r2, [pc, #244]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8006ba6:	fb02 f106 	mul.w	r1, r2, r6
 8006baa:	2200      	movs	r2, #0
 8006bac:	fb02 f205 	mul.w	r2, r2, r5
 8006bb0:	440a      	add	r2, r1
 8006bb2:	493a      	ldr	r1, [pc, #232]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8006bb4:	fba5 0101 	umull	r0, r1, r5, r1
 8006bb8:	1853      	adds	r3, r2, r1
 8006bba:	4619      	mov	r1, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f04f 0400 	mov.w	r4, #0
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4623      	mov	r3, r4
 8006bc6:	f7f9 fe07 	bl	80007d8 <__aeabi_uldivmod>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	460c      	mov	r4, r1
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e049      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bd2:	4b30      	ldr	r3, [pc, #192]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	099b      	lsrs	r3, r3, #6
 8006bd8:	f04f 0400 	mov.w	r4, #0
 8006bdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	ea03 0501 	and.w	r5, r3, r1
 8006be8:	ea04 0602 	and.w	r6, r4, r2
 8006bec:	4629      	mov	r1, r5
 8006bee:	4632      	mov	r2, r6
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	f04f 0400 	mov.w	r4, #0
 8006bf8:	0154      	lsls	r4, r2, #5
 8006bfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bfe:	014b      	lsls	r3, r1, #5
 8006c00:	4619      	mov	r1, r3
 8006c02:	4622      	mov	r2, r4
 8006c04:	1b49      	subs	r1, r1, r5
 8006c06:	eb62 0206 	sbc.w	r2, r2, r6
 8006c0a:	f04f 0300 	mov.w	r3, #0
 8006c0e:	f04f 0400 	mov.w	r4, #0
 8006c12:	0194      	lsls	r4, r2, #6
 8006c14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c18:	018b      	lsls	r3, r1, #6
 8006c1a:	1a5b      	subs	r3, r3, r1
 8006c1c:	eb64 0402 	sbc.w	r4, r4, r2
 8006c20:	f04f 0100 	mov.w	r1, #0
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	00e2      	lsls	r2, r4, #3
 8006c2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c2e:	00d9      	lsls	r1, r3, #3
 8006c30:	460b      	mov	r3, r1
 8006c32:	4614      	mov	r4, r2
 8006c34:	195b      	adds	r3, r3, r5
 8006c36:	eb44 0406 	adc.w	r4, r4, r6
 8006c3a:	f04f 0100 	mov.w	r1, #0
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	02a2      	lsls	r2, r4, #10
 8006c44:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c48:	0299      	lsls	r1, r3, #10
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	4621      	mov	r1, r4
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f04f 0400 	mov.w	r4, #0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4623      	mov	r3, r4
 8006c5c:	f7f9 fdbc 	bl	80007d8 <__aeabi_uldivmod>
 8006c60:	4603      	mov	r3, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	0c1b      	lsrs	r3, r3, #16
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	3301      	adds	r3, #1
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7e:	60bb      	str	r3, [r7, #8]
      break;
 8006c80:	e002      	b.n	8006c88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c82:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c84:	60bb      	str	r3, [r7, #8]
      break;
 8006c86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c88:	68bb      	ldr	r3, [r7, #8]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40023800 	.word	0x40023800
 8006c98:	00f42400 	.word	0x00f42400
 8006c9c:	017d7840 	.word	0x017d7840

08006ca0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ca4:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	20000018 	.word	0x20000018

08006cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006cbc:	f7ff fff0 	bl	8006ca0 <HAL_RCC_GetHCLKFreq>
 8006cc0:	4601      	mov	r1, r0
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	0a9b      	lsrs	r3, r3, #10
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	4a03      	ldr	r2, [pc, #12]	; (8006cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cce:	5cd3      	ldrb	r3, [r2, r3]
 8006cd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	08026d14 	.word	0x08026d14

08006ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ce4:	f7ff ffdc 	bl	8006ca0 <HAL_RCC_GetHCLKFreq>
 8006ce8:	4601      	mov	r1, r0
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	0b5b      	lsrs	r3, r3, #13
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	4a03      	ldr	r2, [pc, #12]	; (8006d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cf6:	5cd3      	ldrb	r3, [r2, r3]
 8006cf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40023800 	.word	0x40023800
 8006d04:	08026d14 	.word	0x08026d14

08006d08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	220f      	movs	r2, #15
 8006d16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d18:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <HAL_RCC_GetClockConfig+0x5c>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 0203 	and.w	r2, r3, #3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d24:	4b0f      	ldr	r3, [pc, #60]	; (8006d64 <HAL_RCC_GetClockConfig+0x5c>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d30:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <HAL_RCC_GetClockConfig+0x5c>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006d3c:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <HAL_RCC_GetClockConfig+0x5c>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	08db      	lsrs	r3, r3, #3
 8006d42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d4a:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <HAL_RCC_GetClockConfig+0x60>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 020f 	and.w	r2, r3, #15
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	601a      	str	r2, [r3, #0]
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40023800 	.word	0x40023800
 8006d68:	40023c00 	.word	0x40023c00

08006d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d012      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d94:	4b69      	ldr	r3, [pc, #420]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	4a68      	ldr	r2, [pc, #416]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d9e:	6093      	str	r3, [r2, #8]
 8006da0:	4b66      	ldr	r3, [pc, #408]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da8:	4964      	ldr	r1, [pc, #400]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006db6:	2301      	movs	r3, #1
 8006db8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d017      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006dc6:	4b5d      	ldr	r3, [pc, #372]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd4:	4959      	ldr	r1, [pc, #356]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de4:	d101      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006de6:	2301      	movs	r3, #1
 8006de8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006df2:	2301      	movs	r3, #1
 8006df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d017      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e02:	4b4e      	ldr	r3, [pc, #312]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e10:	494a      	ldr	r1, [pc, #296]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e20:	d101      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e22:	2301      	movs	r3, #1
 8006e24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 808b 	beq.w	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e50:	4b3a      	ldr	r3, [pc, #232]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	4a39      	ldr	r2, [pc, #228]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8006e5c:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e64:	60bb      	str	r3, [r7, #8]
 8006e66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e68:	4b35      	ldr	r3, [pc, #212]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a34      	ldr	r2, [pc, #208]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e74:	f7fc fcfc 	bl	8003870 <HAL_GetTick>
 8006e78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e7c:	f7fc fcf8 	bl	8003870 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b64      	cmp	r3, #100	; 0x64
 8006e88:	d901      	bls.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e355      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e8e:	4b2c      	ldr	r3, [pc, #176]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e9a:	4b28      	ldr	r3, [pc, #160]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d035      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d02e      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eb8:	4b20      	ldr	r3, [pc, #128]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ec2:	4b1e      	ldr	r3, [pc, #120]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec6:	4a1d      	ldr	r2, [pc, #116]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ecc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ece:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	4a1a      	ldr	r2, [pc, #104]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006eda:	4a18      	ldr	r2, [pc, #96]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ee0:	4b16      	ldr	r3, [pc, #88]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d114      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eec:	f7fc fcc0 	bl	8003870 <HAL_GetTick>
 8006ef0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef2:	e00a      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ef4:	f7fc fcbc 	bl	8003870 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e317      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f0a:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0ee      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f22:	d111      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f32:	400b      	ands	r3, r1
 8006f34:	4901      	ldr	r1, [pc, #4]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	608b      	str	r3, [r1, #8]
 8006f3a:	e00b      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	40007000 	.word	0x40007000
 8006f44:	0ffffcff 	.word	0x0ffffcff
 8006f48:	4bb0      	ldr	r3, [pc, #704]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	4aaf      	ldr	r2, [pc, #700]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f52:	6093      	str	r3, [r2, #8]
 8006f54:	4bad      	ldr	r3, [pc, #692]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f60:	49aa      	ldr	r1, [pc, #680]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d010      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f72:	4ba6      	ldr	r3, [pc, #664]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f78:	4aa4      	ldr	r2, [pc, #656]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006f82:	4ba2      	ldr	r3, [pc, #648]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	499f      	ldr	r1, [pc, #636]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fa0:	4b9a      	ldr	r3, [pc, #616]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fae:	4997      	ldr	r1, [pc, #604]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fc2:	4b92      	ldr	r3, [pc, #584]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd0:	498e      	ldr	r1, [pc, #568]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fe4:	4b89      	ldr	r3, [pc, #548]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff2:	4986      	ldr	r1, [pc, #536]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007006:	4b81      	ldr	r3, [pc, #516]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007014:	497d      	ldr	r1, [pc, #500]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007016:	4313      	orrs	r3, r2
 8007018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007028:	4b78      	ldr	r3, [pc, #480]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800702a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702e:	f023 0203 	bic.w	r2, r3, #3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	4975      	ldr	r1, [pc, #468]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007038:	4313      	orrs	r3, r2
 800703a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800704a:	4b70      	ldr	r3, [pc, #448]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800704c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007050:	f023 020c 	bic.w	r2, r3, #12
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007058:	496c      	ldr	r1, [pc, #432]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800706c:	4b67      	ldr	r3, [pc, #412]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800706e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007072:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707a:	4964      	ldr	r1, [pc, #400]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800707c:	4313      	orrs	r3, r2
 800707e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800708e:	4b5f      	ldr	r3, [pc, #380]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007094:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800709c:	495b      	ldr	r1, [pc, #364]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070b0:	4b56      	ldr	r3, [pc, #344]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070be:	4953      	ldr	r1, [pc, #332]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80070d2:	4b4e      	ldr	r3, [pc, #312]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e0:	494a      	ldr	r1, [pc, #296]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80070f4:	4b45      	ldr	r3, [pc, #276]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80070f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007102:	4942      	ldr	r1, [pc, #264]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007104:	4313      	orrs	r3, r2
 8007106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007116:	4b3d      	ldr	r3, [pc, #244]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007124:	4939      	ldr	r1, [pc, #228]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007138:	4b34      	ldr	r3, [pc, #208]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007146:	4931      	ldr	r1, [pc, #196]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007148:	4313      	orrs	r3, r2
 800714a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d011      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800715a:	4b2c      	ldr	r3, [pc, #176]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007160:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007168:	4928      	ldr	r1, [pc, #160]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007178:	d101      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800717a:	2301      	movs	r3, #1
 800717c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800718a:	2301      	movs	r3, #1
 800718c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800719a:	4b1c      	ldr	r3, [pc, #112]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800719c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a8:	4918      	ldr	r1, [pc, #96]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071bc:	4b13      	ldr	r3, [pc, #76]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071cc:	490f      	ldr	r1, [pc, #60]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d005      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071e2:	f040 80d8 	bne.w	8007396 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a08      	ldr	r2, [pc, #32]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f2:	f7fc fb3d 	bl	8003870 <HAL_GetTick>
 80071f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071f8:	e00a      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071fa:	f7fc fb39 	bl	8003870 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b64      	cmp	r3, #100	; 0x64
 8007206:	d903      	bls.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e196      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800720c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007210:	4b6c      	ldr	r3, [pc, #432]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1ee      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d021      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722c:	2b00      	cmp	r3, #0
 800722e:	d11d      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007230:	4b64      	ldr	r3, [pc, #400]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007236:	0c1b      	lsrs	r3, r3, #16
 8007238:	f003 0303 	and.w	r3, r3, #3
 800723c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800723e:	4b61      	ldr	r3, [pc, #388]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007244:	0e1b      	lsrs	r3, r3, #24
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	019a      	lsls	r2, r3, #6
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	041b      	lsls	r3, r3, #16
 8007256:	431a      	orrs	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	061b      	lsls	r3, r3, #24
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	071b      	lsls	r3, r3, #28
 8007264:	4957      	ldr	r1, [pc, #348]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d004      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007280:	d00a      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800728a:	2b00      	cmp	r3, #0
 800728c:	d02e      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007296:	d129      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007298:	4b4a      	ldr	r3, [pc, #296]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800729a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800729e:	0c1b      	lsrs	r3, r3, #16
 80072a0:	f003 0303 	and.w	r3, r3, #3
 80072a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072a6:	4b47      	ldr	r3, [pc, #284]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ac:	0f1b      	lsrs	r3, r3, #28
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	019a      	lsls	r2, r3, #6
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	061b      	lsls	r3, r3, #24
 80072c6:	431a      	orrs	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	071b      	lsls	r3, r3, #28
 80072cc:	493d      	ldr	r1, [pc, #244]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072d4:	4b3b      	ldr	r3, [pc, #236]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072da:	f023 021f 	bic.w	r2, r3, #31
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	3b01      	subs	r3, #1
 80072e4:	4937      	ldr	r1, [pc, #220]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01d      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80072f8:	4b32      	ldr	r3, [pc, #200]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80072fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fe:	0e1b      	lsrs	r3, r3, #24
 8007300:	f003 030f 	and.w	r3, r3, #15
 8007304:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007306:	4b2f      	ldr	r3, [pc, #188]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800730c:	0f1b      	lsrs	r3, r3, #28
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	019a      	lsls	r2, r3, #6
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	041b      	lsls	r3, r3, #16
 8007320:	431a      	orrs	r2, r3
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	061b      	lsls	r3, r3, #24
 8007326:	431a      	orrs	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	071b      	lsls	r3, r3, #28
 800732c:	4925      	ldr	r1, [pc, #148]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800732e:	4313      	orrs	r3, r2
 8007330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d011      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	019a      	lsls	r2, r3, #6
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	431a      	orrs	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	061b      	lsls	r3, r3, #24
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	071b      	lsls	r3, r3, #28
 800735c:	4919      	ldr	r1, [pc, #100]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007364:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a16      	ldr	r2, [pc, #88]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800736a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800736e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007370:	f7fc fa7e 	bl	8003870 <HAL_GetTick>
 8007374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007376:	e008      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007378:	f7fc fa7a 	bl	8003870 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b64      	cmp	r3, #100	; 0x64
 8007384:	d901      	bls.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e0d7      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800738a:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0f0      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b01      	cmp	r3, #1
 800739a:	f040 80cd 	bne.w	8007538 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800739e:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80073a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073aa:	f7fc fa61 	bl	8003870 <HAL_GetTick>
 80073ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073b0:	e00a      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073b2:	f7fc fa5d 	bl	8003870 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b64      	cmp	r3, #100	; 0x64
 80073be:	d903      	bls.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e0ba      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80073c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073c8:	4b5e      	ldr	r3, [pc, #376]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d4:	d0ed      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d009      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d02e      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d12a      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80073fe:	4b51      	ldr	r3, [pc, #324]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007404:	0c1b      	lsrs	r3, r3, #16
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800740c:	4b4d      	ldr	r3, [pc, #308]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007412:	0f1b      	lsrs	r3, r3, #28
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	019a      	lsls	r2, r3, #6
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	041b      	lsls	r3, r3, #16
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	061b      	lsls	r3, r3, #24
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	071b      	lsls	r3, r3, #28
 8007432:	4944      	ldr	r1, [pc, #272]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007434:	4313      	orrs	r3, r2
 8007436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800743a:	4b42      	ldr	r3, [pc, #264]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800743c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007440:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	3b01      	subs	r3, #1
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	493d      	ldr	r1, [pc, #244]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d022      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007468:	d11d      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800746a:	4b36      	ldr	r3, [pc, #216]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800746c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007470:	0e1b      	lsrs	r3, r3, #24
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007478:	4b32      	ldr	r3, [pc, #200]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747e:	0f1b      	lsrs	r3, r3, #28
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	019a      	lsls	r2, r3, #6
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	041b      	lsls	r3, r3, #16
 8007492:	431a      	orrs	r2, r3
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	061b      	lsls	r3, r3, #24
 8007498:	431a      	orrs	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	071b      	lsls	r3, r3, #28
 800749e:	4929      	ldr	r1, [pc, #164]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d028      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074b2:	4b24      	ldr	r3, [pc, #144]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b8:	0e1b      	lsrs	r3, r3, #24
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074c0:	4b20      	ldr	r3, [pc, #128]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c6:	0c1b      	lsrs	r3, r3, #16
 80074c8:	f003 0303 	and.w	r3, r3, #3
 80074cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	019a      	lsls	r2, r3, #6
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	041b      	lsls	r3, r3, #16
 80074d8:	431a      	orrs	r2, r3
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	061b      	lsls	r3, r3, #24
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	071b      	lsls	r3, r3, #28
 80074e6:	4917      	ldr	r1, [pc, #92]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80074ee:	4b15      	ldr	r3, [pc, #84]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	4911      	ldr	r1, [pc, #68]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007504:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a0e      	ldr	r2, [pc, #56]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800750a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800750e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007510:	f7fc f9ae 	bl	8003870 <HAL_GetTick>
 8007514:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007516:	e008      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007518:	f7fc f9aa 	bl	8003870 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b64      	cmp	r3, #100	; 0x64
 8007524:	d901      	bls.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e007      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800752a:	4b06      	ldr	r3, [pc, #24]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007536:	d1ef      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3720      	adds	r7, #32
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40023800 	.word	0x40023800

08007548 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007566:	f040 8086 	bne.w	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800756a:	4b8d      	ldr	r3, [pc, #564]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800756c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007570:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007578:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007580:	d03e      	beq.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007586:	d073      	beq.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d000      	beq.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800758c:	e074      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800758e:	4b84      	ldr	r3, [pc, #528]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d108      	bne.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800759a:	4b81      	ldr	r3, [pc, #516]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075a2:	4a80      	ldr	r2, [pc, #512]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80075a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	e007      	b.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80075ac:	4b7c      	ldr	r3, [pc, #496]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075b4:	4a7c      	ldr	r2, [pc, #496]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80075b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ba:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80075bc:	4b78      	ldr	r3, [pc, #480]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c2:	0e1b      	lsrs	r3, r3, #24
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80075ca:	4b75      	ldr	r3, [pc, #468]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d0:	099b      	lsrs	r3, r3, #6
 80075d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	fb02 f203 	mul.w	r2, r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80075e4:	4b6e      	ldr	r3, [pc, #440]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80075e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	f003 031f 	and.w	r3, r3, #31
 80075f0:	3301      	adds	r3, #1
 80075f2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]
        break;
 80075fe:	e03b      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007600:	4b67      	ldr	r3, [pc, #412]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d108      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800760c:	4b64      	ldr	r3, [pc, #400]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007614:	4a63      	ldr	r2, [pc, #396]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007616:	fbb2 f3f3 	udiv	r3, r2, r3
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	e007      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800761e:	4b60      	ldr	r3, [pc, #384]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007626:	4a60      	ldr	r2, [pc, #384]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007628:	fbb2 f3f3 	udiv	r3, r2, r3
 800762c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800762e:	4b5c      	ldr	r3, [pc, #368]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007634:	0e1b      	lsrs	r3, r3, #24
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800763c:	4b58      	ldr	r3, [pc, #352]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800763e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007642:	099b      	lsrs	r3, r3, #6
 8007644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	fb02 f203 	mul.w	r2, r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	fbb2 f3f3 	udiv	r3, r2, r3
 8007654:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007656:	4b52      	ldr	r3, [pc, #328]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	3301      	adds	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	fbb2 f3f3 	udiv	r3, r2, r3
 800766c:	617b      	str	r3, [r7, #20]
        break;
 800766e:	e003      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007670:	4b4e      	ldr	r3, [pc, #312]	; (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007672:	617b      	str	r3, [r7, #20]
        break;
 8007674:	e000      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007676:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800767e:	f040 8086 	bne.w	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007682:	4b47      	ldr	r3, [pc, #284]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007688:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007690:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007698:	d03e      	beq.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800769a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800769e:	d073      	beq.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d000      	beq.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80076a4:	e074      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80076a6:	4b3e      	ldr	r3, [pc, #248]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d108      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076b2:	4b3b      	ldr	r3, [pc, #236]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ba:	4a3a      	ldr	r2, [pc, #232]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80076bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	e007      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80076c4:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076cc:	4a36      	ldr	r2, [pc, #216]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80076ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80076d4:	4b32      	ldr	r3, [pc, #200]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076da:	0e1b      	lsrs	r3, r3, #24
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80076e2:	4b2f      	ldr	r3, [pc, #188]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e8:	099b      	lsrs	r3, r3, #6
 80076ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	fb02 f203 	mul.w	r2, r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80076fc:	4b28      	ldr	r3, [pc, #160]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80076fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007702:	0a1b      	lsrs	r3, r3, #8
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	3301      	adds	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	fbb2 f3f3 	udiv	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]
        break;
 8007716:	e03b      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007718:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d108      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007724:	4b1e      	ldr	r3, [pc, #120]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800772c:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800772e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007732:	613b      	str	r3, [r7, #16]
 8007734:	e007      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007736:	4b1a      	ldr	r3, [pc, #104]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800773e:	4a1a      	ldr	r2, [pc, #104]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007740:	fbb2 f3f3 	udiv	r3, r2, r3
 8007744:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007746:	4b16      	ldr	r3, [pc, #88]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800774c:	0e1b      	lsrs	r3, r3, #24
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007754:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800775a:	099b      	lsrs	r3, r3, #6
 800775c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	fb02 f203 	mul.w	r2, r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	fbb2 f3f3 	udiv	r3, r2, r3
 800776c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800776e:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	3301      	adds	r3, #1
 800777a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	fbb2 f3f3 	udiv	r3, r2, r3
 8007784:	617b      	str	r3, [r7, #20]
        break;
 8007786:	e003      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007788:	4b08      	ldr	r3, [pc, #32]	; (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800778a:	617b      	str	r3, [r7, #20]
        break;
 800778c:	e000      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800778e:	bf00      	nop

  return frequency;
 8007790:	697b      	ldr	r3, [r7, #20]
}
 8007792:	4618      	mov	r0, r3
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40023800 	.word	0x40023800
 80077a4:	00f42400 	.word	0x00f42400
 80077a8:	017d7840 	.word	0x017d7840
 80077ac:	00bb8000 	.word	0x00bb8000

080077b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e06b      	b.n	800789a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	7f5b      	ldrb	r3, [r3, #29]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d105      	bne.n	80077d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fb fa82 	bl	8002cdc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	22ca      	movs	r2, #202	; 0xca
 80077e4:	625a      	str	r2, [r3, #36]	; 0x24
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2253      	movs	r2, #83	; 0x53
 80077ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fb00 	bl	8007df4 <RTC_EnterInitMode>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d008      	beq.n	800780c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	22ff      	movs	r2, #255	; 0xff
 8007800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2204      	movs	r2, #4
 8007806:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e046      	b.n	800789a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6899      	ldr	r1, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	4b23      	ldr	r3, [pc, #140]	; (80078a4 <HAL_RTC_Init+0xf4>)
 8007818:	400b      	ands	r3, r1
 800781a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6899      	ldr	r1, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	68d2      	ldr	r2, [r2, #12]
 8007842:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6919      	ldr	r1, [r3, #16]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	041a      	lsls	r2, r3, #16
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007866:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0208 	bic.w	r2, r2, #8
 8007876:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	22ff      	movs	r2, #255	; 0xff
 8007890:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007898:	2300      	movs	r3, #0
  }
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	ff8fffbf 	.word	0xff8fffbf

080078a8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078a8:	b590      	push	{r4, r7, lr}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	7f1b      	ldrb	r3, [r3, #28]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_RTC_SetTime+0x1c>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e0a8      	b.n	8007a16 <HAL_RTC_SetTime+0x16e>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2202      	movs	r2, #2
 80078ce:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d126      	bne.n	8007924 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2200      	movs	r2, #0
 80078e8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 faac 	bl	8007e4c <RTC_ByteToBcd2>
 80078f4:	4603      	mov	r3, r0
 80078f6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 faa5 	bl	8007e4c <RTC_ByteToBcd2>
 8007902:	4603      	mov	r3, r0
 8007904:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007906:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	789b      	ldrb	r3, [r3, #2]
 800790c:	4618      	mov	r0, r3
 800790e:	f000 fa9d 	bl	8007e4c <RTC_ByteToBcd2>
 8007912:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007914:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	7b1b      	ldrb	r3, [r3, #12]
 800791c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800791e:	4313      	orrs	r3, r2
 8007920:	617b      	str	r3, [r7, #20]
 8007922:	e018      	b.n	8007956 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2200      	movs	r2, #0
 8007936:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007944:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800794a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	7b1b      	ldrb	r3, [r3, #12]
 8007950:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	22ca      	movs	r2, #202	; 0xca
 800795c:	625a      	str	r2, [r3, #36]	; 0x24
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2253      	movs	r2, #83	; 0x53
 8007964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 fa44 	bl	8007df4 <RTC_EnterInitMode>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00b      	beq.n	800798a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	22ff      	movs	r2, #255	; 0xff
 8007978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2204      	movs	r2, #4
 800797e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e045      	b.n	8007a16 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	6979      	ldr	r1, [r7, #20]
 8007990:	4b23      	ldr	r3, [pc, #140]	; (8007a20 <HAL_RTC_SetTime+0x178>)
 8007992:	400b      	ands	r3, r1
 8007994:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6899      	ldr	r1, [r3, #8]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d111      	bne.n	8007a00 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f9e1 	bl	8007da4 <HAL_RTC_WaitForSynchro>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	22ff      	movs	r2, #255	; 0xff
 80079ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2204      	movs	r2, #4
 80079f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e00a      	b.n	8007a16 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	22ff      	movs	r2, #255	; 0xff
 8007a06:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007a14:	2300      	movs	r3, #0
  }
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd90      	pop	{r4, r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	007f7f7f 	.word	0x007f7f7f

08007a24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a24:	b590      	push	{r4, r7, lr}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	7f1b      	ldrb	r3, [r3, #28]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_RTC_SetDate+0x1c>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e092      	b.n	8007b66 <HAL_RTC_SetDate+0x142>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2201      	movs	r2, #1
 8007a44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10e      	bne.n	8007a70 <HAL_RTC_SetDate+0x4c>
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	785b      	ldrb	r3, [r3, #1]
 8007a56:	f003 0310 	and.w	r3, r3, #16
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	f023 0310 	bic.w	r3, r3, #16
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	330a      	adds	r3, #10
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d11c      	bne.n	8007ab0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	78db      	ldrb	r3, [r3, #3]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f9e6 	bl	8007e4c <RTC_ByteToBcd2>
 8007a80:	4603      	mov	r3, r0
 8007a82:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	785b      	ldrb	r3, [r3, #1]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 f9df 	bl	8007e4c <RTC_ByteToBcd2>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007a92:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	789b      	ldrb	r3, [r3, #2]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 f9d7 	bl	8007e4c <RTC_ByteToBcd2>
 8007a9e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007aa0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
 8007aae:	e00e      	b.n	8007ace <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	78db      	ldrb	r3, [r3, #3]
 8007ab4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	785b      	ldrb	r3, [r3, #1]
 8007aba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007abc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007ac2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007aca:	4313      	orrs	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	22ca      	movs	r2, #202	; 0xca
 8007ad4:	625a      	str	r2, [r3, #36]	; 0x24
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2253      	movs	r2, #83	; 0x53
 8007adc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f988 	bl	8007df4 <RTC_EnterInitMode>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	22ff      	movs	r2, #255	; 0xff
 8007af0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2204      	movs	r2, #4
 8007af6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e031      	b.n	8007b66 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	6979      	ldr	r1, [r7, #20]
 8007b08:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <HAL_RTC_SetDate+0x14c>)
 8007b0a:	400b      	ands	r3, r1
 8007b0c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b1c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d111      	bne.n	8007b50 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 f939 	bl	8007da4 <HAL_RTC_WaitForSynchro>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00b      	beq.n	8007b50 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	22ff      	movs	r2, #255	; 0xff
 8007b3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2204      	movs	r2, #4
 8007b44:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e00a      	b.n	8007b66 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	22ff      	movs	r2, #255	; 0xff
 8007b56:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007b64:	2300      	movs	r3, #0
  }
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd90      	pop	{r4, r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	00ffff3f 	.word	0x00ffff3f

08007b74 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b089      	sub	sp, #36	; 0x24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	7f1b      	ldrb	r3, [r3, #28]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d101      	bne.n	8007b98 <HAL_RTC_SetAlarm+0x24>
 8007b94:	2302      	movs	r3, #2
 8007b96:	e101      	b.n	8007d9c <HAL_RTC_SetAlarm+0x228>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d137      	bne.n	8007c1a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d102      	bne.n	8007bbe <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 f942 	bl	8007e4c <RTC_ByteToBcd2>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 f93b 	bl	8007e4c <RTC_ByteToBcd2>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007bda:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	789b      	ldrb	r3, [r3, #2]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 f933 	bl	8007e4c <RTC_ByteToBcd2>
 8007be6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007be8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	7b1b      	ldrb	r3, [r3, #12]
 8007bf0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007bf2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 f925 	bl	8007e4c <RTC_ByteToBcd2>
 8007c02:	4603      	mov	r3, r0
 8007c04:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c06:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007c14:	4313      	orrs	r3, r2
 8007c16:	61fb      	str	r3, [r7, #28]
 8007c18:	e023      	b.n	8007c62 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c3a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007c40:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	7b1b      	ldrb	r3, [r3, #12]
 8007c46:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007c48:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c50:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007c52:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007c58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	22ca      	movs	r2, #202	; 0xca
 8007c74:	625a      	str	r2, [r3, #36]	; 0x24
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2253      	movs	r2, #83	; 0x53
 8007c7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c86:	d13f      	bne.n	8007d08 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c96:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ca6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ca8:	f7fb fde2 	bl	8003870 <HAL_GetTick>
 8007cac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007cae:	e013      	b.n	8007cd8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007cb0:	f7fb fdde 	bl	8003870 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cbe:	d90b      	bls.n	8007cd8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	22ff      	movs	r2, #255	; 0xff
 8007cc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2203      	movs	r2, #3
 8007ccc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e061      	b.n	8007d9c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0e4      	beq.n	8007cb0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d04:	609a      	str	r2, [r3, #8]
 8007d06:	e03e      	b.n	8007d86 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d16:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d26:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d28:	f7fb fda2 	bl	8003870 <HAL_GetTick>
 8007d2c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d2e:	e013      	b.n	8007d58 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d30:	f7fb fd9e 	bl	8003870 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d3e:	d90b      	bls.n	8007d58 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	22ff      	movs	r2, #255	; 0xff
 8007d46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2203      	movs	r2, #3
 8007d4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e021      	b.n	8007d9c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0e4      	beq.n	8007d30 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d84:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	22ff      	movs	r2, #255	; 0xff
 8007d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3724      	adds	r7, #36	; 0x24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd90      	pop	{r4, r7, pc}

08007da4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007dbe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dc0:	f7fb fd56 	bl	8003870 <HAL_GetTick>
 8007dc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007dc6:	e009      	b.n	8007ddc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007dc8:	f7fb fd52 	bl	8003870 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dd6:	d901      	bls.n	8007ddc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e007      	b.n	8007dec <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0ee      	beq.n	8007dc8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d119      	bne.n	8007e42 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f04f 32ff 	mov.w	r2, #4294967295
 8007e16:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e18:	f7fb fd2a 	bl	8003870 <HAL_GetTick>
 8007e1c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e1e:	e009      	b.n	8007e34 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e20:	f7fb fd26 	bl	8003870 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e2e:	d901      	bls.n	8007e34 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e007      	b.n	8007e44 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0ee      	beq.n	8007e20 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	4603      	mov	r3, r0
 8007e54:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007e5a:	e005      	b.n	8007e68 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	3b0a      	subs	r3, #10
 8007e66:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	2b09      	cmp	r3, #9
 8007e6c:	d8f6      	bhi.n	8007e5c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	b2db      	uxtb	r3, r3
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	7f1b      	ldrb	r3, [r3, #28]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e03e      	b.n	8007f22 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2202      	movs	r2, #2
 8007eae:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	4b1e      	ldr	r3, [pc, #120]	; (8007f30 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	22ca      	movs	r2, #202	; 0xca
 8007eca:	625a      	str	r2, [r3, #36]	; 0x24
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2253      	movs	r2, #83	; 0x53
 8007ed2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0206 	bic.w	r2, r2, #6
 8007ee2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f0a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	22ff      	movs	r2, #255	; 0xff
 8007f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	fffff7f7 	.word	0xfffff7f7

08007f34 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e149      	b.n	80081e6 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d106      	bne.n	8007f6c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7fb fa62 	bl	8003430 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f94f 	bl	8008218 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d007      	beq.n	8007f92 <HAL_SAI_Init+0x5e>
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d302      	bcc.n	8007f8c <HAL_SAI_Init+0x58>
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d006      	beq.n	8007f98 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007f8a:	e008      	b.n	8007f9e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	61fb      	str	r3, [r7, #28]
      break;
 8007f90:	e005      	b.n	8007f9e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007f92:	2310      	movs	r3, #16
 8007f94:	61fb      	str	r3, [r7, #28]
      break;
 8007f96:	e002      	b.n	8007f9e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007f98:	2320      	movs	r3, #32
 8007f9a:	61fb      	str	r3, [r7, #28]
      break;
 8007f9c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d81d      	bhi.n	8007fe2 <HAL_SAI_Init+0xae>
 8007fa6:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <HAL_SAI_Init+0x78>)
 8007fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fac:	08007fbd 	.word	0x08007fbd
 8007fb0:	08007fc3 	.word	0x08007fc3
 8007fb4:	08007fcb 	.word	0x08007fcb
 8007fb8:	08007fd3 	.word	0x08007fd3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]
      }
      break;
 8007fc0:	e010      	b.n	8007fe4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc6:	617b      	str	r3, [r7, #20]
      }
      break;
 8007fc8:	e00c      	b.n	8007fe4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fce:	617b      	str	r3, [r7, #20]
      }
      break;
 8007fd0:	e008      	b.n	8007fe4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007fd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fd6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	f043 0301 	orr.w	r3, r3, #1
 8007fde:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007fe0:	e000      	b.n	8007fe4 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007fe2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a81      	ldr	r2, [pc, #516]	; (80081f0 <HAL_SAI_Init+0x2bc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d004      	beq.n	8007ff8 <HAL_SAI_Init+0xc4>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a80      	ldr	r2, [pc, #512]	; (80081f4 <HAL_SAI_Init+0x2c0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d103      	bne.n	8008000 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007ff8:	4a7f      	ldr	r2, [pc, #508]	; (80081f8 <HAL_SAI_Init+0x2c4>)
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	e002      	b.n	8008006 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008000:	4a7e      	ldr	r2, [pc, #504]	; (80081fc <HAL_SAI_Init+0x2c8>)
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d043      	beq.n	8008096 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a76      	ldr	r2, [pc, #472]	; (80081f0 <HAL_SAI_Init+0x2bc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d004      	beq.n	8008026 <HAL_SAI_Init+0xf2>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a74      	ldr	r2, [pc, #464]	; (80081f4 <HAL_SAI_Init+0x2c0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d104      	bne.n	8008030 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008026:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800802a:	f7ff fa8d 	bl	8007548 <HAL_RCCEx_GetPeriphCLKFreq>
 800802e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a72      	ldr	r2, [pc, #456]	; (8008200 <HAL_SAI_Init+0x2cc>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d004      	beq.n	8008044 <HAL_SAI_Init+0x110>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a71      	ldr	r2, [pc, #452]	; (8008204 <HAL_SAI_Init+0x2d0>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d104      	bne.n	800804e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008044:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008048:	f7ff fa7e 	bl	8007548 <HAL_RCCEx_GetPeriphCLKFreq>
 800804c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	461a      	mov	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	025b      	lsls	r3, r3, #9
 8008060:	fbb2 f3f3 	udiv	r3, r2, r3
 8008064:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4a67      	ldr	r2, [pc, #412]	; (8008208 <HAL_SAI_Init+0x2d4>)
 800806a:	fba2 2303 	umull	r2, r3, r2, r3
 800806e:	08da      	lsrs	r2, r3, #3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008074:	68f9      	ldr	r1, [r7, #12]
 8008076:	4b64      	ldr	r3, [pc, #400]	; (8008208 <HAL_SAI_Init+0x2d4>)
 8008078:	fba3 2301 	umull	r2, r3, r3, r1
 800807c:	08da      	lsrs	r2, r3, #3
 800807e:	4613      	mov	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	1aca      	subs	r2, r1, r3
 8008088:	2a08      	cmp	r2, #8
 800808a:	d904      	bls.n	8008096 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_SAI_Init+0x172>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d109      	bne.n	80080ba <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d101      	bne.n	80080b2 <HAL_SAI_Init+0x17e>
 80080ae:	2300      	movs	r3, #0
 80080b0:	e001      	b.n	80080b6 <HAL_SAI_Init+0x182>
 80080b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	e008      	b.n	80080cc <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d102      	bne.n	80080c8 <HAL_SAI_Init+0x194>
 80080c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080c6:	e000      	b.n	80080ca <HAL_SAI_Init+0x196>
 80080c8:	2300      	movs	r3, #0
 80080ca:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6819      	ldr	r1, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b4d      	ldr	r3, [pc, #308]	; (800820c <HAL_SAI_Init+0x2d8>)
 80080d8:	400b      	ands	r3, r1
 80080da:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6819      	ldr	r1, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ea:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80080f0:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f6:	431a      	orrs	r2, r3
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008104:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008110:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	051b      	lsls	r3, r3, #20
 8008118:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6859      	ldr	r1, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	4b38      	ldr	r3, [pc, #224]	; (8008210 <HAL_SAI_Init+0x2dc>)
 800812e:	400b      	ands	r3, r1
 8008130:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6859      	ldr	r1, [r3, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699a      	ldr	r2, [r3, #24]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	431a      	orrs	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	431a      	orrs	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6899      	ldr	r1, [r3, #8]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b2e      	ldr	r3, [pc, #184]	; (8008214 <HAL_SAI_Init+0x2e0>)
 800815c:	400b      	ands	r3, r1
 800815e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6899      	ldr	r1, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008170:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008176:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800817c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008182:	3b01      	subs	r3, #1
 8008184:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008186:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68d9      	ldr	r1, [r3, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800819e:	400b      	ands	r3, r1
 80081a0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68d9      	ldr	r1, [r3, #12]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b6:	041b      	lsls	r3, r3, #16
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081be:	3b01      	subs	r3, #1
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3720      	adds	r7, #32
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40015804 	.word	0x40015804
 80081f4:	40015824 	.word	0x40015824
 80081f8:	40015800 	.word	0x40015800
 80081fc:	40015c00 	.word	0x40015c00
 8008200:	40015c04 	.word	0x40015c04
 8008204:	40015c24 	.word	0x40015c24
 8008208:	cccccccd 	.word	0xcccccccd
 800820c:	ff05c010 	.word	0xff05c010
 8008210:	ffff1ff0 	.word	0xffff1ff0
 8008214:	fff88000 	.word	0xfff88000

08008218 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008218:	b490      	push	{r4, r7}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008220:	4b16      	ldr	r3, [pc, #88]	; (800827c <SAI_Disable+0x64>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a16      	ldr	r2, [pc, #88]	; (8008280 <SAI_Disable+0x68>)
 8008226:	fba2 2303 	umull	r2, r3, r2, r3
 800822a:	0b1b      	lsrs	r3, r3, #12
 800822c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008240:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008242:	4623      	mov	r3, r4
 8008244:	1e5c      	subs	r4, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10a      	bne.n	8008260 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008250:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	73fb      	strb	r3, [r7, #15]
      break;
 800825e:	e006      	b.n	800826e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e9      	bne.n	8008242 <SAI_Disable+0x2a>

  return status;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bc90      	pop	{r4, r7}
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	20000018 	.word	0x20000018
 8008280:	95cbec1b 	.word	0x95cbec1b

08008284 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e022      	b.n	80082dc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d105      	bne.n	80082ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7fa fd31 	bl	8002d10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2203      	movs	r2, #3
 80082b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f814 	bl	80082e4 <HAL_SD_InitCard>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e00a      	b.n	80082dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082e4:	b5b0      	push	{r4, r5, r7, lr}
 80082e6:	b08e      	sub	sp, #56	; 0x38
 80082e8:	af04      	add	r7, sp, #16
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80082ec:	2300      	movs	r3, #0
 80082ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80082f4:	2300      	movs	r3, #0
 80082f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80082fc:	2300      	movs	r3, #0
 80082fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008300:	2376      	movs	r3, #118	; 0x76
 8008302:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681d      	ldr	r5, [r3, #0]
 8008308:	466c      	mov	r4, sp
 800830a:	f107 0314 	add.w	r3, r7, #20
 800830e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008316:	f107 0308 	add.w	r3, r7, #8
 800831a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800831c:	4628      	mov	r0, r5
 800831e:	f002 ff51 	bl	800b1c4 <SDMMC_Init>
 8008322:	4603      	mov	r3, r0
 8008324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e03b      	b.n	80083ac <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008342:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f002 ff74 	bl	800b236 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800835c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fde6 	bl	8008f30 <SD_PowerON>
 8008364:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e013      	b.n	80083ac <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fd05 	bl	8008d94 <SD_InitCard>
 800838a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00b      	beq.n	80083aa <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	431a      	orrs	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e000      	b.n	80083ac <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3728      	adds	r7, #40	; 0x28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bdb0      	pop	{r4, r5, r7, pc}

080083b4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08c      	sub	sp, #48	; 0x30
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d107      	bne.n	80083dc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e0cc      	b.n	8008576 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	f040 80c5 	bne.w	8008574 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80083f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	441a      	add	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d907      	bls.n	800840e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008402:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e0b3      	b.n	8008576 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2203      	movs	r2, #3
 8008412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2200      	movs	r2, #0
 800841c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800842c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	4a53      	ldr	r2, [pc, #332]	; (8008580 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	4a52      	ldr	r2, [pc, #328]	; (8008584 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800843c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	2200      	movs	r2, #0
 8008444:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3380      	adds	r3, #128	; 0x80
 8008450:	4619      	mov	r1, r3
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	025b      	lsls	r3, r3, #9
 8008458:	089b      	lsrs	r3, r3, #2
 800845a:	f7fc fcb7 	bl	8004dcc <HAL_DMA_Start_IT>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d017      	beq.n	8008494 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008472:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a43      	ldr	r2, [pc, #268]	; (8008588 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800847a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e070      	b.n	8008576 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0208 	orr.w	r2, r2, #8
 80084a2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d002      	beq.n	80084b2 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	025b      	lsls	r3, r3, #9
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084ba:	4618      	mov	r0, r3
 80084bc:	f002 ff4e 	bl	800b35c <SDMMC_CmdBlockLength>
 80084c0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00f      	beq.n	80084e8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a2e      	ldr	r2, [pc, #184]	; (8008588 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	431a      	orrs	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e046      	b.n	8008576 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	025b      	lsls	r3, r3, #9
 80084f2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80084f4:	2390      	movs	r3, #144	; 0x90
 80084f6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084f8:	2302      	movs	r3, #2
 80084fa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008500:	2301      	movs	r3, #1
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f107 0210 	add.w	r2, r7, #16
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f002 fef8 	bl	800b304 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d90a      	bls.n	8008530 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2282      	movs	r2, #130	; 0x82
 800851e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008526:	4618      	mov	r0, r3
 8008528:	f002 ff5c 	bl	800b3e4 <SDMMC_CmdReadMultiBlock>
 800852c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800852e:	e009      	b.n	8008544 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2281      	movs	r2, #129	; 0x81
 8008534:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800853c:	4618      	mov	r0, r3
 800853e:	f002 ff2f 	bl	800b3a0 <SDMMC_CmdReadSingleBlock>
 8008542:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d012      	beq.n	8008570 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a0e      	ldr	r2, [pc, #56]	; (8008588 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	431a      	orrs	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e002      	b.n	8008576 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	e000      	b.n	8008576 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008574:	2302      	movs	r3, #2
  }
}
 8008576:	4618      	mov	r0, r3
 8008578:	3730      	adds	r7, #48	; 0x30
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	08008c7f 	.word	0x08008c7f
 8008584:	08008cf1 	.word	0x08008cf1
 8008588:	004005ff 	.word	0x004005ff

0800858c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08c      	sub	sp, #48	; 0x30
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d107      	bne.n	80085b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e0cf      	b.n	8008754 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b01      	cmp	r3, #1
 80085be:	f040 80c8 	bne.w	8008752 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	441a      	add	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d907      	bls.n	80085e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e0b6      	b.n	8008754 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2203      	movs	r2, #3
 80085ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2200      	movs	r2, #0
 80085f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f042 021a 	orr.w	r2, r2, #26
 8008604:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860a:	4a54      	ldr	r2, [pc, #336]	; (800875c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800860c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008612:	4a53      	ldr	r2, [pc, #332]	; (8008760 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008614:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	2200      	movs	r2, #0
 800861c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008622:	2b01      	cmp	r3, #1
 8008624:	d002      	beq.n	800862c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	025b      	lsls	r3, r3, #9
 800862a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008634:	4618      	mov	r0, r3
 8008636:	f002 fe91 	bl	800b35c <SDMMC_CmdBlockLength>
 800863a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00f      	beq.n	8008662 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a47      	ldr	r2, [pc, #284]	; (8008764 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008648:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008650:	431a      	orrs	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e078      	b.n	8008754 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d90a      	bls.n	800867e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	22a0      	movs	r2, #160	; 0xa0
 800866c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008674:	4618      	mov	r0, r3
 8008676:	f002 fef9 	bl	800b46c <SDMMC_CmdWriteMultiBlock>
 800867a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800867c:	e009      	b.n	8008692 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2290      	movs	r2, #144	; 0x90
 8008682:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800868a:	4618      	mov	r0, r3
 800868c:	f002 fecc 	bl	800b428 <SDMMC_CmdWriteSingleBlock>
 8008690:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d012      	beq.n	80086be <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a31      	ldr	r2, [pc, #196]	; (8008764 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800869e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	431a      	orrs	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e04a      	b.n	8008754 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f042 0208 	orr.w	r2, r2, #8
 80086cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3380      	adds	r3, #128	; 0x80
 80086da:	461a      	mov	r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	025b      	lsls	r3, r3, #9
 80086e0:	089b      	lsrs	r3, r3, #2
 80086e2:	f7fc fb73 	bl	8004dcc <HAL_DMA_Start_IT>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01a      	beq.n	8008722 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 021a 	bic.w	r2, r2, #26
 80086fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a18      	ldr	r2, [pc, #96]	; (8008764 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008702:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008708:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e018      	b.n	8008754 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008722:	f04f 33ff 	mov.w	r3, #4294967295
 8008726:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	025b      	lsls	r3, r3, #9
 800872c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800872e:	2390      	movs	r3, #144	; 0x90
 8008730:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008732:	2300      	movs	r3, #0
 8008734:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008736:	2300      	movs	r3, #0
 8008738:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800873a:	2301      	movs	r3, #1
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f107 0210 	add.w	r2, r7, #16
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f002 fddb 	bl	800b304 <SDMMC_ConfigData>

      return HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	e000      	b.n	8008754 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008752:	2302      	movs	r3, #2
  }
}
 8008754:	4618      	mov	r0, r3
 8008756:	3730      	adds	r7, #48	; 0x30
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	08008c55 	.word	0x08008c55
 8008760:	08008cf1 	.word	0x08008cf1
 8008764:	004005ff 	.word	0x004005ff

08008768 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800878a:	0f9b      	lsrs	r3, r3, #30
 800878c:	b2da      	uxtb	r2, r3
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008796:	0e9b      	lsrs	r3, r3, #26
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a8:	0e1b      	lsrs	r3, r3, #24
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ba:	0c1b      	lsrs	r3, r3, #16
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087c6:	0a1b      	lsrs	r3, r3, #8
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087dc:	0d1b      	lsrs	r3, r3, #20
 80087de:	b29a      	uxth	r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087e8:	0c1b      	lsrs	r3, r3, #16
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087fa:	0bdb      	lsrs	r3, r3, #15
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	b2da      	uxtb	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800880c:	0b9b      	lsrs	r3, r3, #14
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	b2da      	uxtb	r2, r3
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800881e:	0b5b      	lsrs	r3, r3, #13
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	b2da      	uxtb	r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008830:	0b1b      	lsrs	r3, r3, #12
 8008832:	b2db      	uxtb	r3, r3
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	b2da      	uxtb	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2200      	movs	r2, #0
 8008842:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008848:	2b00      	cmp	r3, #0
 800884a:	d163      	bne.n	8008914 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008850:	009a      	lsls	r2, r3, #2
 8008852:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008856:	4013      	ands	r3, r2
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800885c:	0f92      	lsrs	r2, r2, #30
 800885e:	431a      	orrs	r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008868:	0edb      	lsrs	r3, r3, #27
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	b2da      	uxtb	r2, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887a:	0e1b      	lsrs	r3, r3, #24
 800887c:	b2db      	uxtb	r3, r3
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	b2da      	uxtb	r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800888c:	0d5b      	lsrs	r3, r3, #21
 800888e:	b2db      	uxtb	r3, r3
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	b2da      	uxtb	r2, r3
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889e:	0c9b      	lsrs	r3, r3, #18
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b0:	0bdb      	lsrs	r3, r3, #15
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	7e1b      	ldrb	r3, [r3, #24]
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	3302      	adds	r3, #2
 80088d4:	2201      	movs	r2, #1
 80088d6:	fa02 f303 	lsl.w	r3, r2, r3
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80088de:	fb02 f203 	mul.w	r2, r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	7a1b      	ldrb	r3, [r3, #8]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	2201      	movs	r2, #1
 80088f2:	409a      	lsls	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008900:	0a52      	lsrs	r2, r2, #9
 8008902:	fb02 f203 	mul.w	r2, r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008910:	661a      	str	r2, [r3, #96]	; 0x60
 8008912:	e031      	b.n	8008978 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008918:	2b01      	cmp	r3, #1
 800891a:	d11d      	bne.n	8008958 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008920:	041b      	lsls	r3, r3, #16
 8008922:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800892a:	0c1b      	lsrs	r3, r3, #16
 800892c:	431a      	orrs	r2, r3
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	3301      	adds	r3, #1
 8008938:	029a      	lsls	r2, r3, #10
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800894c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	661a      	str	r2, [r3, #96]	; 0x60
 8008956:	e00f      	b.n	8008978 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a58      	ldr	r2, [pc, #352]	; (8008ac0 <HAL_SD_GetCardCSD+0x344>)
 800895e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008964:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e09d      	b.n	8008ab4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897c:	0b9b      	lsrs	r3, r3, #14
 800897e:	b2db      	uxtb	r3, r3
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	b2da      	uxtb	r2, r3
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800898e:	09db      	lsrs	r3, r3, #7
 8008990:	b2db      	uxtb	r3, r3
 8008992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008996:	b2da      	uxtb	r2, r3
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b0:	0fdb      	lsrs	r3, r3, #31
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089bc:	0f5b      	lsrs	r3, r3, #29
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 0303 	and.w	r3, r3, #3
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ce:	0e9b      	lsrs	r3, r3, #26
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e0:	0d9b      	lsrs	r3, r3, #22
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 030f 	and.w	r3, r3, #15
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f2:	0d5b      	lsrs	r3, r3, #21
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a0e:	0c1b      	lsrs	r3, r3, #16
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a22:	0bdb      	lsrs	r3, r3, #15
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a36:	0b9b      	lsrs	r3, r3, #14
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a4a:	0b5b      	lsrs	r3, r3, #13
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5e:	0b1b      	lsrs	r3, r3, #12
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a72:	0a9b      	lsrs	r3, r3, #10
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a86:	0a1b      	lsrs	r3, r3, #8
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9a:	085b      	lsrs	r3, r3, #1
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	004005ff 	.word	0x004005ff

08008ac4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008b1c:	b5b0      	push	{r4, r5, r7, lr}
 8008b1e:	b08e      	sub	sp, #56	; 0x38
 8008b20:	af04      	add	r7, sp, #16
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2203      	movs	r2, #3
 8008b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d02e      	beq.n	8008b94 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3c:	d106      	bne.n	8008b4c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	639a      	str	r2, [r3, #56]	; 0x38
 8008b4a:	e029      	b.n	8008ba0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b52:	d10a      	bne.n	8008b6a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 faa1 	bl	800909c <SD_WideBus_Enable>
 8008b5a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	639a      	str	r2, [r3, #56]	; 0x38
 8008b68:	e01a      	b.n	8008ba0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fade 	bl	8009132 <SD_WideBus_Disable>
 8008b76:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	639a      	str	r2, [r3, #56]	; 0x38
 8008b84:	e00c      	b.n	8008ba0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	639a      	str	r2, [r3, #56]	; 0x38
 8008b92:	e005      	b.n	8008ba0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d009      	beq.n	8008bbc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a18      	ldr	r2, [pc, #96]	; (8008c10 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e024      	b.n	8008c06 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681d      	ldr	r5, [r3, #0]
 8008be2:	466c      	mov	r4, sp
 8008be4:	f107 0318 	add.w	r3, r7, #24
 8008be8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bf0:	f107 030c 	add.w	r3, r7, #12
 8008bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f002 fae4 	bl	800b1c4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3728      	adds	r7, #40	; 0x28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	004005ff 	.word	0x004005ff

08008c14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c20:	f107 030c 	add.w	r3, r7, #12
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa10 	bl	800904c <SD_SendStatus>
 8008c2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	0a5b      	lsrs	r3, r3, #9
 8008c44:	f003 030f 	and.w	r3, r3, #15
 8008c48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c4a:	693b      	ldr	r3, [r7, #16]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3718      	adds	r7, #24
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c90:	2b82      	cmp	r3, #130	; 0x82
 8008c92:	d111      	bne.n	8008cb8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f002 fc09 	bl	800b4b0 <SDMMC_CmdStopTransfer>
 8008c9e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d008      	beq.n	8008cb8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff fd58 	bl	8008768 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0208 	bic.w	r2, r2, #8
 8008cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f240 523a 	movw	r2, #1338	; 0x53a
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f003 f84f 	bl	800bd84 <HAL_SD_RxCpltCallback>
#endif
}
 8008ce6:	bf00      	nop
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7fc f8c4 	bl	8004e8c <HAL_DMA_GetError>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d03e      	beq.n	8008d88 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d10:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d18:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d002      	beq.n	8008d26 <SD_DMAError+0x36>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d12d      	bne.n	8008d82 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a19      	ldr	r2, [pc, #100]	; (8008d90 <SD_DMAError+0xa0>)
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008d3c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008d4a:	6978      	ldr	r0, [r7, #20]
 8008d4c:	f7ff ff62 	bl	8008c14 <HAL_SD_GetCardState>
 8008d50:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b06      	cmp	r3, #6
 8008d56:	d002      	beq.n	8008d5e <SD_DMAError+0x6e>
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2b05      	cmp	r3, #5
 8008d5c:	d10a      	bne.n	8008d74 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f002 fba4 	bl	800b4b0 <SDMMC_CmdStopTransfer>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008d82:	6978      	ldr	r0, [r7, #20]
 8008d84:	f7ff fcf0 	bl	8008768 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008d88:	bf00      	nop
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	004005ff 	.word	0x004005ff

08008d94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d94:	b5b0      	push	{r4, r5, r7, lr}
 8008d96:	b094      	sub	sp, #80	; 0x50
 8008d98:	af04      	add	r7, sp, #16
 8008d9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f002 fa55 	bl	800b254 <SDMMC_GetPowerState>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008db0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008db4:	e0b7      	b.n	8008f26 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d02f      	beq.n	8008e1e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f002 fc7f 	bl	800b6c6 <SDMMC_CmdSendCID>
 8008dc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <SD_InitCard+0x40>
    {
      return errorstate;
 8008dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd2:	e0a8      	b.n	8008f26 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f002 fa7f 	bl	800b2de <SDMMC_GetResponse>
 8008de0:	4602      	mov	r2, r0
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2104      	movs	r1, #4
 8008dec:	4618      	mov	r0, r3
 8008dee:	f002 fa76 	bl	800b2de <SDMMC_GetResponse>
 8008df2:	4602      	mov	r2, r0
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2108      	movs	r1, #8
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f002 fa6d 	bl	800b2de <SDMMC_GetResponse>
 8008e04:	4602      	mov	r2, r0
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	210c      	movs	r1, #12
 8008e10:	4618      	mov	r0, r3
 8008e12:	f002 fa64 	bl	800b2de <SDMMC_GetResponse>
 8008e16:	4602      	mov	r2, r0
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d00d      	beq.n	8008e42 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f107 020e 	add.w	r2, r7, #14
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f002 fc85 	bl	800b740 <SDMMC_CmdSetRelAdd>
 8008e36:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <SD_InitCard+0xae>
    {
      return errorstate;
 8008e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e40:	e071      	b.n	8008f26 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d036      	beq.n	8008eb8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e4a:	89fb      	ldrh	r3, [r7, #14]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e5a:	041b      	lsls	r3, r3, #16
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4610      	mov	r0, r2
 8008e60:	f002 fc4f 	bl	800b702 <SDMMC_CmdSendCSD>
 8008e64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6e:	e05a      	b.n	8008f26 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2100      	movs	r1, #0
 8008e76:	4618      	mov	r0, r3
 8008e78:	f002 fa31 	bl	800b2de <SDMMC_GetResponse>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2104      	movs	r1, #4
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f002 fa28 	bl	800b2de <SDMMC_GetResponse>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2108      	movs	r1, #8
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f002 fa1f 	bl	800b2de <SDMMC_GetResponse>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	210c      	movs	r1, #12
 8008eac:	4618      	mov	r0, r3
 8008eae:	f002 fa16 	bl	800b2de <SDMMC_GetResponse>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2104      	movs	r1, #4
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f002 fa0d 	bl	800b2de <SDMMC_GetResponse>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	0d1a      	lsrs	r2, r3, #20
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008ecc:	f107 0310 	add.w	r3, r7, #16
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff fc52 	bl	800877c <HAL_SD_GetCardCSD>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ede:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ee2:	e020      	b.n	8008f26 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6819      	ldr	r1, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eec:	041b      	lsls	r3, r3, #16
 8008eee:	f04f 0400 	mov.w	r4, #0
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	f002 fafc 	bl	800b4f4 <SDMMC_CmdSelDesel>
 8008efc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <SD_InitCard+0x174>
  {
    return errorstate;
 8008f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f06:	e00e      	b.n	8008f26 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681d      	ldr	r5, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	466c      	mov	r4, sp
 8008f10:	f103 0210 	add.w	r2, r3, #16
 8008f14:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f002 f950 	bl	800b1c4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3740      	adds	r7, #64	; 0x40
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008f30 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	2300      	movs	r3, #0
 8008f42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f002 faf6 	bl	800b53a <SDMMC_CmdGoIdleState>
 8008f4e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	e072      	b.n	8009040 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f002 fb09 	bl	800b576 <SDMMC_CmdOperCond>
 8008f64:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00d      	beq.n	8008f88 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f002 fadf 	bl	800b53a <SDMMC_CmdGoIdleState>
 8008f7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	e05b      	b.n	8009040 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d137      	bne.n	8009006 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f002 fb09 	bl	800b5b4 <SDMMC_CmdAppCommand>
 8008fa2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d02d      	beq.n	8009006 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008faa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fae:	e047      	b.n	8009040 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f002 fafc 	bl	800b5b4 <SDMMC_CmdAppCommand>
 8008fbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <SD_PowerON+0x98>
    {
      return errorstate;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	e03b      	b.n	8009040 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	491e      	ldr	r1, [pc, #120]	; (8009048 <SD_PowerON+0x118>)
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f002 fb12 	bl	800b5f8 <SDMMC_CmdAppOperCommand>
 8008fd4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fe0:	e02e      	b.n	8009040 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f002 f978 	bl	800b2de <SDMMC_GetResponse>
 8008fee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	0fdb      	lsrs	r3, r3, #31
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d101      	bne.n	8008ffc <SD_PowerON+0xcc>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e000      	b.n	8008ffe <SD_PowerON+0xce>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	613b      	str	r3, [r7, #16]

    count++;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	3301      	adds	r3, #1
 8009004:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800900c:	4293      	cmp	r3, r2
 800900e:	d802      	bhi.n	8009016 <SD_PowerON+0xe6>
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0cc      	beq.n	8008fb0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800901c:	4293      	cmp	r3, r2
 800901e:	d902      	bls.n	8009026 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009024:	e00c      	b.n	8009040 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	645a      	str	r2, [r3, #68]	; 0x44
 8009036:	e002      	b.n	800903e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	c1100000 	.word	0xc1100000

0800904c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d102      	bne.n	8009062 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800905c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009060:	e018      	b.n	8009094 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906a:	041b      	lsls	r3, r3, #16
 800906c:	4619      	mov	r1, r3
 800906e:	4610      	mov	r0, r2
 8009070:	f002 fb87 	bl	800b782 <SDMMC_CmdSendStatus>
 8009074:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <SD_SendStatus+0x34>
  {
    return errorstate;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	e009      	b.n	8009094 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2100      	movs	r1, #0
 8009086:	4618      	mov	r0, r3
 8009088:	f002 f929 	bl	800b2de <SDMMC_GetResponse>
 800908c:	4602      	mov	r2, r0
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	2300      	movs	r3, #0
 80090aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2100      	movs	r1, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f002 f913 	bl	800b2de <SDMMC_GetResponse>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090c2:	d102      	bne.n	80090ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090c8:	e02f      	b.n	800912a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090ca:	f107 030c 	add.w	r3, r7, #12
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f879 	bl	80091c8 <SD_FindSCR>
 80090d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	e023      	b.n	800912a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01c      	beq.n	8009126 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f4:	041b      	lsls	r3, r3, #16
 80090f6:	4619      	mov	r1, r3
 80090f8:	4610      	mov	r0, r2
 80090fa:	f002 fa5b 	bl	800b5b4 <SDMMC_CmdAppCommand>
 80090fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	e00f      	b.n	800912a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2102      	movs	r1, #2
 8009110:	4618      	mov	r0, r3
 8009112:	f002 fa95 	bl	800b640 <SDMMC_CmdBusWidth>
 8009116:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	e003      	b.n	800912a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009122:	2300      	movs	r3, #0
 8009124:	e001      	b.n	800912a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009126:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b086      	sub	sp, #24
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]
 800913e:	2300      	movs	r3, #0
 8009140:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2100      	movs	r1, #0
 8009148:	4618      	mov	r0, r3
 800914a:	f002 f8c8 	bl	800b2de <SDMMC_GetResponse>
 800914e:	4603      	mov	r3, r0
 8009150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009158:	d102      	bne.n	8009160 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800915a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800915e:	e02f      	b.n	80091c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009160:	f107 030c 	add.w	r3, r7, #12
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f82e 	bl	80091c8 <SD_FindSCR>
 800916c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	e023      	b.n	80091c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d01c      	beq.n	80091bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918a:	041b      	lsls	r3, r3, #16
 800918c:	4619      	mov	r1, r3
 800918e:	4610      	mov	r0, r2
 8009190:	f002 fa10 	bl	800b5b4 <SDMMC_CmdAppCommand>
 8009194:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	e00f      	b.n	80091c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2100      	movs	r1, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f002 fa4a 	bl	800b640 <SDMMC_CmdBusWidth>
 80091ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	e003      	b.n	80091c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80091b8:	2300      	movs	r3, #0
 80091ba:	e001      	b.n	80091c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80091c8:	b590      	push	{r4, r7, lr}
 80091ca:	b08f      	sub	sp, #60	; 0x3c
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80091d2:	f7fa fb4d 	bl	8003870 <HAL_GetTick>
 80091d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80091dc:	2300      	movs	r3, #0
 80091de:	60bb      	str	r3, [r7, #8]
 80091e0:	2300      	movs	r3, #0
 80091e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2108      	movs	r1, #8
 80091ee:	4618      	mov	r0, r3
 80091f0:	f002 f8b4 	bl	800b35c <SDMMC_CmdBlockLength>
 80091f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <SD_FindSCR+0x38>
  {
    return errorstate;
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	e0a9      	b.n	8009354 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009208:	041b      	lsls	r3, r3, #16
 800920a:	4619      	mov	r1, r3
 800920c:	4610      	mov	r0, r2
 800920e:	f002 f9d1 	bl	800b5b4 <SDMMC_CmdAppCommand>
 8009212:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <SD_FindSCR+0x56>
  {
    return errorstate;
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	e09a      	b.n	8009354 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800921e:	f04f 33ff 	mov.w	r3, #4294967295
 8009222:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009224:	2308      	movs	r3, #8
 8009226:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009228:	2330      	movs	r3, #48	; 0x30
 800922a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800922c:	2302      	movs	r3, #2
 800922e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009230:	2300      	movs	r3, #0
 8009232:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009234:	2301      	movs	r3, #1
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f107 0210 	add.w	r2, r7, #16
 8009240:	4611      	mov	r1, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f002 f85e 	bl	800b304 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4618      	mov	r0, r3
 800924e:	f002 fa19 	bl	800b684 <SDMMC_CmdSendSCR>
 8009252:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d022      	beq.n	80092a0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	e07a      	b.n	8009354 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00e      	beq.n	800928a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6819      	ldr	r1, [r3, #0]
 8009270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	f107 0208 	add.w	r2, r7, #8
 8009278:	18d4      	adds	r4, r2, r3
 800927a:	4608      	mov	r0, r1
 800927c:	f001 ffce 	bl	800b21c <SDMMC_ReadFIFO>
 8009280:	4603      	mov	r3, r0
 8009282:	6023      	str	r3, [r4, #0]
      index++;
 8009284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009286:	3301      	adds	r3, #1
 8009288:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800928a:	f7fa faf1 	bl	8003870 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009298:	d102      	bne.n	80092a0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800929a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800929e:	e059      	b.n	8009354 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a6:	f240 432a 	movw	r3, #1066	; 0x42a
 80092aa:	4013      	ands	r3, r2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d0d6      	beq.n	800925e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d005      	beq.n	80092ca <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2208      	movs	r2, #8
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80092c6:	2308      	movs	r3, #8
 80092c8:	e044      	b.n	8009354 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d0:	f003 0302 	and.w	r3, r3, #2
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d005      	beq.n	80092e4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2202      	movs	r2, #2
 80092de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80092e0:	2302      	movs	r3, #2
 80092e2:	e037      	b.n	8009354 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d005      	beq.n	80092fe <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2220      	movs	r2, #32
 80092f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80092fa:	2320      	movs	r3, #32
 80092fc:	e02a      	b.n	8009354 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f240 523a 	movw	r2, #1338	; 0x53a
 8009306:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	061a      	lsls	r2, r3, #24
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	021b      	lsls	r3, r3, #8
 8009310:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009314:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	0a1b      	lsrs	r3, r3, #8
 800931a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800931e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	0e1b      	lsrs	r3, r3, #24
 8009324:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	601a      	str	r2, [r3, #0]
    scr++;
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	3304      	adds	r3, #4
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	061a      	lsls	r2, r3, #24
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	021b      	lsls	r3, r3, #8
 8009338:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800933c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	0a1b      	lsrs	r3, r3, #8
 8009342:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009346:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	0e1b      	lsrs	r3, r3, #24
 800934c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800934e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009350:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	373c      	adds	r7, #60	; 0x3c
 8009358:	46bd      	mov	sp, r7
 800935a:	bd90      	pop	{r4, r7, pc}

0800935c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e025      	b.n	80093bc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d106      	bne.n	800938a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7fa f849 	bl	800341c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2202      	movs	r2, #2
 800938e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f001 fdeb 	bl	800af78 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	461a      	mov	r2, r3
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	f001 fe55 	bl	800b05c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d101      	bne.n	80093e0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80093dc:	2302      	movs	r3, #2
 80093de:	e018      	b.n	8009412 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 feb3 	bl	800b15c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d104      	bne.n	8009408 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2205      	movs	r2, #5
 8009402:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009406:	e003      	b.n	8009410 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b02      	cmp	r3, #2
 800942e:	d101      	bne.n	8009434 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009430:	2302      	movs	r3, #2
 8009432:	e00e      	b.n	8009452 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	4618      	mov	r0, r3
 8009444:	f001 feab 	bl	800b19e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e04c      	b.n	8009508 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d106      	bne.n	8009488 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7f9 fca6 	bl	8002dd4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2202      	movs	r2, #2
 800948c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0203 	bic.w	r2, r2, #3
 800949e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4b19      	ldr	r3, [pc, #100]	; (8009510 <HAL_SPDIFRX_Init+0xb4>)
 80094ac:	4013      	ands	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80094b8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80094be:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80094c4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80094ca:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80094d0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80094d6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80094dc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80094e2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80094e8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	fff88407 	.word	0xfff88407

08009514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e084      	b.n	8009630 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7f9 fc89 	bl	8002e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2202      	movs	r2, #2
 800954a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800955c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009566:	d902      	bls.n	800956e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009568:	2300      	movs	r3, #0
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	e002      	b.n	8009574 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800956e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009572:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800957c:	d007      	beq.n	800958e <HAL_SPI_Init+0x7a>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009586:	d002      	beq.n	800958e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10b      	bne.n	80095ae <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800959e:	d903      	bls.n	80095a8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2202      	movs	r2, #2
 80095a4:	631a      	str	r2, [r3, #48]	; 0x30
 80095a6:	e002      	b.n	80095ae <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	431a      	orrs	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	431a      	orrs	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095cc:	431a      	orrs	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	431a      	orrs	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a1b      	ldr	r3, [r3, #32]
 80095d8:	ea42 0103 	orr.w	r1, r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	0c1b      	lsrs	r3, r3, #16
 80095ee:	f003 0204 	and.w	r2, r3, #4
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fc:	431a      	orrs	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	ea42 0103 	orr.w	r1, r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	430a      	orrs	r2, r1
 800960e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	69da      	ldr	r2, [r3, #28]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800961e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e01d      	b.n	8009686 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d106      	bne.n	8009664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7f9 fc5c 	bl	8002f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3304      	adds	r3, #4
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f000 fb78 	bl	8009d6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68da      	ldr	r2, [r3, #12]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0201 	orr.w	r2, r2, #1
 80096a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689a      	ldr	r2, [r3, #8]
 80096ae:	4b0c      	ldr	r3, [pc, #48]	; (80096e0 <HAL_TIM_Base_Start_IT+0x50>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b06      	cmp	r3, #6
 80096b8:	d00b      	beq.n	80096d2 <HAL_TIM_Base_Start_IT+0x42>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096c0:	d007      	beq.n	80096d2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f042 0201 	orr.w	r2, r2, #1
 80096d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	00010007 	.word	0x00010007

080096e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e01d      	b.n	8009732 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7f9 fc74 	bl	8002ff8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2202      	movs	r2, #2
 8009714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3304      	adds	r3, #4
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f000 fb22 	bl	8009d6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b02      	cmp	r3, #2
 800974e:	d122      	bne.n	8009796 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b02      	cmp	r3, #2
 800975c:	d11b      	bne.n	8009796 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f06f 0202 	mvn.w	r2, #2
 8009766:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	f003 0303 	and.w	r3, r3, #3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fad7 	bl	8009d30 <HAL_TIM_IC_CaptureCallback>
 8009782:	e005      	b.n	8009790 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fac9 	bl	8009d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fada 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	d122      	bne.n	80097ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	f003 0304 	and.w	r3, r3, #4
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	d11b      	bne.n	80097ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f06f 0204 	mvn.w	r2, #4
 80097ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 faad 	bl	8009d30 <HAL_TIM_IC_CaptureCallback>
 80097d6:	e005      	b.n	80097e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fa9f 	bl	8009d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fab0 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	f003 0308 	and.w	r3, r3, #8
 80097f4:	2b08      	cmp	r3, #8
 80097f6:	d122      	bne.n	800983e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f003 0308 	and.w	r3, r3, #8
 8009802:	2b08      	cmp	r3, #8
 8009804:	d11b      	bne.n	800983e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f06f 0208 	mvn.w	r2, #8
 800980e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2204      	movs	r2, #4
 8009814:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69db      	ldr	r3, [r3, #28]
 800981c:	f003 0303 	and.w	r3, r3, #3
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fa83 	bl	8009d30 <HAL_TIM_IC_CaptureCallback>
 800982a:	e005      	b.n	8009838 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fa75 	bl	8009d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fa86 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	f003 0310 	and.w	r3, r3, #16
 8009848:	2b10      	cmp	r3, #16
 800984a:	d122      	bne.n	8009892 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	f003 0310 	and.w	r3, r3, #16
 8009856:	2b10      	cmp	r3, #16
 8009858:	d11b      	bne.n	8009892 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f06f 0210 	mvn.w	r2, #16
 8009862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2208      	movs	r2, #8
 8009868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fa59 	bl	8009d30 <HAL_TIM_IC_CaptureCallback>
 800987e:	e005      	b.n	800988c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fa4b 	bl	8009d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fa5c 	bl	8009d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b01      	cmp	r3, #1
 800989e:	d10e      	bne.n	80098be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d107      	bne.n	80098be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f06f 0201 	mvn.w	r2, #1
 80098b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7f8 feb1 	bl	8002620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c8:	2b80      	cmp	r3, #128	; 0x80
 80098ca:	d10e      	bne.n	80098ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098d6:	2b80      	cmp	r3, #128	; 0x80
 80098d8:	d107      	bne.n	80098ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 feef 	bl	800a6c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f8:	d10e      	bne.n	8009918 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009904:	2b80      	cmp	r3, #128	; 0x80
 8009906:	d107      	bne.n	8009918 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fee2 	bl	800a6dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009922:	2b40      	cmp	r3, #64	; 0x40
 8009924:	d10e      	bne.n	8009944 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009930:	2b40      	cmp	r3, #64	; 0x40
 8009932:	d107      	bne.n	8009944 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800993c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fa0a 	bl	8009d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f003 0320 	and.w	r3, r3, #32
 800994e:	2b20      	cmp	r3, #32
 8009950:	d10e      	bne.n	8009970 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	f003 0320 	and.w	r3, r3, #32
 800995c:	2b20      	cmp	r3, #32
 800995e:	d107      	bne.n	8009970 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f06f 0220 	mvn.w	r2, #32
 8009968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fea2 	bl	800a6b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998a:	2b01      	cmp	r3, #1
 800998c:	d101      	bne.n	8009992 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800998e:	2302      	movs	r3, #2
 8009990:	e105      	b.n	8009b9e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2202      	movs	r2, #2
 800999e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b14      	cmp	r3, #20
 80099a6:	f200 80f0 	bhi.w	8009b8a <HAL_TIM_PWM_ConfigChannel+0x212>
 80099aa:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	08009a05 	.word	0x08009a05
 80099b4:	08009b8b 	.word	0x08009b8b
 80099b8:	08009b8b 	.word	0x08009b8b
 80099bc:	08009b8b 	.word	0x08009b8b
 80099c0:	08009a45 	.word	0x08009a45
 80099c4:	08009b8b 	.word	0x08009b8b
 80099c8:	08009b8b 	.word	0x08009b8b
 80099cc:	08009b8b 	.word	0x08009b8b
 80099d0:	08009a87 	.word	0x08009a87
 80099d4:	08009b8b 	.word	0x08009b8b
 80099d8:	08009b8b 	.word	0x08009b8b
 80099dc:	08009b8b 	.word	0x08009b8b
 80099e0:	08009ac7 	.word	0x08009ac7
 80099e4:	08009b8b 	.word	0x08009b8b
 80099e8:	08009b8b 	.word	0x08009b8b
 80099ec:	08009b8b 	.word	0x08009b8b
 80099f0:	08009b09 	.word	0x08009b09
 80099f4:	08009b8b 	.word	0x08009b8b
 80099f8:	08009b8b 	.word	0x08009b8b
 80099fc:	08009b8b 	.word	0x08009b8b
 8009a00:	08009b49 	.word	0x08009b49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 fa4e 	bl	8009eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699a      	ldr	r2, [r3, #24]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f042 0208 	orr.w	r2, r2, #8
 8009a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699a      	ldr	r2, [r3, #24]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f022 0204 	bic.w	r2, r2, #4
 8009a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6999      	ldr	r1, [r3, #24]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	691a      	ldr	r2, [r3, #16]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	619a      	str	r2, [r3, #24]
      break;
 8009a42:	e0a3      	b.n	8009b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 faa0 	bl	8009f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699a      	ldr	r2, [r3, #24]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6999      	ldr	r1, [r3, #24]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	021a      	lsls	r2, r3, #8
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	619a      	str	r2, [r3, #24]
      break;
 8009a84:	e082      	b.n	8009b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68b9      	ldr	r1, [r7, #8]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 faf7 	bl	800a080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69da      	ldr	r2, [r3, #28]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0208 	orr.w	r2, r2, #8
 8009aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69da      	ldr	r2, [r3, #28]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f022 0204 	bic.w	r2, r2, #4
 8009ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69d9      	ldr	r1, [r3, #28]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	691a      	ldr	r2, [r3, #16]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	61da      	str	r2, [r3, #28]
      break;
 8009ac4:	e062      	b.n	8009b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68b9      	ldr	r1, [r7, #8]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 fb4d 	bl	800a16c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69da      	ldr	r2, [r3, #28]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	69da      	ldr	r2, [r3, #28]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69d9      	ldr	r1, [r3, #28]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	021a      	lsls	r2, r3, #8
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	61da      	str	r2, [r3, #28]
      break;
 8009b06:	e041      	b.n	8009b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68b9      	ldr	r1, [r7, #8]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fb84 	bl	800a21c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f042 0208 	orr.w	r2, r2, #8
 8009b22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 0204 	bic.w	r2, r2, #4
 8009b32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	691a      	ldr	r2, [r3, #16]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b46:	e021      	b.n	8009b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fbb6 	bl	800a2c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	021a      	lsls	r2, r3, #8
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b88:	e000      	b.n	8009b8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009b8a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop

08009ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d101      	bne.n	8009bc0 <HAL_TIM_ConfigClockSource+0x18>
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	e0a6      	b.n	8009d0e <HAL_TIM_ConfigClockSource+0x166>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4b4f      	ldr	r3, [pc, #316]	; (8009d18 <HAL_TIM_ConfigClockSource+0x170>)
 8009bdc:	4013      	ands	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009be6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b40      	cmp	r3, #64	; 0x40
 8009bf6:	d067      	beq.n	8009cc8 <HAL_TIM_ConfigClockSource+0x120>
 8009bf8:	2b40      	cmp	r3, #64	; 0x40
 8009bfa:	d80b      	bhi.n	8009c14 <HAL_TIM_ConfigClockSource+0x6c>
 8009bfc:	2b10      	cmp	r3, #16
 8009bfe:	d073      	beq.n	8009ce8 <HAL_TIM_ConfigClockSource+0x140>
 8009c00:	2b10      	cmp	r3, #16
 8009c02:	d802      	bhi.n	8009c0a <HAL_TIM_ConfigClockSource+0x62>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d06f      	beq.n	8009ce8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009c08:	e078      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c0a:	2b20      	cmp	r3, #32
 8009c0c:	d06c      	beq.n	8009ce8 <HAL_TIM_ConfigClockSource+0x140>
 8009c0e:	2b30      	cmp	r3, #48	; 0x30
 8009c10:	d06a      	beq.n	8009ce8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009c12:	e073      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c14:	2b70      	cmp	r3, #112	; 0x70
 8009c16:	d00d      	beq.n	8009c34 <HAL_TIM_ConfigClockSource+0x8c>
 8009c18:	2b70      	cmp	r3, #112	; 0x70
 8009c1a:	d804      	bhi.n	8009c26 <HAL_TIM_ConfigClockSource+0x7e>
 8009c1c:	2b50      	cmp	r3, #80	; 0x50
 8009c1e:	d033      	beq.n	8009c88 <HAL_TIM_ConfigClockSource+0xe0>
 8009c20:	2b60      	cmp	r3, #96	; 0x60
 8009c22:	d041      	beq.n	8009ca8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009c24:	e06a      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c2a:	d066      	beq.n	8009cfa <HAL_TIM_ConfigClockSource+0x152>
 8009c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c30:	d017      	beq.n	8009c62 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009c32:	e063      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	6899      	ldr	r1, [r3, #8]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f000 fc0a 	bl	800a45c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	609a      	str	r2, [r3, #8]
      break;
 8009c60:	e04c      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	6899      	ldr	r1, [r3, #8]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	f000 fbf3 	bl	800a45c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c84:	609a      	str	r2, [r3, #8]
      break;
 8009c86:	e039      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	6859      	ldr	r1, [r3, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	461a      	mov	r2, r3
 8009c96:	f000 fb67 	bl	800a368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2150      	movs	r1, #80	; 0x50
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 fbc0 	bl	800a426 <TIM_ITRx_SetConfig>
      break;
 8009ca6:	e029      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	6859      	ldr	r1, [r3, #4]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f000 fb86 	bl	800a3c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2160      	movs	r1, #96	; 0x60
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 fbb0 	bl	800a426 <TIM_ITRx_SetConfig>
      break;
 8009cc6:	e019      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6818      	ldr	r0, [r3, #0]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	6859      	ldr	r1, [r3, #4]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	f000 fb47 	bl	800a368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2140      	movs	r1, #64	; 0x40
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 fba0 	bl	800a426 <TIM_ITRx_SetConfig>
      break;
 8009ce6:	e009      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f000 fb97 	bl	800a426 <TIM_ITRx_SetConfig>
      break;
 8009cf8:	e000      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	fffeff88 	.word	0xfffeff88

08009d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a40      	ldr	r2, [pc, #256]	; (8009e80 <TIM_Base_SetConfig+0x114>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d013      	beq.n	8009dac <TIM_Base_SetConfig+0x40>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d8a:	d00f      	beq.n	8009dac <TIM_Base_SetConfig+0x40>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a3d      	ldr	r2, [pc, #244]	; (8009e84 <TIM_Base_SetConfig+0x118>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d00b      	beq.n	8009dac <TIM_Base_SetConfig+0x40>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a3c      	ldr	r2, [pc, #240]	; (8009e88 <TIM_Base_SetConfig+0x11c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d007      	beq.n	8009dac <TIM_Base_SetConfig+0x40>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a3b      	ldr	r2, [pc, #236]	; (8009e8c <TIM_Base_SetConfig+0x120>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d003      	beq.n	8009dac <TIM_Base_SetConfig+0x40>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a3a      	ldr	r2, [pc, #232]	; (8009e90 <TIM_Base_SetConfig+0x124>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d108      	bne.n	8009dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a2f      	ldr	r2, [pc, #188]	; (8009e80 <TIM_Base_SetConfig+0x114>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d02b      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dcc:	d027      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a2c      	ldr	r2, [pc, #176]	; (8009e84 <TIM_Base_SetConfig+0x118>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d023      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a2b      	ldr	r2, [pc, #172]	; (8009e88 <TIM_Base_SetConfig+0x11c>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d01f      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a2a      	ldr	r2, [pc, #168]	; (8009e8c <TIM_Base_SetConfig+0x120>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d01b      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a29      	ldr	r2, [pc, #164]	; (8009e90 <TIM_Base_SetConfig+0x124>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d017      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a28      	ldr	r2, [pc, #160]	; (8009e94 <TIM_Base_SetConfig+0x128>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d013      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a27      	ldr	r2, [pc, #156]	; (8009e98 <TIM_Base_SetConfig+0x12c>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d00f      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a26      	ldr	r2, [pc, #152]	; (8009e9c <TIM_Base_SetConfig+0x130>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d00b      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a25      	ldr	r2, [pc, #148]	; (8009ea0 <TIM_Base_SetConfig+0x134>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d007      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a24      	ldr	r2, [pc, #144]	; (8009ea4 <TIM_Base_SetConfig+0x138>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d003      	beq.n	8009e1e <TIM_Base_SetConfig+0xb2>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a23      	ldr	r2, [pc, #140]	; (8009ea8 <TIM_Base_SetConfig+0x13c>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d108      	bne.n	8009e30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	689a      	ldr	r2, [r3, #8]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a0a      	ldr	r2, [pc, #40]	; (8009e80 <TIM_Base_SetConfig+0x114>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d003      	beq.n	8009e64 <TIM_Base_SetConfig+0xf8>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a0c      	ldr	r2, [pc, #48]	; (8009e90 <TIM_Base_SetConfig+0x124>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d103      	bne.n	8009e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	691a      	ldr	r2, [r3, #16]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	615a      	str	r2, [r3, #20]
}
 8009e72:	bf00      	nop
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	40010000 	.word	0x40010000
 8009e84:	40000400 	.word	0x40000400
 8009e88:	40000800 	.word	0x40000800
 8009e8c:	40000c00 	.word	0x40000c00
 8009e90:	40010400 	.word	0x40010400
 8009e94:	40014000 	.word	0x40014000
 8009e98:	40014400 	.word	0x40014400
 8009e9c:	40014800 	.word	0x40014800
 8009ea0:	40001800 	.word	0x40001800
 8009ea4:	40001c00 	.word	0x40001c00
 8009ea8:	40002000 	.word	0x40002000

08009eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	f023 0201 	bic.w	r2, r3, #1
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	4b2b      	ldr	r3, [pc, #172]	; (8009f84 <TIM_OC1_SetConfig+0xd8>)
 8009ed8:	4013      	ands	r3, r2
 8009eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f023 0302 	bic.w	r3, r3, #2
 8009ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a21      	ldr	r2, [pc, #132]	; (8009f88 <TIM_OC1_SetConfig+0xdc>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d003      	beq.n	8009f10 <TIM_OC1_SetConfig+0x64>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a20      	ldr	r2, [pc, #128]	; (8009f8c <TIM_OC1_SetConfig+0xe0>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d10c      	bne.n	8009f2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f023 0308 	bic.w	r3, r3, #8
 8009f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f023 0304 	bic.w	r3, r3, #4
 8009f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a16      	ldr	r2, [pc, #88]	; (8009f88 <TIM_OC1_SetConfig+0xdc>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d003      	beq.n	8009f3a <TIM_OC1_SetConfig+0x8e>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a15      	ldr	r2, [pc, #84]	; (8009f8c <TIM_OC1_SetConfig+0xe0>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d111      	bne.n	8009f5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	621a      	str	r2, [r3, #32]
}
 8009f78:	bf00      	nop
 8009f7a:	371c      	adds	r7, #28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	fffeff8f 	.word	0xfffeff8f
 8009f88:	40010000 	.word	0x40010000
 8009f8c:	40010400 	.word	0x40010400

08009f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b087      	sub	sp, #28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a1b      	ldr	r3, [r3, #32]
 8009f9e:	f023 0210 	bic.w	r2, r3, #16
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	4b2e      	ldr	r3, [pc, #184]	; (800a074 <TIM_OC2_SetConfig+0xe4>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	021b      	lsls	r3, r3, #8
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f023 0320 	bic.w	r3, r3, #32
 8009fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	011b      	lsls	r3, r3, #4
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a23      	ldr	r2, [pc, #140]	; (800a078 <TIM_OC2_SetConfig+0xe8>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d003      	beq.n	8009ff8 <TIM_OC2_SetConfig+0x68>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a22      	ldr	r2, [pc, #136]	; (800a07c <TIM_OC2_SetConfig+0xec>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d10d      	bne.n	800a014 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	011b      	lsls	r3, r3, #4
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	4313      	orrs	r3, r2
 800a00a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a012:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a18      	ldr	r2, [pc, #96]	; (800a078 <TIM_OC2_SetConfig+0xe8>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d003      	beq.n	800a024 <TIM_OC2_SetConfig+0x94>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a17      	ldr	r2, [pc, #92]	; (800a07c <TIM_OC2_SetConfig+0xec>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d113      	bne.n	800a04c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a02a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4313      	orrs	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	621a      	str	r2, [r3, #32]
}
 800a066:	bf00      	nop
 800a068:	371c      	adds	r7, #28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	feff8fff 	.word	0xfeff8fff
 800a078:	40010000 	.word	0x40010000
 800a07c:	40010400 	.word	0x40010400

0800a080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a080:	b480      	push	{r7}
 800a082:	b087      	sub	sp, #28
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	69db      	ldr	r3, [r3, #28]
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	4b2d      	ldr	r3, [pc, #180]	; (800a160 <TIM_OC3_SetConfig+0xe0>)
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 0303 	bic.w	r3, r3, #3
 800a0b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a22      	ldr	r2, [pc, #136]	; (800a164 <TIM_OC3_SetConfig+0xe4>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d003      	beq.n	800a0e6 <TIM_OC3_SetConfig+0x66>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a21      	ldr	r2, [pc, #132]	; (800a168 <TIM_OC3_SetConfig+0xe8>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d10d      	bne.n	800a102 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	021b      	lsls	r3, r3, #8
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a17      	ldr	r2, [pc, #92]	; (800a164 <TIM_OC3_SetConfig+0xe4>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d003      	beq.n	800a112 <TIM_OC3_SetConfig+0x92>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a16      	ldr	r2, [pc, #88]	; (800a168 <TIM_OC3_SetConfig+0xe8>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d113      	bne.n	800a13a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	011b      	lsls	r3, r3, #4
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	011b      	lsls	r3, r3, #4
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	4313      	orrs	r3, r2
 800a138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	621a      	str	r2, [r3, #32]
}
 800a154:	bf00      	nop
 800a156:	371c      	adds	r7, #28
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	fffeff8f 	.word	0xfffeff8f
 800a164:	40010000 	.word	0x40010000
 800a168:	40010400 	.word	0x40010400

0800a16c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	4b1e      	ldr	r3, [pc, #120]	; (800a210 <TIM_OC4_SetConfig+0xa4>)
 800a198:	4013      	ands	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	031b      	lsls	r3, r3, #12
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a13      	ldr	r2, [pc, #76]	; (800a214 <TIM_OC4_SetConfig+0xa8>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d003      	beq.n	800a1d4 <TIM_OC4_SetConfig+0x68>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a12      	ldr	r2, [pc, #72]	; (800a218 <TIM_OC4_SetConfig+0xac>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d109      	bne.n	800a1e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	019b      	lsls	r3, r3, #6
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	621a      	str	r2, [r3, #32]
}
 800a202:	bf00      	nop
 800a204:	371c      	adds	r7, #28
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	feff8fff 	.word	0xfeff8fff
 800a214:	40010000 	.word	0x40010000
 800a218:	40010400 	.word	0x40010400

0800a21c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4b1b      	ldr	r3, [pc, #108]	; (800a2b4 <TIM_OC5_SetConfig+0x98>)
 800a248:	4013      	ands	r3, r2
 800a24a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a25c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	041b      	lsls	r3, r3, #16
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4313      	orrs	r3, r2
 800a268:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a12      	ldr	r2, [pc, #72]	; (800a2b8 <TIM_OC5_SetConfig+0x9c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d003      	beq.n	800a27a <TIM_OC5_SetConfig+0x5e>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a11      	ldr	r2, [pc, #68]	; (800a2bc <TIM_OC5_SetConfig+0xa0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d109      	bne.n	800a28e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a280:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	021b      	lsls	r3, r3, #8
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	621a      	str	r2, [r3, #32]
}
 800a2a8:	bf00      	nop
 800a2aa:	371c      	adds	r7, #28
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	fffeff8f 	.word	0xfffeff8f
 800a2b8:	40010000 	.word	0x40010000
 800a2bc:	40010400 	.word	0x40010400

0800a2c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	4b1c      	ldr	r3, [pc, #112]	; (800a35c <TIM_OC6_SetConfig+0x9c>)
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	051b      	lsls	r3, r3, #20
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a13      	ldr	r2, [pc, #76]	; (800a360 <TIM_OC6_SetConfig+0xa0>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d003      	beq.n	800a320 <TIM_OC6_SetConfig+0x60>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a12      	ldr	r2, [pc, #72]	; (800a364 <TIM_OC6_SetConfig+0xa4>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d109      	bne.n	800a334 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a326:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	029b      	lsls	r3, r3, #10
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	4313      	orrs	r3, r2
 800a332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	621a      	str	r2, [r3, #32]
}
 800a34e:	bf00      	nop
 800a350:	371c      	adds	r7, #28
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	feff8fff 	.word	0xfeff8fff
 800a360:	40010000 	.word	0x40010000
 800a364:	40010400 	.word	0x40010400

0800a368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a368:	b480      	push	{r7}
 800a36a:	b087      	sub	sp, #28
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6a1b      	ldr	r3, [r3, #32]
 800a378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	f023 0201 	bic.w	r2, r3, #1
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	011b      	lsls	r3, r3, #4
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f023 030a 	bic.w	r3, r3, #10
 800a3a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	621a      	str	r2, [r3, #32]
}
 800a3ba:	bf00      	nop
 800a3bc:	371c      	adds	r7, #28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b087      	sub	sp, #28
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	f023 0210 	bic.w	r2, r3, #16
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
 800a3e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	031b      	lsls	r3, r3, #12
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	693a      	ldr	r2, [r7, #16]
 800a418:	621a      	str	r2, [r3, #32]
}
 800a41a:	bf00      	nop
 800a41c:	371c      	adds	r7, #28
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a426:	b480      	push	{r7}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a43c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4313      	orrs	r3, r2
 800a444:	f043 0307 	orr.w	r3, r3, #7
 800a448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	609a      	str	r2, [r3, #8]
}
 800a450:	bf00      	nop
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	021a      	lsls	r2, r3, #8
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	431a      	orrs	r2, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4313      	orrs	r3, r2
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	609a      	str	r2, [r3, #8]
}
 800a490:	bf00      	nop
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d101      	bne.n	800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e06d      	b.n	800a590 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a30      	ldr	r2, [pc, #192]	; (800a59c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d004      	beq.n	800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a2f      	ldr	r2, [pc, #188]	; (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d108      	bne.n	800a4fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a500:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	4313      	orrs	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a20      	ldr	r2, [pc, #128]	; (800a59c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d022      	beq.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a526:	d01d      	beq.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a1d      	ldr	r2, [pc, #116]	; (800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d018      	beq.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a1c      	ldr	r2, [pc, #112]	; (800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d013      	beq.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a1a      	ldr	r2, [pc, #104]	; (800a5ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d00e      	beq.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a15      	ldr	r2, [pc, #84]	; (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d009      	beq.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a16      	ldr	r2, [pc, #88]	; (800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d004      	beq.n	800a564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a15      	ldr	r2, [pc, #84]	; (800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d10c      	bne.n	800a57e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a56a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	4313      	orrs	r3, r2
 800a574:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	40010000 	.word	0x40010000
 800a5a0:	40010400 	.word	0x40010400
 800a5a4:	40000400 	.word	0x40000400
 800a5a8:	40000800 	.word	0x40000800
 800a5ac:	40000c00 	.word	0x40000c00
 800a5b0:	40014000 	.word	0x40014000
 800a5b4:	40001800 	.word	0x40001800

0800a5b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d101      	bne.n	800a5d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	e065      	b.n	800a6a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4313      	orrs	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	4313      	orrs	r3, r2
 800a620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	041b      	lsls	r3, r3, #16
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a16      	ldr	r2, [pc, #88]	; (800a6ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d004      	beq.n	800a662 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a14      	ldr	r2, [pc, #80]	; (800a6b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d115      	bne.n	800a68e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	051b      	lsls	r3, r3, #20
 800a66e:	4313      	orrs	r3, r2
 800a670:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	40010000 	.word	0x40010000
 800a6b0:	40010400 	.word	0x40010400

0800a6b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e040      	b.n	800a784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7f8 fd5e 	bl	80031d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2224      	movs	r2, #36	; 0x24
 800a71c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0201 	bic.w	r2, r2, #1
 800a72c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f82c 	bl	800a78c <UART_SetConfig>
 800a734:	4603      	mov	r3, r0
 800a736:	2b01      	cmp	r3, #1
 800a738:	d101      	bne.n	800a73e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e022      	b.n	800a784 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 faca 	bl	800ace0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a75a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	689a      	ldr	r2, [r3, #8]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a76a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f042 0201 	orr.w	r2, r2, #1
 800a77a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fb51 	bl	800ae24 <UART_CheckIdleState>
 800a782:	4603      	mov	r3, r0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a794:	2300      	movs	r3, #0
 800a796:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	689a      	ldr	r2, [r3, #8]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	695b      	ldr	r3, [r3, #20]
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	69db      	ldr	r3, [r3, #28]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	4bb1      	ldr	r3, [pc, #708]	; (800aa80 <UART_SetConfig+0x2f4>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	6812      	ldr	r2, [r2, #0]
 800a7c2:	6939      	ldr	r1, [r7, #16]
 800a7c4:	430b      	orrs	r3, r1
 800a7c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a1b      	ldr	r3, [r3, #32]
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	430a      	orrs	r2, r1
 800a800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a9f      	ldr	r2, [pc, #636]	; (800aa84 <UART_SetConfig+0x2f8>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d121      	bne.n	800a850 <UART_SetConfig+0xc4>
 800a80c:	4b9e      	ldr	r3, [pc, #632]	; (800aa88 <UART_SetConfig+0x2fc>)
 800a80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a812:	f003 0303 	and.w	r3, r3, #3
 800a816:	2b03      	cmp	r3, #3
 800a818:	d816      	bhi.n	800a848 <UART_SetConfig+0xbc>
 800a81a:	a201      	add	r2, pc, #4	; (adr r2, 800a820 <UART_SetConfig+0x94>)
 800a81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a820:	0800a831 	.word	0x0800a831
 800a824:	0800a83d 	.word	0x0800a83d
 800a828:	0800a837 	.word	0x0800a837
 800a82c:	0800a843 	.word	0x0800a843
 800a830:	2301      	movs	r3, #1
 800a832:	77fb      	strb	r3, [r7, #31]
 800a834:	e151      	b.n	800aada <UART_SetConfig+0x34e>
 800a836:	2302      	movs	r3, #2
 800a838:	77fb      	strb	r3, [r7, #31]
 800a83a:	e14e      	b.n	800aada <UART_SetConfig+0x34e>
 800a83c:	2304      	movs	r3, #4
 800a83e:	77fb      	strb	r3, [r7, #31]
 800a840:	e14b      	b.n	800aada <UART_SetConfig+0x34e>
 800a842:	2308      	movs	r3, #8
 800a844:	77fb      	strb	r3, [r7, #31]
 800a846:	e148      	b.n	800aada <UART_SetConfig+0x34e>
 800a848:	2310      	movs	r3, #16
 800a84a:	77fb      	strb	r3, [r7, #31]
 800a84c:	bf00      	nop
 800a84e:	e144      	b.n	800aada <UART_SetConfig+0x34e>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a8d      	ldr	r2, [pc, #564]	; (800aa8c <UART_SetConfig+0x300>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d134      	bne.n	800a8c4 <UART_SetConfig+0x138>
 800a85a:	4b8b      	ldr	r3, [pc, #556]	; (800aa88 <UART_SetConfig+0x2fc>)
 800a85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a860:	f003 030c 	and.w	r3, r3, #12
 800a864:	2b0c      	cmp	r3, #12
 800a866:	d829      	bhi.n	800a8bc <UART_SetConfig+0x130>
 800a868:	a201      	add	r2, pc, #4	; (adr r2, 800a870 <UART_SetConfig+0xe4>)
 800a86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86e:	bf00      	nop
 800a870:	0800a8a5 	.word	0x0800a8a5
 800a874:	0800a8bd 	.word	0x0800a8bd
 800a878:	0800a8bd 	.word	0x0800a8bd
 800a87c:	0800a8bd 	.word	0x0800a8bd
 800a880:	0800a8b1 	.word	0x0800a8b1
 800a884:	0800a8bd 	.word	0x0800a8bd
 800a888:	0800a8bd 	.word	0x0800a8bd
 800a88c:	0800a8bd 	.word	0x0800a8bd
 800a890:	0800a8ab 	.word	0x0800a8ab
 800a894:	0800a8bd 	.word	0x0800a8bd
 800a898:	0800a8bd 	.word	0x0800a8bd
 800a89c:	0800a8bd 	.word	0x0800a8bd
 800a8a0:	0800a8b7 	.word	0x0800a8b7
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	77fb      	strb	r3, [r7, #31]
 800a8a8:	e117      	b.n	800aada <UART_SetConfig+0x34e>
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	77fb      	strb	r3, [r7, #31]
 800a8ae:	e114      	b.n	800aada <UART_SetConfig+0x34e>
 800a8b0:	2304      	movs	r3, #4
 800a8b2:	77fb      	strb	r3, [r7, #31]
 800a8b4:	e111      	b.n	800aada <UART_SetConfig+0x34e>
 800a8b6:	2308      	movs	r3, #8
 800a8b8:	77fb      	strb	r3, [r7, #31]
 800a8ba:	e10e      	b.n	800aada <UART_SetConfig+0x34e>
 800a8bc:	2310      	movs	r3, #16
 800a8be:	77fb      	strb	r3, [r7, #31]
 800a8c0:	bf00      	nop
 800a8c2:	e10a      	b.n	800aada <UART_SetConfig+0x34e>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a71      	ldr	r2, [pc, #452]	; (800aa90 <UART_SetConfig+0x304>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d120      	bne.n	800a910 <UART_SetConfig+0x184>
 800a8ce:	4b6e      	ldr	r3, [pc, #440]	; (800aa88 <UART_SetConfig+0x2fc>)
 800a8d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a8d8:	2b10      	cmp	r3, #16
 800a8da:	d00f      	beq.n	800a8fc <UART_SetConfig+0x170>
 800a8dc:	2b10      	cmp	r3, #16
 800a8de:	d802      	bhi.n	800a8e6 <UART_SetConfig+0x15a>
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d005      	beq.n	800a8f0 <UART_SetConfig+0x164>
 800a8e4:	e010      	b.n	800a908 <UART_SetConfig+0x17c>
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	d005      	beq.n	800a8f6 <UART_SetConfig+0x16a>
 800a8ea:	2b30      	cmp	r3, #48	; 0x30
 800a8ec:	d009      	beq.n	800a902 <UART_SetConfig+0x176>
 800a8ee:	e00b      	b.n	800a908 <UART_SetConfig+0x17c>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	77fb      	strb	r3, [r7, #31]
 800a8f4:	e0f1      	b.n	800aada <UART_SetConfig+0x34e>
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	77fb      	strb	r3, [r7, #31]
 800a8fa:	e0ee      	b.n	800aada <UART_SetConfig+0x34e>
 800a8fc:	2304      	movs	r3, #4
 800a8fe:	77fb      	strb	r3, [r7, #31]
 800a900:	e0eb      	b.n	800aada <UART_SetConfig+0x34e>
 800a902:	2308      	movs	r3, #8
 800a904:	77fb      	strb	r3, [r7, #31]
 800a906:	e0e8      	b.n	800aada <UART_SetConfig+0x34e>
 800a908:	2310      	movs	r3, #16
 800a90a:	77fb      	strb	r3, [r7, #31]
 800a90c:	bf00      	nop
 800a90e:	e0e4      	b.n	800aada <UART_SetConfig+0x34e>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a5f      	ldr	r2, [pc, #380]	; (800aa94 <UART_SetConfig+0x308>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d120      	bne.n	800a95c <UART_SetConfig+0x1d0>
 800a91a:	4b5b      	ldr	r3, [pc, #364]	; (800aa88 <UART_SetConfig+0x2fc>)
 800a91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a920:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a924:	2b40      	cmp	r3, #64	; 0x40
 800a926:	d00f      	beq.n	800a948 <UART_SetConfig+0x1bc>
 800a928:	2b40      	cmp	r3, #64	; 0x40
 800a92a:	d802      	bhi.n	800a932 <UART_SetConfig+0x1a6>
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d005      	beq.n	800a93c <UART_SetConfig+0x1b0>
 800a930:	e010      	b.n	800a954 <UART_SetConfig+0x1c8>
 800a932:	2b80      	cmp	r3, #128	; 0x80
 800a934:	d005      	beq.n	800a942 <UART_SetConfig+0x1b6>
 800a936:	2bc0      	cmp	r3, #192	; 0xc0
 800a938:	d009      	beq.n	800a94e <UART_SetConfig+0x1c2>
 800a93a:	e00b      	b.n	800a954 <UART_SetConfig+0x1c8>
 800a93c:	2300      	movs	r3, #0
 800a93e:	77fb      	strb	r3, [r7, #31]
 800a940:	e0cb      	b.n	800aada <UART_SetConfig+0x34e>
 800a942:	2302      	movs	r3, #2
 800a944:	77fb      	strb	r3, [r7, #31]
 800a946:	e0c8      	b.n	800aada <UART_SetConfig+0x34e>
 800a948:	2304      	movs	r3, #4
 800a94a:	77fb      	strb	r3, [r7, #31]
 800a94c:	e0c5      	b.n	800aada <UART_SetConfig+0x34e>
 800a94e:	2308      	movs	r3, #8
 800a950:	77fb      	strb	r3, [r7, #31]
 800a952:	e0c2      	b.n	800aada <UART_SetConfig+0x34e>
 800a954:	2310      	movs	r3, #16
 800a956:	77fb      	strb	r3, [r7, #31]
 800a958:	bf00      	nop
 800a95a:	e0be      	b.n	800aada <UART_SetConfig+0x34e>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a4d      	ldr	r2, [pc, #308]	; (800aa98 <UART_SetConfig+0x30c>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d124      	bne.n	800a9b0 <UART_SetConfig+0x224>
 800a966:	4b48      	ldr	r3, [pc, #288]	; (800aa88 <UART_SetConfig+0x2fc>)
 800a968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a96c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a974:	d012      	beq.n	800a99c <UART_SetConfig+0x210>
 800a976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a97a:	d802      	bhi.n	800a982 <UART_SetConfig+0x1f6>
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d007      	beq.n	800a990 <UART_SetConfig+0x204>
 800a980:	e012      	b.n	800a9a8 <UART_SetConfig+0x21c>
 800a982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a986:	d006      	beq.n	800a996 <UART_SetConfig+0x20a>
 800a988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a98c:	d009      	beq.n	800a9a2 <UART_SetConfig+0x216>
 800a98e:	e00b      	b.n	800a9a8 <UART_SetConfig+0x21c>
 800a990:	2300      	movs	r3, #0
 800a992:	77fb      	strb	r3, [r7, #31]
 800a994:	e0a1      	b.n	800aada <UART_SetConfig+0x34e>
 800a996:	2302      	movs	r3, #2
 800a998:	77fb      	strb	r3, [r7, #31]
 800a99a:	e09e      	b.n	800aada <UART_SetConfig+0x34e>
 800a99c:	2304      	movs	r3, #4
 800a99e:	77fb      	strb	r3, [r7, #31]
 800a9a0:	e09b      	b.n	800aada <UART_SetConfig+0x34e>
 800a9a2:	2308      	movs	r3, #8
 800a9a4:	77fb      	strb	r3, [r7, #31]
 800a9a6:	e098      	b.n	800aada <UART_SetConfig+0x34e>
 800a9a8:	2310      	movs	r3, #16
 800a9aa:	77fb      	strb	r3, [r7, #31]
 800a9ac:	bf00      	nop
 800a9ae:	e094      	b.n	800aada <UART_SetConfig+0x34e>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a39      	ldr	r2, [pc, #228]	; (800aa9c <UART_SetConfig+0x310>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d124      	bne.n	800aa04 <UART_SetConfig+0x278>
 800a9ba:	4b33      	ldr	r3, [pc, #204]	; (800aa88 <UART_SetConfig+0x2fc>)
 800a9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a9c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9c8:	d012      	beq.n	800a9f0 <UART_SetConfig+0x264>
 800a9ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9ce:	d802      	bhi.n	800a9d6 <UART_SetConfig+0x24a>
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d007      	beq.n	800a9e4 <UART_SetConfig+0x258>
 800a9d4:	e012      	b.n	800a9fc <UART_SetConfig+0x270>
 800a9d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9da:	d006      	beq.n	800a9ea <UART_SetConfig+0x25e>
 800a9dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9e0:	d009      	beq.n	800a9f6 <UART_SetConfig+0x26a>
 800a9e2:	e00b      	b.n	800a9fc <UART_SetConfig+0x270>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	77fb      	strb	r3, [r7, #31]
 800a9e8:	e077      	b.n	800aada <UART_SetConfig+0x34e>
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	77fb      	strb	r3, [r7, #31]
 800a9ee:	e074      	b.n	800aada <UART_SetConfig+0x34e>
 800a9f0:	2304      	movs	r3, #4
 800a9f2:	77fb      	strb	r3, [r7, #31]
 800a9f4:	e071      	b.n	800aada <UART_SetConfig+0x34e>
 800a9f6:	2308      	movs	r3, #8
 800a9f8:	77fb      	strb	r3, [r7, #31]
 800a9fa:	e06e      	b.n	800aada <UART_SetConfig+0x34e>
 800a9fc:	2310      	movs	r3, #16
 800a9fe:	77fb      	strb	r3, [r7, #31]
 800aa00:	bf00      	nop
 800aa02:	e06a      	b.n	800aada <UART_SetConfig+0x34e>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a25      	ldr	r2, [pc, #148]	; (800aaa0 <UART_SetConfig+0x314>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d124      	bne.n	800aa58 <UART_SetConfig+0x2cc>
 800aa0e:	4b1e      	ldr	r3, [pc, #120]	; (800aa88 <UART_SetConfig+0x2fc>)
 800aa10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa14:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aa18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa1c:	d012      	beq.n	800aa44 <UART_SetConfig+0x2b8>
 800aa1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa22:	d802      	bhi.n	800aa2a <UART_SetConfig+0x29e>
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d007      	beq.n	800aa38 <UART_SetConfig+0x2ac>
 800aa28:	e012      	b.n	800aa50 <UART_SetConfig+0x2c4>
 800aa2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa2e:	d006      	beq.n	800aa3e <UART_SetConfig+0x2b2>
 800aa30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa34:	d009      	beq.n	800aa4a <UART_SetConfig+0x2be>
 800aa36:	e00b      	b.n	800aa50 <UART_SetConfig+0x2c4>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	77fb      	strb	r3, [r7, #31]
 800aa3c:	e04d      	b.n	800aada <UART_SetConfig+0x34e>
 800aa3e:	2302      	movs	r3, #2
 800aa40:	77fb      	strb	r3, [r7, #31]
 800aa42:	e04a      	b.n	800aada <UART_SetConfig+0x34e>
 800aa44:	2304      	movs	r3, #4
 800aa46:	77fb      	strb	r3, [r7, #31]
 800aa48:	e047      	b.n	800aada <UART_SetConfig+0x34e>
 800aa4a:	2308      	movs	r3, #8
 800aa4c:	77fb      	strb	r3, [r7, #31]
 800aa4e:	e044      	b.n	800aada <UART_SetConfig+0x34e>
 800aa50:	2310      	movs	r3, #16
 800aa52:	77fb      	strb	r3, [r7, #31]
 800aa54:	bf00      	nop
 800aa56:	e040      	b.n	800aada <UART_SetConfig+0x34e>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a11      	ldr	r2, [pc, #68]	; (800aaa4 <UART_SetConfig+0x318>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d139      	bne.n	800aad6 <UART_SetConfig+0x34a>
 800aa62:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <UART_SetConfig+0x2fc>)
 800aa64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa70:	d027      	beq.n	800aac2 <UART_SetConfig+0x336>
 800aa72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa76:	d817      	bhi.n	800aaa8 <UART_SetConfig+0x31c>
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01c      	beq.n	800aab6 <UART_SetConfig+0x32a>
 800aa7c:	e027      	b.n	800aace <UART_SetConfig+0x342>
 800aa7e:	bf00      	nop
 800aa80:	efff69f3 	.word	0xefff69f3
 800aa84:	40011000 	.word	0x40011000
 800aa88:	40023800 	.word	0x40023800
 800aa8c:	40004400 	.word	0x40004400
 800aa90:	40004800 	.word	0x40004800
 800aa94:	40004c00 	.word	0x40004c00
 800aa98:	40005000 	.word	0x40005000
 800aa9c:	40011400 	.word	0x40011400
 800aaa0:	40007800 	.word	0x40007800
 800aaa4:	40007c00 	.word	0x40007c00
 800aaa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaac:	d006      	beq.n	800aabc <UART_SetConfig+0x330>
 800aaae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aab2:	d009      	beq.n	800aac8 <UART_SetConfig+0x33c>
 800aab4:	e00b      	b.n	800aace <UART_SetConfig+0x342>
 800aab6:	2300      	movs	r3, #0
 800aab8:	77fb      	strb	r3, [r7, #31]
 800aaba:	e00e      	b.n	800aada <UART_SetConfig+0x34e>
 800aabc:	2302      	movs	r3, #2
 800aabe:	77fb      	strb	r3, [r7, #31]
 800aac0:	e00b      	b.n	800aada <UART_SetConfig+0x34e>
 800aac2:	2304      	movs	r3, #4
 800aac4:	77fb      	strb	r3, [r7, #31]
 800aac6:	e008      	b.n	800aada <UART_SetConfig+0x34e>
 800aac8:	2308      	movs	r3, #8
 800aaca:	77fb      	strb	r3, [r7, #31]
 800aacc:	e005      	b.n	800aada <UART_SetConfig+0x34e>
 800aace:	2310      	movs	r3, #16
 800aad0:	77fb      	strb	r3, [r7, #31]
 800aad2:	bf00      	nop
 800aad4:	e001      	b.n	800aada <UART_SetConfig+0x34e>
 800aad6:	2310      	movs	r3, #16
 800aad8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aae2:	d17f      	bne.n	800abe4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800aae4:	7ffb      	ldrb	r3, [r7, #31]
 800aae6:	2b08      	cmp	r3, #8
 800aae8:	d85c      	bhi.n	800aba4 <UART_SetConfig+0x418>
 800aaea:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <UART_SetConfig+0x364>)
 800aaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf0:	0800ab15 	.word	0x0800ab15
 800aaf4:	0800ab35 	.word	0x0800ab35
 800aaf8:	0800ab55 	.word	0x0800ab55
 800aafc:	0800aba5 	.word	0x0800aba5
 800ab00:	0800ab6d 	.word	0x0800ab6d
 800ab04:	0800aba5 	.word	0x0800aba5
 800ab08:	0800aba5 	.word	0x0800aba5
 800ab0c:	0800aba5 	.word	0x0800aba5
 800ab10:	0800ab8d 	.word	0x0800ab8d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab14:	f7fc f8d0 	bl	8006cb8 <HAL_RCC_GetPCLK1Freq>
 800ab18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	005a      	lsls	r2, r3, #1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	085b      	lsrs	r3, r3, #1
 800ab24:	441a      	add	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	61bb      	str	r3, [r7, #24]
        break;
 800ab32:	e03a      	b.n	800abaa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab34:	f7fc f8d4 	bl	8006ce0 <HAL_RCC_GetPCLK2Freq>
 800ab38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	005a      	lsls	r2, r3, #1
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	085b      	lsrs	r3, r3, #1
 800ab44:	441a      	add	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	61bb      	str	r3, [r7, #24]
        break;
 800ab52:	e02a      	b.n	800abaa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	085a      	lsrs	r2, r3, #1
 800ab5a:	4b5f      	ldr	r3, [pc, #380]	; (800acd8 <UART_SetConfig+0x54c>)
 800ab5c:	4413      	add	r3, r2
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	6852      	ldr	r2, [r2, #4]
 800ab62:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	61bb      	str	r3, [r7, #24]
        break;
 800ab6a:	e01e      	b.n	800abaa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab6c:	f7fb ffe6 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 800ab70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	005a      	lsls	r2, r3, #1
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	085b      	lsrs	r3, r3, #1
 800ab7c:	441a      	add	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	61bb      	str	r3, [r7, #24]
        break;
 800ab8a:	e00e      	b.n	800abaa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	085b      	lsrs	r3, r3, #1
 800ab92:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	61bb      	str	r3, [r7, #24]
        break;
 800aba2:	e002      	b.n	800abaa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	75fb      	strb	r3, [r7, #23]
        break;
 800aba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	2b0f      	cmp	r3, #15
 800abae:	d916      	bls.n	800abde <UART_SetConfig+0x452>
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abb6:	d212      	bcs.n	800abde <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	f023 030f 	bic.w	r3, r3, #15
 800abc0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	085b      	lsrs	r3, r3, #1
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	f003 0307 	and.w	r3, r3, #7
 800abcc:	b29a      	uxth	r2, r3
 800abce:	897b      	ldrh	r3, [r7, #10]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	897a      	ldrh	r2, [r7, #10]
 800abda:	60da      	str	r2, [r3, #12]
 800abdc:	e070      	b.n	800acc0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	75fb      	strb	r3, [r7, #23]
 800abe2:	e06d      	b.n	800acc0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800abe4:	7ffb      	ldrb	r3, [r7, #31]
 800abe6:	2b08      	cmp	r3, #8
 800abe8:	d859      	bhi.n	800ac9e <UART_SetConfig+0x512>
 800abea:	a201      	add	r2, pc, #4	; (adr r2, 800abf0 <UART_SetConfig+0x464>)
 800abec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf0:	0800ac15 	.word	0x0800ac15
 800abf4:	0800ac33 	.word	0x0800ac33
 800abf8:	0800ac51 	.word	0x0800ac51
 800abfc:	0800ac9f 	.word	0x0800ac9f
 800ac00:	0800ac69 	.word	0x0800ac69
 800ac04:	0800ac9f 	.word	0x0800ac9f
 800ac08:	0800ac9f 	.word	0x0800ac9f
 800ac0c:	0800ac9f 	.word	0x0800ac9f
 800ac10:	0800ac87 	.word	0x0800ac87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac14:	f7fc f850 	bl	8006cb8 <HAL_RCC_GetPCLK1Freq>
 800ac18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	085a      	lsrs	r2, r3, #1
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	441a      	add	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	61bb      	str	r3, [r7, #24]
        break;
 800ac30:	e038      	b.n	800aca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac32:	f7fc f855 	bl	8006ce0 <HAL_RCC_GetPCLK2Freq>
 800ac36:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	085a      	lsrs	r2, r3, #1
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	441a      	add	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	61bb      	str	r3, [r7, #24]
        break;
 800ac4e:	e029      	b.n	800aca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	085a      	lsrs	r2, r3, #1
 800ac56:	4b21      	ldr	r3, [pc, #132]	; (800acdc <UART_SetConfig+0x550>)
 800ac58:	4413      	add	r3, r2
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	6852      	ldr	r2, [r2, #4]
 800ac5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	61bb      	str	r3, [r7, #24]
        break;
 800ac66:	e01d      	b.n	800aca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac68:	f7fb ff68 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 800ac6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	085a      	lsrs	r2, r3, #1
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	441a      	add	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	61bb      	str	r3, [r7, #24]
        break;
 800ac84:	e00e      	b.n	800aca4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	085b      	lsrs	r3, r3, #1
 800ac8c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	61bb      	str	r3, [r7, #24]
        break;
 800ac9c:	e002      	b.n	800aca4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	75fb      	strb	r3, [r7, #23]
        break;
 800aca2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	2b0f      	cmp	r3, #15
 800aca8:	d908      	bls.n	800acbc <UART_SetConfig+0x530>
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb0:	d204      	bcs.n	800acbc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	69ba      	ldr	r2, [r7, #24]
 800acb8:	60da      	str	r2, [r3, #12]
 800acba:	e001      	b.n	800acc0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800accc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3720      	adds	r7, #32
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	01e84800 	.word	0x01e84800
 800acdc:	00f42400 	.word	0x00f42400

0800ace0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00a      	beq.n	800ad0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	430a      	orrs	r2, r1
 800ad08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00a      	beq.n	800ad2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	430a      	orrs	r2, r1
 800ad2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	f003 0304 	and.w	r3, r3, #4
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00a      	beq.n	800ad4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad52:	f003 0308 	and.w	r3, r3, #8
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad74:	f003 0310 	and.w	r3, r3, #16
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00a      	beq.n	800ad92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	f003 0320 	and.w	r3, r3, #32
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00a      	beq.n	800adb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d01a      	beq.n	800adf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	430a      	orrs	r2, r1
 800add4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adde:	d10a      	bne.n	800adf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	430a      	orrs	r2, r1
 800ae16:	605a      	str	r2, [r3, #4]
  }
}
 800ae18:	bf00      	nop
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af02      	add	r7, sp, #8
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae32:	f7f8 fd1d 	bl	8003870 <HAL_GetTick>
 800ae36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0308 	and.w	r3, r3, #8
 800ae42:	2b08      	cmp	r3, #8
 800ae44:	d10e      	bne.n	800ae64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f814 	bl	800ae82 <UART_WaitOnFlagUntilTimeout>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae60:	2303      	movs	r3, #3
 800ae62:	e00a      	b.n	800ae7a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2220      	movs	r2, #32
 800ae68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	60f8      	str	r0, [r7, #12]
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	603b      	str	r3, [r7, #0]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae92:	e05d      	b.n	800af50 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9a:	d059      	beq.n	800af50 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae9c:	f7f8 fce8 	bl	8003870 <HAL_GetTick>
 800aea0:	4602      	mov	r2, r0
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d302      	bcc.n	800aeb2 <UART_WaitOnFlagUntilTimeout+0x30>
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d11b      	bne.n	800aeea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aec0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	689a      	ldr	r2, [r3, #8]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f022 0201 	bic.w	r2, r2, #1
 800aed0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2220      	movs	r2, #32
 800aed6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2220      	movs	r2, #32
 800aedc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e042      	b.n	800af70 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d02b      	beq.n	800af50 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	69db      	ldr	r3, [r3, #28]
 800aefe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af06:	d123      	bne.n	800af50 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af10:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	689a      	ldr	r2, [r3, #8]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f022 0201 	bic.w	r2, r2, #1
 800af30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2220      	movs	r2, #32
 800af36:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2220      	movs	r2, #32
 800af3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2220      	movs	r2, #32
 800af42:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e00f      	b.n	800af70 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	69da      	ldr	r2, [r3, #28]
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	4013      	ands	r3, r2
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	bf0c      	ite	eq
 800af60:	2301      	moveq	r3, #1
 800af62:	2300      	movne	r3, #0
 800af64:	b2db      	uxtb	r3, r3
 800af66:	461a      	mov	r2, r3
 800af68:	79fb      	ldrb	r3, [r7, #7]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d092      	beq.n	800ae94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d027      	beq.n	800afe2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	4b2f      	ldr	r3, [pc, #188]	; (800b058 <FMC_SDRAM_Init+0xe0>)
 800af9c:	4013      	ands	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afa8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800afae:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800afb4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800afba:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800afc0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800afc6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800afcc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800afd2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	e032      	b.n	800b048 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afee:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800aff8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800affe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	4313      	orrs	r3, r2
 800b004:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	4b12      	ldr	r3, [pc, #72]	; (800b058 <FMC_SDRAM_Init+0xe0>)
 800b010:	4013      	ands	r3, r2
 800b012:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b01c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b022:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b028:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b02e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b034:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	4313      	orrs	r3, r2
 800b03a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	ffff8000 	.word	0xffff8000

0800b05c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d02e      	beq.n	800b0d4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b082:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	3b01      	subs	r3, #1
 800b090:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b092:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	3b01      	subs	r3, #1
 800b09a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b09c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b0a6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b0b0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b0ba:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	697a      	ldr	r2, [r7, #20]
 800b0d0:	609a      	str	r2, [r3, #8]
 800b0d2:	e039      	b.n	800b148 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4b1e      	ldr	r3, [pc, #120]	; (800b158 <FMC_SDRAM_Timing_Init+0xfc>)
 800b0de:	4013      	ands	r3, r2
 800b0e0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	697a      	ldr	r2, [r7, #20]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b106:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	3b01      	subs	r3, #1
 800b114:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b116:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b120:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	3b01      	subs	r3, #1
 800b128:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b12a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	3b01      	subs	r3, #1
 800b132:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b134:	4313      	orrs	r3, r2
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	4313      	orrs	r3, r2
 800b13a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	371c      	adds	r7, #28
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	ff0f0fff 	.word	0xff0f0fff

0800b15c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b087      	sub	sp, #28
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b174:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b17e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b186:	4313      	orrs	r3, r2
 800b188:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	371c      	adds	r7, #28
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	695a      	ldr	r2, [r3, #20]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	005b      	lsls	r3, r3, #1
 800b1b0:	431a      	orrs	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1c4:	b084      	sub	sp, #16
 800b1c6:	b480      	push	{r7}
 800b1c8:	b085      	sub	sp, #20
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	f107 001c 	add.w	r0, r7, #28
 800b1d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b1da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b1de:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b1e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b1e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b1ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b1ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	4b07      	ldr	r3, [pc, #28]	; (800b218 <SDMMC_Init+0x54>)
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	431a      	orrs	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	b004      	add	sp, #16
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	ffff8100 	.word	0xffff8100

0800b21c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2203      	movs	r2, #3
 800b242:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b244:	2002      	movs	r0, #2
 800b246:	f7f8 fb1f 	bl	8003888 <HAL_Delay>
  
  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0303 	and.w	r3, r3, #3
}
 800b264:	4618      	mov	r0, r3
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b28e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b294:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b29a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68da      	ldr	r2, [r3, #12]
 800b2a6:	4b06      	ldr	r3, [pc, #24]	; (800b2c0 <SDMMC_SendCommand+0x50>)
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	431a      	orrs	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	fffff000 	.word	0xfffff000

0800b2c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	b2db      	uxtb	r3, r3
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b085      	sub	sp, #20
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3314      	adds	r3, #20
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
}  
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b32a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b330:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b336:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b342:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	431a      	orrs	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b34e:	2300      	movs	r3, #0

}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b088      	sub	sp, #32
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b36a:	2310      	movs	r3, #16
 800b36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b36e:	2340      	movs	r3, #64	; 0x40
 800b370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b372:	2300      	movs	r3, #0
 800b374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b37a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b37c:	f107 0308 	add.w	r3, r7, #8
 800b380:	4619      	mov	r1, r3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7ff ff74 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b388:	f241 3288 	movw	r2, #5000	; 0x1388
 800b38c:	2110      	movs	r1, #16
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fa42 	bl	800b818 <SDMMC_GetCmdResp1>
 800b394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b396:	69fb      	ldr	r3, [r7, #28]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3720      	adds	r7, #32
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b088      	sub	sp, #32
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b3ae:	2311      	movs	r3, #17
 800b3b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3b2:	2340      	movs	r3, #64	; 0x40
 800b3b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3c0:	f107 0308 	add.w	r3, r7, #8
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7ff ff52 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d0:	2111      	movs	r1, #17
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fa20 	bl	800b818 <SDMMC_GetCmdResp1>
 800b3d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3da:	69fb      	ldr	r3, [r7, #28]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3720      	adds	r7, #32
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b088      	sub	sp, #32
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b3f2:	2312      	movs	r3, #18
 800b3f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3f6:	2340      	movs	r3, #64	; 0x40
 800b3f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b404:	f107 0308 	add.w	r3, r7, #8
 800b408:	4619      	mov	r1, r3
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7ff ff30 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b410:	f241 3288 	movw	r2, #5000	; 0x1388
 800b414:	2112      	movs	r1, #18
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 f9fe 	bl	800b818 <SDMMC_GetCmdResp1>
 800b41c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b41e:	69fb      	ldr	r3, [r7, #28]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3720      	adds	r7, #32
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b436:	2318      	movs	r3, #24
 800b438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b43a:	2340      	movs	r3, #64	; 0x40
 800b43c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b43e:	2300      	movs	r3, #0
 800b440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b446:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b448:	f107 0308 	add.w	r3, r7, #8
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7ff ff0e 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b454:	f241 3288 	movw	r2, #5000	; 0x1388
 800b458:	2118      	movs	r1, #24
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f9dc 	bl	800b818 <SDMMC_GetCmdResp1>
 800b460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b462:	69fb      	ldr	r3, [r7, #28]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3720      	adds	r7, #32
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b47a:	2319      	movs	r3, #25
 800b47c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b47e:	2340      	movs	r3, #64	; 0x40
 800b480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b482:	2300      	movs	r3, #0
 800b484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b48a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b48c:	f107 0308 	add.w	r3, r7, #8
 800b490:	4619      	mov	r1, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff feec 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b498:	f241 3288 	movw	r2, #5000	; 0x1388
 800b49c:	2119      	movs	r1, #25
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f9ba 	bl	800b818 <SDMMC_GetCmdResp1>
 800b4a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4a6:	69fb      	ldr	r3, [r7, #28]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3720      	adds	r7, #32
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b088      	sub	sp, #32
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b4bc:	230c      	movs	r3, #12
 800b4be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4c0:	2340      	movs	r3, #64	; 0x40
 800b4c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ce:	f107 0308 	add.w	r3, r7, #8
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7ff fecb 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b4da:	4a05      	ldr	r2, [pc, #20]	; (800b4f0 <SDMMC_CmdStopTransfer+0x40>)
 800b4dc:	210c      	movs	r1, #12
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f99a 	bl	800b818 <SDMMC_GetCmdResp1>
 800b4e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4e6:	69fb      	ldr	r3, [r7, #28]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3720      	adds	r7, #32
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	05f5e100 	.word	0x05f5e100

0800b4f4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08a      	sub	sp, #40	; 0x28
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b504:	2307      	movs	r3, #7
 800b506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b508:	2340      	movs	r3, #64	; 0x40
 800b50a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b50c:	2300      	movs	r3, #0
 800b50e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b514:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b516:	f107 0310 	add.w	r3, r7, #16
 800b51a:	4619      	mov	r1, r3
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f7ff fea7 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b522:	f241 3288 	movw	r2, #5000	; 0x1388
 800b526:	2107      	movs	r1, #7
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 f975 	bl	800b818 <SDMMC_GetCmdResp1>
 800b52e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b532:	4618      	mov	r0, r3
 800b534:	3728      	adds	r7, #40	; 0x28
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b088      	sub	sp, #32
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b542:	2300      	movs	r3, #0
 800b544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b546:	2300      	movs	r3, #0
 800b548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b54a:	2300      	movs	r3, #0
 800b54c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b54e:	2300      	movs	r3, #0
 800b550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b558:	f107 0308 	add.w	r3, r7, #8
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f7ff fe86 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f92f 	bl	800b7c8 <SDMMC_GetCmdError>
 800b56a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b56c:	69fb      	ldr	r3, [r7, #28]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3720      	adds	r7, #32
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b088      	sub	sp, #32
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b57e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b584:	2308      	movs	r3, #8
 800b586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b588:	2340      	movs	r3, #64	; 0x40
 800b58a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b58c:	2300      	movs	r3, #0
 800b58e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b594:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b596:	f107 0308 	add.w	r3, r7, #8
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7ff fe67 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fb18 	bl	800bbd8 <SDMMC_GetCmdResp7>
 800b5a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5aa:	69fb      	ldr	r3, [r7, #28]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3720      	adds	r7, #32
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b088      	sub	sp, #32
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b5c2:	2337      	movs	r3, #55	; 0x37
 800b5c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5c6:	2340      	movs	r3, #64	; 0x40
 800b5c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5d4:	f107 0308 	add.w	r3, r7, #8
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff fe48 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b5e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e4:	2137      	movs	r1, #55	; 0x37
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f916 	bl	800b818 <SDMMC_GetCmdResp1>
 800b5ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ee:	69fb      	ldr	r3, [r7, #28]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3720      	adds	r7, #32
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b088      	sub	sp, #32
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	4b0d      	ldr	r3, [pc, #52]	; (800b63c <SDMMC_CmdAppOperCommand+0x44>)
 800b606:	4313      	orrs	r3, r2
 800b608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b60a:	2329      	movs	r3, #41	; 0x29
 800b60c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b60e:	2340      	movs	r3, #64	; 0x40
 800b610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b61a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b61c:	f107 0308 	add.w	r3, r7, #8
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fe24 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fa27 	bl	800ba7c <SDMMC_GetCmdResp3>
 800b62e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b630:	69fb      	ldr	r3, [r7, #28]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3720      	adds	r7, #32
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	80100000 	.word	0x80100000

0800b640 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b64e:	2306      	movs	r3, #6
 800b650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b652:	2340      	movs	r3, #64	; 0x40
 800b654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b65a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b65e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b660:	f107 0308 	add.w	r3, r7, #8
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff fe02 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b66c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b670:	2106      	movs	r1, #6
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f8d0 	bl	800b818 <SDMMC_GetCmdResp1>
 800b678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b67a:	69fb      	ldr	r3, [r7, #28]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3720      	adds	r7, #32
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b088      	sub	sp, #32
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b690:	2333      	movs	r3, #51	; 0x33
 800b692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b694:	2340      	movs	r3, #64	; 0x40
 800b696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b698:	2300      	movs	r3, #0
 800b69a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b69c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6a2:	f107 0308 	add.w	r3, r7, #8
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff fde1 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b6ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b2:	2133      	movs	r1, #51	; 0x33
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f8af 	bl	800b818 <SDMMC_GetCmdResp1>
 800b6ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6bc:	69fb      	ldr	r3, [r7, #28]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3720      	adds	r7, #32
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b088      	sub	sp, #32
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6d6:	23c0      	movs	r3, #192	; 0xc0
 800b6d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6e4:	f107 0308 	add.w	r3, r7, #8
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7ff fdc0 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f97d 	bl	800b9f0 <SDMMC_GetCmdResp2>
 800b6f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f8:	69fb      	ldr	r3, [r7, #28]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3720      	adds	r7, #32
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b088      	sub	sp, #32
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b710:	2309      	movs	r3, #9
 800b712:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b714:	23c0      	movs	r3, #192	; 0xc0
 800b716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b718:	2300      	movs	r3, #0
 800b71a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b71c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b720:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b722:	f107 0308 	add.w	r3, r7, #8
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7ff fda1 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f95e 	bl	800b9f0 <SDMMC_GetCmdResp2>
 800b734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b736:	69fb      	ldr	r3, [r7, #28]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3720      	adds	r7, #32
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b088      	sub	sp, #32
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b74a:	2300      	movs	r3, #0
 800b74c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b74e:	2303      	movs	r3, #3
 800b750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b752:	2340      	movs	r3, #64	; 0x40
 800b754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b756:	2300      	movs	r3, #0
 800b758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b75a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b75e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b760:	f107 0308 	add.w	r3, r7, #8
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff fd82 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	2103      	movs	r1, #3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f9bd 	bl	800baf0 <SDMMC_GetCmdResp6>
 800b776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b778:	69fb      	ldr	r3, [r7, #28]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3720      	adds	r7, #32
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b088      	sub	sp, #32
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b790:	230d      	movs	r3, #13
 800b792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b794:	2340      	movs	r3, #64	; 0x40
 800b796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b798:	2300      	movs	r3, #0
 800b79a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b79c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7a2:	f107 0308 	add.w	r3, r7, #8
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7ff fd61 	bl	800b270 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b7ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b2:	210d      	movs	r1, #13
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f82f 	bl	800b818 <SDMMC_GetCmdResp1>
 800b7ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7bc:	69fb      	ldr	r3, [r7, #28]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3720      	adds	r7, #32
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
	...

0800b7c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b7c8:	b490      	push	{r4, r7}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7d0:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <SDMMC_GetCmdError+0x48>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a0f      	ldr	r2, [pc, #60]	; (800b814 <SDMMC_GetCmdError+0x4c>)
 800b7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7da:	0a5b      	lsrs	r3, r3, #9
 800b7dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7e4:	4623      	mov	r3, r4
 800b7e6:	1e5c      	subs	r4, r3, #1
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d102      	bne.n	800b7f2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7f0:	e009      	b.n	800b806 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d0f2      	beq.n	800b7e4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	22c5      	movs	r2, #197	; 0xc5
 800b802:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bc90      	pop	{r4, r7}
 800b80e:	4770      	bx	lr
 800b810:	20000018 	.word	0x20000018
 800b814:	10624dd3 	.word	0x10624dd3

0800b818 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b818:	b590      	push	{r4, r7, lr}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	460b      	mov	r3, r1
 800b822:	607a      	str	r2, [r7, #4]
 800b824:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b826:	4b6f      	ldr	r3, [pc, #444]	; (800b9e4 <SDMMC_GetCmdResp1+0x1cc>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a6f      	ldr	r2, [pc, #444]	; (800b9e8 <SDMMC_GetCmdResp1+0x1d0>)
 800b82c:	fba2 2303 	umull	r2, r3, r2, r3
 800b830:	0a5b      	lsrs	r3, r3, #9
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b838:	4623      	mov	r3, r4
 800b83a:	1e5c      	subs	r4, r3, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d102      	bne.n	800b846 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b844:	e0c9      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b852:	2b00      	cmp	r3, #0
 800b854:	d0f0      	beq.n	800b838 <SDMMC_GetCmdResp1+0x20>
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1eb      	bne.n	800b838 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b864:	f003 0304 	and.w	r3, r3, #4
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d004      	beq.n	800b876 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2204      	movs	r2, #4
 800b870:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b872:	2304      	movs	r3, #4
 800b874:	e0b1      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87a:	f003 0301 	and.w	r3, r3, #1
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d004      	beq.n	800b88c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2201      	movs	r2, #1
 800b886:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b888:	2301      	movs	r3, #1
 800b88a:	e0a6      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	22c5      	movs	r2, #197	; 0xc5
 800b890:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f7ff fd16 	bl	800b2c4 <SDMMC_GetCommandResponse>
 800b898:	4603      	mov	r3, r0
 800b89a:	461a      	mov	r2, r3
 800b89c:	7afb      	ldrb	r3, [r7, #11]
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d001      	beq.n	800b8a6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e099      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f7ff fd18 	bl	800b2de <SDMMC_GetResponse>
 800b8ae:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	4b4e      	ldr	r3, [pc, #312]	; (800b9ec <SDMMC_GetCmdResp1+0x1d4>)
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	e08d      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	da02      	bge.n	800b8ca <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b8c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8c8:	e087      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b8d4:	2340      	movs	r3, #64	; 0x40
 800b8d6:	e080      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b8e2:	2380      	movs	r3, #128	; 0x80
 800b8e4:	e079      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b8f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8f4:	e071      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b900:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b904:	e069      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b914:	e061      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b924:	e059      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b934:	e051      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b944:	e049      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b950:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b954:	e041      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b964:	e039      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b974:	e031      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b980:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b984:	e029      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b990:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b994:	e021      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b9a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b9a4:	e019      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b9b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b9b4:	e011      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b9c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9c4:	e009      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	f003 0308 	and.w	r3, r3, #8
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b9d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b9d4:	e001      	b.n	800b9da <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd90      	pop	{r4, r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20000018 	.word	0x20000018
 800b9e8:	10624dd3 	.word	0x10624dd3
 800b9ec:	fdffe008 	.word	0xfdffe008

0800b9f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b9f0:	b490      	push	{r4, r7}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9f8:	4b1e      	ldr	r3, [pc, #120]	; (800ba74 <SDMMC_GetCmdResp2+0x84>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a1e      	ldr	r2, [pc, #120]	; (800ba78 <SDMMC_GetCmdResp2+0x88>)
 800b9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800ba02:	0a5b      	lsrs	r3, r3, #9
 800ba04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba0c:	4623      	mov	r3, r4
 800ba0e:	1e5c      	subs	r4, r3, #1
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d102      	bne.n	800ba1a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba18:	e026      	b.n	800ba68 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d0f0      	beq.n	800ba0c <SDMMC_GetCmdResp2+0x1c>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1eb      	bne.n	800ba0c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba38:	f003 0304 	and.w	r3, r3, #4
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d004      	beq.n	800ba4a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2204      	movs	r2, #4
 800ba44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba46:	2304      	movs	r3, #4
 800ba48:	e00e      	b.n	800ba68 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4e:	f003 0301 	and.w	r3, r3, #1
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d004      	beq.n	800ba60 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e003      	b.n	800ba68 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	22c5      	movs	r2, #197	; 0xc5
 800ba64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bc90      	pop	{r4, r7}
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20000018 	.word	0x20000018
 800ba78:	10624dd3 	.word	0x10624dd3

0800ba7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ba7c:	b490      	push	{r4, r7}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba84:	4b18      	ldr	r3, [pc, #96]	; (800bae8 <SDMMC_GetCmdResp3+0x6c>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a18      	ldr	r2, [pc, #96]	; (800baec <SDMMC_GetCmdResp3+0x70>)
 800ba8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba8e:	0a5b      	lsrs	r3, r3, #9
 800ba90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba98:	4623      	mov	r3, r4
 800ba9a:	1e5c      	subs	r4, r3, #1
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d102      	bne.n	800baa6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800baa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800baa4:	e01b      	b.n	800bade <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baaa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0f0      	beq.n	800ba98 <SDMMC_GetCmdResp3+0x1c>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1eb      	bne.n	800ba98 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d004      	beq.n	800bad6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2204      	movs	r2, #4
 800bad0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bad2:	2304      	movs	r3, #4
 800bad4:	e003      	b.n	800bade <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	22c5      	movs	r2, #197	; 0xc5
 800bada:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bc90      	pop	{r4, r7}
 800bae6:	4770      	bx	lr
 800bae8:	20000018 	.word	0x20000018
 800baec:	10624dd3 	.word	0x10624dd3

0800baf0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800baf0:	b590      	push	{r4, r7, lr}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	460b      	mov	r3, r1
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bafe:	4b34      	ldr	r3, [pc, #208]	; (800bbd0 <SDMMC_GetCmdResp6+0xe0>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a34      	ldr	r2, [pc, #208]	; (800bbd4 <SDMMC_GetCmdResp6+0xe4>)
 800bb04:	fba2 2303 	umull	r2, r3, r2, r3
 800bb08:	0a5b      	lsrs	r3, r3, #9
 800bb0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb0e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bb12:	4623      	mov	r3, r4
 800bb14:	1e5c      	subs	r4, r3, #1
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d102      	bne.n	800bb20 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb1e:	e052      	b.n	800bbc6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb24:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d0f0      	beq.n	800bb12 <SDMMC_GetCmdResp6+0x22>
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1eb      	bne.n	800bb12 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb3e:	f003 0304 	and.w	r3, r3, #4
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d004      	beq.n	800bb50 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2204      	movs	r2, #4
 800bb4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb4c:	2304      	movs	r3, #4
 800bb4e:	e03a      	b.n	800bbc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d004      	beq.n	800bb66 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e02f      	b.n	800bbc6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f7ff fbac 	bl	800b2c4 <SDMMC_GetCommandResponse>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	461a      	mov	r2, r3
 800bb70:	7afb      	ldrb	r3, [r7, #11]
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d001      	beq.n	800bb7a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e025      	b.n	800bbc6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	22c5      	movs	r2, #197	; 0xc5
 800bb7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb80:	2100      	movs	r1, #0
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f7ff fbab 	bl	800b2de <SDMMC_GetResponse>
 800bb88:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d106      	bne.n	800bba2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	0c1b      	lsrs	r3, r3, #16
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e011      	b.n	800bbc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbb0:	e009      	b.n	800bbc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bbbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbc0:	e001      	b.n	800bbc6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bbc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	371c      	adds	r7, #28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd90      	pop	{r4, r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	20000018 	.word	0x20000018
 800bbd4:	10624dd3 	.word	0x10624dd3

0800bbd8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bbd8:	b490      	push	{r4, r7}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbe0:	4b21      	ldr	r3, [pc, #132]	; (800bc68 <SDMMC_GetCmdResp7+0x90>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a21      	ldr	r2, [pc, #132]	; (800bc6c <SDMMC_GetCmdResp7+0x94>)
 800bbe6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbea:	0a5b      	lsrs	r3, r3, #9
 800bbec:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbf0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bbf4:	4623      	mov	r3, r4
 800bbf6:	1e5c      	subs	r4, r3, #1
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d102      	bne.n	800bc02 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc00:	e02c      	b.n	800bc5c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc06:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d0f0      	beq.n	800bbf4 <SDMMC_GetCmdResp7+0x1c>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1eb      	bne.n	800bbf4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc20:	f003 0304 	and.w	r3, r3, #4
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d004      	beq.n	800bc32 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2204      	movs	r2, #4
 800bc2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc2e:	2304      	movs	r3, #4
 800bc30:	e014      	b.n	800bc5c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc36:	f003 0301 	and.w	r3, r3, #1
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d004      	beq.n	800bc48 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2201      	movs	r2, #1
 800bc42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc44:	2301      	movs	r3, #1
 800bc46:	e009      	b.n	800bc5c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2240      	movs	r2, #64	; 0x40
 800bc58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bc5a:	2300      	movs	r3, #0
  
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bc90      	pop	{r4, r7}
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	20000018 	.word	0x20000018
 800bc6c:	10624dd3 	.word	0x10624dd3

0800bc70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bc74:	4904      	ldr	r1, [pc, #16]	; (800bc88 <MX_FATFS_Init+0x18>)
 800bc76:	4805      	ldr	r0, [pc, #20]	; (800bc8c <MX_FATFS_Init+0x1c>)
 800bc78:	f000 fa96 	bl	800c1a8 <FATFS_LinkDriver>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	461a      	mov	r2, r3
 800bc80:	4b03      	ldr	r3, [pc, #12]	; (800bc90 <MX_FATFS_Init+0x20>)
 800bc82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bc84:	bf00      	nop
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	2000c5e8 	.word	0x2000c5e8
 800bc8c:	08026d1c 	.word	0x08026d1c
 800bc90:	2000c5e4 	.word	0x2000c5e4

0800bc94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bc9e:	f000 f87b 	bl	800bd98 <BSP_SD_IsDetected>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d001      	beq.n	800bcac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bca8:	2302      	movs	r3, #2
 800bcaa:	e012      	b.n	800bcd2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bcac:	480b      	ldr	r0, [pc, #44]	; (800bcdc <BSP_SD_Init+0x48>)
 800bcae:	f7fc fae9 	bl	8008284 <HAL_SD_Init>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bcb6:	79fb      	ldrb	r3, [r7, #7]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d109      	bne.n	800bcd0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bcbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bcc0:	4806      	ldr	r0, [pc, #24]	; (800bcdc <BSP_SD_Init+0x48>)
 800bcc2:	f7fc ff2b 	bl	8008b1c <HAL_SD_ConfigWideBusOperation>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bcd0:	79fb      	ldrb	r3, [r7, #7]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	2000c070 	.word	0x2000c070

0800bce0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	68f9      	ldr	r1, [r7, #12]
 800bcf6:	4806      	ldr	r0, [pc, #24]	; (800bd10 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bcf8:	f7fc fb5c 	bl	80083b4 <HAL_SD_ReadBlocks_DMA>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	2000c070 	.word	0x2000c070

0800bd14 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	68f9      	ldr	r1, [r7, #12]
 800bd2a:	4806      	ldr	r0, [pc, #24]	; (800bd44 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bd2c:	f7fc fc2e 	bl	800858c <HAL_SD_WriteBlocks_DMA>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	2000c070 	.word	0x2000c070

0800bd48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bd4c:	4805      	ldr	r0, [pc, #20]	; (800bd64 <BSP_SD_GetCardState+0x1c>)
 800bd4e:	f7fc ff61 	bl	8008c14 <HAL_SD_GetCardState>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b04      	cmp	r3, #4
 800bd56:	bf14      	ite	ne
 800bd58:	2301      	movne	r3, #1
 800bd5a:	2300      	moveq	r3, #0
 800bd5c:	b2db      	uxtb	r3, r3
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	2000c070 	.word	0x2000c070

0800bd68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bd70:	6879      	ldr	r1, [r7, #4]
 800bd72:	4803      	ldr	r0, [pc, #12]	; (800bd80 <BSP_SD_GetCardInfo+0x18>)
 800bd74:	f7fc fea6 	bl	8008ac4 <HAL_SD_GetCardInfo>
}
 800bd78:	bf00      	nop
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	2000c070 	.word	0x2000c070

0800bd84 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bd8c:	f000 f9b2 	bl	800c0f4 <BSP_SD_ReadCpltCallback>
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800bda2:	f000 f80b 	bl	800bdbc <BSP_PlatformIsDetected>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d101      	bne.n	800bdb0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bdac:	2300      	movs	r3, #0
 800bdae:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	b2db      	uxtb	r3, r3
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bdc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bdca:	4806      	ldr	r0, [pc, #24]	; (800bde4 <BSP_PlatformIsDetected+0x28>)
 800bdcc:	f7f9 fe3a 	bl	8005a44 <HAL_GPIO_ReadPin>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d001      	beq.n	800bdda <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800bdda:	79fb      	ldrb	r3, [r7, #7]
}  
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	40020800 	.word	0x40020800

0800bde8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800bdf0:	f000 fa26 	bl	800c240 <osKernelSysTick>
 800bdf4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800bdf6:	e006      	b.n	800be06 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bdf8:	f7ff ffa6 	bl	800bd48 <BSP_SD_GetCardState>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800be02:	2300      	movs	r3, #0
 800be04:	e009      	b.n	800be1a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800be06:	f000 fa1b 	bl	800c240 <osKernelSysTick>
 800be0a:	4602      	mov	r2, r0
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	429a      	cmp	r2, r3
 800be14:	d8f0      	bhi.n	800bdf8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800be16:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
	...

0800be24 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	4603      	mov	r3, r0
 800be2c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800be2e:	4b0b      	ldr	r3, [pc, #44]	; (800be5c <SD_CheckStatus+0x38>)
 800be30:	2201      	movs	r2, #1
 800be32:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be34:	f7ff ff88 	bl	800bd48 <BSP_SD_GetCardState>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d107      	bne.n	800be4e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800be3e:	4b07      	ldr	r3, [pc, #28]	; (800be5c <SD_CheckStatus+0x38>)
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	f023 0301 	bic.w	r3, r3, #1
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	4b04      	ldr	r3, [pc, #16]	; (800be5c <SD_CheckStatus+0x38>)
 800be4c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800be4e:	4b03      	ldr	r3, [pc, #12]	; (800be5c <SD_CheckStatus+0x38>)
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	b2db      	uxtb	r3, r3
}
 800be54:	4618      	mov	r0, r3
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	20000021 	.word	0x20000021

0800be60 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800be60:	b590      	push	{r4, r7, lr}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	4603      	mov	r3, r0
 800be68:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800be6a:	4b20      	ldr	r3, [pc, #128]	; (800beec <SD_initialize+0x8c>)
 800be6c:	2201      	movs	r2, #1
 800be6e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800be70:	f000 f9da 	bl	800c228 <osKernelRunning>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d030      	beq.n	800bedc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800be7a:	f7ff ff0b 	bl	800bc94 <BSP_SD_Init>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d107      	bne.n	800be94 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff ffcc 	bl	800be24 <SD_CheckStatus>
 800be8c:	4603      	mov	r3, r0
 800be8e:	461a      	mov	r2, r3
 800be90:	4b16      	ldr	r3, [pc, #88]	; (800beec <SD_initialize+0x8c>)
 800be92:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800be94:	4b15      	ldr	r3, [pc, #84]	; (800beec <SD_initialize+0x8c>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d01e      	beq.n	800bedc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800be9e:	4b14      	ldr	r3, [pc, #80]	; (800bef0 <SD_initialize+0x90>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10e      	bne.n	800bec4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800bea6:	4b13      	ldr	r3, [pc, #76]	; (800bef4 <SD_initialize+0x94>)
 800bea8:	f107 0408 	add.w	r4, r7, #8
 800beac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800beae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800beb2:	f107 0308 	add.w	r3, r7, #8
 800beb6:	2100      	movs	r1, #0
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 fa31 	bl	800c320 <osMessageCreate>
 800bebe:	4602      	mov	r2, r0
 800bec0:	4b0b      	ldr	r3, [pc, #44]	; (800bef0 <SD_initialize+0x90>)
 800bec2:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800bec4:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <SD_initialize+0x90>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d107      	bne.n	800bedc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800becc:	4b07      	ldr	r3, [pc, #28]	; (800beec <SD_initialize+0x8c>)
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	f043 0301 	orr.w	r3, r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	4b04      	ldr	r3, [pc, #16]	; (800beec <SD_initialize+0x8c>)
 800beda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bedc:	4b03      	ldr	r3, [pc, #12]	; (800beec <SD_initialize+0x8c>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	b2db      	uxtb	r3, r3
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	371c      	adds	r7, #28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd90      	pop	{r4, r7, pc}
 800beea:	bf00      	nop
 800beec:	20000021 	.word	0x20000021
 800bef0:	200003bc 	.word	0x200003bc
 800bef4:	08026604 	.word	0x08026604

0800bef8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff ff8d 	bl	800be24 <SD_CheckStatus>
 800bf0a:	4603      	mov	r3, r0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b08a      	sub	sp, #40	; 0x28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60b9      	str	r1, [r7, #8]
 800bf1c:	607a      	str	r2, [r7, #4]
 800bf1e:	603b      	str	r3, [r7, #0]
 800bf20:	4603      	mov	r3, r0
 800bf22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf2a:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf2e:	f7ff ff5b 	bl	800bde8 <SD_CheckStatusWithTimeout>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	da02      	bge.n	800bf3e <SD_read+0x2a>
  {
    return res;
 800bf38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf3c:	e032      	b.n	800bfa4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	68b8      	ldr	r0, [r7, #8]
 800bf44:	f7ff fecc 	bl	800bce0 <BSP_SD_ReadBlocks_DMA>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800bf4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d124      	bne.n	800bfa0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bf56:	4b15      	ldr	r3, [pc, #84]	; (800bfac <SD_read+0x98>)
 800bf58:	6819      	ldr	r1, [r3, #0]
 800bf5a:	f107 0314 	add.w	r3, r7, #20
 800bf5e:	f247 5230 	movw	r2, #30000	; 0x7530
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 fa46 	bl	800c3f4 <osMessageGet>

    if (event.status == osEventMessage)
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2b10      	cmp	r3, #16
 800bf6c:	d118      	bne.n	800bfa0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d115      	bne.n	800bfa0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800bf74:	f000 f964 	bl	800c240 <osKernelSysTick>
 800bf78:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bf7a:	e008      	b.n	800bf8e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bf7c:	f7ff fee4 	bl	800bd48 <BSP_SD_GetCardState>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d103      	bne.n	800bf8e <SD_read+0x7a>
              {
                res = RES_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bf8c:	e008      	b.n	800bfa0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bf8e:	f000 f957 	bl	800c240 <osKernelSysTick>
 800bf92:	4602      	mov	r2, r0
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	f247 522f 	movw	r2, #29999	; 0x752f
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d9ed      	bls.n	800bf7c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bfa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3728      	adds	r7, #40	; 0x28
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	200003bc 	.word	0x200003bc

0800bfb0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08a      	sub	sp, #40	; 0x28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60b9      	str	r1, [r7, #8]
 800bfb8:	607a      	str	r2, [r7, #4]
 800bfba:	603b      	str	r3, [r7, #0]
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bfc6:	f247 5030 	movw	r0, #30000	; 0x7530
 800bfca:	f7ff ff0d 	bl	800bde8 <SD_CheckStatusWithTimeout>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	da02      	bge.n	800bfda <SD_write+0x2a>
  {
    return res;
 800bfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfd8:	e02e      	b.n	800c038 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	6879      	ldr	r1, [r7, #4]
 800bfde:	68b8      	ldr	r0, [r7, #8]
 800bfe0:	f7ff fe98 	bl	800bd14 <BSP_SD_WriteBlocks_DMA>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d124      	bne.n	800c034 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bfea:	4b15      	ldr	r3, [pc, #84]	; (800c040 <SD_write+0x90>)
 800bfec:	6819      	ldr	r1, [r3, #0]
 800bfee:	f107 0314 	add.w	r3, r7, #20
 800bff2:	f247 5230 	movw	r2, #30000	; 0x7530
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 f9fc 	bl	800c3f4 <osMessageGet>

    if (event.status == osEventMessage)
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	2b10      	cmp	r3, #16
 800c000:	d118      	bne.n	800c034 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	2b02      	cmp	r3, #2
 800c006:	d115      	bne.n	800c034 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c008:	f000 f91a 	bl	800c240 <osKernelSysTick>
 800c00c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c00e:	e008      	b.n	800c022 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c010:	f7ff fe9a 	bl	800bd48 <BSP_SD_GetCardState>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d103      	bne.n	800c022 <SD_write+0x72>
          {
            res = RES_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c020:	e008      	b.n	800c034 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c022:	f000 f90d 	bl	800c240 <osKernelSysTick>
 800c026:	4602      	mov	r2, r0
 800c028:	6a3b      	ldr	r3, [r7, #32]
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c030:	4293      	cmp	r3, r2
 800c032:	d9ed      	bls.n	800c010 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3728      	adds	r7, #40	; 0x28
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	200003bc 	.word	0x200003bc

0800c044 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b08c      	sub	sp, #48	; 0x30
 800c048:	af00      	add	r7, sp, #0
 800c04a:	4603      	mov	r3, r0
 800c04c:	603a      	str	r2, [r7, #0]
 800c04e:	71fb      	strb	r3, [r7, #7]
 800c050:	460b      	mov	r3, r1
 800c052:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c05a:	4b25      	ldr	r3, [pc, #148]	; (800c0f0 <SD_ioctl+0xac>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	f003 0301 	and.w	r3, r3, #1
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <SD_ioctl+0x28>
 800c068:	2303      	movs	r3, #3
 800c06a:	e03c      	b.n	800c0e6 <SD_ioctl+0xa2>

  switch (cmd)
 800c06c:	79bb      	ldrb	r3, [r7, #6]
 800c06e:	2b03      	cmp	r3, #3
 800c070:	d834      	bhi.n	800c0dc <SD_ioctl+0x98>
 800c072:	a201      	add	r2, pc, #4	; (adr r2, 800c078 <SD_ioctl+0x34>)
 800c074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c078:	0800c089 	.word	0x0800c089
 800c07c:	0800c091 	.word	0x0800c091
 800c080:	0800c0a9 	.word	0x0800c0a9
 800c084:	0800c0c3 	.word	0x0800c0c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c08e:	e028      	b.n	800c0e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c090:	f107 030c 	add.w	r3, r7, #12
 800c094:	4618      	mov	r0, r3
 800c096:	f7ff fe67 	bl	800bd68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0a6:	e01c      	b.n	800c0e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0a8:	f107 030c 	add.w	r3, r7, #12
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7ff fe5b 	bl	800bd68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0c0:	e00f      	b.n	800c0e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0c2:	f107 030c 	add.w	r3, r7, #12
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7ff fe4e 	bl	800bd68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	0a5a      	lsrs	r2, r3, #9
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0da:	e002      	b.n	800c0e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c0dc:	2304      	movs	r3, #4
 800c0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3730      	adds	r7, #48	; 0x30
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20000021 	.word	0x20000021

0800c0f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c0f8:	4b04      	ldr	r3, [pc, #16]	; (800c10c <BSP_SD_ReadCpltCallback+0x18>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2101      	movs	r1, #1
 800c100:	4618      	mov	r0, r3
 800c102:	f000 f937 	bl	800c374 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c106:	bf00      	nop
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	200003bc 	.word	0x200003bc

0800c110 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c110:	b480      	push	{r7}
 800c112:	b087      	sub	sp, #28
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	4613      	mov	r3, r2
 800c11c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c11e:	2301      	movs	r3, #1
 800c120:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c126:	4b1f      	ldr	r3, [pc, #124]	; (800c1a4 <FATFS_LinkDriverEx+0x94>)
 800c128:	7a5b      	ldrb	r3, [r3, #9]
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d131      	bne.n	800c194 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c130:	4b1c      	ldr	r3, [pc, #112]	; (800c1a4 <FATFS_LinkDriverEx+0x94>)
 800c132:	7a5b      	ldrb	r3, [r3, #9]
 800c134:	b2db      	uxtb	r3, r3
 800c136:	461a      	mov	r2, r3
 800c138:	4b1a      	ldr	r3, [pc, #104]	; (800c1a4 <FATFS_LinkDriverEx+0x94>)
 800c13a:	2100      	movs	r1, #0
 800c13c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c13e:	4b19      	ldr	r3, [pc, #100]	; (800c1a4 <FATFS_LinkDriverEx+0x94>)
 800c140:	7a5b      	ldrb	r3, [r3, #9]
 800c142:	b2db      	uxtb	r3, r3
 800c144:	4a17      	ldr	r2, [pc, #92]	; (800c1a4 <FATFS_LinkDriverEx+0x94>)
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4413      	add	r3, r2
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c14e:	4b15      	ldr	r3, [pc, #84]	; (800c1a4 <FATFS_LinkDriverEx+0x94>)
 800c150:	7a5b      	ldrb	r3, [r3, #9]
 800c152:	b2db      	uxtb	r3, r3
 800c154:	461a      	mov	r2, r3
 800c156:	4b13      	ldr	r3, [pc, #76]	; (800c1a4 <FATFS_LinkDriverEx+0x94>)
 800c158:	4413      	add	r3, r2
 800c15a:	79fa      	ldrb	r2, [r7, #7]
 800c15c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c15e:	4b11      	ldr	r3, [pc, #68]	; (800c1a4 <FATFS_LinkDriverEx+0x94>)
 800c160:	7a5b      	ldrb	r3, [r3, #9]
 800c162:	b2db      	uxtb	r3, r3
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	b2d1      	uxtb	r1, r2
 800c168:	4a0e      	ldr	r2, [pc, #56]	; (800c1a4 <FATFS_LinkDriverEx+0x94>)
 800c16a:	7251      	strb	r1, [r2, #9]
 800c16c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c16e:	7dbb      	ldrb	r3, [r7, #22]
 800c170:	3330      	adds	r3, #48	; 0x30
 800c172:	b2da      	uxtb	r2, r3
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	3301      	adds	r3, #1
 800c17c:	223a      	movs	r2, #58	; 0x3a
 800c17e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	3302      	adds	r3, #2
 800c184:	222f      	movs	r2, #47	; 0x2f
 800c186:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	3303      	adds	r3, #3
 800c18c:	2200      	movs	r2, #0
 800c18e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c190:	2300      	movs	r3, #0
 800c192:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c194:	7dfb      	ldrb	r3, [r7, #23]
}
 800c196:	4618      	mov	r0, r3
 800c198:	371c      	adds	r7, #28
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	200003c0 	.word	0x200003c0

0800c1a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7ff ffaa 	bl	800c110 <FATFS_LinkDriverEx>
 800c1bc:	4603      	mov	r3, r0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b085      	sub	sp, #20
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c1d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1d8:	2b84      	cmp	r3, #132	; 0x84
 800c1da:	d005      	beq.n	800c1e8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c1dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	3303      	adds	r3, #3
 800c1e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1fc:	f3ef 8305 	mrs	r3, IPSR
 800c200:	607b      	str	r3, [r7, #4]
  return(result);
 800c202:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c204:	2b00      	cmp	r3, #0
 800c206:	bf14      	ite	ne
 800c208:	2301      	movne	r3, #1
 800c20a:	2300      	moveq	r3, #0
 800c20c:	b2db      	uxtb	r3, r3
}
 800c20e:	4618      	mov	r0, r3
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c21a:	b580      	push	{r7, lr}
 800c21c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c21e:	f001 faff 	bl	800d820 <vTaskStartScheduler>
  
  return osOK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	bd80      	pop	{r7, pc}

0800c228 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c22c:	f001 ff4a 	bl	800e0c4 <xTaskGetSchedulerState>
 800c230:	4603      	mov	r3, r0
 800c232:	2b01      	cmp	r3, #1
 800c234:	d101      	bne.n	800c23a <osKernelRunning+0x12>
    return 0;
 800c236:	2300      	movs	r3, #0
 800c238:	e000      	b.n	800c23c <osKernelRunning+0x14>
  else
    return 1;
 800c23a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c244:	f7ff ffd7 	bl	800c1f6 <inHandlerMode>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c24e:	f001 fc05 	bl	800da5c <xTaskGetTickCountFromISR>
 800c252:	4603      	mov	r3, r0
 800c254:	e002      	b.n	800c25c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c256:	f001 fbf1 	bl	800da3c <xTaskGetTickCount>
 800c25a:	4603      	mov	r3, r0
  }
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c262:	b089      	sub	sp, #36	; 0x24
 800c264:	af04      	add	r7, sp, #16
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	695b      	ldr	r3, [r3, #20]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d020      	beq.n	800c2b4 <osThreadCreate+0x54>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d01c      	beq.n	800c2b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	685c      	ldr	r4, [r3, #4]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681d      	ldr	r5, [r3, #0]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	691e      	ldr	r6, [r3, #16]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff ff9a 	bl	800c1c6 <makeFreeRtosPriority>
 800c292:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c29c:	9202      	str	r2, [sp, #8]
 800c29e:	9301      	str	r3, [sp, #4]
 800c2a0:	9100      	str	r1, [sp, #0]
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	4632      	mov	r2, r6
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f001 f8e0 	bl	800d46e <xTaskCreateStatic>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	60fb      	str	r3, [r7, #12]
 800c2b2:	e01c      	b.n	800c2ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685c      	ldr	r4, [r3, #4]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c2c0:	b29e      	uxth	r6, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff ff7c 	bl	800c1c6 <makeFreeRtosPriority>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	f107 030c 	add.w	r3, r7, #12
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	9200      	str	r2, [sp, #0]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	4632      	mov	r2, r6
 800c2dc:	4629      	mov	r1, r5
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f001 f925 	bl	800d52e <xTaskCreate>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d001      	beq.n	800c2ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e000      	b.n	800c2f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <osDelay+0x16>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	e000      	b.n	800c310 <osDelay+0x18>
 800c30e:	2301      	movs	r3, #1
 800c310:	4618      	mov	r0, r3
 800c312:	f001 fa4f 	bl	800d7b4 <vTaskDelay>
  
  return osOK;
 800c316:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c320:	b590      	push	{r4, r7, lr}
 800c322:	b085      	sub	sp, #20
 800c324:	af02      	add	r7, sp, #8
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d012      	beq.n	800c358 <osMessageCreate+0x38>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00e      	beq.n	800c358 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6818      	ldr	r0, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6859      	ldr	r1, [r3, #4]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	689a      	ldr	r2, [r3, #8]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	68dc      	ldr	r4, [r3, #12]
 800c34a:	2300      	movs	r3, #0
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	4623      	mov	r3, r4
 800c350:	f000 f9e2 	bl	800c718 <xQueueGenericCreateStatic>
 800c354:	4603      	mov	r3, r0
 800c356:	e008      	b.n	800c36a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6818      	ldr	r0, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	4619      	mov	r1, r3
 800c364:	f000 fa55 	bl	800c812 <xQueueGenericCreate>
 800c368:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd90      	pop	{r4, r7, pc}
	...

0800c374 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c380:	2300      	movs	r3, #0
 800c382:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d101      	bne.n	800c392 <osMessagePut+0x1e>
    ticks = 1;
 800c38e:	2301      	movs	r3, #1
 800c390:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c392:	f7ff ff30 	bl	800c1f6 <inHandlerMode>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d018      	beq.n	800c3ce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c39c:	f107 0210 	add.w	r2, r7, #16
 800c3a0:	f107 0108 	add.w	r1, r7, #8
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f000 fb96 	bl	800cad8 <xQueueGenericSendFromISR>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d001      	beq.n	800c3b6 <osMessagePut+0x42>
      return osErrorOS;
 800c3b2:	23ff      	movs	r3, #255	; 0xff
 800c3b4:	e018      	b.n	800c3e8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d014      	beq.n	800c3e6 <osMessagePut+0x72>
 800c3bc:	4b0c      	ldr	r3, [pc, #48]	; (800c3f0 <osMessagePut+0x7c>)
 800c3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c2:	601a      	str	r2, [r3, #0]
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	e00b      	b.n	800c3e6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c3ce:	f107 0108 	add.w	r1, r7, #8
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	697a      	ldr	r2, [r7, #20]
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f000 fa7c 	bl	800c8d4 <xQueueGenericSend>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d001      	beq.n	800c3e6 <osMessagePut+0x72>
      return osErrorOS;
 800c3e2:	23ff      	movs	r3, #255	; 0xff
 800c3e4:	e000      	b.n	800c3e8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	e000ed04 	.word	0xe000ed04

0800c3f4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c3f4:	b590      	push	{r4, r7, lr}
 800c3f6:	b08b      	sub	sp, #44	; 0x2c
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c404:	2300      	movs	r3, #0
 800c406:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10a      	bne.n	800c424 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c40e:	2380      	movs	r3, #128	; 0x80
 800c410:	617b      	str	r3, [r7, #20]
    return event;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	461c      	mov	r4, r3
 800c416:	f107 0314 	add.w	r3, r7, #20
 800c41a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c41e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c422:	e054      	b.n	800c4ce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c424:	2300      	movs	r3, #0
 800c426:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c428:	2300      	movs	r3, #0
 800c42a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c432:	d103      	bne.n	800c43c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c434:	f04f 33ff 	mov.w	r3, #4294967295
 800c438:	627b      	str	r3, [r7, #36]	; 0x24
 800c43a:	e009      	b.n	800c450 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d006      	beq.n	800c450 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <osMessageGet+0x5c>
      ticks = 1;
 800c44c:	2301      	movs	r3, #1
 800c44e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c450:	f7ff fed1 	bl	800c1f6 <inHandlerMode>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d01c      	beq.n	800c494 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c45a:	f107 0220 	add.w	r2, r7, #32
 800c45e:	f107 0314 	add.w	r3, r7, #20
 800c462:	3304      	adds	r3, #4
 800c464:	4619      	mov	r1, r3
 800c466:	68b8      	ldr	r0, [r7, #8]
 800c468:	f000 fe56 	bl	800d118 <xQueueReceiveFromISR>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d102      	bne.n	800c478 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c472:	2310      	movs	r3, #16
 800c474:	617b      	str	r3, [r7, #20]
 800c476:	e001      	b.n	800c47c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c478:	2300      	movs	r3, #0
 800c47a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c47c:	6a3b      	ldr	r3, [r7, #32]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d01d      	beq.n	800c4be <osMessageGet+0xca>
 800c482:	4b15      	ldr	r3, [pc, #84]	; (800c4d8 <osMessageGet+0xe4>)
 800c484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c488:	601a      	str	r2, [r3, #0]
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	e014      	b.n	800c4be <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c494:	f107 0314 	add.w	r3, r7, #20
 800c498:	3304      	adds	r3, #4
 800c49a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c49c:	4619      	mov	r1, r3
 800c49e:	68b8      	ldr	r0, [r7, #8]
 800c4a0:	f000 fc48 	bl	800cd34 <xQueueReceive>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d102      	bne.n	800c4b0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c4aa:	2310      	movs	r3, #16
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e006      	b.n	800c4be <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <osMessageGet+0xc6>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	e000      	b.n	800c4bc <osMessageGet+0xc8>
 800c4ba:	2340      	movs	r3, #64	; 0x40
 800c4bc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	461c      	mov	r4, r3
 800c4c2:	f107 0314 	add.w	r3, r7, #20
 800c4c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	372c      	adds	r7, #44	; 0x2c
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd90      	pop	{r4, r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	e000ed04 	.word	0xe000ed04

0800c4dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f103 0208 	add.w	r2, r3, #8
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f103 0208 	add.w	r2, r3, #8
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f103 0208 	add.w	r2, r3, #8
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c510:	bf00      	nop
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c52a:	bf00      	nop
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c536:	b480      	push	{r7}
 800c538:	b085      	sub	sp, #20
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	683a      	ldr	r2, [r7, #0]
 800c55a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	1c5a      	adds	r2, r3, #1
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	601a      	str	r2, [r3, #0]
}
 800c572:	bf00      	nop
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c57e:	b480      	push	{r7}
 800c580:	b085      	sub	sp, #20
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
 800c586:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c594:	d103      	bne.n	800c59e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	60fb      	str	r3, [r7, #12]
 800c59c:	e00c      	b.n	800c5b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	60fb      	str	r3, [r7, #12]
 800c5a4:	e002      	b.n	800c5ac <vListInsert+0x2e>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	60fb      	str	r3, [r7, #12]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d2f6      	bcs.n	800c5a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	683a      	ldr	r2, [r7, #0]
 800c5c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	601a      	str	r2, [r3, #0]
}
 800c5e4:	bf00      	nop
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	691b      	ldr	r3, [r3, #16]
 800c5fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	6892      	ldr	r2, [r2, #8]
 800c606:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	6852      	ldr	r2, [r2, #4]
 800c610:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d103      	bne.n	800c624 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	689a      	ldr	r2, [r3, #8]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	1e5a      	subs	r2, r3, #1
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d10b      	bne.n	800c670 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65c:	b672      	cpsid	i
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	b662      	cpsie	i
 800c66c:	60bb      	str	r3, [r7, #8]
 800c66e:	e7fe      	b.n	800c66e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c670:	f002 f86a 	bl	800e748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c67c:	68f9      	ldr	r1, [r7, #12]
 800c67e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c680:	fb01 f303 	mul.w	r3, r1, r3
 800c684:	441a      	add	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	68f9      	ldr	r1, [r7, #12]
 800c6a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6a6:	fb01 f303 	mul.w	r3, r1, r3
 800c6aa:	441a      	add	r2, r3
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	22ff      	movs	r2, #255	; 0xff
 800c6b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	22ff      	movs	r2, #255	; 0xff
 800c6bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d114      	bne.n	800c6f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d01a      	beq.n	800c704 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	3310      	adds	r3, #16
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f001 fb36 	bl	800dd44 <xTaskRemoveFromEventList>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d012      	beq.n	800c704 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c6de:	4b0d      	ldr	r3, [pc, #52]	; (800c714 <xQueueGenericReset+0xd0>)
 800c6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e4:	601a      	str	r2, [r3, #0]
 800c6e6:	f3bf 8f4f 	dsb	sy
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	e009      	b.n	800c704 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	3310      	adds	r3, #16
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7ff fef1 	bl	800c4dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3324      	adds	r3, #36	; 0x24
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7ff feec 	bl	800c4dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c704:	f002 f852 	bl	800e7ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c708:	2301      	movs	r3, #1
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	e000ed04 	.word	0xe000ed04

0800c718 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08e      	sub	sp, #56	; 0x38
 800c71c:	af02      	add	r7, sp, #8
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10b      	bne.n	800c744 <xQueueGenericCreateStatic+0x2c>
 800c72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c730:	b672      	cpsid	i
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	b662      	cpsie	i
 800c740:	62bb      	str	r3, [r7, #40]	; 0x28
 800c742:	e7fe      	b.n	800c742 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10b      	bne.n	800c762 <xQueueGenericCreateStatic+0x4a>
 800c74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74e:	b672      	cpsid	i
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	b662      	cpsie	i
 800c75e:	627b      	str	r3, [r7, #36]	; 0x24
 800c760:	e7fe      	b.n	800c760 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d002      	beq.n	800c76e <xQueueGenericCreateStatic+0x56>
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <xQueueGenericCreateStatic+0x5a>
 800c76e:	2301      	movs	r3, #1
 800c770:	e000      	b.n	800c774 <xQueueGenericCreateStatic+0x5c>
 800c772:	2300      	movs	r3, #0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10b      	bne.n	800c790 <xQueueGenericCreateStatic+0x78>
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	b672      	cpsid	i
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	b662      	cpsie	i
 800c78c:	623b      	str	r3, [r7, #32]
 800c78e:	e7fe      	b.n	800c78e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d102      	bne.n	800c79c <xQueueGenericCreateStatic+0x84>
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d101      	bne.n	800c7a0 <xQueueGenericCreateStatic+0x88>
 800c79c:	2301      	movs	r3, #1
 800c79e:	e000      	b.n	800c7a2 <xQueueGenericCreateStatic+0x8a>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10b      	bne.n	800c7be <xQueueGenericCreateStatic+0xa6>
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	b672      	cpsid	i
 800c7ac:	f383 8811 	msr	BASEPRI, r3
 800c7b0:	f3bf 8f6f 	isb	sy
 800c7b4:	f3bf 8f4f 	dsb	sy
 800c7b8:	b662      	cpsie	i
 800c7ba:	61fb      	str	r3, [r7, #28]
 800c7bc:	e7fe      	b.n	800c7bc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c7be:	2348      	movs	r3, #72	; 0x48
 800c7c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2b48      	cmp	r3, #72	; 0x48
 800c7c6:	d00b      	beq.n	800c7e0 <xQueueGenericCreateStatic+0xc8>
 800c7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7cc:	b672      	cpsid	i
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	b662      	cpsie	i
 800c7dc:	61bb      	str	r3, [r7, #24]
 800c7de:	e7fe      	b.n	800c7de <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c7e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00d      	beq.n	800c808 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c7f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	68b9      	ldr	r1, [r7, #8]
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f000 f846 	bl	800c894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3730      	adds	r7, #48	; 0x30
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}

0800c812 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c812:	b580      	push	{r7, lr}
 800c814:	b08a      	sub	sp, #40	; 0x28
 800c816:	af02      	add	r7, sp, #8
 800c818:	60f8      	str	r0, [r7, #12]
 800c81a:	60b9      	str	r1, [r7, #8]
 800c81c:	4613      	mov	r3, r2
 800c81e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10b      	bne.n	800c83e <xQueueGenericCreate+0x2c>
 800c826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82a:	b672      	cpsid	i
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	b662      	cpsie	i
 800c83a:	613b      	str	r3, [r7, #16]
 800c83c:	e7fe      	b.n	800c83c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d102      	bne.n	800c84a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c844:	2300      	movs	r3, #0
 800c846:	61fb      	str	r3, [r7, #28]
 800c848:	e004      	b.n	800c854 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	fb02 f303 	mul.w	r3, r2, r3
 800c852:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	3348      	adds	r3, #72	; 0x48
 800c858:	4618      	mov	r0, r3
 800c85a:	f002 f897 	bl	800e98c <pvPortMalloc>
 800c85e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d011      	beq.n	800c88a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	3348      	adds	r3, #72	; 0x48
 800c86e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	2200      	movs	r2, #0
 800c874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c878:	79fa      	ldrb	r2, [r7, #7]
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	4613      	mov	r3, r2
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	68b9      	ldr	r1, [r7, #8]
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f000 f805 	bl	800c894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c88a:	69bb      	ldr	r3, [r7, #24]
	}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3720      	adds	r7, #32
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
 800c8a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d103      	bne.n	800c8b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	69ba      	ldr	r2, [r7, #24]
 800c8ac:	601a      	str	r2, [r3, #0]
 800c8ae:	e002      	b.n	800c8b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	69b8      	ldr	r0, [r7, #24]
 800c8c6:	f7ff febd 	bl	800c644 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c8ca:	bf00      	nop
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
	...

0800c8d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08e      	sub	sp, #56	; 0x38
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10b      	bne.n	800c908 <xQueueGenericSend+0x34>
 800c8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f4:	b672      	cpsid	i
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	b662      	cpsie	i
 800c904:	62bb      	str	r3, [r7, #40]	; 0x28
 800c906:	e7fe      	b.n	800c906 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d103      	bne.n	800c916 <xQueueGenericSend+0x42>
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c912:	2b00      	cmp	r3, #0
 800c914:	d101      	bne.n	800c91a <xQueueGenericSend+0x46>
 800c916:	2301      	movs	r3, #1
 800c918:	e000      	b.n	800c91c <xQueueGenericSend+0x48>
 800c91a:	2300      	movs	r3, #0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10b      	bne.n	800c938 <xQueueGenericSend+0x64>
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	b672      	cpsid	i
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	b662      	cpsie	i
 800c934:	627b      	str	r3, [r7, #36]	; 0x24
 800c936:	e7fe      	b.n	800c936 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d103      	bne.n	800c946 <xQueueGenericSend+0x72>
 800c93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c942:	2b01      	cmp	r3, #1
 800c944:	d101      	bne.n	800c94a <xQueueGenericSend+0x76>
 800c946:	2301      	movs	r3, #1
 800c948:	e000      	b.n	800c94c <xQueueGenericSend+0x78>
 800c94a:	2300      	movs	r3, #0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10b      	bne.n	800c968 <xQueueGenericSend+0x94>
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	b672      	cpsid	i
 800c956:	f383 8811 	msr	BASEPRI, r3
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	f3bf 8f4f 	dsb	sy
 800c962:	b662      	cpsie	i
 800c964:	623b      	str	r3, [r7, #32]
 800c966:	e7fe      	b.n	800c966 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c968:	f001 fbac 	bl	800e0c4 <xTaskGetSchedulerState>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d102      	bne.n	800c978 <xQueueGenericSend+0xa4>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <xQueueGenericSend+0xa8>
 800c978:	2301      	movs	r3, #1
 800c97a:	e000      	b.n	800c97e <xQueueGenericSend+0xaa>
 800c97c:	2300      	movs	r3, #0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10b      	bne.n	800c99a <xQueueGenericSend+0xc6>
 800c982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c986:	b672      	cpsid	i
 800c988:	f383 8811 	msr	BASEPRI, r3
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	b662      	cpsie	i
 800c996:	61fb      	str	r3, [r7, #28]
 800c998:	e7fe      	b.n	800c998 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c99a:	f001 fed5 	bl	800e748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d302      	bcc.n	800c9b0 <xQueueGenericSend+0xdc>
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	d129      	bne.n	800ca04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	68b9      	ldr	r1, [r7, #8]
 800c9b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9b6:	f000 fc4a 	bl	800d24e <prvCopyDataToQueue>
 800c9ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d010      	beq.n	800c9e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c6:	3324      	adds	r3, #36	; 0x24
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f001 f9bb 	bl	800dd44 <xTaskRemoveFromEventList>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d013      	beq.n	800c9fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c9d4:	4b3f      	ldr	r3, [pc, #252]	; (800cad4 <xQueueGenericSend+0x200>)
 800c9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	f3bf 8f6f 	isb	sy
 800c9e4:	e00a      	b.n	800c9fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d007      	beq.n	800c9fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c9ec:	4b39      	ldr	r3, [pc, #228]	; (800cad4 <xQueueGenericSend+0x200>)
 800c9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	f3bf 8f4f 	dsb	sy
 800c9f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c9fc:	f001 fed6 	bl	800e7ac <vPortExitCritical>
				return pdPASS;
 800ca00:	2301      	movs	r3, #1
 800ca02:	e063      	b.n	800cacc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d103      	bne.n	800ca12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca0a:	f001 fecf 	bl	800e7ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e05c      	b.n	800cacc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d106      	bne.n	800ca26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca18:	f107 0314 	add.w	r3, r7, #20
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f001 f9f5 	bl	800de0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca22:	2301      	movs	r3, #1
 800ca24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca26:	f001 fec1 	bl	800e7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca2a:	f000 ff5b 	bl	800d8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca2e:	f001 fe8b 	bl	800e748 <vPortEnterCritical>
 800ca32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca38:	b25b      	sxtb	r3, r3
 800ca3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3e:	d103      	bne.n	800ca48 <xQueueGenericSend+0x174>
 800ca40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca4e:	b25b      	sxtb	r3, r3
 800ca50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca54:	d103      	bne.n	800ca5e <xQueueGenericSend+0x18a>
 800ca56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca5e:	f001 fea5 	bl	800e7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca62:	1d3a      	adds	r2, r7, #4
 800ca64:	f107 0314 	add.w	r3, r7, #20
 800ca68:	4611      	mov	r1, r2
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f001 f9e4 	bl	800de38 <xTaskCheckForTimeOut>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d124      	bne.n	800cac0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca78:	f000 fce1 	bl	800d43e <prvIsQueueFull>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d018      	beq.n	800cab4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca84:	3310      	adds	r3, #16
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	4611      	mov	r1, r2
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f001 f934 	bl	800dcf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca92:	f000 fc6c 	bl	800d36e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca96:	f000 ff33 	bl	800d900 <xTaskResumeAll>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f47f af7c 	bne.w	800c99a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800caa2:	4b0c      	ldr	r3, [pc, #48]	; (800cad4 <xQueueGenericSend+0x200>)
 800caa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caa8:	601a      	str	r2, [r3, #0]
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	e772      	b.n	800c99a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cab6:	f000 fc5a 	bl	800d36e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800caba:	f000 ff21 	bl	800d900 <xTaskResumeAll>
 800cabe:	e76c      	b.n	800c99a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cac2:	f000 fc54 	bl	800d36e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cac6:	f000 ff1b 	bl	800d900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800caca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3738      	adds	r7, #56	; 0x38
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	e000ed04 	.word	0xe000ed04

0800cad8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08e      	sub	sp, #56	; 0x38
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
 800cae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	2b00      	cmp	r3, #0
 800caee:	d10b      	bne.n	800cb08 <xQueueGenericSendFromISR+0x30>
 800caf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf4:	b672      	cpsid	i
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	b662      	cpsie	i
 800cb04:	627b      	str	r3, [r7, #36]	; 0x24
 800cb06:	e7fe      	b.n	800cb06 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d103      	bne.n	800cb16 <xQueueGenericSendFromISR+0x3e>
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <xQueueGenericSendFromISR+0x42>
 800cb16:	2301      	movs	r3, #1
 800cb18:	e000      	b.n	800cb1c <xQueueGenericSendFromISR+0x44>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10b      	bne.n	800cb38 <xQueueGenericSendFromISR+0x60>
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	b672      	cpsid	i
 800cb26:	f383 8811 	msr	BASEPRI, r3
 800cb2a:	f3bf 8f6f 	isb	sy
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	b662      	cpsie	i
 800cb34:	623b      	str	r3, [r7, #32]
 800cb36:	e7fe      	b.n	800cb36 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d103      	bne.n	800cb46 <xQueueGenericSendFromISR+0x6e>
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d101      	bne.n	800cb4a <xQueueGenericSendFromISR+0x72>
 800cb46:	2301      	movs	r3, #1
 800cb48:	e000      	b.n	800cb4c <xQueueGenericSendFromISR+0x74>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10b      	bne.n	800cb68 <xQueueGenericSendFromISR+0x90>
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	b672      	cpsid	i
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	b662      	cpsie	i
 800cb64:	61fb      	str	r3, [r7, #28]
 800cb66:	e7fe      	b.n	800cb66 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb68:	f001 fece 	bl	800e908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb6c:	f3ef 8211 	mrs	r2, BASEPRI
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	b672      	cpsid	i
 800cb76:	f383 8811 	msr	BASEPRI, r3
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	f3bf 8f4f 	dsb	sy
 800cb82:	b662      	cpsie	i
 800cb84:	61ba      	str	r2, [r7, #24]
 800cb86:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cb88:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d302      	bcc.n	800cb9e <xQueueGenericSendFromISR+0xc6>
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d12c      	bne.n	800cbf8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	68b9      	ldr	r1, [r7, #8]
 800cbac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbae:	f000 fb4e 	bl	800d24e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cbb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbba:	d112      	bne.n	800cbe2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d016      	beq.n	800cbf2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	3324      	adds	r3, #36	; 0x24
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f001 f8bb 	bl	800dd44 <xTaskRemoveFromEventList>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00e      	beq.n	800cbf2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00b      	beq.n	800cbf2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	e007      	b.n	800cbf2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cbe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	b25a      	sxtb	r2, r3
 800cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cbf6:	e001      	b.n	800cbfc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	637b      	str	r3, [r7, #52]	; 0x34
 800cbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3738      	adds	r7, #56	; 0x38
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08e      	sub	sp, #56	; 0x38
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10b      	bne.n	800cc3c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	b672      	cpsid	i
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	b662      	cpsie	i
 800cc38:	623b      	str	r3, [r7, #32]
 800cc3a:	e7fe      	b.n	800cc3a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00b      	beq.n	800cc5c <xQueueGiveFromISR+0x4c>
 800cc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc48:	b672      	cpsid	i
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	b662      	cpsie	i
 800cc58:	61fb      	str	r3, [r7, #28]
 800cc5a:	e7fe      	b.n	800cc5a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d103      	bne.n	800cc6c <xQueueGiveFromISR+0x5c>
 800cc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d101      	bne.n	800cc70 <xQueueGiveFromISR+0x60>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e000      	b.n	800cc72 <xQueueGiveFromISR+0x62>
 800cc70:	2300      	movs	r3, #0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10b      	bne.n	800cc8e <xQueueGiveFromISR+0x7e>
 800cc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7a:	b672      	cpsid	i
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	b662      	cpsie	i
 800cc8a:	61bb      	str	r3, [r7, #24]
 800cc8c:	e7fe      	b.n	800cc8c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc8e:	f001 fe3b 	bl	800e908 <vPortValidateInterruptPriority>
	__asm volatile
 800cc92:	f3ef 8211 	mrs	r2, BASEPRI
 800cc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9a:	b672      	cpsid	i
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	b662      	cpsie	i
 800ccaa:	617a      	str	r2, [r7, #20]
 800ccac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ccae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d22b      	bcs.n	800cd1a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	1c5a      	adds	r2, r3, #1
 800ccd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ccd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccdc:	d112      	bne.n	800cd04 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d016      	beq.n	800cd14 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	3324      	adds	r3, #36	; 0x24
 800ccea:	4618      	mov	r0, r3
 800ccec:	f001 f82a 	bl	800dd44 <xTaskRemoveFromEventList>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00e      	beq.n	800cd14 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00b      	beq.n	800cd14 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	e007      	b.n	800cd14 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd08:	3301      	adds	r3, #1
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	b25a      	sxtb	r2, r3
 800cd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cd14:	2301      	movs	r3, #1
 800cd16:	637b      	str	r3, [r7, #52]	; 0x34
 800cd18:	e001      	b.n	800cd1e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	637b      	str	r3, [r7, #52]	; 0x34
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3738      	adds	r7, #56	; 0x38
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
	...

0800cd34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08c      	sub	sp, #48	; 0x30
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd40:	2300      	movs	r3, #0
 800cd42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d10b      	bne.n	800cd66 <xQueueReceive+0x32>
	__asm volatile
 800cd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd52:	b672      	cpsid	i
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	b662      	cpsie	i
 800cd62:	623b      	str	r3, [r7, #32]
 800cd64:	e7fe      	b.n	800cd64 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d103      	bne.n	800cd74 <xQueueReceive+0x40>
 800cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d101      	bne.n	800cd78 <xQueueReceive+0x44>
 800cd74:	2301      	movs	r3, #1
 800cd76:	e000      	b.n	800cd7a <xQueueReceive+0x46>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10b      	bne.n	800cd96 <xQueueReceive+0x62>
 800cd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd82:	b672      	cpsid	i
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	b662      	cpsie	i
 800cd92:	61fb      	str	r3, [r7, #28]
 800cd94:	e7fe      	b.n	800cd94 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd96:	f001 f995 	bl	800e0c4 <xTaskGetSchedulerState>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d102      	bne.n	800cda6 <xQueueReceive+0x72>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <xQueueReceive+0x76>
 800cda6:	2301      	movs	r3, #1
 800cda8:	e000      	b.n	800cdac <xQueueReceive+0x78>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10b      	bne.n	800cdc8 <xQueueReceive+0x94>
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	b672      	cpsid	i
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	b662      	cpsie	i
 800cdc4:	61bb      	str	r3, [r7, #24]
 800cdc6:	e7fe      	b.n	800cdc6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdc8:	f001 fcbe 	bl	800e748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d01f      	beq.n	800ce18 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdd8:	68b9      	ldr	r1, [r7, #8]
 800cdda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cddc:	f000 faa1 	bl	800d322 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde2:	1e5a      	subs	r2, r3, #1
 800cde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00f      	beq.n	800ce10 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	3310      	adds	r3, #16
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f000 ffa5 	bl	800dd44 <xTaskRemoveFromEventList>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d007      	beq.n	800ce10 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ce00:	4b3c      	ldr	r3, [pc, #240]	; (800cef4 <xQueueReceive+0x1c0>)
 800ce02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ce10:	f001 fccc 	bl	800e7ac <vPortExitCritical>
				return pdPASS;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e069      	b.n	800ceec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d103      	bne.n	800ce26 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce1e:	f001 fcc5 	bl	800e7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ce22:	2300      	movs	r3, #0
 800ce24:	e062      	b.n	800ceec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d106      	bne.n	800ce3a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce2c:	f107 0310 	add.w	r3, r7, #16
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 ffeb 	bl	800de0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce36:	2301      	movs	r3, #1
 800ce38:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce3a:	f001 fcb7 	bl	800e7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce3e:	f000 fd51 	bl	800d8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce42:	f001 fc81 	bl	800e748 <vPortEnterCritical>
 800ce46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce4c:	b25b      	sxtb	r3, r3
 800ce4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce52:	d103      	bne.n	800ce5c <xQueueReceive+0x128>
 800ce54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce62:	b25b      	sxtb	r3, r3
 800ce64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce68:	d103      	bne.n	800ce72 <xQueueReceive+0x13e>
 800ce6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce72:	f001 fc9b 	bl	800e7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce76:	1d3a      	adds	r2, r7, #4
 800ce78:	f107 0310 	add.w	r3, r7, #16
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f000 ffda 	bl	800de38 <xTaskCheckForTimeOut>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d123      	bne.n	800ced2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce8c:	f000 fac1 	bl	800d412 <prvIsQueueEmpty>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d017      	beq.n	800cec6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	3324      	adds	r3, #36	; 0x24
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	4611      	mov	r1, r2
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 ff2a 	bl	800dcf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cea6:	f000 fa62 	bl	800d36e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ceaa:	f000 fd29 	bl	800d900 <xTaskResumeAll>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d189      	bne.n	800cdc8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ceb4:	4b0f      	ldr	r3, [pc, #60]	; (800cef4 <xQueueReceive+0x1c0>)
 800ceb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceba:	601a      	str	r2, [r3, #0]
 800cebc:	f3bf 8f4f 	dsb	sy
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	e780      	b.n	800cdc8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cec8:	f000 fa51 	bl	800d36e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cecc:	f000 fd18 	bl	800d900 <xTaskResumeAll>
 800ced0:	e77a      	b.n	800cdc8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ced2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ced4:	f000 fa4b 	bl	800d36e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ced8:	f000 fd12 	bl	800d900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cedc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cede:	f000 fa98 	bl	800d412 <prvIsQueueEmpty>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f43f af6f 	beq.w	800cdc8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ceea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3730      	adds	r7, #48	; 0x30
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	e000ed04 	.word	0xe000ed04

0800cef8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08e      	sub	sp, #56	; 0x38
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf02:	2300      	movs	r3, #0
 800cf04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10b      	bne.n	800cf2c <xQueueSemaphoreTake+0x34>
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	b672      	cpsid	i
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	b662      	cpsie	i
 800cf28:	623b      	str	r3, [r7, #32]
 800cf2a:	e7fe      	b.n	800cf2a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00b      	beq.n	800cf4c <xQueueSemaphoreTake+0x54>
 800cf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf38:	b672      	cpsid	i
 800cf3a:	f383 8811 	msr	BASEPRI, r3
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	b662      	cpsie	i
 800cf48:	61fb      	str	r3, [r7, #28]
 800cf4a:	e7fe      	b.n	800cf4a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf4c:	f001 f8ba 	bl	800e0c4 <xTaskGetSchedulerState>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d102      	bne.n	800cf5c <xQueueSemaphoreTake+0x64>
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d101      	bne.n	800cf60 <xQueueSemaphoreTake+0x68>
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e000      	b.n	800cf62 <xQueueSemaphoreTake+0x6a>
 800cf60:	2300      	movs	r3, #0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10b      	bne.n	800cf7e <xQueueSemaphoreTake+0x86>
 800cf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6a:	b672      	cpsid	i
 800cf6c:	f383 8811 	msr	BASEPRI, r3
 800cf70:	f3bf 8f6f 	isb	sy
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	b662      	cpsie	i
 800cf7a:	61bb      	str	r3, [r7, #24]
 800cf7c:	e7fe      	b.n	800cf7c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf7e:	f001 fbe3 	bl	800e748 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf86:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d024      	beq.n	800cfd8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf90:	1e5a      	subs	r2, r3, #1
 800cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf94:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d104      	bne.n	800cfa8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cf9e:	f001 fa53 	bl	800e448 <pvTaskIncrementMutexHeldCount>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d00f      	beq.n	800cfd0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	3310      	adds	r3, #16
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 fec5 	bl	800dd44 <xTaskRemoveFromEventList>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d007      	beq.n	800cfd0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfc0:	4b54      	ldr	r3, [pc, #336]	; (800d114 <xQueueSemaphoreTake+0x21c>)
 800cfc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfd0:	f001 fbec 	bl	800e7ac <vPortExitCritical>
				return pdPASS;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e098      	b.n	800d10a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d112      	bne.n	800d004 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00b      	beq.n	800cffc <xQueueSemaphoreTake+0x104>
 800cfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe8:	b672      	cpsid	i
 800cfea:	f383 8811 	msr	BASEPRI, r3
 800cfee:	f3bf 8f6f 	isb	sy
 800cff2:	f3bf 8f4f 	dsb	sy
 800cff6:	b662      	cpsie	i
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	e7fe      	b.n	800cffa <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cffc:	f001 fbd6 	bl	800e7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d000:	2300      	movs	r3, #0
 800d002:	e082      	b.n	800d10a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d00a:	f107 030c 	add.w	r3, r7, #12
 800d00e:	4618      	mov	r0, r3
 800d010:	f000 fefc 	bl	800de0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d014:	2301      	movs	r3, #1
 800d016:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d018:	f001 fbc8 	bl	800e7ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d01c:	f000 fc62 	bl	800d8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d020:	f001 fb92 	bl	800e748 <vPortEnterCritical>
 800d024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d02a:	b25b      	sxtb	r3, r3
 800d02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d030:	d103      	bne.n	800d03a <xQueueSemaphoreTake+0x142>
 800d032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d040:	b25b      	sxtb	r3, r3
 800d042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d046:	d103      	bne.n	800d050 <xQueueSemaphoreTake+0x158>
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	2200      	movs	r2, #0
 800d04c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d050:	f001 fbac 	bl	800e7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d054:	463a      	mov	r2, r7
 800d056:	f107 030c 	add.w	r3, r7, #12
 800d05a:	4611      	mov	r1, r2
 800d05c:	4618      	mov	r0, r3
 800d05e:	f000 feeb 	bl	800de38 <xTaskCheckForTimeOut>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d132      	bne.n	800d0ce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d06a:	f000 f9d2 	bl	800d412 <prvIsQueueEmpty>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d026      	beq.n	800d0c2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d109      	bne.n	800d090 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d07c:	f001 fb64 	bl	800e748 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	4618      	mov	r0, r3
 800d086:	f001 f83b 	bl	800e100 <xTaskPriorityInherit>
 800d08a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d08c:	f001 fb8e 	bl	800e7ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d092:	3324      	adds	r3, #36	; 0x24
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	4611      	mov	r1, r2
 800d098:	4618      	mov	r0, r3
 800d09a:	f000 fe2d 	bl	800dcf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d09e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0a0:	f000 f965 	bl	800d36e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0a4:	f000 fc2c 	bl	800d900 <xTaskResumeAll>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f47f af67 	bne.w	800cf7e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d0b0:	4b18      	ldr	r3, [pc, #96]	; (800d114 <xQueueSemaphoreTake+0x21c>)
 800d0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0b6:	601a      	str	r2, [r3, #0]
 800d0b8:	f3bf 8f4f 	dsb	sy
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	e75d      	b.n	800cf7e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d0c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0c4:	f000 f953 	bl	800d36e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0c8:	f000 fc1a 	bl	800d900 <xTaskResumeAll>
 800d0cc:	e757      	b.n	800cf7e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d0ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0d0:	f000 f94d 	bl	800d36e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0d4:	f000 fc14 	bl	800d900 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0da:	f000 f99a 	bl	800d412 <prvIsQueueEmpty>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f43f af4c 	beq.w	800cf7e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00d      	beq.n	800d108 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d0ec:	f001 fb2c 	bl	800e748 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d0f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0f2:	f000 f894 	bl	800d21e <prvGetDisinheritPriorityAfterTimeout>
 800d0f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0fe:	4618      	mov	r0, r3
 800d100:	f001 f906 	bl	800e310 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d104:	f001 fb52 	bl	800e7ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d108:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3738      	adds	r7, #56	; 0x38
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	e000ed04 	.word	0xe000ed04

0800d118 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08e      	sub	sp, #56	; 0x38
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10b      	bne.n	800d146 <xQueueReceiveFromISR+0x2e>
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	b672      	cpsid	i
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	b662      	cpsie	i
 800d142:	623b      	str	r3, [r7, #32]
 800d144:	e7fe      	b.n	800d144 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d103      	bne.n	800d154 <xQueueReceiveFromISR+0x3c>
 800d14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d150:	2b00      	cmp	r3, #0
 800d152:	d101      	bne.n	800d158 <xQueueReceiveFromISR+0x40>
 800d154:	2301      	movs	r3, #1
 800d156:	e000      	b.n	800d15a <xQueueReceiveFromISR+0x42>
 800d158:	2300      	movs	r3, #0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10b      	bne.n	800d176 <xQueueReceiveFromISR+0x5e>
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	b672      	cpsid	i
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	b662      	cpsie	i
 800d172:	61fb      	str	r3, [r7, #28]
 800d174:	e7fe      	b.n	800d174 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d176:	f001 fbc7 	bl	800e908 <vPortValidateInterruptPriority>
	__asm volatile
 800d17a:	f3ef 8211 	mrs	r2, BASEPRI
 800d17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d182:	b672      	cpsid	i
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	b662      	cpsie	i
 800d192:	61ba      	str	r2, [r7, #24]
 800d194:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d196:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d198:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d02f      	beq.n	800d206 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1b0:	68b9      	ldr	r1, [r7, #8]
 800d1b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1b4:	f000 f8b5 	bl	800d322 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ba:	1e5a      	subs	r2, r3, #1
 800d1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d1c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c8:	d112      	bne.n	800d1f0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d016      	beq.n	800d200 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d4:	3310      	adds	r3, #16
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 fdb4 	bl	800dd44 <xTaskRemoveFromEventList>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00e      	beq.n	800d200 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00b      	beq.n	800d200 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	601a      	str	r2, [r3, #0]
 800d1ee:	e007      	b.n	800d200 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	b25a      	sxtb	r2, r3
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d200:	2301      	movs	r3, #1
 800d202:	637b      	str	r3, [r7, #52]	; 0x34
 800d204:	e001      	b.n	800d20a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d206:	2300      	movs	r3, #0
 800d208:	637b      	str	r3, [r7, #52]	; 0x34
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d216:	4618      	mov	r0, r3
 800d218:	3738      	adds	r7, #56	; 0x38
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d21e:	b480      	push	{r7}
 800d220:	b085      	sub	sp, #20
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d006      	beq.n	800d23c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f1c3 0307 	rsb	r3, r3, #7
 800d238:	60fb      	str	r3, [r7, #12]
 800d23a:	e001      	b.n	800d240 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d23c:	2300      	movs	r3, #0
 800d23e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d240:	68fb      	ldr	r3, [r7, #12]
	}
 800d242:	4618      	mov	r0, r3
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b086      	sub	sp, #24
 800d252:	af00      	add	r7, sp, #0
 800d254:	60f8      	str	r0, [r7, #12]
 800d256:	60b9      	str	r1, [r7, #8]
 800d258:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d25a:	2300      	movs	r3, #0
 800d25c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10d      	bne.n	800d288 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d14d      	bne.n	800d310 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 ffc1 	bl	800e200 <xTaskPriorityDisinherit>
 800d27e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	609a      	str	r2, [r3, #8]
 800d286:	e043      	b.n	800d310 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d119      	bne.n	800d2c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6858      	ldr	r0, [r3, #4]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d296:	461a      	mov	r2, r3
 800d298:	68b9      	ldr	r1, [r7, #8]
 800d29a:	f018 f9e5 	bl	8025668 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	685a      	ldr	r2, [r3, #4]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a6:	441a      	add	r2, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	685a      	ldr	r2, [r3, #4]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d32b      	bcc.n	800d310 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	605a      	str	r2, [r3, #4]
 800d2c0:	e026      	b.n	800d310 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	68d8      	ldr	r0, [r3, #12]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	68b9      	ldr	r1, [r7, #8]
 800d2ce:	f018 f9cb 	bl	8025668 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	68da      	ldr	r2, [r3, #12]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2da:	425b      	negs	r3, r3
 800d2dc:	441a      	add	r2, r3
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	68da      	ldr	r2, [r3, #12]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d207      	bcs.n	800d2fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	689a      	ldr	r2, [r3, #8]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f6:	425b      	negs	r3, r3
 800d2f8:	441a      	add	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b02      	cmp	r3, #2
 800d302:	d105      	bne.n	800d310 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d002      	beq.n	800d310 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	3b01      	subs	r3, #1
 800d30e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d318:	697b      	ldr	r3, [r7, #20]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3718      	adds	r7, #24
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d322:	b580      	push	{r7, lr}
 800d324:	b082      	sub	sp, #8
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
 800d32a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d330:	2b00      	cmp	r3, #0
 800d332:	d018      	beq.n	800d366 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	68da      	ldr	r2, [r3, #12]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33c:	441a      	add	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68da      	ldr	r2, [r3, #12]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d303      	bcc.n	800d356 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68d9      	ldr	r1, [r3, #12]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35e:	461a      	mov	r2, r3
 800d360:	6838      	ldr	r0, [r7, #0]
 800d362:	f018 f981 	bl	8025668 <memcpy>
	}
}
 800d366:	bf00      	nop
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b084      	sub	sp, #16
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d376:	f001 f9e7 	bl	800e748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d380:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d382:	e011      	b.n	800d3a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d012      	beq.n	800d3b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	3324      	adds	r3, #36	; 0x24
 800d390:	4618      	mov	r0, r3
 800d392:	f000 fcd7 	bl	800dd44 <xTaskRemoveFromEventList>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d001      	beq.n	800d3a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d39c:	f000 fdb0 	bl	800df00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	dce9      	bgt.n	800d384 <prvUnlockQueue+0x16>
 800d3b0:	e000      	b.n	800d3b4 <prvUnlockQueue+0x46>
					break;
 800d3b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	22ff      	movs	r2, #255	; 0xff
 800d3b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d3bc:	f001 f9f6 	bl	800e7ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d3c0:	f001 f9c2 	bl	800e748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3cc:	e011      	b.n	800d3f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d012      	beq.n	800d3fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	3310      	adds	r3, #16
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f000 fcb2 	bl	800dd44 <xTaskRemoveFromEventList>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d001      	beq.n	800d3ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d3e6:	f000 fd8b 	bl	800df00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d3ea:	7bbb      	ldrb	r3, [r7, #14]
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	dce9      	bgt.n	800d3ce <prvUnlockQueue+0x60>
 800d3fa:	e000      	b.n	800d3fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	22ff      	movs	r2, #255	; 0xff
 800d402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d406:	f001 f9d1 	bl	800e7ac <vPortExitCritical>
}
 800d40a:	bf00      	nop
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d41a:	f001 f995 	bl	800e748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d422:	2b00      	cmp	r3, #0
 800d424:	d102      	bne.n	800d42c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d426:	2301      	movs	r3, #1
 800d428:	60fb      	str	r3, [r7, #12]
 800d42a:	e001      	b.n	800d430 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d42c:	2300      	movs	r3, #0
 800d42e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d430:	f001 f9bc 	bl	800e7ac <vPortExitCritical>

	return xReturn;
 800d434:	68fb      	ldr	r3, [r7, #12]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b084      	sub	sp, #16
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d446:	f001 f97f 	bl	800e748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d452:	429a      	cmp	r2, r3
 800d454:	d102      	bne.n	800d45c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d456:	2301      	movs	r3, #1
 800d458:	60fb      	str	r3, [r7, #12]
 800d45a:	e001      	b.n	800d460 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d45c:	2300      	movs	r3, #0
 800d45e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d460:	f001 f9a4 	bl	800e7ac <vPortExitCritical>

	return xReturn;
 800d464:	68fb      	ldr	r3, [r7, #12]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b08e      	sub	sp, #56	; 0x38
 800d472:	af04      	add	r7, sp, #16
 800d474:	60f8      	str	r0, [r7, #12]
 800d476:	60b9      	str	r1, [r7, #8]
 800d478:	607a      	str	r2, [r7, #4]
 800d47a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d10b      	bne.n	800d49a <xTaskCreateStatic+0x2c>
	__asm volatile
 800d482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d486:	b672      	cpsid	i
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	b662      	cpsie	i
 800d496:	623b      	str	r3, [r7, #32]
 800d498:	e7fe      	b.n	800d498 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10b      	bne.n	800d4b8 <xTaskCreateStatic+0x4a>
 800d4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a4:	b672      	cpsid	i
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	b662      	cpsie	i
 800d4b4:	61fb      	str	r3, [r7, #28]
 800d4b6:	e7fe      	b.n	800d4b6 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d4b8:	2358      	movs	r3, #88	; 0x58
 800d4ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	2b58      	cmp	r3, #88	; 0x58
 800d4c0:	d00b      	beq.n	800d4da <xTaskCreateStatic+0x6c>
 800d4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c6:	b672      	cpsid	i
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	b662      	cpsie	i
 800d4d6:	61bb      	str	r3, [r7, #24]
 800d4d8:	e7fe      	b.n	800d4d8 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d4da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d01e      	beq.n	800d520 <xTaskCreateStatic+0xb2>
 800d4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d01b      	beq.n	800d520 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f4:	2202      	movs	r2, #2
 800d4f6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9303      	str	r3, [sp, #12]
 800d4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d500:	9302      	str	r3, [sp, #8]
 800d502:	f107 0314 	add.w	r3, r7, #20
 800d506:	9301      	str	r3, [sp, #4]
 800d508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	68b9      	ldr	r1, [r7, #8]
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f000 f850 	bl	800d5b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d51a:	f000 f8e1 	bl	800d6e0 <prvAddNewTaskToReadyList>
 800d51e:	e001      	b.n	800d524 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d520:	2300      	movs	r3, #0
 800d522:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d524:	697b      	ldr	r3, [r7, #20]
	}
 800d526:	4618      	mov	r0, r3
 800d528:	3728      	adds	r7, #40	; 0x28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d52e:	b580      	push	{r7, lr}
 800d530:	b08c      	sub	sp, #48	; 0x30
 800d532:	af04      	add	r7, sp, #16
 800d534:	60f8      	str	r0, [r7, #12]
 800d536:	60b9      	str	r1, [r7, #8]
 800d538:	603b      	str	r3, [r7, #0]
 800d53a:	4613      	mov	r3, r2
 800d53c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d53e:	88fb      	ldrh	r3, [r7, #6]
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	4618      	mov	r0, r3
 800d544:	f001 fa22 	bl	800e98c <pvPortMalloc>
 800d548:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00e      	beq.n	800d56e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d550:	2058      	movs	r0, #88	; 0x58
 800d552:	f001 fa1b 	bl	800e98c <pvPortMalloc>
 800d556:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d003      	beq.n	800d566 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	697a      	ldr	r2, [r7, #20]
 800d562:	631a      	str	r2, [r3, #48]	; 0x30
 800d564:	e005      	b.n	800d572 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d566:	6978      	ldr	r0, [r7, #20]
 800d568:	f001 fadc 	bl	800eb24 <vPortFree>
 800d56c:	e001      	b.n	800d572 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d56e:	2300      	movs	r3, #0
 800d570:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d017      	beq.n	800d5a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d580:	88fa      	ldrh	r2, [r7, #6]
 800d582:	2300      	movs	r3, #0
 800d584:	9303      	str	r3, [sp, #12]
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	9302      	str	r3, [sp, #8]
 800d58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	68b9      	ldr	r1, [r7, #8]
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f000 f80e 	bl	800d5b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d59c:	69f8      	ldr	r0, [r7, #28]
 800d59e:	f000 f89f 	bl	800d6e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	61bb      	str	r3, [r7, #24]
 800d5a6:	e002      	b.n	800d5ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d5ae:	69bb      	ldr	r3, [r7, #24]
	}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3720      	adds	r7, #32
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b088      	sub	sp, #32
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
 800d5c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	21a5      	movs	r1, #165	; 0xa5
 800d5d2:	f018 f854 	bl	802567e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5da:	6879      	ldr	r1, [r7, #4]
 800d5dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d5e0:	440b      	add	r3, r1
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	f023 0307 	bic.w	r3, r3, #7
 800d5ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	f003 0307 	and.w	r3, r3, #7
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00b      	beq.n	800d612 <prvInitialiseNewTask+0x5a>
 800d5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fe:	b672      	cpsid	i
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	b662      	cpsie	i
 800d60e:	617b      	str	r3, [r7, #20]
 800d610:	e7fe      	b.n	800d610 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d01f      	beq.n	800d658 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d618:	2300      	movs	r3, #0
 800d61a:	61fb      	str	r3, [r7, #28]
 800d61c:	e012      	b.n	800d644 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	4413      	add	r3, r2
 800d624:	7819      	ldrb	r1, [r3, #0]
 800d626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	4413      	add	r3, r2
 800d62c:	3334      	adds	r3, #52	; 0x34
 800d62e:	460a      	mov	r2, r1
 800d630:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d632:	68ba      	ldr	r2, [r7, #8]
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	4413      	add	r3, r2
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d006      	beq.n	800d64c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	3301      	adds	r3, #1
 800d642:	61fb      	str	r3, [r7, #28]
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	2b0f      	cmp	r3, #15
 800d648:	d9e9      	bls.n	800d61e <prvInitialiseNewTask+0x66>
 800d64a:	e000      	b.n	800d64e <prvInitialiseNewTask+0x96>
			{
				break;
 800d64c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	2200      	movs	r2, #0
 800d652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d656:	e003      	b.n	800d660 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65a:	2200      	movs	r2, #0
 800d65c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	2b06      	cmp	r3, #6
 800d664:	d901      	bls.n	800d66a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d666:	2306      	movs	r3, #6
 800d668:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d66e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d674:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	2200      	movs	r2, #0
 800d67a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67e:	3304      	adds	r3, #4
 800d680:	4618      	mov	r0, r3
 800d682:	f7fe ff4b 	bl	800c51c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d688:	3318      	adds	r3, #24
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fe ff46 	bl	800c51c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d694:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d698:	f1c3 0207 	rsb	r2, r3, #7
 800d69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	68f9      	ldr	r1, [r7, #12]
 800d6be:	69b8      	ldr	r0, [r7, #24]
 800d6c0:	f000 ff3c 	bl	800e53c <pxPortInitialiseStack>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d002      	beq.n	800d6d6 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6d6:	bf00      	nop
 800d6d8:	3720      	adds	r7, #32
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
	...

0800d6e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d6e8:	f001 f82e 	bl	800e748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d6ec:	4b2a      	ldr	r3, [pc, #168]	; (800d798 <prvAddNewTaskToReadyList+0xb8>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	4a29      	ldr	r2, [pc, #164]	; (800d798 <prvAddNewTaskToReadyList+0xb8>)
 800d6f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d6f6:	4b29      	ldr	r3, [pc, #164]	; (800d79c <prvAddNewTaskToReadyList+0xbc>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d109      	bne.n	800d712 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d6fe:	4a27      	ldr	r2, [pc, #156]	; (800d79c <prvAddNewTaskToReadyList+0xbc>)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d704:	4b24      	ldr	r3, [pc, #144]	; (800d798 <prvAddNewTaskToReadyList+0xb8>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d110      	bne.n	800d72e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d70c:	f000 fc1e 	bl	800df4c <prvInitialiseTaskLists>
 800d710:	e00d      	b.n	800d72e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d712:	4b23      	ldr	r3, [pc, #140]	; (800d7a0 <prvAddNewTaskToReadyList+0xc0>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d109      	bne.n	800d72e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d71a:	4b20      	ldr	r3, [pc, #128]	; (800d79c <prvAddNewTaskToReadyList+0xbc>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d724:	429a      	cmp	r2, r3
 800d726:	d802      	bhi.n	800d72e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d728:	4a1c      	ldr	r2, [pc, #112]	; (800d79c <prvAddNewTaskToReadyList+0xbc>)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d72e:	4b1d      	ldr	r3, [pc, #116]	; (800d7a4 <prvAddNewTaskToReadyList+0xc4>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3301      	adds	r3, #1
 800d734:	4a1b      	ldr	r2, [pc, #108]	; (800d7a4 <prvAddNewTaskToReadyList+0xc4>)
 800d736:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d73c:	2201      	movs	r2, #1
 800d73e:	409a      	lsls	r2, r3
 800d740:	4b19      	ldr	r3, [pc, #100]	; (800d7a8 <prvAddNewTaskToReadyList+0xc8>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4313      	orrs	r3, r2
 800d746:	4a18      	ldr	r2, [pc, #96]	; (800d7a8 <prvAddNewTaskToReadyList+0xc8>)
 800d748:	6013      	str	r3, [r2, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d74e:	4613      	mov	r3, r2
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	4a15      	ldr	r2, [pc, #84]	; (800d7ac <prvAddNewTaskToReadyList+0xcc>)
 800d758:	441a      	add	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	3304      	adds	r3, #4
 800d75e:	4619      	mov	r1, r3
 800d760:	4610      	mov	r0, r2
 800d762:	f7fe fee8 	bl	800c536 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d766:	f001 f821 	bl	800e7ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d76a:	4b0d      	ldr	r3, [pc, #52]	; (800d7a0 <prvAddNewTaskToReadyList+0xc0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00e      	beq.n	800d790 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d772:	4b0a      	ldr	r3, [pc, #40]	; (800d79c <prvAddNewTaskToReadyList+0xbc>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d207      	bcs.n	800d790 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d780:	4b0b      	ldr	r3, [pc, #44]	; (800d7b0 <prvAddNewTaskToReadyList+0xd0>)
 800d782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d786:	601a      	str	r2, [r3, #0]
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	200004cc 	.word	0x200004cc
 800d79c:	200003cc 	.word	0x200003cc
 800d7a0:	200004d8 	.word	0x200004d8
 800d7a4:	200004e8 	.word	0x200004e8
 800d7a8:	200004d4 	.word	0x200004d4
 800d7ac:	200003d0 	.word	0x200003d0
 800d7b0:	e000ed04 	.word	0xe000ed04

0800d7b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d018      	beq.n	800d7f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d7c6:	4b14      	ldr	r3, [pc, #80]	; (800d818 <vTaskDelay+0x64>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00b      	beq.n	800d7e6 <vTaskDelay+0x32>
 800d7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d2:	b672      	cpsid	i
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	b662      	cpsie	i
 800d7e2:	60bb      	str	r3, [r7, #8]
 800d7e4:	e7fe      	b.n	800d7e4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d7e6:	f000 f87d 	bl	800d8e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 fe3f 	bl	800e470 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d7f2:	f000 f885 	bl	800d900 <xTaskResumeAll>
 800d7f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d107      	bne.n	800d80e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d7fe:	4b07      	ldr	r3, [pc, #28]	; (800d81c <vTaskDelay+0x68>)
 800d800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d804:	601a      	str	r2, [r3, #0]
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d80e:	bf00      	nop
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	200004f4 	.word	0x200004f4
 800d81c:	e000ed04 	.word	0xe000ed04

0800d820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b08a      	sub	sp, #40	; 0x28
 800d824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d826:	2300      	movs	r3, #0
 800d828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d82e:	463a      	mov	r2, r7
 800d830:	1d39      	adds	r1, r7, #4
 800d832:	f107 0308 	add.w	r3, r7, #8
 800d836:	4618      	mov	r0, r3
 800d838:	f7f3 f968 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d83c:	6839      	ldr	r1, [r7, #0]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68ba      	ldr	r2, [r7, #8]
 800d842:	9202      	str	r2, [sp, #8]
 800d844:	9301      	str	r3, [sp, #4]
 800d846:	2300      	movs	r3, #0
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	2300      	movs	r3, #0
 800d84c:	460a      	mov	r2, r1
 800d84e:	491f      	ldr	r1, [pc, #124]	; (800d8cc <vTaskStartScheduler+0xac>)
 800d850:	481f      	ldr	r0, [pc, #124]	; (800d8d0 <vTaskStartScheduler+0xb0>)
 800d852:	f7ff fe0c 	bl	800d46e <xTaskCreateStatic>
 800d856:	4602      	mov	r2, r0
 800d858:	4b1e      	ldr	r3, [pc, #120]	; (800d8d4 <vTaskStartScheduler+0xb4>)
 800d85a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d85c:	4b1d      	ldr	r3, [pc, #116]	; (800d8d4 <vTaskStartScheduler+0xb4>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d002      	beq.n	800d86a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d864:	2301      	movs	r3, #1
 800d866:	617b      	str	r3, [r7, #20]
 800d868:	e001      	b.n	800d86e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d86a:	2300      	movs	r3, #0
 800d86c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d117      	bne.n	800d8a4 <vTaskStartScheduler+0x84>
 800d874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d878:	b672      	cpsid	i
 800d87a:	f383 8811 	msr	BASEPRI, r3
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	b662      	cpsie	i
 800d888:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d88a:	4b13      	ldr	r3, [pc, #76]	; (800d8d8 <vTaskStartScheduler+0xb8>)
 800d88c:	f04f 32ff 	mov.w	r2, #4294967295
 800d890:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d892:	4b12      	ldr	r3, [pc, #72]	; (800d8dc <vTaskStartScheduler+0xbc>)
 800d894:	2201      	movs	r2, #1
 800d896:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d898:	4b11      	ldr	r3, [pc, #68]	; (800d8e0 <vTaskStartScheduler+0xc0>)
 800d89a:	2200      	movs	r2, #0
 800d89c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d89e:	f000 fed7 	bl	800e650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d8a2:	e00f      	b.n	800d8c4 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8aa:	d10b      	bne.n	800d8c4 <vTaskStartScheduler+0xa4>
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	b672      	cpsid	i
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	b662      	cpsie	i
 800d8c0:	60fb      	str	r3, [r7, #12]
 800d8c2:	e7fe      	b.n	800d8c2 <vTaskStartScheduler+0xa2>
}
 800d8c4:	bf00      	nop
 800d8c6:	3718      	adds	r7, #24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	08026614 	.word	0x08026614
 800d8d0:	0800df19 	.word	0x0800df19
 800d8d4:	200004f0 	.word	0x200004f0
 800d8d8:	200004ec 	.word	0x200004ec
 800d8dc:	200004d8 	.word	0x200004d8
 800d8e0:	200004d0 	.word	0x200004d0

0800d8e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d8e8:	4b04      	ldr	r3, [pc, #16]	; (800d8fc <vTaskSuspendAll+0x18>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	4a03      	ldr	r2, [pc, #12]	; (800d8fc <vTaskSuspendAll+0x18>)
 800d8f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d8f2:	bf00      	nop
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr
 800d8fc:	200004f4 	.word	0x200004f4

0800d900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d906:	2300      	movs	r3, #0
 800d908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d90a:	2300      	movs	r3, #0
 800d90c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d90e:	4b42      	ldr	r3, [pc, #264]	; (800da18 <xTaskResumeAll+0x118>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10b      	bne.n	800d92e <xTaskResumeAll+0x2e>
 800d916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91a:	b672      	cpsid	i
 800d91c:	f383 8811 	msr	BASEPRI, r3
 800d920:	f3bf 8f6f 	isb	sy
 800d924:	f3bf 8f4f 	dsb	sy
 800d928:	b662      	cpsie	i
 800d92a:	603b      	str	r3, [r7, #0]
 800d92c:	e7fe      	b.n	800d92c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d92e:	f000 ff0b 	bl	800e748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d932:	4b39      	ldr	r3, [pc, #228]	; (800da18 <xTaskResumeAll+0x118>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	3b01      	subs	r3, #1
 800d938:	4a37      	ldr	r2, [pc, #220]	; (800da18 <xTaskResumeAll+0x118>)
 800d93a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d93c:	4b36      	ldr	r3, [pc, #216]	; (800da18 <xTaskResumeAll+0x118>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d161      	bne.n	800da08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d944:	4b35      	ldr	r3, [pc, #212]	; (800da1c <xTaskResumeAll+0x11c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d05d      	beq.n	800da08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d94c:	e02e      	b.n	800d9ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d94e:	4b34      	ldr	r3, [pc, #208]	; (800da20 <xTaskResumeAll+0x120>)
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	3318      	adds	r3, #24
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fe fe48 	bl	800c5f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	3304      	adds	r3, #4
 800d964:	4618      	mov	r0, r3
 800d966:	f7fe fe43 	bl	800c5f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96e:	2201      	movs	r2, #1
 800d970:	409a      	lsls	r2, r3
 800d972:	4b2c      	ldr	r3, [pc, #176]	; (800da24 <xTaskResumeAll+0x124>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4313      	orrs	r3, r2
 800d978:	4a2a      	ldr	r2, [pc, #168]	; (800da24 <xTaskResumeAll+0x124>)
 800d97a:	6013      	str	r3, [r2, #0]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d980:	4613      	mov	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4a27      	ldr	r2, [pc, #156]	; (800da28 <xTaskResumeAll+0x128>)
 800d98a:	441a      	add	r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	3304      	adds	r3, #4
 800d990:	4619      	mov	r1, r3
 800d992:	4610      	mov	r0, r2
 800d994:	f7fe fdcf 	bl	800c536 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d99c:	4b23      	ldr	r3, [pc, #140]	; (800da2c <xTaskResumeAll+0x12c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d302      	bcc.n	800d9ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d9a6:	4b22      	ldr	r3, [pc, #136]	; (800da30 <xTaskResumeAll+0x130>)
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9ac:	4b1c      	ldr	r3, [pc, #112]	; (800da20 <xTaskResumeAll+0x120>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d1cc      	bne.n	800d94e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d9ba:	f000 fb63 	bl	800e084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d9be:	4b1d      	ldr	r3, [pc, #116]	; (800da34 <xTaskResumeAll+0x134>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d010      	beq.n	800d9ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d9ca:	f000 f859 	bl	800da80 <xTaskIncrementTick>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d9d4:	4b16      	ldr	r3, [pc, #88]	; (800da30 <xTaskResumeAll+0x130>)
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1f1      	bne.n	800d9ca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d9e6:	4b13      	ldr	r3, [pc, #76]	; (800da34 <xTaskResumeAll+0x134>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d9ec:	4b10      	ldr	r3, [pc, #64]	; (800da30 <xTaskResumeAll+0x130>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d009      	beq.n	800da08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d9f8:	4b0f      	ldr	r3, [pc, #60]	; (800da38 <xTaskResumeAll+0x138>)
 800d9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da08:	f000 fed0 	bl	800e7ac <vPortExitCritical>

	return xAlreadyYielded;
 800da0c:	68bb      	ldr	r3, [r7, #8]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	200004f4 	.word	0x200004f4
 800da1c:	200004cc 	.word	0x200004cc
 800da20:	2000048c 	.word	0x2000048c
 800da24:	200004d4 	.word	0x200004d4
 800da28:	200003d0 	.word	0x200003d0
 800da2c:	200003cc 	.word	0x200003cc
 800da30:	200004e0 	.word	0x200004e0
 800da34:	200004dc 	.word	0x200004dc
 800da38:	e000ed04 	.word	0xe000ed04

0800da3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800da42:	4b05      	ldr	r3, [pc, #20]	; (800da58 <xTaskGetTickCount+0x1c>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800da48:	687b      	ldr	r3, [r7, #4]
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	200004d0 	.word	0x200004d0

0800da5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da62:	f000 ff51 	bl	800e908 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800da66:	2300      	movs	r3, #0
 800da68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800da6a:	4b04      	ldr	r3, [pc, #16]	; (800da7c <xTaskGetTickCountFromISR+0x20>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da70:	683b      	ldr	r3, [r7, #0]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	200004d0 	.word	0x200004d0

0800da80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800da86:	2300      	movs	r3, #0
 800da88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da8a:	4b4f      	ldr	r3, [pc, #316]	; (800dbc8 <xTaskIncrementTick+0x148>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f040 8089 	bne.w	800dba6 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da94:	4b4d      	ldr	r3, [pc, #308]	; (800dbcc <xTaskIncrementTick+0x14c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	3301      	adds	r3, #1
 800da9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da9c:	4a4b      	ldr	r2, [pc, #300]	; (800dbcc <xTaskIncrementTick+0x14c>)
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d121      	bne.n	800daec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800daa8:	4b49      	ldr	r3, [pc, #292]	; (800dbd0 <xTaskIncrementTick+0x150>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00b      	beq.n	800daca <xTaskIncrementTick+0x4a>
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	b672      	cpsid	i
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	b662      	cpsie	i
 800dac6:	603b      	str	r3, [r7, #0]
 800dac8:	e7fe      	b.n	800dac8 <xTaskIncrementTick+0x48>
 800daca:	4b41      	ldr	r3, [pc, #260]	; (800dbd0 <xTaskIncrementTick+0x150>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	60fb      	str	r3, [r7, #12]
 800dad0:	4b40      	ldr	r3, [pc, #256]	; (800dbd4 <xTaskIncrementTick+0x154>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a3e      	ldr	r2, [pc, #248]	; (800dbd0 <xTaskIncrementTick+0x150>)
 800dad6:	6013      	str	r3, [r2, #0]
 800dad8:	4a3e      	ldr	r2, [pc, #248]	; (800dbd4 <xTaskIncrementTick+0x154>)
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6013      	str	r3, [r2, #0]
 800dade:	4b3e      	ldr	r3, [pc, #248]	; (800dbd8 <xTaskIncrementTick+0x158>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3301      	adds	r3, #1
 800dae4:	4a3c      	ldr	r2, [pc, #240]	; (800dbd8 <xTaskIncrementTick+0x158>)
 800dae6:	6013      	str	r3, [r2, #0]
 800dae8:	f000 facc 	bl	800e084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800daec:	4b3b      	ldr	r3, [pc, #236]	; (800dbdc <xTaskIncrementTick+0x15c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	693a      	ldr	r2, [r7, #16]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d348      	bcc.n	800db88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daf6:	4b36      	ldr	r3, [pc, #216]	; (800dbd0 <xTaskIncrementTick+0x150>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d104      	bne.n	800db0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db00:	4b36      	ldr	r3, [pc, #216]	; (800dbdc <xTaskIncrementTick+0x15c>)
 800db02:	f04f 32ff 	mov.w	r2, #4294967295
 800db06:	601a      	str	r2, [r3, #0]
					break;
 800db08:	e03e      	b.n	800db88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db0a:	4b31      	ldr	r3, [pc, #196]	; (800dbd0 <xTaskIncrementTick+0x150>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800db1a:	693a      	ldr	r2, [r7, #16]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d203      	bcs.n	800db2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800db22:	4a2e      	ldr	r2, [pc, #184]	; (800dbdc <xTaskIncrementTick+0x15c>)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800db28:	e02e      	b.n	800db88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	3304      	adds	r3, #4
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fe fd5e 	bl	800c5f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d004      	beq.n	800db46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	3318      	adds	r3, #24
 800db40:	4618      	mov	r0, r3
 800db42:	f7fe fd55 	bl	800c5f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4a:	2201      	movs	r2, #1
 800db4c:	409a      	lsls	r2, r3
 800db4e:	4b24      	ldr	r3, [pc, #144]	; (800dbe0 <xTaskIncrementTick+0x160>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4313      	orrs	r3, r2
 800db54:	4a22      	ldr	r2, [pc, #136]	; (800dbe0 <xTaskIncrementTick+0x160>)
 800db56:	6013      	str	r3, [r2, #0]
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db5c:	4613      	mov	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4413      	add	r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	4a1f      	ldr	r2, [pc, #124]	; (800dbe4 <xTaskIncrementTick+0x164>)
 800db66:	441a      	add	r2, r3
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	3304      	adds	r3, #4
 800db6c:	4619      	mov	r1, r3
 800db6e:	4610      	mov	r0, r2
 800db70:	f7fe fce1 	bl	800c536 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db78:	4b1b      	ldr	r3, [pc, #108]	; (800dbe8 <xTaskIncrementTick+0x168>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db7e:	429a      	cmp	r2, r3
 800db80:	d3b9      	bcc.n	800daf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800db82:	2301      	movs	r3, #1
 800db84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db86:	e7b6      	b.n	800daf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db88:	4b17      	ldr	r3, [pc, #92]	; (800dbe8 <xTaskIncrementTick+0x168>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db8e:	4915      	ldr	r1, [pc, #84]	; (800dbe4 <xTaskIncrementTick+0x164>)
 800db90:	4613      	mov	r3, r2
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	4413      	add	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	440b      	add	r3, r1
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d907      	bls.n	800dbb0 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800dba0:	2301      	movs	r3, #1
 800dba2:	617b      	str	r3, [r7, #20]
 800dba4:	e004      	b.n	800dbb0 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dba6:	4b11      	ldr	r3, [pc, #68]	; (800dbec <xTaskIncrementTick+0x16c>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	4a0f      	ldr	r2, [pc, #60]	; (800dbec <xTaskIncrementTick+0x16c>)
 800dbae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dbb0:	4b0f      	ldr	r3, [pc, #60]	; (800dbf0 <xTaskIncrementTick+0x170>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dbbc:	697b      	ldr	r3, [r7, #20]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3718      	adds	r7, #24
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	200004f4 	.word	0x200004f4
 800dbcc:	200004d0 	.word	0x200004d0
 800dbd0:	20000484 	.word	0x20000484
 800dbd4:	20000488 	.word	0x20000488
 800dbd8:	200004e4 	.word	0x200004e4
 800dbdc:	200004ec 	.word	0x200004ec
 800dbe0:	200004d4 	.word	0x200004d4
 800dbe4:	200003d0 	.word	0x200003d0
 800dbe8:	200003cc 	.word	0x200003cc
 800dbec:	200004dc 	.word	0x200004dc
 800dbf0:	200004e0 	.word	0x200004e0

0800dbf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b088      	sub	sp, #32
 800dbf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dbfa:	4b3a      	ldr	r3, [pc, #232]	; (800dce4 <vTaskSwitchContext+0xf0>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc02:	4b39      	ldr	r3, [pc, #228]	; (800dce8 <vTaskSwitchContext+0xf4>)
 800dc04:	2201      	movs	r2, #1
 800dc06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc08:	e067      	b.n	800dcda <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800dc0a:	4b37      	ldr	r3, [pc, #220]	; (800dce8 <vTaskSwitchContext+0xf4>)
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dc10:	4b36      	ldr	r3, [pc, #216]	; (800dcec <vTaskSwitchContext+0xf8>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc16:	61fb      	str	r3, [r7, #28]
 800dc18:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dc1c:	61bb      	str	r3, [r7, #24]
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	69ba      	ldr	r2, [r7, #24]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d111      	bne.n	800dc4c <vTaskSwitchContext+0x58>
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	69ba      	ldr	r2, [r7, #24]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d10b      	bne.n	800dc4c <vTaskSwitchContext+0x58>
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	3308      	adds	r3, #8
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	69ba      	ldr	r2, [r7, #24]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d105      	bne.n	800dc4c <vTaskSwitchContext+0x58>
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	330c      	adds	r3, #12
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	69ba      	ldr	r2, [r7, #24]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d008      	beq.n	800dc5e <vTaskSwitchContext+0x6a>
 800dc4c:	4b27      	ldr	r3, [pc, #156]	; (800dcec <vTaskSwitchContext+0xf8>)
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	4b26      	ldr	r3, [pc, #152]	; (800dcec <vTaskSwitchContext+0xf8>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	3334      	adds	r3, #52	; 0x34
 800dc56:	4619      	mov	r1, r3
 800dc58:	4610      	mov	r0, r2
 800dc5a:	f7f2 ff44 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc5e:	4b24      	ldr	r3, [pc, #144]	; (800dcf0 <vTaskSwitchContext+0xfc>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	fab3 f383 	clz	r3, r3
 800dc6a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dc6c:	7afb      	ldrb	r3, [r7, #11]
 800dc6e:	f1c3 031f 	rsb	r3, r3, #31
 800dc72:	617b      	str	r3, [r7, #20]
 800dc74:	491f      	ldr	r1, [pc, #124]	; (800dcf4 <vTaskSwitchContext+0x100>)
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	4413      	add	r3, r2
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	440b      	add	r3, r1
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d10b      	bne.n	800dca0 <vTaskSwitchContext+0xac>
	__asm volatile
 800dc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8c:	b672      	cpsid	i
 800dc8e:	f383 8811 	msr	BASEPRI, r3
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	f3bf 8f4f 	dsb	sy
 800dc9a:	b662      	cpsie	i
 800dc9c:	607b      	str	r3, [r7, #4]
 800dc9e:	e7fe      	b.n	800dc9e <vTaskSwitchContext+0xaa>
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	4613      	mov	r3, r2
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	4413      	add	r3, r2
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4a12      	ldr	r2, [pc, #72]	; (800dcf4 <vTaskSwitchContext+0x100>)
 800dcac:	4413      	add	r3, r2
 800dcae:	613b      	str	r3, [r7, #16]
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	685a      	ldr	r2, [r3, #4]
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	605a      	str	r2, [r3, #4]
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	3308      	adds	r3, #8
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d104      	bne.n	800dcd0 <vTaskSwitchContext+0xdc>
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	685a      	ldr	r2, [r3, #4]
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	605a      	str	r2, [r3, #4]
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	4a05      	ldr	r2, [pc, #20]	; (800dcec <vTaskSwitchContext+0xf8>)
 800dcd8:	6013      	str	r3, [r2, #0]
}
 800dcda:	bf00      	nop
 800dcdc:	3720      	adds	r7, #32
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	200004f4 	.word	0x200004f4
 800dce8:	200004e0 	.word	0x200004e0
 800dcec:	200003cc 	.word	0x200003cc
 800dcf0:	200004d4 	.word	0x200004d4
 800dcf4:	200003d0 	.word	0x200003d0

0800dcf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d10b      	bne.n	800dd20 <vTaskPlaceOnEventList+0x28>
 800dd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0c:	b672      	cpsid	i
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	b662      	cpsie	i
 800dd1c:	60fb      	str	r3, [r7, #12]
 800dd1e:	e7fe      	b.n	800dd1e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd20:	4b07      	ldr	r3, [pc, #28]	; (800dd40 <vTaskPlaceOnEventList+0x48>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	3318      	adds	r3, #24
 800dd26:	4619      	mov	r1, r3
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f7fe fc28 	bl	800c57e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd2e:	2101      	movs	r1, #1
 800dd30:	6838      	ldr	r0, [r7, #0]
 800dd32:	f000 fb9d 	bl	800e470 <prvAddCurrentTaskToDelayedList>
}
 800dd36:	bf00      	nop
 800dd38:	3710      	adds	r7, #16
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	200003cc 	.word	0x200003cc

0800dd44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10b      	bne.n	800dd72 <xTaskRemoveFromEventList+0x2e>
 800dd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5e:	b672      	cpsid	i
 800dd60:	f383 8811 	msr	BASEPRI, r3
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	b662      	cpsie	i
 800dd6e:	60fb      	str	r3, [r7, #12]
 800dd70:	e7fe      	b.n	800dd70 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	3318      	adds	r3, #24
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fe fc3a 	bl	800c5f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd7c:	4b1d      	ldr	r3, [pc, #116]	; (800ddf4 <xTaskRemoveFromEventList+0xb0>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d11c      	bne.n	800ddbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	3304      	adds	r3, #4
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fe fc31 	bl	800c5f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd92:	2201      	movs	r2, #1
 800dd94:	409a      	lsls	r2, r3
 800dd96:	4b18      	ldr	r3, [pc, #96]	; (800ddf8 <xTaskRemoveFromEventList+0xb4>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	4a16      	ldr	r2, [pc, #88]	; (800ddf8 <xTaskRemoveFromEventList+0xb4>)
 800dd9e:	6013      	str	r3, [r2, #0]
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda4:	4613      	mov	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	4413      	add	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4a13      	ldr	r2, [pc, #76]	; (800ddfc <xTaskRemoveFromEventList+0xb8>)
 800ddae:	441a      	add	r2, r3
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	4610      	mov	r0, r2
 800ddb8:	f7fe fbbd 	bl	800c536 <vListInsertEnd>
 800ddbc:	e005      	b.n	800ddca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	3318      	adds	r3, #24
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	480e      	ldr	r0, [pc, #56]	; (800de00 <xTaskRemoveFromEventList+0xbc>)
 800ddc6:	f7fe fbb6 	bl	800c536 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddce:	4b0d      	ldr	r3, [pc, #52]	; (800de04 <xTaskRemoveFromEventList+0xc0>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d905      	bls.n	800dde4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dddc:	4b0a      	ldr	r3, [pc, #40]	; (800de08 <xTaskRemoveFromEventList+0xc4>)
 800ddde:	2201      	movs	r2, #1
 800dde0:	601a      	str	r2, [r3, #0]
 800dde2:	e001      	b.n	800dde8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dde4:	2300      	movs	r3, #0
 800dde6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dde8:	697b      	ldr	r3, [r7, #20]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3718      	adds	r7, #24
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	200004f4 	.word	0x200004f4
 800ddf8:	200004d4 	.word	0x200004d4
 800ddfc:	200003d0 	.word	0x200003d0
 800de00:	2000048c 	.word	0x2000048c
 800de04:	200003cc 	.word	0x200003cc
 800de08:	200004e0 	.word	0x200004e0

0800de0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800de14:	4b06      	ldr	r3, [pc, #24]	; (800de30 <vTaskInternalSetTimeOutState+0x24>)
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800de1c:	4b05      	ldr	r3, [pc, #20]	; (800de34 <vTaskInternalSetTimeOutState+0x28>)
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	605a      	str	r2, [r3, #4]
}
 800de24:	bf00      	nop
 800de26:	370c      	adds	r7, #12
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr
 800de30:	200004e4 	.word	0x200004e4
 800de34:	200004d0 	.word	0x200004d0

0800de38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b088      	sub	sp, #32
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d10b      	bne.n	800de60 <xTaskCheckForTimeOut+0x28>
 800de48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4c:	b672      	cpsid	i
 800de4e:	f383 8811 	msr	BASEPRI, r3
 800de52:	f3bf 8f6f 	isb	sy
 800de56:	f3bf 8f4f 	dsb	sy
 800de5a:	b662      	cpsie	i
 800de5c:	613b      	str	r3, [r7, #16]
 800de5e:	e7fe      	b.n	800de5e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10b      	bne.n	800de7e <xTaskCheckForTimeOut+0x46>
 800de66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6a:	b672      	cpsid	i
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	b662      	cpsie	i
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	e7fe      	b.n	800de7c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800de7e:	f000 fc63 	bl	800e748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800de82:	4b1d      	ldr	r3, [pc, #116]	; (800def8 <xTaskCheckForTimeOut+0xc0>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	69ba      	ldr	r2, [r7, #24]
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de9a:	d102      	bne.n	800dea2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de9c:	2300      	movs	r3, #0
 800de9e:	61fb      	str	r3, [r7, #28]
 800dea0:	e023      	b.n	800deea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	4b15      	ldr	r3, [pc, #84]	; (800defc <xTaskCheckForTimeOut+0xc4>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d007      	beq.n	800debe <xTaskCheckForTimeOut+0x86>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	69ba      	ldr	r2, [r7, #24]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d302      	bcc.n	800debe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800deb8:	2301      	movs	r3, #1
 800deba:	61fb      	str	r3, [r7, #28]
 800debc:	e015      	b.n	800deea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	697a      	ldr	r2, [r7, #20]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d20b      	bcs.n	800dee0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	1ad2      	subs	r2, r2, r3
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7ff ff99 	bl	800de0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800deda:	2300      	movs	r3, #0
 800dedc:	61fb      	str	r3, [r7, #28]
 800dede:	e004      	b.n	800deea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dee6:	2301      	movs	r3, #1
 800dee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800deea:	f000 fc5f 	bl	800e7ac <vPortExitCritical>

	return xReturn;
 800deee:	69fb      	ldr	r3, [r7, #28]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3720      	adds	r7, #32
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	200004d0 	.word	0x200004d0
 800defc:	200004e4 	.word	0x200004e4

0800df00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800df00:	b480      	push	{r7}
 800df02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800df04:	4b03      	ldr	r3, [pc, #12]	; (800df14 <vTaskMissedYield+0x14>)
 800df06:	2201      	movs	r2, #1
 800df08:	601a      	str	r2, [r3, #0]
}
 800df0a:	bf00      	nop
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	200004e0 	.word	0x200004e0

0800df18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800df20:	f000 f854 	bl	800dfcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800df24:	4b07      	ldr	r3, [pc, #28]	; (800df44 <prvIdleTask+0x2c>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d907      	bls.n	800df3c <prvIdleTask+0x24>
			{
				taskYIELD();
 800df2c:	4b06      	ldr	r3, [pc, #24]	; (800df48 <prvIdleTask+0x30>)
 800df2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800df3c:	f7f2 fdcc 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800df40:	e7ee      	b.n	800df20 <prvIdleTask+0x8>
 800df42:	bf00      	nop
 800df44:	200003d0 	.word	0x200003d0
 800df48:	e000ed04 	.word	0xe000ed04

0800df4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df52:	2300      	movs	r3, #0
 800df54:	607b      	str	r3, [r7, #4]
 800df56:	e00c      	b.n	800df72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	4613      	mov	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	4413      	add	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4a12      	ldr	r2, [pc, #72]	; (800dfac <prvInitialiseTaskLists+0x60>)
 800df64:	4413      	add	r3, r2
 800df66:	4618      	mov	r0, r3
 800df68:	f7fe fab8 	bl	800c4dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	3301      	adds	r3, #1
 800df70:	607b      	str	r3, [r7, #4]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b06      	cmp	r3, #6
 800df76:	d9ef      	bls.n	800df58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800df78:	480d      	ldr	r0, [pc, #52]	; (800dfb0 <prvInitialiseTaskLists+0x64>)
 800df7a:	f7fe faaf 	bl	800c4dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800df7e:	480d      	ldr	r0, [pc, #52]	; (800dfb4 <prvInitialiseTaskLists+0x68>)
 800df80:	f7fe faac 	bl	800c4dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df84:	480c      	ldr	r0, [pc, #48]	; (800dfb8 <prvInitialiseTaskLists+0x6c>)
 800df86:	f7fe faa9 	bl	800c4dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df8a:	480c      	ldr	r0, [pc, #48]	; (800dfbc <prvInitialiseTaskLists+0x70>)
 800df8c:	f7fe faa6 	bl	800c4dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df90:	480b      	ldr	r0, [pc, #44]	; (800dfc0 <prvInitialiseTaskLists+0x74>)
 800df92:	f7fe faa3 	bl	800c4dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df96:	4b0b      	ldr	r3, [pc, #44]	; (800dfc4 <prvInitialiseTaskLists+0x78>)
 800df98:	4a05      	ldr	r2, [pc, #20]	; (800dfb0 <prvInitialiseTaskLists+0x64>)
 800df9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df9c:	4b0a      	ldr	r3, [pc, #40]	; (800dfc8 <prvInitialiseTaskLists+0x7c>)
 800df9e:	4a05      	ldr	r2, [pc, #20]	; (800dfb4 <prvInitialiseTaskLists+0x68>)
 800dfa0:	601a      	str	r2, [r3, #0]
}
 800dfa2:	bf00      	nop
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	200003d0 	.word	0x200003d0
 800dfb0:	2000045c 	.word	0x2000045c
 800dfb4:	20000470 	.word	0x20000470
 800dfb8:	2000048c 	.word	0x2000048c
 800dfbc:	200004a0 	.word	0x200004a0
 800dfc0:	200004b8 	.word	0x200004b8
 800dfc4:	20000484 	.word	0x20000484
 800dfc8:	20000488 	.word	0x20000488

0800dfcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfd2:	e019      	b.n	800e008 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dfd4:	f000 fbb8 	bl	800e748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfd8:	4b0f      	ldr	r3, [pc, #60]	; (800e018 <prvCheckTasksWaitingTermination+0x4c>)
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fe fb03 	bl	800c5f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dfea:	4b0c      	ldr	r3, [pc, #48]	; (800e01c <prvCheckTasksWaitingTermination+0x50>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	3b01      	subs	r3, #1
 800dff0:	4a0a      	ldr	r2, [pc, #40]	; (800e01c <prvCheckTasksWaitingTermination+0x50>)
 800dff2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dff4:	4b0a      	ldr	r3, [pc, #40]	; (800e020 <prvCheckTasksWaitingTermination+0x54>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	3b01      	subs	r3, #1
 800dffa:	4a09      	ldr	r2, [pc, #36]	; (800e020 <prvCheckTasksWaitingTermination+0x54>)
 800dffc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dffe:	f000 fbd5 	bl	800e7ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f80e 	bl	800e024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e008:	4b05      	ldr	r3, [pc, #20]	; (800e020 <prvCheckTasksWaitingTermination+0x54>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1e1      	bne.n	800dfd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e010:	bf00      	nop
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	200004a0 	.word	0x200004a0
 800e01c:	200004cc 	.word	0x200004cc
 800e020:	200004b4 	.word	0x200004b4

0800e024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e032:	2b00      	cmp	r3, #0
 800e034:	d108      	bne.n	800e048 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 fd72 	bl	800eb24 <vPortFree>
				vPortFree( pxTCB );
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 fd6f 	bl	800eb24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e046:	e019      	b.n	800e07c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d103      	bne.n	800e05a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fd66 	bl	800eb24 <vPortFree>
	}
 800e058:	e010      	b.n	800e07c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e060:	2b02      	cmp	r3, #2
 800e062:	d00b      	beq.n	800e07c <prvDeleteTCB+0x58>
 800e064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e068:	b672      	cpsid	i
 800e06a:	f383 8811 	msr	BASEPRI, r3
 800e06e:	f3bf 8f6f 	isb	sy
 800e072:	f3bf 8f4f 	dsb	sy
 800e076:	b662      	cpsie	i
 800e078:	60fb      	str	r3, [r7, #12]
 800e07a:	e7fe      	b.n	800e07a <prvDeleteTCB+0x56>
	}
 800e07c:	bf00      	nop
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e08a:	4b0c      	ldr	r3, [pc, #48]	; (800e0bc <prvResetNextTaskUnblockTime+0x38>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d104      	bne.n	800e09e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e094:	4b0a      	ldr	r3, [pc, #40]	; (800e0c0 <prvResetNextTaskUnblockTime+0x3c>)
 800e096:	f04f 32ff 	mov.w	r2, #4294967295
 800e09a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e09c:	e008      	b.n	800e0b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e09e:	4b07      	ldr	r3, [pc, #28]	; (800e0bc <prvResetNextTaskUnblockTime+0x38>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	4a04      	ldr	r2, [pc, #16]	; (800e0c0 <prvResetNextTaskUnblockTime+0x3c>)
 800e0ae:	6013      	str	r3, [r2, #0]
}
 800e0b0:	bf00      	nop
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	20000484 	.word	0x20000484
 800e0c0:	200004ec 	.word	0x200004ec

0800e0c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e0ca:	4b0b      	ldr	r3, [pc, #44]	; (800e0f8 <xTaskGetSchedulerState+0x34>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d102      	bne.n	800e0d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	607b      	str	r3, [r7, #4]
 800e0d6:	e008      	b.n	800e0ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0d8:	4b08      	ldr	r3, [pc, #32]	; (800e0fc <xTaskGetSchedulerState+0x38>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d102      	bne.n	800e0e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e0e0:	2302      	movs	r3, #2
 800e0e2:	607b      	str	r3, [r7, #4]
 800e0e4:	e001      	b.n	800e0ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e0ea:	687b      	ldr	r3, [r7, #4]
	}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	370c      	adds	r7, #12
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr
 800e0f8:	200004d8 	.word	0x200004d8
 800e0fc:	200004f4 	.word	0x200004f4

0800e100 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e10c:	2300      	movs	r3, #0
 800e10e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d069      	beq.n	800e1ea <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e11a:	4b36      	ldr	r3, [pc, #216]	; (800e1f4 <xTaskPriorityInherit+0xf4>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e120:	429a      	cmp	r2, r3
 800e122:	d259      	bcs.n	800e1d8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	699b      	ldr	r3, [r3, #24]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	db06      	blt.n	800e13a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e12c:	4b31      	ldr	r3, [pc, #196]	; (800e1f4 <xTaskPriorityInherit+0xf4>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e132:	f1c3 0207 	rsb	r2, r3, #7
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	6959      	ldr	r1, [r3, #20]
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e142:	4613      	mov	r3, r2
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4413      	add	r3, r2
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	4a2b      	ldr	r2, [pc, #172]	; (800e1f8 <xTaskPriorityInherit+0xf8>)
 800e14c:	4413      	add	r3, r2
 800e14e:	4299      	cmp	r1, r3
 800e150:	d13a      	bne.n	800e1c8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	3304      	adds	r3, #4
 800e156:	4618      	mov	r0, r3
 800e158:	f7fe fa4a 	bl	800c5f0 <uxListRemove>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d115      	bne.n	800e18e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e166:	4924      	ldr	r1, [pc, #144]	; (800e1f8 <xTaskPriorityInherit+0xf8>)
 800e168:	4613      	mov	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	440b      	add	r3, r1
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10a      	bne.n	800e18e <xTaskPriorityInherit+0x8e>
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17c:	2201      	movs	r2, #1
 800e17e:	fa02 f303 	lsl.w	r3, r2, r3
 800e182:	43da      	mvns	r2, r3
 800e184:	4b1d      	ldr	r3, [pc, #116]	; (800e1fc <xTaskPriorityInherit+0xfc>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4013      	ands	r3, r2
 800e18a:	4a1c      	ldr	r2, [pc, #112]	; (800e1fc <xTaskPriorityInherit+0xfc>)
 800e18c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e18e:	4b19      	ldr	r3, [pc, #100]	; (800e1f4 <xTaskPriorityInherit+0xf4>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19c:	2201      	movs	r2, #1
 800e19e:	409a      	lsls	r2, r3
 800e1a0:	4b16      	ldr	r3, [pc, #88]	; (800e1fc <xTaskPriorityInherit+0xfc>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	4a15      	ldr	r2, [pc, #84]	; (800e1fc <xTaskPriorityInherit+0xfc>)
 800e1a8:	6013      	str	r3, [r2, #0]
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	4a10      	ldr	r2, [pc, #64]	; (800e1f8 <xTaskPriorityInherit+0xf8>)
 800e1b8:	441a      	add	r2, r3
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	4619      	mov	r1, r3
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	f7fe f9b8 	bl	800c536 <vListInsertEnd>
 800e1c6:	e004      	b.n	800e1d2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e1c8:	4b0a      	ldr	r3, [pc, #40]	; (800e1f4 <xTaskPriorityInherit+0xf4>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	60fb      	str	r3, [r7, #12]
 800e1d6:	e008      	b.n	800e1ea <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1dc:	4b05      	ldr	r3, [pc, #20]	; (800e1f4 <xTaskPriorityInherit+0xf4>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d201      	bcs.n	800e1ea <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
	}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	200003cc 	.word	0x200003cc
 800e1f8:	200003d0 	.word	0x200003d0
 800e1fc:	200004d4 	.word	0x200004d4

0800e200 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e20c:	2300      	movs	r3, #0
 800e20e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d070      	beq.n	800e2f8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e216:	4b3b      	ldr	r3, [pc, #236]	; (800e304 <xTaskPriorityDisinherit+0x104>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	693a      	ldr	r2, [r7, #16]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d00b      	beq.n	800e238 <xTaskPriorityDisinherit+0x38>
 800e220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e224:	b672      	cpsid	i
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	b662      	cpsie	i
 800e234:	60fb      	str	r3, [r7, #12]
 800e236:	e7fe      	b.n	800e236 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10b      	bne.n	800e258 <xTaskPriorityDisinherit+0x58>
 800e240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e244:	b672      	cpsid	i
 800e246:	f383 8811 	msr	BASEPRI, r3
 800e24a:	f3bf 8f6f 	isb	sy
 800e24e:	f3bf 8f4f 	dsb	sy
 800e252:	b662      	cpsie	i
 800e254:	60bb      	str	r3, [r7, #8]
 800e256:	e7fe      	b.n	800e256 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e25c:	1e5a      	subs	r2, r3, #1
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d044      	beq.n	800e2f8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e272:	2b00      	cmp	r3, #0
 800e274:	d140      	bne.n	800e2f8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	3304      	adds	r3, #4
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fe f9b8 	bl	800c5f0 <uxListRemove>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d115      	bne.n	800e2b2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e28a:	491f      	ldr	r1, [pc, #124]	; (800e308 <xTaskPriorityDisinherit+0x108>)
 800e28c:	4613      	mov	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4413      	add	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	440b      	add	r3, r1
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d10a      	bne.n	800e2b2 <xTaskPriorityDisinherit+0xb2>
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2a6:	43da      	mvns	r2, r3
 800e2a8:	4b18      	ldr	r3, [pc, #96]	; (800e30c <xTaskPriorityDisinherit+0x10c>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4013      	ands	r3, r2
 800e2ae:	4a17      	ldr	r2, [pc, #92]	; (800e30c <xTaskPriorityDisinherit+0x10c>)
 800e2b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2be:	f1c3 0207 	rsb	r2, r3, #7
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	409a      	lsls	r2, r3
 800e2ce:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <xTaskPriorityDisinherit+0x10c>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	4a0d      	ldr	r2, [pc, #52]	; (800e30c <xTaskPriorityDisinherit+0x10c>)
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2dc:	4613      	mov	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	4413      	add	r3, r2
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4a08      	ldr	r2, [pc, #32]	; (800e308 <xTaskPriorityDisinherit+0x108>)
 800e2e6:	441a      	add	r2, r3
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	3304      	adds	r3, #4
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4610      	mov	r0, r2
 800e2f0:	f7fe f921 	bl	800c536 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2f8:	697b      	ldr	r3, [r7, #20]
	}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3718      	adds	r7, #24
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	200003cc 	.word	0x200003cc
 800e308:	200003d0 	.word	0x200003d0
 800e30c:	200004d4 	.word	0x200004d4

0800e310 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e310:	b580      	push	{r7, lr}
 800e312:	b088      	sub	sp, #32
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e31e:	2301      	movs	r3, #1
 800e320:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	f000 8085 	beq.w	800e434 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10b      	bne.n	800e34a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e336:	b672      	cpsid	i
 800e338:	f383 8811 	msr	BASEPRI, r3
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	b662      	cpsie	i
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	e7fe      	b.n	800e348 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e34e:	683a      	ldr	r2, [r7, #0]
 800e350:	429a      	cmp	r2, r3
 800e352:	d902      	bls.n	800e35a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	61fb      	str	r3, [r7, #28]
 800e358:	e002      	b.n	800e360 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e35a:	69bb      	ldr	r3, [r7, #24]
 800e35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e35e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e364:	69fa      	ldr	r2, [r7, #28]
 800e366:	429a      	cmp	r2, r3
 800e368:	d064      	beq.n	800e434 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e36e:	697a      	ldr	r2, [r7, #20]
 800e370:	429a      	cmp	r2, r3
 800e372:	d15f      	bne.n	800e434 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e374:	4b31      	ldr	r3, [pc, #196]	; (800e43c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	69ba      	ldr	r2, [r7, #24]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d10b      	bne.n	800e396 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e382:	b672      	cpsid	i
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	b662      	cpsie	i
 800e392:	60bb      	str	r3, [r7, #8]
 800e394:	e7fe      	b.n	800e394 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e39a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	69fa      	ldr	r2, [r7, #28]
 800e3a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	699b      	ldr	r3, [r3, #24]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	db04      	blt.n	800e3b4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	f1c3 0207 	rsb	r2, r3, #7
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	6959      	ldr	r1, [r3, #20]
 800e3b8:	693a      	ldr	r2, [r7, #16]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4413      	add	r3, r2
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4a1f      	ldr	r2, [pc, #124]	; (800e440 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e3c4:	4413      	add	r3, r2
 800e3c6:	4299      	cmp	r1, r3
 800e3c8:	d134      	bne.n	800e434 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3ca:	69bb      	ldr	r3, [r7, #24]
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe f90e 	bl	800c5f0 <uxListRemove>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d115      	bne.n	800e406 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3de:	4918      	ldr	r1, [pc, #96]	; (800e440 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e3e0:	4613      	mov	r3, r2
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	4413      	add	r3, r2
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	440b      	add	r3, r1
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10a      	bne.n	800e406 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800e3fa:	43da      	mvns	r2, r3
 800e3fc:	4b11      	ldr	r3, [pc, #68]	; (800e444 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4013      	ands	r3, r2
 800e402:	4a10      	ldr	r2, [pc, #64]	; (800e444 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e404:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40a:	2201      	movs	r2, #1
 800e40c:	409a      	lsls	r2, r3
 800e40e:	4b0d      	ldr	r3, [pc, #52]	; (800e444 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	4313      	orrs	r3, r2
 800e414:	4a0b      	ldr	r2, [pc, #44]	; (800e444 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e416:	6013      	str	r3, [r2, #0]
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e41c:	4613      	mov	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4413      	add	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4a06      	ldr	r2, [pc, #24]	; (800e440 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e426:	441a      	add	r2, r3
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	3304      	adds	r3, #4
 800e42c:	4619      	mov	r1, r3
 800e42e:	4610      	mov	r0, r2
 800e430:	f7fe f881 	bl	800c536 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e434:	bf00      	nop
 800e436:	3720      	adds	r7, #32
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	200003cc 	.word	0x200003cc
 800e440:	200003d0 	.word	0x200003d0
 800e444:	200004d4 	.word	0x200004d4

0800e448 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e448:	b480      	push	{r7}
 800e44a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e44c:	4b07      	ldr	r3, [pc, #28]	; (800e46c <pvTaskIncrementMutexHeldCount+0x24>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d004      	beq.n	800e45e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e454:	4b05      	ldr	r3, [pc, #20]	; (800e46c <pvTaskIncrementMutexHeldCount+0x24>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e45a:	3201      	adds	r2, #1
 800e45c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e45e:	4b03      	ldr	r3, [pc, #12]	; (800e46c <pvTaskIncrementMutexHeldCount+0x24>)
 800e460:	681b      	ldr	r3, [r3, #0]
	}
 800e462:	4618      	mov	r0, r3
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	200003cc 	.word	0x200003cc

0800e470 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e47a:	4b29      	ldr	r3, [pc, #164]	; (800e520 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e480:	4b28      	ldr	r3, [pc, #160]	; (800e524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3304      	adds	r3, #4
 800e486:	4618      	mov	r0, r3
 800e488:	f7fe f8b2 	bl	800c5f0 <uxListRemove>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d10b      	bne.n	800e4aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e492:	4b24      	ldr	r3, [pc, #144]	; (800e524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e498:	2201      	movs	r2, #1
 800e49a:	fa02 f303 	lsl.w	r3, r2, r3
 800e49e:	43da      	mvns	r2, r3
 800e4a0:	4b21      	ldr	r3, [pc, #132]	; (800e528 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4013      	ands	r3, r2
 800e4a6:	4a20      	ldr	r2, [pc, #128]	; (800e528 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e4a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b0:	d10a      	bne.n	800e4c8 <prvAddCurrentTaskToDelayedList+0x58>
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d007      	beq.n	800e4c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4b8:	4b1a      	ldr	r3, [pc, #104]	; (800e524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3304      	adds	r3, #4
 800e4be:	4619      	mov	r1, r3
 800e4c0:	481a      	ldr	r0, [pc, #104]	; (800e52c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e4c2:	f7fe f838 	bl	800c536 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e4c6:	e026      	b.n	800e516 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4d0:	4b14      	ldr	r3, [pc, #80]	; (800e524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d209      	bcs.n	800e4f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4e0:	4b13      	ldr	r3, [pc, #76]	; (800e530 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	4b0f      	ldr	r3, [pc, #60]	; (800e524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	f7fe f846 	bl	800c57e <vListInsert>
}
 800e4f2:	e010      	b.n	800e516 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4f4:	4b0f      	ldr	r3, [pc, #60]	; (800e534 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e4f6:	681a      	ldr	r2, [r3, #0]
 800e4f8:	4b0a      	ldr	r3, [pc, #40]	; (800e524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	3304      	adds	r3, #4
 800e4fe:	4619      	mov	r1, r3
 800e500:	4610      	mov	r0, r2
 800e502:	f7fe f83c 	bl	800c57e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e506:	4b0c      	ldr	r3, [pc, #48]	; (800e538 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d202      	bcs.n	800e516 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e510:	4a09      	ldr	r2, [pc, #36]	; (800e538 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	6013      	str	r3, [r2, #0]
}
 800e516:	bf00      	nop
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	200004d0 	.word	0x200004d0
 800e524:	200003cc 	.word	0x200003cc
 800e528:	200004d4 	.word	0x200004d4
 800e52c:	200004b8 	.word	0x200004b8
 800e530:	20000488 	.word	0x20000488
 800e534:	20000484 	.word	0x20000484
 800e538:	200004ec 	.word	0x200004ec

0800e53c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e53c:	b480      	push	{r7}
 800e53e:	b085      	sub	sp, #20
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	3b04      	subs	r3, #4
 800e54c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	3b04      	subs	r3, #4
 800e55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	f023 0201 	bic.w	r2, r3, #1
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	3b04      	subs	r3, #4
 800e56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e56c:	4a0c      	ldr	r2, [pc, #48]	; (800e5a0 <pxPortInitialiseStack+0x64>)
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	3b14      	subs	r3, #20
 800e576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	3b04      	subs	r3, #4
 800e582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f06f 0202 	mvn.w	r2, #2
 800e58a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	3b20      	subs	r3, #32
 800e590:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e592:	68fb      	ldr	r3, [r7, #12]
}
 800e594:	4618      	mov	r0, r3
 800e596:	3714      	adds	r7, #20
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr
 800e5a0:	0800e5a5 	.word	0x0800e5a5

0800e5a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e5ae:	4b13      	ldr	r3, [pc, #76]	; (800e5fc <prvTaskExitError+0x58>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5b6:	d00b      	beq.n	800e5d0 <prvTaskExitError+0x2c>
 800e5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5bc:	b672      	cpsid	i
 800e5be:	f383 8811 	msr	BASEPRI, r3
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	f3bf 8f4f 	dsb	sy
 800e5ca:	b662      	cpsie	i
 800e5cc:	60fb      	str	r3, [r7, #12]
 800e5ce:	e7fe      	b.n	800e5ce <prvTaskExitError+0x2a>
 800e5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d4:	b672      	cpsid	i
 800e5d6:	f383 8811 	msr	BASEPRI, r3
 800e5da:	f3bf 8f6f 	isb	sy
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	b662      	cpsie	i
 800e5e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5e6:	bf00      	nop
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d0fc      	beq.n	800e5e8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5ee:	bf00      	nop
 800e5f0:	3714      	adds	r7, #20
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	20000024 	.word	0x20000024

0800e600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e600:	4b07      	ldr	r3, [pc, #28]	; (800e620 <pxCurrentTCBConst2>)
 800e602:	6819      	ldr	r1, [r3, #0]
 800e604:	6808      	ldr	r0, [r1, #0]
 800e606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e60a:	f380 8809 	msr	PSP, r0
 800e60e:	f3bf 8f6f 	isb	sy
 800e612:	f04f 0000 	mov.w	r0, #0
 800e616:	f380 8811 	msr	BASEPRI, r0
 800e61a:	4770      	bx	lr
 800e61c:	f3af 8000 	nop.w

0800e620 <pxCurrentTCBConst2>:
 800e620:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e624:	bf00      	nop
 800e626:	bf00      	nop

0800e628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e628:	4808      	ldr	r0, [pc, #32]	; (800e64c <prvPortStartFirstTask+0x24>)
 800e62a:	6800      	ldr	r0, [r0, #0]
 800e62c:	6800      	ldr	r0, [r0, #0]
 800e62e:	f380 8808 	msr	MSP, r0
 800e632:	f04f 0000 	mov.w	r0, #0
 800e636:	f380 8814 	msr	CONTROL, r0
 800e63a:	b662      	cpsie	i
 800e63c:	b661      	cpsie	f
 800e63e:	f3bf 8f4f 	dsb	sy
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	df00      	svc	0
 800e648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e64a:	bf00      	nop
 800e64c:	e000ed08 	.word	0xe000ed08

0800e650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e656:	4b36      	ldr	r3, [pc, #216]	; (800e730 <xPortStartScheduler+0xe0>)
 800e658:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	22ff      	movs	r2, #255	; 0xff
 800e666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e670:	78fb      	ldrb	r3, [r7, #3]
 800e672:	b2db      	uxtb	r3, r3
 800e674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	4b2e      	ldr	r3, [pc, #184]	; (800e734 <xPortStartScheduler+0xe4>)
 800e67c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e67e:	4b2e      	ldr	r3, [pc, #184]	; (800e738 <xPortStartScheduler+0xe8>)
 800e680:	2207      	movs	r2, #7
 800e682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e684:	e009      	b.n	800e69a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e686:	4b2c      	ldr	r3, [pc, #176]	; (800e738 <xPortStartScheduler+0xe8>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	3b01      	subs	r3, #1
 800e68c:	4a2a      	ldr	r2, [pc, #168]	; (800e738 <xPortStartScheduler+0xe8>)
 800e68e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e690:	78fb      	ldrb	r3, [r7, #3]
 800e692:	b2db      	uxtb	r3, r3
 800e694:	005b      	lsls	r3, r3, #1
 800e696:	b2db      	uxtb	r3, r3
 800e698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e69a:	78fb      	ldrb	r3, [r7, #3]
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6a2:	2b80      	cmp	r3, #128	; 0x80
 800e6a4:	d0ef      	beq.n	800e686 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6a6:	4b24      	ldr	r3, [pc, #144]	; (800e738 <xPortStartScheduler+0xe8>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f1c3 0307 	rsb	r3, r3, #7
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	d00b      	beq.n	800e6ca <xPortStartScheduler+0x7a>
 800e6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b6:	b672      	cpsid	i
 800e6b8:	f383 8811 	msr	BASEPRI, r3
 800e6bc:	f3bf 8f6f 	isb	sy
 800e6c0:	f3bf 8f4f 	dsb	sy
 800e6c4:	b662      	cpsie	i
 800e6c6:	60bb      	str	r3, [r7, #8]
 800e6c8:	e7fe      	b.n	800e6c8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6ca:	4b1b      	ldr	r3, [pc, #108]	; (800e738 <xPortStartScheduler+0xe8>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	021b      	lsls	r3, r3, #8
 800e6d0:	4a19      	ldr	r2, [pc, #100]	; (800e738 <xPortStartScheduler+0xe8>)
 800e6d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6d4:	4b18      	ldr	r3, [pc, #96]	; (800e738 <xPortStartScheduler+0xe8>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6dc:	4a16      	ldr	r2, [pc, #88]	; (800e738 <xPortStartScheduler+0xe8>)
 800e6de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6e8:	4b14      	ldr	r3, [pc, #80]	; (800e73c <xPortStartScheduler+0xec>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a13      	ldr	r2, [pc, #76]	; (800e73c <xPortStartScheduler+0xec>)
 800e6ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6f4:	4b11      	ldr	r3, [pc, #68]	; (800e73c <xPortStartScheduler+0xec>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a10      	ldr	r2, [pc, #64]	; (800e73c <xPortStartScheduler+0xec>)
 800e6fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e6fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e700:	f000 f8d4 	bl	800e8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e704:	4b0e      	ldr	r3, [pc, #56]	; (800e740 <xPortStartScheduler+0xf0>)
 800e706:	2200      	movs	r2, #0
 800e708:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e70a:	f000 f8f3 	bl	800e8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e70e:	4b0d      	ldr	r3, [pc, #52]	; (800e744 <xPortStartScheduler+0xf4>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4a0c      	ldr	r2, [pc, #48]	; (800e744 <xPortStartScheduler+0xf4>)
 800e714:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e718:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e71a:	f7ff ff85 	bl	800e628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e71e:	f7ff fa69 	bl	800dbf4 <vTaskSwitchContext>
	prvTaskExitError();
 800e722:	f7ff ff3f 	bl	800e5a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	e000e400 	.word	0xe000e400
 800e734:	200004f8 	.word	0x200004f8
 800e738:	200004fc 	.word	0x200004fc
 800e73c:	e000ed20 	.word	0xe000ed20
 800e740:	20000024 	.word	0x20000024
 800e744:	e000ef34 	.word	0xe000ef34

0800e748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	b672      	cpsid	i
 800e754:	f383 8811 	msr	BASEPRI, r3
 800e758:	f3bf 8f6f 	isb	sy
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	b662      	cpsie	i
 800e762:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e764:	4b0f      	ldr	r3, [pc, #60]	; (800e7a4 <vPortEnterCritical+0x5c>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	3301      	adds	r3, #1
 800e76a:	4a0e      	ldr	r2, [pc, #56]	; (800e7a4 <vPortEnterCritical+0x5c>)
 800e76c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e76e:	4b0d      	ldr	r3, [pc, #52]	; (800e7a4 <vPortEnterCritical+0x5c>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2b01      	cmp	r3, #1
 800e774:	d110      	bne.n	800e798 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e776:	4b0c      	ldr	r3, [pc, #48]	; (800e7a8 <vPortEnterCritical+0x60>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d00b      	beq.n	800e798 <vPortEnterCritical+0x50>
 800e780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e784:	b672      	cpsid	i
 800e786:	f383 8811 	msr	BASEPRI, r3
 800e78a:	f3bf 8f6f 	isb	sy
 800e78e:	f3bf 8f4f 	dsb	sy
 800e792:	b662      	cpsie	i
 800e794:	603b      	str	r3, [r7, #0]
 800e796:	e7fe      	b.n	800e796 <vPortEnterCritical+0x4e>
	}
}
 800e798:	bf00      	nop
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	20000024 	.word	0x20000024
 800e7a8:	e000ed04 	.word	0xe000ed04

0800e7ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7b2:	4b12      	ldr	r3, [pc, #72]	; (800e7fc <vPortExitCritical+0x50>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10b      	bne.n	800e7d2 <vPortExitCritical+0x26>
 800e7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7be:	b672      	cpsid	i
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	b662      	cpsie	i
 800e7ce:	607b      	str	r3, [r7, #4]
 800e7d0:	e7fe      	b.n	800e7d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e7d2:	4b0a      	ldr	r3, [pc, #40]	; (800e7fc <vPortExitCritical+0x50>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	4a08      	ldr	r2, [pc, #32]	; (800e7fc <vPortExitCritical+0x50>)
 800e7da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7dc:	4b07      	ldr	r3, [pc, #28]	; (800e7fc <vPortExitCritical+0x50>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d104      	bne.n	800e7ee <vPortExitCritical+0x42>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7ee:	bf00      	nop
 800e7f0:	370c      	adds	r7, #12
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr
 800e7fa:	bf00      	nop
 800e7fc:	20000024 	.word	0x20000024

0800e800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e800:	f3ef 8009 	mrs	r0, PSP
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	4b15      	ldr	r3, [pc, #84]	; (800e860 <pxCurrentTCBConst>)
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	f01e 0f10 	tst.w	lr, #16
 800e810:	bf08      	it	eq
 800e812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81a:	6010      	str	r0, [r2, #0]
 800e81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e824:	b672      	cpsid	i
 800e826:	f380 8811 	msr	BASEPRI, r0
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	b662      	cpsie	i
 800e834:	f7ff f9de 	bl	800dbf4 <vTaskSwitchContext>
 800e838:	f04f 0000 	mov.w	r0, #0
 800e83c:	f380 8811 	msr	BASEPRI, r0
 800e840:	bc09      	pop	{r0, r3}
 800e842:	6819      	ldr	r1, [r3, #0]
 800e844:	6808      	ldr	r0, [r1, #0]
 800e846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e84a:	f01e 0f10 	tst.w	lr, #16
 800e84e:	bf08      	it	eq
 800e850:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e854:	f380 8809 	msr	PSP, r0
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop

0800e860 <pxCurrentTCBConst>:
 800e860:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e864:	bf00      	nop
 800e866:	bf00      	nop

0800e868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e872:	b672      	cpsid	i
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
 800e880:	b662      	cpsie	i
 800e882:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e884:	f7ff f8fc 	bl	800da80 <xTaskIncrementTick>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e88e:	4b06      	ldr	r3, [pc, #24]	; (800e8a8 <SysTick_Handler+0x40>)
 800e890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	2300      	movs	r3, #0
 800e898:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	e000ed04 	.word	0xe000ed04

0800e8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8b0:	4b0b      	ldr	r3, [pc, #44]	; (800e8e0 <vPortSetupTimerInterrupt+0x34>)
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8b6:	4b0b      	ldr	r3, [pc, #44]	; (800e8e4 <vPortSetupTimerInterrupt+0x38>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8bc:	4b0a      	ldr	r3, [pc, #40]	; (800e8e8 <vPortSetupTimerInterrupt+0x3c>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a0a      	ldr	r2, [pc, #40]	; (800e8ec <vPortSetupTimerInterrupt+0x40>)
 800e8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8c6:	099b      	lsrs	r3, r3, #6
 800e8c8:	4a09      	ldr	r2, [pc, #36]	; (800e8f0 <vPortSetupTimerInterrupt+0x44>)
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8ce:	4b04      	ldr	r3, [pc, #16]	; (800e8e0 <vPortSetupTimerInterrupt+0x34>)
 800e8d0:	2207      	movs	r2, #7
 800e8d2:	601a      	str	r2, [r3, #0]
}
 800e8d4:	bf00      	nop
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	e000e010 	.word	0xe000e010
 800e8e4:	e000e018 	.word	0xe000e018
 800e8e8:	20000018 	.word	0x20000018
 800e8ec:	10624dd3 	.word	0x10624dd3
 800e8f0:	e000e014 	.word	0xe000e014

0800e8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e904 <vPortEnableVFP+0x10>
 800e8f8:	6801      	ldr	r1, [r0, #0]
 800e8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8fe:	6001      	str	r1, [r0, #0]
 800e900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e902:	bf00      	nop
 800e904:	e000ed88 	.word	0xe000ed88

0800e908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e90e:	f3ef 8305 	mrs	r3, IPSR
 800e912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b0f      	cmp	r3, #15
 800e918:	d915      	bls.n	800e946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e91a:	4a18      	ldr	r2, [pc, #96]	; (800e97c <vPortValidateInterruptPriority+0x74>)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	4413      	add	r3, r2
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e924:	4b16      	ldr	r3, [pc, #88]	; (800e980 <vPortValidateInterruptPriority+0x78>)
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	7afa      	ldrb	r2, [r7, #11]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d20b      	bcs.n	800e946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e932:	b672      	cpsid	i
 800e934:	f383 8811 	msr	BASEPRI, r3
 800e938:	f3bf 8f6f 	isb	sy
 800e93c:	f3bf 8f4f 	dsb	sy
 800e940:	b662      	cpsie	i
 800e942:	607b      	str	r3, [r7, #4]
 800e944:	e7fe      	b.n	800e944 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e946:	4b0f      	ldr	r3, [pc, #60]	; (800e984 <vPortValidateInterruptPriority+0x7c>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e94e:	4b0e      	ldr	r3, [pc, #56]	; (800e988 <vPortValidateInterruptPriority+0x80>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	429a      	cmp	r2, r3
 800e954:	d90b      	bls.n	800e96e <vPortValidateInterruptPriority+0x66>
 800e956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95a:	b672      	cpsid	i
 800e95c:	f383 8811 	msr	BASEPRI, r3
 800e960:	f3bf 8f6f 	isb	sy
 800e964:	f3bf 8f4f 	dsb	sy
 800e968:	b662      	cpsie	i
 800e96a:	603b      	str	r3, [r7, #0]
 800e96c:	e7fe      	b.n	800e96c <vPortValidateInterruptPriority+0x64>
	}
 800e96e:	bf00      	nop
 800e970:	3714      	adds	r7, #20
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	e000e3f0 	.word	0xe000e3f0
 800e980:	200004f8 	.word	0x200004f8
 800e984:	e000ed0c 	.word	0xe000ed0c
 800e988:	200004fc 	.word	0x200004fc

0800e98c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b08a      	sub	sp, #40	; 0x28
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e994:	2300      	movs	r3, #0
 800e996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e998:	f7fe ffa4 	bl	800d8e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e99c:	4b5c      	ldr	r3, [pc, #368]	; (800eb10 <pvPortMalloc+0x184>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d101      	bne.n	800e9a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9a4:	f000 f91a 	bl	800ebdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9a8:	4b5a      	ldr	r3, [pc, #360]	; (800eb14 <pvPortMalloc+0x188>)
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4013      	ands	r3, r2
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	f040 8090 	bne.w	800ead6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d01e      	beq.n	800e9fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e9bc:	2208      	movs	r2, #8
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f003 0307 	and.w	r3, r3, #7
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d015      	beq.n	800e9fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f023 0307 	bic.w	r3, r3, #7
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f003 0307 	and.w	r3, r3, #7
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00b      	beq.n	800e9fa <pvPortMalloc+0x6e>
 800e9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e6:	b672      	cpsid	i
 800e9e8:	f383 8811 	msr	BASEPRI, r3
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	b662      	cpsie	i
 800e9f6:	617b      	str	r3, [r7, #20]
 800e9f8:	e7fe      	b.n	800e9f8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d06a      	beq.n	800ead6 <pvPortMalloc+0x14a>
 800ea00:	4b45      	ldr	r3, [pc, #276]	; (800eb18 <pvPortMalloc+0x18c>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d865      	bhi.n	800ead6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea0a:	4b44      	ldr	r3, [pc, #272]	; (800eb1c <pvPortMalloc+0x190>)
 800ea0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea0e:	4b43      	ldr	r3, [pc, #268]	; (800eb1c <pvPortMalloc+0x190>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea14:	e004      	b.n	800ea20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ea16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d903      	bls.n	800ea32 <pvPortMalloc+0xa6>
 800ea2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1f1      	bne.n	800ea16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea32:	4b37      	ldr	r3, [pc, #220]	; (800eb10 <pvPortMalloc+0x184>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d04c      	beq.n	800ead6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2208      	movs	r2, #8
 800ea42:	4413      	add	r3, r2
 800ea44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	6a3b      	ldr	r3, [r7, #32]
 800ea4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea50:	685a      	ldr	r2, [r3, #4]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	1ad2      	subs	r2, r2, r3
 800ea56:	2308      	movs	r3, #8
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d920      	bls.n	800eaa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	4413      	add	r3, r2
 800ea64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	f003 0307 	and.w	r3, r3, #7
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00b      	beq.n	800ea88 <pvPortMalloc+0xfc>
 800ea70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea74:	b672      	cpsid	i
 800ea76:	f383 8811 	msr	BASEPRI, r3
 800ea7a:	f3bf 8f6f 	isb	sy
 800ea7e:	f3bf 8f4f 	dsb	sy
 800ea82:	b662      	cpsie	i
 800ea84:	613b      	str	r3, [r7, #16]
 800ea86:	e7fe      	b.n	800ea86 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	685a      	ldr	r2, [r3, #4]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	1ad2      	subs	r2, r2, r3
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea9a:	69b8      	ldr	r0, [r7, #24]
 800ea9c:	f000 f900 	bl	800eca0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eaa0:	4b1d      	ldr	r3, [pc, #116]	; (800eb18 <pvPortMalloc+0x18c>)
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	1ad3      	subs	r3, r2, r3
 800eaaa:	4a1b      	ldr	r2, [pc, #108]	; (800eb18 <pvPortMalloc+0x18c>)
 800eaac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eaae:	4b1a      	ldr	r3, [pc, #104]	; (800eb18 <pvPortMalloc+0x18c>)
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	4b1b      	ldr	r3, [pc, #108]	; (800eb20 <pvPortMalloc+0x194>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d203      	bcs.n	800eac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eaba:	4b17      	ldr	r3, [pc, #92]	; (800eb18 <pvPortMalloc+0x18c>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	4a18      	ldr	r2, [pc, #96]	; (800eb20 <pvPortMalloc+0x194>)
 800eac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac4:	685a      	ldr	r2, [r3, #4]
 800eac6:	4b13      	ldr	r3, [pc, #76]	; (800eb14 <pvPortMalloc+0x188>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	431a      	orrs	r2, r3
 800eacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	2200      	movs	r2, #0
 800ead4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ead6:	f7fe ff13 	bl	800d900 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d101      	bne.n	800eae4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800eae0:	f7f2 f80c 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	f003 0307 	and.w	r3, r3, #7
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00b      	beq.n	800eb06 <pvPortMalloc+0x17a>
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	b672      	cpsid	i
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	b662      	cpsie	i
 800eb02:	60fb      	str	r3, [r7, #12]
 800eb04:	e7fe      	b.n	800eb04 <pvPortMalloc+0x178>
	return pvReturn;
 800eb06:	69fb      	ldr	r3, [r7, #28]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3728      	adds	r7, #40	; 0x28
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	20008508 	.word	0x20008508
 800eb14:	20008514 	.word	0x20008514
 800eb18:	2000850c 	.word	0x2000850c
 800eb1c:	20008500 	.word	0x20008500
 800eb20:	20008510 	.word	0x20008510

0800eb24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d04a      	beq.n	800ebcc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb36:	2308      	movs	r3, #8
 800eb38:	425b      	negs	r3, r3
 800eb3a:	697a      	ldr	r2, [r7, #20]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	685a      	ldr	r2, [r3, #4]
 800eb48:	4b22      	ldr	r3, [pc, #136]	; (800ebd4 <vPortFree+0xb0>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4013      	ands	r3, r2
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10b      	bne.n	800eb6a <vPortFree+0x46>
 800eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb56:	b672      	cpsid	i
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	b662      	cpsie	i
 800eb66:	60fb      	str	r3, [r7, #12]
 800eb68:	e7fe      	b.n	800eb68 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00b      	beq.n	800eb8a <vPortFree+0x66>
 800eb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb76:	b672      	cpsid	i
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	b662      	cpsie	i
 800eb86:	60bb      	str	r3, [r7, #8]
 800eb88:	e7fe      	b.n	800eb88 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	685a      	ldr	r2, [r3, #4]
 800eb8e:	4b11      	ldr	r3, [pc, #68]	; (800ebd4 <vPortFree+0xb0>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4013      	ands	r3, r2
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d019      	beq.n	800ebcc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d115      	bne.n	800ebcc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	685a      	ldr	r2, [r3, #4]
 800eba4:	4b0b      	ldr	r3, [pc, #44]	; (800ebd4 <vPortFree+0xb0>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	43db      	mvns	r3, r3
 800ebaa:	401a      	ands	r2, r3
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ebb0:	f7fe fe98 	bl	800d8e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	685a      	ldr	r2, [r3, #4]
 800ebb8:	4b07      	ldr	r3, [pc, #28]	; (800ebd8 <vPortFree+0xb4>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	4a06      	ldr	r2, [pc, #24]	; (800ebd8 <vPortFree+0xb4>)
 800ebc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebc2:	6938      	ldr	r0, [r7, #16]
 800ebc4:	f000 f86c 	bl	800eca0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ebc8:	f7fe fe9a 	bl	800d900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ebcc:	bf00      	nop
 800ebce:	3718      	adds	r7, #24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	20008514 	.word	0x20008514
 800ebd8:	2000850c 	.word	0x2000850c

0800ebdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ebe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebe6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ebe8:	4b27      	ldr	r3, [pc, #156]	; (800ec88 <prvHeapInit+0xac>)
 800ebea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f003 0307 	and.w	r3, r3, #7
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00c      	beq.n	800ec10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	3307      	adds	r3, #7
 800ebfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f023 0307 	bic.w	r3, r3, #7
 800ec02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	1ad3      	subs	r3, r2, r3
 800ec0a:	4a1f      	ldr	r2, [pc, #124]	; (800ec88 <prvHeapInit+0xac>)
 800ec0c:	4413      	add	r3, r2
 800ec0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec14:	4a1d      	ldr	r2, [pc, #116]	; (800ec8c <prvHeapInit+0xb0>)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec1a:	4b1c      	ldr	r3, [pc, #112]	; (800ec8c <prvHeapInit+0xb0>)
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	68ba      	ldr	r2, [r7, #8]
 800ec24:	4413      	add	r3, r2
 800ec26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec28:	2208      	movs	r2, #8
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	1a9b      	subs	r3, r3, r2
 800ec2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f023 0307 	bic.w	r3, r3, #7
 800ec36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	4a15      	ldr	r2, [pc, #84]	; (800ec90 <prvHeapInit+0xb4>)
 800ec3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec3e:	4b14      	ldr	r3, [pc, #80]	; (800ec90 <prvHeapInit+0xb4>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2200      	movs	r2, #0
 800ec44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec46:	4b12      	ldr	r3, [pc, #72]	; (800ec90 <prvHeapInit+0xb4>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	68fa      	ldr	r2, [r7, #12]
 800ec56:	1ad2      	subs	r2, r2, r3
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec5c:	4b0c      	ldr	r3, [pc, #48]	; (800ec90 <prvHeapInit+0xb4>)
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	4a0a      	ldr	r2, [pc, #40]	; (800ec94 <prvHeapInit+0xb8>)
 800ec6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	4a09      	ldr	r2, [pc, #36]	; (800ec98 <prvHeapInit+0xbc>)
 800ec72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec74:	4b09      	ldr	r3, [pc, #36]	; (800ec9c <prvHeapInit+0xc0>)
 800ec76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec7a:	601a      	str	r2, [r3, #0]
}
 800ec7c:	bf00      	nop
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	20000500 	.word	0x20000500
 800ec8c:	20008500 	.word	0x20008500
 800ec90:	20008508 	.word	0x20008508
 800ec94:	20008510 	.word	0x20008510
 800ec98:	2000850c 	.word	0x2000850c
 800ec9c:	20008514 	.word	0x20008514

0800eca0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eca0:	b480      	push	{r7}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eca8:	4b28      	ldr	r3, [pc, #160]	; (800ed4c <prvInsertBlockIntoFreeList+0xac>)
 800ecaa:	60fb      	str	r3, [r7, #12]
 800ecac:	e002      	b.n	800ecb4 <prvInsertBlockIntoFreeList+0x14>
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	60fb      	str	r3, [r7, #12]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d8f7      	bhi.n	800ecae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	68ba      	ldr	r2, [r7, #8]
 800ecc8:	4413      	add	r3, r2
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d108      	bne.n	800ece2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	685a      	ldr	r2, [r3, #4]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	441a      	add	r2, r3
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	68ba      	ldr	r2, [r7, #8]
 800ecec:	441a      	add	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d118      	bne.n	800ed28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	4b15      	ldr	r3, [pc, #84]	; (800ed50 <prvInsertBlockIntoFreeList+0xb0>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d00d      	beq.n	800ed1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	685a      	ldr	r2, [r3, #4]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	441a      	add	r2, r3
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	601a      	str	r2, [r3, #0]
 800ed1c:	e008      	b.n	800ed30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed1e:	4b0c      	ldr	r3, [pc, #48]	; (800ed50 <prvInsertBlockIntoFreeList+0xb0>)
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	601a      	str	r2, [r3, #0]
 800ed26:	e003      	b.n	800ed30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d002      	beq.n	800ed3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed3e:	bf00      	nop
 800ed40:	3714      	adds	r7, #20
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	20008500 	.word	0x20008500
 800ed50:	20008508 	.word	0x20008508

0800ed54 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800ed58:	f005 fa80 	bl	801425c <touchgfx_init>
}
 800ed5c:	bf00      	nop
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800ed64:	f005 faa4 	bl	80142b0 <touchgfx_taskEntry>
}
 800ed68:	bf00      	nop
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
    {
 800ed74:	4a04      	ldr	r2, [pc, #16]	; (800ed88 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	601a      	str	r2, [r3, #0]
    }
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr
 800ed88:	08026d4c 	.word	0x08026d4c

0800ed8c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
    }
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7ff ffe9 	bl	800ed6c <_ZN8touchgfx12FontProviderD1Ev>
 800ed9a:	2104      	movs	r1, #4
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f016 fbba 	bl	8025516 <_ZdlPvj>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4618      	mov	r0, r3
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	460b      	mov	r3, r1
 800edb6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800edb8:	887b      	ldrh	r3, [r7, #2]
 800edba:	2b07      	cmp	r3, #7
 800edbc:	d83a      	bhi.n	800ee34 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800edbe:	a201      	add	r2, pc, #4	; (adr r2, 800edc4 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800edc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc4:	0800ede5 	.word	0x0800ede5
 800edc8:	0800edef 	.word	0x0800edef
 800edcc:	0800edf9 	.word	0x0800edf9
 800edd0:	0800ee03 	.word	0x0800ee03
 800edd4:	0800ee0d 	.word	0x0800ee0d
 800edd8:	0800ee17 	.word	0x0800ee17
 800eddc:	0800ee21 	.word	0x0800ee21
 800ede0:	0800ee2b 	.word	0x0800ee2b
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800ede4:	f003 fae8 	bl	80123b8 <_ZN17TypedTextDatabase8getFontsEv>
 800ede8:	4603      	mov	r3, r0
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	e023      	b.n	800ee36 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800edee:	f003 fae3 	bl	80123b8 <_ZN17TypedTextDatabase8getFontsEv>
 800edf2:	4603      	mov	r3, r0
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	e01e      	b.n	800ee36 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800edf8:	f003 fade 	bl	80123b8 <_ZN17TypedTextDatabase8getFontsEv>
 800edfc:	4603      	mov	r3, r0
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	e019      	b.n	800ee36 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800ee02:	f003 fad9 	bl	80123b8 <_ZN17TypedTextDatabase8getFontsEv>
 800ee06:	4603      	mov	r3, r0
 800ee08:	689b      	ldr	r3, [r3, #8]
 800ee0a:	e014      	b.n	800ee36 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800ee0c:	f003 fad4 	bl	80123b8 <_ZN17TypedTextDatabase8getFontsEv>
 800ee10:	4603      	mov	r3, r0
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	e00f      	b.n	800ee36 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800ee16:	f003 facf 	bl	80123b8 <_ZN17TypedTextDatabase8getFontsEv>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	691b      	ldr	r3, [r3, #16]
 800ee1e:	e00a      	b.n	800ee36 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800ee20:	f003 faca 	bl	80123b8 <_ZN17TypedTextDatabase8getFontsEv>
 800ee24:	4603      	mov	r3, r0
 800ee26:	695b      	ldr	r3, [r3, #20]
 800ee28:	e005      	b.n	800ee36 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800ee2a:	f003 fac5 	bl	80123b8 <_ZN17TypedTextDatabase8getFontsEv>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	699b      	ldr	r3, [r3, #24]
 800ee32:	e000      	b.n	800ee36 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800ee34:	2300      	movs	r3, #0
    }
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3708      	adds	r7, #8
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop

0800ee40 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	4a05      	ldr	r2, [pc, #20]	; (800ee60 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	601a      	str	r2, [r3, #0]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff ff8b 	bl	800ed6c <_ZN8touchgfx12FontProviderD1Ev>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	08026d38 	.word	0x08026d38

0800ee64 <_ZN23ApplicationFontProviderD0Ev>:
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f7ff ffe7 	bl	800ee40 <_ZN23ApplicationFontProviderD1Ev>
 800ee72:	2104      	movs	r1, #4
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f016 fb4e 	bl	8025516 <_ZdlPvj>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	4a04      	ldr	r2, [pc, #16]	; (800eea0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	601a      	str	r2, [r3, #0]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	4618      	mov	r0, r3
 800ee96:	370c      	adds	r7, #12
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr
 800eea0:	08028fd8 	.word	0x08028fd8

0800eea4 <_ZN8touchgfx4FontD0Ev>:
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7ff ffe9 	bl	800ee84 <_ZN8touchgfx4FontD1Ev>
 800eeb2:	2110      	movs	r1, #16
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f016 fb2e 	bl	8025516 <_ZdlPvj>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4618      	mov	r0, r3
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800eec4:	b590      	push	{r4, r7, lr}
 800eec6:	b087      	sub	sp, #28
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	460b      	mov	r3, r1
 800eece:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800eed0:	2300      	movs	r3, #0
 800eed2:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800eed4:	2300      	movs	r3, #0
 800eed6:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	3308      	adds	r3, #8
 800eede:	681c      	ldr	r4, [r3, #0]
 800eee0:	f107 030f 	add.w	r3, r7, #15
 800eee4:	f107 0210 	add.w	r2, r7, #16
 800eee8:	8879      	ldrh	r1, [r7, #2]
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	47a0      	blx	r4
 800eeee:	6178      	str	r0, [r7, #20]
        return glyph;
 800eef0:	697b      	ldr	r3, [r7, #20]
    }
 800eef2:	4618      	mov	r0, r3
 800eef4:	371c      	adds	r7, #28
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd90      	pop	{r4, r7, pc}

0800eefa <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800eefa:	b480      	push	{r7}
 800eefc:	b083      	sub	sp, #12
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	895b      	ldrh	r3, [r3, #10]
    }
 800ef06:	4618      	mov	r0, r3
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr

0800ef12 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800ef12:	b480      	push	{r7}
 800ef14:	b083      	sub	sp, #12
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	899b      	ldrh	r3, [r3, #12]
    }
 800ef1e:	4618      	mov	r0, r3
 800ef20:	370c      	adds	r7, #12
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800ef2a:	b480      	push	{r7}
 800ef2c:	b083      	sub	sp, #12
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	889b      	ldrh	r3, [r3, #4]
    }
 800ef36:	4618      	mov	r0, r3
 800ef38:	370c      	adds	r7, #12
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800ef42:	b480      	push	{r7}
 800ef44:	b083      	sub	sp, #12
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	889a      	ldrh	r2, [r3, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	799b      	ldrb	r3, [r3, #6]
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	4413      	add	r3, r2
 800ef56:	b29b      	uxth	r3, r3
    }
 800ef58:	4618      	mov	r0, r3
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	79db      	ldrb	r3, [r3, #7]
 800ef70:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800ef74:	b2db      	uxtb	r3, r3
    }
 800ef76:	4618      	mov	r0, r3
 800ef78:	370c      	adds	r7, #12
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr

0800ef82 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800ef82:	b480      	push	{r7}
 800ef84:	b083      	sub	sp, #12
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	79db      	ldrb	r3, [r3, #7]
 800ef8e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ef92:	b2db      	uxtb	r3, r3
    }
 800ef94:	4618      	mov	r0, r3
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	4a05      	ldr	r2, [pc, #20]	; (800efc0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7ff ff67 	bl	800ee84 <_ZN8touchgfx4FontD1Ev>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4618      	mov	r0, r3
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	08029090 	.word	0x08029090

0800efc4 <_ZN8touchgfx9ConstFontD0Ev>:
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7ff ffe7 	bl	800efa0 <_ZN8touchgfx9ConstFontD1Ev>
 800efd2:	2118      	movs	r1, #24
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f016 fa9e 	bl	8025516 <_ZdlPvj>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4618      	mov	r0, r3
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	4a05      	ldr	r2, [pc, #20]	; (800f004 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	601a      	str	r2, [r3, #0]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7ff ffd3 	bl	800efa0 <_ZN8touchgfx9ConstFontD1Ev>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4618      	mov	r0, r3
 800effe:	3708      	adds	r7, #8
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	08026d90 	.word	0x08026d90

0800f008 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7ff ffe7 	bl	800efe4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f016:	2124      	movs	r1, #36	; 0x24
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f016 fa7c 	bl	8025516 <_ZdlPvj>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4618      	mov	r0, r3
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 f82d 	bl	800f090 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f036:	4b08      	ldr	r3, [pc, #32]	; (800f058 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	4b08      	ldr	r3, [pc, #32]	; (800f05c <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f03c:	6819      	ldr	r1, [r3, #0]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	005b      	lsls	r3, r3, #1
 800f044:	440b      	add	r3, r1
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	4413      	add	r3, r2
 800f04c:	681b      	ldr	r3, [r3, #0]
    }
 800f04e:	4618      	mov	r0, r3
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	2000bc28 	.word	0x2000bc28
 800f05c:	2000bc20 	.word	0x2000bc20

0800f060 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f000 f811 	bl	800f090 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f06e:	4b07      	ldr	r3, [pc, #28]	; (800f08c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	005b      	lsls	r3, r3, #1
 800f078:	4413      	add	r3, r2
 800f07a:	785b      	ldrb	r3, [r3, #1]
 800f07c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f080:	b2db      	uxtb	r3, r3
    }
 800f082:	4618      	mov	r0, r3
 800f084:	3708      	adds	r7, #8
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	2000bc20 	.word	0x2000bc20

0800f090 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f098:	4b0c      	ldr	r3, [pc, #48]	; (800f0cc <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d105      	bne.n	800f0ac <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f0a0:	4b0b      	ldr	r3, [pc, #44]	; (800f0d0 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f0a2:	4a0c      	ldr	r2, [pc, #48]	; (800f0d4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f0a4:	21de      	movs	r1, #222	; 0xde
 800f0a6:	480c      	ldr	r0, [pc, #48]	; (800f0d8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f0a8:	f016 fa60 	bl	802556c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	881a      	ldrh	r2, [r3, #0]
 800f0b0:	4b0a      	ldr	r3, [pc, #40]	; (800f0dc <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f0b2:	881b      	ldrh	r3, [r3, #0]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d305      	bcc.n	800f0c4 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f0b8:	4b09      	ldr	r3, [pc, #36]	; (800f0e0 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f0ba:	4a06      	ldr	r2, [pc, #24]	; (800f0d4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f0bc:	21df      	movs	r1, #223	; 0xdf
 800f0be:	4806      	ldr	r0, [pc, #24]	; (800f0d8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f0c0:	f016 fa54 	bl	802556c <__assert_func>
    }
 800f0c4:	bf00      	nop
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	2000bc20 	.word	0x2000bc20
 800f0d0:	0802661c 	.word	0x0802661c
 800f0d4:	08026d58 	.word	0x08026d58
 800f0d8:	08026660 	.word	0x08026660
 800f0dc:	2000bc24 	.word	0x2000bc24
 800f0e0:	080266a4 	.word	0x080266a4

0800f0e4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	7b5b      	ldrb	r3, [r3, #13]
 800f0f0:	021b      	lsls	r3, r3, #8
 800f0f2:	b21b      	sxth	r3, r3
 800f0f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0f8:	b21a      	sxth	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	7adb      	ldrb	r3, [r3, #11]
 800f0fe:	b21b      	sxth	r3, r3
 800f100:	4313      	orrs	r3, r2
 800f102:	b21b      	sxth	r3, r3
 800f104:	b29b      	uxth	r3, r3
    }
 800f106:	4618      	mov	r0, r3
 800f108:	370c      	adds	r7, #12
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr

0800f112 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f112:	b480      	push	{r7}
 800f114:	b083      	sub	sp, #12
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a1b      	ldr	r3, [r3, #32]
    }
 800f11e:	4618      	mov	r0, r3
 800f120:	370c      	adds	r7, #12
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
	...

0800f12c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b08c      	sub	sp, #48	; 0x30
 800f130:	af08      	add	r7, sp, #32
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	4611      	mov	r1, r2
 800f138:	461a      	mov	r2, r3
 800f13a:	460b      	mov	r3, r1
 800f13c:	80fb      	strh	r3, [r7, #6]
 800f13e:	4613      	mov	r3, r2
 800f140:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	88b9      	ldrh	r1, [r7, #4]
 800f146:	88fa      	ldrh	r2, [r7, #6]
 800f148:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f14a:	9306      	str	r3, [sp, #24]
 800f14c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f14e:	9305      	str	r3, [sp, #20]
 800f150:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f154:	9304      	str	r3, [sp, #16]
 800f156:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f15a:	9303      	str	r3, [sp, #12]
 800f15c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f160:	9302      	str	r3, [sp, #8]
 800f162:	7f3b      	ldrb	r3, [r7, #28]
 800f164:	9301      	str	r3, [sp, #4]
 800f166:	7e3b      	ldrb	r3, [r7, #24]
 800f168:	9300      	str	r3, [sp, #0]
 800f16a:	460b      	mov	r3, r1
 800f16c:	68b9      	ldr	r1, [r7, #8]
 800f16e:	f00a fc4d 	bl	8019a0c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f172:	4a08      	ldr	r2, [pc, #32]	; (800f194 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	601a      	str	r2, [r3, #0]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f17c:	619a      	str	r2, [r3, #24]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f182:	61da      	str	r2, [r3, #28]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f188:	621a      	str	r2, [r3, #32]
{
}
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	4618      	mov	r0, r3
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	08026d90 	.word	0x08026d90

0800f198 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f198:	b480      	push	{r7}
 800f19a:	b085      	sub	sp, #20
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	699b      	ldr	r3, [r3, #24]
 800f1a6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	889b      	ldrh	r3, [r3, #4]
 800f1ac:	0adb      	lsrs	r3, r3, #11
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4413      	add	r3, r2
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3714      	adds	r7, #20
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c8:	4770      	bx	lr

0800f1ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b086      	sub	sp, #24
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	60f8      	str	r0, [r7, #12]
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	607a      	str	r2, [r7, #4]
 800f1d6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d003      	beq.n	800f1e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	7b1b      	ldrb	r3, [r3, #12]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	e023      	b.n	800f232 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7ff ff7a 	bl	800f0e4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f1f4:	8abb      	ldrh	r3, [r7, #20]
 800f1f6:	82fb      	strh	r3, [r7, #22]
 800f1f8:	8afa      	ldrh	r2, [r7, #22]
 800f1fa:	8abb      	ldrh	r3, [r7, #20]
 800f1fc:	6879      	ldr	r1, [r7, #4]
 800f1fe:	7b09      	ldrb	r1, [r1, #12]
 800f200:	440b      	add	r3, r1
 800f202:	429a      	cmp	r2, r3
 800f204:	da14      	bge.n	800f230 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	69da      	ldr	r2, [r3, #28]
 800f20a:	8afb      	ldrh	r3, [r7, #22]
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4413      	add	r3, r2
 800f210:	881b      	ldrh	r3, [r3, #0]
 800f212:	897a      	ldrh	r2, [r7, #10]
 800f214:	429a      	cmp	r2, r3
 800f216:	d107      	bne.n	800f228 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	69da      	ldr	r2, [r3, #28]
 800f21c:	8afb      	ldrh	r3, [r7, #22]
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	4413      	add	r3, r2
 800f222:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f226:	e004      	b.n	800f232 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f228:	8afb      	ldrh	r3, [r7, #22]
 800f22a:	3301      	adds	r3, #1
 800f22c:	82fb      	strh	r3, [r7, #22]
 800f22e:	e7e3      	b.n	800f1f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800f230:	2300      	movs	r3, #0
}
 800f232:	4618      	mov	r0, r3
 800f234:	3718      	adds	r7, #24
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
	...

0800f23c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f23c:	b580      	push	{r7, lr}
 800f23e:	af00      	add	r7, sp, #0
 800f240:	4801      	ldr	r0, [pc, #4]	; (800f248 <__tcf_0+0xc>)
 800f242:	f7ff fecf 	bl	800efe4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f246:	bd80      	pop	{r7, pc}
 800f248:	20008518 	.word	0x20008518

0800f24c <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b08a      	sub	sp, #40	; 0x28
 800f250:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f252:	4b15      	ldr	r3, [pc, #84]	; (800f2a8 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f003 0301 	and.w	r3, r3, #1
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d11f      	bne.n	800f29e <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 800f25e:	2300      	movs	r3, #0
 800f260:	9309      	str	r3, [sp, #36]	; 0x24
 800f262:	2300      	movs	r3, #0
 800f264:	9308      	str	r3, [sp, #32]
 800f266:	233f      	movs	r3, #63	; 0x3f
 800f268:	9307      	str	r3, [sp, #28]
 800f26a:	4b10      	ldr	r3, [pc, #64]	; (800f2ac <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 800f26c:	9306      	str	r3, [sp, #24]
 800f26e:	4b10      	ldr	r3, [pc, #64]	; (800f2b0 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 800f270:	9305      	str	r3, [sp, #20]
 800f272:	2301      	movs	r3, #1
 800f274:	9304      	str	r3, [sp, #16]
 800f276:	2300      	movs	r3, #0
 800f278:	9303      	str	r3, [sp, #12]
 800f27a:	2301      	movs	r3, #1
 800f27c:	9302      	str	r3, [sp, #8]
 800f27e:	2304      	movs	r3, #4
 800f280:	9301      	str	r3, [sp, #4]
 800f282:	2300      	movs	r3, #0
 800f284:	9300      	str	r3, [sp, #0]
 800f286:	230a      	movs	r3, #10
 800f288:	2204      	movs	r2, #4
 800f28a:	490a      	ldr	r1, [pc, #40]	; (800f2b4 <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 800f28c:	480a      	ldr	r0, [pc, #40]	; (800f2b8 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 800f28e:	f7ff ff4d 	bl	800f12c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f292:	4b05      	ldr	r3, [pc, #20]	; (800f2a8 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f294:	2201      	movs	r2, #1
 800f296:	601a      	str	r2, [r3, #0]
 800f298:	4808      	ldr	r0, [pc, #32]	; (800f2bc <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 800f29a:	f016 f985 	bl	80255a8 <atexit>
    return Asap_Bold_10_4bpp;
 800f29e:	4b06      	ldr	r3, [pc, #24]	; (800f2b8 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	2000853c 	.word	0x2000853c
 800f2ac:	0802ede8 	.word	0x0802ede8
 800f2b0:	08026ddc 	.word	0x08026ddc
 800f2b4:	0802ee04 	.word	0x0802ee04
 800f2b8:	20008518 	.word	0x20008518
 800f2bc:	0800f23d 	.word	0x0800f23d

0800f2c0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 27, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	4801      	ldr	r0, [pc, #4]	; (800f2cc <__tcf_0+0xc>)
 800f2c6:	f7ff fe8d 	bl	800efe4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	20008540 	.word	0x20008540

0800f2d0 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b08a      	sub	sp, #40	; 0x28
 800f2d4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 27, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f2d6:	4b15      	ldr	r3, [pc, #84]	; (800f32c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f003 0301 	and.w	r3, r3, #1
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d11f      	bne.n	800f322 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	9308      	str	r3, [sp, #32]
 800f2ea:	233f      	movs	r3, #63	; 0x3f
 800f2ec:	9307      	str	r3, [sp, #28]
 800f2ee:	4b10      	ldr	r3, [pc, #64]	; (800f330 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800f2f0:	9306      	str	r3, [sp, #24]
 800f2f2:	4b10      	ldr	r3, [pc, #64]	; (800f334 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800f2f4:	9305      	str	r3, [sp, #20]
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	9304      	str	r3, [sp, #16]
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	9303      	str	r3, [sp, #12]
 800f2fe:	2301      	movs	r3, #1
 800f300:	9302      	str	r3, [sp, #8]
 800f302:	2304      	movs	r3, #4
 800f304:	9301      	str	r3, [sp, #4]
 800f306:	2300      	movs	r3, #0
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	230c      	movs	r3, #12
 800f30c:	221b      	movs	r2, #27
 800f30e:	490a      	ldr	r1, [pc, #40]	; (800f338 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800f310:	480a      	ldr	r0, [pc, #40]	; (800f33c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800f312:	f7ff ff0b 	bl	800f12c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f316:	4b05      	ldr	r3, [pc, #20]	; (800f32c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f318:	2201      	movs	r2, #1
 800f31a:	601a      	str	r2, [r3, #0]
 800f31c:	4808      	ldr	r0, [pc, #32]	; (800f340 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800f31e:	f016 f943 	bl	80255a8 <atexit>
    return Asap_Bold_12_4bpp;
 800f322:	4b06      	ldr	r3, [pc, #24]	; (800f33c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800f324:	4618      	mov	r0, r3
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	20008564 	.word	0x20008564
 800f330:	0802edec 	.word	0x0802edec
 800f334:	08026de0 	.word	0x08026de0
 800f338:	0802ee3c 	.word	0x0802ee3c
 800f33c:	20008540 	.word	0x20008540
 800f340:	0800f2c1 	.word	0x0800f2c1

0800f344 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f344:	b580      	push	{r7, lr}
 800f346:	af00      	add	r7, sp, #0
 800f348:	4801      	ldr	r0, [pc, #4]	; (800f350 <__tcf_0+0xc>)
 800f34a:	f7ff fe4b 	bl	800efe4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f34e:	bd80      	pop	{r7, pc}
 800f350:	20008568 	.word	0x20008568

0800f354 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b08a      	sub	sp, #40	; 0x28
 800f358:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f35a:	4b15      	ldr	r3, [pc, #84]	; (800f3b0 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f003 0301 	and.w	r3, r3, #1
 800f362:	2b00      	cmp	r3, #0
 800f364:	d11f      	bne.n	800f3a6 <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 800f366:	2300      	movs	r3, #0
 800f368:	9309      	str	r3, [sp, #36]	; 0x24
 800f36a:	2300      	movs	r3, #0
 800f36c:	9308      	str	r3, [sp, #32]
 800f36e:	2300      	movs	r3, #0
 800f370:	9307      	str	r3, [sp, #28]
 800f372:	4b10      	ldr	r3, [pc, #64]	; (800f3b4 <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 800f374:	9306      	str	r3, [sp, #24]
 800f376:	4b10      	ldr	r3, [pc, #64]	; (800f3b8 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 800f378:	9305      	str	r3, [sp, #20]
 800f37a:	2300      	movs	r3, #0
 800f37c:	9304      	str	r3, [sp, #16]
 800f37e:	2300      	movs	r3, #0
 800f380:	9303      	str	r3, [sp, #12]
 800f382:	2301      	movs	r3, #1
 800f384:	9302      	str	r3, [sp, #8]
 800f386:	2304      	movs	r3, #4
 800f388:	9301      	str	r3, [sp, #4]
 800f38a:	2300      	movs	r3, #0
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	2312      	movs	r3, #18
 800f390:	220d      	movs	r2, #13
 800f392:	490a      	ldr	r1, [pc, #40]	; (800f3bc <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 800f394:	480a      	ldr	r0, [pc, #40]	; (800f3c0 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 800f396:	f7ff fec9 	bl	800f12c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f39a:	4b05      	ldr	r3, [pc, #20]	; (800f3b0 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f39c:	2201      	movs	r2, #1
 800f39e:	601a      	str	r2, [r3, #0]
 800f3a0:	4808      	ldr	r0, [pc, #32]	; (800f3c4 <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 800f3a2:	f016 f901 	bl	80255a8 <atexit>
    return Asap_Bold_18_4bpp;
 800f3a6:	4b06      	ldr	r3, [pc, #24]	; (800f3c0 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	2000858c 	.word	0x2000858c
 800f3b4:	0802edf0 	.word	0x0802edf0
 800f3b8:	08026de4 	.word	0x08026de4
 800f3bc:	0802efb8 	.word	0x0802efb8
 800f3c0:	20008568 	.word	0x20008568
 800f3c4:	0800f345 	.word	0x0800f345

0800f3c8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	4801      	ldr	r0, [pc, #4]	; (800f3d4 <__tcf_0+0xc>)
 800f3ce:	f7ff fe09 	bl	800efe4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	20008590 	.word	0x20008590

0800f3d8 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b08a      	sub	sp, #40	; 0x28
 800f3dc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f3de:	4b15      	ldr	r3, [pc, #84]	; (800f434 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f003 0301 	and.w	r3, r3, #1
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d11f      	bne.n	800f42a <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	9308      	str	r3, [sp, #32]
 800f3f2:	233f      	movs	r3, #63	; 0x3f
 800f3f4:	9307      	str	r3, [sp, #28]
 800f3f6:	4b10      	ldr	r3, [pc, #64]	; (800f438 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 800f3f8:	9306      	str	r3, [sp, #24]
 800f3fa:	4b10      	ldr	r3, [pc, #64]	; (800f43c <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 800f3fc:	9305      	str	r3, [sp, #20]
 800f3fe:	2301      	movs	r3, #1
 800f400:	9304      	str	r3, [sp, #16]
 800f402:	2300      	movs	r3, #0
 800f404:	9303      	str	r3, [sp, #12]
 800f406:	2301      	movs	r3, #1
 800f408:	9302      	str	r3, [sp, #8]
 800f40a:	2304      	movs	r3, #4
 800f40c:	9301      	str	r3, [sp, #4]
 800f40e:	2300      	movs	r3, #0
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	2315      	movs	r3, #21
 800f414:	220d      	movs	r2, #13
 800f416:	490a      	ldr	r1, [pc, #40]	; (800f440 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 800f418:	480a      	ldr	r0, [pc, #40]	; (800f444 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 800f41a:	f7ff fe87 	bl	800f12c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f41e:	4b05      	ldr	r3, [pc, #20]	; (800f434 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f420:	2201      	movs	r2, #1
 800f422:	601a      	str	r2, [r3, #0]
 800f424:	4808      	ldr	r0, [pc, #32]	; (800f448 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 800f426:	f016 f8bf 	bl	80255a8 <atexit>
    return Asap_Bold_21_4bpp;
 800f42a:	4b06      	ldr	r3, [pc, #24]	; (800f444 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	200085b4 	.word	0x200085b4
 800f438:	0802edf4 	.word	0x0802edf4
 800f43c:	08026de8 	.word	0x08026de8
 800f440:	0802f070 	.word	0x0802f070
 800f444:	20008590 	.word	0x20008590
 800f448:	0800f3c9 	.word	0x0800f3c9

0800f44c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f44c:	b580      	push	{r7, lr}
 800f44e:	af00      	add	r7, sp, #0
 800f450:	4801      	ldr	r0, [pc, #4]	; (800f458 <__tcf_0+0xc>)
 800f452:	f7ff fdc7 	bl	800efe4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f456:	bd80      	pop	{r7, pc}
 800f458:	200085b8 	.word	0x200085b8

0800f45c <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b08a      	sub	sp, #40	; 0x28
 800f460:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f462:	4b15      	ldr	r3, [pc, #84]	; (800f4b8 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f003 0301 	and.w	r3, r3, #1
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d11f      	bne.n	800f4ae <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800f46e:	2300      	movs	r3, #0
 800f470:	9309      	str	r3, [sp, #36]	; 0x24
 800f472:	2300      	movs	r3, #0
 800f474:	9308      	str	r3, [sp, #32]
 800f476:	233f      	movs	r3, #63	; 0x3f
 800f478:	9307      	str	r3, [sp, #28]
 800f47a:	4b10      	ldr	r3, [pc, #64]	; (800f4bc <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800f47c:	9306      	str	r3, [sp, #24]
 800f47e:	4b10      	ldr	r3, [pc, #64]	; (800f4c0 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800f480:	9305      	str	r3, [sp, #20]
 800f482:	2301      	movs	r3, #1
 800f484:	9304      	str	r3, [sp, #16]
 800f486:	2300      	movs	r3, #0
 800f488:	9303      	str	r3, [sp, #12]
 800f48a:	2301      	movs	r3, #1
 800f48c:	9302      	str	r3, [sp, #8]
 800f48e:	2304      	movs	r3, #4
 800f490:	9301      	str	r3, [sp, #4]
 800f492:	2300      	movs	r3, #0
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	231e      	movs	r3, #30
 800f498:	220c      	movs	r2, #12
 800f49a:	490a      	ldr	r1, [pc, #40]	; (800f4c4 <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800f49c:	480a      	ldr	r0, [pc, #40]	; (800f4c8 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800f49e:	f7ff fe45 	bl	800f12c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f4a2:	4b05      	ldr	r3, [pc, #20]	; (800f4b8 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	601a      	str	r2, [r3, #0]
 800f4a8:	4808      	ldr	r0, [pc, #32]	; (800f4cc <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800f4aa:	f016 f87d 	bl	80255a8 <atexit>
    return Asap_Bold_30_4bpp;
 800f4ae:	4b06      	ldr	r3, [pc, #24]	; (800f4c8 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	200085dc 	.word	0x200085dc
 800f4bc:	0802edf8 	.word	0x0802edf8
 800f4c0:	08026dec 	.word	0x08026dec
 800f4c4:	0802f128 	.word	0x0802f128
 800f4c8:	200085b8 	.word	0x200085b8
 800f4cc:	0800f44d 	.word	0x0800f44d

0800f4d0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	4801      	ldr	r0, [pc, #4]	; (800f4dc <__tcf_0+0xc>)
 800f4d6:	f7ff fd85 	bl	800efe4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	200085e0 	.word	0x200085e0

0800f4e0 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b08a      	sub	sp, #40	; 0x28
 800f4e4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f4e6:	4b15      	ldr	r3, [pc, #84]	; (800f53c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f003 0301 	and.w	r3, r3, #1
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d11f      	bne.n	800f532 <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	9308      	str	r3, [sp, #32]
 800f4fa:	233f      	movs	r3, #63	; 0x3f
 800f4fc:	9307      	str	r3, [sp, #28]
 800f4fe:	4b10      	ldr	r3, [pc, #64]	; (800f540 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800f500:	9306      	str	r3, [sp, #24]
 800f502:	4b10      	ldr	r3, [pc, #64]	; (800f544 <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800f504:	9305      	str	r3, [sp, #20]
 800f506:	2301      	movs	r3, #1
 800f508:	9304      	str	r3, [sp, #16]
 800f50a:	2300      	movs	r3, #0
 800f50c:	9303      	str	r3, [sp, #12]
 800f50e:	2301      	movs	r3, #1
 800f510:	9302      	str	r3, [sp, #8]
 800f512:	2304      	movs	r3, #4
 800f514:	9301      	str	r3, [sp, #4]
 800f516:	2300      	movs	r3, #0
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	2328      	movs	r3, #40	; 0x28
 800f51c:	220d      	movs	r2, #13
 800f51e:	490a      	ldr	r1, [pc, #40]	; (800f548 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800f520:	480a      	ldr	r0, [pc, #40]	; (800f54c <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800f522:	f7ff fe03 	bl	800f12c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f526:	4b05      	ldr	r3, [pc, #20]	; (800f53c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f528:	2201      	movs	r2, #1
 800f52a:	601a      	str	r2, [r3, #0]
 800f52c:	4808      	ldr	r0, [pc, #32]	; (800f550 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800f52e:	f016 f83b 	bl	80255a8 <atexit>
    return Asap_Bold_40_4bpp;
 800f532:	4b06      	ldr	r3, [pc, #24]	; (800f54c <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800f534:	4618      	mov	r0, r3
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	20008604 	.word	0x20008604
 800f540:	0802edfc 	.word	0x0802edfc
 800f544:	08026df0 	.word	0x08026df0
 800f548:	0802f1d0 	.word	0x0802f1d0
 800f54c:	200085e0 	.word	0x200085e0
 800f550:	0800f4d1 	.word	0x0800f4d1

0800f554 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f554:	b580      	push	{r7, lr}
 800f556:	af00      	add	r7, sp, #0
 800f558:	4801      	ldr	r0, [pc, #4]	; (800f560 <__tcf_0+0xc>)
 800f55a:	f7ff fd43 	bl	800efe4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	20008608 	.word	0x20008608

0800f564 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08a      	sub	sp, #40	; 0x28
 800f568:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f56a:	4b15      	ldr	r3, [pc, #84]	; (800f5c0 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f003 0301 	and.w	r3, r3, #1
 800f572:	2b00      	cmp	r3, #0
 800f574:	d11f      	bne.n	800f5b6 <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800f576:	2300      	movs	r3, #0
 800f578:	9309      	str	r3, [sp, #36]	; 0x24
 800f57a:	2300      	movs	r3, #0
 800f57c:	9308      	str	r3, [sp, #32]
 800f57e:	233f      	movs	r3, #63	; 0x3f
 800f580:	9307      	str	r3, [sp, #28]
 800f582:	4b10      	ldr	r3, [pc, #64]	; (800f5c4 <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800f584:	9306      	str	r3, [sp, #24]
 800f586:	4b10      	ldr	r3, [pc, #64]	; (800f5c8 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800f588:	9305      	str	r3, [sp, #20]
 800f58a:	2300      	movs	r3, #0
 800f58c:	9304      	str	r3, [sp, #16]
 800f58e:	2300      	movs	r3, #0
 800f590:	9303      	str	r3, [sp, #12]
 800f592:	2301      	movs	r3, #1
 800f594:	9302      	str	r3, [sp, #8]
 800f596:	2304      	movs	r3, #4
 800f598:	9301      	str	r3, [sp, #4]
 800f59a:	2300      	movs	r3, #0
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	233c      	movs	r3, #60	; 0x3c
 800f5a0:	220c      	movs	r2, #12
 800f5a2:	490a      	ldr	r1, [pc, #40]	; (800f5cc <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800f5a4:	480a      	ldr	r0, [pc, #40]	; (800f5d0 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800f5a6:	f7ff fdc1 	bl	800f12c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f5aa:	4b05      	ldr	r3, [pc, #20]	; (800f5c0 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	601a      	str	r2, [r3, #0]
 800f5b0:	4808      	ldr	r0, [pc, #32]	; (800f5d4 <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800f5b2:	f015 fff9 	bl	80255a8 <atexit>
    return Asap_Bold_60_4bpp;
 800f5b6:	4b06      	ldr	r3, [pc, #24]	; (800f5d0 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	2000862c 	.word	0x2000862c
 800f5c4:	0802ee00 	.word	0x0802ee00
 800f5c8:	08026df4 	.word	0x08026df4
 800f5cc:	0802f288 	.word	0x0802f288
 800f5d0:	20008608 	.word	0x20008608
 800f5d4:	0800f555 	.word	0x0800f555

0800f5d8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	370c      	adds	r7, #12
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr

0800f5f0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
    {
    }
 800f5fa:	bf00      	nop
 800f5fc:	370c      	adds	r7, #12
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr

0800f606 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f606:	b480      	push	{r7}
 800f608:	b083      	sub	sp, #12
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	6039      	str	r1, [r7, #0]
    {
    }
 800f610:	bf00      	nop
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
    {
    }
 800f626:	bf00      	nop
 800f628:	370c      	adds	r7, #12
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr

0800f632 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f632:	b480      	push	{r7}
 800f634:	b083      	sub	sp, #12
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	460b      	mov	r3, r1
 800f63c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f63e:	bf00      	nop
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f64a:	b480      	push	{r7}
 800f64c:	b083      	sub	sp, #12
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
    {
    }
 800f652:	bf00      	nop
 800f654:	370c      	adds	r7, #12
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr

0800f65e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800f65e:	b480      	push	{r7}
 800f660:	b083      	sub	sp, #12
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
    {
    }
 800f666:	bf00      	nop
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
	...

0800f674 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
    {
 800f67c:	4a04      	ldr	r2, [pc, #16]	; (800f690 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	601a      	str	r2, [r3, #0]
    }
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4618      	mov	r0, r3
 800f686:	370c      	adds	r7, #12
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr
 800f690:	08026ee8 	.word	0x08026ee8

0800f694 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
    }
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7ff ffe9 	bl	800f674 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f6a2:	2104      	movs	r1, #4
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f015 ff36 	bl	8025516 <_ZdlPvj>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800f6bc:	4a07      	ldr	r2, [pc, #28]	; (800f6dc <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	605a      	str	r2, [r3, #4]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	721a      	strb	r2, [r3, #8]
    {
    }
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr
 800f6dc:	08026ec8 	.word	0x08026ec8

0800f6e0 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800f6e0:	b480      	push	{r7}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
    {
 800f6e8:	4a04      	ldr	r2, [pc, #16]	; (800f6fc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	601a      	str	r2, [r3, #0]
    }
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr
 800f6fc:	08026ec8 	.word	0x08026ec8

0800f700 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
    }
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f7ff ffe9 	bl	800f6e0 <_ZN8touchgfx10TransitionD1Ev>
 800f70e:	210c      	movs	r1, #12
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f015 ff00 	bl	8025516 <_ZdlPvj>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4618      	mov	r0, r3
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800f720:	b480      	push	{r7}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	bf00      	nop
 800f72a:	370c      	adds	r7, #12
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800f734:	b480      	push	{r7}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	bf00      	nop
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	bf00      	nop
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f75c:	b480      	push	{r7}
 800f75e:	b083      	sub	sp, #12
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	683a      	ldr	r2, [r7, #0]
 800f76a:	605a      	str	r2, [r3, #4]
    }
 800f76c:	bf00      	nop
 800f76e:	370c      	adds	r7, #12
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	460b      	mov	r3, r1
 800f782:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
    {
 800f798:	4a04      	ldr	r2, [pc, #16]	; (800f7ac <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	601a      	str	r2, [r3, #0]
    }
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr
 800f7ac:	08026eb0 	.word	0x08026eb0

0800f7b0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
    }
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7ff ffe9 	bl	800f790 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f7be:	2104      	movs	r1, #4
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f015 fea8 	bl	8025516 <_ZdlPvj>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3708      	adds	r7, #8
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f7d0:	b480      	push	{r7}
 800f7d2:	af00      	add	r7, sp, #0
    {
        return instance;
 800f7d4:	4b03      	ldr	r3, [pc, #12]	; (800f7e4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
    }
 800f7d8:	4618      	mov	r0, r3
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	2000bb90 	.word	0x2000bb90

0800f7e8 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f7e8:	b480      	push	{r7}
 800f7ea:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f7ec:	4b0b      	ldr	r3, [pc, #44]	; (800f81c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d008      	beq.n	800f80a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f7f8:	4b08      	ldr	r3, [pc, #32]	; (800f81c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d003      	beq.n	800f80a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f802:	4b06      	ldr	r3, [pc, #24]	; (800f81c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f808:	e002      	b.n	800f810 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f80a:	4b04      	ldr	r3, [pc, #16]	; (800f81c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f810:	4618      	mov	r0, r3
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	2000bb90 	.word	0x2000bb90

0800f820 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	4a05      	ldr	r2, [pc, #20]	; (800f840 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4618      	mov	r0, r3
 800f832:	f7ff ff1f 	bl	800f674 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4618      	mov	r0, r3
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	08028ef0 	.word	0x08028ef0

0800f844 <_ZN8touchgfx11ApplicationD0Ev>:
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7ff ffe7 	bl	800f820 <_ZN8touchgfx11ApplicationD1Ev>
 800f852:	f44f 7198 	mov.w	r1, #304	; 0x130
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f015 fe5d 	bl	8025516 <_ZdlPvj>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4618      	mov	r0, r3
 800f860:	3708      	adds	r7, #8
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
	...

0800f868 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4618      	mov	r0, r3
 800f874:	f009 fbdc 	bl	8019030 <_ZN8touchgfx11ApplicationC1Ev>
 800f878:	4a09      	ldr	r2, [pc, #36]	; (800f8a0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2200      	movs	r2, #0
 800f882:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2200      	movs	r2, #0
 800f88a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4a04      	ldr	r2, [pc, #16]	; (800f8a4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800f892:	6013      	str	r3, [r2, #0]
    }
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4618      	mov	r0, r3
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	08026e74 	.word	0x08026e74
 800f8a4:	2000bc1c 	.word	0x2000bc1c

0800f8a8 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	4a05      	ldr	r2, [pc, #20]	; (800f8c8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	601a      	str	r2, [r3, #0]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7ff ffb1 	bl	800f820 <_ZN8touchgfx11ApplicationD1Ev>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	08026e74 	.word	0x08026e74

0800f8cc <_ZN8touchgfx14MVPApplicationD0Ev>:
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7ff ffe7 	bl	800f8a8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f8da:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f015 fe19 	bl	8025516 <_ZdlPvj>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3708      	adds	r7, #8
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}

0800f8ee <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800f8ee:	b580      	push	{r7, lr}
 800f8f0:	b082      	sub	sp, #8
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 f804 	bl	800f904 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800f8fc:	bf00      	nop
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f912:	2b00      	cmp	r3, #0
 800f914:	d00f      	beq.n	800f936 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	330c      	adds	r3, #12
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4610      	mov	r0, r2
 800f92a:	4798      	blx	r3
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d001      	beq.n	800f936 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f932:	2301      	movs	r3, #1
 800f934:	e000      	b.n	800f938 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800f936:	2300      	movs	r3, #0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00e      	beq.n	800f95a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	3308      	adds	r3, #8
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4610      	mov	r0, r2
 800f950:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2200      	movs	r2, #0
 800f956:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800f95a:	bf00      	nop
 800f95c:	3708      	adds	r7, #8
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}

0800f962 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800f962:	b580      	push	{r7, lr}
 800f964:	b084      	sub	sp, #16
 800f966:	af00      	add	r7, sp, #0
 800f968:	60f8      	str	r0, [r7, #12]
 800f96a:	60b9      	str	r1, [r7, #8]
 800f96c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800f96e:	f009 fb3d 	bl	8018fec <_ZN8touchgfx11Application11getInstanceEv>
 800f972:	4603      	mov	r3, r0
 800f974:	4618      	mov	r0, r3
 800f976:	f009 fb3f 	bl	8018ff8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d008      	beq.n	800f994 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	330c      	adds	r3, #12
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4610      	mov	r0, r2
 800f992:	4798      	blx	r3
    }
    if (*currentTrans)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d007      	beq.n	800f9ac <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4610      	mov	r0, r2
 800f9aa:	4798      	blx	r3
    }
    if (*currentScreen)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d008      	beq.n	800f9c6 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	3314      	adds	r3, #20
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4610      	mov	r0, r2
 800f9c4:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d008      	beq.n	800f9e0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	3304      	adds	r3, #4
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4610      	mov	r0, r2
 800f9de:	4798      	blx	r3
    }
    if (*currentScreen)
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d007      	beq.n	800f9f8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4610      	mov	r0, r2
 800f9f6:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d008      	beq.n	800fa12 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	3308      	adds	r3, #8
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	4610      	mov	r0, r2
 800fa10:	4798      	blx	r3
    }
}
 800fa12:	bf00      	nop
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b084      	sub	sp, #16
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	60f8      	str	r0, [r7, #12]
 800fa22:	60b9      	str	r1, [r7, #8]
 800fa24:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	330c      	adds	r3, #12
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	4798      	blx	r3
    newPresenter->activate();
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	68b8      	ldr	r0, [r7, #8]
 800fa3a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800fa3c:	6879      	ldr	r1, [r7, #4]
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f00a fc0c 	bl	801a25c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	3310      	adds	r3, #16
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	4798      	blx	r3

    Application::getInstance()->draw();
 800fa50:	f009 facc 	bl	8018fec <_ZN8touchgfx11Application11getInstanceEv>
 800fa54:	4602      	mov	r2, r0
 800fa56:	6813      	ldr	r3, [r2, #0]
 800fa58:	3328      	adds	r3, #40	; 0x28
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4610      	mov	r0, r2
 800fa5e:	4798      	blx	r3
}
 800fa60:	bf00      	nop
 800fa62:	3710      	adds	r7, #16
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	683a      	ldr	r2, [r7, #0]
 800fa76:	601a      	str	r2, [r3, #0]
    }
 800fa78:	bf00      	nop
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	4a08      	ldr	r2, [pc, #32]	; (800fab0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	601a      	str	r2, [r3, #0]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f000 fa5f 	bl	800ff5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7ff ff01 	bl	800f8a8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4618      	mov	r0, r3
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	08026e20 	.word	0x08026e20

0800fab4 <_ZN23FrontendApplicationBaseD0Ev>:
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f7ff ffe1 	bl	800fa84 <_ZN23FrontendApplicationBaseD1Ev>
 800fac2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f015 fd25 	bl	8025516 <_ZdlPvj>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	4618      	mov	r0, r3
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
	...

0800fad8 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7ff fde6 	bl	800f6b4 <_ZN8touchgfx10TransitionC1Ev>
 800fae8:	4a03      	ldr	r2, [pc, #12]	; (800faf8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	601a      	str	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4618      	mov	r0, r3
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	08026e00 	.word	0x08026e00

0800fafc <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	4a05      	ldr	r2, [pc, #20]	; (800fb1c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	601a      	str	r2, [r3, #0]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7ff fde7 	bl	800f6e0 <_ZN8touchgfx10TransitionD1Ev>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4618      	mov	r0, r3
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	08026e00 	.word	0x08026e00

0800fb20 <_ZN8touchgfx12NoTransitionD0Ev>:
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f7ff ffe7 	bl	800fafc <_ZN8touchgfx12NoTransitionD1Ev>
 800fb2e:	210c      	movs	r1, #12
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f015 fcf0 	bl	8025516 <_ZdlPvj>
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	721a      	strb	r2, [r3, #8]
    }
 800fb4e:	bf00      	nop
 800fb50:	370c      	adds	r7, #12
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr

0800fb5a <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800fb5a:	b480      	push	{r7}
 800fb5c:	b083      	sub	sp, #12
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	683a      	ldr	r2, [r7, #0]
 800fb68:	605a      	str	r2, [r3, #4]
    }
 800fb6a:	bf00      	nop
 800fb6c:	370c      	adds	r7, #12
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr
	...

0800fb78 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7ff fe6e 	bl	800f868 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fb8c:	4a13      	ldr	r2, [pc, #76]	; (800fbdc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f000 f89f 	bl	800fcdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	68ba      	ldr	r2, [r7, #8]
 800fbaa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fbae:	f7ff fe0f 	bl	800f7d0 <_ZN8touchgfx3HAL11getInstanceEv>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	6813      	ldr	r3, [r2, #0]
 800fbb6:	3308      	adds	r3, #8
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2100      	movs	r1, #0
 800fbbc:	4610      	mov	r0, r2
 800fbbe:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800fbc0:	2000      	movs	r0, #0
 800fbc2:	f002 fb81 	bl	80122c8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fbc6:	f7ff fe0f 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f00f f9b0 	bl	801ef32 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	08026e20 	.word	0x08026e20

0800fbe0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fbe0:	b480      	push	{r7}
 800fbe2:	b083      	sub	sp, #12
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	6039      	str	r1, [r7, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4618      	mov	r0, r3
 800fbee:	370c      	adds	r7, #12
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr

0800fbf8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	683a      	ldr	r2, [r7, #0]
 800fc06:	4611      	mov	r1, r2
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7ff ffe9 	bl	800fbe0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	685a      	ldr	r2, [r3, #4]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	605a      	str	r2, [r3, #4]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	683a      	ldr	r2, [r7, #0]
 800fc1a:	3308      	adds	r3, #8
 800fc1c:	3208      	adds	r2, #8
 800fc1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc22:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800fc30:	b590      	push	{r4, r7, lr}
 800fc32:	b089      	sub	sp, #36	; 0x24
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800fc3e:	4b10      	ldr	r3, [pc, #64]	; (800fc80 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800fc40:	61bb      	str	r3, [r7, #24]
 800fc42:	2300      	movs	r3, #0
 800fc44:	61fb      	str	r3, [r7, #28]
 800fc46:	f107 0008 	add.w	r0, r7, #8
 800fc4a:	f107 0318 	add.w	r3, r7, #24
 800fc4e:	cb0c      	ldmia	r3, {r2, r3}
 800fc50:	6879      	ldr	r1, [r7, #4]
 800fc52:	f000 f85f 	bl	800fd14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fc56:	f107 0308 	add.w	r3, r7, #8
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	f7ff ffcb 	bl	800fbf8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fc62:	f107 0308 	add.w	r3, r7, #8
 800fc66:	4618      	mov	r0, r3
 800fc68:	f000 f978 	bl	800ff5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800fc78:	bf00      	nop
 800fc7a:	3724      	adds	r7, #36	; 0x24
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd90      	pop	{r4, r7, pc}
 800fc80:	0800fc85 	.word	0x0800fc85

0800fc84 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af02      	add	r7, sp, #8
 800fc8a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800fc98:	461a      	mov	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800fca0:	9300      	str	r3, [sp, #0]
 800fca2:	4b04      	ldr	r3, [pc, #16]	; (800fcb4 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800fca4:	4804      	ldr	r0, [pc, #16]	; (800fcb8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800fca6:	f000 f855 	bl	800fd54 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fcaa:	bf00      	nop
 800fcac:	3708      	adds	r7, #8
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
 800fcb2:	bf00      	nop
 800fcb4:	2000bc10 	.word	0x2000bc10
 800fcb8:	2000bc0c 	.word	0x2000bc0c

0800fcbc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	4a04      	ldr	r2, [pc, #16]	; (800fcd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	601a      	str	r2, [r3, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4618      	mov	r0, r3
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr
 800fcd8:	08026eb0 	.word	0x08026eb0

0800fcdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7ff ffe8 	bl	800fcbc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fcec:	4a08      	ldr	r2, [pc, #32]	; (800fd10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	601a      	str	r2, [r3, #0]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	605a      	str	r2, [r3, #4]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	609a      	str	r2, [r3, #8]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	60da      	str	r2, [r3, #12]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4618      	mov	r0, r3
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	08026e5c 	.word	0x08026e5c

0800fd14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	4639      	mov	r1, r7
 800fd20:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7ff ffc8 	bl	800fcbc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fd2c:	4a08      	ldr	r2, [pc, #32]	; (800fd50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	68ba      	ldr	r2, [r7, #8]
 800fd36:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	3308      	adds	r3, #8
 800fd3c:	463a      	mov	r2, r7
 800fd3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd42:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	08026e5c 	.word	0x08026e5c

0800fd54 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800fd54:	b590      	push	{r4, r7, lr}
 800fd56:	b089      	sub	sp, #36	; 0x24
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	607a      	str	r2, [r7, #4]
 800fd60:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	689a      	ldr	r2, [r3, #8]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	3320      	adds	r3, #32
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4610      	mov	r0, r2
 800fd72:	4798      	blx	r3
 800fd74:	4602      	mov	r2, r0
 800fd76:	f242 6317 	movw	r3, #9751	; 0x2617
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d805      	bhi.n	800fd8a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800fd7e:	4b4e      	ldr	r3, [pc, #312]	; (800feb8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800fd80:	4a4e      	ldr	r2, [pc, #312]	; (800febc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fd82:	21c2      	movs	r1, #194	; 0xc2
 800fd84:	484e      	ldr	r0, [pc, #312]	; (800fec0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fd86:	f015 fbf1 	bl	802556c <__assert_func>
 800fd8a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	685a      	ldr	r2, [r3, #4]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	3320      	adds	r3, #32
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	4610      	mov	r0, r2
 800fd9c:	4798      	blx	r3
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b0f      	cmp	r3, #15
 800fda2:	d805      	bhi.n	800fdb0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800fda4:	4b47      	ldr	r3, [pc, #284]	; (800fec4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800fda6:	4a45      	ldr	r2, [pc, #276]	; (800febc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fda8:	21c3      	movs	r1, #195	; 0xc3
 800fdaa:	4845      	ldr	r0, [pc, #276]	; (800fec0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fdac:	f015 fbde 	bl	802556c <__assert_func>
 800fdb0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68da      	ldr	r2, [r3, #12]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	68db      	ldr	r3, [r3, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	3320      	adds	r3, #32
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4610      	mov	r0, r2
 800fdc2:	4798      	blx	r3
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	2b0b      	cmp	r3, #11
 800fdc8:	d805      	bhi.n	800fdd6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800fdca:	4b3f      	ldr	r3, [pc, #252]	; (800fec8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800fdcc:	4a3b      	ldr	r2, [pc, #236]	; (800febc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800fdce:	21c4      	movs	r1, #196	; 0xc4
 800fdd0:	483b      	ldr	r0, [pc, #236]	; (800fec0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800fdd2:	f015 fbcb 	bl	802556c <__assert_func>
 800fdd6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800fdd8:	683a      	ldr	r2, [r7, #0]
 800fdda:	68b9      	ldr	r1, [r7, #8]
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f7ff fdc0 	bl	800f962 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	2100      	movs	r1, #0
 800fde8:	4618      	mov	r0, r3
 800fdea:	f000 f86f 	bl	800fecc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	200c      	movs	r0, #12
 800fdf4:	f7ff fbf0 	bl	800f5d8 <_ZnwjPv>
 800fdf8:	4604      	mov	r4, r0
 800fdfa:	2c00      	cmp	r4, #0
 800fdfc:	d004      	beq.n	800fe08 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f7ff fe6a 	bl	800fad8 <_ZN8touchgfx12NoTransitionC1Ev>
 800fe04:	4623      	mov	r3, r4
 800fe06:	e000      	b.n	800fe0a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800fe08:	4623      	mov	r3, r4
 800fe0a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	2100      	movs	r1, #0
 800fe12:	4618      	mov	r0, r3
 800fe14:	f000 f86d 	bl	800fef2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	f242 6018 	movw	r0, #9752	; 0x2618
 800fe20:	f7ff fbda 	bl	800f5d8 <_ZnwjPv>
 800fe24:	4604      	mov	r4, r0
 800fe26:	2c00      	cmp	r4, #0
 800fe28:	d004      	beq.n	800fe34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f002 fcd4 	bl	80127d8 <_ZN8MainViewC1Ev>
 800fe30:	4623      	mov	r3, r4
 800fe32:	e000      	b.n	800fe36 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800fe34:	4623      	mov	r3, r4
 800fe36:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f000 f86a 	bl	800ff18 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800fe44:	4603      	mov	r3, r0
 800fe46:	4619      	mov	r1, r3
 800fe48:	2010      	movs	r0, #16
 800fe4a:	f7ff fbc5 	bl	800f5d8 <_ZnwjPv>
 800fe4e:	4604      	mov	r4, r0
 800fe50:	2c00      	cmp	r4, #0
 800fe52:	d005      	beq.n	800fe60 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800fe54:	69b9      	ldr	r1, [r7, #24]
 800fe56:	4620      	mov	r0, r4
 800fe58:	f002 fc04 	bl	8012664 <_ZN13MainPresenterC1ER8MainView>
 800fe5c:	4623      	mov	r3, r4
 800fe5e:	e000      	b.n	800fe62 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800fe60:	4623      	mov	r3, r4
 800fe62:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	69fa      	ldr	r2, [r7, #28]
 800fe68:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	697a      	ldr	r2, [r7, #20]
 800fe6e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	69ba      	ldr	r2, [r7, #24]
 800fe74:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d002      	beq.n	800fe82 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	3304      	adds	r3, #4
 800fe80:	e000      	b.n	800fe84 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800fe82:	2300      	movs	r3, #0
 800fe84:	4619      	mov	r1, r3
 800fe86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe88:	f7ff fdee 	bl	800fa68 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	3304      	adds	r3, #4
 800fe90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7ff fe61 	bl	800fb5a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	6979      	ldr	r1, [r7, #20]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f000 f84e 	bl	800ff3e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800fea2:	69fa      	ldr	r2, [r7, #28]
 800fea4:	6979      	ldr	r1, [r7, #20]
 800fea6:	69b8      	ldr	r0, [r7, #24]
 800fea8:	f7ff fdb7 	bl	800fa1a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800feac:	697b      	ldr	r3, [r7, #20]
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3724      	adds	r7, #36	; 0x24
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd90      	pop	{r4, r7, pc}
 800feb6:	bf00      	nop
 800feb8:	080266f8 	.word	0x080266f8
 800febc:	08026f08 	.word	0x08026f08
 800fec0:	08026788 	.word	0x08026788
 800fec4:	080267cc 	.word	0x080267cc
 800fec8:	08026870 	.word	0x08026870

0800fecc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	460b      	mov	r3, r1
 800fed6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	3324      	adds	r3, #36	; 0x24
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	887a      	ldrh	r2, [r7, #2]
 800fee2:	4611      	mov	r1, r2
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	4798      	blx	r3
 800fee8:	4603      	mov	r3, r0
    }
 800feea:	4618      	mov	r0, r3
 800feec:	3708      	adds	r7, #8
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b082      	sub	sp, #8
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
 800fefa:	460b      	mov	r3, r1
 800fefc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	3324      	adds	r3, #36	; 0x24
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	887a      	ldrh	r2, [r7, #2]
 800ff08:	4611      	mov	r1, r2
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	4798      	blx	r3
 800ff0e:	4603      	mov	r3, r0
    }
 800ff10:	4618      	mov	r0, r3
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	460b      	mov	r3, r1
 800ff22:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	3324      	adds	r3, #36	; 0x24
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	887a      	ldrh	r2, [r7, #2]
 800ff2e:	4611      	mov	r1, r2
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	4798      	blx	r3
 800ff34:	4603      	mov	r3, r0
    }
 800ff36:	4618      	mov	r0, r3
 800ff38:	3708      	adds	r7, #8
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}

0800ff3e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800ff3e:	b480      	push	{r7}
 800ff40:	b083      	sub	sp, #12
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	6078      	str	r0, [r7, #4]
 800ff46:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	683a      	ldr	r2, [r7, #0]
 800ff4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ff4e:	bf00      	nop
 800ff50:	370c      	adds	r7, #12
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr
	...

0800ff5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	4a05      	ldr	r2, [pc, #20]	; (800ff7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	601a      	str	r2, [r3, #0]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7ff fc0f 	bl	800f790 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	4618      	mov	r0, r3
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	08026e5c 	.word	0x08026e5c

0800ff80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff ffe7 	bl	800ff5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ff8e:	2110      	movs	r1, #16
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f015 fac0 	bl	8025516 <_ZdlPvj>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	68d2      	ldr	r2, [r2, #12]
 800ffb0:	1052      	asrs	r2, r2, #1
 800ffb2:	1899      	adds	r1, r3, r2
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	f003 0301 	and.w	r3, r3, #1
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d102      	bne.n	800ffc6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	e00a      	b.n	800ffdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	68d2      	ldr	r2, [r2, #12]
 800ffce:	1052      	asrs	r2, r2, #1
 800ffd0:	4413      	add	r3, r2
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	6892      	ldr	r2, [r2, #8]
 800ffd8:	4413      	add	r3, r2
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4608      	mov	r0, r1
 800ffde:	4798      	blx	r3
    }
 800ffe0:	bf00      	nop
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d010      	beq.n	801001a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d107      	bne.n	8010010 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	68db      	ldr	r3, [r3, #12]
 8010004:	f003 0301 	and.w	r3, r3, #1
 8010008:	2b00      	cmp	r3, #0
 801000a:	d101      	bne.n	8010010 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801000c:	2301      	movs	r3, #1
 801000e:	e000      	b.n	8010012 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010010:	2300      	movs	r3, #0
 8010012:	2b01      	cmp	r3, #1
 8010014:	d001      	beq.n	801001a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010016:	2301      	movs	r3, #1
 8010018:	e000      	b.n	801001c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801001a:	2300      	movs	r3, #0
    }
 801001c:	4618      	mov	r0, r3
 801001e:	370c      	adds	r7, #12
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr

08010028 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8010028:	b480      	push	{r7}
 801002a:	b083      	sub	sp, #12
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	683a      	ldr	r2, [r7, #0]
 8010036:	601a      	str	r2, [r3, #0]
    }
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4618      	mov	r0, r3
 801003c:	370c      	adds	r7, #12
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr

08010046 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8010046:	b480      	push	{r7}
 8010048:	b083      	sub	sp, #12
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2200      	movs	r2, #0
 8010052:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2200      	movs	r2, #0
 801005e:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	80da      	strh	r2, [r3, #6]
    }
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4618      	mov	r0, r3
 801006a:	370c      	adds	r7, #12
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	4608      	mov	r0, r1
 801007e:	4611      	mov	r1, r2
 8010080:	461a      	mov	r2, r3
 8010082:	4603      	mov	r3, r0
 8010084:	817b      	strh	r3, [r7, #10]
 8010086:	460b      	mov	r3, r1
 8010088:	813b      	strh	r3, [r7, #8]
 801008a:	4613      	mov	r3, r2
 801008c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	897a      	ldrh	r2, [r7, #10]
 8010092:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	893a      	ldrh	r2, [r7, #8]
 8010098:	805a      	strh	r2, [r3, #2]
        this->width = width;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	88fa      	ldrh	r2, [r7, #6]
 801009e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	8b3a      	ldrh	r2, [r7, #24]
 80100a4:	80da      	strh	r2, [r3, #6]
    }
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	4618      	mov	r0, r3
 80100aa:	3714      	adds	r7, #20
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr

080100b4 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 80100b4:	b480      	push	{r7}
 80100b6:	b083      	sub	sp, #12
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	460b      	mov	r3, r1
 80100be:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	887a      	ldrh	r2, [r7, #2]
 80100c4:	801a      	strh	r2, [r3, #0]
    {
    }
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4618      	mov	r0, r3
 80100ca:	370c      	adds	r7, #12
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr

080100d4 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af02      	add	r7, sp, #8
 80100da:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 80100dc:	4a13      	ldr	r2, [pc, #76]	; (801012c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	601a      	str	r2, [r3, #0]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	1d18      	adds	r0, r3, #4
 80100e6:	2300      	movs	r3, #0
 80100e8:	9300      	str	r3, [sp, #0]
 80100ea:	2300      	movs	r3, #0
 80100ec:	2200      	movs	r2, #0
 80100ee:	2100      	movs	r1, #0
 80100f0:	f7ff ffc0 	bl	8010074 <_ZN8touchgfx4RectC1Essss>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	330c      	adds	r3, #12
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7ff ffa4 	bl	8010046 <_ZN8touchgfx4RectC1Ev>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2200      	movs	r2, #0
 8010102:	615a      	str	r2, [r3, #20]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	619a      	str	r2, [r3, #24]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	61da      	str	r2, [r3, #28]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2200      	movs	r2, #0
 8010114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2201      	movs	r2, #1
 801011c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	4618      	mov	r0, r3
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	08029028 	.word	0x08029028

08010130 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	4a04      	ldr	r2, [pc, #16]	; (801014c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	601a      	str	r2, [r3, #0]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4618      	mov	r0, r3
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr
 801014c:	08029028 	.word	0x08029028

08010150 <_ZN8touchgfx8DrawableD0Ev>:
 8010150:	b580      	push	{r7, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7ff ffe9 	bl	8010130 <_ZN8touchgfx8DrawableD1Ev>
 801015e:	2128      	movs	r1, #40	; 0x28
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f015 f9d8 	bl	8025516 <_ZdlPvj>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	4618      	mov	r0, r3
 801016a:	3708      	adds	r7, #8
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}

08010170 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	4608      	mov	r0, r1
 801017a:	4611      	mov	r1, r2
 801017c:	461a      	mov	r2, r3
 801017e:	4603      	mov	r3, r0
 8010180:	817b      	strh	r3, [r7, #10]
 8010182:	460b      	mov	r3, r1
 8010184:	813b      	strh	r3, [r7, #8]
 8010186:	4613      	mov	r3, r2
 8010188:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	3334      	adds	r3, #52	; 0x34
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010196:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	4798      	blx	r3
        setWidth(width);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	3338      	adds	r3, #56	; 0x38
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80101aa:	4611      	mov	r1, r2
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	4798      	blx	r3
        setHeight(height);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	333c      	adds	r3, #60	; 0x3c
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80101bc:	4611      	mov	r1, r2
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	4798      	blx	r3
    }
 80101c2:	bf00      	nop
 80101c4:	3710      	adds	r7, #16
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}

080101ca <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 80101ca:	b480      	push	{r7}
 80101cc:	b083      	sub	sp, #12
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
 80101d2:	460b      	mov	r3, r1
 80101d4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	887a      	ldrh	r2, [r7, #2]
 80101da:	809a      	strh	r2, [r3, #4]
    }
 80101dc:	bf00      	nop
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	460b      	mov	r3, r1
 80101f2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	887a      	ldrh	r2, [r7, #2]
 80101f8:	80da      	strh	r2, [r3, #6]
    }
 80101fa:	bf00      	nop
 80101fc:	370c      	adds	r7, #12
 80101fe:	46bd      	mov	sp, r7
 8010200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010204:	4770      	bx	lr

08010206 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8010206:	b580      	push	{r7, lr}
 8010208:	b082      	sub	sp, #8
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
 801020e:	460b      	mov	r3, r1
 8010210:	807b      	strh	r3, [r7, #2]
 8010212:	4613      	mov	r3, r2
 8010214:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	332c      	adds	r3, #44	; 0x2c
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010222:	4611      	mov	r1, r2
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	4798      	blx	r3
        setY(y);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	3330      	adds	r3, #48	; 0x30
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010234:	4611      	mov	r1, r2
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	4798      	blx	r3
    }
 801023a:	bf00      	nop
 801023c:	3708      	adds	r7, #8
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8010242:	b480      	push	{r7}
 8010244:	b083      	sub	sp, #12
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
 801024a:	460b      	mov	r3, r1
 801024c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	887a      	ldrh	r2, [r7, #2]
 8010252:	811a      	strh	r2, [r3, #8]
    }
 8010254:	bf00      	nop
 8010256:	370c      	adds	r7, #12
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	460b      	mov	r3, r1
 801026a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	887a      	ldrh	r2, [r7, #2]
 8010270:	815a      	strh	r2, [r3, #10]
    }
 8010272:	bf00      	nop
 8010274:	370c      	adds	r7, #12
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr

0801027e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801027e:	b480      	push	{r7}
 8010280:	b083      	sub	sp, #12
 8010282:	af00      	add	r7, sp, #0
 8010284:	6078      	str	r0, [r7, #4]
 8010286:	bf00      	nop
 8010288:	370c      	adds	r7, #12
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr

08010292 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8010292:	b480      	push	{r7}
 8010294:	b083      	sub	sp, #12
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
 801029a:	6039      	str	r1, [r7, #0]
 801029c:	bf00      	nop
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
 80102b2:	bf00      	nop
 80102b4:	370c      	adds	r7, #12
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr

080102be <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 80102be:	b480      	push	{r7}
 80102c0:	b083      	sub	sp, #12
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
 80102c6:	6039      	str	r1, [r7, #0]
 80102c8:	bf00      	nop
 80102ca:	370c      	adds	r7, #12
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	460b      	mov	r3, r1
 80102f2:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	78fa      	ldrb	r2, [r7, #3]
 80102f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010316:	4618      	mov	r0, r3
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr

08010322 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010322:	b480      	push	{r7}
 8010324:	b083      	sub	sp, #12
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010330:	4618      	mov	r0, r3
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	460b      	mov	r3, r1
 8010346:	807b      	strh	r3, [r7, #2]
 8010348:	4613      	mov	r3, r2
 801034a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	3354      	adds	r3, #84	; 0x54
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	8879      	ldrh	r1, [r7, #2]
 8010356:	687a      	ldr	r2, [r7, #4]
 8010358:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801035c:	b292      	uxth	r2, r2
 801035e:	1a8a      	subs	r2, r1, r2
 8010360:	b292      	uxth	r2, r2
 8010362:	b210      	sxth	r0, r2
 8010364:	8839      	ldrh	r1, [r7, #0]
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801036c:	b292      	uxth	r2, r2
 801036e:	1a8a      	subs	r2, r1, r2
 8010370:	b292      	uxth	r2, r2
 8010372:	b212      	sxth	r2, r2
 8010374:	4601      	mov	r1, r0
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	4798      	blx	r3
    }
 801037a:	bf00      	nop
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010382:	b480      	push	{r7}
 8010384:	b083      	sub	sp, #12
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010390:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010398:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103a0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80103a2:	bf00      	nop
 80103a4:	370c      	adds	r7, #12
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr

080103ae <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80103ae:	b580      	push	{r7, lr}
 80103b0:	b084      	sub	sp, #16
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	60f8      	str	r0, [r7, #12]
 80103b6:	60b9      	str	r1, [r7, #8]
 80103b8:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80103ba:	68f8      	ldr	r0, [r7, #12]
 80103bc:	f7ff ffe1 	bl	8010382 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	68fa      	ldr	r2, [r7, #12]
 80103cc:	601a      	str	r2, [r3, #0]
    }
 80103ce:	bf00      	nop
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
	...

080103d8 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	4a05      	ldr	r2, [pc, #20]	; (80103f8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	601a      	str	r2, [r3, #0]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7ff fea1 	bl	8010130 <_ZN8touchgfx8DrawableD1Ev>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	4618      	mov	r0, r3
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	08027df4 	.word	0x08027df4

080103fc <_ZN8touchgfx9ContainerD0Ev>:
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7ff ffe7 	bl	80103d8 <_ZN8touchgfx9ContainerD1Ev>
 801040a:	212c      	movs	r1, #44	; 0x2c
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f015 f882 	bl	8025516 <_ZdlPvj>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	4a06      	ldr	r2, [pc, #24]	; (8010440 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	601a      	str	r2, [r3, #0]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	3304      	adds	r3, #4
 801042e:	4618      	mov	r0, r3
 8010430:	f7ff ffd2 	bl	80103d8 <_ZN8touchgfx9ContainerD1Ev>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4618      	mov	r0, r3
 8010438:	3708      	adds	r7, #8
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
 801043e:	bf00      	nop
 8010440:	08029120 	.word	0x08029120

08010444 <_ZN8touchgfx6ScreenD0Ev>:
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7ff ffe5 	bl	801041c <_ZN8touchgfx6ScreenD1Ev>
 8010452:	213c      	movs	r1, #60	; 0x3c
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f015 f85e 	bl	8025516 <_ZdlPvj>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4618      	mov	r0, r3
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8010464:	b480      	push	{r7}
 8010466:	b083      	sub	sp, #12
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	bf00      	nop
 801046e:	370c      	adds	r7, #12
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	bf00      	nop
 8010482:	370c      	adds	r7, #12
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	bf00      	nop
 8010496:	370c      	adds	r7, #12
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
    {
    }
 80104a8:	bf00      	nop
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr

080104b4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	460b      	mov	r3, r1
 80104be:	70fb      	strb	r3, [r7, #3]
    {
    }
 80104c0:	bf00      	nop
 80104c2:	370c      	adds	r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	3304      	adds	r3, #4
 80104da:	6839      	ldr	r1, [r7, #0]
 80104dc:	4618      	mov	r0, r3
 80104de:	f004 ff7f 	bl	80153e0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80104e2:	bf00      	nop
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
	...

080104ec <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7ff fdec 	bl	80100d4 <_ZN8touchgfx8DrawableC1Ev>
 80104fc:	4a03      	ldr	r2, [pc, #12]	; (801050c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	601a      	str	r2, [r3, #0]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	4618      	mov	r0, r3
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	080270f4 	.word	0x080270f4

08010510 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	4a05      	ldr	r2, [pc, #20]	; (8010530 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	601a      	str	r2, [r3, #0]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4618      	mov	r0, r3
 8010522:	f7ff fe05 	bl	8010130 <_ZN8touchgfx8DrawableD1Ev>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4618      	mov	r0, r3
 801052a:	3708      	adds	r7, #8
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	080270f4 	.word	0x080270f4

08010534 <_ZN8touchgfx6WidgetD0Ev>:
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f7ff ffe7 	bl	8010510 <_ZN8touchgfx6WidgetD1Ev>
 8010542:	2128      	movs	r1, #40	; 0x28
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f014 ffe6 	bl	8025516 <_ZdlPvj>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4618      	mov	r0, r3
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	607b      	str	r3, [r7, #4]
 801055e:	460b      	mov	r3, r1
 8010560:	817b      	strh	r3, [r7, #10]
 8010562:	4613      	mov	r3, r2
 8010564:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff fecd 	bl	8010308 <_ZNK8touchgfx8Drawable9isVisibleEv>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d008      	beq.n	8010586 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	4618      	mov	r0, r3
 8010578:	f7ff fed3 	bl	8010322 <_ZNK8touchgfx8Drawable11isTouchableEv>
 801057c:	4603      	mov	r3, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d001      	beq.n	8010586 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010582:	2301      	movs	r3, #1
 8010584:	e000      	b.n	8010588 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010586:	2300      	movs	r3, #0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d002      	beq.n	8010592 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	601a      	str	r2, [r3, #0]
        }
    }
 8010592:	bf00      	nop
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
	...

0801059c <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7ff ffa0 	bl	80104ec <_ZN8touchgfx6WidgetC1Ev>
 80105ac:	4a0a      	ldr	r2, [pc, #40]	; (80105d8 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	601a      	str	r2, [r3, #0]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	22ff      	movs	r2, #255	; 0xff
 80105b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	3328      	adds	r3, #40	; 0x28
 80105be:	2100      	movs	r1, #0
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7ff fd31 	bl	8010028 <_ZN8touchgfx9colortypeC1Em>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	4618      	mov	r0, r3
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	08028b2c 	.word	0x08028b2c

080105dc <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	4a05      	ldr	r2, [pc, #20]	; (80105fc <_ZN8touchgfx3BoxD1Ev+0x20>)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	601a      	str	r2, [r3, #0]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7ff ff8f 	bl	8010510 <_ZN8touchgfx6WidgetD1Ev>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	4618      	mov	r0, r3
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	08028b2c 	.word	0x08028b2c

08010600 <_ZN8touchgfx3BoxD0Ev>:
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f7ff ffe7 	bl	80105dc <_ZN8touchgfx3BoxD1Ev>
 801060e:	2130      	movs	r1, #48	; 0x30
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f014 ff80 	bl	8025516 <_ZdlPvj>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	4618      	mov	r0, r3
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8010620:	b480      	push	{r7}
 8010622:	b083      	sub	sp, #12
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	683a      	ldr	r2, [r7, #0]
 801062e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010630:	bf00      	nop
 8010632:	370c      	adds	r7, #12
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	460b      	mov	r3, r1
 8010646:	807b      	strh	r3, [r7, #2]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	887a      	ldrh	r2, [r7, #2]
 801064c:	801a      	strh	r2, [r3, #0]
    }
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	4618      	mov	r0, r3
 8010652:	370c      	adds	r7, #12
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr

0801065c <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
        assertValid();
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f7fe fd13 	bl	800f090 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 801066a:	4b06      	ldr	r3, [pc, #24]	; (8010684 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	881b      	ldrh	r3, [r3, #0]
 8010672:	4619      	mov	r1, r3
 8010674:	4610      	mov	r0, r2
 8010676:	f001 fe7d 	bl	8012374 <_ZNK8touchgfx5Texts7getTextEt>
 801067a:	4603      	mov	r3, r0
    }
 801067c:	4618      	mov	r0, r3
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	2000bc2c 	.word	0x2000bc2c

08010688 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	4618      	mov	r0, r3
 8010694:	f7ff ff2a 	bl	80104ec <_ZN8touchgfx6WidgetC1Ev>
 8010698:	4a13      	ldr	r2, [pc, #76]	; (80106e8 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	601a      	str	r2, [r3, #0]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	3326      	adds	r3, #38	; 0x26
 80106a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7ff ffc8 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	3328      	adds	r3, #40	; 0x28
 80106b0:	2100      	movs	r1, #0
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7ff fcb8 	bl	8010028 <_ZN8touchgfx9colortypeC1Em>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	859a      	strh	r2, [r3, #44]	; 0x2c
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	22ff      	movs	r2, #255	; 0xff
 80106c2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2200      	movs	r2, #0
 80106ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2200      	movs	r2, #0
 80106da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4618      	mov	r0, r3
 80106e2:	3708      	adds	r7, #8
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}
 80106e8:	08028ab0 	.word	0x08028ab0

080106ec <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b084      	sub	sp, #16
 80106f0:	af02      	add	r7, sp, #8
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 80106f6:	2300      	movs	r3, #0
 80106f8:	9300      	str	r3, [sp, #0]
 80106fa:	2300      	movs	r3, #0
 80106fc:	2200      	movs	r2, #0
 80106fe:	2100      	movs	r1, #0
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f7ff fcb7 	bl	8010074 <_ZN8touchgfx4RectC1Essss>
    }
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	3708      	adds	r7, #8
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}

0801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 801070e:	b480      	push	{r7}
 8010710:	b083      	sub	sp, #12
 8010712:	af00      	add	r7, sp, #0
 8010714:	6078      	str	r0, [r7, #4]
 8010716:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	683a      	ldr	r2, [r7, #0]
 801071c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801071e:	bf00      	nop
 8010720:	370c      	adds	r7, #12
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr

0801072a <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 801072a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801072c:	b085      	sub	sp, #20
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
 8010732:	460b      	mov	r3, r1
 8010734:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8010736:	687e      	ldr	r6, [r7, #4]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	3330      	adds	r3, #48	; 0x30
 801073e:	681c      	ldr	r4, [r3, #0]
 8010740:	887d      	ldrh	r5, [r7, #2]
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 f845 	bl	80107d2 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010748:	4603      	mov	r3, r0
 801074a:	81bb      	strh	r3, [r7, #12]
 801074c:	f107 030c 	add.w	r3, r7, #12
 8010750:	4618      	mov	r0, r3
 8010752:	f7fe fc69 	bl	800f028 <_ZNK8touchgfx9TypedText7getFontEv>
 8010756:	4602      	mov	r2, r0
 8010758:	6813      	ldr	r3, [r2, #0]
 801075a:	332c      	adds	r3, #44	; 0x2c
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	4610      	mov	r0, r2
 8010760:	4798      	blx	r3
 8010762:	4603      	mov	r3, r0
 8010764:	1aeb      	subs	r3, r5, r3
 8010766:	b29b      	uxth	r3, r3
 8010768:	b21b      	sxth	r3, r3
 801076a:	4619      	mov	r1, r3
 801076c:	4630      	mov	r0, r6
 801076e:	47a0      	blx	r4
    }
 8010770:	bf00      	nop
 8010772:	3714      	adds	r7, #20
 8010774:	46bd      	mov	sp, r7
 8010776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010778 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	460b      	mov	r3, r1
 8010782:	807b      	strh	r3, [r7, #2]
 8010784:	4613      	mov	r3, r2
 8010786:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	332c      	adds	r3, #44	; 0x2c
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010796:	4610      	mov	r0, r2
 8010798:	4798      	blx	r3
        setBaselineY(baselineY);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	3360      	adds	r3, #96	; 0x60
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80107a6:	4611      	mov	r1, r2
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	4798      	blx	r3
    }
 80107ac:	bf00      	nop
 80107ae:	3708      	adds	r7, #8
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	460b      	mov	r3, r1
 80107be:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	887a      	ldrh	r2, [r7, #2]
 80107c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 80107c6:	bf00      	nop
 80107c8:	370c      	adds	r7, #12
 80107ca:	46bd      	mov	sp, r7
 80107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d0:	4770      	bx	lr

080107d2 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 80107d2:	b480      	push	{r7}
 80107d4:	b083      	sub	sp, #12
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 80107de:	4618      	mov	r0, r3
 80107e0:	370c      	adds	r7, #12
 80107e2:	46bd      	mov	sp, r7
 80107e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e8:	4770      	bx	lr
	...

080107ec <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	4a05      	ldr	r2, [pc, #20]	; (801080c <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	601a      	str	r2, [r3, #0]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff fe87 	bl	8010510 <_ZN8touchgfx6WidgetD1Ev>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	4618      	mov	r0, r3
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}
 801080c:	08028ab0 	.word	0x08028ab0

08010810 <_ZN8touchgfx8TextAreaD0Ev>:
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f7ff ffe7 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 801081e:	2134      	movs	r1, #52	; 0x34
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f014 fe78 	bl	8025516 <_ZdlPvj>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4618      	mov	r0, r3
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	4618      	mov	r0, r3
 801083c:	f7ff ff24 	bl	8010688 <_ZN8touchgfx8TextAreaC1Ev>
 8010840:	4a03      	ldr	r2, [pc, #12]	; (8010850 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	601a      	str	r2, [r3, #0]
    {
    }
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	4618      	mov	r0, r3
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	08027078 	.word	0x08027078

08010854 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	4a05      	ldr	r2, [pc, #20]	; (8010874 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	601a      	str	r2, [r3, #0]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	4618      	mov	r0, r3
 8010866:	f7ff ffc1 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4618      	mov	r0, r3
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	08027078 	.word	0x08027078

08010878 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f7ff ffe7 	bl	8010854 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010886:	2134      	movs	r1, #52	; 0x34
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f014 fe44 	bl	8025516 <_ZdlPvj>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7ff ffc4 	bl	8010830 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 80108a8:	4a05      	ldr	r2, [pc, #20]	; (80108c0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	601a      	str	r2, [r3, #0]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2200      	movs	r2, #0
 80108b2:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	4618      	mov	r0, r3
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	bf00      	nop
 80108c0:	08028c18 	.word	0x08028c18

080108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	683a      	ldr	r2, [r7, #0]
 80108d2:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80108d4:	bf00      	nop
 80108d6:	370c      	adds	r7, #12
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7ff fdfd 	bl	80104ec <_ZN8touchgfx6WidgetC1Ev>
 80108f2:	4a0b      	ldr	r2, [pc, #44]	; (8010920 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	601a      	str	r2, [r3, #0]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	3326      	adds	r3, #38	; 0x26
 80108fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010900:	4618      	mov	r0, r3
 8010902:	f7ff fbd7 	bl	80100b4 <_ZN8touchgfx6BitmapC1Et>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	22ff      	movs	r2, #255	; 0xff
 801090a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 801090e:	6839      	ldr	r1, [r7, #0]
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f006 fe53 	bl	80175bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	4618      	mov	r0, r3
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}
 8010920:	08028c94 	.word	0x08028c94

08010924 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	601a      	str	r2, [r3, #0]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	4618      	mov	r0, r3
 8010938:	370c      	adds	r7, #12
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr

08010942 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8010942:	b480      	push	{r7}
 8010944:	b083      	sub	sp, #12
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
        {
            return v;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
        }
 801094e:	4618      	mov	r0, r3
 8010950:	370c      	adds	r7, #12
 8010952:	46bd      	mov	sp, r7
 8010954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010958:	4770      	bx	lr

0801095a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 801095a:	b590      	push	{r4, r7, lr}
 801095c:	b083      	sub	sp, #12
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
 8010962:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	3340      	adds	r3, #64	; 0x40
 8010968:	4618      	mov	r0, r3
 801096a:	f7ff ffea 	bl	8010942 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801096e:	4604      	mov	r4, r0
 8010970:	463b      	mov	r3, r7
 8010972:	4618      	mov	r0, r3
 8010974:	f7ff ffe5 	bl	8010942 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010978:	4603      	mov	r3, r0
 801097a:	429c      	cmp	r4, r3
 801097c:	bf0c      	ite	eq
 801097e:	2301      	moveq	r3, #1
 8010980:	2300      	movne	r3, #0
 8010982:	b2db      	uxtb	r3, r3
 8010984:	2b00      	cmp	r3, #0
 8010986:	d106      	bne.n	8010996 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	683a      	ldr	r2, [r7, #0]
 801098c:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f006 f88e 	bl	8016ab0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010994:	e000      	b.n	8010998 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010996:	bf00      	nop
    }
 8010998:	370c      	adds	r7, #12
 801099a:	46bd      	mov	sp, r7
 801099c:	bd90      	pop	{r4, r7, pc}
	...

080109a0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	4a05      	ldr	r2, [pc, #20]	; (80109c0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	601a      	str	r2, [r3, #0]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	4618      	mov	r0, r3
 80109b2:	f005 fe91 	bl	80166d8 <_ZN8touchgfx15AbstractPainterD1Ev>
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4618      	mov	r0, r3
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	08028604 	.word	0x08028604

080109c4 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f7ff ffe7 	bl	80109a0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80109d2:	2114      	movs	r1, #20
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f014 fd9e 	bl	8025516 <_ZdlPvj>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4618      	mov	r0, r3
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	4a05      	ldr	r2, [pc, #20]	; (8010a04 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	601a      	str	r2, [r3, #0]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7ff fd8b 	bl	8010510 <_ZN8touchgfx6WidgetD1Ev>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4618      	mov	r0, r3
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	08028c94 	.word	0x08028c94

08010a08 <_ZN8touchgfx5ImageD0Ev>:
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f7ff ffe7 	bl	80109e4 <_ZN8touchgfx5ImageD1Ev>
 8010a16:	212c      	movs	r1, #44	; 0x2c
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f014 fd7c 	bl	8025516 <_ZdlPvj>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	4a05      	ldr	r2, [pc, #20]	; (8010a48 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	601a      	str	r2, [r3, #0]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7ff fcef 	bl	801041c <_ZN8touchgfx6ScreenD1Ev>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4618      	mov	r0, r3
 8010a42:	3708      	adds	r7, #8
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}
 8010a48:	08027044 	.word	0x08027044

08010a4c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f7ff ffe7 	bl	8010a28 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010a5a:	2140      	movs	r1, #64	; 0x40
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f014 fd5a 	bl	8025516 <_ZdlPvj>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4618      	mov	r0, r3
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	4a6f      	ldr	r2, [pc, #444]	; (8010c34 <_ZN12MainViewBaseD1Ev+0x1c8>)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	601a      	str	r2, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8010a80:	4618      	mov	r0, r3
 8010a82:	f001 fb8d 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f001 fb87 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7ff fea7 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f001 fb7b 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f004 f999 	bl	8014de8 <_ZN8touchgfx13ImageProgressD1Ev>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8010abc:	4618      	mov	r0, r3
 8010abe:	f001 fb6f 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f001 fbad 	bl	8012228 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f001 fb85 	bl	80121e4 <_ZN8touchgfx4LineD1Ev>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f001 fba1 	bl	8012228 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8010aec:	4618      	mov	r0, r3
 8010aee:	f001 fb79 	bl	80121e4 <_ZN8touchgfx4LineD1Ev>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8010af8:	4618      	mov	r0, r3
 8010afa:	f004 f875 	bl	8014be8 <_ZN8touchgfx11BoxProgressD1Ev>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff fe71 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010b10:	4618      	mov	r0, r3
 8010b12:	f001 fb45 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f001 fb3f 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7ff fe5f 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7ff fe59 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8010b40:	4618      	mov	r0, r3
 8010b42:	f001 fb2d 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7ff fe4d 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f001 fb65 	bl	8012228 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8010b64:	4618      	mov	r0, r3
 8010b66:	f001 fb3d 	bl	80121e4 <_ZN8touchgfx4LineD1Ev>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8010b70:	4618      	mov	r0, r3
 8010b72:	f001 fb15 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f001 fb0f 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f001 fb09 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010b94:	4618      	mov	r0, r3
 8010b96:	f001 fb03 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f001 fafd 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010bac:	4618      	mov	r0, r3
 8010bae:	f001 faf7 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f001 faf1 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f001 faeb 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7ff ff07 	bl	80109e4 <_ZN8touchgfx5ImageD1Ev>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f001 fadf 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010be8:	4618      	mov	r0, r3
 8010bea:	f001 fad9 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7ff fdf9 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	33d8      	adds	r3, #216	; 0xd8
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff fdf4 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	33a4      	adds	r3, #164	; 0xa4
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7ff fdef 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	3370      	adds	r3, #112	; 0x70
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7ff fdea 	bl	80107ec <_ZN8touchgfx8TextAreaD1Ev>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	3340      	adds	r3, #64	; 0x40
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7ff fcdd 	bl	80105dc <_ZN8touchgfx3BoxD1Ev>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7ff feff 	bl	8010a28 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}
 8010c34:	08027010 	.word	0x08027010

08010c38 <_ZN12MainViewBaseD0Ev>:
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7ff ff13 	bl	8010a6c <_ZN12MainViewBaseD1Ev>
 8010c46:	f242 6118 	movw	r1, #9752	; 0x2618
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f014 fc63 	bl	8025516 <_ZdlPvj>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	4618      	mov	r0, r3
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
	...

08010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010c5c:	b590      	push	{r4, r7, lr}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	4603      	mov	r3, r0
 8010c64:	71fb      	strb	r3, [r7, #7]
 8010c66:	460b      	mov	r3, r1
 8010c68:	71bb      	strb	r3, [r7, #6]
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010c6e:	f7fe fdaf 	bl	800f7d0 <_ZN8touchgfx3HAL11getInstanceEv>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d105      	bne.n	8010c84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010c78:	4b0a      	ldr	r3, [pc, #40]	; (8010ca4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010c7a:	4a0b      	ldr	r2, [pc, #44]	; (8010ca8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010c7c:	2138      	movs	r1, #56	; 0x38
 8010c7e:	480b      	ldr	r0, [pc, #44]	; (8010cac <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010c80:	f014 fc74 	bl	802556c <__assert_func>
 8010c84:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010c86:	f7fe fdaf 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8010c8a:	6803      	ldr	r3, [r0, #0]
 8010c8c:	332c      	adds	r3, #44	; 0x2c
 8010c8e:	681c      	ldr	r4, [r3, #0]
 8010c90:	797b      	ldrb	r3, [r7, #5]
 8010c92:	79ba      	ldrb	r2, [r7, #6]
 8010c94:	79f9      	ldrb	r1, [r7, #7]
 8010c96:	47a0      	blx	r4
 8010c98:	4603      	mov	r3, r0
    }
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	370c      	adds	r7, #12
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd90      	pop	{r4, r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	080269f0 	.word	0x080269f0
 8010ca8:	08027154 	.word	0x08027154
 8010cac:	08026a34 	.word	0x08026a34

08010cb0 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010cb0:	b590      	push	{r4, r7, lr}
 8010cb2:	b0b5      	sub	sp, #212	; 0xd4
 8010cb4:	af02      	add	r7, sp, #8
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f001 f9f6 	bl	80120ac <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010cc0:	4adc      	ldr	r2, [pc, #880]	; (8011034 <_ZN12MainViewBaseC1Ev+0x384>)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	601a      	str	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	3340      	adds	r3, #64	; 0x40
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7ff fc66 	bl	801059c <_ZN8touchgfx3BoxC1Ev>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	3370      	adds	r3, #112	; 0x70
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7ff fcd7 	bl	8010688 <_ZN8touchgfx8TextAreaC1Ev>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	33a4      	adds	r3, #164	; 0xa4
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7ff fcd2 	bl	8010688 <_ZN8touchgfx8TextAreaC1Ev>
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	33d8      	adds	r3, #216	; 0xd8
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7ff fccd 	bl	8010688 <_ZN8touchgfx8TextAreaC1Ev>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7ff fcc7 	bl	8010688 <_ZN8touchgfx8TextAreaC1Ev>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7ff fdc9 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7ff fdc3 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 8010d18:	f107 0308 	add.w	r3, r7, #8
 8010d1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7ff f9c7 	bl	80100b4 <_ZN8touchgfx6BitmapC1Et>
 8010d26:	f107 0308 	add.w	r3, r7, #8
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f7ff fdd7 	bl	80108e0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7ff fdad 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7ff fda7 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7ff fda1 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7ff fd9b 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7ff fd95 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7ff fd8f 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7ff fd89 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7ff fd83 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f005 fe69 	bl	8016a70 <_ZN8touchgfx4LineC1Ev>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8010da4:	f107 030c 	add.w	r3, r7, #12
 8010da8:	2100      	movs	r1, #0
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7ff f93c 	bl	8010028 <_ZN8touchgfx9colortypeC1Em>
 8010db0:	22ff      	movs	r2, #255	; 0xff
 8010db2:	68f9      	ldr	r1, [r7, #12]
 8010db4:	4620      	mov	r0, r4
 8010db6:	f005 fc4d 	bl	8016654 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7ff fc61 	bl	8010688 <_ZN8touchgfx8TextAreaC1Ev>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7ff fd63 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7ff fc55 	bl	8010688 <_ZN8touchgfx8TextAreaC1Ev>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7ff fc4f 	bl	8010688 <_ZN8touchgfx8TextAreaC1Ev>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7ff fd51 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7ff fd4b 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7ff fc3d 	bl	8010688 <_ZN8touchgfx8TextAreaC1Ev>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8010e14:	4618      	mov	r0, r3
 8010e16:	f003 fefb 	bl	8014c10 <_ZN8touchgfx11BoxProgressC1Ev>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8010e20:	4618      	mov	r0, r3
 8010e22:	f005 fe25 	bl	8016a70 <_ZN8touchgfx4LineC1Ev>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f203 64d4 	addw	r4, r3, #1748	; 0x6d4
 8010e2c:	f107 0310 	add.w	r3, r7, #16
 8010e30:	2100      	movs	r1, #0
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7ff f8f8 	bl	8010028 <_ZN8touchgfx9colortypeC1Em>
 8010e38:	22ff      	movs	r2, #255	; 0xff
 8010e3a:	6939      	ldr	r1, [r7, #16]
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f005 fc09 	bl	8016654 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f005 fe11 	bl	8016a70 <_ZN8touchgfx4LineC1Ev>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f503 64ec 	add.w	r4, r3, #1888	; 0x760
 8010e54:	f107 0314 	add.w	r3, r7, #20
 8010e58:	2100      	movs	r1, #0
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7ff f8e4 	bl	8010028 <_ZN8touchgfx9colortypeC1Em>
 8010e60:	22ff      	movs	r2, #255	; 0xff
 8010e62:	6979      	ldr	r1, [r7, #20]
 8010e64:	4620      	mov	r0, r4
 8010e66:	f005 fbf5 	bl	8016654 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7ff fd11 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f003 ffdd 	bl	8014e3c <_ZN8touchgfx13ImageProgressC1Ev>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ff fd05 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7ff fbf7 	bl	8010688 <_ZN8touchgfx8TextAreaC1Ev>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff fcf9 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7ff fcf3 	bl	8010898 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f603 13f6 	addw	r3, r3, #2550	; 0x9f6
 8010eb8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f006 fbeb 	bl	8017698 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 1, 800, 480);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010ec8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010ecc:	9300      	str	r3, [sp, #0]
 8010ece:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	2100      	movs	r1, #0
 8010ed6:	f7ff f94b 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	2000      	movs	r0, #0
 8010ee6:	f7ff feb9 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010eea:	4603      	mov	r3, r0
 8010eec:	4619      	mov	r1, r3
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f7ff fb96 	bl	8010620 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(292, 129);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	3370      	adds	r3, #112	; 0x70
 8010ef8:	2281      	movs	r2, #129	; 0x81
 8010efa:	f44f 7192 	mov.w	r1, #292	; 0x124
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7ff f981 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010f0a:	22a9      	movs	r2, #169	; 0xa9
 8010f0c:	2100      	movs	r1, #0
 8010f0e:	20ff      	movs	r0, #255	; 0xff
 8010f10:	f7ff fea4 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f14:	4603      	mov	r3, r0
 8010f16:	4619      	mov	r1, r3
 8010f18:	4620      	mov	r0, r4
 8010f1a:	f7ff fbf8 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	3370      	adds	r3, #112	; 0x70
 8010f22:	2100      	movs	r1, #0
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7ff fc45 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010f30:	f107 0318 	add.w	r3, r7, #24
 8010f34:	2115      	movs	r1, #21
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7ff fb80 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8010f3c:	8b39      	ldrh	r1, [r7, #24]
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f006 f89c 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(174, 129);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	33a4      	adds	r3, #164	; 0xa4
 8010f48:	2281      	movs	r2, #129	; 0x81
 8010f4a:	21ae      	movs	r1, #174	; 0xae
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7ff f95a 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010f58:	22a9      	movs	r2, #169	; 0xa9
 8010f5a:	2100      	movs	r1, #0
 8010f5c:	20ff      	movs	r0, #255	; 0xff
 8010f5e:	f7ff fe7d 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f62:	4603      	mov	r3, r0
 8010f64:	4619      	mov	r1, r3
 8010f66:	4620      	mov	r0, r4
 8010f68:	f7ff fbd1 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	33a4      	adds	r3, #164	; 0xa4
 8010f70:	2100      	movs	r1, #0
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7ff fc1e 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010f7e:	f107 031c 	add.w	r3, r7, #28
 8010f82:	2114      	movs	r1, #20
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7ff fb59 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8010f8a:	8bb9      	ldrh	r1, [r7, #28]
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	f006 f875 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(49, 129);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	33d8      	adds	r3, #216	; 0xd8
 8010f96:	2281      	movs	r2, #129	; 0x81
 8010f98:	2131      	movs	r1, #49	; 0x31
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7ff f933 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8010fa6:	22a9      	movs	r2, #169	; 0xa9
 8010fa8:	2100      	movs	r1, #0
 8010faa:	20ff      	movs	r0, #255	; 0xff
 8010fac:	f7ff fe56 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f7ff fbaa 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	33d8      	adds	r3, #216	; 0xd8
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7ff fbf7 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8010fcc:	f107 0320 	add.w	r3, r7, #32
 8010fd0:	2110      	movs	r1, #16
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7ff fb32 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8010fd8:	8c39      	ldrh	r1, [r7, #32]
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f006 f84e 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(50, 219);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010fe6:	22db      	movs	r2, #219	; 0xdb
 8010fe8:	2132      	movs	r1, #50	; 0x32
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7ff f90b 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8010ff6:	22a9      	movs	r2, #169	; 0xa9
 8010ff8:	2100      	movs	r1, #0
 8010ffa:	20ff      	movs	r0, #255	; 0xff
 8010ffc:	f7ff fe2e 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011000:	4603      	mov	r3, r0
 8011002:	4619      	mov	r1, r3
 8011004:	4620      	mov	r0, r4
 8011006:	f7ff fb82 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011010:	2100      	movs	r1, #0
 8011012:	4618      	mov	r0, r3
 8011014:	f7ff fbce 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 801101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011022:	210f      	movs	r1, #15
 8011024:	4618      	mov	r0, r3
 8011026:	f7ff fb09 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 801102a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 801102c:	4620      	mov	r0, r4
 801102e:	f006 f825 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011032:	e001      	b.n	8011038 <_ZN12MainViewBaseC1Ev+0x388>
 8011034:	08027010 	.word	0x08027010

    LambdaValue.setPosition(15, 77, 100, 47);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 801103e:	232f      	movs	r3, #47	; 0x2f
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	2364      	movs	r3, #100	; 0x64
 8011044:	224d      	movs	r2, #77	; 0x4d
 8011046:	210f      	movs	r1, #15
 8011048:	f7ff f892 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8011052:	22ff      	movs	r2, #255	; 0xff
 8011054:	21ff      	movs	r1, #255	; 0xff
 8011056:	20ff      	movs	r0, #255	; 0xff
 8011058:	f7ff fe00 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801105c:	4603      	mov	r3, r0
 801105e:	4619      	mov	r1, r3
 8011060:	4620      	mov	r0, r4
 8011062:	f7ff fb54 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801106c:	2100      	movs	r1, #0
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff fba0 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 801107a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801107e:	2103      	movs	r1, #3
 8011080:	4618      	mov	r0, r3
 8011082:	f7ff fadb 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801108a:	4618      	mov	r0, r3
 801108c:	f7ff fae6 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8011090:	4603      	mov	r3, r0
 8011092:	4ae1      	ldr	r2, [pc, #900]	; (8011418 <_ZN12MainViewBaseC1Ev+0x768>)
 8011094:	2105      	movs	r1, #5
 8011096:	4620      	mov	r0, r4
 8011098:	f00a fad0 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 80110a8:	4619      	mov	r1, r3
 80110aa:	4610      	mov	r0, r2
 80110ac:	f7ff fc0a 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80110b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80110ba:	2102      	movs	r1, #2
 80110bc:	4618      	mov	r0, r3
 80110be:	f7ff fabd 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80110c2:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80110c4:	4620      	mov	r0, r4
 80110c6:	f005 ffd9 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(15, 170, 100, 47);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 80110d0:	232f      	movs	r3, #47	; 0x2f
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	2364      	movs	r3, #100	; 0x64
 80110d6:	22aa      	movs	r2, #170	; 0xaa
 80110d8:	210f      	movs	r1, #15
 80110da:	f7ff f849 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 80110e4:	22ff      	movs	r2, #255	; 0xff
 80110e6:	21ff      	movs	r1, #255	; 0xff
 80110e8:	20ff      	movs	r0, #255	; 0xff
 80110ea:	f7ff fdb7 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80110ee:	4603      	mov	r3, r0
 80110f0:	4619      	mov	r1, r3
 80110f2:	4620      	mov	r0, r4
 80110f4:	f7ff fb0b 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80110fe:	2100      	movs	r1, #0
 8011100:	4618      	mov	r0, r3
 8011102:	f7ff fb57 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f603 1486 	addw	r4, r3, #2438	; 0x986
 801110c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011110:	2101      	movs	r1, #1
 8011112:	4618      	mov	r0, r3
 8011114:	f7ff fa92 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801111c:	4618      	mov	r0, r3
 801111e:	f7ff fa9d 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8011122:	4603      	mov	r3, r0
 8011124:	4abc      	ldr	r2, [pc, #752]	; (8011418 <_ZN12MainViewBaseC1Ev+0x768>)
 8011126:	2105      	movs	r1, #5
 8011128:	4620      	mov	r0, r4
 801112a:	f00a fa87 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f603 1386 	addw	r3, r3, #2438	; 0x986
 801113a:	4619      	mov	r1, r3
 801113c:	4610      	mov	r0, r2
 801113e:	f7ff fbc1 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8011148:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801114c:	2100      	movs	r1, #0
 801114e:	4618      	mov	r0, r3
 8011150:	f7ff fa74 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011154:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8011156:	4620      	mov	r0, r4
 8011158:	f005 ff90 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8011162:	223f      	movs	r2, #63	; 0x3f
 8011164:	21b3      	movs	r1, #179	; 0xb3
 8011166:	4618      	mov	r0, r3
 8011168:	f7ff f84d 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8011172:	2100      	movs	r1, #0
 8011174:	4618      	mov	r0, r3
 8011176:	f7ff f8b7 	bl	80102e8 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 8011180:	230e      	movs	r3, #14
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	2312      	movs	r3, #18
 8011186:	223f      	movs	r2, #63	; 0x3f
 8011188:	2136      	movs	r1, #54	; 0x36
 801118a:	f7fe fff1 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8011194:	22ff      	movs	r2, #255	; 0xff
 8011196:	21ff      	movs	r1, #255	; 0xff
 8011198:	20ff      	movs	r0, #255	; 0xff
 801119a:	f7ff fd5f 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801119e:	4603      	mov	r3, r0
 80111a0:	4619      	mov	r1, r3
 80111a2:	4620      	mov	r0, r4
 80111a4:	f7ff fab3 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80111ae:	2100      	movs	r1, #0
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7ff faff 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f503 6419 	add.w	r4, r3, #2448	; 0x990
 80111bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80111c0:	211e      	movs	r1, #30
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ff fa3a 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80111c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7ff fa45 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 80111d2:	4603      	mov	r3, r0
 80111d4:	4a90      	ldr	r2, [pc, #576]	; (8011418 <_ZN12MainViewBaseC1Ev+0x768>)
 80111d6:	2102      	movs	r1, #2
 80111d8:	4620      	mov	r0, r4
 80111da:	f00a fa2f 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 80111ea:	4619      	mov	r1, r3
 80111ec:	4610      	mov	r0, r2
 80111ee:	f7ff fb69 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 80111f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80111fc:	2104      	movs	r1, #4
 80111fe:	4618      	mov	r0, r3
 8011200:	f7ff fa1c 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011204:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8011206:	4620      	mov	r0, r4
 8011208:	f005 ff38 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8011212:	230e      	movs	r3, #14
 8011214:	9300      	str	r3, [sp, #0]
 8011216:	2312      	movs	r3, #18
 8011218:	223f      	movs	r2, #63	; 0x3f
 801121a:	2173      	movs	r1, #115	; 0x73
 801121c:	f7fe ffa8 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8011226:	22ff      	movs	r2, #255	; 0xff
 8011228:	21ff      	movs	r1, #255	; 0xff
 801122a:	20ff      	movs	r0, #255	; 0xff
 801122c:	f7ff fd16 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011230:	4603      	mov	r3, r0
 8011232:	4619      	mov	r1, r3
 8011234:	4620      	mov	r0, r4
 8011236:	f7ff fa6a 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8011240:	2100      	movs	r1, #0
 8011242:	4618      	mov	r0, r3
 8011244:	f7ff fab6 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f603 1494 	addw	r4, r3, #2452	; 0x994
 801124e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011252:	211f      	movs	r1, #31
 8011254:	4618      	mov	r0, r3
 8011256:	f7ff f9f1 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 801125a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801125e:	4618      	mov	r0, r3
 8011260:	f7ff f9fc 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8011264:	4603      	mov	r3, r0
 8011266:	4a6c      	ldr	r2, [pc, #432]	; (8011418 <_ZN12MainViewBaseC1Ev+0x768>)
 8011268:	2102      	movs	r1, #2
 801126a:	4620      	mov	r0, r4
 801126c:	f00a f9e6 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f603 1394 	addw	r3, r3, #2452	; 0x994
 801127c:	4619      	mov	r1, r3
 801127e:	4610      	mov	r0, r2
 8011280:	f7ff fb20 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f503 7405 	add.w	r4, r3, #532	; 0x214
 801128a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801128e:	2105      	movs	r1, #5
 8011290:	4618      	mov	r0, r3
 8011292:	f7ff f9d3 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011296:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 801129a:	4620      	mov	r0, r4
 801129c:	f005 feee 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 80112a6:	230e      	movs	r3, #14
 80112a8:	9300      	str	r3, [sp, #0]
 80112aa:	2312      	movs	r3, #18
 80112ac:	223e      	movs	r2, #62	; 0x3e
 80112ae:	21ad      	movs	r1, #173	; 0xad
 80112b0:	f7fe ff5e 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 80112ba:	22ff      	movs	r2, #255	; 0xff
 80112bc:	21ff      	movs	r1, #255	; 0xff
 80112be:	20ff      	movs	r0, #255	; 0xff
 80112c0:	f7ff fccc 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80112c4:	4603      	mov	r3, r0
 80112c6:	4619      	mov	r1, r3
 80112c8:	4620      	mov	r0, r4
 80112ca:	f7ff fa20 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80112d4:	2100      	movs	r1, #0
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7ff fa6c 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f603 1498 	addw	r4, r3, #2456	; 0x998
 80112e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112e6:	2120      	movs	r1, #32
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7ff f9a7 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80112ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7ff f9b2 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 80112f8:	4603      	mov	r3, r0
 80112fa:	4a47      	ldr	r2, [pc, #284]	; (8011418 <_ZN12MainViewBaseC1Ev+0x768>)
 80112fc:	2102      	movs	r1, #2
 80112fe:	4620      	mov	r0, r4
 8011300:	f00a f99c 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f603 1398 	addw	r3, r3, #2456	; 0x998
 8011310:	4619      	mov	r1, r3
 8011312:	4610      	mov	r0, r2
 8011314:	f7ff fad6 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 801131e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011322:	2106      	movs	r1, #6
 8011324:	4618      	mov	r0, r3
 8011326:	f7ff f989 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 801132a:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 801132e:	4620      	mov	r0, r4
 8011330:	f005 fea4 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f503 7021 	add.w	r0, r3, #644	; 0x284
 801133a:	230e      	movs	r3, #14
 801133c:	9300      	str	r3, [sp, #0]
 801133e:	2312      	movs	r3, #18
 8011340:	223e      	movs	r2, #62	; 0x3e
 8011342:	21e7      	movs	r1, #231	; 0xe7
 8011344:	f7fe ff14 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f503 7421 	add.w	r4, r3, #644	; 0x284
 801134e:	22ff      	movs	r2, #255	; 0xff
 8011350:	21ff      	movs	r1, #255	; 0xff
 8011352:	20ff      	movs	r0, #255	; 0xff
 8011354:	f7ff fc82 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011358:	4603      	mov	r3, r0
 801135a:	4619      	mov	r1, r3
 801135c:	4620      	mov	r0, r4
 801135e:	f7ff f9d6 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8011368:	2100      	movs	r1, #0
 801136a:	4618      	mov	r0, r3
 801136c:	f7ff fa22 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f603 149c 	addw	r4, r3, #2460	; 0x99c
 8011376:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801137a:	2121      	movs	r1, #33	; 0x21
 801137c:	4618      	mov	r0, r3
 801137e:	f7ff f95d 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011386:	4618      	mov	r0, r3
 8011388:	f7ff f968 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 801138c:	4603      	mov	r3, r0
 801138e:	4a22      	ldr	r2, [pc, #136]	; (8011418 <_ZN12MainViewBaseC1Ev+0x768>)
 8011390:	2102      	movs	r1, #2
 8011392:	4620      	mov	r0, r4
 8011394:	f00a f952 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f503 7221 	add.w	r2, r3, #644	; 0x284
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 80113a4:	4619      	mov	r1, r3
 80113a6:	4610      	mov	r0, r2
 80113a8:	f7ff fa8c 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f503 7421 	add.w	r4, r3, #644	; 0x284
 80113b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80113b6:	2107      	movs	r1, #7
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7ff f93f 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80113be:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 80113c2:	4620      	mov	r0, r4
 80113c4:	f005 fe5a 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 80113ce:	230e      	movs	r3, #14
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	2312      	movs	r3, #18
 80113d4:	223f      	movs	r2, #63	; 0x3f
 80113d6:	f44f 7192 	mov.w	r1, #292	; 0x124
 80113da:	f7fe fec9 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80113e4:	22ff      	movs	r2, #255	; 0xff
 80113e6:	21ff      	movs	r1, #255	; 0xff
 80113e8:	20ff      	movs	r0, #255	; 0xff
 80113ea:	f7ff fc37 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80113ee:	4603      	mov	r3, r0
 80113f0:	4619      	mov	r1, r3
 80113f2:	4620      	mov	r0, r4
 80113f4:	f7ff f98b 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80113fe:	2100      	movs	r1, #0
 8011400:	4618      	mov	r0, r3
 8011402:	f7ff f9d7 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f503 641a 	add.w	r4, r3, #2464	; 0x9a0
 801140c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011410:	2122      	movs	r1, #34	; 0x22
 8011412:	4618      	mov	r0, r3
 8011414:	e002      	b.n	801141c <_ZN12MainViewBaseC1Ev+0x76c>
 8011416:	bf00      	nop
 8011418:	08026a74 	.word	0x08026a74
 801141c:	f7ff f90e 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011420:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff f919 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 801142a:	4603      	mov	r3, r0
 801142c:	4ae2      	ldr	r2, [pc, #904]	; (80117b8 <_ZN12MainViewBaseC1Ev+0xb08>)
 801142e:	2102      	movs	r1, #2
 8011430:	4620      	mov	r0, r4
 8011432:	f00a f903 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f503 631a 	add.w	r3, r3, #2464	; 0x9a0
 8011442:	4619      	mov	r1, r3
 8011444:	4610      	mov	r0, r2
 8011446:	f7ff fa3d 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8011450:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011454:	2108      	movs	r1, #8
 8011456:	4618      	mov	r0, r3
 8011458:	f7ff f8f0 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 801145c:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8011460:	4620      	mov	r0, r4
 8011462:	f005 fe0b 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 801146c:	230e      	movs	r3, #14
 801146e:	9300      	str	r3, [sp, #0]
 8011470:	2312      	movs	r3, #18
 8011472:	223f      	movs	r2, #63	; 0x3f
 8011474:	f240 115d 	movw	r1, #349	; 0x15d
 8011478:	f7fe fe7a 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8011482:	22ff      	movs	r2, #255	; 0xff
 8011484:	21ff      	movs	r1, #255	; 0xff
 8011486:	20ff      	movs	r0, #255	; 0xff
 8011488:	f7ff fbe8 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801148c:	4603      	mov	r3, r0
 801148e:	4619      	mov	r1, r3
 8011490:	4620      	mov	r0, r4
 8011492:	f7ff f93c 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 801149c:	2100      	movs	r1, #0
 801149e:	4618      	mov	r0, r3
 80114a0:	f7ff f988 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f603 14a4 	addw	r4, r3, #2468	; 0x9a4
 80114aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80114ae:	2123      	movs	r1, #35	; 0x23
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7ff f8c3 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80114b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7ff f8ce 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 80114c0:	4603      	mov	r3, r0
 80114c2:	4abd      	ldr	r2, [pc, #756]	; (80117b8 <_ZN12MainViewBaseC1Ev+0xb08>)
 80114c4:	2102      	movs	r1, #2
 80114c6:	4620      	mov	r0, r4
 80114c8:	f00a f8b8 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f603 13a4 	addw	r3, r3, #2468	; 0x9a4
 80114d8:	4619      	mov	r1, r3
 80114da:	4610      	mov	r0, r2
 80114dc:	f7ff f9f2 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 80114e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80114ea:	2109      	movs	r1, #9
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7ff f8a5 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80114f2:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80114f6:	4620      	mov	r0, r4
 80114f8:	f005 fdc0 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8011502:	230f      	movs	r3, #15
 8011504:	9300      	str	r3, [sp, #0]
 8011506:	2312      	movs	r3, #18
 8011508:	223e      	movs	r2, #62	; 0x3e
 801150a:	f240 119b 	movw	r1, #411	; 0x19b
 801150e:	f7fe fe2f 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8011518:	22ff      	movs	r2, #255	; 0xff
 801151a:	21ff      	movs	r1, #255	; 0xff
 801151c:	20ff      	movs	r0, #255	; 0xff
 801151e:	f7ff fb9d 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011522:	4603      	mov	r3, r0
 8011524:	4619      	mov	r1, r3
 8011526:	4620      	mov	r0, r4
 8011528:	f7ff f8f1 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8011532:	2100      	movs	r1, #0
 8011534:	4618      	mov	r0, r3
 8011536:	f7ff f93d 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f603 14a8 	addw	r4, r3, #2472	; 0x9a8
 8011540:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011544:	2124      	movs	r1, #36	; 0x24
 8011546:	4618      	mov	r0, r3
 8011548:	f7ff f878 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 801154c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011550:	4618      	mov	r0, r3
 8011552:	f7ff f883 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8011556:	4603      	mov	r3, r0
 8011558:	4a97      	ldr	r2, [pc, #604]	; (80117b8 <_ZN12MainViewBaseC1Ev+0xb08>)
 801155a:	2102      	movs	r1, #2
 801155c:	4620      	mov	r0, r4
 801155e:	f00a f86d 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
 801156e:	4619      	mov	r1, r3
 8011570:	4610      	mov	r0, r2
 8011572:	f7ff f9a7 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 801157c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011580:	210a      	movs	r1, #10
 8011582:	4618      	mov	r0, r3
 8011584:	f7ff f85a 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011588:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 801158c:	4620      	mov	r0, r4
 801158e:	f005 fd75 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8011598:	230e      	movs	r3, #14
 801159a:	9300      	str	r3, [sp, #0]
 801159c:	2312      	movs	r3, #18
 801159e:	223e      	movs	r2, #62	; 0x3e
 80115a0:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80115a4:	f7fe fde4 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f503 7459 	add.w	r4, r3, #868	; 0x364
 80115ae:	22ff      	movs	r2, #255	; 0xff
 80115b0:	21ff      	movs	r1, #255	; 0xff
 80115b2:	20ff      	movs	r0, #255	; 0xff
 80115b4:	f7ff fb52 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80115b8:	4603      	mov	r3, r0
 80115ba:	4619      	mov	r1, r3
 80115bc:	4620      	mov	r0, r4
 80115be:	f7ff f8a6 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80115c8:	2100      	movs	r1, #0
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7ff f8f2 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f603 14ac 	addw	r4, r3, #2476	; 0x9ac
 80115d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80115da:	2125      	movs	r1, #37	; 0x25
 80115dc:	4618      	mov	r0, r3
 80115de:	f7ff f82d 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80115e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff f838 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 80115ec:	4603      	mov	r3, r0
 80115ee:	4a72      	ldr	r2, [pc, #456]	; (80117b8 <_ZN12MainViewBaseC1Ev+0xb08>)
 80115f0:	2102      	movs	r1, #2
 80115f2:	4620      	mov	r0, r4
 80115f4:	f00a f822 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f503 7259 	add.w	r2, r3, #868	; 0x364
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 8011604:	4619      	mov	r1, r3
 8011606:	4610      	mov	r0, r2
 8011608:	f7ff f95c 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8011612:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011616:	210b      	movs	r1, #11
 8011618:	4618      	mov	r0, r3
 801161a:	f7ff f80f 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 801161e:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8011622:	4620      	mov	r0, r4
 8011624:	f005 fd2a 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 801162e:	2305      	movs	r3, #5
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8011636:	223a      	movs	r2, #58	; 0x3a
 8011638:	f06f 0101 	mvn.w	r1, #1
 801163c:	f7fe fd98 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8011646:	22ff      	movs	r2, #255	; 0xff
 8011648:	21ff      	movs	r1, #255	; 0xff
 801164a:	20ff      	movs	r0, #255	; 0xff
 801164c:	f7ff fb06 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011650:	4603      	mov	r3, r0
 8011652:	22ff      	movs	r2, #255	; 0xff
 8011654:	4619      	mov	r1, r3
 8011656:	4620      	mov	r0, r4
 8011658:	f004 ffe1 	bl	801661e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8011668:	4619      	mov	r1, r3
 801166a:	4610      	mov	r0, r2
 801166c:	f005 f840 	bl	80166f0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8011676:	2203      	movs	r2, #3
 8011678:	2100      	movs	r1, #0
 801167a:	4618      	mov	r0, r3
 801167c:	f000 fd2c 	bl	80120d8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8011686:	2203      	movs	r2, #3
 8011688:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 801168c:	4618      	mov	r0, r3
 801168e:	f000 fd49 	bl	8012124 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8011698:	2102      	movs	r1, #2
 801169a:	4618      	mov	r0, r3
 801169c:	f000 fd68 	bl	8012170 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80116a6:	2101      	movs	r1, #1
 80116a8:	4618      	mov	r0, r3
 80116aa:	f005 fb3b 	bl	8016d24 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(413, 129);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80116b4:	2281      	movs	r2, #129	; 0x81
 80116b6:	f240 119d 	movw	r1, #413	; 0x19d
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fe fda3 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 80116c6:	22a9      	movs	r2, #169	; 0xa9
 80116c8:	2100      	movs	r1, #0
 80116ca:	20ff      	movs	r0, #255	; 0xff
 80116cc:	f7ff fac6 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116d0:	4603      	mov	r3, r0
 80116d2:	4619      	mov	r1, r3
 80116d4:	4620      	mov	r0, r4
 80116d6:	f7ff f81a 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80116e0:	2100      	movs	r1, #0
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7ff f866 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 80116ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80116f2:	210e      	movs	r1, #14
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fe ffa1 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80116fa:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80116fe:	4620      	mov	r0, r4
 8011700:	f005 fcbc 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(371, 77, 100, 47);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f203 405c 	addw	r0, r3, #1116	; 0x45c
 801170a:	232f      	movs	r3, #47	; 0x2f
 801170c:	9300      	str	r3, [sp, #0]
 801170e:	2364      	movs	r3, #100	; 0x64
 8011710:	224d      	movs	r2, #77	; 0x4d
 8011712:	f240 1173 	movw	r1, #371	; 0x173
 8011716:	f7fe fd2b 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8011720:	22ff      	movs	r2, #255	; 0xff
 8011722:	21ff      	movs	r1, #255	; 0xff
 8011724:	20ff      	movs	r0, #255	; 0xff
 8011726:	f7ff fa99 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801172a:	4603      	mov	r3, r0
 801172c:	4619      	mov	r1, r3
 801172e:	4620      	mov	r0, r4
 8011730:	f7fe ffed 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801173a:	2100      	movs	r1, #0
 801173c:	4618      	mov	r0, r3
 801173e:	f7ff f839 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8011748:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801174c:	210d      	movs	r1, #13
 801174e:	4618      	mov	r0, r3
 8011750:	f7fe ff74 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011754:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011758:	4618      	mov	r0, r3
 801175a:	f7fe ff7f 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 801175e:	4603      	mov	r3, r0
 8011760:	4a15      	ldr	r2, [pc, #84]	; (80117b8 <_ZN12MainViewBaseC1Ev+0xb08>)
 8011762:	2105      	movs	r1, #5
 8011764:	4620      	mov	r0, r4
 8011766:	f009 ff69 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f203 425c 	addw	r2, r3, #1116	; 0x45c
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8011776:	4619      	mov	r1, r3
 8011778:	4610      	mov	r0, r2
 801177a:	f7ff f8a3 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8011784:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011788:	210c      	movs	r1, #12
 801178a:	4618      	mov	r0, r3
 801178c:	f7fe ff56 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011790:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8011794:	4620      	mov	r0, r4
 8011796:	f005 fc71 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPressureDescriptor.setXY(287, 217);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80117a0:	22d9      	movs	r2, #217	; 0xd9
 80117a2:	f240 111f 	movw	r1, #287	; 0x11f
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7fe fd2d 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPressureDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80117b2:	22a9      	movs	r2, #169	; 0xa9
 80117b4:	2100      	movs	r1, #0
 80117b6:	e001      	b.n	80117bc <_ZN12MainViewBaseC1Ev+0xb0c>
 80117b8:	08026a74 	.word	0x08026a74
 80117bc:	20ff      	movs	r0, #255	; 0xff
 80117be:	f7ff fa4d 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117c2:	4603      	mov	r3, r0
 80117c4:	4619      	mov	r1, r3
 80117c6:	4620      	mov	r0, r4
 80117c8:	f7fe ffa1 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPressureDescriptor.setLinespacing(0);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80117d2:	2100      	movs	r1, #0
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7fe ffed 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPressureDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80117e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80117e4:	2111      	movs	r1, #17
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fe ff28 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80117ec:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 80117f0:	4620      	mov	r0, r4
 80117f2:	f005 fc43 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(168, 219);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80117fc:	22db      	movs	r2, #219	; 0xdb
 80117fe:	21a8      	movs	r1, #168	; 0xa8
 8011800:	4618      	mov	r0, r3
 8011802:	f7fe fd00 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 801180c:	22a9      	movs	r2, #169	; 0xa9
 801180e:	2100      	movs	r1, #0
 8011810:	20ff      	movs	r0, #255	; 0xff
 8011812:	f7ff fa23 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011816:	4603      	mov	r3, r0
 8011818:	4619      	mov	r1, r3
 801181a:	4620      	mov	r0, r4
 801181c:	f7fe ff77 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011826:	2100      	movs	r1, #0
 8011828:	4618      	mov	r0, r3
 801182a:	f7fe ffc3 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8011834:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011838:	2112      	movs	r1, #18
 801183a:	4618      	mov	r0, r3
 801183c:	f7fe fefe 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011840:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8011844:	4620      	mov	r0, r4
 8011846:	f005 fc19 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OilPressureValue.setPosition(133, 170, 100, 47);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f203 40fc 	addw	r0, r3, #1276	; 0x4fc
 8011850:	232f      	movs	r3, #47	; 0x2f
 8011852:	9300      	str	r3, [sp, #0]
 8011854:	2364      	movs	r3, #100	; 0x64
 8011856:	22aa      	movs	r2, #170	; 0xaa
 8011858:	2185      	movs	r1, #133	; 0x85
 801185a:	f7fe fc89 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    OilPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 8011864:	22ff      	movs	r2, #255	; 0xff
 8011866:	21ff      	movs	r1, #255	; 0xff
 8011868:	20ff      	movs	r0, #255	; 0xff
 801186a:	f7ff f9f7 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801186e:	4603      	mov	r3, r0
 8011870:	4619      	mov	r1, r3
 8011872:	4620      	mov	r0, r4
 8011874:	f7fe ff4b 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OilPressureValue.setLinespacing(0);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 801187e:	2100      	movs	r1, #0
 8011880:	4618      	mov	r0, r3
 8011882:	f7fe ff97 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OilPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID68).getText());
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f603 14ba 	addw	r4, r3, #2490	; 0x9ba
 801188c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011890:	2127      	movs	r1, #39	; 0x27
 8011892:	4618      	mov	r0, r3
 8011894:	f7fe fed2 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011898:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801189c:	4618      	mov	r0, r3
 801189e:	f7fe fedd 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 80118a2:	4603      	mov	r3, r0
 80118a4:	4ae1      	ldr	r2, [pc, #900]	; (8011c2c <_ZN12MainViewBaseC1Ev+0xf7c>)
 80118a6:	2105      	movs	r1, #5
 80118a8:	4620      	mov	r0, r4
 80118aa:	f009 fec7 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OilPressureValue.setWildcard(OilPressureValueBuffer);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f603 13ba 	addw	r3, r3, #2490	; 0x9ba
 80118ba:	4619      	mov	r1, r3
 80118bc:	4610      	mov	r0, r2
 80118be:	f7ff f801 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OilPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 80118c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80118cc:	2113      	movs	r1, #19
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7fe feb4 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80118d4:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 80118d8:	4620      	mov	r0, r4
 80118da:	f005 fbcf 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPressureValue.setPosition(252, 170, 100, 47);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f203 5034 	addw	r0, r3, #1332	; 0x534
 80118e4:	232f      	movs	r3, #47	; 0x2f
 80118e6:	9300      	str	r3, [sp, #0]
 80118e8:	2364      	movs	r3, #100	; 0x64
 80118ea:	22aa      	movs	r2, #170	; 0xaa
 80118ec:	21fc      	movs	r1, #252	; 0xfc
 80118ee:	f7fe fc3f 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f203 5434 	addw	r4, r3, #1332	; 0x534
 80118f8:	22ff      	movs	r2, #255	; 0xff
 80118fa:	21ff      	movs	r1, #255	; 0xff
 80118fc:	20ff      	movs	r0, #255	; 0xff
 80118fe:	f7ff f9ad 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011902:	4603      	mov	r3, r0
 8011904:	4619      	mov	r1, r3
 8011906:	4620      	mov	r0, r4
 8011908:	f7fe ff01 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPressureValue.setLinespacing(0);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011912:	2100      	movs	r1, #0
 8011914:	4618      	mov	r0, r3
 8011916:	f7fe ff4d 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPressureValueBuffer, FUELPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID71).getText());
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f603 14c4 	addw	r4, r3, #2500	; 0x9c4
 8011920:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011924:	212a      	movs	r1, #42	; 0x2a
 8011926:	4618      	mov	r0, r3
 8011928:	f7fe fe88 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 801192c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011930:	4618      	mov	r0, r3
 8011932:	f7fe fe93 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8011936:	4603      	mov	r3, r0
 8011938:	4abc      	ldr	r2, [pc, #752]	; (8011c2c <_ZN12MainViewBaseC1Ev+0xf7c>)
 801193a:	2105      	movs	r1, #5
 801193c:	4620      	mov	r0, r4
 801193e:	f009 fe7d 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPressureValue.setWildcard(FuelPressureValueBuffer);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f203 5234 	addw	r2, r3, #1332	; 0x534
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 801194e:	4619      	mov	r1, r3
 8011950:	4610      	mov	r0, r2
 8011952:	f7fe ffb7 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f203 5434 	addw	r4, r3, #1332	; 0x534
 801195c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011960:	2126      	movs	r1, #38	; 0x26
 8011962:	4618      	mov	r0, r3
 8011964:	f7fe fe6a 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011968:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 801196c:	4620      	mov	r0, r4
 801196e:	f005 fb85 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011978:	22f0      	movs	r2, #240	; 0xf0
 801197a:	f240 1197 	movw	r1, #407	; 0x197
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe fc41 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 801198a:	22a9      	movs	r2, #169	; 0xa9
 801198c:	2100      	movs	r1, #0
 801198e:	20ff      	movs	r0, #255	; 0xff
 8011990:	f7ff f964 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011994:	4603      	mov	r3, r0
 8011996:	4619      	mov	r1, r3
 8011998:	4620      	mov	r0, r4
 801199a:	f7fe feb8 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80119a4:	2100      	movs	r1, #0
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fe ff04 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 80119b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80119b6:	2116      	movs	r1, #22
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7fe fe3f 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 80119be:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 80119c2:	4620      	mov	r0, r4
 80119c4:	f005 fb5a 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80119ce:	22e2      	movs	r2, #226	; 0xe2
 80119d0:	f240 116d 	movw	r1, #365	; 0x16d
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7fe fc16 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 80119e0:	230a      	movs	r3, #10
 80119e2:	9300      	str	r3, [sp, #0]
 80119e4:	2364      	movs	r3, #100	; 0x64
 80119e6:	2202      	movs	r2, #2
 80119e8:	2102      	movs	r1, #2
 80119ea:	f003 f947 	bl	8014c7c <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 80119f4:	2300      	movs	r3, #0
 80119f6:	9300      	str	r3, [sp, #0]
 80119f8:	2300      	movs	r3, #0
 80119fa:	2264      	movs	r2, #100	; 0x64
 80119fc:	2100      	movs	r1, #0
 80119fe:	f003 fbbb 	bl	8015178 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011a08:	2100      	movs	r1, #0
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f003 f996 	bl	8014d3c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8011a16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011a1a:	2100      	movs	r1, #0
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7fe fb49 	bl	80100b4 <_ZN8touchgfx6BitmapC1Et>
 8011a22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011a26:	4619      	mov	r1, r3
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f003 fb9a 	bl	8015162 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 0, 169));
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8011a34:	22a9      	movs	r2, #169	; 0xa9
 8011a36:	2100      	movs	r1, #0
 8011a38:	20ff      	movs	r0, #255	; 0xff
 8011a3a:	f7ff f90f 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	4619      	mov	r1, r3
 8011a42:	4620      	mov	r0, r4
 8011a44:	f003 f8c4 	bl	8014bd0 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011a4e:	213c      	movs	r1, #60	; 0x3c
 8011a50:	4618      	mov	r0, r3
 8011a52:	f003 f92b 	bl	8014cac <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f503 60cc 	add.w	r0, r3, #1632	; 0x660
 8011a5c:	230a      	movs	r3, #10
 8011a5e:	9300      	str	r3, [sp, #0]
 8011a60:	23b4      	movs	r3, #180	; 0xb4
 8011a62:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011a66:	210e      	movs	r1, #14
 8011a68:	f7fe fb82 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f203 64d4 	addw	r4, r3, #1748	; 0x6d4
 8011a72:	22ff      	movs	r2, #255	; 0xff
 8011a74:	21ff      	movs	r1, #255	; 0xff
 8011a76:	20ff      	movs	r0, #255	; 0xff
 8011a78:	f7ff f8f0 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	22ff      	movs	r2, #255	; 0xff
 8011a80:	4619      	mov	r1, r3
 8011a82:	4620      	mov	r0, r4
 8011a84:	f004 fdcb 	bl	801661e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f503 62cc 	add.w	r2, r3, #1632	; 0x660
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8011a94:	4619      	mov	r1, r3
 8011a96:	4610      	mov	r0, r2
 8011a98:	f004 fe2a 	bl	80166f0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011aa2:	2205      	movs	r2, #5
 8011aa4:	2100      	movs	r1, #0
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f000 fb16 	bl	80120d8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011ab2:	2205      	movs	r2, #5
 8011ab4:	21b4      	movs	r1, #180	; 0xb4
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f000 fb34 	bl	8012124 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011ac2:	2102      	movs	r1, #2
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f000 fb53 	bl	8012170 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8011ad0:	2100      	movs	r1, #0
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f005 f926 	bl	8016d24 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f203 60ec 	addw	r0, r3, #1772	; 0x6ec
 8011ade:	230a      	movs	r3, #10
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	23b4      	movs	r3, #180	; 0xb4
 8011ae4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011ae8:	f240 111f 	movw	r1, #287	; 0x11f
 8011aec:	f7fe fb40 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f503 64ec 	add.w	r4, r3, #1888	; 0x760
 8011af6:	22ff      	movs	r2, #255	; 0xff
 8011af8:	21ff      	movs	r1, #255	; 0xff
 8011afa:	20ff      	movs	r0, #255	; 0xff
 8011afc:	f7ff f8ae 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b00:	4603      	mov	r3, r0
 8011b02:	22ff      	movs	r2, #255	; 0xff
 8011b04:	4619      	mov	r1, r3
 8011b06:	4620      	mov	r0, r4
 8011b08:	f004 fd89 	bl	801661e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f203 62ec 	addw	r2, r3, #1772	; 0x6ec
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8011b18:	4619      	mov	r1, r3
 8011b1a:	4610      	mov	r0, r2
 8011b1c:	f004 fde8 	bl	80166f0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011b26:	2205      	movs	r2, #5
 8011b28:	2100      	movs	r1, #0
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f000 fad4 	bl	80120d8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011b36:	2205      	movs	r2, #5
 8011b38:	21b4      	movs	r1, #180	; 0xb4
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f000 faf2 	bl	8012124 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011b46:	2102      	movs	r1, #2
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f000 fb11 	bl	8012170 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 8011b54:	2100      	movs	r1, #0
 8011b56:	4618      	mov	r0, r3
 8011b58:	f005 f8e4 	bl	8016d24 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f503 60ef 	add.w	r0, r3, #1912	; 0x778
 8011b62:	2315      	movs	r3, #21
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	233c      	movs	r3, #60	; 0x3c
 8011b68:	22f7      	movs	r2, #247	; 0xf7
 8011b6a:	21d2      	movs	r1, #210	; 0xd2
 8011b6c:	f7fe fb00 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f503 64ef 	add.w	r4, r3, #1912	; 0x778
 8011b76:	22ff      	movs	r2, #255	; 0xff
 8011b78:	21ff      	movs	r1, #255	; 0xff
 8011b7a:	20ff      	movs	r0, #255	; 0xff
 8011b7c:	f7ff f86e 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b80:	4603      	mov	r3, r0
 8011b82:	4619      	mov	r1, r3
 8011b84:	4620      	mov	r0, r4
 8011b86:	f7fe fdc2 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8011b90:	2100      	movs	r1, #0
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7fe fe0e 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f603 14ce 	addw	r4, r3, #2510	; 0x9ce
 8011b9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011ba2:	2118      	movs	r1, #24
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f7fe fd49 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011baa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7fe fd54 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	4a1d      	ldr	r2, [pc, #116]	; (8011c2c <_ZN12MainViewBaseC1Ev+0xf7c>)
 8011bb8:	2105      	movs	r1, #5
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f009 fd3e 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f503 62ef 	add.w	r2, r3, #1912	; 0x778
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f603 13ce 	addw	r3, r3, #2510	; 0x9ce
 8011bcc:	4619      	mov	r1, r3
 8011bce:	4610      	mov	r0, r2
 8011bd0:	f7fe fe78 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f503 64ef 	add.w	r4, r3, #1912	; 0x778
 8011bda:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011bde:	2117      	movs	r1, #23
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7fe fd2b 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011be6:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8011bea:	4620      	mov	r0, r4
 8011bec:	f005 fa46 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	2101      	movs	r1, #1
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7fe fb03 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f503 60f6 	add.w	r0, r3, #1968	; 0x7b0
 8011c06:	2337      	movs	r3, #55	; 0x37
 8011c08:	9300      	str	r3, [sp, #0]
 8011c0a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8011c0e:	2202      	movs	r2, #2
 8011c10:	2102      	movs	r1, #2
 8011c12:	f003 f983 	bl	8014f1c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f503 60f6 	add.w	r0, r3, #1968	; 0x7b0
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	2300      	movs	r3, #0
 8011c22:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011c26:	2100      	movs	r1, #0
 8011c28:	e002      	b.n	8011c30 <_ZN12MainViewBaseC1Ev+0xf80>
 8011c2a:	bf00      	nop
 8011c2c:	08026a74 	.word	0x08026a74
 8011c30:	f003 faa2 	bl	8015178 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f003 f87d 	bl	8014d3c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_GREEN_PINK_FADEPINKPURPLE_SMALL_TRANSPARENT_ID);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011c48:	2101      	movs	r1, #1
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f003 f8c1 	bl	8014dd2 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011c56:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f003 f976 	bl	8014f4c <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8011c66:	2101      	movs	r1, #1
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f003 f89b 	bl	8014da4 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	f503 600a 	add.w	r0, r3, #2208	; 0x8a0
 8011c74:	2316      	movs	r3, #22
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	2337      	movs	r3, #55	; 0x37
 8011c7a:	2204      	movs	r2, #4
 8011c7c:	2119      	movs	r1, #25
 8011c7e:	f7fe fa77 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f503 640a 	add.w	r4, r3, #2208	; 0x8a0
 8011c88:	22ff      	movs	r2, #255	; 0xff
 8011c8a:	21ff      	movs	r1, #255	; 0xff
 8011c8c:	20ff      	movs	r0, #255	; 0xff
 8011c8e:	f7fe ffe5 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c92:	4603      	mov	r3, r0
 8011c94:	4619      	mov	r1, r3
 8011c96:	4620      	mov	r0, r4
 8011c98:	f7fe fd39 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8011ca2:	2100      	movs	r1, #0
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7fe fd85 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f603 14d8 	addw	r4, r3, #2520	; 0x9d8
 8011cb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011cb4:	211a      	movs	r1, #26
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fe fcc0 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011cbc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7fe fccb 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	4ad6      	ldr	r2, [pc, #856]	; (8012024 <_ZN12MainViewBaseC1Ev+0x1374>)
 8011cca:	2105      	movs	r1, #5
 8011ccc:	4620      	mov	r0, r4
 8011cce:	f009 fcb5 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f503 620a 	add.w	r2, r3, #2208	; 0x8a0
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f603 13d8 	addw	r3, r3, #2520	; 0x9d8
 8011cde:	4619      	mov	r1, r3
 8011ce0:	4610      	mov	r0, r2
 8011ce2:	f7fe fdef 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f503 640a 	add.w	r4, r3, #2208	; 0x8a0
 8011cec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011cf0:	2119      	movs	r1, #25
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7fe fca2 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011cf8:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	f005 f9bd 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8011d08:	220f      	movs	r2, #15
 8011d0a:	2152      	movs	r1, #82	; 0x52
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7fe fa7a 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8011d18:	22ff      	movs	r2, #255	; 0xff
 8011d1a:	21ff      	movs	r1, #255	; 0xff
 8011d1c:	20ff      	movs	r0, #255	; 0xff
 8011d1e:	f7fe ff9d 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d22:	4603      	mov	r3, r0
 8011d24:	4619      	mov	r1, r3
 8011d26:	4620      	mov	r0, r4
 8011d28:	f7fe fcf1 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8011d32:	2100      	movs	r1, #0
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fe fd3d 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 8011d40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011d44:	211b      	movs	r1, #27
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7fe fc78 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011d4c:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8011d50:	4620      	mov	r0, r4
 8011d52:	f005 f993 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(133, 79, 100, 47);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8011d5c:	232f      	movs	r3, #47	; 0x2f
 8011d5e:	9300      	str	r3, [sp, #0]
 8011d60:	2364      	movs	r3, #100	; 0x64
 8011d62:	224f      	movs	r2, #79	; 0x4f
 8011d64:	2185      	movs	r1, #133	; 0x85
 8011d66:	f7fe fa03 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8011d70:	22ff      	movs	r2, #255	; 0xff
 8011d72:	21ff      	movs	r1, #255	; 0xff
 8011d74:	20ff      	movs	r0, #255	; 0xff
 8011d76:	f7fe ff71 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	4620      	mov	r0, r4
 8011d80:	f7fe fcc5 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8011d8a:	2100      	movs	r1, #0
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fe fd11 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f603 14e2 	addw	r4, r3, #2530	; 0x9e2
 8011d98:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011d9c:	2128      	movs	r1, #40	; 0x28
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7fe fc4c 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011da4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7fe fc57 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8011dae:	4603      	mov	r3, r0
 8011db0:	4a9c      	ldr	r2, [pc, #624]	; (8012024 <_ZN12MainViewBaseC1Ev+0x1374>)
 8011db2:	2105      	movs	r1, #5
 8011db4:	4620      	mov	r0, r4
 8011db6:	f009 fc41 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f603 13e2 	addw	r3, r3, #2530	; 0x9e2
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	4610      	mov	r0, r2
 8011dca:	f7fe fd7b 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8011dd4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011dd8:	211c      	movs	r1, #28
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7fe fc2e 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011de0:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8011de4:	4620      	mov	r0, r4
 8011de6:	f005 f949 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(252, 79, 100, 47);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f603 1044 	addw	r0, r3, #2372	; 0x944
 8011df0:	232f      	movs	r3, #47	; 0x2f
 8011df2:	9300      	str	r3, [sp, #0]
 8011df4:	2364      	movs	r3, #100	; 0x64
 8011df6:	224f      	movs	r2, #79	; 0x4f
 8011df8:	21fc      	movs	r1, #252	; 0xfc
 8011dfa:	f7fe f9b9 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8011e04:	22ff      	movs	r2, #255	; 0xff
 8011e06:	21ff      	movs	r1, #255	; 0xff
 8011e08:	20ff      	movs	r0, #255	; 0xff
 8011e0a:	f7fe ff27 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	4619      	mov	r1, r3
 8011e12:	4620      	mov	r0, r4
 8011e14:	f7fe fc7b 	bl	801070e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8011e1e:	2100      	movs	r1, #0
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fe fcc7 	bl	80107b4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID70).getText());
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 8011e2c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011e30:	2129      	movs	r1, #41	; 0x29
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fe fc02 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011e38:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7fe fc0d 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8011e42:	4603      	mov	r3, r0
 8011e44:	4a77      	ldr	r2, [pc, #476]	; (8012024 <_ZN12MainViewBaseC1Ev+0x1374>)
 8011e46:	2105      	movs	r1, #5
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f009 fbf7 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f603 1244 	addw	r2, r3, #2372	; 0x944
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	4610      	mov	r0, r2
 8011e5e:	f7fe fd31 	bl	80108c4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8011e68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011e6c:	211d      	movs	r1, #29
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f7fe fbe4 	bl	801063c <_ZN8touchgfx9TypedTextC1Et>
 8011e74:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8011e78:	4620      	mov	r0, r4
 8011e7a:	f005 f8ff 	bl	801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	3340      	adds	r3, #64	; 0x40
 8011e84:	4619      	mov	r1, r3
 8011e86:	4610      	mov	r0, r2
 8011e88:	f7fe fb20 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	3370      	adds	r3, #112	; 0x70
 8011e92:	4619      	mov	r1, r3
 8011e94:	4610      	mov	r0, r2
 8011e96:	f7fe fb19 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	33a4      	adds	r3, #164	; 0xa4
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	4610      	mov	r0, r2
 8011ea4:	f7fe fb12 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8011ea8:	687a      	ldr	r2, [r7, #4]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	33d8      	adds	r3, #216	; 0xd8
 8011eae:	4619      	mov	r1, r3
 8011eb0:	4610      	mov	r0, r2
 8011eb2:	f7fe fb0b 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	4610      	mov	r0, r2
 8011ec2:	f7fe fb03 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011ece:	4619      	mov	r1, r3
 8011ed0:	4610      	mov	r0, r2
 8011ed2:	f7fe fafb 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8011ed6:	687a      	ldr	r2, [r7, #4]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011ede:	4619      	mov	r1, r3
 8011ee0:	4610      	mov	r0, r2
 8011ee2:	f7fe faf3 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8011eee:	4619      	mov	r1, r3
 8011ef0:	4610      	mov	r0, r2
 8011ef2:	f7fe faeb 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8011efe:	4619      	mov	r1, r3
 8011f00:	4610      	mov	r0, r2
 8011f02:	f7fe fae3 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8011f0e:	4619      	mov	r1, r3
 8011f10:	4610      	mov	r0, r2
 8011f12:	f7fe fadb 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8011f16:	687a      	ldr	r2, [r7, #4]
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8011f1e:	4619      	mov	r1, r3
 8011f20:	4610      	mov	r0, r2
 8011f22:	f7fe fad3 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8011f2e:	4619      	mov	r1, r3
 8011f30:	4610      	mov	r0, r2
 8011f32:	f7fe facb 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8011f3e:	4619      	mov	r1, r3
 8011f40:	4610      	mov	r0, r2
 8011f42:	f7fe fac3 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8011f4e:	4619      	mov	r1, r3
 8011f50:	4610      	mov	r0, r2
 8011f52:	f7fe fabb 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8011f5e:	4619      	mov	r1, r3
 8011f60:	4610      	mov	r0, r2
 8011f62:	f7fe fab3 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8011f66:	687a      	ldr	r2, [r7, #4]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8011f6e:	4619      	mov	r1, r3
 8011f70:	4610      	mov	r0, r2
 8011f72:	f7fe faab 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8011f7e:	4619      	mov	r1, r3
 8011f80:	4610      	mov	r0, r2
 8011f82:	f7fe faa3 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011f8e:	4619      	mov	r1, r3
 8011f90:	4610      	mov	r0, r2
 8011f92:	f7fe fa9b 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8011f9e:	4619      	mov	r1, r3
 8011fa0:	4610      	mov	r0, r2
 8011fa2:	f7fe fa93 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPressureDescriptor);
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011fae:	4619      	mov	r1, r3
 8011fb0:	4610      	mov	r0, r2
 8011fb2:	f7fe fa8b 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8011fb6:	687a      	ldr	r2, [r7, #4]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	4610      	mov	r0, r2
 8011fc2:	f7fe fa83 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OilPressureValue);
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8011fce:	4619      	mov	r1, r3
 8011fd0:	4610      	mov	r0, r2
 8011fd2:	f7fe fa7b 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPressureValue);
 8011fd6:	687a      	ldr	r2, [r7, #4]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011fde:	4619      	mov	r1, r3
 8011fe0:	4610      	mov	r0, r2
 8011fe2:	f7fe fa73 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011fee:	4619      	mov	r1, r3
 8011ff0:	4610      	mov	r0, r2
 8011ff2:	f7fe fa6b 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8011ff6:	687a      	ldr	r2, [r7, #4]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8011ffe:	4619      	mov	r1, r3
 8012000:	4610      	mov	r0, r2
 8012002:	f7fe fa63 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8012006:	687a      	ldr	r2, [r7, #4]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 801200e:	4619      	mov	r1, r3
 8012010:	4610      	mov	r0, r2
 8012012:	f7fe fa5b 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 801201e:	4619      	mov	r1, r3
 8012020:	e002      	b.n	8012028 <_ZN12MainViewBaseC1Ev+0x1378>
 8012022:	bf00      	nop
 8012024:	08026a74 	.word	0x08026a74
 8012028:	4610      	mov	r0, r2
 801202a:	f7fe fa4f 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 801202e:	687a      	ldr	r2, [r7, #4]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8012036:	4619      	mov	r1, r3
 8012038:	4610      	mov	r0, r2
 801203a:	f7fe fa47 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012046:	4619      	mov	r1, r3
 8012048:	4610      	mov	r0, r2
 801204a:	f7fe fa3f 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8012056:	4619      	mov	r1, r3
 8012058:	4610      	mov	r0, r2
 801205a:	f7fe fa37 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 801205e:	687a      	ldr	r2, [r7, #4]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8012066:	4619      	mov	r1, r3
 8012068:	4610      	mov	r0, r2
 801206a:	f7fe fa2f 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 801206e:	687a      	ldr	r2, [r7, #4]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8012076:	4619      	mov	r1, r3
 8012078:	4610      	mov	r0, r2
 801207a:	f7fe fa27 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012086:	4619      	mov	r1, r3
 8012088:	4610      	mov	r0, r2
 801208a:	f7fe fa1f 	bl	80104cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	4618      	mov	r0, r3
 8012092:	37cc      	adds	r7, #204	; 0xcc
 8012094:	46bd      	mov	sp, r7
 8012096:	bd90      	pop	{r4, r7, pc}

08012098 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8012098:	b480      	push	{r7}
 801209a:	b083      	sub	sp, #12
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]

}
 80120a0:	bf00      	nop
 80120a2:	370c      	adds	r7, #12
 80120a4:	46bd      	mov	sp, r7
 80120a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120aa:	4770      	bx	lr

080120ac <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	4618      	mov	r0, r3
 80120b8:	f007 ff56 	bl	8019f68 <_ZN8touchgfx6ScreenC1Ev>
 80120bc:	4a05      	ldr	r2, [pc, #20]	; (80120d4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	601a      	str	r2, [r3, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2200      	movs	r2, #0
 80120c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	4618      	mov	r0, r3
 80120cc:	3708      	adds	r7, #8
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop
 80120d4:	08027044 	.word	0x08027044

080120d8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 80120d8:	b590      	push	{r4, r7, lr}
 80120da:	b089      	sub	sp, #36	; 0x24
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	607a      	str	r2, [r7, #4]
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	015a      	lsls	r2, r3, #5
 80120ec:	f107 0314 	add.w	r3, r7, #20
 80120f0:	4611      	mov	r1, r2
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fe fc16 	bl	8010924 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	461c      	mov	r4, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	61fb      	str	r3, [r7, #28]
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	015a      	lsls	r2, r3, #5
 8012104:	f107 0310 	add.w	r3, r7, #16
 8012108:	4611      	mov	r1, r2
 801210a:	4618      	mov	r0, r3
 801210c:	f7fe fc0a 	bl	8010924 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012110:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012112:	461a      	mov	r2, r3
 8012114:	4621      	mov	r1, r4
 8012116:	68f8      	ldr	r0, [r7, #12]
 8012118:	f004 fdee 	bl	8016cf8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 801211c:	bf00      	nop
 801211e:	3724      	adds	r7, #36	; 0x24
 8012120:	46bd      	mov	sp, r7
 8012122:	bd90      	pop	{r4, r7, pc}

08012124 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8012124:	b590      	push	{r4, r7, lr}
 8012126:	b089      	sub	sp, #36	; 0x24
 8012128:	af00      	add	r7, sp, #0
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	60b9      	str	r1, [r7, #8]
 801212e:	607a      	str	r2, [r7, #4]
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	61bb      	str	r3, [r7, #24]
 8012134:	69bb      	ldr	r3, [r7, #24]
 8012136:	015a      	lsls	r2, r3, #5
 8012138:	f107 0314 	add.w	r3, r7, #20
 801213c:	4611      	mov	r1, r2
 801213e:	4618      	mov	r0, r3
 8012140:	f7fe fbf0 	bl	8010924 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	461c      	mov	r4, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	61fb      	str	r3, [r7, #28]
 801214c:	69fb      	ldr	r3, [r7, #28]
 801214e:	015a      	lsls	r2, r3, #5
 8012150:	f107 0310 	add.w	r3, r7, #16
 8012154:	4611      	mov	r1, r2
 8012156:	4618      	mov	r0, r3
 8012158:	f7fe fbe4 	bl	8010924 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801215c:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 801215e:	461a      	mov	r2, r3
 8012160:	4621      	mov	r1, r4
 8012162:	68f8      	ldr	r0, [r7, #12]
 8012164:	f004 fdd3 	bl	8016d0e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8012168:	bf00      	nop
 801216a:	3724      	adds	r7, #36	; 0x24
 801216c:	46bd      	mov	sp, r7
 801216e:	bd90      	pop	{r4, r7, pc}

08012170 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6039      	str	r1, [r7, #0]
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	60fb      	str	r3, [r7, #12]
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	015a      	lsls	r2, r3, #5
 8012182:	f107 0308 	add.w	r3, r7, #8
 8012186:	4611      	mov	r1, r2
 8012188:	4618      	mov	r0, r3
 801218a:	f7fe fbcb 	bl	8010924 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801218e:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8012190:	4619      	mov	r1, r3
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f7fe fbe1 	bl	801095a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8012198:	bf00      	nop
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	4a05      	ldr	r2, [pc, #20]	; (80121c0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	601a      	str	r2, [r3, #0]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fe fb4f 	bl	8010854 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	4618      	mov	r0, r3
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	08028c18 	.word	0x08028c18

080121c4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f7ff ffe7 	bl	80121a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80121d2:	2138      	movs	r1, #56	; 0x38
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f013 f99e 	bl	8025516 <_ZdlPvj>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	4618      	mov	r0, r3
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	4a05      	ldr	r2, [pc, #20]	; (8012204 <_ZN8touchgfx4LineD1Ev+0x20>)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	601a      	str	r2, [r3, #0]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f004 fb59 	bl	80168ac <_ZN8touchgfx12CanvasWidgetD1Ev>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4618      	mov	r0, r3
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}
 8012204:	080289c4 	.word	0x080289c4

08012208 <_ZN8touchgfx4LineD0Ev>:
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f7ff ffe7 	bl	80121e4 <_ZN8touchgfx4LineD1Ev>
 8012216:	2174      	movs	r1, #116	; 0x74
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f013 f97c 	bl	8025516 <_ZdlPvj>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	4618      	mov	r0, r3
 8012222:	3708      	adds	r7, #8
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	4a05      	ldr	r2, [pc, #20]	; (8012248 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	601a      	str	r2, [r3, #0]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	4618      	mov	r0, r3
 801223a:	f7fe fbb1 	bl	80109a0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	4618      	mov	r0, r3
 8012242:	3708      	adds	r7, #8
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}
 8012248:	080286c8 	.word	0x080286c8

0801224c <_ZN8touchgfx13PainterRGB888D0Ev>:
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7ff ffe7 	bl	8012228 <_ZN8touchgfx13PainterRGB888D1Ev>
 801225a:	2118      	movs	r1, #24
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f013 f95a 	bl	8025516 <_ZdlPvj>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	4618      	mov	r0, r3
 8012266:	3708      	adds	r7, #8
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801226c:	b480      	push	{r7}
 801226e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012270:	4b02      	ldr	r3, [pc, #8]	; (801227c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8012272:	4618      	mov	r0, r3
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr
 801227c:	080271b0 	.word	0x080271b0

08012280 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012280:	b480      	push	{r7}
 8012282:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012284:	2303      	movs	r3, #3
}
 8012286:	4618      	mov	r0, r3
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr

08012290 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012290:	b480      	push	{r7}
 8012292:	b085      	sub	sp, #20
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	4613      	mov	r3, r2
 801229c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801229e:	4a07      	ldr	r2, [pc, #28]	; (80122bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	6013      	str	r3, [r2, #0]
        fonts = f;
 80122a4:	4a06      	ldr	r2, [pc, #24]	; (80122c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80122aa:	4a06      	ldr	r2, [pc, #24]	; (80122c4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80122ac:	88fb      	ldrh	r3, [r7, #6]
 80122ae:	8013      	strh	r3, [r2, #0]
    }
 80122b0:	bf00      	nop
 80122b2:	3714      	adds	r7, #20
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr
 80122bc:	2000bc20 	.word	0x2000bc20
 80122c0:	2000bc28 	.word	0x2000bc28
 80122c4:	2000bc24 	.word	0x2000bc24

080122c8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80122c8:	b590      	push	{r4, r7, lr}
 80122ca:	b085      	sub	sp, #20
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	4603      	mov	r3, r0
 80122d0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80122d2:	2300      	movs	r3, #0
 80122d4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80122d6:	88fb      	ldrh	r3, [r7, #6]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d127      	bne.n	801232c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80122dc:	88fb      	ldrh	r3, [r7, #6]
 80122de:	4a1e      	ldr	r2, [pc, #120]	; (8012358 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80122e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d016      	beq.n	8012316 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80122e8:	88fb      	ldrh	r3, [r7, #6]
 80122ea:	4a1b      	ldr	r2, [pc, #108]	; (8012358 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80122ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122f0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	68ba      	ldr	r2, [r7, #8]
 80122f8:	4413      	add	r3, r2
 80122fa:	4a18      	ldr	r2, [pc, #96]	; (801235c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80122fc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	68ba      	ldr	r2, [r7, #8]
 8012304:	4413      	add	r3, r2
 8012306:	4a16      	ldr	r2, [pc, #88]	; (8012360 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012308:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	689b      	ldr	r3, [r3, #8]
 801230e:	68ba      	ldr	r2, [r7, #8]
 8012310:	4413      	add	r3, r2
 8012312:	60fb      	str	r3, [r7, #12]
 8012314:	e00a      	b.n	801232c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8012316:	4b11      	ldr	r3, [pc, #68]	; (801235c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012318:	4a12      	ldr	r2, [pc, #72]	; (8012364 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801231a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801231c:	4a12      	ldr	r2, [pc, #72]	; (8012368 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801231e:	4b10      	ldr	r3, [pc, #64]	; (8012360 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012320:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012322:	88fb      	ldrh	r3, [r7, #6]
 8012324:	4a11      	ldr	r2, [pc, #68]	; (801236c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8012326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801232a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d00d      	beq.n	801234e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012332:	4a0f      	ldr	r2, [pc, #60]	; (8012370 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012334:	88fb      	ldrh	r3, [r7, #6]
 8012336:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012338:	f000 f83e 	bl	80123b8 <_ZN17TypedTextDatabase8getFontsEv>
 801233c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801233e:	f000 f833 	bl	80123a8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012342:	4603      	mov	r3, r0
 8012344:	461a      	mov	r2, r3
 8012346:	4621      	mov	r1, r4
 8012348:	68f8      	ldr	r0, [r7, #12]
 801234a:	f7ff ffa1 	bl	8012290 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801234e:	bf00      	nop
 8012350:	3714      	adds	r7, #20
 8012352:	46bd      	mov	sp, r7
 8012354:	bd90      	pop	{r4, r7, pc}
 8012356:	bf00      	nop
 8012358:	20008630 	.word	0x20008630
 801235c:	20008638 	.word	0x20008638
 8012360:	2000863c 	.word	0x2000863c
 8012364:	080628d4 	.word	0x080628d4
 8012368:	08062828 	.word	0x08062828
 801236c:	08062a58 	.word	0x08062a58
 8012370:	20008634 	.word	0x20008634

08012374 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012374:	b480      	push	{r7}
 8012376:	b083      	sub	sp, #12
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	460b      	mov	r3, r1
 801237e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012380:	4b07      	ldr	r3, [pc, #28]	; (80123a0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	4b07      	ldr	r3, [pc, #28]	; (80123a4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8012386:	6819      	ldr	r1, [r3, #0]
 8012388:	887b      	ldrh	r3, [r7, #2]
 801238a:	009b      	lsls	r3, r3, #2
 801238c:	440b      	add	r3, r1
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	005b      	lsls	r3, r3, #1
 8012392:	4413      	add	r3, r2
}
 8012394:	4618      	mov	r0, r3
 8012396:	370c      	adds	r7, #12
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	4770      	bx	lr
 80123a0:	20008638 	.word	0x20008638
 80123a4:	2000863c 	.word	0x2000863c

080123a8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80123a8:	b480      	push	{r7}
 80123aa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80123ac:	232b      	movs	r3, #43	; 0x2b
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	46bd      	mov	sp, r7
 80123b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b6:	4770      	bx	lr

080123b8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80123b8:	b480      	push	{r7}
 80123ba:	af00      	add	r7, sp, #0
    return _fonts;
 80123bc:	4b02      	ldr	r3, [pc, #8]	; (80123c8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80123be:	4618      	mov	r0, r3
 80123c0:	46bd      	mov	sp, r7
 80123c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c6:	4770      	bx	lr
 80123c8:	20008640 	.word	0x20008640

080123cc <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2b01      	cmp	r3, #1
 80123da:	d127      	bne.n	801242c <_Z41__static_initialization_and_destruction_0ii+0x60>
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d122      	bne.n	801242c <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 80123e6:	f7fc ffb5 	bl	800f354 <_Z25getFont_Asap_Bold_18_4bppv>
 80123ea:	4602      	mov	r2, r0
};
 80123ec:	4b11      	ldr	r3, [pc, #68]	; (8012434 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80123ee:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 80123f0:	f7fd f876 	bl	800f4e0 <_Z25getFont_Asap_Bold_40_4bppv>
 80123f4:	4602      	mov	r2, r0
};
 80123f6:	4b0f      	ldr	r3, [pc, #60]	; (8012434 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80123f8:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 80123fa:	f7fd f82f 	bl	800f45c <_Z25getFont_Asap_Bold_30_4bppv>
 80123fe:	4602      	mov	r2, r0
};
 8012400:	4b0c      	ldr	r3, [pc, #48]	; (8012434 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012402:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8012404:	f7fc ff64 	bl	800f2d0 <_Z25getFont_Asap_Bold_12_4bppv>
 8012408:	4602      	mov	r2, r0
};
 801240a:	4b0a      	ldr	r3, [pc, #40]	; (8012434 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801240c:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 801240e:	f7fd f8a9 	bl	800f564 <_Z25getFont_Asap_Bold_60_4bppv>
 8012412:	4602      	mov	r2, r0
};
 8012414:	4b07      	ldr	r3, [pc, #28]	; (8012434 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012416:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8012418:	f7fc ffde 	bl	800f3d8 <_Z25getFont_Asap_Bold_21_4bppv>
 801241c:	4602      	mov	r2, r0
};
 801241e:	4b05      	ldr	r3, [pc, #20]	; (8012434 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012420:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8012422:	f7fc ff13 	bl	800f24c <_Z25getFont_Asap_Bold_10_4bppv>
 8012426:	4602      	mov	r2, r0
};
 8012428:	4b02      	ldr	r3, [pc, #8]	; (8012434 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801242a:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 801242c:	bf00      	nop
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	20008640 	.word	0x20008640

08012438 <_GLOBAL__sub_I__fonts>:
 8012438:	b580      	push	{r7, lr}
 801243a:	af00      	add	r7, sp, #0
 801243c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012440:	2001      	movs	r0, #1
 8012442:	f7ff ffc3 	bl	80123cc <_Z41__static_initialization_and_destruction_0ii>
 8012446:	bd80      	pop	{r7, pc}

08012448 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	4a05      	ldr	r2, [pc, #20]	; (8012468 <_ZN19FrontendApplicationD1Ev+0x20>)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	601a      	str	r2, [r3, #0]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	4618      	mov	r0, r3
 801245a:	f7fd fb13 	bl	800fa84 <_ZN23FrontendApplicationBaseD1Ev>
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	4618      	mov	r0, r3
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}
 8012468:	080271f4 	.word	0x080271f4

0801246c <_ZN19FrontendApplicationD0Ev>:
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f7ff ffe7 	bl	8012448 <_ZN19FrontendApplicationD1Ev>
 801247a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f013 f849 	bl	8025516 <_ZdlPvj>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	4618      	mov	r0, r3
 8012488:	3708      	adds	r7, #8
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}

0801248e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801248e:	b580      	push	{r7, lr}
 8012490:	b082      	sub	sp, #8
 8012492:	af00      	add	r7, sp, #0
 8012494:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801249c:	4618      	mov	r0, r3
 801249e:	f000 fc39 	bl	8012d14 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4618      	mov	r0, r3
 80124a6:	f006 fcbb 	bl	8018e20 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80124aa:	bf00      	nop
 80124ac:	3708      	adds	r7, #8
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
	...

080124b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b084      	sub	sp, #16
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	68b9      	ldr	r1, [r7, #8]
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7fd fb56 	bl	800fb78 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80124cc:	4a03      	ldr	r2, [pc, #12]	; (80124dc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	601a      	str	r2, [r3, #0]
{
}
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	080271f4 	.word	0x080271f4

080124e0 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80124e0:	b480      	push	{r7}
 80124e2:	b083      	sub	sp, #12
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
    {
    }
 80124e8:	bf00      	nop
 80124ea:	370c      	adds	r7, #12
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr

080124f4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80124f4:	b480      	push	{r7}
 80124f6:	b083      	sub	sp, #12
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
    {
    }
 80124fc:	bf00      	nop
 80124fe:	370c      	adds	r7, #12
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr

08012508 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8012508:	b480      	push	{r7}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
    {
 8012510:	4a04      	ldr	r2, [pc, #16]	; (8012524 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	601a      	str	r2, [r3, #0]
    }
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	4618      	mov	r0, r3
 801251a:	370c      	adds	r7, #12
 801251c:	46bd      	mov	sp, r7
 801251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012522:	4770      	bx	lr
 8012524:	08027280 	.word	0x08027280

08012528 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
    }
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f7ff ffe9 	bl	8012508 <_ZN8touchgfx9PresenterD1Ev>
 8012536:	2104      	movs	r1, #4
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f012 ffec 	bl	8025516 <_ZdlPvj>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	4618      	mov	r0, r3
 8012542:	3708      	adds	r7, #8
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8012548:	b480      	push	{r7}
 801254a:	b083      	sub	sp, #12
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
    {
 8012550:	4a04      	ldr	r2, [pc, #16]	; (8012564 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	601a      	str	r2, [r3, #0]
    }
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	4618      	mov	r0, r3
 801255a:	370c      	adds	r7, #12
 801255c:	46bd      	mov	sp, r7
 801255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012562:	4770      	bx	lr
 8012564:	08027280 	.word	0x08027280

08012568 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012568:	b480      	push	{r7}
 801256a:	b083      	sub	sp, #12
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	4a06      	ldr	r2, [pc, #24]	; (801258c <_ZN13ModelListenerC1Ev+0x24>)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	601a      	str	r2, [r3, #0]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2200      	movs	r2, #0
 801257a:	605a      	str	r2, [r3, #4]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	4618      	mov	r0, r3
 8012580:	370c      	adds	r7, #12
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr
 801258a:	bf00      	nop
 801258c:	08027268 	.word	0x08027268

08012590 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	4a04      	ldr	r2, [pc, #16]	; (80125ac <_ZN13ModelListenerD1Ev+0x1c>)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	601a      	str	r2, [r3, #0]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4618      	mov	r0, r3
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr
 80125ac:	08027268 	.word	0x08027268

080125b0 <_ZN13ModelListenerD0Ev>:
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f7ff ffe9 	bl	8012590 <_ZN13ModelListenerD1Ev>
 80125be:	2108      	movs	r1, #8
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f012 ffa8 	bl	8025516 <_ZdlPvj>
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	4618      	mov	r0, r3
 80125ca:	3708      	adds	r7, #8
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}

080125d0 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 80125d0:	b480      	push	{r7}
 80125d2:	b083      	sub	sp, #12
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
 80125da:	bf00      	nop
 80125dc:	370c      	adds	r7, #12
 80125de:	46bd      	mov	sp, r7
 80125e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e4:	4770      	bx	lr

080125e6 <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 80125e6:	b480      	push	{r7}
 80125e8:	b083      	sub	sp, #12
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	6078      	str	r0, [r7, #4]
 80125ee:	6039      	str	r1, [r7, #0]
 80125f0:	bf00      	nop
 80125f2:	370c      	adds	r7, #12
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr

080125fc <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	4a09      	ldr	r2, [pc, #36]	; (801262c <_ZN13MainPresenterD1Ev+0x30>)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	601a      	str	r2, [r3, #0]
 801260a:	4a09      	ldr	r2, [pc, #36]	; (8012630 <_ZN13MainPresenterD1Ev+0x34>)
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	605a      	str	r2, [r3, #4]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	3304      	adds	r3, #4
 8012614:	4618      	mov	r0, r3
 8012616:	f7ff ffbb 	bl	8012590 <_ZN13ModelListenerD1Ev>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	4618      	mov	r0, r3
 801261e:	f7ff ff73 	bl	8012508 <_ZN8touchgfx9PresenterD1Ev>
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	4618      	mov	r0, r3
 8012626:	3708      	adds	r7, #8
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	08027230 	.word	0x08027230
 8012630:	08027250 	.word	0x08027250

08012634 <_ZThn4_N13MainPresenterD1Ev>:
 8012634:	f1a0 0004 	sub.w	r0, r0, #4
 8012638:	e7e0      	b.n	80125fc <_ZN13MainPresenterD1Ev>
 801263a:	bf00      	nop

0801263c <_ZN13MainPresenterD0Ev>:
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f7ff ffd9 	bl	80125fc <_ZN13MainPresenterD1Ev>
 801264a:	2110      	movs	r1, #16
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f012 ff62 	bl	8025516 <_ZdlPvj>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	4618      	mov	r0, r3
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <_ZThn4_N13MainPresenterD0Ev>:
 801265c:	f1a0 0004 	sub.w	r0, r0, #4
 8012660:	e7ec      	b.n	801263c <_ZN13MainPresenterD0Ev>
	...

08012664 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
    : view(v)
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	f7ff ff69 	bl	8012548 <_ZN8touchgfx9PresenterC1Ev>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	3304      	adds	r3, #4
 801267a:	4618      	mov	r0, r3
 801267c:	f7ff ff74 	bl	8012568 <_ZN13ModelListenerC1Ev>
 8012680:	4a06      	ldr	r2, [pc, #24]	; (801269c <_ZN13MainPresenterC1ER8MainView+0x38>)
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	601a      	str	r2, [r3, #0]
 8012686:	4a06      	ldr	r2, [pc, #24]	; (80126a0 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	605a      	str	r2, [r3, #4]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	683a      	ldr	r2, [r7, #0]
 8012690:	60da      	str	r2, [r3, #12]
{
}
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	4618      	mov	r0, r3
 8012696:	3708      	adds	r7, #8
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	08027230 	.word	0x08027230
 80126a0:	08027250 	.word	0x08027250

080126a4 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80126a4:	b480      	push	{r7}
 80126a6:	b083      	sub	sp, #12
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
}
 80126ac:	bf00      	nop
 80126ae:	370c      	adds	r7, #12
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr

080126b8 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 80126b8:	b480      	push	{r7}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
}
 80126c0:	bf00      	nop
 80126c2:	370c      	adds	r7, #12
 80126c4:	46bd      	mov	sp, r7
 80126c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ca:	4770      	bx	lr

080126cc <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	6839      	ldr	r1, [r7, #0]
 80126dc:	4618      	mov	r0, r3
 80126de:	f000 f9f7 	bl	8012ad0 <_ZN8MainView9updateValEPh>
}
 80126e2:	bf00      	nop
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}

080126ea <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 80126ea:	f1a0 0004 	sub.w	r0, r0, #4
 80126ee:	f7ff bfed 	b.w	80126cc <_ZN13MainPresenter11setNewValueEPh>

080126f2 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 80126f2:	b580      	push	{r7, lr}
 80126f4:	b082      	sub	sp, #8
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
 80126fa:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	68db      	ldr	r3, [r3, #12]
 8012700:	6839      	ldr	r1, [r7, #0]
 8012702:	4618      	mov	r0, r3
 8012704:	f000 f908 	bl	8012918 <_ZN8MainView14updateSettingsEPh>
}
 8012708:	bf00      	nop
 801270a:	3708      	adds	r7, #8
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8012710:	f1a0 0004 	sub.w	r0, r0, #4
 8012714:	f7ff bfed 	b.w	80126f2 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08012718 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8012718:	b480      	push	{r7}
 801271a:	b083      	sub	sp, #12
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2200      	movs	r2, #0
 8012724:	601a      	str	r2, [r3, #0]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4618      	mov	r0, r3
 801272a:	370c      	adds	r7, #12
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr

08012734 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	460b      	mov	r3, r1
 801273e:	607a      	str	r2, [r7, #4]
 8012740:	ed87 0a00 	vstr	s0, [r7]
 8012744:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8012746:	463b      	mov	r3, r7
 8012748:	8979      	ldrh	r1, [r7, #10]
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	68f8      	ldr	r0, [r7, #12]
 801274e:	f009 f8cf 	bl	801b8f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8012752:	4603      	mov	r3, r0
    }
 8012754:	4618      	mov	r0, r3
 8012756:	3710      	adds	r7, #16
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 801275c:	b480      	push	{r7}
 801275e:	b083      	sub	sp, #12
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
        return rect.width;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 801276a:	4618      	mov	r0, r3
 801276c:	370c      	adds	r7, #12
 801276e:	46bd      	mov	sp, r7
 8012770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012774:	4770      	bx	lr

08012776 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8012776:	b480      	push	{r7}
 8012778:	b083      	sub	sp, #12
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
        return rect.height;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012784:	4618      	mov	r0, r3
 8012786:	370c      	adds	r7, #12
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr

08012790 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	4a05      	ldr	r2, [pc, #20]	; (80127b0 <_ZN8MainViewD1Ev+0x20>)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	601a      	str	r2, [r3, #0]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7fe f963 	bl	8010a6c <_ZN12MainViewBaseD1Ev>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	4618      	mov	r0, r3
 80127aa:	3708      	adds	r7, #8
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	08027298 	.word	0x08027298

080127b4 <_ZN8MainViewD0Ev>:
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7ff ffe7 	bl	8012790 <_ZN8MainViewD1Ev>
 80127c2:	f242 6118 	movw	r1, #9752	; 0x2618
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f012 fea5 	bl	8025516 <_ZdlPvj>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	4618      	mov	r0, r3
 80127d0:	3708      	adds	r7, #8
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
	...

080127d8 <_ZN8MainViewC1Ev>:
#include <touchgfx/Color.hpp>

static int color_index = 0;
static int rev_limit = 9000;

MainView::MainView()
 80127d8:	b590      	push	{r4, r7, lr}
 80127da:	b083      	sub	sp, #12
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7fe fa64 	bl	8010cb0 <_ZN12MainViewBaseC1Ev>
 80127e8:	4a15      	ldr	r2, [pc, #84]	; (8012840 <_ZN8MainViewC1Ev+0x68>)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80127ee:	4b15      	ldr	r3, [pc, #84]	; (8012844 <_ZN8MainViewC1Ev+0x6c>)
 80127f0:	881b      	ldrh	r3, [r3, #0]
 80127f2:	461c      	mov	r4, r3
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7ff ffae 	bl	801275c <_ZNK8touchgfx8Drawable8getWidthEv>
 8012800:	4603      	mov	r3, r0
 8012802:	429c      	cmp	r4, r3
 8012804:	dc0b      	bgt.n	801281e <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8012806:	4b10      	ldr	r3, [pc, #64]	; (8012848 <_ZN8MainViewC1Ev+0x70>)
 8012808:	881b      	ldrh	r3, [r3, #0]
 801280a:	461c      	mov	r4, r3
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012812:	4618      	mov	r0, r3
 8012814:	f7ff ffaf 	bl	8012776 <_ZNK8touchgfx8Drawable9getHeightEv>
 8012818:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 801281a:	429c      	cmp	r4, r3
 801281c:	dd01      	ble.n	8012822 <_ZN8MainViewC1Ev+0x4a>
 801281e:	2301      	movs	r3, #1
 8012820:	e000      	b.n	8012824 <_ZN8MainViewC1Ev+0x4c>
 8012822:	2300      	movs	r3, #0
 8012824:	2b00      	cmp	r3, #0
 8012826:	d005      	beq.n	8012834 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	3340      	adds	r3, #64	; 0x40
 801282c:	2101      	movs	r1, #1
 801282e:	4618      	mov	r0, r3
 8012830:	f7fd fd5a 	bl	80102e8 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	4618      	mov	r0, r3
 8012838:	370c      	adds	r7, #12
 801283a:	46bd      	mov	sp, r7
 801283c:	bd90      	pop	{r4, r7, pc}
 801283e:	bf00      	nop
 8012840:	08027298 	.word	0x08027298
 8012844:	2000bb84 	.word	0x2000bb84
 8012848:	2000bb86 	.word	0x2000bb86

0801284c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
}
 8012854:	bf00      	nop
 8012856:	370c      	adds	r7, #12
 8012858:	46bd      	mov	sp, r7
 801285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285e:	4770      	bx	lr

08012860 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8012860:	b480      	push	{r7}
 8012862:	b083      	sub	sp, #12
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
}
 8012868:	bf00      	nop
 801286a:	370c      	adds	r7, #12
 801286c:	46bd      	mov	sp, r7
 801286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012872:	4770      	bx	lr

08012874 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 801287a:	2200      	movs	r2, #0
 801287c:	2100      	movs	r1, #0
 801287e:	2000      	movs	r0, #0
 8012880:	f7fe f9ec 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012884:	4603      	mov	r3, r0
 8012886:	607b      	str	r3, [r7, #4]
	return black_color;
 8012888:	687b      	ldr	r3, [r7, #4]
}
 801288a:	4618      	mov	r0, r3
 801288c:	3708      	adds	r7, #8
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
	...

08012894 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0

	color_index ++;
 801289a:	4b1e      	ldr	r3, [pc, #120]	; (8012914 <_ZL20getColorFromRevLimitv+0x80>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	3301      	adds	r3, #1
 80128a0:	4a1c      	ldr	r2, [pc, #112]	; (8012914 <_ZL20getColorFromRevLimitv+0x80>)
 80128a2:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 80128a4:	4b1b      	ldr	r3, [pc, #108]	; (8012914 <_ZL20getColorFromRevLimitv+0x80>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	2b02      	cmp	r3, #2
 80128aa:	dd02      	ble.n	80128b2 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 80128ac:	4b19      	ldr	r3, [pc, #100]	; (8012914 <_ZL20getColorFromRevLimitv+0x80>)
 80128ae:	2200      	movs	r2, #0
 80128b0:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 80128b2:	2200      	movs	r2, #0
 80128b4:	2100      	movs	r1, #0
 80128b6:	20ff      	movs	r0, #255	; 0xff
 80128b8:	f7fe f9d0 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80128bc:	4603      	mov	r3, r0
 80128be:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 80128c0:	2200      	movs	r2, #0
 80128c2:	2100      	movs	r1, #0
 80128c4:	2000      	movs	r0, #0
 80128c6:	f7fe f9c9 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80128ca:	4603      	mov	r3, r0
 80128cc:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 80128ce:	22ff      	movs	r2, #255	; 0xff
 80128d0:	21ff      	movs	r1, #255	; 0xff
 80128d2:	20ff      	movs	r0, #255	; 0xff
 80128d4:	f7fe f9c2 	bl	8010c5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80128d8:	4603      	mov	r3, r0
 80128da:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 80128dc:	463b      	mov	r3, r7
 80128de:	4618      	mov	r0, r3
 80128e0:	f7ff ff1a 	bl	8012718 <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 80128e4:	4b0b      	ldr	r3, [pc, #44]	; (8012914 <_ZL20getColorFromRevLimitv+0x80>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d101      	bne.n	80128f0 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 80128f0:	4b08      	ldr	r3, [pc, #32]	; (8012914 <_ZL20getColorFromRevLimitv+0x80>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	2b01      	cmp	r3, #1
 80128f6:	d101      	bne.n	80128fc <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 80128fc:	4b05      	ldr	r3, [pc, #20]	; (8012914 <_ZL20getColorFromRevLimitv+0x80>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2b02      	cmp	r3, #2
 8012902:	d101      	bne.n	8012908 <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8012908:	683b      	ldr	r3, [r7, #0]
}
 801290a:	4618      	mov	r0, r3
 801290c:	3710      	adds	r7, #16
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	2000865c 	.word	0x2000865c

08012918 <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b086      	sub	sp, #24
 801291c:	af02      	add	r7, sp, #8
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpmLimit;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	4a66      	ldr	r2, [pc, #408]	; (8012ac4 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 801292c:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f503 60f6 	add.w	r0, r3, #1968	; 0x7b0
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	6a1b      	ldr	r3, [r3, #32]
 8012938:	ee07 3a90 	vmov	s15, r3
 801293c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012940:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8012ac8 <_ZN8MainView14updateSettingsEPh+0x1b0>
 8012944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801294c:	ee17 3a90 	vmov	r3, s15
 8012950:	b21a      	sxth	r2, r3
 8012952:	2300      	movs	r3, #0
 8012954:	9300      	str	r3, [sp, #0]
 8012956:	2300      	movs	r3, #0
 8012958:	2100      	movs	r1, #0
 801295a:	f002 fc0d 	bl	8015178 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012964:	4618      	mov	r0, r3
 8012966:	f006 ff97 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f503 6019 	add.w	r0, r3, #2448	; 0x990
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	4a55      	ldr	r2, [pc, #340]	; (8012acc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012976:	2102      	movs	r1, #2
 8012978:	f008 fe60 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012982:	4618      	mov	r0, r3
 8012984:	f004 fb50 	bl	8017028 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801298e:	4618      	mov	r0, r3
 8012990:	f006 ff82 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f603 1094 	addw	r0, r3, #2452	; 0x994
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	689b      	ldr	r3, [r3, #8]
 801299e:	4a4b      	ldr	r2, [pc, #300]	; (8012acc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80129a0:	2102      	movs	r1, #2
 80129a2:	f008 fe4b 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80129ac:	4618      	mov	r0, r3
 80129ae:	f004 fb3b 	bl	8017028 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80129b8:	4618      	mov	r0, r3
 80129ba:	f006 ff6d 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	f603 1098 	addw	r0, r3, #2456	; 0x998
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	4a40      	ldr	r2, [pc, #256]	; (8012acc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80129ca:	2102      	movs	r1, #2
 80129cc:	f008 fe36 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80129d6:	4618      	mov	r0, r3
 80129d8:	f004 fb26 	bl	8017028 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80129e2:	4618      	mov	r0, r3
 80129e4:	f006 ff58 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f603 109c 	addw	r0, r3, #2460	; 0x99c
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	691b      	ldr	r3, [r3, #16]
 80129f2:	4a36      	ldr	r2, [pc, #216]	; (8012acc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80129f4:	2102      	movs	r1, #2
 80129f6:	f008 fe21 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012a00:	4618      	mov	r0, r3
 8012a02:	f004 fb11 	bl	8017028 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f006 ff43 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f503 601a 	add.w	r0, r3, #2464	; 0x9a0
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	695b      	ldr	r3, [r3, #20]
 8012a1c:	4a2b      	ldr	r2, [pc, #172]	; (8012acc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012a1e:	2102      	movs	r1, #2
 8012a20:	f008 fe0c 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f004 fafc 	bl	8017028 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012a36:	4618      	mov	r0, r3
 8012a38:	f006 ff2e 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f603 10a4 	addw	r0, r3, #2468	; 0x9a4
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	699b      	ldr	r3, [r3, #24]
 8012a46:	4a21      	ldr	r2, [pc, #132]	; (8012acc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012a48:	2102      	movs	r1, #2
 8012a4a:	f008 fdf7 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012a54:	4618      	mov	r0, r3
 8012a56:	f004 fae7 	bl	8017028 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012a60:	4618      	mov	r0, r3
 8012a62:	f006 ff19 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f603 10a8 	addw	r0, r3, #2472	; 0x9a8
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	69db      	ldr	r3, [r3, #28]
 8012a70:	4a16      	ldr	r2, [pc, #88]	; (8012acc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012a72:	2102      	movs	r1, #2
 8012a74:	f008 fde2 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f004 fad2 	bl	8017028 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f006 ff04 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	f603 10ac 	addw	r0, r3, #2476	; 0x9ac
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	6a1b      	ldr	r3, [r3, #32]
 8012a9a:	4a0c      	ldr	r2, [pc, #48]	; (8012acc <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012a9c:	2102      	movs	r1, #2
 8012a9e:	f008 fdcd 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f004 fabd 	bl	8017028 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f006 feef 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8012aba:	bf00      	nop
 8012abc:	3710      	adds	r7, #16
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	20000048 	.word	0x20000048
 8012ac8:	447a0000 	.word	0x447a0000
 8012acc:	08026bd8 	.word	0x08026bd8

08012ad0 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8012ad0:	b590      	push	{r4, r7, lr}
 8012ad2:	b085      	sub	sp, #20
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	681a      	ldr	r2, [r3, #0]
 8012ae2:	4b77      	ldr	r3, [pc, #476]	; (8012cc0 <_ZN8MainView9updateValEPh+0x1f0>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	bfac      	ite	ge
 8012aea:	2301      	movge	r3, #1
 8012aec:	2300      	movlt	r3, #0
 8012aee:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8012af0:	7afb      	ldrb	r3, [r7, #11]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d012      	beq.n	8012b1c <_ZN8MainView9updateValEPh+0x4c>
	{
		background_is_black = false;
 8012af6:	4b73      	ldr	r3, [pc, #460]	; (8012cc4 <_ZN8MainView9updateValEPh+0x1f4>)
 8012af8:	2200      	movs	r2, #0
 8012afa:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012b02:	f7ff fec7 	bl	8012894 <_ZL20getColorFromRevLimitv>
 8012b06:	4603      	mov	r3, r0
 8012b08:	4619      	mov	r1, r3
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	f7fd fd88 	bl	8010620 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	3340      	adds	r3, #64	; 0x40
 8012b14:	4618      	mov	r0, r3
 8012b16:	f006 febf 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012b1a:	e018      	b.n	8012b4e <_ZN8MainView9updateValEPh+0x7e>
	}
	else if(!background_is_black){
 8012b1c:	4b69      	ldr	r3, [pc, #420]	; (8012cc4 <_ZN8MainView9updateValEPh+0x1f4>)
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	f083 0301 	eor.w	r3, r3, #1
 8012b24:	b2db      	uxtb	r3, r3
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d011      	beq.n	8012b4e <_ZN8MainView9updateValEPh+0x7e>
		backgroundBox.setColor(getBlackColor());
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012b30:	f7ff fea0 	bl	8012874 <_ZL13getBlackColorv>
 8012b34:	4603      	mov	r3, r0
 8012b36:	4619      	mov	r1, r3
 8012b38:	4620      	mov	r0, r4
 8012b3a:	f7fd fd71 	bl	8010620 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	3340      	adds	r3, #64	; 0x40
 8012b42:	4618      	mov	r0, r3
 8012b44:	f006 fea8 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8012b48:	4b5e      	ldr	r3, [pc, #376]	; (8012cc4 <_ZN8MainView9updateValEPh+0x1f4>)
 8012b4a:	2201      	movs	r2, #1
 8012b4c:	701a      	strb	r2, [r3, #0]
	}

	RPMProgressBar.setValue(values->rpm);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f503 62f6 	add.w	r2, r3, #1968	; 0x7b0
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	4619      	mov	r1, r3
 8012b5a:	4610      	mov	r0, r2
 8012b5c:	f002 f9f6 	bl	8014f4c <_ZN8touchgfx13ImageProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012b66:	4618      	mov	r0, r3
 8012b68:	f006 fe96 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f603 10d8 	addw	r0, r3, #2520	; 0x9d8
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	4a54      	ldr	r2, [pc, #336]	; (8012cc8 <_ZN8MainView9updateValEPh+0x1f8>)
 8012b78:	2105      	movs	r1, #5
 8012b7a:	f008 fd5f 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RPMValue.invalidate();
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8012b84:	4618      	mov	r0, r3
 8012b86:	f006 fe87 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f603 10ec 	addw	r0, r3, #2540	; 0x9ec
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	689b      	ldr	r3, [r3, #8]
 8012b94:	4a4c      	ldr	r2, [pc, #304]	; (8012cc8 <_ZN8MainView9updateValEPh+0x1f8>)
 8012b96:	2105      	movs	r1, #5
 8012b98:	f008 fd50 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	MAPValue.invalidate();
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f006 fe78 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f603 10e2 	addw	r0, r3, #2530	; 0x9e2
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	4a45      	ldr	r2, [pc, #276]	; (8012cc8 <_ZN8MainView9updateValEPh+0x1f8>)
 8012bb4:	2105      	movs	r1, #5
 8012bb6:	f008 fd41 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CLTValue.invalidate();
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f006 fe69 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f603 107c 	addw	r0, r3, #2428	; 0x97c
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	edd3 7a03 	vldr	s15, [r3, #12]
 8012bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8012bd6:	4a3d      	ldr	r2, [pc, #244]	; (8012ccc <_ZN8MainView9updateValEPh+0x1fc>)
 8012bd8:	2105      	movs	r1, #5
 8012bda:	f7ff fdab 	bl	8012734 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.invalidate();
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012be4:	4618      	mov	r0, r3
 8012be6:	f006 fe57 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambdaTarget);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f603 1086 	addw	r0, r3, #2438	; 0x986
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8012bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8012bfa:	4a34      	ldr	r2, [pc, #208]	; (8012ccc <_ZN8MainView9updateValEPh+0x1fc>)
 8012bfc:	2105      	movs	r1, #5
 8012bfe:	f7ff fd99 	bl	8012734 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.invalidate();
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f006 fe45 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(OilPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oilPressure);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f603 10ba 	addw	r0, r3, #2490	; 0x9ba
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	edd3 7a07 	vldr	s15, [r3, #28]
 8012c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8012c1e:	4a2c      	ldr	r2, [pc, #176]	; (8012cd0 <_ZN8MainView9updateValEPh+0x200>)
 8012c20:	2105      	movs	r1, #5
 8012c22:	f7ff fd87 	bl	8012734 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	OilPressureValue.invalidate();
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f006 fe33 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(FuelPressureValueBuffer, FUELPRESSUREVALUE_SIZE, "%.1f",values->fuelPressure);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f603 10c4 	addw	r0, r3, #2500	; 0x9c4
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	edd3 7a08 	vldr	s15, [r3, #32]
 8012c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8012c42:	4a23      	ldr	r2, [pc, #140]	; (8012cd0 <_ZN8MainView9updateValEPh+0x200>)
 8012c44:	2105      	movs	r1, #5
 8012c46:	f7ff fd75 	bl	8012734 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	FuelPressureValue.invalidate();
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8012c50:	4618      	mov	r0, r3
 8012c52:	f006 fe21 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c60:	4a19      	ldr	r2, [pc, #100]	; (8012cc8 <_ZN8MainView9updateValEPh+0x1f8>)
 8012c62:	2105      	movs	r1, #5
 8012c64:	f008 fcea 	bl	801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	IATValue.invalidate();
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f006 fe12 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	TPSProgress.setValue(values->tps);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c7e:	4619      	mov	r1, r3
 8012c80:	4610      	mov	r0, r2
 8012c82:	f002 f813 	bl	8014cac <_ZN8touchgfx11BoxProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f006 fe03 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->battVoltage);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f603 10ce 	addw	r0, r3, #2510	; 0x9ce
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8012c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8012ca2:	4a0a      	ldr	r2, [pc, #40]	; (8012ccc <_ZN8MainView9updateValEPh+0x1fc>)
 8012ca4:	2105      	movs	r1, #5
 8012ca6:	f7ff fd45 	bl	8012734 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	BatteryVoltage.invalidate();
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f006 fdf1 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8012cb6:	bf00      	nop
 8012cb8:	3714      	adds	r7, #20
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd90      	pop	{r4, r7, pc}
 8012cbe:	bf00      	nop
 8012cc0:	20000048 	.word	0x20000048
 8012cc4:	20008660 	.word	0x20008660
 8012cc8:	08026bd8 	.word	0x08026bd8
 8012ccc:	08026bdc 	.word	0x08026bdc
 8012cd0:	08026be4 	.word	0x08026be4

08012cd4 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	2134      	movs	r1, #52	; 0x34
 8012ce6:	2001      	movs	r0, #1
 8012ce8:	f7f9 fd93 	bl	800c812 <xQueueGenericCreate>
 8012cec:	4602      	mov	r2, r0
 8012cee:	4b07      	ldr	r3, [pc, #28]	; (8012d0c <_ZN5ModelC1Ev+0x38>)
 8012cf0:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	2128      	movs	r1, #40	; 0x28
 8012cf6:	2001      	movs	r0, #1
 8012cf8:	f7f9 fd8b 	bl	800c812 <xQueueGenericCreate>
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	4b04      	ldr	r3, [pc, #16]	; (8012d10 <_ZN5ModelC1Ev+0x3c>)
 8012d00:	601a      	str	r2, [r3, #0]
}
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	4618      	mov	r0, r3
 8012d06:	3708      	adds	r7, #8
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}
 8012d0c:	200086c0 	.word	0x200086c0
 8012d10:	200086c4 	.word	0x200086c4

08012d14 <_ZN5Model4tickEv>:

void Model::tick()
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8012d1c:	4b1a      	ldr	r3, [pc, #104]	; (8012d88 <_ZN5Model4tickEv+0x74>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2200      	movs	r2, #0
 8012d22:	491a      	ldr	r1, [pc, #104]	; (8012d8c <_ZN5Model4tickEv+0x78>)
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7fa f805 	bl	800cd34 <xQueueReceive>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	2b01      	cmp	r3, #1
 8012d2e:	bf0c      	ite	eq
 8012d30:	2301      	moveq	r3, #1
 8012d32:	2300      	movne	r3, #0
 8012d34:	b2db      	uxtb	r3, r3
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d009      	beq.n	8012d4e <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681a      	ldr	r2, [r3, #0]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	3308      	adds	r3, #8
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	4910      	ldr	r1, [pc, #64]	; (8012d8c <_ZN5Model4tickEv+0x78>)
 8012d4a:	4610      	mov	r0, r2
 8012d4c:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8012d4e:	4b10      	ldr	r3, [pc, #64]	; (8012d90 <_ZN5Model4tickEv+0x7c>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	2200      	movs	r2, #0
 8012d54:	490f      	ldr	r1, [pc, #60]	; (8012d94 <_ZN5Model4tickEv+0x80>)
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7f9 ffec 	bl	800cd34 <xQueueReceive>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	bf0c      	ite	eq
 8012d62:	2301      	moveq	r3, #1
 8012d64:	2300      	movne	r3, #0
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d009      	beq.n	8012d80 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681a      	ldr	r2, [r3, #0]
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	330c      	adds	r3, #12
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	4906      	ldr	r1, [pc, #24]	; (8012d94 <_ZN5Model4tickEv+0x80>)
 8012d7c:	4610      	mov	r0, r2
 8012d7e:	4798      	blx	r3
	}
}
 8012d80:	bf00      	nop
 8012d82:	3708      	adds	r7, #8
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}
 8012d88:	200086c0 	.word	0x200086c0
 8012d8c:	20008664 	.word	0x20008664
 8012d90:	200086c4 	.word	0x200086c4
 8012d94:	20008698 	.word	0x20008698

08012d98 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8012d98:	b480      	push	{r7}
 8012d9a:	b083      	sub	sp, #12
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
    {
 8012da0:	4a04      	ldr	r2, [pc, #16]	; (8012db4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	601a      	str	r2, [r3, #0]
    }
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	4618      	mov	r0, r3
 8012daa:	370c      	adds	r7, #12
 8012dac:	46bd      	mov	sp, r7
 8012dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db2:	4770      	bx	lr
 8012db4:	080272e4 	.word	0x080272e4

08012db8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
    }
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7ff ffe9 	bl	8012d98 <_ZN8touchgfx15TouchControllerD1Ev>
 8012dc6:	2104      	movs	r1, #4
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f012 fba4 	bl	8025516 <_ZdlPvj>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}

08012dd8 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8012dd8:	b480      	push	{r7}
 8012dda:	b083      	sub	sp, #12
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8012de0:	bf00      	nop
 8012de2:	370c      	adds	r7, #12
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr

08012dec <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012dec:	b480      	push	{r7}
 8012dee:	b085      	sub	sp, #20
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	60f8      	str	r0, [r7, #12]
 8012df4:	60b9      	str	r1, [r7, #8]
 8012df6:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8012df8:	2300      	movs	r3, #0
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3714      	adds	r7, #20
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e04:	4770      	bx	lr
	...

08012e08 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b082      	sub	sp, #8
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	4a05      	ldr	r2, [pc, #20]	; (8012e28 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	601a      	str	r2, [r3, #0]
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7ff ffbd 	bl	8012d98 <_ZN8touchgfx15TouchControllerD1Ev>
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	4618      	mov	r0, r3
 8012e22:	3708      	adds	r7, #8
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	080272cc 	.word	0x080272cc

08012e2c <_ZN20STM32TouchControllerD0Ev>:
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f7ff ffe7 	bl	8012e08 <_ZN20STM32TouchControllerD1Ev>
 8012e3a:	2104      	movs	r1, #4
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f012 fb6a 	bl	8025516 <_ZdlPvj>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	4618      	mov	r0, r3
 8012e46:	3708      	adds	r7, #8
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	4603      	mov	r3, r0
 8012e54:	71fb      	strb	r3, [r7, #7]

}
 8012e56:	bf00      	nop
 8012e58:	370c      	adds	r7, #12
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr

08012e62 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8012e62:	b480      	push	{r7}
 8012e64:	b083      	sub	sp, #12
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	4603      	mov	r3, r0
 8012e6a:	71fb      	strb	r3, [r7, #7]

}
 8012e6c:	bf00      	nop
 8012e6e:	370c      	adds	r7, #12
 8012e70:	46bd      	mov	sp, r7
 8012e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e76:	4770      	bx	lr

08012e78 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b083      	sub	sp, #12
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	4603      	mov	r3, r0
 8012e80:	71fb      	strb	r3, [r7, #7]

}
 8012e82:	bf00      	nop
 8012e84:	370c      	adds	r7, #12
 8012e86:	46bd      	mov	sp, r7
 8012e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8c:	4770      	bx	lr
	...

08012e90 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8012e90:	b480      	push	{r7}
 8012e92:	b083      	sub	sp, #12
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
    {
 8012e98:	4a04      	ldr	r2, [pc, #16]	; (8012eac <_ZN8touchgfx3HALD1Ev+0x1c>)
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	601a      	str	r2, [r3, #0]
    }
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	370c      	adds	r7, #12
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr
 8012eac:	0802809c 	.word	0x0802809c

08012eb0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
    }
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7ff ffe9 	bl	8012e90 <_ZN8touchgfx3HALD1Ev>
 8012ebe:	2178      	movs	r1, #120	; 0x78
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f012 fb28 	bl	8025516 <_ZdlPvj>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	3708      	adds	r7, #8
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}

08012ed0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012ed0:	b480      	push	{r7}
 8012ed2:	b083      	sub	sp, #12
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	460b      	mov	r3, r1
 8012eda:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	78fa      	ldrb	r2, [r7, #3]
 8012ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8012eec:	bf00      	nop
 8012eee:	370c      	adds	r7, #12
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr

08012ef8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	685a      	ldr	r2, [r3, #4]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	685b      	ldr	r3, [r3, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	4610      	mov	r0, r2
 8012f0e:	4798      	blx	r3
 8012f10:	4603      	mov	r3, r0
    }
 8012f12:	4618      	mov	r0, r3
 8012f14:	3708      	adds	r7, #8
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}

08012f1a <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b082      	sub	sp, #8
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f003 f91c 	bl	8016160 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	3390      	adds	r3, #144	; 0x90
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	4798      	blx	r3
    }
 8012f34:	bf00      	nop
 8012f36:	3708      	adds	r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8012f3c:	b480      	push	{r7}
 8012f3e:	b083      	sub	sp, #12
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6039      	str	r1, [r7, #0]
    {
        return false;
 8012f46:	2300      	movs	r3, #0
    }
 8012f48:	4618      	mov	r0, r3
 8012f4a:	370c      	adds	r7, #12
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr

08012f54 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8012f54:	b590      	push	{r4, r7, lr}
 8012f56:	b08b      	sub	sp, #44	; 0x2c
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	60f8      	str	r0, [r7, #12]
 8012f5c:	60b9      	str	r1, [r7, #8]
 8012f5e:	4611      	mov	r1, r2
 8012f60:	461a      	mov	r2, r3
 8012f62:	460b      	mov	r3, r1
 8012f64:	80fb      	strh	r3, [r7, #6]
 8012f66:	4613      	mov	r3, r2
 8012f68:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8012f6a:	f7fc fc3d 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	6813      	ldr	r3, [r2, #0]
 8012f72:	3328      	adds	r3, #40	; 0x28
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	4610      	mov	r0, r2
 8012f78:	4798      	blx	r3
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8012f7e:	8b7b      	ldrh	r3, [r7, #26]
 8012f80:	4a3d      	ldr	r2, [pc, #244]	; (8013078 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8012f82:	8812      	ldrh	r2, [r2, #0]
 8012f84:	fb02 f303 	mul.w	r3, r2, r3
 8012f88:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8012f92:	2300      	movs	r3, #0
 8012f94:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8012f96:	797b      	ldrb	r3, [r7, #5]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d005      	beq.n	8012fa8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8012f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8012fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa6:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8012fa8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d005      	beq.n	8012fbc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8012fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	4413      	add	r3, r2
 8012fb6:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8012fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fba:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8012fbc:	88fb      	ldrh	r3, [r7, #6]
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	2b1f      	cmp	r3, #31
 8012fc2:	d84d      	bhi.n	8013060 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8012fc4:	a201      	add	r2, pc, #4	; (adr r2, 8012fcc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8012fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fca:	bf00      	nop
 8012fcc:	0801304d 	.word	0x0801304d
 8012fd0:	0801304d 	.word	0x0801304d
 8012fd4:	08013061 	.word	0x08013061
 8012fd8:	0801304d 	.word	0x0801304d
 8012fdc:	08013061 	.word	0x08013061
 8012fe0:	08013061 	.word	0x08013061
 8012fe4:	08013061 	.word	0x08013061
 8012fe8:	0801304d 	.word	0x0801304d
 8012fec:	08013061 	.word	0x08013061
 8012ff0:	08013061 	.word	0x08013061
 8012ff4:	08013061 	.word	0x08013061
 8012ff8:	08013061 	.word	0x08013061
 8012ffc:	08013061 	.word	0x08013061
 8013000:	08013061 	.word	0x08013061
 8013004:	08013061 	.word	0x08013061
 8013008:	0801304d 	.word	0x0801304d
 801300c:	08013061 	.word	0x08013061
 8013010:	08013061 	.word	0x08013061
 8013014:	08013061 	.word	0x08013061
 8013018:	08013061 	.word	0x08013061
 801301c:	08013061 	.word	0x08013061
 8013020:	08013061 	.word	0x08013061
 8013024:	08013061 	.word	0x08013061
 8013028:	0801304d 	.word	0x0801304d
 801302c:	08013061 	.word	0x08013061
 8013030:	08013061 	.word	0x08013061
 8013034:	08013061 	.word	0x08013061
 8013038:	08013061 	.word	0x08013061
 801303c:	08013061 	.word	0x08013061
 8013040:	08013061 	.word	0x08013061
 8013044:	08013061 	.word	0x08013061
 8013048:	0801304d 	.word	0x0801304d
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	3374      	adds	r3, #116	; 0x74
 8013052:	681c      	ldr	r4, [r3, #0]
 8013054:	69fb      	ldr	r3, [r7, #28]
 8013056:	6a3a      	ldr	r2, [r7, #32]
 8013058:	68b9      	ldr	r1, [r7, #8]
 801305a:	68f8      	ldr	r0, [r7, #12]
 801305c:	47a0      	blx	r4
            break;
 801305e:	e006      	b.n	801306e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8013060:	4b06      	ldr	r3, [pc, #24]	; (801307c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8013062:	4a07      	ldr	r2, [pc, #28]	; (8013080 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8013064:	f240 3125 	movw	r1, #805	; 0x325
 8013068:	4806      	ldr	r0, [pc, #24]	; (8013084 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 801306a:	f012 fa7f 	bl	802556c <__assert_func>
            break;
        }
    }
 801306e:	bf00      	nop
 8013070:	372c      	adds	r7, #44	; 0x2c
 8013072:	46bd      	mov	sp, r7
 8013074:	bd90      	pop	{r4, r7, pc}
 8013076:	bf00      	nop
 8013078:	2000bb8c 	.word	0x2000bb8c
 801307c:	08026bec 	.word	0x08026bec
 8013080:	080273f8 	.word	0x080273f8
 8013084:	08026c0c 	.word	0x08026c0c

08013088 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
 8013094:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d106      	bne.n	80130aa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 801309c:	4b11      	ldr	r3, [pc, #68]	; (80130e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801309e:	4a12      	ldr	r2, [pc, #72]	; (80130e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80130a0:	f240 3137 	movw	r1, #823	; 0x337
 80130a4:	4811      	ldr	r0, [pc, #68]	; (80130ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80130a6:	f012 fa61 	bl	802556c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	68ba      	ldr	r2, [r7, #8]
 80130ae:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	683a      	ldr	r2, [r7, #0]
 80130ba:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	bf14      	ite	ne
 80130c2:	2301      	movne	r3, #1
 80130c4:	2300      	moveq	r3, #0
 80130c6:	b2da      	uxtb	r2, r3
 80130c8:	4b09      	ldr	r3, [pc, #36]	; (80130f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80130ca:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	bf14      	ite	ne
 80130d2:	2301      	movne	r3, #1
 80130d4:	2300      	moveq	r3, #0
 80130d6:	b2da      	uxtb	r2, r3
 80130d8:	4b06      	ldr	r3, [pc, #24]	; (80130f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80130da:	701a      	strb	r2, [r3, #0]
    }
 80130dc:	bf00      	nop
 80130de:	3710      	adds	r7, #16
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	08026c50 	.word	0x08026c50
 80130e8:	080273a8 	.word	0x080273a8
 80130ec:	08026c0c 	.word	0x08026c0c
 80130f0:	2000bb8e 	.word	0x2000bb8e
 80130f4:	2000bb8f 	.word	0x2000bb8f

080130f8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	460b      	mov	r3, r1
 8013102:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013108:	2b00      	cmp	r3, #0
 801310a:	d004      	beq.n	8013116 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013110:	887a      	ldrh	r2, [r7, #2]
 8013112:	4610      	mov	r0, r2
 8013114:	4798      	blx	r3
        }
    }
 8013116:	bf00      	nop
 8013118:	3708      	adds	r7, #8
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}

0801311e <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801311e:	b580      	push	{r7, lr}
 8013120:	b082      	sub	sp, #8
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	685a      	ldr	r2, [r3, #4]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	3318      	adds	r3, #24
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	4610      	mov	r0, r2
 8013136:	4798      	blx	r3
 8013138:	4603      	mov	r3, r0
    }
 801313a:	4618      	mov	r0, r3
 801313c:	3708      	adds	r7, #8
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
	...

08013144 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8013144:	b480      	push	{r7}
 8013146:	b083      	sub	sp, #12
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013158:	429a      	cmp	r2, r3
 801315a:	d017      	beq.n	801318c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 801315c:	4b1a      	ldr	r3, [pc, #104]	; (80131c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d12a      	bne.n	80131ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013164:	4b19      	ldr	r3, [pc, #100]	; (80131cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013166:	881a      	ldrh	r2, [r3, #0]
 8013168:	4b19      	ldr	r3, [pc, #100]	; (80131d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801316a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801316c:	4b19      	ldr	r3, [pc, #100]	; (80131d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801316e:	881a      	ldrh	r2, [r3, #0]
 8013170:	4b19      	ldr	r3, [pc, #100]	; (80131d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013172:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013174:	4b16      	ldr	r3, [pc, #88]	; (80131d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013176:	881a      	ldrh	r2, [r3, #0]
 8013178:	4b16      	ldr	r3, [pc, #88]	; (80131d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801317a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 801317c:	4b16      	ldr	r3, [pc, #88]	; (80131d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801317e:	881a      	ldrh	r2, [r3, #0]
 8013180:	4b12      	ldr	r3, [pc, #72]	; (80131cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013182:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013184:	4b10      	ldr	r3, [pc, #64]	; (80131c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013186:	2201      	movs	r2, #1
 8013188:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801318a:	e016      	b.n	80131ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 801318c:	4b0e      	ldr	r3, [pc, #56]	; (80131c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d012      	beq.n	80131ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013194:	4b0f      	ldr	r3, [pc, #60]	; (80131d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013196:	881a      	ldrh	r2, [r3, #0]
 8013198:	4b0d      	ldr	r3, [pc, #52]	; (80131d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801319a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 801319c:	4b0b      	ldr	r3, [pc, #44]	; (80131cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801319e:	881a      	ldrh	r2, [r3, #0]
 80131a0:	4b0d      	ldr	r3, [pc, #52]	; (80131d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80131a2:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80131a4:	4b0c      	ldr	r3, [pc, #48]	; (80131d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80131a6:	881a      	ldrh	r2, [r3, #0]
 80131a8:	4b0a      	ldr	r3, [pc, #40]	; (80131d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80131aa:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80131ac:	4b08      	ldr	r3, [pc, #32]	; (80131d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80131ae:	881a      	ldrh	r2, [r3, #0]
 80131b0:	4b06      	ldr	r3, [pc, #24]	; (80131cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80131b2:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80131b4:	4b04      	ldr	r3, [pc, #16]	; (80131c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80131b6:	2200      	movs	r2, #0
 80131b8:	701a      	strb	r2, [r3, #0]
    }
 80131ba:	bf00      	nop
 80131bc:	370c      	adds	r7, #12
 80131be:	46bd      	mov	sp, r7
 80131c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c4:	4770      	bx	lr
 80131c6:	bf00      	nop
 80131c8:	2000bb88 	.word	0x2000bb88
 80131cc:	2000bb84 	.word	0x2000bb84
 80131d0:	2000bb8a 	.word	0x2000bb8a
 80131d4:	2000bb86 	.word	0x2000bb86
 80131d8:	2000bb8c 	.word	0x2000bb8c

080131dc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	4618      	mov	r0, r3
 80131e8:	f002 fa3c 	bl	8015664 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80131ec:	bf00      	nop
 80131ee:	3708      	adds	r7, #8
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
 80131fc:	4a05      	ldr	r2, [pc, #20]	; (8013214 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	601a      	str	r2, [r3, #0]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	4618      	mov	r0, r3
 8013206:	f7ff fe43 	bl	8012e90 <_ZN8touchgfx3HALD1Ev>
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	4618      	mov	r0, r3
 801320e:	3708      	adds	r7, #8
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	080275d0 	.word	0x080275d0

08013218 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013218:	b580      	push	{r7, lr}
 801321a:	b082      	sub	sp, #8
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f7ff ffe7 	bl	80131f4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013226:	2178      	movs	r1, #120	; 0x78
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f012 f974 	bl	8025516 <_ZdlPvj>
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	4618      	mov	r0, r3
 8013232:	3708      	adds	r7, #8
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013238:	b580      	push	{r7, lr}
 801323a:	b082      	sub	sp, #8
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	4618      	mov	r0, r3
 8013244:	f7ff ffca 	bl	80131dc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013248:	bf00      	nop
 801324a:	3708      	adds	r7, #8
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	4618      	mov	r0, r3
 801325c:	f001 fb0a 	bl	8014874 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013260:	bf00      	nop
 8013262:	3708      	adds	r7, #8
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}

08013268 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b082      	sub	sp, #8
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	4618      	mov	r0, r3
 8013274:	f001 fb8a 	bl	801498c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013278:	4603      	mov	r3, r0
}
 801327a:	4618      	mov	r0, r3
 801327c:	3708      	adds	r7, #8
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}

08013282 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8013282:	b580      	push	{r7, lr}
 8013284:	b082      	sub	sp, #8
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
 801328a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6839      	ldr	r1, [r7, #0]
 8013290:	4618      	mov	r0, r3
 8013292:	f001 fb89 	bl	80149a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8013296:	bf00      	nop
 8013298:	3708      	adds	r7, #8
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}

0801329e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801329e:	b580      	push	{r7, lr}
 80132a0:	b082      	sub	sp, #8
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
 80132a6:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6839      	ldr	r1, [r7, #0]
 80132ac:	4618      	mov	r0, r3
 80132ae:	f001 fb91 	bl	80149d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80132b2:	bf00      	nop
 80132b4:	3708      	adds	r7, #8
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}

080132ba <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80132ba:	b580      	push	{r7, lr}
 80132bc:	b082      	sub	sp, #8
 80132be:	af00      	add	r7, sp, #0
 80132c0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	4618      	mov	r0, r3
 80132c6:	f001 fb07 	bl	80148d8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80132ca:	bf00      	nop
 80132cc:	3708      	adds	r7, #8
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}

080132d2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80132d2:	b580      	push	{r7, lr}
 80132d4:	b082      	sub	sp, #8
 80132d6:	af00      	add	r7, sp, #0
 80132d8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	4618      	mov	r0, r3
 80132de:	f001 fb0b 	bl	80148f8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80132e2:	bf00      	nop
 80132e4:	3708      	adds	r7, #8
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}

080132ea <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80132ea:	b580      	push	{r7, lr}
 80132ec:	b082      	sub	sp, #8
 80132ee:	af00      	add	r7, sp, #0
 80132f0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	4618      	mov	r0, r3
 80132f6:	f001 fb0d 	bl	8014914 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80132fa:	bf00      	nop
 80132fc:	3708      	adds	r7, #8
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}

08013302 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8013302:	b580      	push	{r7, lr}
 8013304:	b082      	sub	sp, #8
 8013306:	af00      	add	r7, sp, #0
 8013308:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	4618      	mov	r0, r3
 801330e:	f001 fb0f 	bl	8014930 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013312:	bf00      	nop
 8013314:	3708      	adds	r7, #8
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
	...

0801331c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	4a05      	ldr	r2, [pc, #20]	; (801333c <_ZN11TouchGFXHALD1Ev+0x20>)
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	601a      	str	r2, [r3, #0]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	4618      	mov	r0, r3
 801332e:	f7ff ff61 	bl	80131f4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	4618      	mov	r0, r3
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	080272fc 	.word	0x080272fc

08013340 <_ZN11TouchGFXHALD0Ev>:
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f7ff ffe7 	bl	801331c <_ZN11TouchGFXHALD1Ev>
 801334e:	2178      	movs	r1, #120	; 0x78
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f012 f8e0 	bl	8025516 <_ZdlPvj>
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	4618      	mov	r0, r3
 801335a:	3708      	adds	r7, #8
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013360:	b580      	push	{r7, lr}
 8013362:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8013364:	2203      	movs	r2, #3
 8013366:	2100      	movs	r1, #0
 8013368:	2001      	movs	r0, #1
 801336a:	f7f9 fa52 	bl	800c812 <xQueueGenericCreate>
 801336e:	4602      	mov	r2, r0
 8013370:	4b0b      	ldr	r3, [pc, #44]	; (80133a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013372:	601a      	str	r2, [r3, #0]
 8013374:	4b0a      	ldr	r3, [pc, #40]	; (80133a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d006      	beq.n	801338a <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 801337c:	4b08      	ldr	r3, [pc, #32]	; (80133a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801337e:	6818      	ldr	r0, [r3, #0]
 8013380:	2300      	movs	r3, #0
 8013382:	2200      	movs	r2, #0
 8013384:	2100      	movs	r1, #0
 8013386:	f7f9 faa5 	bl	800c8d4 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 801338a:	2200      	movs	r2, #0
 801338c:	2101      	movs	r1, #1
 801338e:	2001      	movs	r0, #1
 8013390:	f7f9 fa3f 	bl	800c812 <xQueueGenericCreate>
 8013394:	4602      	mov	r2, r0
 8013396:	4b03      	ldr	r3, [pc, #12]	; (80133a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8013398:	601a      	str	r2, [r3, #0]
}
 801339a:	bf00      	nop
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	200086c8 	.word	0x200086c8
 80133a4:	200086cc 	.word	0x200086cc

080133a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 80133ac:	4b04      	ldr	r3, [pc, #16]	; (80133c0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	f04f 31ff 	mov.w	r1, #4294967295
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7f9 fd9f 	bl	800cef8 <xQueueSemaphoreTake>
}
 80133ba:	bf00      	nop
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	200086c8 	.word	0x200086c8

080133c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80133c8:	4b04      	ldr	r3, [pc, #16]	; (80133dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80133ca:	6818      	ldr	r0, [r3, #0]
 80133cc:	2300      	movs	r3, #0
 80133ce:	2200      	movs	r2, #0
 80133d0:	2100      	movs	r1, #0
 80133d2:	f7f9 fa7f 	bl	800c8d4 <xQueueGenericSend>
}
 80133d6:	bf00      	nop
 80133d8:	bd80      	pop	{r7, pc}
 80133da:	bf00      	nop
 80133dc:	200086c8 	.word	0x200086c8

080133e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80133e4:	4b03      	ldr	r3, [pc, #12]	; (80133f4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2100      	movs	r1, #0
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7f9 fd84 	bl	800cef8 <xQueueSemaphoreTake>
}
 80133f0:	bf00      	nop
 80133f2:	bd80      	pop	{r7, pc}
 80133f4:	200086c8 	.word	0x200086c8

080133f8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80133fe:	2300      	movs	r3, #0
 8013400:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8013402:	4b0b      	ldr	r3, [pc, #44]	; (8013430 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	1d3a      	adds	r2, r7, #4
 8013408:	4611      	mov	r1, r2
 801340a:	4618      	mov	r0, r3
 801340c:	f7f9 fc00 	bl	800cc10 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d007      	beq.n	8013426 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8013416:	4b07      	ldr	r3, [pc, #28]	; (8013434 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8013418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801341c:	601a      	str	r2, [r3, #0]
 801341e:	f3bf 8f4f 	dsb	sy
 8013422:	f3bf 8f6f 	isb	sy
}
 8013426:	bf00      	nop
 8013428:	3708      	adds	r7, #8
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
 801342e:	bf00      	nop
 8013430:	200086c8 	.word	0x200086c8
 8013434:	e000ed04 	.word	0xe000ed04

08013438 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
    if (vsync_q)
 801343e:	4b0e      	ldr	r3, [pc, #56]	; (8013478 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d013      	beq.n	801346e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8013446:	2300      	movs	r3, #0
 8013448:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 801344a:	4b0b      	ldr	r3, [pc, #44]	; (8013478 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 801344c:	6818      	ldr	r0, [r3, #0]
 801344e:	1d3a      	adds	r2, r7, #4
 8013450:	2300      	movs	r3, #0
 8013452:	490a      	ldr	r1, [pc, #40]	; (801347c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8013454:	f7f9 fb40 	bl	800cad8 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d007      	beq.n	801346e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 801345e:	4b08      	ldr	r3, [pc, #32]	; (8013480 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8013460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013464:	601a      	str	r2, [r3, #0]
 8013466:	f3bf 8f4f 	dsb	sy
 801346a:	f3bf 8f6f 	isb	sy
    }
}
 801346e:	bf00      	nop
 8013470:	3708      	adds	r7, #8
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
 8013476:	bf00      	nop
 8013478:	200086cc 	.word	0x200086cc
 801347c:	2000004c 	.word	0x2000004c
 8013480:	e000ed04 	.word	0xe000ed04

08013484 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013484:	b580      	push	{r7, lr}
 8013486:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8013488:	4b08      	ldr	r3, [pc, #32]	; (80134ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	2200      	movs	r2, #0
 801348e:	4908      	ldr	r1, [pc, #32]	; (80134b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013490:	4618      	mov	r0, r3
 8013492:	f7f9 fc4f 	bl	800cd34 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8013496:	4b05      	ldr	r3, [pc, #20]	; (80134ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	f04f 32ff 	mov.w	r2, #4294967295
 801349e:	4904      	ldr	r1, [pc, #16]	; (80134b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7f9 fc47 	bl	800cd34 <xQueueReceive>
}
 80134a6:	bf00      	nop
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	200086cc 	.word	0x200086cc
 80134b0:	2000004c 	.word	0x2000004c

080134b4 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	4603      	mov	r3, r0
 80134bc:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 80134be:	88fb      	ldrh	r3, [r7, #6]
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7fa f977 	bl	800d7b4 <vTaskDelay>
}
 80134c6:	bf00      	nop
 80134c8:	3708      	adds	r7, #8
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
	...

080134d0 <__NVIC_EnableIRQ>:
{
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	4603      	mov	r3, r0
 80134d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80134da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	db0d      	blt.n	80134fe <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80134e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80134e6:	b2db      	uxtb	r3, r3
 80134e8:	f003 021f 	and.w	r2, r3, #31
 80134ec:	4907      	ldr	r1, [pc, #28]	; (801350c <__NVIC_EnableIRQ+0x3c>)
 80134ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80134f2:	095b      	lsrs	r3, r3, #5
 80134f4:	2001      	movs	r0, #1
 80134f6:	fa00 f202 	lsl.w	r2, r0, r2
 80134fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80134fe:	bf00      	nop
 8013500:	370c      	adds	r7, #12
 8013502:	46bd      	mov	sp, r7
 8013504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013508:	4770      	bx	lr
 801350a:	bf00      	nop
 801350c:	e000e100 	.word	0xe000e100

08013510 <__NVIC_DisableIRQ>:
{
 8013510:	b480      	push	{r7}
 8013512:	b083      	sub	sp, #12
 8013514:	af00      	add	r7, sp, #0
 8013516:	4603      	mov	r3, r0
 8013518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801351e:	2b00      	cmp	r3, #0
 8013520:	db12      	blt.n	8013548 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013526:	b2db      	uxtb	r3, r3
 8013528:	f003 021f 	and.w	r2, r3, #31
 801352c:	4909      	ldr	r1, [pc, #36]	; (8013554 <__NVIC_DisableIRQ+0x44>)
 801352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013532:	095b      	lsrs	r3, r3, #5
 8013534:	2001      	movs	r0, #1
 8013536:	fa00 f202 	lsl.w	r2, r0, r2
 801353a:	3320      	adds	r3, #32
 801353c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013540:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013544:	f3bf 8f6f 	isb	sy
}
 8013548:	bf00      	nop
 801354a:	370c      	adds	r7, #12
 801354c:	46bd      	mov	sp, r7
 801354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013552:	4770      	bx	lr
 8013554:	e000e100 	.word	0xe000e100

08013558 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8013558:	b480      	push	{r7}
 801355a:	b083      	sub	sp, #12
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
        return color;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	681b      	ldr	r3, [r3, #0]
    }
 8013564:	4618      	mov	r0, r3
 8013566:	370c      	adds	r7, #12
 8013568:	46bd      	mov	sp, r7
 801356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356e:	4770      	bx	lr

08013570 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	b29b      	uxth	r3, r3
    }
 801357e:	4618      	mov	r0, r3
 8013580:	370c      	adds	r7, #12
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr
	...

0801358c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 801358c:	b480      	push	{r7}
 801358e:	b083      	sub	sp, #12
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
    {
 8013594:	4a04      	ldr	r2, [pc, #16]	; (80135a8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	601a      	str	r2, [r3, #0]
    }
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	4618      	mov	r0, r3
 801359e:	370c      	adds	r7, #12
 80135a0:	46bd      	mov	sp, r7
 80135a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a6:	4770      	bx	lr
 80135a8:	080274a4 	.word	0x080274a4

080135ac <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
    }
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f7ff ffe9 	bl	801358c <_ZN8touchgfx9DMA_QueueD1Ev>
 80135ba:	2104      	movs	r1, #4
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f011 ffaa 	bl	8025516 <_ZdlPvj>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	4618      	mov	r0, r3
 80135c6:	3708      	adds	r7, #8
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	3344      	adds	r3, #68	; 0x44
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	4798      	blx	r3
    }
 80135e0:	bf00      	nop
 80135e2:	3708      	adds	r7, #8
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80135e8:	b480      	push	{r7}
 80135ea:	b083      	sub	sp, #12
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80135f0:	2300      	movs	r3, #0
    }
 80135f2:	4618      	mov	r0, r3
 80135f4:	370c      	adds	r7, #12
 80135f6:	46bd      	mov	sp, r7
 80135f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fc:	4770      	bx	lr
	...

08013600 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8013600:	b480      	push	{r7}
 8013602:	b083      	sub	sp, #12
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
    {
 8013608:	4a04      	ldr	r2, [pc, #16]	; (801361c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	601a      	str	r2, [r3, #0]
    }
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	4618      	mov	r0, r3
 8013612:	370c      	adds	r7, #12
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr
 801361c:	080284e0 	.word	0x080284e0

08013620 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
    }
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f7ff ffe9 	bl	8013600 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801362e:	210c      	movs	r1, #12
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f011 ff70 	bl	8025516 <_ZdlPvj>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	4618      	mov	r0, r3
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013640:	b480      	push	{r7}
 8013642:	b083      	sub	sp, #12
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801364a:	4a09      	ldr	r2, [pc, #36]	; (8013670 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	601a      	str	r2, [r3, #0]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	683a      	ldr	r2, [r7, #0]
 8013654:	605a      	str	r2, [r3, #4]
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2200      	movs	r2, #0
 801365a:	721a      	strb	r2, [r3, #8]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2200      	movs	r2, #0
 8013660:	725a      	strb	r2, [r3, #9]
    {
    }
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	4618      	mov	r0, r3
 8013666:	370c      	adds	r7, #12
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr
 8013670:	080284e0 	.word	0x080284e0

08013674 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	685a      	ldr	r2, [r3, #4]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	3314      	adds	r3, #20
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	4610      	mov	r0, r2
 801368c:	4798      	blx	r3
    }
 801368e:	bf00      	nop
 8013690:	3708      	adds	r7, #8
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}

08013696 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8013696:	b580      	push	{r7, lr}
 8013698:	b082      	sub	sp, #8
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	3328      	adds	r3, #40	; 0x28
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	4610      	mov	r0, r2
 80136aa:	4798      	blx	r3
    }
 80136ac:	bf00      	nop
 80136ae:	3708      	adds	r7, #8
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}

080136b4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80136b4:	b480      	push	{r7}
 80136b6:	b085      	sub	sp, #20
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	60b9      	str	r1, [r7, #8]
 80136be:	607a      	str	r2, [r7, #4]
 80136c0:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80136cc:	68ba      	ldr	r2, [r7, #8]
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	430a      	orrs	r2, r1
 80136d4:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136dc:	f023 0107 	bic.w	r1, r3, #7
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	430a      	orrs	r2, r1
 80136e8:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80136f0:	4b06      	ldr	r3, [pc, #24]	; (801370c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80136f2:	4013      	ands	r3, r2
 80136f4:	6839      	ldr	r1, [r7, #0]
 80136f6:	68fa      	ldr	r2, [r7, #12]
 80136f8:	6812      	ldr	r2, [r2, #0]
 80136fa:	430b      	orrs	r3, r1
 80136fc:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80136fe:	2300      	movs	r3, #0
}
 8013700:	4618      	mov	r0, r3
 8013702:	3714      	adds	r7, #20
 8013704:	46bd      	mov	sp, r7
 8013706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370a:	4770      	bx	lr
 801370c:	ffffc000 	.word	0xffffc000

08013710 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013718:	f7fc f85a 	bl	800f7d0 <_ZN8touchgfx3HAL11getInstanceEv>
 801371c:	4603      	mov	r3, r0
 801371e:	4618      	mov	r0, r3
 8013720:	f7ff ffa8 	bl	8013674 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8013724:	bf00      	nop
 8013726:	3708      	adds	r7, #8
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}

0801372c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
    assert(0);
 8013734:	4b02      	ldr	r3, [pc, #8]	; (8013740 <DMA2D_XferErrorCallback+0x14>)
 8013736:	4a03      	ldr	r2, [pc, #12]	; (8013744 <DMA2D_XferErrorCallback+0x18>)
 8013738:	213e      	movs	r1, #62	; 0x3e
 801373a:	4803      	ldr	r0, [pc, #12]	; (8013748 <DMA2D_XferErrorCallback+0x1c>)
 801373c:	f011 ff16 	bl	802556c <__assert_func>
 8013740:	08026c88 	.word	0x08026c88
 8013744:	080274c0 	.word	0x080274c0
 8013748:	08026c8c 	.word	0x08026c8c

0801374c <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	3318      	adds	r3, #24
 8013758:	4618      	mov	r0, r3
 801375a:	f7fe ffdd 	bl	8012718 <_ZN8touchgfx9colortypeC1Ev>
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	4618      	mov	r0, r3
 8013762:	3708      	adds	r7, #8
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8013768:	b5b0      	push	{r4, r5, r7, lr}
 801376a:	b082      	sub	sp, #8
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	330c      	adds	r3, #12
 8013776:	4619      	mov	r1, r3
 8013778:	4610      	mov	r0, r2
 801377a:	f7ff ff61 	bl	8013640 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801377e:	4a0e      	ldr	r2, [pc, #56]	; (80137b8 <_ZN10STM32F7DMAC1Ev+0x50>)
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	601a      	str	r2, [r3, #0]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f103 000c 	add.w	r0, r3, #12
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	3320      	adds	r3, #32
 801378e:	2260      	movs	r2, #96	; 0x60
 8013790:	4619      	mov	r1, r3
 8013792:	f002 fe0b 	bl	80163ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	3320      	adds	r3, #32
 801379a:	245f      	movs	r4, #95	; 0x5f
 801379c:	461d      	mov	r5, r3
 801379e:	2c00      	cmp	r4, #0
 80137a0:	db05      	blt.n	80137ae <_ZN10STM32F7DMAC1Ev+0x46>
 80137a2:	4628      	mov	r0, r5
 80137a4:	f7ff ffd2 	bl	801374c <_ZN8touchgfx6BlitOpC1Ev>
 80137a8:	3520      	adds	r5, #32
 80137aa:	3c01      	subs	r4, #1
 80137ac:	e7f7      	b.n	801379e <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	4618      	mov	r0, r3
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bdb0      	pop	{r4, r5, r7, pc}
 80137b8:	08027454 	.word	0x08027454

080137bc <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	4a0b      	ldr	r2, [pc, #44]	; (80137f4 <_ZN10STM32F7DMAD1Ev+0x38>)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80137ca:	480b      	ldr	r0, [pc, #44]	; (80137f8 <_ZN10STM32F7DMAD1Ev+0x3c>)
 80137cc:	f7f1 fbe2 	bl	8004f94 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80137d0:	205a      	movs	r0, #90	; 0x5a
 80137d2:	f7ff fe9d 	bl	8013510 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	330c      	adds	r3, #12
 80137da:	4618      	mov	r0, r3
 80137dc:	f000 faa0 	bl	8013d20 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7ff ff0c 	bl	8013600 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	4618      	mov	r0, r3
 80137ec:	3708      	adds	r7, #8
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
 80137f2:	bf00      	nop
 80137f4:	08027454 	.word	0x08027454
 80137f8:	2000c414 	.word	0x2000c414

080137fc <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
}
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f7ff ffd9 	bl	80137bc <_ZN10STM32F7DMAD1Ev>
 801380a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f011 fe81 	bl	8025516 <_ZdlPvj>
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	4618      	mov	r0, r3
 8013818:	3708      	adds	r7, #8
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
	...

08013820 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8013828:	4b09      	ldr	r3, [pc, #36]	; (8013850 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801382a:	4a0a      	ldr	r2, [pc, #40]	; (8013854 <_ZN10STM32F7DMA10initializeEv+0x34>)
 801382c:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 801382e:	4808      	ldr	r0, [pc, #32]	; (8013850 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013830:	f7f1 fb66 	bl	8004f00 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013834:	4b06      	ldr	r3, [pc, #24]	; (8013850 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013836:	4a08      	ldr	r2, [pc, #32]	; (8013858 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8013838:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801383a:	4b05      	ldr	r3, [pc, #20]	; (8013850 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801383c:	4a07      	ldr	r2, [pc, #28]	; (801385c <_ZN10STM32F7DMA10initializeEv+0x3c>)
 801383e:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8013840:	205a      	movs	r0, #90	; 0x5a
 8013842:	f7ff fe45 	bl	80134d0 <__NVIC_EnableIRQ>
}
 8013846:	bf00      	nop
 8013848:	3708      	adds	r7, #8
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	2000c414 	.word	0x2000c414
 8013854:	4002b000 	.word	0x4002b000
 8013858:	08013711 	.word	0x08013711
 801385c:	0801372d 	.word	0x0801372d

08013860 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8013860:	b480      	push	{r7}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8013868:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 801386c:	4618      	mov	r0, r3
 801386e:	370c      	adds	r7, #12
 8013870:	46bd      	mov	sp, r7
 8013872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013876:	4770      	bx	lr

08013878 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013878:	b590      	push	{r4, r7, lr}
 801387a:	b08d      	sub	sp, #52	; 0x34
 801387c:	af02      	add	r7, sp, #8
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8013882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013886:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8013888:	2300      	movs	r3, #0
 801388a:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013890:	2b20      	cmp	r3, #32
 8013892:	d007      	beq.n	80138a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	2b40      	cmp	r3, #64	; 0x40
 801389a:	d003      	beq.n	80138a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2b04      	cmp	r3, #4
 80138a2:	d101      	bne.n	80138a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80138a4:	2301      	movs	r3, #1
 80138a6:	e000      	b.n	80138aa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80138a8:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80138aa:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80138b0:	2b80      	cmp	r3, #128	; 0x80
 80138b2:	d004      	beq.n	80138be <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80138bc:	d101      	bne.n	80138c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80138be:	2301      	movs	r3, #1
 80138c0:	e000      	b.n	80138c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80138c2:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80138c4:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80138c6:	f7fb ff8f 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 80138ca:	4602      	mov	r2, r0
 80138cc:	6813      	ldr	r3, [r2, #0]
 80138ce:	3320      	adds	r3, #32
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	4610      	mov	r0, r2
 80138d4:	4798      	blx	r3
 80138d6:	4603      	mov	r3, r0
 80138d8:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	2b40      	cmp	r3, #64	; 0x40
 80138e0:	d01d      	beq.n	801391e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80138e2:	2b40      	cmp	r3, #64	; 0x40
 80138e4:	d804      	bhi.n	80138f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 80138e6:	2b04      	cmp	r3, #4
 80138e8:	d00e      	beq.n	8013908 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80138ea:	2b20      	cmp	r3, #32
 80138ec:	d017      	beq.n	801391e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80138ee:	e019      	b.n	8013924 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 80138f0:	2b80      	cmp	r3, #128	; 0x80
 80138f2:	d003      	beq.n	80138fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 80138f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80138f8:	d003      	beq.n	8013902 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 80138fa:	e013      	b.n	8013924 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80138fc:	230a      	movs	r3, #10
 80138fe:	623b      	str	r3, [r7, #32]
        break;
 8013900:	e01a      	b.n	8013938 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8013902:	2309      	movs	r3, #9
 8013904:	623b      	str	r3, [r7, #32]
        break;
 8013906:	e017      	b.n	8013938 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801390c:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801390e:	7f7b      	ldrb	r3, [r7, #29]
 8013910:	2b10      	cmp	r3, #16
 8013912:	d101      	bne.n	8013918 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8013914:	2302      	movs	r3, #2
 8013916:	e000      	b.n	801391a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8013918:	2301      	movs	r3, #1
 801391a:	623b      	str	r3, [r7, #32]
        break;
 801391c:	e00c      	b.n	8013938 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 801391e:	2300      	movs	r3, #0
 8013920:	623b      	str	r3, [r7, #32]
        break;
 8013922:	e009      	b.n	8013938 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8013924:	2300      	movs	r3, #0
 8013926:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013928:	7f7b      	ldrb	r3, [r7, #29]
 801392a:	2b10      	cmp	r3, #16
 801392c:	d101      	bne.n	8013932 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 801392e:	2302      	movs	r3, #2
 8013930:	e000      	b.n	8013934 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8013932:	2301      	movs	r3, #1
 8013934:	623b      	str	r3, [r7, #32]
        break;
 8013936:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013938:	4a76      	ldr	r2, [pc, #472]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393c:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801393e:	7f7b      	ldrb	r3, [r7, #29]
 8013940:	2b10      	cmp	r3, #16
 8013942:	d101      	bne.n	8013948 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8013944:	2302      	movs	r3, #2
 8013946:	e000      	b.n	801394a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8013948:	2301      	movs	r3, #1
 801394a:	4a72      	ldr	r2, [pc, #456]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801394c:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	8adb      	ldrh	r3, [r3, #22]
 8013952:	461a      	mov	r2, r3
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	8a1b      	ldrh	r3, [r3, #16]
 8013958:	1ad3      	subs	r3, r2, r3
 801395a:	461a      	mov	r2, r3
 801395c:	4b6d      	ldr	r3, [pc, #436]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801395e:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013960:	7f7b      	ldrb	r3, [r7, #29]
 8013962:	2b10      	cmp	r3, #16
 8013964:	d101      	bne.n	801396a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8013966:	2202      	movs	r2, #2
 8013968:	e000      	b.n	801396c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801396a:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	8adb      	ldrh	r3, [r3, #22]
 8013970:	4619      	mov	r1, r3
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	8a1b      	ldrh	r3, [r3, #16]
 8013976:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801397a:	4866      	ldr	r0, [pc, #408]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801397c:	f7ff fe9a 	bl	80136b4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013980:	4a64      	ldr	r2, [pc, #400]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013982:	6a3b      	ldr	r3, [r7, #32]
 8013984:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	8a9b      	ldrh	r3, [r3, #20]
 801398a:	461a      	mov	r2, r3
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	8a1b      	ldrh	r3, [r3, #16]
 8013990:	1ad3      	subs	r3, r2, r3
 8013992:	461a      	mov	r2, r3
 8013994:	4b5f      	ldr	r3, [pc, #380]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013996:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8013998:	7ffb      	ldrb	r3, [r7, #31]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d103      	bne.n	80139a6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 801399e:	7fbb      	ldrb	r3, [r7, #30]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	f000 8082 	beq.w	8013aaa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	7f1b      	ldrb	r3, [r3, #28]
 80139aa:	2bff      	cmp	r3, #255	; 0xff
 80139ac:	d008      	beq.n	80139c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80139ae:	4b59      	ldr	r3, [pc, #356]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80139b0:	2202      	movs	r2, #2
 80139b2:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	7f1b      	ldrb	r3, [r3, #28]
 80139b8:	461a      	mov	r2, r3
 80139ba:	4b56      	ldr	r3, [pc, #344]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80139bc:	635a      	str	r2, [r3, #52]	; 0x34
 80139be:	e002      	b.n	80139c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80139c0:	4b54      	ldr	r3, [pc, #336]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80139c2:	2200      	movs	r2, #0
 80139c4:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80139c6:	7fbb      	ldrb	r3, [r7, #30]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d059      	beq.n	8013a80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 80139cc:	7f7b      	ldrb	r3, [r7, #29]
 80139ce:	2b10      	cmp	r3, #16
 80139d0:	d14a      	bne.n	8013a68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	3318      	adds	r3, #24
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7ff fdca 	bl	8013570 <_ZNK8touchgfx9colortypecvtEv>
 80139dc:	4603      	mov	r3, r0
 80139de:	12db      	asrs	r3, r3, #11
 80139e0:	f003 021f 	and.w	r2, r3, #31
 80139e4:	4613      	mov	r3, r2
 80139e6:	021b      	lsls	r3, r3, #8
 80139e8:	1a9b      	subs	r3, r3, r2
 80139ea:	4a4b      	ldr	r2, [pc, #300]	; (8013b18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80139ec:	fb82 1203 	smull	r1, r2, r2, r3
 80139f0:	441a      	add	r2, r3
 80139f2:	1112      	asrs	r2, r2, #4
 80139f4:	17db      	asrs	r3, r3, #31
 80139f6:	1ad3      	subs	r3, r2, r3
 80139f8:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	3318      	adds	r3, #24
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7ff fdb6 	bl	8013570 <_ZNK8touchgfx9colortypecvtEv>
 8013a04:	4603      	mov	r3, r0
 8013a06:	115b      	asrs	r3, r3, #5
 8013a08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	021b      	lsls	r3, r3, #8
 8013a10:	1a9b      	subs	r3, r3, r2
 8013a12:	4a42      	ldr	r2, [pc, #264]	; (8013b1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013a14:	fb82 1203 	smull	r1, r2, r2, r3
 8013a18:	441a      	add	r2, r3
 8013a1a:	1152      	asrs	r2, r2, #5
 8013a1c:	17db      	asrs	r3, r3, #31
 8013a1e:	1ad3      	subs	r3, r2, r3
 8013a20:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	3318      	adds	r3, #24
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ff fda2 	bl	8013570 <_ZNK8touchgfx9colortypecvtEv>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	f003 021f 	and.w	r2, r3, #31
 8013a32:	4613      	mov	r3, r2
 8013a34:	021b      	lsls	r3, r3, #8
 8013a36:	1a9b      	subs	r3, r3, r2
 8013a38:	4a37      	ldr	r2, [pc, #220]	; (8013b18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013a3a:	fb82 1203 	smull	r1, r2, r2, r3
 8013a3e:	441a      	add	r2, r3
 8013a40:	1112      	asrs	r2, r2, #4
 8013a42:	17db      	asrs	r3, r3, #31
 8013a44:	1ad3      	subs	r3, r2, r3
 8013a46:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	7f1b      	ldrb	r3, [r3, #28]
 8013a4c:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	061a      	lsls	r2, r3, #24
 8013a52:	69bb      	ldr	r3, [r7, #24]
 8013a54:	041b      	lsls	r3, r3, #16
 8013a56:	431a      	orrs	r2, r3
 8013a58:	697b      	ldr	r3, [r7, #20]
 8013a5a:	021b      	lsls	r3, r3, #8
 8013a5c:	431a      	orrs	r2, r3
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	4313      	orrs	r3, r2
 8013a62:	4a2c      	ldr	r2, [pc, #176]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013a64:	6353      	str	r3, [r2, #52]	; 0x34
 8013a66:	e00b      	b.n	8013a80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	3318      	adds	r3, #24
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7ff fd73 	bl	8013558 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013a72:	4602      	mov	r2, r0
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	7f1b      	ldrb	r3, [r3, #28]
 8013a78:	061b      	lsls	r3, r3, #24
 8013a7a:	4313      	orrs	r3, r2
 8013a7c:	4a25      	ldr	r2, [pc, #148]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013a7e:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	8adb      	ldrh	r3, [r3, #22]
 8013a84:	461a      	mov	r2, r3
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	8a1b      	ldrh	r3, [r3, #16]
 8013a8a:	1ad3      	subs	r3, r2, r3
 8013a8c:	461a      	mov	r2, r3
 8013a8e:	4b21      	ldr	r3, [pc, #132]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013a90:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013a92:	7f7b      	ldrb	r3, [r7, #29]
 8013a94:	2b10      	cmp	r3, #16
 8013a96:	d101      	bne.n	8013a9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8013a98:	2302      	movs	r3, #2
 8013a9a:	e000      	b.n	8013a9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	4a1d      	ldr	r2, [pc, #116]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013aa0:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013aa2:	2100      	movs	r1, #0
 8013aa4:	481b      	ldr	r0, [pc, #108]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013aa6:	f7f1 fcf5 	bl	8005494 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8013aaa:	2101      	movs	r1, #1
 8013aac:	4819      	ldr	r0, [pc, #100]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013aae:	f7f1 fcf1 	bl	8005494 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8013ab2:	7ffb      	ldrb	r3, [r7, #31]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d102      	bne.n	8013abe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8013ab8:	7fbb      	ldrb	r3, [r7, #30]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d015      	beq.n	8013aea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013ac2:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013ac8:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013ace:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013ad4:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013ada:	9301      	str	r3, [sp, #4]
 8013adc:	9200      	str	r2, [sp, #0]
 8013ade:	4623      	mov	r3, r4
 8013ae0:	4602      	mov	r2, r0
 8013ae2:	480c      	ldr	r0, [pc, #48]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013ae4:	f7f1 faf9 	bl	80050da <HAL_DMA2D_BlendingStart_IT>
 8013ae8:	e00f      	b.n	8013b0a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013aee:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013af4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013afa:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013b00:	9300      	str	r3, [sp, #0]
 8013b02:	4603      	mov	r3, r0
 8013b04:	4803      	ldr	r0, [pc, #12]	; (8013b14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013b06:	f7f1 fab5 	bl	8005074 <HAL_DMA2D_Start_IT>
    }
}
 8013b0a:	bf00      	nop
 8013b0c:	372c      	adds	r7, #44	; 0x2c
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd90      	pop	{r4, r7, pc}
 8013b12:	bf00      	nop
 8013b14:	2000c414 	.word	0x2000c414
 8013b18:	84210843 	.word	0x84210843
 8013b1c:	82082083 	.word	0x82082083

08013b20 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8013b20:	b590      	push	{r4, r7, lr}
 8013b22:	b08d      	sub	sp, #52	; 0x34
 8013b24:	af02      	add	r7, sp, #8
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013b2a:	f7fb fe5d 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8013b2e:	4602      	mov	r2, r0
 8013b30:	6813      	ldr	r3, [r2, #0]
 8013b32:	3320      	adds	r3, #32
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	4610      	mov	r0, r2
 8013b38:	4798      	blx	r3
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013b3e:	7ffb      	ldrb	r3, [r7, #31]
 8013b40:	2b10      	cmp	r3, #16
 8013b42:	d101      	bne.n	8013b48 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8013b44:	2302      	movs	r3, #2
 8013b46:	e000      	b.n	8013b4a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8013b48:	2301      	movs	r3, #1
 8013b4a:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8013b50:	7ffb      	ldrb	r3, [r7, #31]
 8013b52:	2b10      	cmp	r3, #16
 8013b54:	d149      	bne.n	8013bea <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	3318      	adds	r3, #24
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7ff fd08 	bl	8013570 <_ZNK8touchgfx9colortypecvtEv>
 8013b60:	4603      	mov	r3, r0
 8013b62:	12db      	asrs	r3, r3, #11
 8013b64:	f003 021f 	and.w	r2, r3, #31
 8013b68:	4613      	mov	r3, r2
 8013b6a:	021b      	lsls	r3, r3, #8
 8013b6c:	1a9b      	subs	r3, r3, r2
 8013b6e:	4a69      	ldr	r2, [pc, #420]	; (8013d14 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013b70:	fb82 1203 	smull	r1, r2, r2, r3
 8013b74:	441a      	add	r2, r3
 8013b76:	1112      	asrs	r2, r2, #4
 8013b78:	17db      	asrs	r3, r3, #31
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	3318      	adds	r3, #24
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7ff fcf4 	bl	8013570 <_ZNK8touchgfx9colortypecvtEv>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	115b      	asrs	r3, r3, #5
 8013b8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013b90:	4613      	mov	r3, r2
 8013b92:	021b      	lsls	r3, r3, #8
 8013b94:	1a9b      	subs	r3, r3, r2
 8013b96:	4a60      	ldr	r2, [pc, #384]	; (8013d18 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8013b98:	fb82 1203 	smull	r1, r2, r2, r3
 8013b9c:	441a      	add	r2, r3
 8013b9e:	1152      	asrs	r2, r2, #5
 8013ba0:	17db      	asrs	r3, r3, #31
 8013ba2:	1ad3      	subs	r3, r2, r3
 8013ba4:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	3318      	adds	r3, #24
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7ff fce0 	bl	8013570 <_ZNK8touchgfx9colortypecvtEv>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	f003 021f 	and.w	r2, r3, #31
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	021b      	lsls	r3, r3, #8
 8013bba:	1a9b      	subs	r3, r3, r2
 8013bbc:	4a55      	ldr	r2, [pc, #340]	; (8013d14 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8013bc2:	441a      	add	r2, r3
 8013bc4:	1112      	asrs	r2, r2, #4
 8013bc6:	17db      	asrs	r3, r3, #31
 8013bc8:	1ad3      	subs	r3, r2, r3
 8013bca:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	7f1b      	ldrb	r3, [r3, #28]
 8013bd0:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	061a      	lsls	r2, r3, #24
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	041b      	lsls	r3, r3, #16
 8013bda:	431a      	orrs	r2, r3
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	021b      	lsls	r3, r3, #8
 8013be0:	4313      	orrs	r3, r2
 8013be2:	68fa      	ldr	r2, [r7, #12]
 8013be4:	4313      	orrs	r3, r2
 8013be6:	623b      	str	r3, [r7, #32]
 8013be8:	e00b      	b.n	8013c02 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	7f1b      	ldrb	r3, [r3, #28]
 8013bee:	061b      	lsls	r3, r3, #24
 8013bf0:	461c      	mov	r4, r3
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	3318      	adds	r3, #24
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7ff fcae 	bl	8013558 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	4323      	orrs	r3, r4
 8013c00:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	2b08      	cmp	r3, #8
 8013c08:	d103      	bne.n	8013c12 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013c0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013c10:	e003      	b.n	8013c1a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8013c12:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8013c16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013c18:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013c1a:	4a40      	ldr	r2, [pc, #256]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1e:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013c20:	7ffb      	ldrb	r3, [r7, #31]
 8013c22:	2b10      	cmp	r3, #16
 8013c24:	d101      	bne.n	8013c2a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8013c26:	2302      	movs	r3, #2
 8013c28:	e000      	b.n	8013c2c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8013c2a:	2301      	movs	r3, #1
 8013c2c:	4a3b      	ldr	r2, [pc, #236]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013c2e:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	8adb      	ldrh	r3, [r3, #22]
 8013c34:	461a      	mov	r2, r3
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	8a1b      	ldrh	r3, [r3, #16]
 8013c3a:	1ad3      	subs	r3, r2, r3
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	4b37      	ldr	r3, [pc, #220]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013c40:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013c42:	7ffb      	ldrb	r3, [r7, #31]
 8013c44:	2b10      	cmp	r3, #16
 8013c46:	d101      	bne.n	8013c4c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8013c48:	2202      	movs	r2, #2
 8013c4a:	e000      	b.n	8013c4e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8013c4c:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	8adb      	ldrh	r3, [r3, #22]
 8013c52:	4619      	mov	r1, r3
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	8a1b      	ldrh	r3, [r3, #16]
 8013c58:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c5c:	482f      	ldr	r0, [pc, #188]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013c5e:	f7ff fd29 	bl	80136b4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8013c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013c68:	d11e      	bne.n	8013ca8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8013c6a:	4b2c      	ldr	r3, [pc, #176]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8013c70:	4a2a      	ldr	r2, [pc, #168]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013c72:	6a3b      	ldr	r3, [r7, #32]
 8013c74:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8013c76:	4b29      	ldr	r3, [pc, #164]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013c78:	2209      	movs	r2, #9
 8013c7a:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	8adb      	ldrh	r3, [r3, #22]
 8013c80:	461a      	mov	r2, r3
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	8a1b      	ldrh	r3, [r3, #16]
 8013c86:	1ad3      	subs	r3, r2, r3
 8013c88:	461a      	mov	r2, r3
 8013c8a:	4b24      	ldr	r3, [pc, #144]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013c8c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013c8e:	7ffb      	ldrb	r3, [r7, #31]
 8013c90:	2b10      	cmp	r3, #16
 8013c92:	d101      	bne.n	8013c98 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8013c94:	2302      	movs	r3, #2
 8013c96:	e000      	b.n	8013c9a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8013c98:	2301      	movs	r3, #1
 8013c9a:	4a20      	ldr	r2, [pc, #128]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013c9c:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013c9e:	2100      	movs	r1, #0
 8013ca0:	481e      	ldr	r0, [pc, #120]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013ca2:	f7f1 fbf7 	bl	8005494 <HAL_DMA2D_ConfigLayer>
 8013ca6:	e005      	b.n	8013cb4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013ca8:	4a1c      	ldr	r2, [pc, #112]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8013cae:	4b1b      	ldr	r3, [pc, #108]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8013cb4:	2101      	movs	r1, #1
 8013cb6:	4819      	ldr	r0, [pc, #100]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013cb8:	f7f1 fbec 	bl	8005494 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8013cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013cc2:	d115      	bne.n	8013cf0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013cc8:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013cce:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013cd4:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013cda:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013ce0:	9301      	str	r3, [sp, #4]
 8013ce2:	9200      	str	r2, [sp, #0]
 8013ce4:	4623      	mov	r3, r4
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	480c      	ldr	r0, [pc, #48]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013cea:	f7f1 f9f6 	bl	80050da <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8013cee:	e00d      	b.n	8013d0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	68db      	ldr	r3, [r3, #12]
 8013cf4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013cfa:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013d00:	9300      	str	r3, [sp, #0]
 8013d02:	460b      	mov	r3, r1
 8013d04:	6a39      	ldr	r1, [r7, #32]
 8013d06:	4805      	ldr	r0, [pc, #20]	; (8013d1c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013d08:	f7f1 f9b4 	bl	8005074 <HAL_DMA2D_Start_IT>
}
 8013d0c:	bf00      	nop
 8013d0e:	372c      	adds	r7, #44	; 0x2c
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd90      	pop	{r4, r7, pc}
 8013d14:	84210843 	.word	0x84210843
 8013d18:	82082083 	.word	0x82082083
 8013d1c:	2000c414 	.word	0x2000c414

08013d20 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b082      	sub	sp, #8
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
 8013d28:	4a05      	ldr	r2, [pc, #20]	; (8013d40 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	601a      	str	r2, [r3, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7ff fc2b 	bl	801358c <_ZN8touchgfx9DMA_QueueD1Ev>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3708      	adds	r7, #8
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	08028530 	.word	0x08028530

08013d44 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f7ff ffe7 	bl	8013d20 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013d52:	2114      	movs	r1, #20
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f011 fbde 	bl	8025516 <_ZdlPvj>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}

08013d64 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8013d64:	b480      	push	{r7}
 8013d66:	b083      	sub	sp, #12
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
        texts = t;
 8013d6c:	4a04      	ldr	r2, [pc, #16]	; (8013d80 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6013      	str	r3, [r2, #0]
    }
 8013d72:	bf00      	nop
 8013d74:	370c      	adds	r7, #12
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop
 8013d80:	2000bc2c 	.word	0x2000bc2c

08013d84 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013d84:	b480      	push	{r7}
 8013d86:	b085      	sub	sp, #20
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	60b9      	str	r1, [r7, #8]
 8013d8e:	607a      	str	r2, [r7, #4]
 8013d90:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8013d92:	4a0b      	ldr	r2, [pc, #44]	; (8013dc0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	601a      	str	r2, [r3, #0]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	68ba      	ldr	r2, [r7, #8]
 8013d9c:	605a      	str	r2, [r3, #4]
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	609a      	str	r2, [r3, #8]
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	683a      	ldr	r2, [r7, #0]
 8013da8:	60da      	str	r2, [r3, #12]
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	69ba      	ldr	r2, [r7, #24]
 8013dae:	611a      	str	r2, [r3, #16]
    {
    }
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	4618      	mov	r0, r3
 8013db4:	3714      	adds	r7, #20
 8013db6:	46bd      	mov	sp, r7
 8013db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbc:	4770      	bx	lr
 8013dbe:	bf00      	nop
 8013dc0:	080275c0 	.word	0x080275c0

08013dc4 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8013dc4:	b480      	push	{r7}
 8013dc6:	b083      	sub	sp, #12
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
    {
 8013dcc:	4a04      	ldr	r2, [pc, #16]	; (8013de0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	601a      	str	r2, [r3, #0]
    }
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	370c      	adds	r7, #12
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dde:	4770      	bx	lr
 8013de0:	080275c0 	.word	0x080275c0

08013de4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b082      	sub	sp, #8
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
    }
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f7ff ffe9 	bl	8013dc4 <_ZN8touchgfx7MVPHeapD1Ev>
 8013df2:	2114      	movs	r1, #20
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f011 fb8e 	bl	8025516 <_ZdlPvj>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3708      	adds	r7, #8
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}

08013e04 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8013e04:	b480      	push	{r7}
 8013e06:	b083      	sub	sp, #12
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
    {
 8013e0c:	4a04      	ldr	r2, [pc, #16]	; (8013e20 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	601a      	str	r2, [r3, #0]
    }
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	4618      	mov	r0, r3
 8013e16:	370c      	adds	r7, #12
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr
 8013e20:	08028e14 	.word	0x08028e14

08013e24 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
    }
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f7ff ffe9 	bl	8013e04 <_ZN8touchgfx3LCDD1Ev>
 8013e32:	2108      	movs	r1, #8
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f011 fb6e 	bl	8025516 <_ZdlPvj>
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3708      	adds	r7, #8
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8013e44:	b480      	push	{r7}
 8013e46:	b083      	sub	sp, #12
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	801a      	strh	r2, [r3, #0]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	2200      	movs	r2, #0
 8013e56:	805a      	strh	r2, [r3, #2]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	809a      	strh	r2, [r3, #4]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2200      	movs	r2, #0
 8013e62:	80da      	strh	r2, [r3, #6]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2200      	movs	r2, #0
 8013e68:	811a      	strh	r2, [r3, #8]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	815a      	strh	r2, [r3, #10]
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2200      	movs	r2, #0
 8013e74:	819a      	strh	r2, [r3, #12]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	739a      	strb	r2, [r3, #14]
        {
        }
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	4618      	mov	r0, r3
 8013e80:	370c      	adds	r7, #12
 8013e82:	46bd      	mov	sp, r7
 8013e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e88:	4770      	bx	lr

08013e8a <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8013e8a:	b580      	push	{r7, lr}
 8013e8c:	b082      	sub	sp, #8
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	6078      	str	r0, [r7, #4]
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7ff ffd5 	bl	8013e44 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	611a      	str	r2, [r3, #16]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	829a      	strh	r2, [r3, #20]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3708      	adds	r7, #8
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}

08013eb0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b084      	sub	sp, #16
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	60f8      	str	r0, [r7, #12]
 8013eb8:	60b9      	str	r1, [r7, #8]
 8013eba:	607a      	str	r2, [r7, #4]
 8013ebc:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8013ebe:	4a44      	ldr	r2, [pc, #272]	; (8013fd0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	601a      	str	r2, [r3, #0]
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	68ba      	ldr	r2, [r7, #8]
 8013ec8:	605a      	str	r2, [r3, #4]
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	609a      	str	r2, [r3, #8]
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	683a      	ldr	r2, [r7, #0]
 8013ed4:	60da      	str	r2, [r3, #12]
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	611a      	str	r2, [r3, #16]
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	615a      	str	r2, [r3, #20]
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	619a      	str	r2, [r3, #24]
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	331c      	adds	r3, #28
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7ff ffcc 	bl	8013e8a <_ZN8touchgfx8GesturesC1Ev>
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	2200      	movs	r2, #0
 8013efc:	63da      	str	r2, [r3, #60]	; 0x3c
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	2200      	movs	r2, #0
 8013f02:	641a      	str	r2, [r3, #64]	; 0x40
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	2200      	movs	r2, #0
 8013f08:	645a      	str	r2, [r3, #68]	; 0x44
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	2201      	movs	r2, #1
 8013f16:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	2201      	movs	r2, #1
 8013f1e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2200      	movs	r2, #0
 8013f26:	64da      	str	r2, [r3, #76]	; 0x4c
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	3350      	adds	r3, #80	; 0x50
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fc f88a 	bl	8010046 <_ZN8touchgfx4RectC1Ev>
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2201      	movs	r2, #1
 8013f36:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2200      	movs	r2, #0
 8013f46:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	2200      	movs	r2, #0
 8013f56:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2200      	movs	r2, #0
 8013f66:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2200      	movs	r2, #0
 8013f76:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	671a      	str	r2, [r3, #112]	; 0x70
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	2200      	movs	r2, #0
 8013f84:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8013f88:	4a12      	ldr	r2, [pc, #72]	; (8013fd4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8013f8e:	4a12      	ldr	r2, [pc, #72]	; (8013fd8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013f90:	8b3b      	ldrh	r3, [r7, #24]
 8013f92:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8013f94:	4a11      	ldr	r2, [pc, #68]	; (8013fdc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8013f96:	8bbb      	ldrh	r3, [r7, #28]
 8013f98:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8013f9a:	4b11      	ldr	r3, [pc, #68]	; (8013fe0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013fa0:	4b0d      	ldr	r3, [pc, #52]	; (8013fd8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013fa2:	881a      	ldrh	r2, [r3, #0]
 8013fa4:	4b0f      	ldr	r3, [pc, #60]	; (8013fe4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8013fa6:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013fa8:	4b0c      	ldr	r3, [pc, #48]	; (8013fdc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8013faa:	881a      	ldrh	r2, [r3, #0]
 8013fac:	4b0e      	ldr	r3, [pc, #56]	; (8013fe8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8013fae:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013fb0:	8b3a      	ldrh	r2, [r7, #24]
 8013fb2:	8bbb      	ldrh	r3, [r7, #28]
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d301      	bcc.n	8013fbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8013fb8:	2200      	movs	r2, #0
 8013fba:	e000      	b.n	8013fbe <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8013fbc:	2201      	movs	r2, #1
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	0802809c 	.word	0x0802809c
 8013fd4:	2000bb90 	.word	0x2000bb90
 8013fd8:	2000bb84 	.word	0x2000bb84
 8013fdc:	2000bb86 	.word	0x2000bb86
 8013fe0:	2000bb88 	.word	0x2000bb88
 8013fe4:	2000bb8a 	.word	0x2000bb8a
 8013fe8:	2000bb8c 	.word	0x2000bb8c

08013fec <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b082      	sub	sp, #8
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fb fe19 	bl	800fc30 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8013ffe:	bf00      	nop
 8014000:	3708      	adds	r7, #8
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
	...

08014008 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014008:	b580      	push	{r7, lr}
 801400a:	b086      	sub	sp, #24
 801400c:	af02      	add	r7, sp, #8
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	60b9      	str	r1, [r7, #8]
 8014012:	607a      	str	r2, [r7, #4]
 8014014:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014016:	68f8      	ldr	r0, [r7, #12]
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	9300      	str	r3, [sp, #0]
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	687a      	ldr	r2, [r7, #4]
 8014020:	68b9      	ldr	r1, [r7, #8]
 8014022:	f7ff feaf 	bl	8013d84 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014026:	4a04      	ldr	r2, [pc, #16]	; (8014038 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	601a      	str	r2, [r3, #0]
    {

    }
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	4618      	mov	r0, r3
 8014030:	3710      	adds	r7, #16
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	080275ac 	.word	0x080275ac

0801403c <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801403c:	b580      	push	{r7, lr}
 801403e:	af00      	add	r7, sp, #0
 8014040:	4801      	ldr	r0, [pc, #4]	; (8014048 <__tcf_0+0xc>)
 8014042:	f000 f9dd 	bl	8014400 <_ZN12FrontendHeapD1Ev>
 8014046:	bd80      	pop	{r7, pc}
 8014048:	200086d0 	.word	0x200086d0

0801404c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801404c:	b580      	push	{r7, lr}
 801404e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014050:	4b08      	ldr	r3, [pc, #32]	; (8014074 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	f003 0301 	and.w	r3, r3, #1
 8014058:	2b00      	cmp	r3, #0
 801405a:	d108      	bne.n	801406e <_ZN12FrontendHeap11getInstanceEv+0x22>
 801405c:	4806      	ldr	r0, [pc, #24]	; (8014078 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 801405e:	f000 f831 	bl	80140c4 <_ZN12FrontendHeapC1Ev>
 8014062:	4b04      	ldr	r3, [pc, #16]	; (8014074 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014064:	2201      	movs	r2, #1
 8014066:	601a      	str	r2, [r3, #0]
 8014068:	4804      	ldr	r0, [pc, #16]	; (801407c <_ZN12FrontendHeap11getInstanceEv+0x30>)
 801406a:	f011 fa9d 	bl	80255a8 <atexit>
        return instance;
 801406e:	4b02      	ldr	r3, [pc, #8]	; (8014078 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8014070:	4618      	mov	r0, r3
 8014072:	bd80      	pop	{r7, pc}
 8014074:	2000ae84 	.word	0x2000ae84
 8014078:	200086d0 	.word	0x200086d0
 801407c:	0801403d 	.word	0x0801403d

08014080 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8014080:	b580      	push	{r7, lr}
 8014082:	b082      	sub	sp, #8
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	4a05      	ldr	r2, [pc, #20]	; (80140a0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	601a      	str	r2, [r3, #0]
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	4618      	mov	r0, r3
 8014092:	f7ff fe97 	bl	8013dc4 <_ZN8touchgfx7MVPHeapD1Ev>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	4618      	mov	r0, r3
 801409a:	3708      	adds	r7, #8
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	080275ac 	.word	0x080275ac

080140a4 <_ZN16FrontendHeapBaseD0Ev>:
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f7ff ffe7 	bl	8014080 <_ZN16FrontendHeapBaseD1Ev>
 80140b2:	2114      	movs	r1, #20
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f011 fa2e 	bl	8025516 <_ZdlPvj>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	4618      	mov	r0, r3
 80140be:	3708      	adds	r7, #8
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80140c4:	b5b0      	push	{r4, r5, r7, lr}
 80140c6:	b084      	sub	sp, #16
 80140c8:	af02      	add	r7, sp, #8
 80140ca:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f103 0414 	add.w	r4, r3, #20
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f242 624c 	movw	r2, #9804	; 0x264c
 80140e0:	441a      	add	r2, r3
 80140e2:	6879      	ldr	r1, [r7, #4]
 80140e4:	f242 6360 	movw	r3, #9824	; 0x2660
 80140e8:	440b      	add	r3, r1
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	4613      	mov	r3, r2
 80140ee:	462a      	mov	r2, r5
 80140f0:	4621      	mov	r1, r4
 80140f2:	f7ff ff89 	bl	8014008 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80140f6:	4a1a      	ldr	r2, [pc, #104]	; (8014160 <_ZN12FrontendHeapC1Ev+0x9c>)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	601a      	str	r2, [r3, #0]
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	3314      	adds	r3, #20
 8014100:	4618      	mov	r0, r3
 8014102:	f000 f8df 	bl	80142c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	332c      	adds	r3, #44	; 0x2c
 801410a:	4618      	mov	r0, r3
 801410c:	f000 f90e 	bl	801432c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014110:	687a      	ldr	r2, [r7, #4]
 8014112:	f242 634c 	movw	r3, #9804	; 0x264c
 8014116:	4413      	add	r3, r2
 8014118:	4618      	mov	r0, r3
 801411a:	f000 f93d 	bl	8014398 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	f242 6360 	movw	r3, #9824	; 0x2660
 8014124:	4413      	add	r3, r2
 8014126:	687a      	ldr	r2, [r7, #4]
 8014128:	f242 71b0 	movw	r1, #10160	; 0x27b0
 801412c:	4411      	add	r1, r2
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	4618      	mov	r0, r3
 8014132:	f7fe f9bf 	bl	80124b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	f242 73b0 	movw	r3, #10160	; 0x27b0
 801413c:	4413      	add	r3, r2
 801413e:	4618      	mov	r0, r3
 8014140:	f7fe fdc8 	bl	8012cd4 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	687a      	ldr	r2, [r7, #4]
 8014148:	f242 6360 	movw	r3, #9824	; 0x2660
 801414c:	4413      	add	r3, r2
 801414e:	4619      	mov	r1, r3
 8014150:	f7ff ff4c 	bl	8013fec <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	4618      	mov	r0, r3
 8014158:	3708      	adds	r7, #8
 801415a:	46bd      	mov	sp, r7
 801415c:	bdb0      	pop	{r4, r5, r7, pc}
 801415e:	bf00      	nop
 8014160:	080274fc 	.word	0x080274fc

08014164 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8014164:	b580      	push	{r7, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
    {
 801416c:	4a05      	ldr	r2, [pc, #20]	; (8014184 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	601a      	str	r2, [r3, #0]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	4618      	mov	r0, r3
 8014176:	f7ff fe45 	bl	8013e04 <_ZN8touchgfx3LCDD1Ev>
    }
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	4618      	mov	r0, r3
 801417e:	3708      	adds	r7, #8
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}
 8014184:	0802af74 	.word	0x0802af74

08014188 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
    }
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f7ff ffe7 	bl	8014164 <_ZN8touchgfx8LCD24bppD1Ev>
 8014196:	2158      	movs	r1, #88	; 0x58
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f011 f9bc 	bl	8025516 <_ZdlPvj>
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	4618      	mov	r0, r3
 80141a2:	3708      	adds	r7, #8
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd80      	pop	{r7, pc}

080141a8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b086      	sub	sp, #24
 80141ac:	af02      	add	r7, sp, #8
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	60b9      	str	r1, [r7, #8]
 80141b2:	607a      	str	r2, [r7, #4]
 80141b4:	603b      	str	r3, [r7, #0]
 80141b6:	68f8      	ldr	r0, [r7, #12]
 80141b8:	8bbb      	ldrh	r3, [r7, #28]
 80141ba:	9301      	str	r3, [sp, #4]
 80141bc:	8b3b      	ldrh	r3, [r7, #24]
 80141be:	9300      	str	r3, [sp, #0]
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	68b9      	ldr	r1, [r7, #8]
 80141c6:	f7ff fe73 	bl	8013eb0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80141ca:	4a04      	ldr	r2, [pc, #16]	; (80141dc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	601a      	str	r2, [r3, #0]
    }
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	4618      	mov	r0, r3
 80141d4:	3710      	adds	r7, #16
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}
 80141da:	bf00      	nop
 80141dc:	080275d0 	.word	0x080275d0

080141e0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b086      	sub	sp, #24
 80141e4:	af02      	add	r7, sp, #8
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	607a      	str	r2, [r7, #4]
 80141ec:	603b      	str	r3, [r7, #0]
 80141ee:	68f8      	ldr	r0, [r7, #12]
 80141f0:	8bbb      	ldrh	r3, [r7, #28]
 80141f2:	9301      	str	r3, [sp, #4]
 80141f4:	8b3b      	ldrh	r3, [r7, #24]
 80141f6:	9300      	str	r3, [sp, #0]
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	687a      	ldr	r2, [r7, #4]
 80141fc:	68b9      	ldr	r1, [r7, #8]
 80141fe:	f7ff ffd3 	bl	80141a8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014202:	4a04      	ldr	r2, [pc, #16]	; (8014214 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	601a      	str	r2, [r3, #0]
    }
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	4618      	mov	r0, r3
 801420c:	3710      	adds	r7, #16
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	080272fc 	.word	0x080272fc

08014218 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014218:	b480      	push	{r7}
 801421a:	b083      	sub	sp, #12
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	4a04      	ldr	r2, [pc, #16]	; (8014234 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	601a      	str	r2, [r3, #0]
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	4618      	mov	r0, r3
 801422a:	370c      	adds	r7, #12
 801422c:	46bd      	mov	sp, r7
 801422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014232:	4770      	bx	lr
 8014234:	080272e4 	.word	0x080272e4

08014238 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	4618      	mov	r0, r3
 8014244:	f7ff ffe8 	bl	8014218 <_ZN8touchgfx15TouchControllerC1Ev>
 8014248:	4a03      	ldr	r2, [pc, #12]	; (8014258 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	601a      	str	r2, [r3, #0]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	4618      	mov	r0, r3
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}
 8014258:	080272cc 	.word	0x080272cc

0801425c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 801425c:	b590      	push	{r4, r7, lr}
 801425e:	b085      	sub	sp, #20
 8014260:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8014262:	f7fe f803 	bl	801226c <_ZN14BitmapDatabase11getInstanceEv>
 8014266:	4604      	mov	r4, r0
 8014268:	f7fe f80a 	bl	8012280 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801426c:	4603      	mov	r3, r0
 801426e:	4619      	mov	r1, r3
 8014270:	2300      	movs	r3, #0
 8014272:	9300      	str	r3, [sp, #0]
 8014274:	2300      	movs	r3, #0
 8014276:	2200      	movs	r2, #0
 8014278:	4620      	mov	r0, r4
 801427a:	f007 fc11 	bl	801baa0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801427e:	4809      	ldr	r0, [pc, #36]	; (80142a4 <touchgfx_init+0x48>)
 8014280:	f7ff fd70 	bl	8013d64 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014284:	2000      	movs	r0, #0
 8014286:	f7fe f81f 	bl	80122c8 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801428a:	4807      	ldr	r0, [pc, #28]	; (80142a8 <touchgfx_init+0x4c>)
 801428c:	f007 fb56 	bl	801b93c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8014290:	f7ff fedc 	bl	801404c <_ZN12FrontendHeap11getInstanceEv>
 8014294:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8014296:	4805      	ldr	r0, [pc, #20]	; (80142ac <touchgfx_init+0x50>)
 8014298:	f7fe ffda 	bl	8013250 <_ZN11TouchGFXHAL10initializeEv>
}
 801429c:	bf00      	nop
 801429e:	370c      	adds	r7, #12
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd90      	pop	{r4, r7, pc}
 80142a4:	2000bb04 	.word	0x2000bb04
 80142a8:	20000050 	.word	0x20000050
 80142ac:	2000bb08 	.word	0x2000bb08

080142b0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80142b4:	4802      	ldr	r0, [pc, #8]	; (80142c0 <touchgfx_taskEntry+0x10>)
 80142b6:	f001 fa06 	bl	80156c6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80142ba:	bf00      	nop
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	bf00      	nop
 80142c0:	2000bb08 	.word	0x2000bb08

080142c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b082      	sub	sp, #8
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	4618      	mov	r0, r3
 80142d0:	f000 fc76 	bl	8014bc0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80142d4:	4a03      	ldr	r2, [pc, #12]	; (80142e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	601a      	str	r2, [r3, #0]
    {
    }
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	4618      	mov	r0, r3
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	08027578 	.word	0x08027578

080142e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b082      	sub	sp, #8
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
    {
    }
 80142f0:	4a05      	ldr	r2, [pc, #20]	; (8014308 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	601a      	str	r2, [r3, #0]
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	4618      	mov	r0, r3
 80142fa:	f000 fc5f 	bl	8014bbc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	4618      	mov	r0, r3
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	08027578 	.word	0x08027578

0801430c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
    }
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f7ff ffe7 	bl	80142e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801431a:	2118      	movs	r1, #24
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f011 f8fa 	bl	8025516 <_ZdlPvj>
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	4618      	mov	r0, r3
 8014326:	3708      	adds	r7, #8
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	4618      	mov	r0, r3
 8014338:	f000 fc42 	bl	8014bc0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801433c:	4a03      	ldr	r2, [pc, #12]	; (801434c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	601a      	str	r2, [r3, #0]
    }
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	4618      	mov	r0, r3
 8014346:	3708      	adds	r7, #8
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}
 801434c:	08027544 	.word	0x08027544

08014350 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8014350:	b580      	push	{r7, lr}
 8014352:	b082      	sub	sp, #8
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
    }
 8014358:	4a05      	ldr	r2, [pc, #20]	; (8014370 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	601a      	str	r2, [r3, #0]
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	4618      	mov	r0, r3
 8014362:	f000 fc2b 	bl	8014bbc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	4618      	mov	r0, r3
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	08027544 	.word	0x08027544

08014374 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014374:	b580      	push	{r7, lr}
 8014376:	b082      	sub	sp, #8
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
    }
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f7ff ffe7 	bl	8014350 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014382:	f242 6120 	movw	r1, #9760	; 0x2620
 8014386:	6878      	ldr	r0, [r7, #4]
 8014388:	f011 f8c5 	bl	8025516 <_ZdlPvj>
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	4618      	mov	r0, r3
 8014390:	3708      	adds	r7, #8
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
	...

08014398 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8014398:	b580      	push	{r7, lr}
 801439a:	b082      	sub	sp, #8
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	4618      	mov	r0, r3
 80143a4:	f000 fc0c 	bl	8014bc0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80143a8:	4a03      	ldr	r2, [pc, #12]	; (80143b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	601a      	str	r2, [r3, #0]
    }
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	4618      	mov	r0, r3
 80143b2:	3708      	adds	r7, #8
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}
 80143b8:	08027510 	.word	0x08027510

080143bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80143bc:	b580      	push	{r7, lr}
 80143be:	b082      	sub	sp, #8
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
    }
 80143c4:	4a05      	ldr	r2, [pc, #20]	; (80143dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	601a      	str	r2, [r3, #0]
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	4618      	mov	r0, r3
 80143ce:	f000 fbf5 	bl	8014bbc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	4618      	mov	r0, r3
 80143d6:	3708      	adds	r7, #8
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}
 80143dc:	08027510 	.word	0x08027510

080143e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b082      	sub	sp, #8
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
    }
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f7ff ffe7 	bl	80143bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80143ee:	2114      	movs	r1, #20
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f011 f890 	bl	8025516 <_ZdlPvj>
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	4618      	mov	r0, r3
 80143fa:	3708      	adds	r7, #8
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014400:	b580      	push	{r7, lr}
 8014402:	b082      	sub	sp, #8
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
 8014408:	4a11      	ldr	r2, [pc, #68]	; (8014450 <_ZN12FrontendHeapD1Ev+0x50>)
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	601a      	str	r2, [r3, #0]
 801440e:	687a      	ldr	r2, [r7, #4]
 8014410:	f242 6360 	movw	r3, #9824	; 0x2660
 8014414:	4413      	add	r3, r2
 8014416:	4618      	mov	r0, r3
 8014418:	f7fe f816 	bl	8012448 <_ZN19FrontendApplicationD1Ev>
 801441c:	687a      	ldr	r2, [r7, #4]
 801441e:	f242 634c 	movw	r3, #9804	; 0x264c
 8014422:	4413      	add	r3, r2
 8014424:	4618      	mov	r0, r3
 8014426:	f7ff ffc9 	bl	80143bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	332c      	adds	r3, #44	; 0x2c
 801442e:	4618      	mov	r0, r3
 8014430:	f7ff ff8e 	bl	8014350 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	3314      	adds	r3, #20
 8014438:	4618      	mov	r0, r3
 801443a:	f7ff ff55 	bl	80142e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	4618      	mov	r0, r3
 8014442:	f7ff fe1d 	bl	8014080 <_ZN16FrontendHeapBaseD1Ev>
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	4618      	mov	r0, r3
 801444a:	3708      	adds	r7, #8
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}
 8014450:	080274fc 	.word	0x080274fc

08014454 <_ZN12FrontendHeapD0Ev>:
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f7ff ffcf 	bl	8014400 <_ZN12FrontendHeapD1Ev>
 8014462:	f242 71b4 	movw	r1, #10164	; 0x27b4
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f011 f855 	bl	8025516 <_ZdlPvj>
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	4618      	mov	r0, r3
 8014470:	3708      	adds	r7, #8
 8014472:	46bd      	mov	sp, r7
 8014474:	bd80      	pop	{r7, pc}
	...

08014478 <_Z41__static_initialization_and_destruction_0ii>:
 8014478:	b580      	push	{r7, lr}
 801447a:	b084      	sub	sp, #16
 801447c:	af02      	add	r7, sp, #8
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	6039      	str	r1, [r7, #0]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2b01      	cmp	r3, #1
 8014486:	d119      	bne.n	80144bc <_Z41__static_initialization_and_destruction_0ii+0x44>
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801448e:	4293      	cmp	r3, r2
 8014490:	d114      	bne.n	80144bc <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8014492:	4818      	ldr	r0, [pc, #96]	; (80144f4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014494:	f7ff fed0 	bl	8014238 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8014498:	4817      	ldr	r0, [pc, #92]	; (80144f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801449a:	f7ff f965 	bl	8013768 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 801449e:	4817      	ldr	r0, [pc, #92]	; (80144fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80144a0:	f009 fd24 	bl	801deec <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80144a4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80144a8:	9301      	str	r3, [sp, #4]
 80144aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80144ae:	9300      	str	r3, [sp, #0]
 80144b0:	4b10      	ldr	r3, [pc, #64]	; (80144f4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80144b2:	4a12      	ldr	r2, [pc, #72]	; (80144fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80144b4:	4910      	ldr	r1, [pc, #64]	; (80144f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80144b6:	4812      	ldr	r0, [pc, #72]	; (8014500 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80144b8:	f7ff fe92 	bl	80141e0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d113      	bne.n	80144ea <_Z41__static_initialization_and_destruction_0ii+0x72>
 80144c2:	683b      	ldr	r3, [r7, #0]
 80144c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80144c8:	4293      	cmp	r3, r2
 80144ca:	d10e      	bne.n	80144ea <_Z41__static_initialization_and_destruction_0ii+0x72>
 80144cc:	480c      	ldr	r0, [pc, #48]	; (8014500 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80144ce:	f7fe ff25 	bl	801331c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80144d2:	480c      	ldr	r0, [pc, #48]	; (8014504 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80144d4:	f7fa fcb4 	bl	800ee40 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80144d8:	4808      	ldr	r0, [pc, #32]	; (80144fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80144da:	f7ff fe43 	bl	8014164 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80144de:	4806      	ldr	r0, [pc, #24]	; (80144f8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80144e0:	f7ff f96c 	bl	80137bc <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80144e4:	4803      	ldr	r0, [pc, #12]	; (80144f4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80144e6:	f7fe fc8f 	bl	8012e08 <_ZN20STM32TouchControllerD1Ev>
}
 80144ea:	bf00      	nop
 80144ec:	3708      	adds	r7, #8
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	2000ae88 	.word	0x2000ae88
 80144f8:	2000ae8c 	.word	0x2000ae8c
 80144fc:	2000baac 	.word	0x2000baac
 8014500:	2000bb08 	.word	0x2000bb08
 8014504:	20000050 	.word	0x20000050

08014508 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014510:	2301      	movs	r3, #1
    }
 8014512:	4618      	mov	r0, r3
 8014514:	370c      	adds	r7, #12
 8014516:	46bd      	mov	sp, r7
 8014518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451c:	4770      	bx	lr

0801451e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801451e:	b480      	push	{r7}
 8014520:	b083      	sub	sp, #12
 8014522:	af00      	add	r7, sp, #0
 8014524:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014526:	230c      	movs	r3, #12
    }
 8014528:	4618      	mov	r0, r3
 801452a:	370c      	adds	r7, #12
 801452c:	46bd      	mov	sp, r7
 801452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014532:	4770      	bx	lr

08014534 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8014534:	b480      	push	{r7}
 8014536:	b083      	sub	sp, #12
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
 801453c:	460b      	mov	r3, r1
 801453e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014540:	887a      	ldrh	r2, [r7, #2]
 8014542:	4613      	mov	r3, r2
 8014544:	005b      	lsls	r3, r3, #1
 8014546:	4413      	add	r3, r2
 8014548:	009b      	lsls	r3, r3, #2
 801454a:	3308      	adds	r3, #8
 801454c:	687a      	ldr	r2, [r7, #4]
 801454e:	4413      	add	r3, r2
    }
 8014550:	4618      	mov	r0, r3
 8014552:	370c      	adds	r7, #12
 8014554:	46bd      	mov	sp, r7
 8014556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455a:	4770      	bx	lr

0801455c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 801455c:	b480      	push	{r7}
 801455e:	b083      	sub	sp, #12
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
 8014564:	460b      	mov	r3, r1
 8014566:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014568:	887a      	ldrh	r2, [r7, #2]
 801456a:	4613      	mov	r3, r2
 801456c:	005b      	lsls	r3, r3, #1
 801456e:	4413      	add	r3, r2
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	3308      	adds	r3, #8
 8014574:	687a      	ldr	r2, [r7, #4]
 8014576:	4413      	add	r3, r2
    }
 8014578:	4618      	mov	r0, r3
 801457a:	370c      	adds	r7, #12
 801457c:	46bd      	mov	sp, r7
 801457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014582:	4770      	bx	lr

08014584 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014584:	b480      	push	{r7}
 8014586:	b083      	sub	sp, #12
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801458c:	2301      	movs	r3, #1
    }
 801458e:	4618      	mov	r0, r3
 8014590:	370c      	adds	r7, #12
 8014592:	46bd      	mov	sp, r7
 8014594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014598:	4770      	bx	lr

0801459a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801459a:	b480      	push	{r7}
 801459c:	b083      	sub	sp, #12
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80145a2:	f242 6318 	movw	r3, #9752	; 0x2618
    }
 80145a6:	4618      	mov	r0, r3
 80145a8:	370c      	adds	r7, #12
 80145aa:	46bd      	mov	sp, r7
 80145ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b0:	4770      	bx	lr

080145b2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80145b2:	b480      	push	{r7}
 80145b4:	b083      	sub	sp, #12
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	6078      	str	r0, [r7, #4]
 80145ba:	460b      	mov	r3, r1
 80145bc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80145be:	887b      	ldrh	r3, [r7, #2]
 80145c0:	f242 6218 	movw	r2, #9752	; 0x2618
 80145c4:	fb02 f303 	mul.w	r3, r2, r3
 80145c8:	3308      	adds	r3, #8
 80145ca:	687a      	ldr	r2, [r7, #4]
 80145cc:	4413      	add	r3, r2
    }
 80145ce:	4618      	mov	r0, r3
 80145d0:	370c      	adds	r7, #12
 80145d2:	46bd      	mov	sp, r7
 80145d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d8:	4770      	bx	lr

080145da <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80145da:	b480      	push	{r7}
 80145dc:	b083      	sub	sp, #12
 80145de:	af00      	add	r7, sp, #0
 80145e0:	6078      	str	r0, [r7, #4]
 80145e2:	460b      	mov	r3, r1
 80145e4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80145e6:	887b      	ldrh	r3, [r7, #2]
 80145e8:	f242 6218 	movw	r2, #9752	; 0x2618
 80145ec:	fb02 f303 	mul.w	r3, r2, r3
 80145f0:	3308      	adds	r3, #8
 80145f2:	687a      	ldr	r2, [r7, #4]
 80145f4:	4413      	add	r3, r2
    }
 80145f6:	4618      	mov	r0, r3
 80145f8:	370c      	adds	r7, #12
 80145fa:	46bd      	mov	sp, r7
 80145fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014600:	4770      	bx	lr

08014602 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014602:	b480      	push	{r7}
 8014604:	b083      	sub	sp, #12
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801460a:	2301      	movs	r3, #1
    }
 801460c:	4618      	mov	r0, r3
 801460e:	370c      	adds	r7, #12
 8014610:	46bd      	mov	sp, r7
 8014612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014616:	4770      	bx	lr

08014618 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014618:	b480      	push	{r7}
 801461a:	b083      	sub	sp, #12
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014620:	2310      	movs	r3, #16
    }
 8014622:	4618      	mov	r0, r3
 8014624:	370c      	adds	r7, #12
 8014626:	46bd      	mov	sp, r7
 8014628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462c:	4770      	bx	lr

0801462e <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801462e:	b480      	push	{r7}
 8014630:	b083      	sub	sp, #12
 8014632:	af00      	add	r7, sp, #0
 8014634:	6078      	str	r0, [r7, #4]
 8014636:	460b      	mov	r3, r1
 8014638:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801463a:	887b      	ldrh	r3, [r7, #2]
 801463c:	011b      	lsls	r3, r3, #4
 801463e:	3308      	adds	r3, #8
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	4413      	add	r3, r2
    }
 8014644:	4618      	mov	r0, r3
 8014646:	370c      	adds	r7, #12
 8014648:	46bd      	mov	sp, r7
 801464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464e:	4770      	bx	lr

08014650 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014650:	b480      	push	{r7}
 8014652:	b083      	sub	sp, #12
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	460b      	mov	r3, r1
 801465a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801465c:	887b      	ldrh	r3, [r7, #2]
 801465e:	011b      	lsls	r3, r3, #4
 8014660:	3308      	adds	r3, #8
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	4413      	add	r3, r2
    }
 8014666:	4618      	mov	r0, r3
 8014668:	370c      	adds	r7, #12
 801466a:	46bd      	mov	sp, r7
 801466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014670:	4770      	bx	lr

08014672 <_GLOBAL__sub_I_touchgfx_init>:
 8014672:	b580      	push	{r7, lr}
 8014674:	af00      	add	r7, sp, #0
 8014676:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801467a:	2001      	movs	r0, #1
 801467c:	f7ff fefc 	bl	8014478 <_Z41__static_initialization_and_destruction_0ii>
 8014680:	bd80      	pop	{r7, pc}

08014682 <_GLOBAL__sub_D_touchgfx_init>:
 8014682:	b580      	push	{r7, lr}
 8014684:	af00      	add	r7, sp, #0
 8014686:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801468a:	2000      	movs	r0, #0
 801468c:	f7ff fef4 	bl	8014478 <_Z41__static_initialization_and_destruction_0ii>
 8014690:	bd80      	pop	{r7, pc}

08014692 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014692:	b580      	push	{r7, lr}
 8014694:	b082      	sub	sp, #8
 8014696:	af00      	add	r7, sp, #0
 8014698:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	3318      	adds	r3, #24
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	4798      	blx	r3
    }
 80146a6:	bf00      	nop
 80146a8:	3708      	adds	r7, #8
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}

080146ae <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80146ae:	b480      	push	{r7}
 80146b0:	b083      	sub	sp, #12
 80146b2:	af00      	add	r7, sp, #0
 80146b4:	6078      	str	r0, [r7, #4]
 80146b6:	460b      	mov	r3, r1
 80146b8:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	78fa      	ldrb	r2, [r7, #3]
 80146be:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80146c2:	bf00      	nop
 80146c4:	370c      	adds	r7, #12
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr

080146ce <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80146ce:	b480      	push	{r7}
 80146d0:	b083      	sub	sp, #12
 80146d2:	af00      	add	r7, sp, #0
 80146d4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80146dc:	3301      	adds	r3, #1
 80146de:	b2da      	uxtb	r2, r3
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80146e6:	bf00      	nop
 80146e8:	370c      	adds	r7, #12
 80146ea:	46bd      	mov	sp, r7
 80146ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f0:	4770      	bx	lr
	...

080146f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	460b      	mov	r3, r1
 80146fe:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014700:	78fb      	ldrb	r3, [r7, #3]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d002      	beq.n	801470c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014706:	78fb      	ldrb	r3, [r7, #3]
 8014708:	2b02      	cmp	r3, #2
 801470a:	d105      	bne.n	8014718 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	78fa      	ldrb	r2, [r7, #3]
 8014710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014714:	2301      	movs	r3, #1
 8014716:	e027      	b.n	8014768 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014718:	78fb      	ldrb	r3, [r7, #3]
 801471a:	2b01      	cmp	r3, #1
 801471c:	d123      	bne.n	8014766 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014722:	2b00      	cmp	r3, #0
 8014724:	d014      	beq.n	8014750 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	3380      	adds	r3, #128	; 0x80
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	4798      	blx	r3
 8014732:	4603      	mov	r3, r0
 8014734:	461a      	mov	r2, r3
 8014736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801473a:	429a      	cmp	r2, r3
 801473c:	d008      	beq.n	8014750 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801473e:	4b0c      	ldr	r3, [pc, #48]	; (8014770 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	f083 0301 	eor.w	r3, r3, #1
 8014746:	b2db      	uxtb	r3, r3
 8014748:	2b00      	cmp	r3, #0
 801474a:	d001      	beq.n	8014750 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801474c:	2301      	movs	r3, #1
 801474e:	e000      	b.n	8014752 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014750:	2300      	movs	r3, #0
 8014752:	2b00      	cmp	r3, #0
 8014754:	d005      	beq.n	8014762 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	78fa      	ldrb	r2, [r7, #3]
 801475a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801475e:	2301      	movs	r3, #1
 8014760:	e002      	b.n	8014768 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014762:	2300      	movs	r3, #0
 8014764:	e000      	b.n	8014768 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014766:	2300      	movs	r3, #0
    }
 8014768:	4618      	mov	r0, r3
 801476a:	3708      	adds	r7, #8
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	2000bb8e 	.word	0x2000bb8e

08014774 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	683a      	ldr	r2, [r7, #0]
 8014782:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014784:	bf00      	nop
 8014786:	370c      	adds	r7, #12
 8014788:	46bd      	mov	sp, r7
 801478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478e:	4770      	bx	lr

08014790 <__NVIC_EnableIRQ>:
{
 8014790:	b480      	push	{r7}
 8014792:	b083      	sub	sp, #12
 8014794:	af00      	add	r7, sp, #0
 8014796:	4603      	mov	r3, r0
 8014798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	db0d      	blt.n	80147be <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80147a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147a6:	b2db      	uxtb	r3, r3
 80147a8:	f003 021f 	and.w	r2, r3, #31
 80147ac:	4907      	ldr	r1, [pc, #28]	; (80147cc <__NVIC_EnableIRQ+0x3c>)
 80147ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147b2:	095b      	lsrs	r3, r3, #5
 80147b4:	2001      	movs	r0, #1
 80147b6:	fa00 f202 	lsl.w	r2, r0, r2
 80147ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80147be:	bf00      	nop
 80147c0:	370c      	adds	r7, #12
 80147c2:	46bd      	mov	sp, r7
 80147c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c8:	4770      	bx	lr
 80147ca:	bf00      	nop
 80147cc:	e000e100 	.word	0xe000e100

080147d0 <__NVIC_DisableIRQ>:
{
 80147d0:	b480      	push	{r7}
 80147d2:	b083      	sub	sp, #12
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	4603      	mov	r3, r0
 80147d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80147da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	db12      	blt.n	8014808 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80147e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147e6:	b2db      	uxtb	r3, r3
 80147e8:	f003 021f 	and.w	r2, r3, #31
 80147ec:	4909      	ldr	r1, [pc, #36]	; (8014814 <__NVIC_DisableIRQ+0x44>)
 80147ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147f2:	095b      	lsrs	r3, r3, #5
 80147f4:	2001      	movs	r0, #1
 80147f6:	fa00 f202 	lsl.w	r2, r0, r2
 80147fa:	3320      	adds	r3, #32
 80147fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014800:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014804:	f3bf 8f6f 	isb	sy
}
 8014808:	bf00      	nop
 801480a:	370c      	adds	r7, #12
 801480c:	46bd      	mov	sp, r7
 801480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014812:	4770      	bx	lr
 8014814:	e000e100 	.word	0xe000e100

08014818 <__NVIC_SetPriority>:
{
 8014818:	b480      	push	{r7}
 801481a:	b083      	sub	sp, #12
 801481c:	af00      	add	r7, sp, #0
 801481e:	4603      	mov	r3, r0
 8014820:	6039      	str	r1, [r7, #0]
 8014822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014828:	2b00      	cmp	r3, #0
 801482a:	db0c      	blt.n	8014846 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	b2db      	uxtb	r3, r3
 8014830:	4a0e      	ldr	r2, [pc, #56]	; (801486c <__NVIC_SetPriority+0x54>)
 8014832:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014836:	4608      	mov	r0, r1
 8014838:	011b      	lsls	r3, r3, #4
 801483a:	b2d9      	uxtb	r1, r3
 801483c:	1813      	adds	r3, r2, r0
 801483e:	460a      	mov	r2, r1
 8014840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014844:	e00c      	b.n	8014860 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	b2da      	uxtb	r2, r3
 801484a:	4909      	ldr	r1, [pc, #36]	; (8014870 <__NVIC_SetPriority+0x58>)
 801484c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014850:	b2db      	uxtb	r3, r3
 8014852:	f003 030f 	and.w	r3, r3, #15
 8014856:	3b04      	subs	r3, #4
 8014858:	0112      	lsls	r2, r2, #4
 801485a:	b2d2      	uxtb	r2, r2
 801485c:	440b      	add	r3, r1
 801485e:	761a      	strb	r2, [r3, #24]
}
 8014860:	bf00      	nop
 8014862:	370c      	adds	r7, #12
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr
 801486c:	e000e100 	.word	0xe000e100
 8014870:	e000ed00 	.word	0xe000ed00

08014874 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014874:	b5b0      	push	{r4, r5, r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	4618      	mov	r0, r3
 8014880:	f001 f9e6 	bl	8015c50 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8014884:	687d      	ldr	r5, [r7, #4]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	334c      	adds	r3, #76	; 0x4c
 801488c:	681c      	ldr	r4, [r3, #0]
 801488e:	f004 fbad 	bl	8018fec <_ZN8touchgfx11Application11getInstanceEv>
 8014892:	4603      	mov	r3, r0
 8014894:	4619      	mov	r1, r3
 8014896:	4628      	mov	r0, r5
 8014898:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	490d      	ldr	r1, [pc, #52]	; (80148d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 801489e:	4618      	mov	r0, r3
 80148a0:	f7ff ff68 	bl	8014774 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2101      	movs	r1, #1
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7ff ff23 	bl	80146f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	3374      	adds	r3, #116	; 0x74
 80148b6:	681c      	ldr	r4, [r3, #0]
 80148b8:	2300      	movs	r3, #0
 80148ba:	2200      	movs	r2, #0
 80148bc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80148c0:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2101      	movs	r1, #1
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7ff fef1 	bl	80146ae <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80148cc:	bf00      	nop
 80148ce:	3708      	adds	r7, #8
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bdb0      	pop	{r4, r5, r7, pc}
 80148d4:	080134b5 	.word	0x080134b5

080148d8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80148e0:	2109      	movs	r1, #9
 80148e2:	205a      	movs	r0, #90	; 0x5a
 80148e4:	f7ff ff98 	bl	8014818 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80148e8:	2109      	movs	r1, #9
 80148ea:	2058      	movs	r0, #88	; 0x58
 80148ec:	f7ff ff94 	bl	8014818 <__NVIC_SetPriority>
}
 80148f0:	bf00      	nop
 80148f2:	3708      	adds	r7, #8
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b082      	sub	sp, #8
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014900:	205a      	movs	r0, #90	; 0x5a
 8014902:	f7ff ff45 	bl	8014790 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8014906:	2058      	movs	r0, #88	; 0x58
 8014908:	f7ff ff42 	bl	8014790 <__NVIC_EnableIRQ>
}
 801490c:	bf00      	nop
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801491c:	205a      	movs	r0, #90	; 0x5a
 801491e:	f7ff ff57 	bl	80147d0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8014922:	2058      	movs	r0, #88	; 0x58
 8014924:	f7ff ff54 	bl	80147d0 <__NVIC_DisableIRQ>
}
 8014928:	bf00      	nop
 801492a:	3708      	adds	r7, #8
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014930:	b480      	push	{r7}
 8014932:	b083      	sub	sp, #12
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014938:	4b11      	ldr	r3, [pc, #68]	; (8014980 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801493a:	68db      	ldr	r3, [r3, #12]
 801493c:	b29b      	uxth	r3, r3
 801493e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014942:	b29b      	uxth	r3, r3
 8014944:	3b01      	subs	r3, #1
 8014946:	b29a      	uxth	r2, r3
 8014948:	4b0e      	ldr	r3, [pc, #56]	; (8014984 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801494a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801494c:	4b0c      	ldr	r3, [pc, #48]	; (8014980 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801494e:	691b      	ldr	r3, [r3, #16]
 8014950:	b29b      	uxth	r3, r3
 8014952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014956:	b29b      	uxth	r3, r3
 8014958:	3b01      	subs	r3, #1
 801495a:	b29a      	uxth	r2, r3
 801495c:	4b0a      	ldr	r3, [pc, #40]	; (8014988 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801495e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8014960:	4b08      	ldr	r3, [pc, #32]	; (8014984 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014962:	881a      	ldrh	r2, [r3, #0]
 8014964:	4b06      	ldr	r3, [pc, #24]	; (8014980 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014966:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8014968:	4b05      	ldr	r3, [pc, #20]	; (8014980 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801496c:	4a04      	ldr	r2, [pc, #16]	; (8014980 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801496e:	f043 0301 	orr.w	r3, r3, #1
 8014972:	6353      	str	r3, [r2, #52]	; 0x34
}
 8014974:	bf00      	nop
 8014976:	370c      	adds	r7, #12
 8014978:	46bd      	mov	sp, r7
 801497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497e:	4770      	bx	lr
 8014980:	40016800 	.word	0x40016800
 8014984:	2000bb80 	.word	0x2000bb80
 8014988:	2000bb82 	.word	0x2000bb82

0801498c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801498c:	b480      	push	{r7}
 801498e:	b083      	sub	sp, #12
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8014994:	4b03      	ldr	r3, [pc, #12]	; (80149a4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8014996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014998:	4618      	mov	r0, r3
 801499a:	370c      	adds	r7, #12
 801499c:	46bd      	mov	sp, r7
 801499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a2:	4770      	bx	lr
 80149a4:	40016884 	.word	0x40016884

080149a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80149a8:	b480      	push	{r7}
 80149aa:	b083      	sub	sp, #12
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80149b2:	4a06      	ldr	r2, [pc, #24]	; (80149cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80149b8:	4b05      	ldr	r3, [pc, #20]	; (80149d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80149ba:	2201      	movs	r2, #1
 80149bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80149be:	bf00      	nop
 80149c0:	370c      	adds	r7, #12
 80149c2:	46bd      	mov	sp, r7
 80149c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop
 80149cc:	40016884 	.word	0x40016884
 80149d0:	40016800 	.word	0x40016800

080149d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6839      	ldr	r1, [r7, #0]
 80149e2:	4618      	mov	r0, r3
 80149e4:	f000 fe44 	bl	8015670 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80149e8:	bf00      	nop
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80149f0:	b480      	push	{r7}
 80149f2:	b085      	sub	sp, #20
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80149f8:	4b0d      	ldr	r3, [pc, #52]	; (8014a30 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80149fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149fc:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80149fe:	4b0c      	ldr	r3, [pc, #48]	; (8014a30 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014a00:	68db      	ldr	r3, [r3, #12]
 8014a02:	b29b      	uxth	r3, r3
 8014a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8014a0e:	89fa      	ldrh	r2, [r7, #14]
 8014a10:	89bb      	ldrh	r3, [r7, #12]
 8014a12:	429a      	cmp	r2, r3
 8014a14:	d201      	bcs.n	8014a1a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8014a16:	2300      	movs	r3, #0
 8014a18:	e003      	b.n	8014a22 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8014a1a:	89fa      	ldrh	r2, [r7, #14]
 8014a1c:	89bb      	ldrh	r3, [r7, #12]
 8014a1e:	1ad3      	subs	r3, r2, r3
 8014a20:	b29b      	uxth	r3, r3
    }
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3714      	adds	r7, #20
 8014a26:	46bd      	mov	sp, r7
 8014a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2c:	4770      	bx	lr
 8014a2e:	bf00      	nop
 8014a30:	40016800 	.word	0x40016800

08014a34 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8014a3c:	4b1a      	ldr	r3, [pc, #104]	; (8014aa8 <HAL_LTDC_LineEventCallback+0x74>)
 8014a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a40:	4a1a      	ldr	r2, [pc, #104]	; (8014aac <HAL_LTDC_LineEventCallback+0x78>)
 8014a42:	8812      	ldrh	r2, [r2, #0]
 8014a44:	4293      	cmp	r3, r2
 8014a46:	bf0c      	ite	eq
 8014a48:	2301      	moveq	r3, #1
 8014a4a:	2300      	movne	r3, #0
 8014a4c:	b2db      	uxtb	r3, r3
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d017      	beq.n	8014a82 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8014a52:	4b17      	ldr	r3, [pc, #92]	; (8014ab0 <HAL_LTDC_LineEventCallback+0x7c>)
 8014a54:	881b      	ldrh	r3, [r3, #0]
 8014a56:	4619      	mov	r1, r3
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f7f1 f9eb 	bl	8005e34 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8014a5e:	f7fa feb7 	bl	800f7d0 <_ZN8touchgfx3HAL11getInstanceEv>
 8014a62:	4603      	mov	r3, r0
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7ff fe32 	bl	80146ce <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8014a6a:	f7fe fce5 	bl	8013438 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8014a6e:	f7fa feaf 	bl	800f7d0 <_ZN8touchgfx3HAL11getInstanceEv>
 8014a72:	4603      	mov	r3, r0
 8014a74:	4618      	mov	r0, r3
 8014a76:	f001 fb73 	bl	8016160 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	f7fe f9e6 	bl	8012e4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8014a80:	e00e      	b.n	8014aa0 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8014a82:	4b0a      	ldr	r3, [pc, #40]	; (8014aac <HAL_LTDC_LineEventCallback+0x78>)
 8014a84:	881b      	ldrh	r3, [r3, #0]
 8014a86:	4619      	mov	r1, r3
 8014a88:	6878      	ldr	r0, [r7, #4]
 8014a8a:	f7f1 f9d3 	bl	8005e34 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8014a8e:	2000      	movs	r0, #0
 8014a90:	f7fe f9e7 	bl	8012e62 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8014a94:	f7fa fe9c 	bl	800f7d0 <_ZN8touchgfx3HAL11getInstanceEv>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7ff fdf9 	bl	8014692 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8014aa0:	bf00      	nop
 8014aa2:	3708      	adds	r7, #8
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}
 8014aa8:	40016800 	.word	0x40016800
 8014aac:	2000bb80 	.word	0x2000bb80
 8014ab0:	2000bb82 	.word	0x2000bb82

08014ab4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014ab4:	8880      	ldrh	r0, [r0, #4]
 8014ab6:	4770      	bx	lr

08014ab8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014ab8:	2300      	movs	r3, #0
 8014aba:	8083      	strh	r3, [r0, #4]
 8014abc:	4770      	bx	lr
	...

08014ac0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ac2:	6803      	ldr	r3, [r0, #0]
 8014ac4:	460e      	mov	r6, r1
 8014ac6:	2100      	movs	r1, #0
 8014ac8:	4605      	mov	r5, r0
 8014aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014acc:	4798      	blx	r3
 8014ace:	4604      	mov	r4, r0
 8014ad0:	682b      	ldr	r3, [r5, #0]
 8014ad2:	4628      	mov	r0, r5
 8014ad4:	1b34      	subs	r4, r6, r4
 8014ad6:	6a1b      	ldr	r3, [r3, #32]
 8014ad8:	b2a4      	uxth	r4, r4
 8014ada:	4798      	blx	r3
 8014adc:	88ab      	ldrh	r3, [r5, #4]
 8014ade:	fbb4 f4f0 	udiv	r4, r4, r0
 8014ae2:	42a3      	cmp	r3, r4
 8014ae4:	d805      	bhi.n	8014af2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8014ae6:	4b0e      	ldr	r3, [pc, #56]	; (8014b20 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014ae8:	211e      	movs	r1, #30
 8014aea:	4a0e      	ldr	r2, [pc, #56]	; (8014b24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014aec:	480e      	ldr	r0, [pc, #56]	; (8014b28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8014aee:	f010 fd3d 	bl	802556c <__assert_func>
 8014af2:	682b      	ldr	r3, [r5, #0]
 8014af4:	2100      	movs	r1, #0
 8014af6:	4628      	mov	r0, r5
 8014af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014afa:	4798      	blx	r3
 8014afc:	682b      	ldr	r3, [r5, #0]
 8014afe:	4607      	mov	r7, r0
 8014b00:	4628      	mov	r0, r5
 8014b02:	6a1b      	ldr	r3, [r3, #32]
 8014b04:	4798      	blx	r3
 8014b06:	1bf3      	subs	r3, r6, r7
 8014b08:	b29b      	uxth	r3, r3
 8014b0a:	fbb3 f2f0 	udiv	r2, r3, r0
 8014b0e:	fb02 3010 	mls	r0, r2, r0, r3
 8014b12:	b118      	cbz	r0, 8014b1c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8014b14:	4b05      	ldr	r3, [pc, #20]	; (8014b2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8014b16:	211f      	movs	r1, #31
 8014b18:	4a02      	ldr	r2, [pc, #8]	; (8014b24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014b1a:	e7e7      	b.n	8014aec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b20:	0802767c 	.word	0x0802767c
 8014b24:	080277ea 	.word	0x080277ea
 8014b28:	08027691 	.word	0x08027691
 8014b2c:	080276bf 	.word	0x080276bf

08014b30 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014b30:	b538      	push	{r3, r4, r5, lr}
 8014b32:	6803      	ldr	r3, [r0, #0]
 8014b34:	460d      	mov	r5, r1
 8014b36:	4604      	mov	r4, r0
 8014b38:	6a1b      	ldr	r3, [r3, #32]
 8014b3a:	4798      	blx	r3
 8014b3c:	4285      	cmp	r5, r0
 8014b3e:	d905      	bls.n	8014b4c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8014b40:	4b0c      	ldr	r3, [pc, #48]	; (8014b74 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8014b42:	212f      	movs	r1, #47	; 0x2f
 8014b44:	4a0c      	ldr	r2, [pc, #48]	; (8014b78 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014b46:	480d      	ldr	r0, [pc, #52]	; (8014b7c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8014b48:	f010 fd10 	bl	802556c <__assert_func>
 8014b4c:	6823      	ldr	r3, [r4, #0]
 8014b4e:	4620      	mov	r0, r4
 8014b50:	88a5      	ldrh	r5, [r4, #4]
 8014b52:	69db      	ldr	r3, [r3, #28]
 8014b54:	4798      	blx	r3
 8014b56:	4285      	cmp	r5, r0
 8014b58:	d303      	bcc.n	8014b62 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8014b5a:	4b09      	ldr	r3, [pc, #36]	; (8014b80 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8014b5c:	2130      	movs	r1, #48	; 0x30
 8014b5e:	4a06      	ldr	r2, [pc, #24]	; (8014b78 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8014b60:	e7f1      	b.n	8014b46 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8014b62:	6823      	ldr	r3, [r4, #0]
 8014b64:	4620      	mov	r0, r4
 8014b66:	88a1      	ldrh	r1, [r4, #4]
 8014b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b6a:	4798      	blx	r3
 8014b6c:	88a3      	ldrh	r3, [r4, #4]
 8014b6e:	3301      	adds	r3, #1
 8014b70:	80a3      	strh	r3, [r4, #4]
 8014b72:	bd38      	pop	{r3, r4, r5, pc}
 8014b74:	08027739 	.word	0x08027739
 8014b78:	0802782d 	.word	0x0802782d
 8014b7c:	08027691 	.word	0x08027691
 8014b80:	08027750 	.word	0x08027750

08014b84 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014b84:	b570      	push	{r4, r5, r6, lr}
 8014b86:	6803      	ldr	r3, [r0, #0]
 8014b88:	4616      	mov	r6, r2
 8014b8a:	4604      	mov	r4, r0
 8014b8c:	460d      	mov	r5, r1
 8014b8e:	6a1b      	ldr	r3, [r3, #32]
 8014b90:	4798      	blx	r3
 8014b92:	4286      	cmp	r6, r0
 8014b94:	d905      	bls.n	8014ba2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8014b96:	4b06      	ldr	r3, [pc, #24]	; (8014bb0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014b98:	2139      	movs	r1, #57	; 0x39
 8014b9a:	4a06      	ldr	r2, [pc, #24]	; (8014bb4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014b9c:	4806      	ldr	r0, [pc, #24]	; (8014bb8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014b9e:	f010 fce5 	bl	802556c <__assert_func>
 8014ba2:	6823      	ldr	r3, [r4, #0]
 8014ba4:	4629      	mov	r1, r5
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bae:	4718      	bx	r3
 8014bb0:	08027739 	.word	0x08027739
 8014bb4:	080277a0 	.word	0x080277a0
 8014bb8:	08027691 	.word	0x08027691

08014bbc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014bbc:	4770      	bx	lr
	...

08014bc0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014bc0:	4a02      	ldr	r2, [pc, #8]	; (8014bcc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014bc2:	6002      	str	r2, [r0, #0]
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	8082      	strh	r2, [r0, #4]
 8014bc8:	4770      	bx	lr
 8014bca:	bf00      	nop
 8014bcc:	08027774 	.word	0x08027774

08014bd0 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8014bd0:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8014bd4:	4770      	bx	lr

08014bd6 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8014bd6:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8014bda:	4770      	bx	lr

08014bdc <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8014bdc:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8014be0:	4770      	bx	lr

08014be2 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8014be2:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8014be6:	4770      	bx	lr

08014be8 <_ZN8touchgfx11BoxProgressD1Ev>:
 8014be8:	4b03      	ldr	r3, [pc, #12]	; (8014bf8 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8014bea:	b510      	push	{r4, lr}
 8014bec:	4604      	mov	r4, r0
 8014bee:	6003      	str	r3, [r0, #0]
 8014bf0:	f000 f8b6 	bl	8014d60 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014bf4:	4620      	mov	r0, r4
 8014bf6:	bd10      	pop	{r4, pc}
 8014bf8:	08027874 	.word	0x08027874

08014bfc <_ZN8touchgfx11BoxProgressD0Ev>:
 8014bfc:	b510      	push	{r4, lr}
 8014bfe:	4604      	mov	r4, r0
 8014c00:	f7ff fff2 	bl	8014be8 <_ZN8touchgfx11BoxProgressD1Ev>
 8014c04:	21c0      	movs	r1, #192	; 0xc0
 8014c06:	4620      	mov	r0, r4
 8014c08:	f010 fc85 	bl	8025516 <_ZdlPvj>
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	bd10      	pop	{r4, pc}

08014c10 <_ZN8touchgfx11BoxProgressC1Ev>:
 8014c10:	b510      	push	{r4, lr}
 8014c12:	4604      	mov	r4, r0
 8014c14:	f000 f8b8 	bl	8014d88 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014c18:	2201      	movs	r2, #1
 8014c1a:	4b16      	ldr	r3, [pc, #88]	; (8014c74 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8014c1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014c20:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8014c24:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8014c28:	4a13      	ldr	r2, [pc, #76]	; (8014c78 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8014c2a:	6023      	str	r3, [r4, #0]
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8014c32:	22ff      	movs	r2, #255	; 0xff
 8014c34:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8014c38:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8014c3c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8014c40:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8014c44:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8014c48:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8014c4c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8014c50:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8014c54:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8014c58:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8014c5c:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8014c60:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8014c64:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8014c68:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8014c6c:	f000 fbb8 	bl	80153e0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014c70:	4620      	mov	r0, r4
 8014c72:	bd10      	pop	{r4, pc}
 8014c74:	08027874 	.word	0x08027874
 8014c78:	08028b2c 	.word	0x08028b2c

08014c7c <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8014c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014c80:	4617      	mov	r7, r2
 8014c82:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8014c86:	2200      	movs	r2, #0
 8014c88:	4604      	mov	r4, r0
 8014c8a:	460e      	mov	r6, r1
 8014c8c:	4698      	mov	r8, r3
 8014c8e:	4611      	mov	r1, r2
 8014c90:	9500      	str	r5, [sp, #0]
 8014c92:	3090      	adds	r0, #144	; 0x90
 8014c94:	f7fb fa6c 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014c98:	4643      	mov	r3, r8
 8014c9a:	463a      	mov	r2, r7
 8014c9c:	4631      	mov	r1, r6
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	9508      	str	r5, [sp, #32]
 8014ca2:	b002      	add	sp, #8
 8014ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ca8:	f000 b9fa 	b.w	80150a0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08014cac <_ZN8touchgfx11BoxProgress8setValueEi>:
 8014cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014cae:	4604      	mov	r4, r0
 8014cb0:	f000 fa40 	bl	8015134 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014cb4:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8014cb8:	4628      	mov	r0, r5
 8014cba:	f004 fded 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014cbe:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014cc2:	2b03      	cmp	r3, #3
 8014cc4:	d814      	bhi.n	8014cf0 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 8014cc6:	e8df f003 	tbb	[pc, r3]
 8014cca:	0202      	.short	0x0202
 8014ccc:	1010      	.short	0x1010
 8014cce:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8014cd2:	4620      	mov	r0, r4
 8014cd4:	f000 fa88 	bl	80151e8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014cd8:	b200      	sxth	r0, r0
 8014cda:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014cde:	2b03      	cmp	r3, #3
 8014ce0:	d81a      	bhi.n	8014d18 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8014ce2:	e8df f003 	tbb	[pc, r3]
 8014ce6:	0e07      	.short	0x0e07
 8014ce8:	231f      	.short	0x231f
 8014cea:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8014cee:	e7f0      	b.n	8014cd2 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8014cf0:	2000      	movs	r0, #0
 8014cf2:	e7f2      	b.n	8014cda <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8014cf4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014cf8:	9300      	str	r3, [sp, #0]
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	2100      	movs	r1, #0
 8014d00:	e007      	b.n	8014d12 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8014d02:	8921      	ldrh	r1, [r4, #8]
 8014d04:	2200      	movs	r2, #0
 8014d06:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014d0a:	1a09      	subs	r1, r1, r0
 8014d0c:	9300      	str	r3, [sp, #0]
 8014d0e:	4603      	mov	r3, r0
 8014d10:	b209      	sxth	r1, r1
 8014d12:	4628      	mov	r0, r5
 8014d14:	f7fb fa2c 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014d18:	4628      	mov	r0, r5
 8014d1a:	b003      	add	sp, #12
 8014d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d20:	f004 bdba 	b.w	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014d24:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014d28:	9000      	str	r0, [sp, #0]
 8014d2a:	e7e7      	b.n	8014cfc <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8014d2c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014d30:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014d34:	1a12      	subs	r2, r2, r0
 8014d36:	9000      	str	r0, [sp, #0]
 8014d38:	b212      	sxth	r2, r2
 8014d3a:	e7e0      	b.n	8014cfe <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08014d3c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8014d3c:	b570      	push	{r4, r5, r6, lr}
 8014d3e:	6803      	ldr	r3, [r0, #0]
 8014d40:	4604      	mov	r4, r0
 8014d42:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8014d46:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8014d4a:	4798      	blx	r3
 8014d4c:	4601      	mov	r1, r0
 8014d4e:	462b      	mov	r3, r5
 8014d50:	4620      	mov	r0, r4
 8014d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d56:	4718      	bx	r3

08014d58 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8014d58:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8014d5c:	4770      	bx	lr
	...

08014d60 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8014d60:	4b03      	ldr	r3, [pc, #12]	; (8014d70 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8014d62:	b510      	push	{r4, lr}
 8014d64:	4604      	mov	r4, r0
 8014d66:	6003      	str	r3, [r0, #0]
 8014d68:	f000 f999 	bl	801509e <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	bd10      	pop	{r4, pc}
 8014d70:	0802794c 	.word	0x0802794c

08014d74 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8014d74:	b510      	push	{r4, lr}
 8014d76:	4604      	mov	r4, r0
 8014d78:	f7ff fff2 	bl	8014d60 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014d7c:	2190      	movs	r1, #144	; 0x90
 8014d7e:	4620      	mov	r0, r4
 8014d80:	f010 fbc9 	bl	8025516 <_ZdlPvj>
 8014d84:	4620      	mov	r0, r4
 8014d86:	bd10      	pop	{r4, pc}

08014d88 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8014d88:	b510      	push	{r4, lr}
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	f000 fa4c 	bl	8015228 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8014d90:	4b03      	ldr	r3, [pc, #12]	; (8014da0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8014d92:	2100      	movs	r1, #0
 8014d94:	4620      	mov	r0, r4
 8014d96:	6023      	str	r3, [r4, #0]
 8014d98:	f7ff ffd0 	bl	8014d3c <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	bd10      	pop	{r4, pc}
 8014da0:	0802794c 	.word	0x0802794c

08014da4 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8014da4:	b570      	push	{r4, r5, r6, lr}
 8014da6:	6803      	ldr	r3, [r0, #0]
 8014da8:	4604      	mov	r4, r0
 8014daa:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8014dae:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8014db2:	4798      	blx	r3
 8014db4:	4601      	mov	r1, r0
 8014db6:	462b      	mov	r3, r5
 8014db8:	4620      	mov	r0, r4
 8014dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dbe:	4718      	bx	r3

08014dc0 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8014dc0:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8014dc4:	4770      	bx	lr

08014dc6 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8014dc6:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8014dca:	4770      	bx	lr

08014dcc <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8014dcc:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8014dd0:	4770      	bx	lr

08014dd2 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8014dd2:	b507      	push	{r0, r1, r2, lr}
 8014dd4:	ab02      	add	r3, sp, #8
 8014dd6:	30bc      	adds	r0, #188	; 0xbc
 8014dd8:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8014ddc:	4619      	mov	r1, r3
 8014dde:	f002 f9a9 	bl	8017134 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8014de2:	b003      	add	sp, #12
 8014de4:	f85d fb04 	ldr.w	pc, [sp], #4

08014de8 <_ZN8touchgfx13ImageProgressD1Ev>:
 8014de8:	4b03      	ldr	r3, [pc, #12]	; (8014df8 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8014dea:	b510      	push	{r4, lr}
 8014dec:	4604      	mov	r4, r0
 8014dee:	6003      	str	r3, [r0, #0]
 8014df0:	f7ff ffb6 	bl	8014d60 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014df4:	4620      	mov	r0, r4
 8014df6:	bd10      	pop	{r4, pc}
 8014df8:	08027a78 	.word	0x08027a78

08014dfc <_ZN8touchgfx13ImageProgressD0Ev>:
 8014dfc:	b510      	push	{r4, lr}
 8014dfe:	4604      	mov	r4, r0
 8014e00:	f7ff fff2 	bl	8014de8 <_ZN8touchgfx13ImageProgressD1Ev>
 8014e04:	21f0      	movs	r1, #240	; 0xf0
 8014e06:	4620      	mov	r0, r4
 8014e08:	f010 fb85 	bl	8025516 <_ZdlPvj>
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	bd10      	pop	{r4, pc}

08014e10 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8014e10:	b508      	push	{r3, lr}
 8014e12:	4b06      	ldr	r3, [pc, #24]	; (8014e2c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	b92b      	cbnz	r3, 8014e24 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8014e18:	4b05      	ldr	r3, [pc, #20]	; (8014e30 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8014e1a:	21b8      	movs	r1, #184	; 0xb8
 8014e1c:	4a05      	ldr	r2, [pc, #20]	; (8014e34 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8014e1e:	4806      	ldr	r0, [pc, #24]	; (8014e38 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8014e20:	f010 fba4 	bl	802556c <__assert_func>
 8014e24:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8014e28:	bd08      	pop	{r3, pc}
 8014e2a:	bf00      	nop
 8014e2c:	2000bc58 	.word	0x2000bc58
 8014e30:	08027a0c 	.word	0x08027a0c
 8014e34:	08027b50 	.word	0x08027b50
 8014e38:	08027a48 	.word	0x08027a48

08014e3c <_ZN8touchgfx13ImageProgressC1Ev>:
 8014e3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014e40:	4604      	mov	r4, r0
 8014e42:	f7ff ffa1 	bl	8014d88 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014e46:	4b31      	ldr	r3, [pc, #196]	; (8014f0c <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8014e48:	a902      	add	r1, sp, #8
 8014e4a:	4626      	mov	r6, r4
 8014e4c:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8014e50:	2500      	movs	r5, #0
 8014e52:	4a2f      	ldr	r2, [pc, #188]	; (8014f10 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8014e54:	f846 3b90 	str.w	r3, [r6], #144
 8014e58:	2701      	movs	r7, #1
 8014e5a:	4b2e      	ldr	r3, [pc, #184]	; (8014f14 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8014e5c:	4640      	mov	r0, r8
 8014e5e:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8014e62:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8014e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e6a:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8014e6e:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8014e72:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8014e76:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8014e7a:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8014e7e:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8014e82:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8014e86:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8014e8a:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8014e8e:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8014e92:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8014e96:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8014e9a:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8014e9e:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8014ea2:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8014ea6:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8014eaa:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8014eae:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8014eb2:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8014eb6:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8014eba:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8014ebe:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8014ec2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8014ec6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8014eca:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8014ece:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8014ed2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8014ed6:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8014eda:	f002 fb6f 	bl	80175bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014ede:	4b0e      	ldr	r3, [pc, #56]	; (8014f18 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8014ee0:	4641      	mov	r1, r8
 8014ee2:	4630      	mov	r0, r6
 8014ee4:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8014ee8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8014eec:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8014ef0:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8014ef4:	f000 fa74 	bl	80153e0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014ef8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014efc:	4631      	mov	r1, r6
 8014efe:	f000 fa6f 	bl	80153e0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014f02:	4620      	mov	r0, r4
 8014f04:	b002      	add	sp, #8
 8014f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f0a:	bf00      	nop
 8014f0c:	08027a78 	.word	0x08027a78
 8014f10:	08028c94 	.word	0x08028c94
 8014f14:	08027df4 	.word	0x08027df4
 8014f18:	08028b94 	.word	0x08028b94

08014f1c <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8014f1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014f20:	4617      	mov	r7, r2
 8014f22:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8014f26:	2200      	movs	r2, #0
 8014f28:	4604      	mov	r4, r0
 8014f2a:	460e      	mov	r6, r1
 8014f2c:	4698      	mov	r8, r3
 8014f2e:	4611      	mov	r1, r2
 8014f30:	9500      	str	r5, [sp, #0]
 8014f32:	3090      	adds	r0, #144	; 0x90
 8014f34:	f7fb f91c 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014f38:	4643      	mov	r3, r8
 8014f3a:	463a      	mov	r2, r7
 8014f3c:	4631      	mov	r1, r6
 8014f3e:	4620      	mov	r0, r4
 8014f40:	9508      	str	r5, [sp, #32]
 8014f42:	b002      	add	sp, #8
 8014f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f48:	f000 b8aa 	b.w	80150a0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08014f4c <_ZN8touchgfx13ImageProgress8setValueEi>:
 8014f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f4e:	4604      	mov	r4, r0
 8014f50:	f000 f8f0 	bl	8015134 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8014f54:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8014f58:	4638      	mov	r0, r7
 8014f5a:	f004 fc9d 	bl	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014f5e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014f62:	4620      	mov	r0, r4
 8014f64:	2b01      	cmp	r3, #1
 8014f66:	bf94      	ite	ls
 8014f68:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8014f6c:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8014f70:	f000 f93a 	bl	80151e8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014f74:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8014f78:	4606      	mov	r6, r0
 8014f7a:	b205      	sxth	r5, r0
 8014f7c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014f80:	2a00      	cmp	r2, #0
 8014f82:	d056      	beq.n	8015032 <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8014f84:	2b03      	cmp	r3, #3
 8014f86:	d82c      	bhi.n	8014fe2 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8014f88:	e8df f003 	tbb	[pc, r3]
 8014f8c:	3d311202 	.word	0x3d311202
 8014f90:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014f94:	2200      	movs	r2, #0
 8014f96:	9300      	str	r3, [sp, #0]
 8014f98:	4611      	mov	r1, r2
 8014f9a:	462b      	mov	r3, r5
 8014f9c:	4638      	mov	r0, r7
 8014f9e:	f7fb f8e7 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014fa2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014fa6:	9300      	str	r3, [sp, #0]
 8014fa8:	462b      	mov	r3, r5
 8014faa:	2200      	movs	r2, #0
 8014fac:	4611      	mov	r1, r2
 8014fae:	e014      	b.n	8014fda <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8014fb0:	8921      	ldrh	r1, [r4, #8]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014fb8:	1a09      	subs	r1, r1, r0
 8014fba:	4638      	mov	r0, r7
 8014fbc:	9300      	str	r3, [sp, #0]
 8014fbe:	462b      	mov	r3, r5
 8014fc0:	b209      	sxth	r1, r1
 8014fc2:	f7fb f8d5 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014fc6:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8014fca:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014fce:	4249      	negs	r1, r1
 8014fd0:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8014fd4:	9200      	str	r2, [sp, #0]
 8014fd6:	b209      	sxth	r1, r1
 8014fd8:	2200      	movs	r2, #0
 8014fda:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8014fde:	f7fb f8c7 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014fe2:	4638      	mov	r0, r7
 8014fe4:	b003      	add	sp, #12
 8014fe6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014fea:	f004 bc55 	b.w	8019898 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014fee:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	9500      	str	r5, [sp, #0]
 8014ff6:	2100      	movs	r1, #0
 8014ff8:	4638      	mov	r0, r7
 8014ffa:	f7fb f8b9 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014ffe:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015002:	9500      	str	r5, [sp, #0]
 8015004:	e7d1      	b.n	8014faa <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8015006:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801500a:	2100      	movs	r1, #0
 801500c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015010:	1a12      	subs	r2, r2, r0
 8015012:	9500      	str	r5, [sp, #0]
 8015014:	4638      	mov	r0, r7
 8015016:	b212      	sxth	r2, r2
 8015018:	f7fb f8aa 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 801501c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8015020:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8015024:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015028:	4252      	negs	r2, r2
 801502a:	9100      	str	r1, [sp, #0]
 801502c:	b212      	sxth	r2, r2
 801502e:	2100      	movs	r1, #0
 8015030:	e7d3      	b.n	8014fda <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8015032:	2b03      	cmp	r3, #3
 8015034:	d8d5      	bhi.n	8014fe2 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8015036:	e8df f003 	tbb	[pc, r3]
 801503a:	1102      	.short	0x1102
 801503c:	2a1b      	.short	0x2a1b
 801503e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015042:	2200      	movs	r2, #0
 8015044:	4638      	mov	r0, r7
 8015046:	4611      	mov	r1, r2
 8015048:	9300      	str	r3, [sp, #0]
 801504a:	462b      	mov	r3, r5
 801504c:	f7fb f890 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015050:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015054:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015058:	1af1      	subs	r1, r6, r3
 801505a:	e7bb      	b.n	8014fd4 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 801505c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8015060:	2200      	movs	r2, #0
 8015062:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015066:	1a09      	subs	r1, r1, r0
 8015068:	9300      	str	r3, [sp, #0]
 801506a:	462b      	mov	r3, r5
 801506c:	b209      	sxth	r1, r1
 801506e:	e795      	b.n	8014f9c <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8015070:	2200      	movs	r2, #0
 8015072:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015076:	4638      	mov	r0, r7
 8015078:	9500      	str	r5, [sp, #0]
 801507a:	4611      	mov	r1, r2
 801507c:	f7fb f878 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015080:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8015084:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015088:	1a32      	subs	r2, r6, r0
 801508a:	9000      	str	r0, [sp, #0]
 801508c:	e7ce      	b.n	801502c <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 801508e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8015092:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015096:	1a12      	subs	r2, r2, r0
 8015098:	9500      	str	r5, [sp, #0]
 801509a:	b212      	sxth	r2, r2
 801509c:	e7ab      	b.n	8014ff6 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

0801509e <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 801509e:	4770      	bx	lr

080150a0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80150a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80150a4:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80150a8:	4604      	mov	r4, r0
 80150aa:	460e      	mov	r6, r1
 80150ac:	4698      	mov	r8, r3
 80150ae:	9700      	str	r7, [sp, #0]
 80150b0:	3058      	adds	r0, #88	; 0x58
 80150b2:	4615      	mov	r5, r2
 80150b4:	f7fb f85c 	bl	8010170 <_ZN8touchgfx8Drawable11setPositionEssss>
 80150b8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80150bc:	eb06 0308 	add.w	r3, r6, r8
 80150c0:	429a      	cmp	r2, r3
 80150c2:	eb05 0207 	add.w	r2, r5, r7
 80150c6:	bfb8      	it	lt
 80150c8:	8123      	strhlt	r3, [r4, #8]
 80150ca:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80150ce:	4293      	cmp	r3, r2
 80150d0:	bfb8      	it	lt
 80150d2:	8162      	strhlt	r2, [r4, #10]
 80150d4:	b002      	add	sp, #8
 80150d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080150da <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 80150da:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 80150de:	4770      	bx	lr

080150e0 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80150e0:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 80150e4:	4770      	bx	lr

080150e6 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80150e6:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 80150ea:	4770      	bx	lr

080150ec <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80150ec:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 80150f0:	4770      	bx	lr

080150f2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 80150f2:	b510      	push	{r4, lr}
 80150f4:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80150f8:	800c      	strh	r4, [r1, #0]
 80150fa:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80150fe:	8011      	strh	r1, [r2, #0]
 8015100:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8015104:	801a      	strh	r2, [r3, #0]
 8015106:	9b02      	ldr	r3, [sp, #8]
 8015108:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 801510c:	801a      	strh	r2, [r3, #0]
 801510e:	bd10      	pop	{r4, pc}

08015110 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8015110:	b510      	push	{r4, lr}
 8015112:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015116:	800c      	strh	r4, [r1, #0]
 8015118:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801511c:	8011      	strh	r1, [r2, #0]
 801511e:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8015122:	801a      	strh	r2, [r3, #0]
 8015124:	bd10      	pop	{r4, pc}

08015126 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8015126:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 801512a:	800b      	strh	r3, [r1, #0]
 801512c:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015130:	8013      	strh	r3, [r2, #0]
 8015132:	4770      	bx	lr

08015134 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8015134:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015138:	4299      	cmp	r1, r3
 801513a:	bfb8      	it	lt
 801513c:	4619      	movlt	r1, r3
 801513e:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015142:	4299      	cmp	r1, r3
 8015144:	bfa8      	it	ge
 8015146:	4619      	movge	r1, r3
 8015148:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 801514c:	4770      	bx	lr

0801514e <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801514e:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8015152:	4770      	bx	lr

08015154 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8015154:	b510      	push	{r4, lr}
 8015156:	4604      	mov	r4, r0
 8015158:	2190      	movs	r1, #144	; 0x90
 801515a:	f010 f9dc 	bl	8025516 <_ZdlPvj>
 801515e:	4620      	mov	r0, r4
 8015160:	bd10      	pop	{r4, pc}

08015162 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8015162:	b510      	push	{r4, lr}
 8015164:	4604      	mov	r4, r0
 8015166:	302c      	adds	r0, #44	; 0x2c
 8015168:	f002 fa28 	bl	80175bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801516c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801516e:	8123      	strh	r3, [r4, #8]
 8015170:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015172:	8163      	strh	r3, [r4, #10]
 8015174:	bd10      	pop	{r4, pc}
	...

08015178 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8015178:	4291      	cmp	r1, r2
 801517a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801517e:	4604      	mov	r4, r0
 8015180:	460e      	mov	r6, r1
 8015182:	4615      	mov	r5, r2
 8015184:	4698      	mov	r8, r3
 8015186:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801518a:	db05      	blt.n	8015198 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 801518c:	4b12      	ldr	r3, [pc, #72]	; (80151d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801518e:	214d      	movs	r1, #77	; 0x4d
 8015190:	4a12      	ldr	r2, [pc, #72]	; (80151dc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8015192:	4813      	ldr	r0, [pc, #76]	; (80151e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8015194:	f010 f9ea 	bl	802556c <__assert_func>
 8015198:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 801519c:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 80151a0:	6803      	ldr	r3, [r0, #0]
 80151a2:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 80151a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80151aa:	4798      	blx	r3
 80151ac:	f1b8 0f00 	cmp.w	r8, #0
 80151b0:	d10c      	bne.n	80151cc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 80151b2:	1bad      	subs	r5, r5, r6
 80151b4:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 80151b8:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 80151bc:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 80151c0:	42bb      	cmp	r3, r7
 80151c2:	d806      	bhi.n	80151d2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 80151c4:	4b07      	ldr	r3, [pc, #28]	; (80151e4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 80151c6:	215a      	movs	r1, #90	; 0x5a
 80151c8:	4a04      	ldr	r2, [pc, #16]	; (80151dc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80151ca:	e7e2      	b.n	8015192 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 80151cc:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 80151d0:	e7f2      	b.n	80151b8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 80151d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151d6:	bf00      	nop
 80151d8:	08027b83 	.word	0x08027b83
 80151dc:	08027cc0 	.word	0x08027cc0
 80151e0:	08027b8d 	.word	0x08027b8d
 80151e4:	08027be4 	.word	0x08027be4

080151e8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80151e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80151ea:	4604      	mov	r4, r0
 80151ec:	460d      	mov	r5, r1
 80151ee:	b1b9      	cbz	r1, 8015220 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80151f0:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 80151f4:	ab01      	add	r3, sp, #4
 80151f6:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 80151fa:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 80151fe:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8015202:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8015206:	1a12      	subs	r2, r2, r0
 8015208:	1b89      	subs	r1, r1, r6
 801520a:	1a38      	subs	r0, r7, r0
 801520c:	f004 fc85 	bl	8019b1a <_ZN8touchgfx6muldivElllRl>
 8015210:	4629      	mov	r1, r5
 8015212:	ab01      	add	r3, sp, #4
 8015214:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8015218:	4430      	add	r0, r6
 801521a:	f004 fc7e 	bl	8019b1a <_ZN8touchgfx6muldivElllRl>
 801521e:	b285      	uxth	r5, r0
 8015220:	4628      	mov	r0, r5
 8015222:	b003      	add	sp, #12
 8015224:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015228 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801522c:	4604      	mov	r4, r0
 801522e:	2600      	movs	r6, #0
 8015230:	f7fa ff50 	bl	80100d4 <_ZN8touchgfx8DrawableC1Ev>
 8015234:	4b1b      	ldr	r3, [pc, #108]	; (80152a4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8015236:	4625      	mov	r5, r4
 8015238:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801523c:	af02      	add	r7, sp, #8
 801523e:	62a6      	str	r6, [r4, #40]	; 0x28
 8015240:	f845 3b2c 	str.w	r3, [r5], #44
 8015244:	4628      	mov	r0, r5
 8015246:	f827 8d04 	strh.w	r8, [r7, #-4]!
 801524a:	f7fa ff43 	bl	80100d4 <_ZN8touchgfx8DrawableC1Ev>
 801524e:	4b16      	ldr	r3, [pc, #88]	; (80152a8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8015250:	4639      	mov	r1, r7
 8015252:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8015256:	4628      	mov	r0, r5
 8015258:	62e3      	str	r3, [r4, #44]	; 0x2c
 801525a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801525e:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8015262:	f002 f9ab 	bl	80175bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015266:	4638      	mov	r0, r7
 8015268:	f7fa ff34 	bl	80100d4 <_ZN8touchgfx8DrawableC1Ev>
 801526c:	4b0f      	ldr	r3, [pc, #60]	; (80152ac <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801526e:	4632      	mov	r2, r6
 8015270:	4631      	mov	r1, r6
 8015272:	65a3      	str	r3, [r4, #88]	; 0x58
 8015274:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8015278:	4628      	mov	r0, r5
 801527a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801527e:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8015282:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8015286:	f7fa ffbe 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
 801528a:	4629      	mov	r1, r5
 801528c:	4620      	mov	r0, r4
 801528e:	f000 f8a7 	bl	80153e0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015292:	4620      	mov	r0, r4
 8015294:	4639      	mov	r1, r7
 8015296:	f000 f8a3 	bl	80153e0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801529a:	4620      	mov	r0, r4
 801529c:	b002      	add	sp, #8
 801529e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152a2:	bf00      	nop
 80152a4:	08027c08 	.word	0x08027c08
 80152a8:	08028c94 	.word	0x08028c94
 80152ac:	08027df4 	.word	0x08027df4

080152b0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80152b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80152b2:	2000      	movs	r0, #0
 80152b4:	b12b      	cbz	r3, 80152c2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80152b6:	b920      	cbnz	r0, 80152c2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80152b8:	1a5a      	subs	r2, r3, r1
 80152ba:	699b      	ldr	r3, [r3, #24]
 80152bc:	4250      	negs	r0, r2
 80152be:	4150      	adcs	r0, r2
 80152c0:	e7f8      	b.n	80152b4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80152c2:	4770      	bx	lr

080152c4 <_ZN8touchgfx9Container9removeAllEv>:
 80152c4:	2200      	movs	r2, #0
 80152c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80152c8:	b123      	cbz	r3, 80152d4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80152ca:	6999      	ldr	r1, [r3, #24]
 80152cc:	6281      	str	r1, [r0, #40]	; 0x28
 80152ce:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80152d2:	e7f8      	b.n	80152c6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80152d4:	4770      	bx	lr

080152d6 <_ZN8touchgfx9Container6unlinkEv>:
 80152d6:	2300      	movs	r3, #0
 80152d8:	6283      	str	r3, [r0, #40]	; 0x28
 80152da:	4770      	bx	lr

080152dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80152dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152e0:	461f      	mov	r7, r3
 80152e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80152e6:	460d      	mov	r5, r1
 80152e8:	4616      	mov	r6, r2
 80152ea:	b103      	cbz	r3, 80152ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80152ec:	6038      	str	r0, [r7, #0]
 80152ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80152f0:	b314      	cbz	r4, 8015338 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80152f2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80152f6:	b1eb      	cbz	r3, 8015334 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80152f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80152fc:	428d      	cmp	r5, r1
 80152fe:	db19      	blt.n	8015334 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015300:	b289      	uxth	r1, r1
 8015302:	8923      	ldrh	r3, [r4, #8]
 8015304:	440b      	add	r3, r1
 8015306:	b21b      	sxth	r3, r3
 8015308:	429d      	cmp	r5, r3
 801530a:	da13      	bge.n	8015334 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801530c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015310:	4296      	cmp	r6, r2
 8015312:	db0f      	blt.n	8015334 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015314:	b292      	uxth	r2, r2
 8015316:	8963      	ldrh	r3, [r4, #10]
 8015318:	4413      	add	r3, r2
 801531a:	b21b      	sxth	r3, r3
 801531c:	429e      	cmp	r6, r3
 801531e:	da09      	bge.n	8015334 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015320:	6823      	ldr	r3, [r4, #0]
 8015322:	1ab2      	subs	r2, r6, r2
 8015324:	1a69      	subs	r1, r5, r1
 8015326:	4620      	mov	r0, r4
 8015328:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801532c:	b212      	sxth	r2, r2
 801532e:	463b      	mov	r3, r7
 8015330:	b209      	sxth	r1, r1
 8015332:	47c0      	blx	r8
 8015334:	69a4      	ldr	r4, [r4, #24]
 8015336:	e7db      	b.n	80152f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801533c <_ZNK8touchgfx9Container12getSolidRectEv>:
 801533c:	2200      	movs	r2, #0
 801533e:	8002      	strh	r2, [r0, #0]
 8015340:	8042      	strh	r2, [r0, #2]
 8015342:	8082      	strh	r2, [r0, #4]
 8015344:	80c2      	strh	r2, [r0, #6]
 8015346:	4770      	bx	lr

08015348 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015348:	b570      	push	{r4, r5, r6, lr}
 801534a:	460d      	mov	r5, r1
 801534c:	4616      	mov	r6, r2
 801534e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015350:	b13c      	cbz	r4, 8015362 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015352:	6823      	ldr	r3, [r4, #0]
 8015354:	4620      	mov	r0, r4
 8015356:	4632      	mov	r2, r6
 8015358:	4629      	mov	r1, r5
 801535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801535c:	4798      	blx	r3
 801535e:	69a4      	ldr	r4, [r4, #24]
 8015360:	e7f6      	b.n	8015350 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015362:	bd70      	pop	{r4, r5, r6, pc}

08015364 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015364:	b538      	push	{r3, r4, r5, lr}
 8015366:	460d      	mov	r5, r1
 8015368:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801536a:	b134      	cbz	r4, 801537a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801536c:	682b      	ldr	r3, [r5, #0]
 801536e:	4621      	mov	r1, r4
 8015370:	4628      	mov	r0, r5
 8015372:	689b      	ldr	r3, [r3, #8]
 8015374:	4798      	blx	r3
 8015376:	69a4      	ldr	r4, [r4, #24]
 8015378:	e7f7      	b.n	801536a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801537a:	bd38      	pop	{r3, r4, r5, pc}

0801537c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801537c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801537e:	b19b      	cbz	r3, 80153a8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015380:	428b      	cmp	r3, r1
 8015382:	d109      	bne.n	8015398 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015384:	699a      	ldr	r2, [r3, #24]
 8015386:	2100      	movs	r1, #0
 8015388:	6159      	str	r1, [r3, #20]
 801538a:	6282      	str	r2, [r0, #40]	; 0x28
 801538c:	b902      	cbnz	r2, 8015390 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801538e:	4770      	bx	lr
 8015390:	6199      	str	r1, [r3, #24]
 8015392:	4770      	bx	lr
 8015394:	4613      	mov	r3, r2
 8015396:	b13a      	cbz	r2, 80153a8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015398:	699a      	ldr	r2, [r3, #24]
 801539a:	428a      	cmp	r2, r1
 801539c:	d1fa      	bne.n	8015394 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801539e:	698a      	ldr	r2, [r1, #24]
 80153a0:	619a      	str	r2, [r3, #24]
 80153a2:	2300      	movs	r3, #0
 80153a4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80153a8:	4770      	bx	lr

080153aa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80153aa:	b410      	push	{r4}
 80153ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80153ae:	4604      	mov	r4, r0
 80153b0:	b92b      	cbnz	r3, 80153be <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80153b2:	6803      	ldr	r3, [r0, #0]
 80153b4:	4611      	mov	r1, r2
 80153b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80153bc:	4718      	bx	r3
 80153be:	b941      	cbnz	r1, 80153d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80153c0:	6193      	str	r3, [r2, #24]
 80153c2:	6282      	str	r2, [r0, #40]	; 0x28
 80153c4:	6154      	str	r4, [r2, #20]
 80153c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153ca:	4770      	bx	lr
 80153cc:	4603      	mov	r3, r0
 80153ce:	2800      	cmp	r0, #0
 80153d0:	d0f9      	beq.n	80153c6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80153d2:	4299      	cmp	r1, r3
 80153d4:	6998      	ldr	r0, [r3, #24]
 80153d6:	d1f9      	bne.n	80153cc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80153d8:	6190      	str	r0, [r2, #24]
 80153da:	618a      	str	r2, [r1, #24]
 80153dc:	e7f2      	b.n	80153c4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080153e0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80153e0:	4288      	cmp	r0, r1
 80153e2:	b508      	push	{r3, lr}
 80153e4:	d105      	bne.n	80153f2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80153e6:	4b11      	ldr	r3, [pc, #68]	; (801542c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80153e8:	2123      	movs	r1, #35	; 0x23
 80153ea:	4a11      	ldr	r2, [pc, #68]	; (8015430 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80153ec:	4811      	ldr	r0, [pc, #68]	; (8015434 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80153ee:	f010 f8bd 	bl	802556c <__assert_func>
 80153f2:	694b      	ldr	r3, [r1, #20]
 80153f4:	b11b      	cbz	r3, 80153fe <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80153f6:	4b10      	ldr	r3, [pc, #64]	; (8015438 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80153f8:	2124      	movs	r1, #36	; 0x24
 80153fa:	4a0d      	ldr	r2, [pc, #52]	; (8015430 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80153fc:	e7f6      	b.n	80153ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80153fe:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015402:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015404:	b913      	cbnz	r3, 801540c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015406:	6281      	str	r1, [r0, #40]	; 0x28
 8015408:	bd08      	pop	{r3, pc}
 801540a:	4613      	mov	r3, r2
 801540c:	699a      	ldr	r2, [r3, #24]
 801540e:	b12a      	cbz	r2, 801541c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015410:	428b      	cmp	r3, r1
 8015412:	d1fa      	bne.n	801540a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015414:	4b09      	ldr	r3, [pc, #36]	; (801543c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015416:	2135      	movs	r1, #53	; 0x35
 8015418:	4a05      	ldr	r2, [pc, #20]	; (8015430 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801541a:	e7e7      	b.n	80153ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801541c:	428b      	cmp	r3, r1
 801541e:	d103      	bne.n	8015428 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015420:	4b06      	ldr	r3, [pc, #24]	; (801543c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015422:	2138      	movs	r1, #56	; 0x38
 8015424:	4a02      	ldr	r2, [pc, #8]	; (8015430 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015426:	e7e1      	b.n	80153ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015428:	6199      	str	r1, [r3, #24]
 801542a:	e7ed      	b.n	8015408 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801542c:	08027d21 	.word	0x08027d21
 8015430:	08027e78 	.word	0x08027e78
 8015434:	08027d4d 	.word	0x08027d4d
 8015438:	08027d80 	.word	0x08027d80
 801543c:	08027db6 	.word	0x08027db6

08015440 <_ZN8touchgfx4RectaNERKS0_>:
 8015440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015444:	888b      	ldrh	r3, [r1, #4]
 8015446:	f9b1 9000 	ldrsh.w	r9, [r1]
 801544a:	f9b0 a000 	ldrsh.w	sl, [r0]
 801544e:	444b      	add	r3, r9
 8015450:	b29b      	uxth	r3, r3
 8015452:	fa0f f883 	sxth.w	r8, r3
 8015456:	45c2      	cmp	sl, r8
 8015458:	da30      	bge.n	80154bc <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801545a:	8882      	ldrh	r2, [r0, #4]
 801545c:	4452      	add	r2, sl
 801545e:	b292      	uxth	r2, r2
 8015460:	fa0f fe82 	sxth.w	lr, r2
 8015464:	45f1      	cmp	r9, lr
 8015466:	da29      	bge.n	80154bc <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015468:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801546c:	88cc      	ldrh	r4, [r1, #6]
 801546e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015472:	442c      	add	r4, r5
 8015474:	b224      	sxth	r4, r4
 8015476:	42a6      	cmp	r6, r4
 8015478:	da20      	bge.n	80154bc <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801547a:	88c7      	ldrh	r7, [r0, #6]
 801547c:	4437      	add	r7, r6
 801547e:	b2bf      	uxth	r7, r7
 8015480:	fa0f fc87 	sxth.w	ip, r7
 8015484:	4565      	cmp	r5, ip
 8015486:	da19      	bge.n	80154bc <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015488:	45ca      	cmp	sl, r9
 801548a:	4654      	mov	r4, sl
 801548c:	bfb8      	it	lt
 801548e:	464c      	movlt	r4, r9
 8015490:	42b5      	cmp	r5, r6
 8015492:	bfb8      	it	lt
 8015494:	4635      	movlt	r5, r6
 8015496:	45f0      	cmp	r8, lr
 8015498:	bfc8      	it	gt
 801549a:	4613      	movgt	r3, r2
 801549c:	1b1b      	subs	r3, r3, r4
 801549e:	8083      	strh	r3, [r0, #4]
 80154a0:	88ca      	ldrh	r2, [r1, #6]
 80154a2:	884b      	ldrh	r3, [r1, #2]
 80154a4:	8004      	strh	r4, [r0, #0]
 80154a6:	4413      	add	r3, r2
 80154a8:	8045      	strh	r5, [r0, #2]
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	b21a      	sxth	r2, r3
 80154ae:	4594      	cmp	ip, r2
 80154b0:	bfb8      	it	lt
 80154b2:	463b      	movlt	r3, r7
 80154b4:	1b5b      	subs	r3, r3, r5
 80154b6:	80c3      	strh	r3, [r0, #6]
 80154b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154bc:	2300      	movs	r3, #0
 80154be:	8003      	strh	r3, [r0, #0]
 80154c0:	8043      	strh	r3, [r0, #2]
 80154c2:	8083      	strh	r3, [r0, #4]
 80154c4:	80c3      	strh	r3, [r0, #6]
 80154c6:	e7f7      	b.n	80154b8 <_ZN8touchgfx4RectaNERKS0_+0x78>

080154c8 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80154c8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80154cc:	b12b      	cbz	r3, 80154da <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80154ce:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80154d2:	fab0 f080 	clz	r0, r0
 80154d6:	0940      	lsrs	r0, r0, #5
 80154d8:	4770      	bx	lr
 80154da:	2001      	movs	r0, #1
 80154dc:	4770      	bx	lr

080154de <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80154de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154e2:	2300      	movs	r3, #0
 80154e4:	4604      	mov	r4, r0
 80154e6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80154e8:	8003      	strh	r3, [r0, #0]
 80154ea:	8043      	strh	r3, [r0, #2]
 80154ec:	8083      	strh	r3, [r0, #4]
 80154ee:	80c3      	strh	r3, [r0, #6]
 80154f0:	2d00      	cmp	r5, #0
 80154f2:	d040      	beq.n	8015576 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80154f4:	1d28      	adds	r0, r5, #4
 80154f6:	f7ff ffe7 	bl	80154c8 <_ZNK8touchgfx4Rect7isEmptyEv>
 80154fa:	b988      	cbnz	r0, 8015520 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80154fc:	4620      	mov	r0, r4
 80154fe:	f7ff ffe3 	bl	80154c8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015502:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015506:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801550a:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801550e:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015512:	b138      	cbz	r0, 8015524 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015514:	8022      	strh	r2, [r4, #0]
 8015516:	8063      	strh	r3, [r4, #2]
 8015518:	f8a4 e004 	strh.w	lr, [r4, #4]
 801551c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015520:	69ad      	ldr	r5, [r5, #24]
 8015522:	e7e5      	b.n	80154f0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015524:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015528:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801552c:	4290      	cmp	r0, r2
 801552e:	4607      	mov	r7, r0
 8015530:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015534:	460e      	mov	r6, r1
 8015536:	bfa8      	it	ge
 8015538:	4617      	movge	r7, r2
 801553a:	4299      	cmp	r1, r3
 801553c:	4472      	add	r2, lr
 801553e:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015542:	bfa8      	it	ge
 8015544:	461e      	movge	r6, r3
 8015546:	4440      	add	r0, r8
 8015548:	4471      	add	r1, lr
 801554a:	4463      	add	r3, ip
 801554c:	b200      	sxth	r0, r0
 801554e:	8027      	strh	r7, [r4, #0]
 8015550:	b212      	sxth	r2, r2
 8015552:	8066      	strh	r6, [r4, #2]
 8015554:	b209      	sxth	r1, r1
 8015556:	b21b      	sxth	r3, r3
 8015558:	4290      	cmp	r0, r2
 801555a:	bfac      	ite	ge
 801555c:	ebc7 0200 	rsbge	r2, r7, r0
 8015560:	ebc7 0202 	rsblt	r2, r7, r2
 8015564:	4299      	cmp	r1, r3
 8015566:	bfac      	ite	ge
 8015568:	ebc6 0301 	rsbge	r3, r6, r1
 801556c:	ebc6 0303 	rsblt	r3, r6, r3
 8015570:	80a2      	strh	r2, [r4, #4]
 8015572:	80e3      	strh	r3, [r4, #6]
 8015574:	e7d4      	b.n	8015520 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015576:	4620      	mov	r0, r4
 8015578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801557c <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801557c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015580:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015584:	b383      	cbz	r3, 80155e8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015586:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015588:	b374      	cbz	r4, 80155e8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801558a:	f9b1 5000 	ldrsh.w	r5, [r1]
 801558e:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015592:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015596:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801559a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801559e:	b303      	cbz	r3, 80155e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80155a0:	4668      	mov	r0, sp
 80155a2:	1d21      	adds	r1, r4, #4
 80155a4:	f8ad 5000 	strh.w	r5, [sp]
 80155a8:	f8ad 6002 	strh.w	r6, [sp, #2]
 80155ac:	f8ad 7004 	strh.w	r7, [sp, #4]
 80155b0:	f8ad 8006 	strh.w	r8, [sp, #6]
 80155b4:	f7ff ff44 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 80155b8:	4668      	mov	r0, sp
 80155ba:	f7ff ff85 	bl	80154c8 <_ZNK8touchgfx4Rect7isEmptyEv>
 80155be:	b980      	cbnz	r0, 80155e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80155c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80155c4:	4669      	mov	r1, sp
 80155c6:	88a2      	ldrh	r2, [r4, #4]
 80155c8:	4620      	mov	r0, r4
 80155ca:	1a9b      	subs	r3, r3, r2
 80155cc:	88e2      	ldrh	r2, [r4, #6]
 80155ce:	f8ad 3000 	strh.w	r3, [sp]
 80155d2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80155d6:	1a9b      	subs	r3, r3, r2
 80155d8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80155dc:	6823      	ldr	r3, [r4, #0]
 80155de:	689b      	ldr	r3, [r3, #8]
 80155e0:	4798      	blx	r3
 80155e2:	69a4      	ldr	r4, [r4, #24]
 80155e4:	2c00      	cmp	r4, #0
 80155e6:	d1d8      	bne.n	801559a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80155e8:	b002      	add	sp, #8
 80155ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80155ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80155f0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80155f4:	460d      	mov	r5, r1
 80155f6:	4616      	mov	r6, r2
 80155f8:	b323      	cbz	r3, 8015644 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80155fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80155fc:	b314      	cbz	r4, 8015644 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80155fe:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015602:	b1eb      	cbz	r3, 8015640 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015604:	6828      	ldr	r0, [r5, #0]
 8015606:	466b      	mov	r3, sp
 8015608:	6869      	ldr	r1, [r5, #4]
 801560a:	c303      	stmia	r3!, {r0, r1}
 801560c:	4668      	mov	r0, sp
 801560e:	1d21      	adds	r1, r4, #4
 8015610:	f7ff ff16 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 8015614:	4668      	mov	r0, sp
 8015616:	f7ff ff57 	bl	80154c8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801561a:	b988      	cbnz	r0, 8015640 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801561c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015620:	4669      	mov	r1, sp
 8015622:	88a2      	ldrh	r2, [r4, #4]
 8015624:	4620      	mov	r0, r4
 8015626:	1a9b      	subs	r3, r3, r2
 8015628:	88e2      	ldrh	r2, [r4, #6]
 801562a:	f8ad 3000 	strh.w	r3, [sp]
 801562e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015632:	1a9b      	subs	r3, r3, r2
 8015634:	4632      	mov	r2, r6
 8015636:	f8ad 3002 	strh.w	r3, [sp, #2]
 801563a:	6823      	ldr	r3, [r4, #0]
 801563c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801563e:	4798      	blx	r3
 8015640:	69a4      	ldr	r4, [r4, #24]
 8015642:	e7db      	b.n	80155fc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015644:	b002      	add	sp, #8
 8015646:	bd70      	pop	{r4, r5, r6, pc}

08015648 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015648:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801564c:	4770      	bx	lr

0801564e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801564e:	6803      	ldr	r3, [r0, #0]
 8015650:	b513      	push	{r0, r1, r4, lr}
 8015652:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015656:	2300      	movs	r3, #0
 8015658:	e9cd 3300 	strd	r3, r3, [sp]
 801565c:	466b      	mov	r3, sp
 801565e:	47a0      	blx	r4
 8015660:	b002      	add	sp, #8
 8015662:	bd10      	pop	{r4, pc}

08015664 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015664:	2301      	movs	r3, #1
 8015666:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801566a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801566e:	4770      	bx	lr

08015670 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015670:	2301      	movs	r3, #1
 8015672:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015676:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801567a:	4770      	bx	lr

0801567c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801567c:	6843      	ldr	r3, [r0, #4]
 801567e:	2201      	movs	r2, #1
 8015680:	725a      	strb	r2, [r3, #9]
 8015682:	6840      	ldr	r0, [r0, #4]
 8015684:	6803      	ldr	r3, [r0, #0]
 8015686:	691b      	ldr	r3, [r3, #16]
 8015688:	4718      	bx	r3

0801568a <_ZN8touchgfx3HAL8flushDMAEv>:
 801568a:	6840      	ldr	r0, [r0, #4]
 801568c:	6803      	ldr	r3, [r0, #0]
 801568e:	689b      	ldr	r3, [r3, #8]
 8015690:	4718      	bx	r3
	...

08015694 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015694:	4b04      	ldr	r3, [pc, #16]	; (80156a8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015696:	781b      	ldrb	r3, [r3, #0]
 8015698:	b123      	cbz	r3, 80156a4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801569a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801569e:	f080 0001 	eor.w	r0, r0, #1
 80156a2:	4770      	bx	lr
 80156a4:	2001      	movs	r0, #1
 80156a6:	4770      	bx	lr
 80156a8:	2000bb8e 	.word	0x2000bb8e

080156ac <_ZN8touchgfx3HAL8endFrameEv>:
 80156ac:	b510      	push	{r4, lr}
 80156ae:	4604      	mov	r4, r0
 80156b0:	6840      	ldr	r0, [r0, #4]
 80156b2:	6803      	ldr	r3, [r0, #0]
 80156b4:	689b      	ldr	r3, [r3, #8]
 80156b6:	4798      	blx	r3
 80156b8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80156bc:	b113      	cbz	r3, 80156c4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80156be:	2301      	movs	r3, #1
 80156c0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80156c4:	bd10      	pop	{r4, pc}

080156c6 <_ZN8touchgfx3HAL9taskEntryEv>:
 80156c6:	b508      	push	{r3, lr}
 80156c8:	6803      	ldr	r3, [r0, #0]
 80156ca:	4604      	mov	r4, r0
 80156cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80156ce:	4798      	blx	r3
 80156d0:	6823      	ldr	r3, [r4, #0]
 80156d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80156d4:	4620      	mov	r0, r4
 80156d6:	4798      	blx	r3
 80156d8:	f7fd fed4 	bl	8013484 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80156dc:	6823      	ldr	r3, [r4, #0]
 80156de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156e0:	e7f8      	b.n	80156d4 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080156e4 <_ZN8touchgfx3HAL4tickEv>:
 80156e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80156e6:	6803      	ldr	r3, [r0, #0]
 80156e8:	4604      	mov	r4, r0
 80156ea:	4d5c      	ldr	r5, [pc, #368]	; (801585c <_ZN8touchgfx3HAL4tickEv+0x178>)
 80156ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80156f0:	4798      	blx	r3
 80156f2:	2800      	cmp	r0, #0
 80156f4:	f000 8097 	beq.w	8015826 <_ZN8touchgfx3HAL4tickEv+0x142>
 80156f8:	2001      	movs	r0, #1
 80156fa:	2600      	movs	r6, #0
 80156fc:	f7fd fba6 	bl	8012e4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015700:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015704:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015708:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801570c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015710:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015714:	b133      	cbz	r3, 8015724 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015716:	6823      	ldr	r3, [r4, #0]
 8015718:	4620      	mov	r0, r4
 801571a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801571e:	4798      	blx	r3
 8015720:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015724:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015728:	2601      	movs	r6, #1
 801572a:	6862      	ldr	r2, [r4, #4]
 801572c:	f083 0301 	eor.w	r3, r3, #1
 8015730:	702e      	strb	r6, [r5, #0]
 8015732:	7253      	strb	r3, [r2, #9]
 8015734:	f003 fc5a 	bl	8018fec <_ZN8touchgfx11Application11getInstanceEv>
 8015738:	6803      	ldr	r3, [r0, #0]
 801573a:	4631      	mov	r1, r6
 801573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801573e:	4798      	blx	r3
 8015740:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015744:	b90b      	cbnz	r3, 801574a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015746:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801574a:	f003 fc4f 	bl	8018fec <_ZN8touchgfx11Application11getInstanceEv>
 801574e:	6803      	ldr	r3, [r0, #0]
 8015750:	695b      	ldr	r3, [r3, #20]
 8015752:	4798      	blx	r3
 8015754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015756:	6803      	ldr	r3, [r0, #0]
 8015758:	691b      	ldr	r3, [r3, #16]
 801575a:	4798      	blx	r3
 801575c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015760:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015764:	3b01      	subs	r3, #1
 8015766:	b2db      	uxtb	r3, r3
 8015768:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801576c:	b10a      	cbz	r2, 8015772 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801576e:	2b00      	cmp	r3, #0
 8015770:	d1eb      	bne.n	801574a <_ZN8touchgfx3HAL4tickEv+0x66>
 8015772:	4a3b      	ldr	r2, [pc, #236]	; (8015860 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015774:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015778:	7813      	ldrb	r3, [r2, #0]
 801577a:	3301      	adds	r3, #1
 801577c:	b25b      	sxtb	r3, r3
 801577e:	4299      	cmp	r1, r3
 8015780:	7013      	strb	r3, [r2, #0]
 8015782:	dc10      	bgt.n	80157a6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015784:	2300      	movs	r3, #0
 8015786:	68e0      	ldr	r0, [r4, #12]
 8015788:	a902      	add	r1, sp, #8
 801578a:	7013      	strb	r3, [r2, #0]
 801578c:	aa03      	add	r2, sp, #12
 801578e:	6803      	ldr	r3, [r0, #0]
 8015790:	68db      	ldr	r3, [r3, #12]
 8015792:	4798      	blx	r3
 8015794:	6823      	ldr	r3, [r4, #0]
 8015796:	2800      	cmp	r0, #0
 8015798:	d051      	beq.n	801583e <_ZN8touchgfx3HAL4tickEv+0x15a>
 801579a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801579e:	4620      	mov	r0, r4
 80157a0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80157a4:	4798      	blx	r3
 80157a6:	2300      	movs	r3, #0
 80157a8:	6960      	ldr	r0, [r4, #20]
 80157aa:	f88d 3007 	strb.w	r3, [sp, #7]
 80157ae:	b158      	cbz	r0, 80157c8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80157b0:	6803      	ldr	r3, [r0, #0]
 80157b2:	f10d 0107 	add.w	r1, sp, #7
 80157b6:	68db      	ldr	r3, [r3, #12]
 80157b8:	4798      	blx	r3
 80157ba:	b128      	cbz	r0, 80157c8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80157bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157be:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80157c2:	6803      	ldr	r3, [r0, #0]
 80157c4:	68db      	ldr	r3, [r3, #12]
 80157c6:	4798      	blx	r3
 80157c8:	f104 001c 	add.w	r0, r4, #28
 80157cc:	f00e fa02 	bl	8023bd4 <_ZN8touchgfx8Gestures4tickEv>
 80157d0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80157d4:	b30b      	cbz	r3, 801581a <_ZN8touchgfx3HAL4tickEv+0x136>
 80157d6:	6920      	ldr	r0, [r4, #16]
 80157d8:	6803      	ldr	r3, [r0, #0]
 80157da:	691b      	ldr	r3, [r3, #16]
 80157dc:	4798      	blx	r3
 80157de:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80157e0:	4606      	mov	r6, r0
 80157e2:	b903      	cbnz	r3, 80157e6 <_ZN8touchgfx3HAL4tickEv+0x102>
 80157e4:	6720      	str	r0, [r4, #112]	; 0x70
 80157e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80157e8:	4a1e      	ldr	r2, [pc, #120]	; (8015864 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80157ea:	1af3      	subs	r3, r6, r3
 80157ec:	4293      	cmp	r3, r2
 80157ee:	d914      	bls.n	801581a <_ZN8touchgfx3HAL4tickEv+0x136>
 80157f0:	6920      	ldr	r0, [r4, #16]
 80157f2:	6803      	ldr	r3, [r0, #0]
 80157f4:	699b      	ldr	r3, [r3, #24]
 80157f6:	4798      	blx	r3
 80157f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80157fa:	2264      	movs	r2, #100	; 0x64
 80157fc:	1af3      	subs	r3, r6, r3
 80157fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8015802:	fbb0 f0f3 	udiv	r0, r0, r3
 8015806:	2800      	cmp	r0, #0
 8015808:	dc1e      	bgt.n	8015848 <_ZN8touchgfx3HAL4tickEv+0x164>
 801580a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801580e:	6920      	ldr	r0, [r4, #16]
 8015810:	2100      	movs	r1, #0
 8015812:	6803      	ldr	r3, [r0, #0]
 8015814:	69db      	ldr	r3, [r3, #28]
 8015816:	4798      	blx	r3
 8015818:	6726      	str	r6, [r4, #112]	; 0x70
 801581a:	f003 fbe7 	bl	8018fec <_ZN8touchgfx11Application11getInstanceEv>
 801581e:	6803      	ldr	r3, [r0, #0]
 8015820:	2100      	movs	r1, #0
 8015822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015824:	4798      	blx	r3
 8015826:	6823      	ldr	r3, [r4, #0]
 8015828:	4620      	mov	r0, r4
 801582a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801582e:	4798      	blx	r3
 8015830:	2001      	movs	r0, #1
 8015832:	f7fd fb16 	bl	8012e62 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015836:	2300      	movs	r3, #0
 8015838:	702b      	strb	r3, [r5, #0]
 801583a:	b004      	add	sp, #16
 801583c:	bd70      	pop	{r4, r5, r6, pc}
 801583e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015842:	4620      	mov	r0, r4
 8015844:	4798      	blx	r3
 8015846:	e7ae      	b.n	80157a6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015848:	2863      	cmp	r0, #99	; 0x63
 801584a:	bfcb      	itete	gt
 801584c:	2300      	movgt	r3, #0
 801584e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015852:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015856:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801585a:	e7d8      	b.n	801580e <_ZN8touchgfx3HAL4tickEv+0x12a>
 801585c:	2000bb94 	.word	0x2000bb94
 8015860:	2000bb95 	.word	0x2000bb95
 8015864:	05f5e100 	.word	0x05f5e100

08015868 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015868:	f7fd bdac 	b.w	80133c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801586c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801586c:	6581      	str	r1, [r0, #88]	; 0x58
 801586e:	301c      	adds	r0, #28
 8015870:	f00e b9ae 	b.w	8023bd0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015874 <_ZN8touchgfx3HAL5touchEll>:
 8015874:	b530      	push	{r4, r5, lr}
 8015876:	b087      	sub	sp, #28
 8015878:	4604      	mov	r4, r0
 801587a:	a804      	add	r0, sp, #16
 801587c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015880:	f003 f9b8 	bl	8018bf4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015884:	9b04      	ldr	r3, [sp, #16]
 8015886:	a906      	add	r1, sp, #24
 8015888:	a803      	add	r0, sp, #12
 801588a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801588e:	9b05      	ldr	r3, [sp, #20]
 8015890:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015894:	f003 f9fc 	bl	8018c90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015898:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801589c:	f104 001c 	add.w	r0, r4, #28
 80158a0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80158a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80158a8:	b189      	cbz	r1, 80158ce <_ZN8touchgfx3HAL5touchEll+0x5a>
 80158aa:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80158ae:	9300      	str	r3, [sp, #0]
 80158b0:	4613      	mov	r3, r2
 80158b2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80158b6:	462a      	mov	r2, r5
 80158b8:	f00e f99a 	bl	8023bf0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80158bc:	b128      	cbz	r0, 80158ca <_ZN8touchgfx3HAL5touchEll+0x56>
 80158be:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80158c2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80158c4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80158c8:	6623      	str	r3, [r4, #96]	; 0x60
 80158ca:	b007      	add	sp, #28
 80158cc:	bd30      	pop	{r4, r5, pc}
 80158ce:	f00e f9d3 	bl	8023c78 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80158d2:	2301      	movs	r3, #1
 80158d4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80158d8:	e7f1      	b.n	80158be <_ZN8touchgfx3HAL5touchEll+0x4a>

080158da <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80158da:	b570      	push	{r4, r5, r6, lr}
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d050      	beq.n	8015982 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80158e0:	ea81 0002 	eor.w	r0, r1, r2
 80158e4:	07c6      	lsls	r6, r0, #31
 80158e6:	d508      	bpl.n	80158fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80158e8:	3a01      	subs	r2, #1
 80158ea:	18cc      	adds	r4, r1, r3
 80158ec:	42a1      	cmp	r1, r4
 80158ee:	d048      	beq.n	8015982 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80158f0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80158f4:	f801 0b01 	strb.w	r0, [r1], #1
 80158f8:	e7f8      	b.n	80158ec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80158fa:	07d5      	lsls	r5, r2, #31
 80158fc:	bf42      	ittt	mi
 80158fe:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015902:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015906:	f801 0b01 	strbmi.w	r0, [r1], #1
 801590a:	2b01      	cmp	r3, #1
 801590c:	d915      	bls.n	801593a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801590e:	ea82 0001 	eor.w	r0, r2, r1
 8015912:	0784      	lsls	r4, r0, #30
 8015914:	d02d      	beq.n	8015972 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015916:	1e94      	subs	r4, r2, #2
 8015918:	4608      	mov	r0, r1
 801591a:	18ce      	adds	r6, r1, r3
 801591c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015920:	f820 5b02 	strh.w	r5, [r0], #2
 8015924:	1a35      	subs	r5, r6, r0
 8015926:	2d01      	cmp	r5, #1
 8015928:	d8f8      	bhi.n	801591c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801592a:	1e98      	subs	r0, r3, #2
 801592c:	f003 0301 	and.w	r3, r3, #1
 8015930:	f020 0001 	bic.w	r0, r0, #1
 8015934:	3002      	adds	r0, #2
 8015936:	4401      	add	r1, r0
 8015938:	4402      	add	r2, r0
 801593a:	1f14      	subs	r4, r2, #4
 801593c:	4608      	mov	r0, r1
 801593e:	18ce      	adds	r6, r1, r3
 8015940:	1a35      	subs	r5, r6, r0
 8015942:	2d03      	cmp	r5, #3
 8015944:	d810      	bhi.n	8015968 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015946:	089c      	lsrs	r4, r3, #2
 8015948:	00a0      	lsls	r0, r4, #2
 801594a:	4401      	add	r1, r0
 801594c:	3801      	subs	r0, #1
 801594e:	4402      	add	r2, r0
 8015950:	f06f 0003 	mvn.w	r0, #3
 8015954:	fb00 3404 	mla	r4, r0, r4, r3
 8015958:	440c      	add	r4, r1
 801595a:	42a1      	cmp	r1, r4
 801595c:	d011      	beq.n	8015982 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801595e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015962:	f801 3b01 	strb.w	r3, [r1], #1
 8015966:	e7f8      	b.n	801595a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015968:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801596c:	f840 5b04 	str.w	r5, [r0], #4
 8015970:	e7e6      	b.n	8015940 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015972:	0790      	lsls	r0, r2, #30
 8015974:	d0e1      	beq.n	801593a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015976:	f832 0b02 	ldrh.w	r0, [r2], #2
 801597a:	3b02      	subs	r3, #2
 801597c:	f821 0b02 	strh.w	r0, [r1], #2
 8015980:	e7db      	b.n	801593a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015982:	2001      	movs	r0, #1
 8015984:	bd70      	pop	{r4, r5, r6, pc}

08015986 <_ZN8touchgfx3HAL7noTouchEv>:
 8015986:	b510      	push	{r4, lr}
 8015988:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801598c:	4604      	mov	r4, r0
 801598e:	b153      	cbz	r3, 80159a6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015990:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015994:	2101      	movs	r1, #1
 8015996:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801599a:	301c      	adds	r0, #28
 801599c:	f00e f96c 	bl	8023c78 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80159a0:	2300      	movs	r3, #0
 80159a2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80159a6:	bd10      	pop	{r4, pc}

080159a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80159a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159ac:	4605      	mov	r5, r0
 80159ae:	6980      	ldr	r0, [r0, #24]
 80159b0:	b085      	sub	sp, #20
 80159b2:	460f      	mov	r7, r1
 80159b4:	4690      	mov	r8, r2
 80159b6:	4699      	mov	r9, r3
 80159b8:	b930      	cbnz	r0, 80159c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80159ba:	4b1f      	ldr	r3, [pc, #124]	; (8015a38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80159bc:	f44f 7198 	mov.w	r1, #304	; 0x130
 80159c0:	4a1e      	ldr	r2, [pc, #120]	; (8015a3c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80159c2:	481f      	ldr	r0, [pc, #124]	; (8015a40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80159c4:	f00f fdd2 	bl	802556c <__assert_func>
 80159c8:	ac04      	add	r4, sp, #16
 80159ca:	2600      	movs	r6, #0
 80159cc:	f844 6d04 	str.w	r6, [r4, #-4]!
 80159d0:	6806      	ldr	r6, [r0, #0]
 80159d2:	9401      	str	r4, [sp, #4]
 80159d4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80159d8:	9400      	str	r4, [sp, #0]
 80159da:	6834      	ldr	r4, [r6, #0]
 80159dc:	47a0      	blx	r4
 80159de:	4c19      	ldr	r4, [pc, #100]	; (8015a44 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80159e0:	4606      	mov	r6, r0
 80159e2:	f8a4 9000 	strh.w	r9, [r4]
 80159e6:	f7f9 feff 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 80159ea:	6803      	ldr	r3, [r0, #0]
 80159ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159ee:	4798      	blx	r3
 80159f0:	280c      	cmp	r0, #12
 80159f2:	d80f      	bhi.n	8015a14 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80159f4:	e8df f000 	tbb	[pc, r0]
 80159f8:	1b1b1207 	.word	0x1b1b1207
 80159fc:	1b1b1b1b 	.word	0x1b1b1b1b
 8015a00:	1b1b1b1b 	.word	0x1b1b1b1b
 8015a04:	1b          	.byte	0x1b
 8015a05:	00          	.byte	0x00
 8015a06:	8823      	ldrh	r3, [r4, #0]
 8015a08:	fb08 7203 	mla	r2, r8, r3, r7
 8015a0c:	9b03      	ldr	r3, [sp, #12]
 8015a0e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015a12:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015a14:	4630      	mov	r0, r6
 8015a16:	b005      	add	sp, #20
 8015a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a1c:	8822      	ldrh	r2, [r4, #0]
 8015a1e:	9b03      	ldr	r3, [sp, #12]
 8015a20:	fb08 7202 	mla	r2, r8, r2, r7
 8015a24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015a28:	1a9a      	subs	r2, r3, r2
 8015a2a:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015a2c:	e7f2      	b.n	8015a14 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015a2e:	4b06      	ldr	r3, [pc, #24]	; (8015a48 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8015a30:	f240 114d 	movw	r1, #333	; 0x14d
 8015a34:	4a01      	ldr	r2, [pc, #4]	; (8015a3c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015a36:	e7c4      	b.n	80159c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015a38:	08027f21 	.word	0x08027f21
 8015a3c:	08028232 	.word	0x08028232
 8015a40:	08027f66 	.word	0x08027f66
 8015a44:	2000bb8a 	.word	0x2000bb8a
 8015a48:	08027f8c 	.word	0x08027f8c

08015a4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8015a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a50:	4698      	mov	r8, r3
 8015a52:	6803      	ldr	r3, [r0, #0]
 8015a54:	b087      	sub	sp, #28
 8015a56:	460e      	mov	r6, r1
 8015a58:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8015a5a:	4617      	mov	r7, r2
 8015a5c:	4b0d      	ldr	r3, [pc, #52]	; (8015a94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8015a5e:	4604      	mov	r4, r0
 8015a60:	f8b3 9000 	ldrh.w	r9, [r3]
 8015a64:	f7f9 fec0 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8015a68:	6803      	ldr	r3, [r0, #0]
 8015a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a6c:	4798      	blx	r3
 8015a6e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015a72:	463a      	mov	r2, r7
 8015a74:	4631      	mov	r1, r6
 8015a76:	9302      	str	r3, [sp, #8]
 8015a78:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015a7c:	9301      	str	r3, [sp, #4]
 8015a7e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015a82:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015a86:	9300      	str	r3, [sp, #0]
 8015a88:	4620      	mov	r0, r4
 8015a8a:	4643      	mov	r3, r8
 8015a8c:	47a8      	blx	r5
 8015a8e:	b007      	add	sp, #28
 8015a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a94:	2000bb8a 	.word	0x2000bb8a

08015a98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a9c:	4606      	mov	r6, r0
 8015a9e:	b089      	sub	sp, #36	; 0x24
 8015aa0:	4610      	mov	r0, r2
 8015aa2:	460c      	mov	r4, r1
 8015aa4:	4691      	mov	r9, r2
 8015aa6:	4698      	mov	r8, r3
 8015aa8:	f005 ff4e 	bl	801b948 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015aac:	2800      	cmp	r0, #0
 8015aae:	f000 8092 	beq.w	8015bd6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8015ab2:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8015bf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8015ab6:	ad08      	add	r5, sp, #32
 8015ab8:	f8df b138 	ldr.w	fp, [pc, #312]	; 8015bf4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8015abc:	f8da 0000 	ldr.w	r0, [sl]
 8015ac0:	4f4a      	ldr	r7, [pc, #296]	; (8015bec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015ac2:	6802      	ldr	r2, [r0, #0]
 8015ac4:	6a12      	ldr	r2, [r2, #32]
 8015ac6:	4790      	blx	r2
 8015ac8:	f8da 0000 	ldr.w	r0, [sl]
 8015acc:	6802      	ldr	r2, [r0, #0]
 8015ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015ad0:	4790      	blx	r2
 8015ad2:	f8bb 3000 	ldrh.w	r3, [fp]
 8015ad6:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8015ada:	4628      	mov	r0, r5
 8015adc:	9300      	str	r3, [sp, #0]
 8015ade:	883b      	ldrh	r3, [r7, #0]
 8015ae0:	9301      	str	r3, [sp, #4]
 8015ae2:	f005 fff1 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015ae6:	f8ab 0000 	strh.w	r0, [fp]
 8015aea:	4628      	mov	r0, r5
 8015aec:	f006 f826 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015af0:	f8da b000 	ldr.w	fp, [sl]
 8015af4:	8038      	strh	r0, [r7, #0]
 8015af6:	4648      	mov	r0, r9
 8015af8:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8015afc:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8015b00:	9302      	str	r3, [sp, #8]
 8015b02:	f005 ff21 	bl	801b948 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015b06:	f8da 2000 	ldr.w	r2, [sl]
 8015b0a:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8015b0e:	63d0      	str	r0, [r2, #60]	; 0x3c
 8015b10:	4620      	mov	r0, r4
 8015b12:	6822      	ldr	r2, [r4, #0]
 8015b14:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8015b18:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8015b20:	4611      	mov	r1, r2
 8015b22:	4798      	blx	r3
 8015b24:	2201      	movs	r2, #1
 8015b26:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8015b2a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8015b2e:	1d22      	adds	r2, r4, #4
 8015b30:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8015b34:	2900      	cmp	r1, #0
 8015b36:	d051      	beq.n	8015bdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015b38:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8015b3c:	2900      	cmp	r1, #0
 8015b3e:	d04d      	beq.n	8015bdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8015b40:	6810      	ldr	r0, [r2, #0]
 8015b42:	f10d 0c18 	add.w	ip, sp, #24
 8015b46:	6851      	ldr	r1, [r2, #4]
 8015b48:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015b4c:	4641      	mov	r1, r8
 8015b4e:	a806      	add	r0, sp, #24
 8015b50:	f7ff fc76 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 8015b54:	4628      	mov	r0, r5
 8015b56:	f006 f943 	bl	801bde0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015b5a:	4680      	mov	r8, r0
 8015b5c:	f7f9 fe44 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8015b60:	6802      	ldr	r2, [r0, #0]
 8015b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015b64:	4790      	blx	r2
 8015b66:	4580      	cmp	r8, r0
 8015b68:	d03d      	beq.n	8015be6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8015b6a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015b6c:	b150      	cbz	r0, 8015b84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015b6e:	4628      	mov	r0, r5
 8015b70:	f006 f936 	bl	801bde0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015b74:	4605      	mov	r5, r0
 8015b76:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015b78:	6803      	ldr	r3, [r0, #0]
 8015b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b7c:	4798      	blx	r3
 8015b7e:	1a2b      	subs	r3, r5, r0
 8015b80:	4258      	negs	r0, r3
 8015b82:	4158      	adcs	r0, r3
 8015b84:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8015b88:	2500      	movs	r5, #0
 8015b8a:	6963      	ldr	r3, [r4, #20]
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	6822      	ldr	r2, [r4, #0]
 8015b90:	a906      	add	r1, sp, #24
 8015b92:	6165      	str	r5, [r4, #20]
 8015b94:	9303      	str	r3, [sp, #12]
 8015b96:	6892      	ldr	r2, [r2, #8]
 8015b98:	4790      	blx	r2
 8015b9a:	9b03      	ldr	r3, [sp, #12]
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	4652      	mov	r2, sl
 8015ba0:	6163      	str	r3, [r4, #20]
 8015ba2:	4649      	mov	r1, r9
 8015ba4:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8015ba8:	6823      	ldr	r3, [r4, #0]
 8015baa:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8015bae:	4c10      	ldr	r4, [pc, #64]	; (8015bf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8015bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bb2:	4798      	blx	r3
 8015bb4:	6820      	ldr	r0, [r4, #0]
 8015bb6:	9b02      	ldr	r3, [sp, #8]
 8015bb8:	9a00      	ldr	r2, [sp, #0]
 8015bba:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8015bbe:	4b0d      	ldr	r3, [pc, #52]	; (8015bf4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8015bc0:	801a      	strh	r2, [r3, #0]
 8015bc2:	4b0a      	ldr	r3, [pc, #40]	; (8015bec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015bc4:	9a01      	ldr	r2, [sp, #4]
 8015bc6:	801a      	strh	r2, [r3, #0]
 8015bc8:	6803      	ldr	r3, [r0, #0]
 8015bca:	6a1b      	ldr	r3, [r3, #32]
 8015bcc:	4798      	blx	r3
 8015bce:	6820      	ldr	r0, [r4, #0]
 8015bd0:	6803      	ldr	r3, [r0, #0]
 8015bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bd4:	4798      	blx	r3
 8015bd6:	b009      	add	sp, #36	; 0x24
 8015bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bdc:	ab06      	add	r3, sp, #24
 8015bde:	6810      	ldr	r0, [r2, #0]
 8015be0:	6851      	ldr	r1, [r2, #4]
 8015be2:	c303      	stmia	r3!, {r0, r1}
 8015be4:	e7b6      	b.n	8015b54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8015be6:	2000      	movs	r0, #0
 8015be8:	e7cc      	b.n	8015b84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015bea:	bf00      	nop
 8015bec:	2000bb8c 	.word	0x2000bb8c
 8015bf0:	2000bb90 	.word	0x2000bb90
 8015bf4:	2000bb8a 	.word	0x2000bb8a

08015bf8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015bf8:	4b07      	ldr	r3, [pc, #28]	; (8015c18 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015bfa:	b510      	push	{r4, lr}
 8015bfc:	781b      	ldrb	r3, [r3, #0]
 8015bfe:	4604      	mov	r4, r0
 8015c00:	b13b      	cbz	r3, 8015c12 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015c02:	6803      	ldr	r3, [r0, #0]
 8015c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c06:	4798      	blx	r3
 8015c08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015c0a:	4283      	cmp	r3, r0
 8015c0c:	d101      	bne.n	8015c12 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015c0e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015c10:	bd10      	pop	{r4, pc}
 8015c12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015c14:	e7fc      	b.n	8015c10 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015c16:	bf00      	nop
 8015c18:	2000bb8e 	.word	0x2000bb8e

08015c1c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015c1c:	4b0b      	ldr	r3, [pc, #44]	; (8015c4c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8015c1e:	b510      	push	{r4, lr}
 8015c20:	781b      	ldrb	r3, [r3, #0]
 8015c22:	4604      	mov	r4, r0
 8015c24:	b95b      	cbnz	r3, 8015c3e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015c26:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015c2a:	2b02      	cmp	r3, #2
 8015c2c:	d007      	beq.n	8015c3e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015c2e:	6840      	ldr	r0, [r0, #4]
 8015c30:	f000 fbc8 	bl	80163c4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015c34:	b118      	cbz	r0, 8015c3e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015c36:	6862      	ldr	r2, [r4, #4]
 8015c38:	7a53      	ldrb	r3, [r2, #9]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d0fc      	beq.n	8015c38 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015c3e:	f7fd fbb3 	bl	80133a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015c42:	4620      	mov	r0, r4
 8015c44:	f7ff ffd8 	bl	8015bf8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015c48:	bd10      	pop	{r4, pc}
 8015c4a:	bf00      	nop
 8015c4c:	2000bb8e 	.word	0x2000bb8e

08015c50 <_ZN8touchgfx3HAL10initializeEv>:
 8015c50:	b510      	push	{r4, lr}
 8015c52:	4604      	mov	r4, r0
 8015c54:	f7fd fb84 	bl	8013360 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015c58:	6860      	ldr	r0, [r4, #4]
 8015c5a:	6803      	ldr	r3, [r0, #0]
 8015c5c:	68db      	ldr	r3, [r3, #12]
 8015c5e:	4798      	blx	r3
 8015c60:	68e0      	ldr	r0, [r4, #12]
 8015c62:	6803      	ldr	r3, [r0, #0]
 8015c64:	689b      	ldr	r3, [r3, #8]
 8015c66:	4798      	blx	r3
 8015c68:	6823      	ldr	r3, [r4, #0]
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c72:	4718      	bx	r3

08015c74 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015c74:	b508      	push	{r3, lr}
 8015c76:	290c      	cmp	r1, #12
 8015c78:	d817      	bhi.n	8015caa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015c7a:	e8df f001 	tbb	[pc, r1]
 8015c7e:	090b      	.short	0x090b
 8015c80:	0d0d0d07 	.word	0x0d0d0d07
 8015c84:	1414140d 	.word	0x1414140d
 8015c88:	1414      	.short	0x1414
 8015c8a:	0d          	.byte	0x0d
 8015c8b:	00          	.byte	0x00
 8015c8c:	2020      	movs	r0, #32
 8015c8e:	bd08      	pop	{r3, pc}
 8015c90:	2018      	movs	r0, #24
 8015c92:	e7fc      	b.n	8015c8e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015c94:	2010      	movs	r0, #16
 8015c96:	e7fa      	b.n	8015c8e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015c98:	4b05      	ldr	r3, [pc, #20]	; (8015cb0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015c9a:	f44f 710c 	mov.w	r1, #560	; 0x230
 8015c9e:	4a05      	ldr	r2, [pc, #20]	; (8015cb4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015ca0:	4805      	ldr	r0, [pc, #20]	; (8015cb8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8015ca2:	f00f fc63 	bl	802556c <__assert_func>
 8015ca6:	2008      	movs	r0, #8
 8015ca8:	e7f1      	b.n	8015c8e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015caa:	2000      	movs	r0, #0
 8015cac:	e7ef      	b.n	8015c8e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015cae:	bf00      	nop
 8015cb0:	0802805f 	.word	0x0802805f
 8015cb4:	080283f4 	.word	0x080283f4
 8015cb8:	08027f66 	.word	0x08027f66

08015cbc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015cbc:	b570      	push	{r4, r5, r6, lr}
 8015cbe:	460d      	mov	r5, r1
 8015cc0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015cc4:	4616      	mov	r6, r2
 8015cc6:	461c      	mov	r4, r3
 8015cc8:	f7ff ffd4 	bl	8015c74 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015ccc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015cd0:	10c0      	asrs	r0, r0, #3
 8015cd2:	fb06 5101 	mla	r1, r6, r1, r5
 8015cd6:	fb00 4001 	mla	r0, r0, r1, r4
 8015cda:	bd70      	pop	{r4, r5, r6, pc}

08015cdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ce0:	b08a      	sub	sp, #40	; 0x28
 8015ce2:	f04f 0c00 	mov.w	ip, #0
 8015ce6:	4604      	mov	r4, r0
 8015ce8:	469a      	mov	sl, r3
 8015cea:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015cee:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015cf2:	f1b8 0f02 	cmp.w	r8, #2
 8015cf6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015cfa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015cfe:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015d02:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015d06:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015d0a:	f8cd c020 	str.w	ip, [sp, #32]
 8015d0e:	d030      	beq.n	8015d72 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015d10:	2bff      	cmp	r3, #255	; 0xff
 8015d12:	d12c      	bne.n	8015d6e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8015d14:	4560      	cmp	r0, ip
 8015d16:	bf14      	ite	ne
 8015d18:	2004      	movne	r0, #4
 8015d1a:	2001      	moveq	r0, #1
 8015d1c:	9204      	str	r2, [sp, #16]
 8015d1e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015d22:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015d26:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015d2a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015d2e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d36:	4620      	mov	r0, r4
 8015d38:	f7ff ff5e 	bl	8015bf8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015d3c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015d40:	4603      	mov	r3, r0
 8015d42:	4651      	mov	r1, sl
 8015d44:	4620      	mov	r0, r4
 8015d46:	e9cd 9700 	strd	r9, r7, [sp]
 8015d4a:	f7ff ffb7 	bl	8015cbc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015d4e:	f8ad 901e 	strh.w	r9, [sp, #30]
 8015d52:	9005      	str	r0, [sp, #20]
 8015d54:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8015d58:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015d5c:	b106      	cbz	r6, 8015d60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8015d5e:	b98d      	cbnz	r5, 8015d84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8015d60:	4b12      	ldr	r3, [pc, #72]	; (8015dac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8015d62:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8015d66:	4a12      	ldr	r2, [pc, #72]	; (8015db0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015d68:	4812      	ldr	r0, [pc, #72]	; (8015db4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015d6a:	f00f fbff 	bl	802556c <__assert_func>
 8015d6e:	2004      	movs	r0, #4
 8015d70:	e7d4      	b.n	8015d1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015d72:	2bff      	cmp	r3, #255	; 0xff
 8015d74:	d104      	bne.n	8015d80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	bf14      	ite	ne
 8015d7a:	2040      	movne	r0, #64	; 0x40
 8015d7c:	2020      	moveq	r0, #32
 8015d7e:	e7cd      	b.n	8015d1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015d80:	2040      	movs	r0, #64	; 0x40
 8015d82:	e7cb      	b.n	8015d1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015d84:	6823      	ldr	r3, [r4, #0]
 8015d86:	4620      	mov	r0, r4
 8015d88:	9d02      	ldr	r5, [sp, #8]
 8015d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d8c:	4798      	blx	r3
 8015d8e:	4228      	tst	r0, r5
 8015d90:	d104      	bne.n	8015d9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8015d92:	4b09      	ldr	r3, [pc, #36]	; (8015db8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015d94:	f240 11b1 	movw	r1, #433	; 0x1b1
 8015d98:	4a05      	ldr	r2, [pc, #20]	; (8015db0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015d9a:	e7e5      	b.n	8015d68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8015d9c:	6860      	ldr	r0, [r4, #4]
 8015d9e:	a902      	add	r1, sp, #8
 8015da0:	6803      	ldr	r3, [r0, #0]
 8015da2:	685b      	ldr	r3, [r3, #4]
 8015da4:	4798      	blx	r3
 8015da6:	b00a      	add	sp, #40	; 0x28
 8015da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dac:	08027fe2 	.word	0x08027fe2
 8015db0:	08028296 	.word	0x08028296
 8015db4:	08027f66 	.word	0x08027f66
 8015db8:	0802801a 	.word	0x0802801a

08015dbc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015dbc:	b510      	push	{r4, lr}
 8015dbe:	b08a      	sub	sp, #40	; 0x28
 8015dc0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8015dc4:	9408      	str	r4, [sp, #32]
 8015dc6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8015dca:	9407      	str	r4, [sp, #28]
 8015dcc:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8015dd0:	9406      	str	r4, [sp, #24]
 8015dd2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8015dd6:	9405      	str	r4, [sp, #20]
 8015dd8:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8015ddc:	9404      	str	r4, [sp, #16]
 8015dde:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8015de2:	9403      	str	r4, [sp, #12]
 8015de4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8015de8:	9402      	str	r4, [sp, #8]
 8015dea:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015dee:	e9cd 3400 	strd	r3, r4, [sp]
 8015df2:	4613      	mov	r3, r2
 8015df4:	2200      	movs	r2, #0
 8015df6:	f7ff ff71 	bl	8015cdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015dfa:	b00a      	add	sp, #40	; 0x28
 8015dfc:	bd10      	pop	{r4, pc}
	...

08015e00 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8015e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e02:	b08b      	sub	sp, #44	; 0x2c
 8015e04:	4616      	mov	r6, r2
 8015e06:	460d      	mov	r5, r1
 8015e08:	461f      	mov	r7, r3
 8015e0a:	4604      	mov	r4, r0
 8015e0c:	f7f9 fcec 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8015e10:	6803      	ldr	r3, [r0, #0]
 8015e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e14:	4798      	blx	r3
 8015e16:	4b0e      	ldr	r3, [pc, #56]	; (8015e50 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8015e18:	2200      	movs	r2, #0
 8015e1a:	4629      	mov	r1, r5
 8015e1c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015e20:	881b      	ldrh	r3, [r3, #0]
 8015e22:	4620      	mov	r0, r4
 8015e24:	9306      	str	r3, [sp, #24]
 8015e26:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015e2a:	9305      	str	r3, [sp, #20]
 8015e2c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015e30:	9304      	str	r3, [sp, #16]
 8015e32:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015e36:	9303      	str	r3, [sp, #12]
 8015e38:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015e3c:	9302      	str	r3, [sp, #8]
 8015e3e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015e42:	e9cd 7300 	strd	r7, r3, [sp]
 8015e46:	4633      	mov	r3, r6
 8015e48:	f7ff ff48 	bl	8015cdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015e4c:	b00b      	add	sp, #44	; 0x2c
 8015e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e50:	2000bb8a 	.word	0x2000bb8a

08015e54 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8015e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e58:	461f      	mov	r7, r3
 8015e5a:	4b14      	ldr	r3, [pc, #80]	; (8015eac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8015e5c:	b08a      	sub	sp, #40	; 0x28
 8015e5e:	4616      	mov	r6, r2
 8015e60:	f8b3 8000 	ldrh.w	r8, [r3]
 8015e64:	460d      	mov	r5, r1
 8015e66:	4604      	mov	r4, r0
 8015e68:	f7f9 fcbe 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8015e6c:	6803      	ldr	r3, [r0, #0]
 8015e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e70:	4798      	blx	r3
 8015e72:	2302      	movs	r3, #2
 8015e74:	9008      	str	r0, [sp, #32]
 8015e76:	2200      	movs	r2, #0
 8015e78:	4629      	mov	r1, r5
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8015e80:	2301      	movs	r3, #1
 8015e82:	9305      	str	r3, [sp, #20]
 8015e84:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015e88:	9304      	str	r3, [sp, #16]
 8015e8a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015e8e:	9303      	str	r3, [sp, #12]
 8015e90:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015e94:	9302      	str	r3, [sp, #8]
 8015e96:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015e9a:	e9cd 7300 	strd	r7, r3, [sp]
 8015e9e:	4633      	mov	r3, r6
 8015ea0:	f7ff ff1c 	bl	8015cdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015ea4:	b00a      	add	sp, #40	; 0x28
 8015ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eaa:	bf00      	nop
 8015eac:	2000bb8a 	.word	0x2000bb8a

08015eb0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8015eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eb4:	b08b      	sub	sp, #44	; 0x2c
 8015eb6:	469b      	mov	fp, r3
 8015eb8:	4604      	mov	r4, r0
 8015eba:	4692      	mov	sl, r2
 8015ebc:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015ec0:	2600      	movs	r6, #0
 8015ec2:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8015ec6:	4689      	mov	r9, r1
 8015ec8:	2fff      	cmp	r7, #255	; 0xff
 8015eca:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8015ece:	9608      	str	r6, [sp, #32]
 8015ed0:	bf14      	ite	ne
 8015ed2:	2308      	movne	r3, #8
 8015ed4:	2302      	moveq	r3, #2
 8015ed6:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8015eda:	f7ff fe8d 	bl	8015bf8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015ede:	465a      	mov	r2, fp
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	4651      	mov	r1, sl
 8015ee4:	4620      	mov	r0, r4
 8015ee6:	e9cd 8500 	strd	r8, r5, [sp]
 8015eea:	f7ff fee7 	bl	8015cbc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015eee:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015ef2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8015ef6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015efa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015efe:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8015f02:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f06:	6823      	ldr	r3, [r4, #0]
 8015f08:	9d02      	ldr	r5, [sp, #8]
 8015f0a:	9005      	str	r0, [sp, #20]
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8015f12:	f8ad 801e 	strh.w	r8, [sp, #30]
 8015f16:	f8cd 9020 	str.w	r9, [sp, #32]
 8015f1a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f20:	4798      	blx	r3
 8015f22:	4228      	tst	r0, r5
 8015f24:	d106      	bne.n	8015f34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8015f26:	4b07      	ldr	r3, [pc, #28]	; (8015f44 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015f28:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8015f2c:	4a06      	ldr	r2, [pc, #24]	; (8015f48 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015f2e:	4807      	ldr	r0, [pc, #28]	; (8015f4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015f30:	f00f fb1c 	bl	802556c <__assert_func>
 8015f34:	6860      	ldr	r0, [r4, #4]
 8015f36:	a902      	add	r1, sp, #8
 8015f38:	6803      	ldr	r3, [r0, #0]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	4798      	blx	r3
 8015f3e:	b00b      	add	sp, #44	; 0x2c
 8015f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f44:	0802801a 	.word	0x0802801a
 8015f48:	0802835f 	.word	0x0802835f
 8015f4c:	08027f66 	.word	0x08027f66

08015f50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015f50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015f54:	461f      	mov	r7, r3
 8015f56:	4b0b      	ldr	r3, [pc, #44]	; (8015f84 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015f58:	460d      	mov	r5, r1
 8015f5a:	4616      	mov	r6, r2
 8015f5c:	f8b3 8000 	ldrh.w	r8, [r3]
 8015f60:	4604      	mov	r4, r0
 8015f62:	f7f9 fc41 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8015f66:	6803      	ldr	r3, [r0, #0]
 8015f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f6a:	4798      	blx	r3
 8015f6c:	463b      	mov	r3, r7
 8015f6e:	4632      	mov	r2, r6
 8015f70:	4629      	mov	r1, r5
 8015f72:	e9cd 8000 	strd	r8, r0, [sp]
 8015f76:	4620      	mov	r0, r4
 8015f78:	f7ff fea0 	bl	8015cbc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015f7c:	b002      	add	sp, #8
 8015f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f82:	bf00      	nop
 8015f84:	2000bb8a 	.word	0x2000bb8a

08015f88 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8015f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f8c:	4698      	mov	r8, r3
 8015f8e:	b088      	sub	sp, #32
 8015f90:	2300      	movs	r3, #0
 8015f92:	4617      	mov	r7, r2
 8015f94:	4604      	mov	r4, r0
 8015f96:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015f9a:	9306      	str	r3, [sp, #24]
 8015f9c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015fa0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015fa4:	f8ad 6010 	strh.w	r6, [sp, #16]
 8015fa8:	f8ad 5012 	strh.w	r5, [sp, #18]
 8015fac:	e9cd 3100 	strd	r3, r1, [sp]
 8015fb0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015fb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015fb8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015fbc:	f88d 301c 	strb.w	r3, [sp, #28]
 8015fc0:	f7ff fe1a 	bl	8015bf8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015fc4:	4642      	mov	r2, r8
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	4639      	mov	r1, r7
 8015fca:	4620      	mov	r0, r4
 8015fcc:	f7ff ffc0 	bl	8015f50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015fd0:	4b16      	ldr	r3, [pc, #88]	; (801602c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8015fd2:	9003      	str	r0, [sp, #12]
 8015fd4:	881b      	ldrh	r3, [r3, #0]
 8015fd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015fda:	f7f9 fc05 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8015fde:	6803      	ldr	r3, [r0, #0]
 8015fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fe2:	4798      	blx	r3
 8015fe4:	f88d 001e 	strb.w	r0, [sp, #30]
 8015fe8:	f88d 001d 	strb.w	r0, [sp, #29]
 8015fec:	b106      	cbz	r6, 8015ff0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8015fee:	b935      	cbnz	r5, 8015ffe <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8015ff0:	4b0f      	ldr	r3, [pc, #60]	; (8016030 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8015ff2:	f240 11cd 	movw	r1, #461	; 0x1cd
 8015ff6:	4a0f      	ldr	r2, [pc, #60]	; (8016034 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015ff8:	480f      	ldr	r0, [pc, #60]	; (8016038 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8015ffa:	f00f fab7 	bl	802556c <__assert_func>
 8015ffe:	6823      	ldr	r3, [r4, #0]
 8016000:	4620      	mov	r0, r4
 8016002:	9d00      	ldr	r5, [sp, #0]
 8016004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016006:	4798      	blx	r3
 8016008:	4228      	tst	r0, r5
 801600a:	d104      	bne.n	8016016 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 801600c:	4b0b      	ldr	r3, [pc, #44]	; (801603c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801600e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8016012:	4a08      	ldr	r2, [pc, #32]	; (8016034 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016014:	e7f0      	b.n	8015ff8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8016016:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016018:	4669      	mov	r1, sp
 801601a:	6860      	ldr	r0, [r4, #4]
 801601c:	9306      	str	r3, [sp, #24]
 801601e:	6803      	ldr	r3, [r0, #0]
 8016020:	685b      	ldr	r3, [r3, #4]
 8016022:	4798      	blx	r3
 8016024:	b008      	add	sp, #32
 8016026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801602a:	bf00      	nop
 801602c:	2000bb8a 	.word	0x2000bb8a
 8016030:	08027fe2 	.word	0x08027fe2
 8016034:	08028148 	.word	0x08028148
 8016038:	08027f66 	.word	0x08027f66
 801603c:	0802801a 	.word	0x0802801a

08016040 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016040:	b570      	push	{r4, r5, r6, lr}
 8016042:	b08a      	sub	sp, #40	; 0x28
 8016044:	4604      	mov	r4, r0
 8016046:	466b      	mov	r3, sp
 8016048:	e883 0006 	stmia.w	r3, {r1, r2}
 801604c:	4b1f      	ldr	r3, [pc, #124]	; (80160cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801604e:	781b      	ldrb	r3, [r3, #0]
 8016050:	b933      	cbnz	r3, 8016060 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016052:	4b1f      	ldr	r3, [pc, #124]	; (80160d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016054:	f240 11f9 	movw	r1, #505	; 0x1f9
 8016058:	4a1e      	ldr	r2, [pc, #120]	; (80160d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801605a:	481f      	ldr	r0, [pc, #124]	; (80160d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801605c:	f00f fa86 	bl	802556c <__assert_func>
 8016060:	2300      	movs	r3, #0
 8016062:	f8bd 5000 	ldrh.w	r5, [sp]
 8016066:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801606a:	9308      	str	r3, [sp, #32]
 801606c:	2301      	movs	r3, #1
 801606e:	9302      	str	r3, [sp, #8]
 8016070:	6803      	ldr	r3, [r0, #0]
 8016072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016074:	4798      	blx	r3
 8016076:	4632      	mov	r2, r6
 8016078:	4629      	mov	r1, r5
 801607a:	4603      	mov	r3, r0
 801607c:	4620      	mov	r0, r4
 801607e:	f7ff ff67 	bl	8015f50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016082:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016084:	9003      	str	r0, [sp, #12]
 8016086:	9305      	str	r3, [sp, #20]
 8016088:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801608c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016090:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016094:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016098:	4b10      	ldr	r3, [pc, #64]	; (80160dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801609a:	881b      	ldrh	r3, [r3, #0]
 801609c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80160a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80160a4:	f7f9 fba0 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 80160a8:	6803      	ldr	r3, [r0, #0]
 80160aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ac:	4798      	blx	r3
 80160ae:	23ff      	movs	r3, #255	; 0xff
 80160b0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80160b4:	a902      	add	r1, sp, #8
 80160b6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80160ba:	6860      	ldr	r0, [r4, #4]
 80160bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80160c0:	6803      	ldr	r3, [r0, #0]
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	4798      	blx	r3
 80160c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80160c8:	b00a      	add	sp, #40	; 0x28
 80160ca:	bd70      	pop	{r4, r5, r6, pc}
 80160cc:	2000bb8f 	.word	0x2000bb8f
 80160d0:	08027eb3 	.word	0x08027eb3
 80160d4:	080281ec 	.word	0x080281ec
 80160d8:	08027f66 	.word	0x08027f66
 80160dc:	2000bb8a 	.word	0x2000bb8a

080160e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80160e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160e2:	b08b      	sub	sp, #44	; 0x2c
 80160e4:	4604      	mov	r4, r0
 80160e6:	466d      	mov	r5, sp
 80160e8:	e885 0006 	stmia.w	r5, {r1, r2}
 80160ec:	461d      	mov	r5, r3
 80160ee:	2300      	movs	r3, #0
 80160f0:	f8bd 6000 	ldrh.w	r6, [sp]
 80160f4:	9308      	str	r3, [sp, #32]
 80160f6:	2301      	movs	r3, #1
 80160f8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80160fc:	9302      	str	r3, [sp, #8]
 80160fe:	6803      	ldr	r3, [r0, #0]
 8016100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016102:	4798      	blx	r3
 8016104:	463a      	mov	r2, r7
 8016106:	4631      	mov	r1, r6
 8016108:	4603      	mov	r3, r0
 801610a:	4620      	mov	r0, r4
 801610c:	f7ff ff20 	bl	8015f50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016110:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016114:	9003      	str	r0, [sp, #12]
 8016116:	f8ad 3018 	strh.w	r3, [sp, #24]
 801611a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801611e:	9505      	str	r5, [sp, #20]
 8016120:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016124:	4b0d      	ldr	r3, [pc, #52]	; (801615c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016126:	881b      	ldrh	r3, [r3, #0]
 8016128:	f8ad 301c 	strh.w	r3, [sp, #28]
 801612c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801612e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016132:	f7f9 fb59 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8016136:	6803      	ldr	r3, [r0, #0]
 8016138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801613a:	4798      	blx	r3
 801613c:	23ff      	movs	r3, #255	; 0xff
 801613e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016142:	a902      	add	r1, sp, #8
 8016144:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016148:	6860      	ldr	r0, [r4, #4]
 801614a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801614e:	6803      	ldr	r3, [r0, #0]
 8016150:	685b      	ldr	r3, [r3, #4]
 8016152:	4798      	blx	r3
 8016154:	4628      	mov	r0, r5
 8016156:	b00b      	add	sp, #44	; 0x2c
 8016158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801615a:	bf00      	nop
 801615c:	2000bb8a 	.word	0x2000bb8a

08016160 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016160:	b570      	push	{r4, r5, r6, lr}
 8016162:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016166:	4604      	mov	r4, r0
 8016168:	b19b      	cbz	r3, 8016192 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801616a:	2002      	movs	r0, #2
 801616c:	f7fc fe84 	bl	8012e78 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016170:	2300      	movs	r3, #0
 8016172:	4620      	mov	r0, r4
 8016174:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016178:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801617c:	6823      	ldr	r3, [r4, #0]
 801617e:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8016182:	f7ff fd39 	bl	8015bf8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016186:	4601      	mov	r1, r0
 8016188:	4620      	mov	r0, r4
 801618a:	462b      	mov	r3, r5
 801618c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016190:	4718      	bx	r3
 8016192:	bd70      	pop	{r4, r5, r6, pc}

08016194 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016194:	4770      	bx	lr

08016196 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016196:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801619a:	1a13      	subs	r3, r2, r0
 801619c:	4258      	negs	r0, r3
 801619e:	4158      	adcs	r0, r3
 80161a0:	4770      	bx	lr

080161a2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80161a2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80161a6:	1a9b      	subs	r3, r3, r2
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	bfdc      	itt	le
 80161ac:	6882      	ldrle	r2, [r0, #8]
 80161ae:	189b      	addle	r3, r3, r2
 80161b0:	2b01      	cmp	r3, #1
 80161b2:	bfcc      	ite	gt
 80161b4:	2000      	movgt	r0, #0
 80161b6:	2001      	movle	r0, #1
 80161b8:	4770      	bx	lr

080161ba <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80161ba:	6902      	ldr	r2, [r0, #16]
 80161bc:	6840      	ldr	r0, [r0, #4]
 80161be:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80161c2:	4770      	bx	lr

080161c4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80161c4:	6803      	ldr	r3, [r0, #0]
 80161c6:	691b      	ldr	r3, [r3, #16]
 80161c8:	4718      	bx	r3

080161ca <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80161ca:	4770      	bx	lr

080161cc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80161cc:	4770      	bx	lr
	...

080161d0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80161d0:	2301      	movs	r3, #1
 80161d2:	b570      	push	{r4, r5, r6, lr}
 80161d4:	7203      	strb	r3, [r0, #8]
 80161d6:	4604      	mov	r4, r0
 80161d8:	6840      	ldr	r0, [r0, #4]
 80161da:	6803      	ldr	r3, [r0, #0]
 80161dc:	699b      	ldr	r3, [r3, #24]
 80161de:	4798      	blx	r3
 80161e0:	6803      	ldr	r3, [r0, #0]
 80161e2:	4605      	mov	r5, r0
 80161e4:	2b08      	cmp	r3, #8
 80161e6:	d01e      	beq.n	8016226 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80161e8:	d80b      	bhi.n	8016202 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80161ea:	2b02      	cmp	r3, #2
 80161ec:	d027      	beq.n	801623e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80161ee:	2b04      	cmp	r3, #4
 80161f0:	d011      	beq.n	8016216 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80161f2:	2b01      	cmp	r3, #1
 80161f4:	d028      	beq.n	8016248 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80161f6:	4b17      	ldr	r3, [pc, #92]	; (8016254 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80161f8:	218b      	movs	r1, #139	; 0x8b
 80161fa:	4a17      	ldr	r2, [pc, #92]	; (8016258 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80161fc:	4817      	ldr	r0, [pc, #92]	; (801625c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80161fe:	f00f f9b5 	bl	802556c <__assert_func>
 8016202:	2b40      	cmp	r3, #64	; 0x40
 8016204:	d020      	beq.n	8016248 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016206:	d801      	bhi.n	801620c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016208:	2b20      	cmp	r3, #32
 801620a:	e7f3      	b.n	80161f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801620c:	2b80      	cmp	r3, #128	; 0x80
 801620e:	d01b      	beq.n	8016248 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016214:	e7ee      	b.n	80161f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016216:	6823      	ldr	r3, [r4, #0]
 8016218:	7f01      	ldrb	r1, [r0, #28]
 801621a:	4620      	mov	r0, r4
 801621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801621e:	4798      	blx	r3
 8016220:	6823      	ldr	r3, [r4, #0]
 8016222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016224:	e006      	b.n	8016234 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016226:	6823      	ldr	r3, [r4, #0]
 8016228:	7f01      	ldrb	r1, [r0, #28]
 801622a:	4620      	mov	r0, r4
 801622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801622e:	4798      	blx	r3
 8016230:	6823      	ldr	r3, [r4, #0]
 8016232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016234:	4629      	mov	r1, r5
 8016236:	4620      	mov	r0, r4
 8016238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801623c:	4718      	bx	r3
 801623e:	6823      	ldr	r3, [r4, #0]
 8016240:	4620      	mov	r0, r4
 8016242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016244:	4798      	blx	r3
 8016246:	e7f3      	b.n	8016230 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016248:	6823      	ldr	r3, [r4, #0]
 801624a:	4620      	mov	r0, r4
 801624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801624e:	4798      	blx	r3
 8016250:	e7e6      	b.n	8016220 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8016252:	bf00      	nop
 8016254:	0802843d 	.word	0x0802843d
 8016258:	0802854c 	.word	0x0802854c
 801625c:	08028462 	.word	0x08028462

08016260 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016260:	b570      	push	{r4, r5, r6, lr}
 8016262:	4604      	mov	r4, r0
 8016264:	460e      	mov	r6, r1
 8016266:	6860      	ldr	r0, [r4, #4]
 8016268:	6803      	ldr	r3, [r0, #0]
 801626a:	685b      	ldr	r3, [r3, #4]
 801626c:	4798      	blx	r3
 801626e:	2800      	cmp	r0, #0
 8016270:	d1f9      	bne.n	8016266 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016272:	4d0b      	ldr	r5, [pc, #44]	; (80162a0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016274:	6828      	ldr	r0, [r5, #0]
 8016276:	6803      	ldr	r3, [r0, #0]
 8016278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801627a:	4798      	blx	r3
 801627c:	f7fd f8b0 	bl	80133e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016280:	6860      	ldr	r0, [r4, #4]
 8016282:	4631      	mov	r1, r6
 8016284:	6803      	ldr	r3, [r0, #0]
 8016286:	689b      	ldr	r3, [r3, #8]
 8016288:	4798      	blx	r3
 801628a:	6823      	ldr	r3, [r4, #0]
 801628c:	4620      	mov	r0, r4
 801628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016290:	4798      	blx	r3
 8016292:	6828      	ldr	r0, [r5, #0]
 8016294:	6803      	ldr	r3, [r0, #0]
 8016296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801629a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801629c:	4718      	bx	r3
 801629e:	bf00      	nop
 80162a0:	2000bb90 	.word	0x2000bb90

080162a4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80162a4:	b508      	push	{r3, lr}
 80162a6:	f7fd f87f 	bl	80133a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80162aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80162ae:	f7fd b889 	b.w	80133c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080162b2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80162b2:	b510      	push	{r4, lr}
 80162b4:	4604      	mov	r4, r0
 80162b6:	6840      	ldr	r0, [r0, #4]
 80162b8:	6803      	ldr	r3, [r0, #0]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	4798      	blx	r3
 80162be:	b948      	cbnz	r0, 80162d4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80162c0:	7a63      	ldrb	r3, [r4, #9]
 80162c2:	b13b      	cbz	r3, 80162d4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80162c4:	7a23      	ldrb	r3, [r4, #8]
 80162c6:	b92b      	cbnz	r3, 80162d4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80162c8:	6823      	ldr	r3, [r4, #0]
 80162ca:	4620      	mov	r0, r4
 80162cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162d2:	4718      	bx	r3
 80162d4:	bd10      	pop	{r4, pc}
	...

080162d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80162d8:	b510      	push	{r4, lr}
 80162da:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80162de:	1b12      	subs	r2, r2, r4
 80162e0:	2a00      	cmp	r2, #0
 80162e2:	bfdc      	itt	le
 80162e4:	6883      	ldrle	r3, [r0, #8]
 80162e6:	18d2      	addle	r2, r2, r3
 80162e8:	2a01      	cmp	r2, #1
 80162ea:	dd18      	ble.n	801631e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80162ec:	6843      	ldr	r3, [r0, #4]
 80162ee:	f101 021c 	add.w	r2, r1, #28
 80162f2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80162f6:	f851 4b04 	ldr.w	r4, [r1], #4
 80162fa:	4291      	cmp	r1, r2
 80162fc:	f843 4b04 	str.w	r4, [r3], #4
 8016300:	d1f9      	bne.n	80162f6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016302:	880a      	ldrh	r2, [r1, #0]
 8016304:	801a      	strh	r2, [r3, #0]
 8016306:	788a      	ldrb	r2, [r1, #2]
 8016308:	709a      	strb	r2, [r3, #2]
 801630a:	68c3      	ldr	r3, [r0, #12]
 801630c:	6882      	ldr	r2, [r0, #8]
 801630e:	f3bf 8f5b 	dmb	ish
 8016312:	3301      	adds	r3, #1
 8016314:	429a      	cmp	r2, r3
 8016316:	bfd8      	it	le
 8016318:	1a9b      	suble	r3, r3, r2
 801631a:	60c3      	str	r3, [r0, #12]
 801631c:	bd10      	pop	{r4, pc}
 801631e:	4b03      	ldr	r3, [pc, #12]	; (801632c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016320:	2139      	movs	r1, #57	; 0x39
 8016322:	4a03      	ldr	r2, [pc, #12]	; (8016330 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016324:	4803      	ldr	r0, [pc, #12]	; (8016334 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016326:	f00f f921 	bl	802556c <__assert_func>
 801632a:	bf00      	nop
 801632c:	08028488 	.word	0x08028488
 8016330:	0802857c 	.word	0x0802857c
 8016334:	08028462 	.word	0x08028462

08016338 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016338:	b510      	push	{r4, lr}
 801633a:	6803      	ldr	r3, [r0, #0]
 801633c:	4604      	mov	r4, r0
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	4798      	blx	r3
 8016342:	b128      	cbz	r0, 8016350 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016344:	4b07      	ldr	r3, [pc, #28]	; (8016364 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016346:	213f      	movs	r1, #63	; 0x3f
 8016348:	4a07      	ldr	r2, [pc, #28]	; (8016368 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801634a:	4808      	ldr	r0, [pc, #32]	; (801636c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801634c:	f00f f90e 	bl	802556c <__assert_func>
 8016350:	6923      	ldr	r3, [r4, #16]
 8016352:	68a2      	ldr	r2, [r4, #8]
 8016354:	f3bf 8f5b 	dmb	ish
 8016358:	3301      	adds	r3, #1
 801635a:	429a      	cmp	r2, r3
 801635c:	bfd8      	it	le
 801635e:	1a9b      	suble	r3, r3, r2
 8016360:	6123      	str	r3, [r4, #16]
 8016362:	bd10      	pop	{r4, pc}
 8016364:	080284ab 	.word	0x080284ab
 8016368:	080285ca 	.word	0x080285ca
 801636c:	08028462 	.word	0x08028462

08016370 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016370:	b570      	push	{r4, r5, r6, lr}
 8016372:	4604      	mov	r4, r0
 8016374:	6840      	ldr	r0, [r0, #4]
 8016376:	6803      	ldr	r3, [r0, #0]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	4798      	blx	r3
 801637c:	4605      	mov	r5, r0
 801637e:	b930      	cbnz	r0, 801638e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016380:	7a23      	ldrb	r3, [r4, #8]
 8016382:	b123      	cbz	r3, 801638e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016384:	6860      	ldr	r0, [r4, #4]
 8016386:	6803      	ldr	r3, [r0, #0]
 8016388:	695b      	ldr	r3, [r3, #20]
 801638a:	4798      	blx	r3
 801638c:	7225      	strb	r5, [r4, #8]
 801638e:	6860      	ldr	r0, [r4, #4]
 8016390:	6803      	ldr	r3, [r0, #0]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	4798      	blx	r3
 8016396:	b928      	cbnz	r0, 80163a4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016398:	6823      	ldr	r3, [r4, #0]
 801639a:	4620      	mov	r0, r4
 801639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801639e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163a2:	4718      	bx	r3
 80163a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163a8:	f7fd b826 	b.w	80133f8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080163ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80163ac:	b510      	push	{r4, lr}
 80163ae:	6082      	str	r2, [r0, #8]
 80163b0:	2200      	movs	r2, #0
 80163b2:	4c03      	ldr	r4, [pc, #12]	; (80163c0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80163b4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80163b8:	e9c0 4100 	strd	r4, r1, [r0]
 80163bc:	bd10      	pop	{r4, pc}
 80163be:	bf00      	nop
 80163c0:	08028530 	.word	0x08028530

080163c4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80163c4:	6840      	ldr	r0, [r0, #4]
 80163c6:	6803      	ldr	r3, [r0, #0]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	4718      	bx	r3

080163cc <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 80163cc:	2001      	movs	r0, #1
 80163ce:	4770      	bx	lr

080163d0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 80163d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163d4:	460d      	mov	r5, r1
 80163d6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80163da:	b085      	sub	sp, #20
 80163dc:	4690      	mov	r8, r2
 80163de:	4411      	add	r1, r2
 80163e0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80163e4:	4699      	mov	r9, r3
 80163e6:	6803      	ldr	r3, [r0, #0]
 80163e8:	60c1      	str	r1, [r0, #12]
 80163ea:	4604      	mov	r4, r0
 80163ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80163ee:	440a      	add	r2, r1
 80163f0:	6102      	str	r2, [r0, #16]
 80163f2:	68db      	ldr	r3, [r3, #12]
 80163f4:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80163f8:	4798      	blx	r3
 80163fa:	2800      	cmp	r0, #0
 80163fc:	d039      	beq.n	8016472 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 80163fe:	44c8      	add	r8, r9
 8016400:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016404:	4445      	add	r5, r8
 8016406:	6823      	ldr	r3, [r4, #0]
 8016408:	f10d 020f 	add.w	r2, sp, #15
 801640c:	a903      	add	r1, sp, #12
 801640e:	4620      	mov	r0, r4
 8016410:	9200      	str	r2, [sp, #0]
 8016412:	f10d 020d 	add.w	r2, sp, #13
 8016416:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801641a:	f10d 030e 	add.w	r3, sp, #14
 801641e:	47c0      	blx	r8
 8016420:	b1f8      	cbz	r0, 8016462 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8016422:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016426:	7a20      	ldrb	r0, [r4, #8]
 8016428:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801642c:	4358      	muls	r0, r3
 801642e:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016432:	1c43      	adds	r3, r0, #1
 8016434:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016438:	f817 0b01 	ldrb.w	r0, [r7], #1
 801643c:	121b      	asrs	r3, r3, #8
 801643e:	fb10 f003 	smulbb	r0, r0, r3
 8016442:	b283      	uxth	r3, r0
 8016444:	1c58      	adds	r0, r3, #1
 8016446:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801644a:	6823      	ldr	r3, [r4, #0]
 801644c:	1200      	asrs	r0, r0, #8
 801644e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8016452:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016456:	28ff      	cmp	r0, #255	; 0xff
 8016458:	d10e      	bne.n	8016478 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 801645a:	9100      	str	r1, [sp, #0]
 801645c:	4629      	mov	r1, r5
 801645e:	4620      	mov	r0, r4
 8016460:	47c0      	blx	r8
 8016462:	68e3      	ldr	r3, [r4, #12]
 8016464:	3e01      	subs	r6, #1
 8016466:	f105 0503 	add.w	r5, r5, #3
 801646a:	f103 0301 	add.w	r3, r3, #1
 801646e:	60e3      	str	r3, [r4, #12]
 8016470:	d1c9      	bne.n	8016406 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8016472:	b005      	add	sp, #20
 8016474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016478:	fa1f fc80 	uxth.w	ip, r0
 801647c:	43c0      	mvns	r0, r0
 801647e:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016482:	fb12 f20c 	smulbb	r2, r2, ip
 8016486:	b2c0      	uxtb	r0, r0
 8016488:	fb13 f30c 	smulbb	r3, r3, ip
 801648c:	fb0e 2200 	mla	r2, lr, r0, r2
 8016490:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016494:	fb11 f10c 	smulbb	r1, r1, ip
 8016498:	fb0e 3300 	mla	r3, lr, r0, r3
 801649c:	f895 e000 	ldrb.w	lr, [r5]
 80164a0:	b292      	uxth	r2, r2
 80164a2:	b29b      	uxth	r3, r3
 80164a4:	fb0e 1000 	mla	r0, lr, r0, r1
 80164a8:	1c59      	adds	r1, r3, #1
 80164aa:	b280      	uxth	r0, r0
 80164ac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80164b0:	1c51      	adds	r1, r2, #1
 80164b2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80164b6:	1c41      	adds	r1, r0, #1
 80164b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80164bc:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80164c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80164c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80164c8:	9000      	str	r0, [sp, #0]
 80164ca:	e7c7      	b.n	801645c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

080164cc <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 80164cc:	f89d 0000 	ldrb.w	r0, [sp]
 80164d0:	704b      	strb	r3, [r1, #1]
 80164d2:	7008      	strb	r0, [r1, #0]
 80164d4:	708a      	strb	r2, [r1, #2]
 80164d6:	4770      	bx	lr

080164d8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80164d8:	4413      	add	r3, r2
 80164da:	7dc2      	ldrb	r2, [r0, #23]
 80164dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80164e0:	4419      	add	r1, r3
 80164e2:	7a03      	ldrb	r3, [r0, #8]
 80164e4:	435a      	muls	r2, r3
 80164e6:	1c53      	adds	r3, r2, #1
 80164e8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80164ec:	121b      	asrs	r3, r3, #8
 80164ee:	2bff      	cmp	r3, #255	; 0xff
 80164f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164f2:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 80164f6:	d13e      	bne.n	8016576 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 80164f8:	4427      	add	r7, r4
 80164fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80164fe:	3103      	adds	r1, #3
 8016500:	7d86      	ldrb	r6, [r0, #22]
 8016502:	2bff      	cmp	r3, #255	; 0xff
 8016504:	d10a      	bne.n	801651c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8016506:	f801 6c03 	strb.w	r6, [r1, #-3]
 801650a:	7d43      	ldrb	r3, [r0, #21]
 801650c:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016510:	7d03      	ldrb	r3, [r0, #20]
 8016512:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016516:	42a7      	cmp	r7, r4
 8016518:	d1ef      	bne.n	80164fa <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801651a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801651c:	b29a      	uxth	r2, r3
 801651e:	43db      	mvns	r3, r3
 8016520:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016524:	fb16 f602 	smulbb	r6, r6, r2
 8016528:	b2db      	uxtb	r3, r3
 801652a:	fb05 6503 	mla	r5, r5, r3, r6
 801652e:	b2ad      	uxth	r5, r5
 8016530:	1c6e      	adds	r6, r5, #1
 8016532:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016536:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 801653a:	fb16 f603 	smulbb	r6, r6, r3
 801653e:	122d      	asrs	r5, r5, #8
 8016540:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016544:	7d45      	ldrb	r5, [r0, #21]
 8016546:	fb05 6502 	mla	r5, r5, r2, r6
 801654a:	b2ad      	uxth	r5, r5
 801654c:	1c6e      	adds	r6, r5, #1
 801654e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016552:	122d      	asrs	r5, r5, #8
 8016554:	f801 5c02 	strb.w	r5, [r1, #-2]
 8016558:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801655c:	7d06      	ldrb	r6, [r0, #20]
 801655e:	fb15 f303 	smulbb	r3, r5, r3
 8016562:	fb06 3202 	mla	r2, r6, r2, r3
 8016566:	b292      	uxth	r2, r2
 8016568:	1c53      	adds	r3, r2, #1
 801656a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801656e:	1212      	asrs	r2, r2, #8
 8016570:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016574:	e7cf      	b.n	8016516 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8016576:	b2de      	uxtb	r6, r3
 8016578:	2b00      	cmp	r3, #0
 801657a:	d0ce      	beq.n	801651a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 801657c:	3103      	adds	r1, #3
 801657e:	4427      	add	r7, r4
 8016580:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016584:	3103      	adds	r1, #3
 8016586:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801658a:	fb02 f306 	mul.w	r3, r2, r6
 801658e:	42bc      	cmp	r4, r7
 8016590:	f103 0201 	add.w	r2, r3, #1
 8016594:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016598:	ea4f 2222 	mov.w	r2, r2, asr #8
 801659c:	b295      	uxth	r5, r2
 801659e:	ea6f 0202 	mvn.w	r2, r2
 80165a2:	b2d3      	uxtb	r3, r2
 80165a4:	7d82      	ldrb	r2, [r0, #22]
 80165a6:	fb1c fc03 	smulbb	ip, ip, r3
 80165aa:	fb02 c205 	mla	r2, r2, r5, ip
 80165ae:	b292      	uxth	r2, r2
 80165b0:	f102 0c01 	add.w	ip, r2, #1
 80165b4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80165b8:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80165bc:	fb1c fc03 	smulbb	ip, ip, r3
 80165c0:	ea4f 2222 	mov.w	r2, r2, asr #8
 80165c4:	f801 2c06 	strb.w	r2, [r1, #-6]
 80165c8:	7d42      	ldrb	r2, [r0, #21]
 80165ca:	fb02 c205 	mla	r2, r2, r5, ip
 80165ce:	b292      	uxth	r2, r2
 80165d0:	f102 0c01 	add.w	ip, r2, #1
 80165d4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80165d8:	ea4f 2222 	mov.w	r2, r2, asr #8
 80165dc:	f801 2c05 	strb.w	r2, [r1, #-5]
 80165e0:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80165e4:	f890 c014 	ldrb.w	ip, [r0, #20]
 80165e8:	fb12 f303 	smulbb	r3, r2, r3
 80165ec:	fb0c 3305 	mla	r3, ip, r5, r3
 80165f0:	b29b      	uxth	r3, r3
 80165f2:	f103 0201 	add.w	r2, r3, #1
 80165f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80165fa:	ea4f 2323 	mov.w	r3, r3, asr #8
 80165fe:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016602:	d1bd      	bne.n	8016580 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8016604:	e789      	b.n	801651a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08016606 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016606:	b510      	push	{r4, lr}
 8016608:	7d04      	ldrb	r4, [r0, #20]
 801660a:	700c      	strb	r4, [r1, #0]
 801660c:	7d41      	ldrb	r1, [r0, #21]
 801660e:	7011      	strb	r1, [r2, #0]
 8016610:	7d82      	ldrb	r2, [r0, #22]
 8016612:	701a      	strb	r2, [r3, #0]
 8016614:	9b02      	ldr	r3, [sp, #8]
 8016616:	7dc2      	ldrb	r2, [r0, #23]
 8016618:	2001      	movs	r0, #1
 801661a:	701a      	strb	r2, [r3, #0]
 801661c:	bd10      	pop	{r4, pc}

0801661e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801661e:	b570      	push	{r4, r5, r6, lr}
 8016620:	4616      	mov	r6, r2
 8016622:	4604      	mov	r4, r0
 8016624:	460d      	mov	r5, r1
 8016626:	f7f9 f8df 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 801662a:	6803      	ldr	r3, [r0, #0]
 801662c:	4629      	mov	r1, r5
 801662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016630:	4798      	blx	r3
 8016632:	7520      	strb	r0, [r4, #20]
 8016634:	f7f9 f8d8 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8016638:	6803      	ldr	r3, [r0, #0]
 801663a:	4629      	mov	r1, r5
 801663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801663e:	4798      	blx	r3
 8016640:	7560      	strb	r0, [r4, #21]
 8016642:	f7f9 f8d1 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8016646:	6803      	ldr	r3, [r0, #0]
 8016648:	4629      	mov	r1, r5
 801664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801664c:	4798      	blx	r3
 801664e:	75e6      	strb	r6, [r4, #23]
 8016650:	75a0      	strb	r0, [r4, #22]
 8016652:	bd70      	pop	{r4, r5, r6, pc}

08016654 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8016654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016656:	460e      	mov	r6, r1
 8016658:	4617      	mov	r7, r2
 801665a:	4604      	mov	r4, r0
 801665c:	f000 f832 	bl	80166c4 <_ZN8touchgfx15AbstractPainterC1Ev>
 8016660:	4b12      	ldr	r3, [pc, #72]	; (80166ac <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8016662:	6023      	str	r3, [r4, #0]
 8016664:	f7f9 f8c0 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8016668:	6803      	ldr	r3, [r0, #0]
 801666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801666c:	4798      	blx	r3
 801666e:	1e43      	subs	r3, r0, #1
 8016670:	425d      	negs	r5, r3
 8016672:	415d      	adcs	r5, r3
 8016674:	4b0e      	ldr	r3, [pc, #56]	; (80166b0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801667a:	b130      	cbz	r0, 801668a <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 801667c:	6803      	ldr	r3, [r0, #0]
 801667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016680:	4798      	blx	r3
 8016682:	2801      	cmp	r0, #1
 8016684:	bf08      	it	eq
 8016686:	f045 0501 	orreq.w	r5, r5, #1
 801668a:	b92d      	cbnz	r5, 8016698 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 801668c:	4b09      	ldr	r3, [pc, #36]	; (80166b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801668e:	2129      	movs	r1, #41	; 0x29
 8016690:	4a09      	ldr	r2, [pc, #36]	; (80166b8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8016692:	480a      	ldr	r0, [pc, #40]	; (80166bc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8016694:	f00e ff6a 	bl	802556c <__assert_func>
 8016698:	4b09      	ldr	r3, [pc, #36]	; (80166c0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 801669a:	4620      	mov	r0, r4
 801669c:	463a      	mov	r2, r7
 801669e:	4631      	mov	r1, r6
 80166a0:	6023      	str	r3, [r4, #0]
 80166a2:	f7ff ffbc 	bl	801661e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 80166a6:	4620      	mov	r0, r4
 80166a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166aa:	bf00      	nop
 80166ac:	08028604 	.word	0x08028604
 80166b0:	2000bb90 	.word	0x2000bb90
 80166b4:	0802861c 	.word	0x0802861c
 80166b8:	080286e0 	.word	0x080286e0
 80166bc:	0802867a 	.word	0x0802867a
 80166c0:	080286c8 	.word	0x080286c8

080166c4 <_ZN8touchgfx15AbstractPainterC1Ev>:
 80166c4:	4a03      	ldr	r2, [pc, #12]	; (80166d4 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 80166c6:	6002      	str	r2, [r0, #0]
 80166c8:	2200      	movs	r2, #0
 80166ca:	6042      	str	r2, [r0, #4]
 80166cc:	22ff      	movs	r2, #255	; 0xff
 80166ce:	7202      	strb	r2, [r0, #8]
 80166d0:	4770      	bx	lr
 80166d2:	bf00      	nop
 80166d4:	08028724 	.word	0x08028724

080166d8 <_ZN8touchgfx15AbstractPainterD1Ev>:
 80166d8:	4770      	bx	lr

080166da <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 80166da:	8081      	strh	r1, [r0, #4]
 80166dc:	80c2      	strh	r2, [r0, #6]
 80166de:	4770      	bx	lr

080166e0 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 80166e0:	7201      	strb	r1, [r0, #8]
 80166e2:	4770      	bx	lr

080166e4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80166e4:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80166e8:	4770      	bx	lr

080166ea <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80166ea:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80166ee:	4770      	bx	lr

080166f0 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80166f0:	6281      	str	r1, [r0, #40]	; 0x28
 80166f2:	4770      	bx	lr

080166f4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80166f4:	b513      	push	{r0, r1, r4, lr}
 80166f6:	6803      	ldr	r3, [r0, #0]
 80166f8:	4604      	mov	r4, r0
 80166fa:	4601      	mov	r1, r0
 80166fc:	4668      	mov	r0, sp
 80166fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016700:	4798      	blx	r3
 8016702:	6823      	ldr	r3, [r4, #0]
 8016704:	4669      	mov	r1, sp
 8016706:	4620      	mov	r0, r4
 8016708:	691b      	ldr	r3, [r3, #16]
 801670a:	4798      	blx	r3
 801670c:	b002      	add	sp, #8
 801670e:	bd10      	pop	{r4, pc}

08016710 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016710:	b510      	push	{r4, lr}
 8016712:	2200      	movs	r2, #0
 8016714:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016718:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801671c:	8002      	strh	r2, [r0, #0]
 801671e:	8042      	strh	r2, [r0, #2]
 8016720:	8084      	strh	r4, [r0, #4]
 8016722:	80c1      	strh	r1, [r0, #6]
 8016724:	bd10      	pop	{r4, pc}

08016726 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016726:	2200      	movs	r2, #0
 8016728:	8002      	strh	r2, [r0, #0]
 801672a:	8042      	strh	r2, [r0, #2]
 801672c:	8082      	strh	r2, [r0, #4]
 801672e:	80c2      	strh	r2, [r0, #6]
 8016730:	4770      	bx	lr
	...

08016734 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016734:	b508      	push	{r3, lr}
 8016736:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016738:	b928      	cbnz	r0, 8016746 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801673a:	4b03      	ldr	r3, [pc, #12]	; (8016748 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801673c:	2127      	movs	r1, #39	; 0x27
 801673e:	4a03      	ldr	r2, [pc, #12]	; (801674c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016740:	4803      	ldr	r0, [pc, #12]	; (8016750 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016742:	f00e ff13 	bl	802556c <__assert_func>
 8016746:	bd08      	pop	{r3, pc}
 8016748:	08028730 	.word	0x08028730
 801674c:	08028814 	.word	0x08028814
 8016750:	08028757 	.word	0x08028757

08016754 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016758:	b089      	sub	sp, #36	; 0x24
 801675a:	4604      	mov	r4, r0
 801675c:	6808      	ldr	r0, [r1, #0]
 801675e:	f04f 0a00 	mov.w	sl, #0
 8016762:	6849      	ldr	r1, [r1, #4]
 8016764:	ab02      	add	r3, sp, #8
 8016766:	f04f 0b01 	mov.w	fp, #1
 801676a:	c303      	stmia	r3!, {r0, r1}
 801676c:	4b3f      	ldr	r3, [pc, #252]	; (801686c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801676e:	4621      	mov	r1, r4
 8016770:	a804      	add	r0, sp, #16
 8016772:	781b      	ldrb	r3, [r3, #0]
 8016774:	2b01      	cmp	r3, #1
 8016776:	6823      	ldr	r3, [r4, #0]
 8016778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801677a:	bf1f      	itttt	ne
 801677c:	f10d 0906 	addne.w	r9, sp, #6
 8016780:	ae03      	addne	r6, sp, #12
 8016782:	f10d 050e 	addne.w	r5, sp, #14
 8016786:	f10d 080a 	addne.w	r8, sp, #10
 801678a:	bf01      	itttt	eq
 801678c:	f10d 090e 	addeq.w	r9, sp, #14
 8016790:	f10d 0606 	addeq.w	r6, sp, #6
 8016794:	ad03      	addeq	r5, sp, #12
 8016796:	f10d 0808 	addeq.w	r8, sp, #8
 801679a:	4798      	blx	r3
 801679c:	f9b5 3000 	ldrsh.w	r3, [r5]
 80167a0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d056      	beq.n	8016856 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80167a8:	4293      	cmp	r3, r2
 80167aa:	bfa8      	it	ge
 80167ac:	4613      	movge	r3, r2
 80167ae:	f8ad 3006 	strh.w	r3, [sp, #6]
 80167b2:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80167b6:	2f00      	cmp	r7, #0
 80167b8:	dd34      	ble.n	8016824 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80167ba:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80167be:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80167c2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80167c6:	4484      	add	ip, r0
 80167c8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80167cc:	f9b6 e000 	ldrsh.w	lr, [r6]
 80167d0:	fa0f fc8c 	sxth.w	ip, ip
 80167d4:	f9b9 1000 	ldrsh.w	r1, [r9]
 80167d8:	f8ad 2018 	strh.w	r2, [sp, #24]
 80167dc:	4562      	cmp	r2, ip
 80167de:	f8ad 301a 	strh.w	r3, [sp, #26]
 80167e2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80167e6:	f8ad 101e 	strh.w	r1, [sp, #30]
 80167ea:	da29      	bge.n	8016840 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80167ec:	4472      	add	r2, lr
 80167ee:	b212      	sxth	r2, r2
 80167f0:	4290      	cmp	r0, r2
 80167f2:	da25      	bge.n	8016840 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80167f4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80167f8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80167fc:	4402      	add	r2, r0
 80167fe:	b212      	sxth	r2, r2
 8016800:	4293      	cmp	r3, r2
 8016802:	da1d      	bge.n	8016840 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016804:	440b      	add	r3, r1
 8016806:	b21b      	sxth	r3, r3
 8016808:	4298      	cmp	r0, r3
 801680a:	da19      	bge.n	8016840 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801680c:	6823      	ldr	r3, [r4, #0]
 801680e:	a906      	add	r1, sp, #24
 8016810:	4620      	mov	r0, r4
 8016812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016814:	4798      	blx	r3
 8016816:	b998      	cbnz	r0, 8016840 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016818:	107f      	asrs	r7, r7, #1
 801681a:	f04f 0a01 	mov.w	sl, #1
 801681e:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016822:	e7c6      	b.n	80167b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016824:	d10c      	bne.n	8016840 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016826:	f8ad b006 	strh.w	fp, [sp, #6]
 801682a:	f8b8 2000 	ldrh.w	r2, [r8]
 801682e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8016832:	440a      	add	r2, r1
 8016834:	f8a8 2000 	strh.w	r2, [r8]
 8016838:	882b      	ldrh	r3, [r5, #0]
 801683a:	1a5b      	subs	r3, r3, r1
 801683c:	802b      	strh	r3, [r5, #0]
 801683e:	e7ad      	b.n	801679c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016840:	f1ba 0f00 	cmp.w	sl, #0
 8016844:	d0f1      	beq.n	801682a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016846:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801684a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801684e:	429a      	cmp	r2, r3
 8016850:	bf08      	it	eq
 8016852:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016854:	e7e9      	b.n	801682a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016856:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801685a:	429a      	cmp	r2, r3
 801685c:	bf04      	itt	eq
 801685e:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016862:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016864:	b009      	add	sp, #36	; 0x24
 8016866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801686a:	bf00      	nop
 801686c:	2000bb88 	.word	0x2000bb88

08016870 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016870:	2200      	movs	r2, #0
 8016872:	2101      	movs	r1, #1
 8016874:	8082      	strh	r2, [r0, #4]
 8016876:	80c2      	strh	r2, [r0, #6]
 8016878:	8102      	strh	r2, [r0, #8]
 801687a:	8142      	strh	r2, [r0, #10]
 801687c:	8182      	strh	r2, [r0, #12]
 801687e:	81c2      	strh	r2, [r0, #14]
 8016880:	8202      	strh	r2, [r0, #16]
 8016882:	8242      	strh	r2, [r0, #18]
 8016884:	61c2      	str	r2, [r0, #28]
 8016886:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801688a:	6282      	str	r2, [r0, #40]	; 0x28
 801688c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016890:	4905      	ldr	r1, [pc, #20]	; (80168a8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8016892:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016896:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801689a:	6001      	str	r1, [r0, #0]
 801689c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801689e:	22ff      	movs	r2, #255	; 0xff
 80168a0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop
 80168a8:	0802879c 	.word	0x0802879c

080168ac <_ZN8touchgfx12CanvasWidgetD1Ev>:
 80168ac:	4770      	bx	lr

080168ae <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80168ae:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80168b2:	4602      	mov	r2, r0
 80168b4:	cb03      	ldmia	r3!, {r0, r1}
 80168b6:	6010      	str	r0, [r2, #0]
 80168b8:	4610      	mov	r0, r2
 80168ba:	6051      	str	r1, [r2, #4]
 80168bc:	4770      	bx	lr

080168be <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80168be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168c2:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 80168c6:	b395      	cbz	r5, 801692e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80168c8:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 80168cc:	f1bc 0f00 	cmp.w	ip, #0
 80168d0:	d02d      	beq.n	801692e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80168d2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80168d6:	f9b1 e000 	ldrsh.w	lr, [r1]
 80168da:	b354      	cbz	r4, 8016932 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80168dc:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80168e0:	b33f      	cbz	r7, 8016932 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80168e2:	f9b0 8000 	ldrsh.w	r8, [r0]
 80168e6:	4475      	add	r5, lr
 80168e8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80168ec:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80168f0:	45f0      	cmp	r8, lr
 80168f2:	4646      	mov	r6, r8
 80168f4:	4444      	add	r4, r8
 80168f6:	bfa8      	it	ge
 80168f8:	4676      	movge	r6, lr
 80168fa:	4293      	cmp	r3, r2
 80168fc:	4619      	mov	r1, r3
 80168fe:	443b      	add	r3, r7
 8016900:	bfa8      	it	ge
 8016902:	4611      	movge	r1, r2
 8016904:	4462      	add	r2, ip
 8016906:	b22d      	sxth	r5, r5
 8016908:	8006      	strh	r6, [r0, #0]
 801690a:	b224      	sxth	r4, r4
 801690c:	8041      	strh	r1, [r0, #2]
 801690e:	b212      	sxth	r2, r2
 8016910:	b21b      	sxth	r3, r3
 8016912:	42a5      	cmp	r5, r4
 8016914:	bfac      	ite	ge
 8016916:	ebc6 0405 	rsbge	r4, r6, r5
 801691a:	ebc6 0404 	rsblt	r4, r6, r4
 801691e:	429a      	cmp	r2, r3
 8016920:	bfac      	ite	ge
 8016922:	ebc1 0302 	rsbge	r3, r1, r2
 8016926:	ebc1 0303 	rsblt	r3, r1, r3
 801692a:	8084      	strh	r4, [r0, #4]
 801692c:	80c3      	strh	r3, [r0, #6]
 801692e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016932:	f8a0 e000 	strh.w	lr, [r0]
 8016936:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801693a:	8043      	strh	r3, [r0, #2]
 801693c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016940:	8083      	strh	r3, [r0, #4]
 8016942:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016946:	e7f1      	b.n	801692c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08016948 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016948:	b507      	push	{r0, r1, r2, lr}
 801694a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801694e:	ab01      	add	r3, sp, #4
 8016950:	6809      	ldr	r1, [r1, #0]
 8016952:	6800      	ldr	r0, [r0, #0]
 8016954:	f003 f8e1 	bl	8019b1a <_ZN8touchgfx6muldivElllRl>
 8016958:	b003      	add	sp, #12
 801695a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016960 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016960:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016964:	fb90 f3f2 	sdiv	r3, r0, r2
 8016968:	fb03 0312 	mls	r3, r3, r2, r0
 801696c:	4413      	add	r3, r2
 801696e:	fb93 f0f2 	sdiv	r0, r3, r2
 8016972:	fb02 3010 	mls	r0, r2, r0, r3
 8016976:	4b0a      	ldr	r3, [pc, #40]	; (80169a0 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016978:	285a      	cmp	r0, #90	; 0x5a
 801697a:	dc02      	bgt.n	8016982 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801697c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016980:	4770      	bx	lr
 8016982:	28b4      	cmp	r0, #180	; 0xb4
 8016984:	dc02      	bgt.n	801698c <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016986:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801698a:	e7f7      	b.n	801697c <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801698c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016990:	bfd4      	ite	le
 8016992:	38b4      	suble	r0, #180	; 0xb4
 8016994:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016998:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801699c:	4240      	negs	r0, r0
 801699e:	4770      	bx	lr
 80169a0:	080288be 	.word	0x080288be

080169a4 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80169a4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80169a8:	f04f 0300 	mov.w	r3, #0
 80169ac:	bf2c      	ite	cs
 80169ae:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80169b2:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80169b6:	1899      	adds	r1, r3, r2
 80169b8:	4288      	cmp	r0, r1
 80169ba:	bf24      	itt	cs
 80169bc:	1853      	addcs	r3, r2, r1
 80169be:	1a40      	subcs	r0, r0, r1
 80169c0:	0892      	lsrs	r2, r2, #2
 80169c2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80169c6:	d1f6      	bne.n	80169b6 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80169c8:	4618      	mov	r0, r3
 80169ca:	4770      	bx	lr

080169cc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80169cc:	2800      	cmp	r0, #0
 80169ce:	b508      	push	{r3, lr}
 80169d0:	da05      	bge.n	80169de <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80169d2:	4240      	negs	r0, r0
 80169d4:	f7ff fffa 	bl	80169cc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80169d8:	4240      	negs	r0, r0
 80169da:	b240      	sxtb	r0, r0
 80169dc:	bd08      	pop	{r3, pc}
 80169de:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80169e2:	dc11      	bgt.n	8016a08 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80169e4:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80169e8:	dd09      	ble.n	80169fe <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80169ea:	4340      	muls	r0, r0
 80169ec:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80169f0:	f7ff ffd8 	bl	80169a4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80169f4:	f7ff ffea 	bl	80169cc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80169f8:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80169fc:	e7ed      	b.n	80169da <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 80169fe:	3003      	adds	r0, #3
 8016a00:	4b02      	ldr	r3, [pc, #8]	; (8016a0c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8016a02:	10c0      	asrs	r0, r0, #3
 8016a04:	5618      	ldrsb	r0, [r3, r0]
 8016a06:	e7e9      	b.n	80169dc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016a08:	2000      	movs	r0, #0
 8016a0a:	e7e7      	b.n	80169dc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016a0c:	08028862 	.word	0x08028862

08016a10 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a12:	460c      	mov	r4, r1
 8016a14:	1e01      	subs	r1, r0, #0
 8016a16:	4615      	mov	r5, r2
 8016a18:	db01      	blt.n	8016a1e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8016a1a:	2c00      	cmp	r4, #0
 8016a1c:	da06      	bge.n	8016a2c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8016a1e:	4b11      	ldr	r3, [pc, #68]	; (8016a64 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8016a20:	f240 3197 	movw	r1, #919	; 0x397
 8016a24:	4a10      	ldr	r2, [pc, #64]	; (8016a68 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8016a26:	4811      	ldr	r0, [pc, #68]	; (8016a6c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8016a28:	f00e fda0 	bl	802556c <__assert_func>
 8016a2c:	428c      	cmp	r4, r1
 8016a2e:	dd06      	ble.n	8016a3e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8016a30:	4620      	mov	r0, r4
 8016a32:	f7ff ffed 	bl	8016a10 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016a36:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016a3a:	b003      	add	sp, #12
 8016a3c:	bd30      	pop	{r4, r5, pc}
 8016a3e:	4349      	muls	r1, r1
 8016a40:	fb04 1004 	mla	r0, r4, r4, r1
 8016a44:	f7ff ffae 	bl	80169a4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016a48:	6028      	str	r0, [r5, #0]
 8016a4a:	2800      	cmp	r0, #0
 8016a4c:	d0f5      	beq.n	8016a3a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8016a4e:	4602      	mov	r2, r0
 8016a50:	ab01      	add	r3, sp, #4
 8016a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016a56:	4620      	mov	r0, r4
 8016a58:	f003 f85f 	bl	8019b1a <_ZN8touchgfx6muldivElllRl>
 8016a5c:	f7ff ffb6 	bl	80169cc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016a60:	e7eb      	b.n	8016a3a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8016a62:	bf00      	nop
 8016a64:	08028974 	.word	0x08028974
 8016a68:	08028a3c 	.word	0x08028a3c
 8016a6c:	08028985 	.word	0x08028985

08016a70 <_ZN8touchgfx4LineC1Ev>:
 8016a70:	b510      	push	{r4, lr}
 8016a72:	4604      	mov	r4, r0
 8016a74:	f7ff fefc 	bl	8016870 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016a78:	4b0c      	ldr	r3, [pc, #48]	; (8016aac <_ZN8touchgfx4LineC1Ev+0x3c>)
 8016a7a:	2220      	movs	r2, #32
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	6023      	str	r3, [r4, #0]
 8016a80:	2300      	movs	r3, #0
 8016a82:	6422      	str	r2, [r4, #64]	; 0x40
 8016a84:	2212      	movs	r2, #18
 8016a86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8016a8a:	6722      	str	r2, [r4, #112]	; 0x70
 8016a8c:	60a3      	str	r3, [r4, #8]
 8016a8e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016a92:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016a96:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016a9a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8016a9e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8016aa2:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8016aa6:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8016aaa:	bd10      	pop	{r4, pc}
 8016aac:	080289c4 	.word	0x080289c4

08016ab0 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8016ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab4:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8016ab6:	b085      	sub	sp, #20
 8016ab8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016aba:	4604      	mov	r4, r0
 8016abc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8016abe:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8016ac0:	1af6      	subs	r6, r6, r3
 8016ac2:	eba5 0502 	sub.w	r5, r5, r2
 8016ac6:	f040 809b 	bne.w	8016c00 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 8016aca:	b955      	cbnz	r5, 8016ae2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8016acc:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8016ad0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016ad4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8016ad8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8016adc:	b005      	add	sp, #20
 8016ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ae2:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8016ae6:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8016aea:	f04f 0802 	mov.w	r8, #2
 8016aee:	463a      	mov	r2, r7
 8016af0:	4629      	mov	r1, r5
 8016af2:	ab03      	add	r3, sp, #12
 8016af4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016af6:	f003 f810 	bl	8019b1a <_ZN8touchgfx6muldivElllRl>
 8016afa:	ab03      	add	r3, sp, #12
 8016afc:	463a      	mov	r2, r7
 8016afe:	4631      	mov	r1, r6
 8016b00:	fb90 f5f8 	sdiv	r5, r0, r8
 8016b04:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016b06:	f003 f808 	bl	8019b1a <_ZN8touchgfx6muldivElllRl>
 8016b0a:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8016b0e:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8016b12:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8016b16:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8016b18:	fb90 f0f8 	sdiv	r0, r0, r8
 8016b1c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8016b20:	eba8 0305 	sub.w	r3, r8, r5
 8016b24:	f1ba 0f00 	cmp.w	sl, #0
 8016b28:	f040 80c3 	bne.w	8016cb2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8016b2c:	64a3      	str	r3, [r4, #72]	; 0x48
 8016b2e:	19c3      	adds	r3, r0, r7
 8016b30:	65a3      	str	r3, [r4, #88]	; 0x58
 8016b32:	ebae 0305 	sub.w	r3, lr, r5
 8016b36:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016b38:	eb00 030c 	add.w	r3, r0, ip
 8016b3c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016b3e:	eb05 030e 	add.w	r3, r5, lr
 8016b42:	6523      	str	r3, [r4, #80]	; 0x50
 8016b44:	ebac 0300 	sub.w	r3, ip, r0
 8016b48:	6623      	str	r3, [r4, #96]	; 0x60
 8016b4a:	eb05 0308 	add.w	r3, r5, r8
 8016b4e:	6563      	str	r3, [r4, #84]	; 0x54
 8016b50:	1a3b      	subs	r3, r7, r0
 8016b52:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8016b54:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8016b58:	6663      	str	r3, [r4, #100]	; 0x64
 8016b5a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8016b5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016b60:	4632      	mov	r2, r6
 8016b62:	9301      	str	r3, [sp, #4]
 8016b64:	9100      	str	r1, [sp, #0]
 8016b66:	f859 bb04 	ldr.w	fp, [r9], #4
 8016b6a:	9b00      	ldr	r3, [sp, #0]
 8016b6c:	455e      	cmp	r6, fp
 8016b6e:	bfa8      	it	ge
 8016b70:	465e      	movge	r6, fp
 8016b72:	455a      	cmp	r2, fp
 8016b74:	bfb8      	it	lt
 8016b76:	465a      	movlt	r2, fp
 8016b78:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8016b7c:	4559      	cmp	r1, fp
 8016b7e:	bfa8      	it	ge
 8016b80:	4659      	movge	r1, fp
 8016b82:	455b      	cmp	r3, fp
 8016b84:	bfb8      	it	lt
 8016b86:	465b      	movlt	r3, fp
 8016b88:	9300      	str	r3, [sp, #0]
 8016b8a:	9b01      	ldr	r3, [sp, #4]
 8016b8c:	454b      	cmp	r3, r9
 8016b8e:	d1ea      	bne.n	8016b66 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8016b90:	f04f 0b20 	mov.w	fp, #32
 8016b94:	b209      	sxth	r1, r1
 8016b96:	b212      	sxth	r2, r2
 8016b98:	f1ba 0f01 	cmp.w	sl, #1
 8016b9c:	b236      	sxth	r6, r6
 8016b9e:	fb91 f9fb 	sdiv	r9, r1, fp
 8016ba2:	f9bd 1000 	ldrsh.w	r1, [sp]
 8016ba6:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8016baa:	fb92 f2fb 	sdiv	r2, r2, fp
 8016bae:	fb91 f1fb 	sdiv	r1, r1, fp
 8016bb2:	fb96 f6fb 	sdiv	r6, r6, fp
 8016bb6:	f102 0201 	add.w	r2, r2, #1
 8016bba:	f101 0101 	add.w	r1, r1, #1
 8016bbe:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8016bc2:	eba1 0109 	sub.w	r1, r1, r9
 8016bc6:	eba2 0606 	sub.w	r6, r2, r6
 8016bca:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8016bce:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8016bd2:	d183      	bne.n	8016adc <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016bd4:	eba8 0305 	sub.w	r3, r8, r5
 8016bd8:	64a3      	str	r3, [r4, #72]	; 0x48
 8016bda:	19c3      	adds	r3, r0, r7
 8016bdc:	65a3      	str	r3, [r4, #88]	; 0x58
 8016bde:	ebae 0305 	sub.w	r3, lr, r5
 8016be2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016be4:	eb00 030c 	add.w	r3, r0, ip
 8016be8:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016bea:	eb05 030e 	add.w	r3, r5, lr
 8016bee:	4445      	add	r5, r8
 8016bf0:	6523      	str	r3, [r4, #80]	; 0x50
 8016bf2:	ebac 0300 	sub.w	r3, ip, r0
 8016bf6:	1a38      	subs	r0, r7, r0
 8016bf8:	6565      	str	r5, [r4, #84]	; 0x54
 8016bfa:	6623      	str	r3, [r4, #96]	; 0x60
 8016bfc:	6660      	str	r0, [r4, #100]	; 0x64
 8016bfe:	e76d      	b.n	8016adc <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016c00:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8016c04:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8016c08:	2d00      	cmp	r5, #0
 8016c0a:	f43f af6e 	beq.w	8016aea <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016c0e:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8016c12:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8016c16:	fb93 f2f7 	sdiv	r2, r3, r7
 8016c1a:	fb07 3312 	mls	r3, r7, r2, r3
 8016c1e:	b34b      	cbz	r3, 8016c74 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8016c20:	fb97 f2f3 	sdiv	r2, r7, r3
 8016c24:	fb03 7712 	mls	r7, r3, r2, r7
 8016c28:	2f00      	cmp	r7, #0
 8016c2a:	d1f4      	bne.n	8016c16 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8016c2c:	2b01      	cmp	r3, #1
 8016c2e:	f24b 5204 	movw	r2, #46340	; 0xb504
 8016c32:	bf18      	it	ne
 8016c34:	fb96 f6f3 	sdivne	r6, r6, r3
 8016c38:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8016c3c:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8016c40:	bf18      	it	ne
 8016c42:	fb95 f5f3 	sdivne	r5, r5, r3
 8016c46:	4291      	cmp	r1, r2
 8016c48:	dd16      	ble.n	8016c78 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8016c4a:	2d00      	cmp	r5, #0
 8016c4c:	da4d      	bge.n	8016cea <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8016c4e:	4b29      	ldr	r3, [pc, #164]	; (8016cf4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8016c50:	429d      	cmp	r5, r3
 8016c52:	da27      	bge.n	8016ca4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8016c54:	426a      	negs	r2, r5
 8016c56:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016c5a:	fb91 f1f3 	sdiv	r1, r1, r3
 8016c5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c62:	4299      	cmp	r1, r3
 8016c64:	bfcc      	ite	gt
 8016c66:	1c4b      	addgt	r3, r1, #1
 8016c68:	3301      	addle	r3, #1
 8016c6a:	fb96 f6f3 	sdiv	r6, r6, r3
 8016c6e:	fb95 f5f3 	sdiv	r5, r5, r3
 8016c72:	e00f      	b.n	8016c94 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8016c74:	463b      	mov	r3, r7
 8016c76:	e7d9      	b.n	8016c2c <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8016c78:	2d00      	cmp	r5, #0
 8016c7a:	fb92 f2f1 	sdiv	r2, r2, r1
 8016c7e:	da13      	bge.n	8016ca8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8016c80:	4269      	negs	r1, r5
 8016c82:	f24b 5304 	movw	r3, #46340	; 0xb504
 8016c86:	fb93 f3f1 	sdiv	r3, r3, r1
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	bfa8      	it	ge
 8016c8e:	461a      	movge	r2, r3
 8016c90:	4356      	muls	r6, r2
 8016c92:	4355      	muls	r5, r2
 8016c94:	fb05 f005 	mul.w	r0, r5, r5
 8016c98:	fb06 0006 	mla	r0, r6, r6, r0
 8016c9c:	f7ff fe82 	bl	80169a4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016ca0:	4607      	mov	r7, r0
 8016ca2:	e722      	b.n	8016aea <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	e7eb      	b.n	8016c80 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8016ca8:	4629      	mov	r1, r5
 8016caa:	e7ea      	b.n	8016c82 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016cac:	4629      	mov	r1, r5
 8016cae:	2200      	movs	r2, #0
 8016cb0:	e7e7      	b.n	8016c82 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016cb2:	1a1b      	subs	r3, r3, r0
 8016cb4:	64a3      	str	r3, [r4, #72]	; 0x48
 8016cb6:	19c3      	adds	r3, r0, r7
 8016cb8:	1b5b      	subs	r3, r3, r5
 8016cba:	65a3      	str	r3, [r4, #88]	; 0x58
 8016cbc:	ebae 0305 	sub.w	r3, lr, r5
 8016cc0:	4403      	add	r3, r0
 8016cc2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8016cc4:	eb00 030c 	add.w	r3, r0, ip
 8016cc8:	442b      	add	r3, r5
 8016cca:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016ccc:	eb05 030e 	add.w	r3, r5, lr
 8016cd0:	4403      	add	r3, r0
 8016cd2:	6523      	str	r3, [r4, #80]	; 0x50
 8016cd4:	ebac 0300 	sub.w	r3, ip, r0
 8016cd8:	442b      	add	r3, r5
 8016cda:	6623      	str	r3, [r4, #96]	; 0x60
 8016cdc:	eb05 0308 	add.w	r3, r5, r8
 8016ce0:	1a1b      	subs	r3, r3, r0
 8016ce2:	6563      	str	r3, [r4, #84]	; 0x54
 8016ce4:	1a3b      	subs	r3, r7, r0
 8016ce6:	1b5b      	subs	r3, r3, r5
 8016ce8:	e733      	b.n	8016b52 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8016cea:	4295      	cmp	r5, r2
 8016cec:	ddde      	ble.n	8016cac <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8016cee:	462a      	mov	r2, r5
 8016cf0:	e7b1      	b.n	8016c56 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8016cf2:	bf00      	nop
 8016cf4:	ffff4afc 	.word	0xffff4afc

08016cf8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8016cf8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016cfa:	428b      	cmp	r3, r1
 8016cfc:	d102      	bne.n	8016d04 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8016cfe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016d00:	4293      	cmp	r3, r2
 8016d02:	d003      	beq.n	8016d0c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8016d04:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8016d08:	f7ff bed2 	b.w	8016ab0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016d0c:	4770      	bx	lr

08016d0e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8016d0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016d10:	428b      	cmp	r3, r1
 8016d12:	d102      	bne.n	8016d1a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8016d14:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016d16:	4293      	cmp	r3, r2
 8016d18:	d003      	beq.n	8016d22 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016d1a:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8016d1e:	f7ff bec7 	b.w	8016ab0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016d22:	4770      	bx	lr

08016d24 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8016d24:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8016d28:	f7ff bec2 	b.w	8016ab0 <_ZN8touchgfx4Line17updateCachedShapeEv>

08016d2c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d30:	b0b3      	sub	sp, #204	; 0xcc
 8016d32:	4604      	mov	r4, r0
 8016d34:	460a      	mov	r2, r1
 8016d36:	4601      	mov	r1, r0
 8016d38:	a804      	add	r0, sp, #16
 8016d3a:	ad32      	add	r5, sp, #200	; 0xc8
 8016d3c:	f00d f84a 	bl	8023dd4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016d40:	2300      	movs	r3, #0
 8016d42:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8016d44:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8016d48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016d4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016d4c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016d4e:	1ac0      	subs	r0, r0, r3
 8016d50:	eba1 0102 	sub.w	r1, r1, r2
 8016d54:	d43c      	bmi.n	8016dd0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8016d56:	2900      	cmp	r1, #0
 8016d58:	462a      	mov	r2, r5
 8016d5a:	db33      	blt.n	8016dc4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8016d5c:	f7ff fe58 	bl	8016a10 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016d60:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8016d64:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016d66:	a804      	add	r0, sp, #16
 8016d68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016d6a:	f00d f9fc 	bl	8024166 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016d6e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016d70:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016d72:	a804      	add	r0, sp, #16
 8016d74:	f00d f986 	bl	8024084 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016d78:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016d7c:	2b01      	cmp	r3, #1
 8016d7e:	d137      	bne.n	8016df0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016d80:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016d82:	2eb3      	cmp	r6, #179	; 0xb3
 8016d84:	dc34      	bgt.n	8016df0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016d86:	eba7 0906 	sub.w	r9, r7, r6
 8016d8a:	4648      	mov	r0, r9
 8016d8c:	f7ff fde8 	bl	8016960 <_ZN8touchgfx7CWRUtil4sineEi>
 8016d90:	a902      	add	r1, sp, #8
 8016d92:	9002      	str	r0, [sp, #8]
 8016d94:	4628      	mov	r0, r5
 8016d96:	f7ff fdd7 	bl	8016948 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016d9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016d9c:	eb00 0801 	add.w	r8, r0, r1
 8016da0:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016da4:	f7ff fddc 	bl	8016960 <_ZN8touchgfx7CWRUtil4sineEi>
 8016da8:	a903      	add	r1, sp, #12
 8016daa:	9003      	str	r0, [sp, #12]
 8016dac:	4628      	mov	r0, r5
 8016dae:	f7ff fdcb 	bl	8016948 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016db2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016db4:	4641      	mov	r1, r8
 8016db6:	1a12      	subs	r2, r2, r0
 8016db8:	a804      	add	r0, sp, #16
 8016dba:	f00d f963 	bl	8024084 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016dbe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016dc0:	441e      	add	r6, r3
 8016dc2:	e7de      	b.n	8016d82 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8016dc4:	4249      	negs	r1, r1
 8016dc6:	f7ff fe23 	bl	8016a10 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016dca:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8016dce:	e7c9      	b.n	8016d64 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016dd0:	2900      	cmp	r1, #0
 8016dd2:	f1c0 0000 	rsb	r0, r0, #0
 8016dd6:	462a      	mov	r2, r5
 8016dd8:	db04      	blt.n	8016de4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8016dda:	f7ff fe19 	bl	8016a10 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016dde:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8016de2:	e7bf      	b.n	8016d64 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016de4:	4249      	negs	r1, r1
 8016de6:	f7ff fe13 	bl	8016a10 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016dea:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8016dee:	e7b9      	b.n	8016d64 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016df0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8016df2:	a804      	add	r0, sp, #16
 8016df4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8016df6:	f00d f945 	bl	8024084 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016dfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016dfc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8016dfe:	a804      	add	r0, sp, #16
 8016e00:	f00d f940 	bl	8024084 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016e04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016e08:	2b01      	cmp	r3, #1
 8016e0a:	d123      	bne.n	8016e54 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016e0c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016e0e:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8016e12:	2e00      	cmp	r6, #0
 8016e14:	dd1e      	ble.n	8016e54 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016e16:	eb06 0907 	add.w	r9, r6, r7
 8016e1a:	4648      	mov	r0, r9
 8016e1c:	f7ff fda0 	bl	8016960 <_ZN8touchgfx7CWRUtil4sineEi>
 8016e20:	a902      	add	r1, sp, #8
 8016e22:	9002      	str	r0, [sp, #8]
 8016e24:	4628      	mov	r0, r5
 8016e26:	f7ff fd8f 	bl	8016948 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016e2c:	eb00 0801 	add.w	r8, r0, r1
 8016e30:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8016e34:	f7ff fd94 	bl	8016960 <_ZN8touchgfx7CWRUtil4sineEi>
 8016e38:	a903      	add	r1, sp, #12
 8016e3a:	9003      	str	r0, [sp, #12]
 8016e3c:	4628      	mov	r0, r5
 8016e3e:	f7ff fd83 	bl	8016948 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e42:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016e44:	4641      	mov	r1, r8
 8016e46:	1a12      	subs	r2, r2, r0
 8016e48:	a804      	add	r0, sp, #16
 8016e4a:	f00d f91b 	bl	8024084 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016e4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016e50:	1af6      	subs	r6, r6, r3
 8016e52:	e7de      	b.n	8016e12 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8016e54:	a804      	add	r0, sp, #16
 8016e56:	f00d fa8a 	bl	802436e <_ZN8touchgfx6Canvas6renderEv>
 8016e5a:	4604      	mov	r4, r0
 8016e5c:	a804      	add	r0, sp, #16
 8016e5e:	f00d fac7 	bl	80243f0 <_ZN8touchgfx6CanvasD1Ev>
 8016e62:	4620      	mov	r0, r4
 8016e64:	b033      	add	sp, #204	; 0xcc
 8016e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016e6a <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8016e6a:	b570      	push	{r4, r5, r6, lr}
 8016e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e70:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016e72:	4604      	mov	r4, r0
 8016e74:	429a      	cmp	r2, r3
 8016e76:	d00c      	beq.n	8016e92 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8016e78:	f850 3b26 	ldr.w	r3, [r0], #38
 8016e7c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8016e7e:	f7f9 fbed 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8016e82:	2300      	movs	r3, #0
 8016e84:	4601      	mov	r1, r0
 8016e86:	46ac      	mov	ip, r5
 8016e88:	4620      	mov	r0, r4
 8016e8a:	461a      	mov	r2, r3
 8016e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e90:	4760      	bx	ip
 8016e92:	2000      	movs	r0, #0
 8016e94:	bd70      	pop	{r4, r5, r6, pc}

08016e96 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016e96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e9c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	d016      	beq.n	8016ed0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8016ea2:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	f7f8 f8be 	bl	800f028 <_ZNK8touchgfx9TypedText7getFontEv>
 8016eac:	6803      	ldr	r3, [r0, #0]
 8016eae:	4605      	mov	r5, r0
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	69de      	ldr	r6, [r3, #28]
 8016eb4:	f7f8 f8d4 	bl	800f060 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016eb8:	4607      	mov	r7, r0
 8016eba:	4620      	mov	r0, r4
 8016ebc:	f7f9 fbce 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	4602      	mov	r2, r0
 8016ec4:	4639      	mov	r1, r7
 8016ec6:	9300      	str	r3, [sp, #0]
 8016ec8:	4628      	mov	r0, r5
 8016eca:	47b0      	blx	r6
 8016ecc:	b003      	add	sp, #12
 8016ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ed0:	2000      	movs	r0, #0
 8016ed2:	e7fb      	b.n	8016ecc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08016ed4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016ed4:	b40e      	push	{r1, r2, r3}
 8016ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ede:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016ee0:	b09b      	sub	sp, #108	; 0x6c
 8016ee2:	4604      	mov	r4, r0
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	d03f      	beq.n	8016f68 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8016ee8:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8016eec:	ab22      	add	r3, sp, #136	; 0x88
 8016eee:	4638      	mov	r0, r7
 8016ef0:	9303      	str	r3, [sp, #12]
 8016ef2:	f7f8 f899 	bl	800f028 <_ZNK8touchgfx9TypedText7getFontEv>
 8016ef6:	6803      	ldr	r3, [r0, #0]
 8016ef8:	4680      	mov	r8, r0
 8016efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016efc:	4798      	blx	r3
 8016efe:	4606      	mov	r6, r0
 8016f00:	b205      	sxth	r5, r0
 8016f02:	a804      	add	r0, sp, #16
 8016f04:	f003 feb4 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 8016f08:	f8d8 3000 	ldr.w	r3, [r8]
 8016f0c:	4640      	mov	r0, r8
 8016f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f10:	4798      	blx	r3
 8016f12:	9a03      	ldr	r2, [sp, #12]
 8016f14:	4603      	mov	r3, r0
 8016f16:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016f18:	a804      	add	r0, sp, #16
 8016f1a:	f003 fec6 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016f1e:	4638      	mov	r0, r7
 8016f20:	f7f8 f89e 	bl	800f060 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016f24:	4680      	mov	r8, r0
 8016f26:	4638      	mov	r0, r7
 8016f28:	f7f8 f87e 	bl	800f028 <_ZNK8touchgfx9TypedText7getFontEv>
 8016f2c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016f30:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8016f34:	4642      	mov	r2, r8
 8016f36:	9300      	str	r3, [sp, #0]
 8016f38:	4603      	mov	r3, r0
 8016f3a:	a804      	add	r0, sp, #16
 8016f3c:	f001 fbc8 	bl	80186d0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016f40:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016f44:	b203      	sxth	r3, r0
 8016f46:	18a9      	adds	r1, r5, r2
 8016f48:	2900      	cmp	r1, #0
 8016f4a:	dd0b      	ble.n	8016f64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8016f4c:	3b01      	subs	r3, #1
 8016f4e:	fb13 f302 	smulbb	r3, r3, r2
 8016f52:	fb16 3300 	smlabb	r3, r6, r0, r3
 8016f56:	b21d      	sxth	r5, r3
 8016f58:	4628      	mov	r0, r5
 8016f5a:	b01b      	add	sp, #108	; 0x6c
 8016f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f60:	b003      	add	sp, #12
 8016f62:	4770      	bx	lr
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	dcf7      	bgt.n	8016f58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8016f68:	2500      	movs	r5, #0
 8016f6a:	e7f5      	b.n	8016f58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08016f6c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f74:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8016f76:	b08d      	sub	sp, #52	; 0x34
 8016f78:	4604      	mov	r4, r0
 8016f7a:	429e      	cmp	r6, r3
 8016f7c:	4688      	mov	r8, r1
 8016f7e:	d04b      	beq.n	8017018 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8016f80:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8016f84:	4628      	mov	r0, r5
 8016f86:	f7f8 f84f 	bl	800f028 <_ZNK8touchgfx9TypedText7getFontEv>
 8016f8a:	4607      	mov	r7, r0
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d043      	beq.n	8017018 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8016f90:	4628      	mov	r0, r5
 8016f92:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8016f96:	f7f8 f87b 	bl	800f090 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016f9a:	4b21      	ldr	r3, [pc, #132]	; (8017020 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8016fa8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8016fac:	785e      	ldrb	r6, [r3, #1]
 8016fae:	f7f8 f857 	bl	800f060 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016fb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016fb4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8016fb8:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8016fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8016fbe:	4b19      	ldr	r3, [pc, #100]	; (8017024 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8016fc0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8016fca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016fce:	9707      	str	r7, [sp, #28]
 8016fd0:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8016fd4:	f88d 6020 	strb.w	r6, [sp, #32]
 8016fd8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016fdc:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8016fe0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8016fe4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8016fe8:	b10a      	cbz	r2, 8016fee <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8016fea:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8016fec:	b906      	cbnz	r6, 8016ff0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8016fee:	689e      	ldr	r6, [r3, #8]
 8016ff0:	af05      	add	r7, sp, #20
 8016ff2:	4621      	mov	r1, r4
 8016ff4:	4638      	mov	r0, r7
 8016ff6:	f002 fcf6 	bl	80199e6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016ffa:	4628      	mov	r0, r5
 8016ffc:	f7f9 fb2e 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8017000:	2300      	movs	r3, #0
 8017002:	9001      	str	r0, [sp, #4]
 8017004:	4630      	mov	r0, r6
 8017006:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801700a:	ab07      	add	r3, sp, #28
 801700c:	9300      	str	r3, [sp, #0]
 801700e:	4643      	mov	r3, r8
 8017010:	e897 0006 	ldmia.w	r7, {r1, r2}
 8017014:	f000 fd80 	bl	8017b18 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017018:	b00d      	add	sp, #52	; 0x34
 801701a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801701e:	bf00      	nop
 8017020:	2000bc20 	.word	0x2000bc20
 8017024:	2000bb90 	.word	0x2000bb90

08017028 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017028:	b570      	push	{r4, r5, r6, lr}
 801702a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801702e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017030:	4604      	mov	r4, r0
 8017032:	429a      	cmp	r2, r3
 8017034:	d021      	beq.n	801707a <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8017036:	6803      	ldr	r3, [r0, #0]
 8017038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801703a:	4798      	blx	r3
 801703c:	6823      	ldr	r3, [r4, #0]
 801703e:	4605      	mov	r5, r0
 8017040:	4620      	mov	r0, r4
 8017042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017044:	4798      	blx	r3
 8017046:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801704a:	4606      	mov	r6, r0
 801704c:	b22d      	sxth	r5, r5
 801704e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017052:	6823      	ldr	r3, [r4, #0]
 8017054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017056:	d109      	bne.n	801706c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8017058:	4629      	mov	r1, r5
 801705a:	4620      	mov	r0, r4
 801705c:	4798      	blx	r3
 801705e:	6823      	ldr	r3, [r4, #0]
 8017060:	4631      	mov	r1, r6
 8017062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017064:	4620      	mov	r0, r4
 8017066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801706a:	4718      	bx	r3
 801706c:	4601      	mov	r1, r0
 801706e:	4620      	mov	r0, r4
 8017070:	4798      	blx	r3
 8017072:	6823      	ldr	r3, [r4, #0]
 8017074:	4629      	mov	r1, r5
 8017076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017078:	e7f4      	b.n	8017064 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801707a:	bd70      	pop	{r4, r5, r6, pc}

0801707c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801707c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017080:	84c1      	strh	r1, [r0, #38]	; 0x26
 8017082:	b922      	cbnz	r2, 801708e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8017084:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017088:	b90b      	cbnz	r3, 801708e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801708a:	f7ff bfcd 	b.w	8017028 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801708e:	4770      	bx	lr

08017090 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017090:	2300      	movs	r3, #0
 8017092:	8003      	strh	r3, [r0, #0]
 8017094:	8043      	strh	r3, [r0, #2]
 8017096:	8083      	strh	r3, [r0, #4]
 8017098:	80c3      	strh	r3, [r0, #6]
 801709a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801709e:	b91b      	cbnz	r3, 80170a8 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 80170a0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80170a4:	2bff      	cmp	r3, #255	; 0xff
 80170a6:	d103      	bne.n	80170b0 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 80170a8:	890b      	ldrh	r3, [r1, #8]
 80170aa:	8083      	strh	r3, [r0, #4]
 80170ac:	894b      	ldrh	r3, [r1, #10]
 80170ae:	80c3      	strh	r3, [r0, #6]
 80170b0:	4770      	bx	lr
	...

080170b4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80170b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170b6:	4604      	mov	r4, r0
 80170b8:	466b      	mov	r3, sp
 80170ba:	6808      	ldr	r0, [r1, #0]
 80170bc:	6849      	ldr	r1, [r1, #4]
 80170be:	c303      	stmia	r3!, {r0, r1}
 80170c0:	6823      	ldr	r3, [r4, #0]
 80170c2:	4669      	mov	r1, sp
 80170c4:	4620      	mov	r0, r4
 80170c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170c8:	4798      	blx	r3
 80170ca:	4b08      	ldr	r3, [pc, #32]	; (80170ec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80170d2:	b10a      	cbz	r2, 80170d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80170d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80170d6:	b900      	cbnz	r0, 80170da <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80170d8:	6898      	ldr	r0, [r3, #8]
 80170da:	6803      	ldr	r3, [r0, #0]
 80170dc:	4669      	mov	r1, sp
 80170de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80170e0:	69dd      	ldr	r5, [r3, #28]
 80170e2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80170e6:	47a8      	blx	r5
 80170e8:	b003      	add	sp, #12
 80170ea:	bd30      	pop	{r4, r5, pc}
 80170ec:	2000bb90 	.word	0x2000bb90

080170f0 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 80170f0:	b570      	push	{r4, r5, r6, lr}
 80170f2:	6803      	ldr	r3, [r0, #0]
 80170f4:	4604      	mov	r4, r0
 80170f6:	4615      	mov	r5, r2
 80170f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80170fa:	4798      	blx	r3
 80170fc:	6823      	ldr	r3, [r4, #0]
 80170fe:	4629      	mov	r1, r5
 8017100:	4620      	mov	r0, r4
 8017102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017108:	4718      	bx	r3

0801710a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801710a:	b570      	push	{r4, r5, r6, lr}
 801710c:	6803      	ldr	r3, [r0, #0]
 801710e:	4604      	mov	r4, r0
 8017110:	460e      	mov	r6, r1
 8017112:	4615      	mov	r5, r2
 8017114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017116:	4798      	blx	r3
 8017118:	8030      	strh	r0, [r6, #0]
 801711a:	6823      	ldr	r3, [r4, #0]
 801711c:	4620      	mov	r0, r4
 801711e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017120:	4798      	blx	r3
 8017122:	8028      	strh	r0, [r5, #0]
 8017124:	bd70      	pop	{r4, r5, r6, pc}

08017126 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8017126:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801712a:	4770      	bx	lr

0801712c <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801712c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8017130:	4770      	bx	lr

08017132 <_ZN8touchgfx10TiledImageD1Ev>:
 8017132:	4770      	bx	lr

08017134 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8017134:	b510      	push	{r4, lr}
 8017136:	4604      	mov	r4, r0
 8017138:	f000 fa40 	bl	80175bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801713c:	6823      	ldr	r3, [r4, #0]
 801713e:	4620      	mov	r0, r4
 8017140:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017144:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8017148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801714a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801714e:	4718      	bx	r3

08017150 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8017150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017152:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017156:	4605      	mov	r5, r0
 8017158:	8541      	strh	r1, [r0, #42]	; 0x2a
 801715a:	4630      	mov	r0, r6
 801715c:	f004 fcb4 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017160:	b1a0      	cbz	r0, 801718c <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 8017162:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8017166:	4630      	mov	r0, r6
 8017168:	f004 fcae 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801716c:	fb97 f4f0 	sdiv	r4, r7, r0
 8017170:	fb04 7410 	mls	r4, r4, r0, r7
 8017174:	4630      	mov	r0, r6
 8017176:	f004 fca7 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801717a:	4404      	add	r4, r0
 801717c:	4630      	mov	r0, r6
 801717e:	f004 fca3 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017182:	fb94 f3f0 	sdiv	r3, r4, r0
 8017186:	fb03 4010 	mls	r0, r3, r0, r4
 801718a:	8568      	strh	r0, [r5, #42]	; 0x2a
 801718c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801718e <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801718e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017190:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017194:	4605      	mov	r5, r0
 8017196:	8581      	strh	r1, [r0, #44]	; 0x2c
 8017198:	4630      	mov	r0, r6
 801719a:	f004 fccf 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801719e:	b1a0      	cbz	r0, 80171ca <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 80171a0:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 80171a4:	4630      	mov	r0, r6
 80171a6:	f004 fcc9 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80171aa:	fb97 f4f0 	sdiv	r4, r7, r0
 80171ae:	fb04 7410 	mls	r4, r4, r0, r7
 80171b2:	4630      	mov	r0, r6
 80171b4:	f004 fcc2 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80171b8:	4404      	add	r4, r0
 80171ba:	4630      	mov	r0, r6
 80171bc:	f004 fcbe 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80171c0:	fb94 f3f0 	sdiv	r3, r4, r0
 80171c4:	fb03 4010 	mls	r0, r3, r0, r4
 80171c8:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80171ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080171cc <_ZN8touchgfx10TiledImageD0Ev>:
 80171cc:	b510      	push	{r4, lr}
 80171ce:	4604      	mov	r4, r0
 80171d0:	2130      	movs	r1, #48	; 0x30
 80171d2:	f00e f9a0 	bl	8025516 <_ZdlPvj>
 80171d6:	4620      	mov	r0, r4
 80171d8:	bd10      	pop	{r4, pc}
	...

080171dc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80171dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171e0:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80171e4:	b093      	sub	sp, #76	; 0x4c
 80171e6:	4607      	mov	r7, r0
 80171e8:	460e      	mov	r6, r1
 80171ea:	4658      	mov	r0, fp
 80171ec:	f004 fc6c 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80171f0:	4605      	mov	r5, r0
 80171f2:	4658      	mov	r0, fp
 80171f4:	f004 fca2 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80171f8:	4680      	mov	r8, r0
 80171fa:	2d00      	cmp	r5, #0
 80171fc:	f000 80c5 	beq.w	801738a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017200:	2800      	cmp	r0, #0
 8017202:	f000 80c2 	beq.w	801738a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017206:	2300      	movs	r3, #0
 8017208:	a90e      	add	r1, sp, #56	; 0x38
 801720a:	4638      	mov	r0, r7
 801720c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8017210:	683b      	ldr	r3, [r7, #0]
 8017212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017214:	4798      	blx	r3
 8017216:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801721a:	f9b6 3000 	ldrsh.w	r3, [r6]
 801721e:	88b1      	ldrh	r1, [r6, #4]
 8017220:	189c      	adds	r4, r3, r2
 8017222:	440b      	add	r3, r1
 8017224:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8017228:	fa02 f383 	sxtah	r3, r2, r3
 801722c:	3b01      	subs	r3, #1
 801722e:	fb93 f3f5 	sdiv	r3, r3, r5
 8017232:	fb94 f4f5 	sdiv	r4, r4, r5
 8017236:	fb13 f305 	smulbb	r3, r3, r5
 801723a:	fb14 f405 	smulbb	r4, r4, r5
 801723e:	b21b      	sxth	r3, r3
 8017240:	1aa4      	subs	r4, r4, r2
 8017242:	930b      	str	r3, [sp, #44]	; 0x2c
 8017244:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017248:	b2a4      	uxth	r4, r4
 801724a:	185a      	adds	r2, r3, r1
 801724c:	fb92 f2f8 	sdiv	r2, r2, r8
 8017250:	fb12 f208 	smulbb	r2, r2, r8
 8017254:	1a52      	subs	r2, r2, r1
 8017256:	b212      	sxth	r2, r2
 8017258:	920c      	str	r2, [sp, #48]	; 0x30
 801725a:	88f2      	ldrh	r2, [r6, #6]
 801725c:	4413      	add	r3, r2
 801725e:	fa01 f383 	sxtah	r3, r1, r3
 8017262:	3b01      	subs	r3, #1
 8017264:	fb93 f3f8 	sdiv	r3, r3, r8
 8017268:	fb13 f308 	smulbb	r3, r3, r8
 801726c:	b21b      	sxth	r3, r3
 801726e:	930d      	str	r3, [sp, #52]	; 0x34
 8017270:	1963      	adds	r3, r4, r5
 8017272:	fa1f fa83 	uxth.w	sl, r3
 8017276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017278:	b223      	sxth	r3, r4
 801727a:	4293      	cmp	r3, r2
 801727c:	9305      	str	r3, [sp, #20]
 801727e:	f300 8084 	bgt.w	801738a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017282:	fa0f f38a 	sxth.w	r3, sl
 8017286:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801728a:	9309      	str	r3, [sp, #36]	; 0x24
 801728c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801728e:	4599      	cmp	r9, r3
 8017290:	dd04      	ble.n	801729c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 8017292:	442c      	add	r4, r5
 8017294:	eb05 030a 	add.w	r3, r5, sl
 8017298:	b2a4      	uxth	r4, r4
 801729a:	e7ea      	b.n	8017272 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801729c:	f9b6 c000 	ldrsh.w	ip, [r6]
 80172a0:	88b2      	ldrh	r2, [r6, #4]
 80172a2:	4462      	add	r2, ip
 80172a4:	b292      	uxth	r2, r2
 80172a6:	b213      	sxth	r3, r2
 80172a8:	9308      	str	r3, [sp, #32]
 80172aa:	fa1f f389 	uxth.w	r3, r9
 80172ae:	eb08 0103 	add.w	r1, r8, r3
 80172b2:	9307      	str	r3, [sp, #28]
 80172b4:	b289      	uxth	r1, r1
 80172b6:	b208      	sxth	r0, r1
 80172b8:	9006      	str	r0, [sp, #24]
 80172ba:	9805      	ldr	r0, [sp, #20]
 80172bc:	4603      	mov	r3, r0
 80172be:	9808      	ldr	r0, [sp, #32]
 80172c0:	4283      	cmp	r3, r0
 80172c2:	da5e      	bge.n	8017382 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80172c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80172c6:	4584      	cmp	ip, r0
 80172c8:	da5b      	bge.n	8017382 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80172ca:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80172ce:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80172d2:	4486      	add	lr, r0
 80172d4:	fa1f fe8e 	uxth.w	lr, lr
 80172d8:	fa0f f38e 	sxth.w	r3, lr
 80172dc:	4599      	cmp	r9, r3
 80172de:	930a      	str	r3, [sp, #40]	; 0x28
 80172e0:	da4f      	bge.n	8017382 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80172e2:	9b06      	ldr	r3, [sp, #24]
 80172e4:	4298      	cmp	r0, r3
 80172e6:	da4c      	bge.n	8017382 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80172e8:	9b05      	ldr	r3, [sp, #20]
 80172ea:	459c      	cmp	ip, r3
 80172ec:	bfb8      	it	lt
 80172ee:	469c      	movlt	ip, r3
 80172f0:	4548      	cmp	r0, r9
 80172f2:	9b08      	ldr	r3, [sp, #32]
 80172f4:	bfb8      	it	lt
 80172f6:	4648      	movlt	r0, r9
 80172f8:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 80172fc:	4699      	mov	r9, r3
 80172fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017300:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8017304:	4599      	cmp	r9, r3
 8017306:	bfc8      	it	gt
 8017308:	4652      	movgt	r2, sl
 801730a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801730c:	eba2 020c 	sub.w	r2, r2, ip
 8017310:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8017314:	9a06      	ldr	r2, [sp, #24]
 8017316:	4293      	cmp	r3, r2
 8017318:	bfd8      	it	le
 801731a:	4671      	movle	r1, lr
 801731c:	1a09      	subs	r1, r1, r0
 801731e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8017322:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017326:	9b07      	ldr	r3, [sp, #28]
 8017328:	1b12      	subs	r2, r2, r4
 801732a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801732e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017332:	1ad2      	subs	r2, r2, r3
 8017334:	4b16      	ldr	r3, [pc, #88]	; (8017390 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8017336:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801733a:	681a      	ldr	r2, [r3, #0]
 801733c:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8017340:	b109      	cbz	r1, 8017346 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8017342:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8017344:	b900      	cbnz	r0, 8017348 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8017346:	6890      	ldr	r0, [r2, #8]
 8017348:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801734c:	f04f 0c01 	mov.w	ip, #1
 8017350:	9b07      	ldr	r3, [sp, #28]
 8017352:	6801      	ldr	r1, [r0, #0]
 8017354:	4413      	add	r3, r2
 8017356:	f8cd c008 	str.w	ip, [sp, #8]
 801735a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801735e:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8017362:	b21b      	sxth	r3, r3
 8017364:	4422      	add	r2, r4
 8017366:	f8cd c004 	str.w	ip, [sp, #4]
 801736a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801736e:	b212      	sxth	r2, r2
 8017370:	f8cd c000 	str.w	ip, [sp]
 8017374:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8017378:	4659      	mov	r1, fp
 801737a:	47c8      	blx	r9
 801737c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017380:	e784      	b.n	801728c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8017382:	2300      	movs	r3, #0
 8017384:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8017388:	e7cb      	b.n	8017322 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801738a:	b013      	add	sp, #76	; 0x4c
 801738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017390:	2000bb90 	.word	0x2000bb90

08017394 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8017394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017398:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801739c:	4606      	mov	r6, r0
 801739e:	4689      	mov	r9, r1
 80173a0:	2bff      	cmp	r3, #255	; 0xff
 80173a2:	d008      	beq.n	80173b6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80173a4:	2300      	movs	r3, #0
 80173a6:	8003      	strh	r3, [r0, #0]
 80173a8:	8043      	strh	r3, [r0, #2]
 80173aa:	8083      	strh	r3, [r0, #4]
 80173ac:	4630      	mov	r0, r6
 80173ae:	80f3      	strh	r3, [r6, #6]
 80173b0:	b003      	add	sp, #12
 80173b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173b6:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80173ba:	4668      	mov	r0, sp
 80173bc:	4659      	mov	r1, fp
 80173be:	f004 fbf7 	bl	801bbb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80173c2:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80173c6:	4658      	mov	r0, fp
 80173c8:	f9bd 7000 	ldrsh.w	r7, [sp]
 80173cc:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80173d0:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80173d4:	f004 fb78 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80173d8:	4284      	cmp	r4, r0
 80173da:	d10d      	bne.n	80173f8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80173dc:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80173e0:	4658      	mov	r0, fp
 80173e2:	f004 fbab 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80173e6:	4580      	cmp	r8, r0
 80173e8:	d12a      	bne.n	8017440 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80173ea:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80173ee:	8037      	strh	r7, [r6, #0]
 80173f0:	f8a6 a002 	strh.w	sl, [r6, #2]
 80173f4:	80b5      	strh	r5, [r6, #4]
 80173f6:	e7d9      	b.n	80173ac <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 80173f8:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 80173fc:	4658      	mov	r0, fp
 80173fe:	f004 fb63 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017402:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8017406:	1b7f      	subs	r7, r7, r5
 8017408:	b2a3      	uxth	r3, r4
 801740a:	b2bd      	uxth	r5, r7
 801740c:	b22f      	sxth	r7, r5
 801740e:	4428      	add	r0, r5
 8017410:	2f00      	cmp	r7, #0
 8017412:	b280      	uxth	r0, r0
 8017414:	bfb8      	it	lt
 8017416:	18ed      	addlt	r5, r5, r3
 8017418:	4403      	add	r3, r0
 801741a:	bfac      	ite	ge
 801741c:	4625      	movge	r5, r4
 801741e:	2700      	movlt	r7, #0
 8017420:	b29b      	uxth	r3, r3
 8017422:	bfb8      	it	lt
 8017424:	b22d      	sxthlt	r5, r5
 8017426:	b219      	sxth	r1, r3
 8017428:	bfb8      	it	lt
 801742a:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801742e:	4291      	cmp	r1, r2
 8017430:	bfc4      	itt	gt
 8017432:	1a9c      	subgt	r4, r3, r2
 8017434:	b224      	sxthgt	r4, r4
 8017436:	42ac      	cmp	r4, r5
 8017438:	bfc4      	itt	gt
 801743a:	b207      	sxthgt	r7, r0
 801743c:	4625      	movgt	r5, r4
 801743e:	e7cf      	b.n	80173e0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8017440:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8017444:	4658      	mov	r0, fp
 8017446:	f004 fb79 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801744a:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801744e:	ebaa 0404 	sub.w	r4, sl, r4
 8017452:	fa1f f288 	uxth.w	r2, r8
 8017456:	b2a4      	uxth	r4, r4
 8017458:	fa0f fa84 	sxth.w	sl, r4
 801745c:	4420      	add	r0, r4
 801745e:	f1ba 0f00 	cmp.w	sl, #0
 8017462:	b280      	uxth	r0, r0
 8017464:	bfb8      	it	lt
 8017466:	18a3      	addlt	r3, r4, r2
 8017468:	4402      	add	r2, r0
 801746a:	bfac      	ite	ge
 801746c:	4643      	movge	r3, r8
 801746e:	f04f 0a00 	movlt.w	sl, #0
 8017472:	b292      	uxth	r2, r2
 8017474:	bfb8      	it	lt
 8017476:	b21b      	sxthlt	r3, r3
 8017478:	b214      	sxth	r4, r2
 801747a:	bfb8      	it	lt
 801747c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017480:	428c      	cmp	r4, r1
 8017482:	bfc4      	itt	gt
 8017484:	eba2 0801 	subgt.w	r8, r2, r1
 8017488:	fa0f f888 	sxthgt.w	r8, r8
 801748c:	4543      	cmp	r3, r8
 801748e:	bfbc      	itt	lt
 8017490:	fa0f fa80 	sxthlt.w	sl, r0
 8017494:	4643      	movlt	r3, r8
 8017496:	e7aa      	b.n	80173ee <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08017498 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801749c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174a0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80174a2:	4604      	mov	r4, r0
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d018      	beq.n	80174da <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80174a8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80174ac:	4628      	mov	r0, r5
 80174ae:	f7f7 fdbb 	bl	800f028 <_ZNK8touchgfx9TypedText7getFontEv>
 80174b2:	6803      	ldr	r3, [r0, #0]
 80174b4:	4606      	mov	r6, r0
 80174b6:	4628      	mov	r0, r5
 80174b8:	69df      	ldr	r7, [r3, #28]
 80174ba:	f7f7 fdd1 	bl	800f060 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80174be:	4680      	mov	r8, r0
 80174c0:	4628      	mov	r0, r5
 80174c2:	f7f9 f8cb 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 80174c6:	2300      	movs	r3, #0
 80174c8:	4602      	mov	r2, r0
 80174ca:	4641      	mov	r1, r8
 80174cc:	9300      	str	r3, [sp, #0]
 80174ce:	4630      	mov	r0, r6
 80174d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80174d2:	47b8      	blx	r7
 80174d4:	b002      	add	sp, #8
 80174d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174da:	2000      	movs	r0, #0
 80174dc:	e7fa      	b.n	80174d4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

080174de <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80174de:	b570      	push	{r4, r5, r6, lr}
 80174e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174e4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80174e6:	4604      	mov	r4, r0
 80174e8:	429a      	cmp	r2, r3
 80174ea:	d00c      	beq.n	8017506 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 80174ec:	f850 3b26 	ldr.w	r3, [r0], #38
 80174f0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80174f2:	f7f9 f8b3 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 80174f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80174f8:	4601      	mov	r1, r0
 80174fa:	46ac      	mov	ip, r5
 80174fc:	4620      	mov	r0, r4
 80174fe:	2300      	movs	r3, #0
 8017500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017504:	4760      	bx	ip
 8017506:	2000      	movs	r0, #0
 8017508:	bd70      	pop	{r4, r5, r6, pc}
	...

0801750c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801750c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017514:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017516:	b08d      	sub	sp, #52	; 0x34
 8017518:	4604      	mov	r4, r0
 801751a:	429e      	cmp	r6, r3
 801751c:	460f      	mov	r7, r1
 801751e:	d048      	beq.n	80175b2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017520:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017524:	4628      	mov	r0, r5
 8017526:	f7f7 fd7f 	bl	800f028 <_ZNK8touchgfx9TypedText7getFontEv>
 801752a:	4680      	mov	r8, r0
 801752c:	2800      	cmp	r0, #0
 801752e:	d040      	beq.n	80175b2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017530:	4628      	mov	r0, r5
 8017532:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017536:	f7f7 fdab 	bl	800f090 <_ZNK8touchgfx9TypedText11assertValidEv>
 801753a:	4b1f      	ldr	r3, [pc, #124]	; (80175b8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801753c:	4628      	mov	r0, r5
 801753e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017548:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801754c:	785e      	ldrb	r6, [r3, #1]
 801754e:	f7f7 fd87 	bl	800f060 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017552:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017556:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801755a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801755c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017560:	f88d 6020 	strb.w	r6, [sp, #32]
 8017564:	ae05      	add	r6, sp, #20
 8017566:	9309      	str	r3, [sp, #36]	; 0x24
 8017568:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801756c:	f8cd 801c 	str.w	r8, [sp, #28]
 8017570:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017574:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017578:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801757c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017580:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017584:	f7f8 f930 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8017588:	4621      	mov	r1, r4
 801758a:	4680      	mov	r8, r0
 801758c:	4630      	mov	r0, r6
 801758e:	f002 fa2a 	bl	80199e6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017592:	4628      	mov	r0, r5
 8017594:	f7f9 f862 	bl	801065c <_ZNK8touchgfx9TypedText7getTextEv>
 8017598:	2300      	movs	r3, #0
 801759a:	9303      	str	r3, [sp, #12]
 801759c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801759e:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80175a2:	ab07      	add	r3, sp, #28
 80175a4:	4640      	mov	r0, r8
 80175a6:	9300      	str	r3, [sp, #0]
 80175a8:	463b      	mov	r3, r7
 80175aa:	e896 0006 	ldmia.w	r6, {r1, r2}
 80175ae:	f000 fab3 	bl	8017b18 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80175b2:	b00d      	add	sp, #52	; 0x34
 80175b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b8:	2000bc20 	.word	0x2000bc20

080175bc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80175bc:	b570      	push	{r4, r5, r6, lr}
 80175be:	4605      	mov	r5, r0
 80175c0:	880b      	ldrh	r3, [r1, #0]
 80175c2:	4604      	mov	r4, r0
 80175c4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80175c6:	f855 3b26 	ldr.w	r3, [r5], #38
 80175ca:	4628      	mov	r0, r5
 80175cc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80175ce:	f004 fa7b 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80175d2:	b201      	sxth	r1, r0
 80175d4:	4620      	mov	r0, r4
 80175d6:	47b0      	blx	r6
 80175d8:	6823      	ldr	r3, [r4, #0]
 80175da:	4628      	mov	r0, r5
 80175dc:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80175de:	f004 faad 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80175e2:	b201      	sxth	r1, r0
 80175e4:	4620      	mov	r0, r4
 80175e6:	47b0      	blx	r6
 80175e8:	4628      	mov	r0, r5
 80175ea:	f004 fb3b 	bl	801bc64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80175ee:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 80175f2:	bd70      	pop	{r4, r5, r6, pc}

080175f4 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80175f4:	b510      	push	{r4, lr}
 80175f6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80175fa:	4604      	mov	r4, r0
 80175fc:	2bff      	cmp	r3, #255	; 0xff
 80175fe:	d006      	beq.n	801760e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017600:	2300      	movs	r3, #0
 8017602:	8003      	strh	r3, [r0, #0]
 8017604:	8043      	strh	r3, [r0, #2]
 8017606:	8083      	strh	r3, [r0, #4]
 8017608:	80c3      	strh	r3, [r0, #6]
 801760a:	4620      	mov	r0, r4
 801760c:	bd10      	pop	{r4, pc}
 801760e:	3126      	adds	r1, #38	; 0x26
 8017610:	f004 face 	bl	801bbb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017614:	e7f9      	b.n	801760a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017618 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801761c:	4604      	mov	r4, r0
 801761e:	b088      	sub	sp, #32
 8017620:	2500      	movs	r5, #0
 8017622:	460f      	mov	r7, r1
 8017624:	f854 3b26 	ldr.w	r3, [r4], #38
 8017628:	a904      	add	r1, sp, #16
 801762a:	4606      	mov	r6, r0
 801762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801762e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017632:	4798      	blx	r3
 8017634:	4620      	mov	r0, r4
 8017636:	f004 fa47 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801763a:	4680      	mov	r8, r0
 801763c:	4620      	mov	r0, r4
 801763e:	f004 fa7d 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017642:	9506      	str	r5, [sp, #24]
 8017644:	ad06      	add	r5, sp, #24
 8017646:	f8ad 001e 	strh.w	r0, [sp, #30]
 801764a:	4639      	mov	r1, r7
 801764c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017650:	4628      	mov	r0, r5
 8017652:	f7fd fef5 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 8017656:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801765a:	b1c3      	cbz	r3, 801768e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801765c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017660:	b1ab      	cbz	r3, 801768e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017662:	4b0c      	ldr	r3, [pc, #48]	; (8017694 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801766a:	b10a      	cbz	r2, 8017670 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801766c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801766e:	b900      	cbnz	r0, 8017672 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8017670:	6898      	ldr	r0, [r3, #8]
 8017672:	2701      	movs	r7, #1
 8017674:	6801      	ldr	r1, [r0, #0]
 8017676:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801767a:	9702      	str	r7, [sp, #8]
 801767c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8017680:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017684:	e9cd 5600 	strd	r5, r6, [sp]
 8017688:	68cd      	ldr	r5, [r1, #12]
 801768a:	4621      	mov	r1, r4
 801768c:	47a8      	blx	r5
 801768e:	b008      	add	sp, #32
 8017690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017694:	2000bb90 	.word	0x2000bb90

08017698 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017698:	4b02      	ldr	r3, [pc, #8]	; (80176a4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801769a:	6018      	str	r0, [r3, #0]
 801769c:	4b02      	ldr	r3, [pc, #8]	; (80176a8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801769e:	6019      	str	r1, [r3, #0]
 80176a0:	4770      	bx	lr
 80176a2:	bf00      	nop
 80176a4:	2000bb98 	.word	0x2000bb98
 80176a8:	2000bbac 	.word	0x2000bbac

080176ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80176ac:	b538      	push	{r3, r4, r5, lr}
 80176ae:	4c2b      	ldr	r4, [pc, #172]	; (801775c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80176b0:	4b2b      	ldr	r3, [pc, #172]	; (8017760 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80176b2:	6821      	ldr	r1, [r4, #0]
 80176b4:	681a      	ldr	r2, [r3, #0]
 80176b6:	4281      	cmp	r1, r0
 80176b8:	4d2a      	ldr	r5, [pc, #168]	; (8017764 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80176ba:	492b      	ldr	r1, [pc, #172]	; (8017768 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80176bc:	d108      	bne.n	80176d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80176be:	682b      	ldr	r3, [r5, #0]
 80176c0:	4293      	cmp	r3, r2
 80176c2:	d105      	bne.n	80176d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80176c4:	6808      	ldr	r0, [r1, #0]
 80176c6:	280f      	cmp	r0, #15
 80176c8:	bf94      	ite	ls
 80176ca:	2000      	movls	r0, #0
 80176cc:	2001      	movhi	r0, #1
 80176ce:	bd38      	pop	{r3, r4, r5, pc}
 80176d0:	4b26      	ldr	r3, [pc, #152]	; (801776c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80176d2:	6020      	str	r0, [r4, #0]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	602a      	str	r2, [r5, #0]
 80176d8:	4298      	cmp	r0, r3
 80176da:	d905      	bls.n	80176e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80176dc:	4b24      	ldr	r3, [pc, #144]	; (8017770 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80176de:	2137      	movs	r1, #55	; 0x37
 80176e0:	4a24      	ldr	r2, [pc, #144]	; (8017774 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80176e2:	4825      	ldr	r0, [pc, #148]	; (8017778 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80176e4:	f00d ff42 	bl	802556c <__assert_func>
 80176e8:	f010 0403 	ands.w	r4, r0, #3
 80176ec:	bf1f      	itttt	ne
 80176ee:	f1c4 0504 	rsbne	r5, r4, #4
 80176f2:	3b04      	subne	r3, #4
 80176f4:	1952      	addne	r2, r2, r5
 80176f6:	191b      	addne	r3, r3, r4
 80176f8:	4d20      	ldr	r5, [pc, #128]	; (801777c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80176fa:	4402      	add	r2, r0
 80176fc:	1a1b      	subs	r3, r3, r0
 80176fe:	3001      	adds	r0, #1
 8017700:	602a      	str	r2, [r5, #0]
 8017702:	f020 0401 	bic.w	r4, r0, #1
 8017706:	42a3      	cmp	r3, r4
 8017708:	d203      	bcs.n	8017712 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801770a:	4b19      	ldr	r3, [pc, #100]	; (8017770 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801770c:	214a      	movs	r1, #74	; 0x4a
 801770e:	4a19      	ldr	r2, [pc, #100]	; (8017774 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017710:	e7e7      	b.n	80176e2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017712:	f010 0002 	ands.w	r0, r0, #2
 8017716:	bf1f      	itttt	ne
 8017718:	f1c0 0504 	rsbne	r5, r0, #4
 801771c:	1952      	addne	r2, r2, r5
 801771e:	1f05      	subne	r5, r0, #4
 8017720:	195b      	addne	r3, r3, r5
 8017722:	4422      	add	r2, r4
 8017724:	4d16      	ldr	r5, [pc, #88]	; (8017780 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017726:	1b1b      	subs	r3, r3, r4
 8017728:	602a      	str	r2, [r5, #0]
 801772a:	429c      	cmp	r4, r3
 801772c:	d903      	bls.n	8017736 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801772e:	4b10      	ldr	r3, [pc, #64]	; (8017770 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017730:	215d      	movs	r1, #93	; 0x5d
 8017732:	4a10      	ldr	r2, [pc, #64]	; (8017774 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017734:	e7d5      	b.n	80176e2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017736:	b120      	cbz	r0, 8017742 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017738:	f1c0 0504 	rsb	r5, r0, #4
 801773c:	3804      	subs	r0, #4
 801773e:	442a      	add	r2, r5
 8017740:	4403      	add	r3, r0
 8017742:	1b1b      	subs	r3, r3, r4
 8017744:	4422      	add	r2, r4
 8017746:	480f      	ldr	r0, [pc, #60]	; (8017784 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017748:	2b0f      	cmp	r3, #15
 801774a:	600b      	str	r3, [r1, #0]
 801774c:	6002      	str	r2, [r0, #0]
 801774e:	d803      	bhi.n	8017758 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017750:	4b0d      	ldr	r3, [pc, #52]	; (8017788 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8017752:	2170      	movs	r1, #112	; 0x70
 8017754:	4a07      	ldr	r2, [pc, #28]	; (8017774 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017756:	e7c4      	b.n	80176e2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017758:	2001      	movs	r0, #1
 801775a:	e7b8      	b.n	80176ce <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801775c:	2000bba0 	.word	0x2000bba0
 8017760:	2000bb98 	.word	0x2000bb98
 8017764:	2000bba8 	.word	0x2000bba8
 8017768:	2000bbb0 	.word	0x2000bbb0
 801776c:	2000bbac 	.word	0x2000bbac
 8017770:	08028cf8 	.word	0x08028cf8
 8017774:	08028dc0 	.word	0x08028dc0
 8017778:	08028d31 	.word	0x08028d31
 801777c:	2000bbb4 	.word	0x2000bbb4
 8017780:	2000bba4 	.word	0x2000bba4
 8017784:	2000bb9c 	.word	0x2000bb9c
 8017788:	08028d7b 	.word	0x08028d7b

0801778c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801778c:	4b04      	ldr	r3, [pc, #16]	; (80177a0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801778e:	6818      	ldr	r0, [r3, #0]
 8017790:	b120      	cbz	r0, 801779c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8017792:	4b04      	ldr	r3, [pc, #16]	; (80177a4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8017794:	6818      	ldr	r0, [r3, #0]
 8017796:	3000      	adds	r0, #0
 8017798:	bf18      	it	ne
 801779a:	2001      	movne	r0, #1
 801779c:	4770      	bx	lr
 801779e:	bf00      	nop
 80177a0:	2000bb98 	.word	0x2000bb98
 80177a4:	2000bbac 	.word	0x2000bbac

080177a8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80177a8:	4b01      	ldr	r3, [pc, #4]	; (80177b0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80177aa:	6818      	ldr	r0, [r3, #0]
 80177ac:	4770      	bx	lr
 80177ae:	bf00      	nop
 80177b0:	2000bba0 	.word	0x2000bba0

080177b4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80177b4:	4b01      	ldr	r3, [pc, #4]	; (80177bc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80177b6:	6818      	ldr	r0, [r3, #0]
 80177b8:	4770      	bx	lr
 80177ba:	bf00      	nop
 80177bc:	2000bba8 	.word	0x2000bba8

080177c0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80177c0:	4b01      	ldr	r3, [pc, #4]	; (80177c8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80177c2:	6818      	ldr	r0, [r3, #0]
 80177c4:	4770      	bx	lr
 80177c6:	bf00      	nop
 80177c8:	2000bbb4 	.word	0x2000bbb4

080177cc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80177cc:	4b01      	ldr	r3, [pc, #4]	; (80177d4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80177ce:	6818      	ldr	r0, [r3, #0]
 80177d0:	4770      	bx	lr
 80177d2:	bf00      	nop
 80177d4:	2000bba4 	.word	0x2000bba4

080177d8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80177d8:	4b01      	ldr	r3, [pc, #4]	; (80177e0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80177da:	6818      	ldr	r0, [r3, #0]
 80177dc:	4770      	bx	lr
 80177de:	bf00      	nop
 80177e0:	2000bb9c 	.word	0x2000bb9c

080177e4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80177e4:	4b01      	ldr	r3, [pc, #4]	; (80177ec <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80177e6:	6818      	ldr	r0, [r3, #0]
 80177e8:	4770      	bx	lr
 80177ea:	bf00      	nop
 80177ec:	2000bbb0 	.word	0x2000bbb0

080177f0 <_ZN8touchgfx3LCD4initEv>:
 80177f0:	4770      	bx	lr

080177f2 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80177f2:	2000      	movs	r0, #0
 80177f4:	4770      	bx	lr

080177f6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80177f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177fa:	b091      	sub	sp, #68	; 0x44
 80177fc:	4699      	mov	r9, r3
 80177fe:	4617      	mov	r7, r2
 8017800:	2500      	movs	r5, #0
 8017802:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8017806:	4680      	mov	r8, r0
 8017808:	a80e      	add	r0, sp, #56	; 0x38
 801780a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801780c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8017810:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8017814:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017818:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801781c:	910d      	str	r1, [sp, #52]	; 0x34
 801781e:	950e      	str	r5, [sp, #56]	; 0x38
 8017820:	f001 faa4 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017824:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017826:	f8d9 6000 	ldr.w	r6, [r9]
 801782a:	6818      	ldr	r0, [r3, #0]
 801782c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801782e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8017832:	1b80      	subs	r0, r0, r6
 8017834:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017838:	eb02 0c06 	add.w	ip, r2, r6
 801783c:	ebab 0e0c 	sub.w	lr, fp, ip
 8017840:	4570      	cmp	r0, lr
 8017842:	f340 80bc 	ble.w	80179be <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017846:	88a1      	ldrh	r1, [r4, #4]
 8017848:	4459      	add	r1, fp
 801784a:	b209      	sxth	r1, r1
 801784c:	458c      	cmp	ip, r1
 801784e:	f300 80b6 	bgt.w	80179be <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017852:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8017856:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801785a:	4283      	cmp	r3, r0
 801785c:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8017860:	edd9 6a07 	vldr	s13, [r9, #28]
 8017864:	bfa8      	it	ge
 8017866:	4603      	movge	r3, r0
 8017868:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801786c:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8017870:	45e3      	cmp	fp, ip
 8017872:	ee07 3a90 	vmov	s15, r3
 8017876:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801787a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801787e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017882:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017886:	ee25 5a27 	vmul.f32	s10, s10, s15
 801788a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801788e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017892:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017896:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801789a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801789e:	ee61 1a87 	vmul.f32	s3, s3, s14
 80178a2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80178a6:	f340 808d 	ble.w	80179c4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80178aa:	fb9e f5f3 	sdiv	r5, lr, r3
 80178ae:	ee07 5a10 	vmov	s14, r5
 80178b2:	2d00      	cmp	r5, #0
 80178b4:	fb03 e415 	mls	r4, r3, r5, lr
 80178b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80178bc:	eea7 0a04 	vfma.f32	s0, s14, s8
 80178c0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80178c4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80178c8:	dd12      	ble.n	80178f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 80178ca:	ee70 6a44 	vsub.f32	s13, s0, s8
 80178ce:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80178d2:	ee31 2a45 	vsub.f32	s4, s2, s10
 80178d6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80178da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178de:	bf14      	ite	ne
 80178e0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80178e4:	eeb0 7a67 	vmoveq.f32	s14, s15
 80178e8:	ee61 1a87 	vmul.f32	s3, s3, s14
 80178ec:	ee22 2a07 	vmul.f32	s4, s4, s14
 80178f0:	fb05 f703 	mul.w	r7, r5, r3
 80178f4:	1bc0      	subs	r0, r0, r7
 80178f6:	443e      	add	r6, r7
 80178f8:	1997      	adds	r7, r2, r6
 80178fa:	4407      	add	r7, r0
 80178fc:	42b9      	cmp	r1, r7
 80178fe:	bfbc      	itt	lt
 8017900:	1a88      	sublt	r0, r1, r2
 8017902:	1b80      	sublt	r0, r0, r6
 8017904:	2800      	cmp	r0, #0
 8017906:	dd5a      	ble.n	80179be <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017908:	fb90 f1f3 	sdiv	r1, r0, r3
 801790c:	fb03 0211 	mls	r2, r3, r1, r0
 8017910:	b90a      	cbnz	r2, 8017916 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8017912:	3901      	subs	r1, #1
 8017914:	461a      	mov	r2, r3
 8017916:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801791a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801791e:	44a4      	add	ip, r4
 8017920:	2900      	cmp	r1, #0
 8017922:	bfcc      	ite	gt
 8017924:	469e      	movgt	lr, r3
 8017926:	4696      	movle	lr, r2
 8017928:	fb03 c505 	mla	r5, r3, r5, ip
 801792c:	eef0 6a42 	vmov.f32	s13, s4
 8017930:	eeb0 7a61 	vmov.f32	s14, s3
 8017934:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017938:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801793c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017940:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017944:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017948:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801794c:	ee17 0a90 	vmov	r0, s15
 8017950:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017954:	fb90 f6f3 	sdiv	r6, r0, r3
 8017958:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801795c:	ee17 0a90 	vmov	r0, s15
 8017960:	fb90 f7f3 	sdiv	r7, r0, r3
 8017964:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017968:	f8d0 8000 	ldr.w	r8, [r0]
 801796c:	900c      	str	r0, [sp, #48]	; 0x30
 801796e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017970:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017974:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8017978:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801797c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8017980:	f8cd a020 	str.w	sl, [sp, #32]
 8017984:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8017988:	980d      	ldr	r0, [sp, #52]	; 0x34
 801798a:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801798e:	9603      	str	r6, [sp, #12]
 8017990:	44ca      	add	sl, r9
 8017992:	9506      	str	r5, [sp, #24]
 8017994:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8017998:	ee16 0a90 	vmov	r0, s13
 801799c:	f8cd a01c 	str.w	sl, [sp, #28]
 80179a0:	fb07 0704 	mla	r7, r7, r4, r0
 80179a4:	ee17 0a10 	vmov	r0, s14
 80179a8:	fb06 0604 	mla	r6, r6, r4, r0
 80179ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80179ae:	9702      	str	r7, [sp, #8]
 80179b0:	e9cd 3600 	strd	r3, r6, [sp]
 80179b4:	ebae 0304 	sub.w	r3, lr, r4
 80179b8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80179bc:	47a8      	blx	r5
 80179be:	b011      	add	sp, #68	; 0x44
 80179c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179c4:	462c      	mov	r4, r5
 80179c6:	e797      	b.n	80178f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

080179c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80179c8:	b570      	push	{r4, r5, r6, lr}
 80179ca:	4604      	mov	r4, r0
 80179cc:	2500      	movs	r5, #0
 80179ce:	9804      	ldr	r0, [sp, #16]
 80179d0:	7223      	strb	r3, [r4, #8]
 80179d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80179d6:	8025      	strh	r5, [r4, #0]
 80179d8:	6061      	str	r1, [r4, #4]
 80179da:	7263      	strb	r3, [r4, #9]
 80179dc:	60e0      	str	r0, [r4, #12]
 80179de:	8222      	strh	r2, [r4, #16]
 80179e0:	8265      	strh	r5, [r4, #18]
 80179e2:	82a5      	strh	r5, [r4, #20]
 80179e4:	82e5      	strh	r5, [r4, #22]
 80179e6:	8325      	strh	r5, [r4, #24]
 80179e8:	8365      	strh	r5, [r4, #26]
 80179ea:	83a5      	strh	r5, [r4, #28]
 80179ec:	77a5      	strb	r5, [r4, #30]
 80179ee:	6803      	ldr	r3, [r0, #0]
 80179f0:	695b      	ldr	r3, [r3, #20]
 80179f2:	4798      	blx	r3
 80179f4:	4606      	mov	r6, r0
 80179f6:	b1f8      	cbz	r0, 8017a38 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80179f8:	68e0      	ldr	r0, [r4, #12]
 80179fa:	4631      	mov	r1, r6
 80179fc:	6803      	ldr	r3, [r0, #0]
 80179fe:	68db      	ldr	r3, [r3, #12]
 8017a00:	4798      	blx	r3
 8017a02:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8017a06:	4605      	mov	r5, r0
 8017a08:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017a0c:	7a83      	ldrb	r3, [r0, #10]
 8017a0e:	4313      	orrs	r3, r2
 8017a10:	83a3      	strh	r3, [r4, #28]
 8017a12:	7a63      	ldrb	r3, [r4, #9]
 8017a14:	2b04      	cmp	r3, #4
 8017a16:	d10f      	bne.n	8017a38 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017a18:	68e0      	ldr	r0, [r4, #12]
 8017a1a:	462a      	mov	r2, r5
 8017a1c:	4631      	mov	r1, r6
 8017a1e:	6803      	ldr	r3, [r0, #0]
 8017a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a22:	4798      	blx	r3
 8017a24:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8017a28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017a2c:	7aab      	ldrb	r3, [r5, #10]
 8017a2e:	4313      	orrs	r3, r2
 8017a30:	4418      	add	r0, r3
 8017a32:	8ba3      	ldrh	r3, [r4, #28]
 8017a34:	4418      	add	r0, r3
 8017a36:	83a0      	strh	r0, [r4, #28]
 8017a38:	4620      	mov	r0, r4
 8017a3a:	bd70      	pop	{r4, r5, r6, pc}

08017a3c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a40:	2400      	movs	r4, #0
 8017a42:	b085      	sub	sp, #20
 8017a44:	4681      	mov	r9, r0
 8017a46:	460f      	mov	r7, r1
 8017a48:	4692      	mov	sl, r2
 8017a4a:	469b      	mov	fp, r3
 8017a4c:	46a0      	mov	r8, r4
 8017a4e:	4626      	mov	r6, r4
 8017a50:	4554      	cmp	r4, sl
 8017a52:	da21      	bge.n	8017a98 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017a54:	2300      	movs	r3, #0
 8017a56:	463a      	mov	r2, r7
 8017a58:	4659      	mov	r1, fp
 8017a5a:	4648      	mov	r0, r9
 8017a5c:	9303      	str	r3, [sp, #12]
 8017a5e:	ab03      	add	r3, sp, #12
 8017a60:	f003 fa88 	bl	801af74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017a64:	4605      	mov	r5, r0
 8017a66:	b1b8      	cbz	r0, 8017a98 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017a68:	280a      	cmp	r0, #10
 8017a6a:	d015      	beq.n	8017a98 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017a6c:	9a03      	ldr	r2, [sp, #12]
 8017a6e:	b182      	cbz	r2, 8017a92 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8017a70:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8017a74:	4641      	mov	r1, r8
 8017a76:	7a93      	ldrb	r3, [r2, #10]
 8017a78:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017a7c:	8895      	ldrh	r5, [r2, #4]
 8017a7e:	4303      	orrs	r3, r0
 8017a80:	4638      	mov	r0, r7
 8017a82:	9301      	str	r3, [sp, #4]
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a88:	4798      	blx	r3
 8017a8a:	9b01      	ldr	r3, [sp, #4]
 8017a8c:	4418      	add	r0, r3
 8017a8e:	4406      	add	r6, r0
 8017a90:	b2b6      	uxth	r6, r6
 8017a92:	3401      	adds	r4, #1
 8017a94:	46a8      	mov	r8, r5
 8017a96:	e7db      	b.n	8017a50 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8017a98:	4630      	mov	r0, r6
 8017a9a:	b005      	add	sp, #20
 8017a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017aa0 <_ZN8touchgfx3LCD23drawStringWidthInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 8017aa0:	b510      	push	{r4, lr}
 8017aa2:	460c      	mov	r4, r1
 8017aa4:	4611      	mov	r1, r2
 8017aa6:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
 8017aaa:	f7ff ffc7 	bl	8017a3c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017aae:	8823      	ldrh	r3, [r4, #0]
 8017ab0:	4418      	add	r0, r3
 8017ab2:	8020      	strh	r0, [r4, #0]
 8017ab4:	bd10      	pop	{r4, pc}

08017ab6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017ab6:	2a02      	cmp	r2, #2
 8017ab8:	b530      	push	{r4, r5, lr}
 8017aba:	d011      	beq.n	8017ae0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017abc:	2a03      	cmp	r2, #3
 8017abe:	d01c      	beq.n	8017afa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017ac0:	2a01      	cmp	r2, #1
 8017ac2:	d10c      	bne.n	8017ade <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017ac4:	888b      	ldrh	r3, [r1, #4]
 8017ac6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017aca:	8801      	ldrh	r1, [r0, #0]
 8017acc:	1a9b      	subs	r3, r3, r2
 8017ace:	8844      	ldrh	r4, [r0, #2]
 8017ad0:	1a5b      	subs	r3, r3, r1
 8017ad2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017ad6:	8004      	strh	r4, [r0, #0]
 8017ad8:	8043      	strh	r3, [r0, #2]
 8017ada:	8081      	strh	r1, [r0, #4]
 8017adc:	80c2      	strh	r2, [r0, #6]
 8017ade:	bd30      	pop	{r4, r5, pc}
 8017ae0:	88cb      	ldrh	r3, [r1, #6]
 8017ae2:	88c2      	ldrh	r2, [r0, #6]
 8017ae4:	1a9b      	subs	r3, r3, r2
 8017ae6:	8842      	ldrh	r2, [r0, #2]
 8017ae8:	1a9b      	subs	r3, r3, r2
 8017aea:	888a      	ldrh	r2, [r1, #4]
 8017aec:	8881      	ldrh	r1, [r0, #4]
 8017aee:	8043      	strh	r3, [r0, #2]
 8017af0:	1a52      	subs	r2, r2, r1
 8017af2:	8801      	ldrh	r1, [r0, #0]
 8017af4:	1a52      	subs	r2, r2, r1
 8017af6:	8002      	strh	r2, [r0, #0]
 8017af8:	e7f1      	b.n	8017ade <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017afa:	88cb      	ldrh	r3, [r1, #6]
 8017afc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017b00:	8841      	ldrh	r1, [r0, #2]
 8017b02:	1a9b      	subs	r3, r3, r2
 8017b04:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017b08:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017b0c:	1a5b      	subs	r3, r3, r1
 8017b0e:	8045      	strh	r5, [r0, #2]
 8017b10:	8082      	strh	r2, [r0, #4]
 8017b12:	8003      	strh	r3, [r0, #0]
 8017b14:	80c4      	strh	r4, [r0, #6]
 8017b16:	e7e2      	b.n	8017ade <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017b18 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8017b18:	b570      	push	{r4, r5, r6, lr}
 8017b1a:	b086      	sub	sp, #24
 8017b1c:	ac02      	add	r4, sp, #8
 8017b1e:	e884 0006 	stmia.w	r4, {r1, r2}
 8017b22:	461a      	mov	r2, r3
 8017b24:	ab0c      	add	r3, sp, #48	; 0x30
 8017b26:	9305      	str	r3, [sp, #20]
 8017b28:	4b0a      	ldr	r3, [pc, #40]	; (8017b54 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8017b2a:	685d      	ldr	r5, [r3, #4]
 8017b2c:	1069      	asrs	r1, r5, #1
 8017b2e:	07ed      	lsls	r5, r5, #31
 8017b30:	eb00 0601 	add.w	r6, r0, r1
 8017b34:	bf46      	itte	mi
 8017b36:	681b      	ldrmi	r3, [r3, #0]
 8017b38:	5841      	ldrmi	r1, [r0, r1]
 8017b3a:	681d      	ldrpl	r5, [r3, #0]
 8017b3c:	4630      	mov	r0, r6
 8017b3e:	bf48      	it	mi
 8017b40:	58cd      	ldrmi	r5, [r1, r3]
 8017b42:	4621      	mov	r1, r4
 8017b44:	9b05      	ldr	r3, [sp, #20]
 8017b46:	9301      	str	r3, [sp, #4]
 8017b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b4a:	9300      	str	r3, [sp, #0]
 8017b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b4e:	47a8      	blx	r5
 8017b50:	b006      	add	sp, #24
 8017b52:	bd70      	pop	{r4, r5, r6, pc}
 8017b54:	20000030 	.word	0x20000030

08017b58 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>:
 8017b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b5c:	b08f      	sub	sp, #60	; 0x3c
 8017b5e:	4617      	mov	r7, r2
 8017b60:	4680      	mov	r8, r0
 8017b62:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8017b66:	9105      	str	r1, [sp, #20]
 8017b68:	920c      	str	r2, [sp, #48]	; 0x30
 8017b6a:	9308      	str	r3, [sp, #32]
 8017b6c:	e9dd 421b 	ldrd	r4, r2, [sp, #108]	; 0x6c
 8017b70:	ea4f 0b62 	mov.w	fp, r2, asr #1
 8017b74:	9206      	str	r2, [sp, #24]
 8017b76:	eb00 050b 	add.w	r5, r0, fp
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f040 814e 	bne.w	8017e1c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2c4>
 8017b80:	461a      	mov	r2, r3
 8017b82:	4699      	mov	r9, r3
 8017b84:	9307      	str	r3, [sp, #28]
 8017b86:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8017b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b8c:	991d      	ldr	r1, [sp, #116]	; 0x74
 8017b8e:	428b      	cmp	r3, r1
 8017b90:	f280 80b1 	bge.w	8017cf6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 8017b94:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017b96:	881b      	ldrh	r3, [r3, #0]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	f000 80ac 	beq.w	8017cf6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 8017b9e:	2b0a      	cmp	r3, #10
 8017ba0:	f000 80a9 	beq.w	8017cf6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x19e>
 8017ba4:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8017ba8:	f023 0c20 	bic.w	ip, r3, #32
 8017bac:	2901      	cmp	r1, #1
 8017bae:	fa1f fc8c 	uxth.w	ip, ip
 8017bb2:	d92c      	bls.n	8017c0e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 8017bb4:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 8017bb8:	d029      	beq.n	8017c0e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 8017bba:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8017bbe:	d026      	beq.n	8017c0e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xb6>
 8017bc0:	f023 0002 	bic.w	r0, r3, #2
 8017bc4:	f1a0 063c 	sub.w	r6, r0, #60	; 0x3c
 8017bc8:	4270      	negs	r0, r6
 8017bca:	4170      	adcs	r0, r6
 8017bcc:	f5a3 61a0 	sub.w	r1, r3, #1280	; 0x500
 8017bd0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017bd4:	d31d      	bcc.n	8017c12 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xba>
 8017bd6:	f503 6196 	add.w	r1, r3, #1200	; 0x4b0
 8017bda:	f240 36af 	movw	r6, #943	; 0x3af
 8017bde:	b289      	uxth	r1, r1
 8017be0:	42b1      	cmp	r1, r6
 8017be2:	bf8c      	ite	hi
 8017be4:	2100      	movhi	r1, #0
 8017be6:	2101      	movls	r1, #1
 8017be8:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8017bec:	f1bc 0f19 	cmp.w	ip, #25
 8017bf0:	f240 82c4 	bls.w	801817c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 8017bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8017bf6:	f240 82ad 	bls.w	8018154 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5fc>
 8017bfa:	2900      	cmp	r1, #0
 8017bfc:	f040 82aa 	bne.w	8018154 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5fc>
 8017c00:	f1b9 0f03 	cmp.w	r9, #3
 8017c04:	d83f      	bhi.n	8017c86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017c06:	e8df f009 	tbb	[pc, r9]
 8017c0a:	2138      	.short	0x2138
 8017c0c:	5125      	.short	0x5125
 8017c0e:	2001      	movs	r0, #1
 8017c10:	e7dc      	b.n	8017bcc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x74>
 8017c12:	2101      	movs	r1, #1
 8017c14:	e7e8      	b.n	8017be8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x90>
 8017c16:	2201      	movs	r2, #1
 8017c18:	2900      	cmp	r1, #0
 8017c1a:	d02f      	beq.n	8017c7c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x124>
 8017c1c:	f04f 0902 	mov.w	r9, #2
 8017c20:	e031      	b.n	8017c86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017c22:	b199      	cbz	r1, 8017c4c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xf4>
 8017c24:	9b06      	ldr	r3, [sp, #24]
 8017c26:	9905      	ldr	r1, [sp, #20]
 8017c28:	07d8      	lsls	r0, r3, #31
 8017c2a:	4628      	mov	r0, r5
 8017c2c:	bf4a      	itet	mi
 8017c2e:	682b      	ldrmi	r3, [r5, #0]
 8017c30:	46a1      	movpl	r9, r4
 8017c32:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017c36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017c38:	9303      	str	r3, [sp, #12]
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017c40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017c42:	9200      	str	r2, [sp, #0]
 8017c44:	463a      	mov	r2, r7
 8017c46:	47c8      	blx	r9
 8017c48:	2201      	movs	r2, #1
 8017c4a:	e7e7      	b.n	8017c1c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xc4>
 8017c4c:	3201      	adds	r2, #1
 8017c4e:	f04f 0901 	mov.w	r9, #1
 8017c52:	e018      	b.n	8017c86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017c54:	9b06      	ldr	r3, [sp, #24]
 8017c56:	4628      	mov	r0, r5
 8017c58:	07d9      	lsls	r1, r3, #31
 8017c5a:	9905      	ldr	r1, [sp, #20]
 8017c5c:	bf4a      	itet	mi
 8017c5e:	682b      	ldrmi	r3, [r5, #0]
 8017c60:	46a1      	movpl	r9, r4
 8017c62:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017c66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017c68:	9303      	str	r3, [sp, #12]
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017c70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017c72:	463a      	mov	r2, r7
 8017c74:	9300      	str	r3, [sp, #0]
 8017c76:	2301      	movs	r3, #1
 8017c78:	47c8      	blx	r9
 8017c7a:	2201      	movs	r2, #1
 8017c7c:	4691      	mov	r9, r2
 8017c7e:	e002      	b.n	8017c86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017c80:	2900      	cmp	r1, #0
 8017c82:	d030      	beq.n	8017ce6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x18e>
 8017c84:	3201      	adds	r2, #1
 8017c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c88:	2100      	movs	r1, #0
 8017c8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017c8c:	f1b9 0f01 	cmp.w	r9, #1
 8017c90:	bf08      	it	eq
 8017c92:	f043 0301 	orreq.w	r3, r3, #1
 8017c96:	920b      	str	r2, [sp, #44]	; 0x2c
 8017c98:	930a      	str	r3, [sp, #40]	; 0x28
 8017c9a:	f003 f92b 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017c9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017ca0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017ca2:	8018      	strh	r0, [r3, #0]
 8017ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ca6:	3301      	adds	r3, #1
 8017ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8017caa:	e76e      	b.n	8017b8a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x32>
 8017cac:	2001      	movs	r0, #1
 8017cae:	9b07      	ldr	r3, [sp, #28]
 8017cb0:	f103 0901 	add.w	r9, r3, #1
 8017cb4:	b109      	cbz	r1, 8017cba <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x162>
 8017cb6:	444a      	add	r2, r9
 8017cb8:	e7b0      	b.n	8017c1c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xc4>
 8017cba:	b1c8      	cbz	r0, 8017cf0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x198>
 8017cbc:	9b06      	ldr	r3, [sp, #24]
 8017cbe:	4628      	mov	r0, r5
 8017cc0:	9905      	ldr	r1, [sp, #20]
 8017cc2:	07db      	lsls	r3, r3, #31
 8017cc4:	bf4a      	itet	mi
 8017cc6:	682b      	ldrmi	r3, [r5, #0]
 8017cc8:	46a2      	movpl	sl, r4
 8017cca:	f853 a004 	ldrmi.w	sl, [r3, r4]
 8017cce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017cd0:	9303      	str	r3, [sp, #12]
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017cd8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017cda:	463a      	mov	r2, r7
 8017cdc:	9300      	str	r3, [sp, #0]
 8017cde:	2301      	movs	r3, #1
 8017ce0:	47d0      	blx	sl
 8017ce2:	464a      	mov	r2, r9
 8017ce4:	e7b3      	b.n	8017c4e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0xf6>
 8017ce6:	2301      	movs	r3, #1
 8017ce8:	9307      	str	r3, [sp, #28]
 8017cea:	f04f 0903 	mov.w	r9, #3
 8017cee:	e7ca      	b.n	8017c86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8017cf0:	f8cd 901c 	str.w	r9, [sp, #28]
 8017cf4:	e7f9      	b.n	8017cea <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x192>
 8017cf6:	f1b9 0f01 	cmp.w	r9, #1
 8017cfa:	d10f      	bne.n	8017d1c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1c4>
 8017cfc:	9b06      	ldr	r3, [sp, #24]
 8017cfe:	07d8      	lsls	r0, r3, #31
 8017d00:	bf4a      	itet	mi
 8017d02:	f858 300b 	ldrmi.w	r3, [r8, fp]
 8017d06:	46a1      	movpl	r9, r4
 8017d08:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017d0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017d0e:	9303      	str	r3, [sp, #12]
 8017d10:	2300      	movs	r3, #0
 8017d12:	9302      	str	r3, [sp, #8]
 8017d14:	9201      	str	r2, [sp, #4]
 8017d16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017d18:	9200      	str	r2, [sp, #0]
 8017d1a:	e078      	b.n	8017e0e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2b6>
 8017d1c:	f1b9 0f02 	cmp.w	r9, #2
 8017d20:	d10c      	bne.n	8017d3c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1e4>
 8017d22:	9b06      	ldr	r3, [sp, #24]
 8017d24:	07de      	lsls	r6, r3, #31
 8017d26:	bf4a      	itet	mi
 8017d28:	f858 300b 	ldrmi.w	r3, [r8, fp]
 8017d2c:	46a1      	movpl	r9, r4
 8017d2e:	f853 9004 	ldrmi.w	r9, [r3, r4]
 8017d32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017d34:	9303      	str	r3, [sp, #12]
 8017d36:	2300      	movs	r3, #0
 8017d38:	9302      	str	r3, [sp, #8]
 8017d3a:	e064      	b.n	8017e06 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2ae>
 8017d3c:	f1b9 0f03 	cmp.w	r9, #3
 8017d40:	d12d      	bne.n	8017d9e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 8017d42:	9b06      	ldr	r3, [sp, #24]
 8017d44:	f003 0a01 	and.w	sl, r3, #1
 8017d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d04e      	beq.n	8017dec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x294>
 8017d4e:	f1ba 0f00 	cmp.w	sl, #0
 8017d52:	d047      	beq.n	8017de4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x28c>
 8017d54:	f858 300b 	ldr.w	r3, [r8, fp]
 8017d58:	591b      	ldr	r3, [r3, r4]
 8017d5a:	461e      	mov	r6, r3
 8017d5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017d5e:	f04f 0900 	mov.w	r9, #0
 8017d62:	9905      	ldr	r1, [sp, #20]
 8017d64:	4628      	mov	r0, r5
 8017d66:	9303      	str	r3, [sp, #12]
 8017d68:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017d6a:	e9cd 2901 	strd	r2, r9, [sp, #4]
 8017d6e:	9300      	str	r3, [sp, #0]
 8017d70:	463a      	mov	r2, r7
 8017d72:	2301      	movs	r3, #1
 8017d74:	47b0      	blx	r6
 8017d76:	464b      	mov	r3, r9
 8017d78:	f1ba 0f00 	cmp.w	sl, #0
 8017d7c:	d034      	beq.n	8017de8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x290>
 8017d7e:	f858 200b 	ldr.w	r2, [r8, fp]
 8017d82:	f852 a004 	ldr.w	sl, [r2, r4]
 8017d86:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017d88:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017d8c:	9b07      	ldr	r3, [sp, #28]
 8017d8e:	9301      	str	r3, [sp, #4]
 8017d90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017d92:	9300      	str	r3, [sp, #0]
 8017d94:	2300      	movs	r3, #0
 8017d96:	463a      	mov	r2, r7
 8017d98:	9905      	ldr	r1, [sp, #20]
 8017d9a:	4628      	mov	r0, r5
 8017d9c:	47d0      	blx	sl
 8017d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017da0:	b18b      	cbz	r3, 8017dc6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x26e>
 8017da2:	9b06      	ldr	r3, [sp, #24]
 8017da4:	2201      	movs	r2, #1
 8017da6:	4628      	mov	r0, r5
 8017da8:	07d9      	lsls	r1, r3, #31
 8017daa:	9905      	ldr	r1, [sp, #20]
 8017dac:	bf44      	itt	mi
 8017dae:	f858 300b 	ldrmi.w	r3, [r8, fp]
 8017db2:	591c      	ldrmi	r4, [r3, r4]
 8017db4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017db6:	9303      	str	r3, [sp, #12]
 8017db8:	2300      	movs	r3, #0
 8017dba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017dbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017dc0:	9200      	str	r2, [sp, #0]
 8017dc2:	463a      	mov	r2, r7
 8017dc4:	47a0      	blx	r4
 8017dc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017dc8:	881b      	ldrh	r3, [r3, #0]
 8017dca:	2b0a      	cmp	r3, #10
 8017dcc:	f040 81c0 	bne.w	8018150 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5f8>
 8017dd0:	9908      	ldr	r1, [sp, #32]
 8017dd2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017dd4:	f003 f88e 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017dd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017dda:	8018      	strh	r0, [r3, #0]
 8017ddc:	2001      	movs	r0, #1
 8017dde:	b00f      	add	sp, #60	; 0x3c
 8017de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017de4:	4626      	mov	r6, r4
 8017de6:	e7b9      	b.n	8017d5c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x204>
 8017de8:	46a2      	mov	sl, r4
 8017dea:	e7cc      	b.n	8017d86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x22e>
 8017dec:	f1ba 0f00 	cmp.w	sl, #0
 8017df0:	d012      	beq.n	8017e18 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2c0>
 8017df2:	f858 300b 	ldr.w	r3, [r8, fp]
 8017df6:	f853 9004 	ldr.w	r9, [r3, r4]
 8017dfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017dfc:	9303      	str	r3, [sp, #12]
 8017dfe:	2300      	movs	r3, #0
 8017e00:	9302      	str	r3, [sp, #8]
 8017e02:	9b07      	ldr	r3, [sp, #28]
 8017e04:	441a      	add	r2, r3
 8017e06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017e08:	9201      	str	r2, [sp, #4]
 8017e0a:	9300      	str	r3, [sp, #0]
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	463a      	mov	r2, r7
 8017e10:	9905      	ldr	r1, [sp, #20]
 8017e12:	4628      	mov	r0, r5
 8017e14:	47c8      	blx	r9
 8017e16:	e7c2      	b.n	8017d9e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 8017e18:	46a1      	mov	r9, r4
 8017e1a:	e7ee      	b.n	8017dfa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2a2>
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8017e22:	9307      	str	r3, [sp, #28]
 8017e24:	461a      	mov	r2, r3
 8017e26:	469a      	mov	sl, r3
 8017e28:	9b06      	ldr	r3, [sp, #24]
 8017e2a:	f003 0301 	and.w	r3, r3, #1
 8017e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8017e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e32:	991d      	ldr	r1, [sp, #116]	; 0x74
 8017e34:	428b      	cmp	r3, r1
 8017e36:	f280 813f 	bge.w	80180b8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 8017e3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017e3c:	881b      	ldrh	r3, [r3, #0]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	f000 813a 	beq.w	80180b8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 8017e44:	2b0a      	cmp	r3, #10
 8017e46:	f000 8137 	beq.w	80180b8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x560>
 8017e4a:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8017e4e:	f023 0c20 	bic.w	ip, r3, #32
 8017e52:	2901      	cmp	r1, #1
 8017e54:	fa1f fc8c 	uxth.w	ip, ip
 8017e58:	d934      	bls.n	8017ec4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 8017e5a:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 8017e5e:	d031      	beq.n	8017ec4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 8017e60:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8017e64:	d02e      	beq.n	8017ec4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x36c>
 8017e66:	f023 0102 	bic.w	r1, r3, #2
 8017e6a:	f1a1 0e3c 	sub.w	lr, r1, #60	; 0x3c
 8017e6e:	f1de 0100 	rsbs	r1, lr, #0
 8017e72:	eb41 010e 	adc.w	r1, r1, lr
 8017e76:	f5a3 60a0 	sub.w	r0, r3, #1280	; 0x500
 8017e7a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8017e7e:	d323      	bcc.n	8017ec8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x370>
 8017e80:	f503 6096 	add.w	r0, r3, #1200	; 0x4b0
 8017e84:	b280      	uxth	r0, r0
 8017e86:	f5b0 7f6c 	cmp.w	r0, #944	; 0x3b0
 8017e8a:	bf38      	it	cc
 8017e8c:	2101      	movcc	r1, #1
 8017e8e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8017e92:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8017e96:	f1bc 0f19 	cmp.w	ip, #25
 8017e9a:	b280      	uxth	r0, r0
 8017e9c:	d905      	bls.n	8017eaa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x352>
 8017e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8017ea0:	f240 817c 	bls.w	801819c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x644>
 8017ea4:	2900      	cmp	r1, #0
 8017ea6:	f040 8179 	bne.w	801819c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x644>
 8017eaa:	f1ba 0f07 	cmp.w	sl, #7
 8017eae:	d818      	bhi.n	8017ee2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8017eb0:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8017eb4:	0017002a 	.word	0x0017002a
 8017eb8:	00170044 	.word	0x00170044
 8017ebc:	007e0069 	.word	0x007e0069
 8017ec0:	00d90075 	.word	0x00d90075
 8017ec4:	2101      	movs	r1, #1
 8017ec6:	e7d6      	b.n	8017e76 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x31e>
 8017ec8:	2101      	movs	r1, #1
 8017eca:	e7e0      	b.n	8017e8e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x336>
 8017ecc:	2300      	movs	r3, #0
 8017ece:	2809      	cmp	r0, #9
 8017ed0:	f04f 0201 	mov.w	r2, #1
 8017ed4:	d92f      	bls.n	8017f36 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	bf0c      	ite	eq
 8017eda:	f04f 0a02 	moveq.w	sl, #2
 8017ede:	f04f 0a06 	movne.w	sl, #6
 8017ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ee4:	9908      	ldr	r1, [sp, #32]
 8017ee6:	f1ba 0f02 	cmp.w	sl, #2
 8017eea:	bf08      	it	eq
 8017eec:	f043 0301 	orreq.w	r3, r3, #1
 8017ef0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017ef2:	920d      	str	r2, [sp, #52]	; 0x34
 8017ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ef6:	f002 fffd 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017efa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017efc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017efe:	8018      	strh	r0, [r3, #0]
 8017f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f02:	3301      	adds	r3, #1
 8017f04:	930a      	str	r3, [sp, #40]	; 0x28
 8017f06:	e793      	b.n	8017e30 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x2d8>
 8017f08:	2301      	movs	r3, #1
 8017f0a:	e7e0      	b.n	8017ece <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x376>
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	2809      	cmp	r0, #9
 8017f10:	d818      	bhi.n	8017f44 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3ec>
 8017f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f14:	b1a3      	cbz	r3, 8017f40 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3e8>
 8017f16:	682b      	ldr	r3, [r5, #0]
 8017f18:	f853 9004 	ldr.w	r9, [r3, r4]
 8017f1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f1e:	4628      	mov	r0, r5
 8017f20:	9905      	ldr	r1, [sp, #20]
 8017f22:	9303      	str	r3, [sp, #12]
 8017f24:	2300      	movs	r3, #0
 8017f26:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017f2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017f2c:	463a      	mov	r2, r7
 8017f2e:	9300      	str	r3, [sp, #0]
 8017f30:	2301      	movs	r3, #1
 8017f32:	47c8      	blx	r9
 8017f34:	2201      	movs	r2, #1
 8017f36:	f04f 0a04 	mov.w	sl, #4
 8017f3a:	e7d2      	b.n	8017ee2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	e7e6      	b.n	8017f0e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3b6>
 8017f40:	46a1      	mov	r9, r4
 8017f42:	e7eb      	b.n	8017f1c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3c4>
 8017f44:	b1b3      	cbz	r3, 8017f74 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41c>
 8017f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f48:	b193      	cbz	r3, 8017f70 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x418>
 8017f4a:	682b      	ldr	r3, [r5, #0]
 8017f4c:	f853 9004 	ldr.w	r9, [r3, r4]
 8017f50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f52:	4628      	mov	r0, r5
 8017f54:	9905      	ldr	r1, [sp, #20]
 8017f56:	9303      	str	r3, [sp, #12]
 8017f58:	2300      	movs	r3, #0
 8017f5a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8017f5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017f60:	463a      	mov	r2, r7
 8017f62:	9300      	str	r3, [sp, #0]
 8017f64:	2301      	movs	r3, #1
 8017f66:	47c8      	blx	r9
 8017f68:	2201      	movs	r2, #1
 8017f6a:	f04f 0a06 	mov.w	sl, #6
 8017f6e:	e7b8      	b.n	8017ee2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8017f70:	46a1      	mov	r9, r4
 8017f72:	e7ed      	b.n	8017f50 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3f8>
 8017f74:	3201      	adds	r2, #1
 8017f76:	f04f 0a02 	mov.w	sl, #2
 8017f7a:	e7b2      	b.n	8017ee2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 8017f7c:	2100      	movs	r1, #0
 8017f7e:	2809      	cmp	r0, #9
 8017f80:	d803      	bhi.n	8017f8a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x432>
 8017f82:	3201      	adds	r2, #1
 8017f84:	e7d7      	b.n	8017f36 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 8017f86:	2101      	movs	r1, #1
 8017f88:	e7f9      	b.n	8017f7e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x426>
 8017f8a:	f023 0002 	bic.w	r0, r3, #2
 8017f8e:	282c      	cmp	r0, #44	; 0x2c
 8017f90:	f000 8085 	beq.w	801809e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x546>
 8017f94:	2b3a      	cmp	r3, #58	; 0x3a
 8017f96:	f000 8082 	beq.w	801809e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x546>
 8017f9a:	2900      	cmp	r1, #0
 8017f9c:	d04d      	beq.n	801803a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4e2>
 8017f9e:	3201      	adds	r2, #1
 8017fa0:	e7e3      	b.n	8017f6a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x412>
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	2809      	cmp	r0, #9
 8017fa6:	d805      	bhi.n	8017fb4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x45c>
 8017fa8:	9b07      	ldr	r3, [sp, #28]
 8017faa:	3301      	adds	r3, #1
 8017fac:	441a      	add	r2, r3
 8017fae:	e7c2      	b.n	8017f36 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x3de>
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	e7f7      	b.n	8017fa4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x44c>
 8017fb4:	b343      	cbz	r3, 8018008 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4b0>
 8017fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fb8:	b313      	cbz	r3, 8018000 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4a8>
 8017fba:	682b      	ldr	r3, [r5, #0]
 8017fbc:	f853 a004 	ldr.w	sl, [r3, r4]
 8017fc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017fc2:	f04f 0900 	mov.w	r9, #0
 8017fc6:	9905      	ldr	r1, [sp, #20]
 8017fc8:	4628      	mov	r0, r5
 8017fca:	9303      	str	r3, [sp, #12]
 8017fcc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017fce:	e9cd 2901 	strd	r2, r9, [sp, #4]
 8017fd2:	9300      	str	r3, [sp, #0]
 8017fd4:	463a      	mov	r2, r7
 8017fd6:	464b      	mov	r3, r9
 8017fd8:	47d0      	blx	sl
 8017fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017fdc:	464b      	mov	r3, r9
 8017fde:	b18a      	cbz	r2, 8018004 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ac>
 8017fe0:	682a      	ldr	r2, [r5, #0]
 8017fe2:	f852 a004 	ldr.w	sl, [r2, r4]
 8017fe6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017fe8:	4628      	mov	r0, r5
 8017fea:	9905      	ldr	r1, [sp, #20]
 8017fec:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017ff0:	9b07      	ldr	r3, [sp, #28]
 8017ff2:	463a      	mov	r2, r7
 8017ff4:	9301      	str	r3, [sp, #4]
 8017ff6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017ff8:	9300      	str	r3, [sp, #0]
 8017ffa:	2301      	movs	r3, #1
 8017ffc:	47d0      	blx	sl
 8017ffe:	e7b3      	b.n	8017f68 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x410>
 8018000:	46a2      	mov	sl, r4
 8018002:	e7dd      	b.n	8017fc0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x468>
 8018004:	46a2      	mov	sl, r4
 8018006:	e7ee      	b.n	8017fe6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x48e>
 8018008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801800a:	b183      	cbz	r3, 801802e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4d6>
 801800c:	682b      	ldr	r3, [r5, #0]
 801800e:	f853 9004 	ldr.w	r9, [r3, r4]
 8018012:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018014:	4628      	mov	r0, r5
 8018016:	9905      	ldr	r1, [sp, #20]
 8018018:	9303      	str	r3, [sp, #12]
 801801a:	2300      	movs	r3, #0
 801801c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8018020:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018022:	9200      	str	r2, [sp, #0]
 8018024:	463a      	mov	r2, r7
 8018026:	47c8      	blx	r9
 8018028:	9b07      	ldr	r3, [sp, #28]
 801802a:	1c5a      	adds	r2, r3, #1
 801802c:	e7a3      	b.n	8017f76 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 801802e:	46a1      	mov	r9, r4
 8018030:	e7ef      	b.n	8018012 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ba>
 8018032:	2809      	cmp	r0, #9
 8018034:	d9b3      	bls.n	8017f9e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x446>
 8018036:	2900      	cmp	r1, #0
 8018038:	d036      	beq.n	80180a8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x550>
 801803a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801803c:	b17b      	cbz	r3, 801805e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x506>
 801803e:	682b      	ldr	r3, [r5, #0]
 8018040:	f853 9004 	ldr.w	r9, [r3, r4]
 8018044:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018046:	4628      	mov	r0, r5
 8018048:	9905      	ldr	r1, [sp, #20]
 801804a:	9303      	str	r3, [sp, #12]
 801804c:	2300      	movs	r3, #0
 801804e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8018052:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018054:	9200      	str	r2, [sp, #0]
 8018056:	463a      	mov	r2, r7
 8018058:	47c8      	blx	r9
 801805a:	2201      	movs	r2, #1
 801805c:	e78b      	b.n	8017f76 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 801805e:	46a1      	mov	r9, r4
 8018060:	e7f0      	b.n	8018044 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x4ec>
 8018062:	2809      	cmp	r0, #9
 8018064:	d803      	bhi.n	801806e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x516>
 8018066:	9b07      	ldr	r3, [sp, #28]
 8018068:	3301      	adds	r3, #1
 801806a:	441a      	add	r2, r3
 801806c:	e77d      	b.n	8017f6a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x412>
 801806e:	9b07      	ldr	r3, [sp, #28]
 8018070:	f103 0901 	add.w	r9, r3, #1
 8018074:	b1e9      	cbz	r1, 80180b2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x55a>
 8018076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018078:	b17b      	cbz	r3, 801809a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x542>
 801807a:	682b      	ldr	r3, [r5, #0]
 801807c:	f853 a004 	ldr.w	sl, [r3, r4]
 8018080:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018082:	4628      	mov	r0, r5
 8018084:	9905      	ldr	r1, [sp, #20]
 8018086:	9303      	str	r3, [sp, #12]
 8018088:	2300      	movs	r3, #0
 801808a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801808e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018090:	9200      	str	r2, [sp, #0]
 8018092:	463a      	mov	r2, r7
 8018094:	47d0      	blx	sl
 8018096:	464a      	mov	r2, r9
 8018098:	e76d      	b.n	8017f76 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x41e>
 801809a:	46a2      	mov	sl, r4
 801809c:	e7f0      	b.n	8018080 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x528>
 801809e:	2301      	movs	r3, #1
 80180a0:	f04f 0a05 	mov.w	sl, #5
 80180a4:	9307      	str	r3, [sp, #28]
 80180a6:	e71c      	b.n	8017ee2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80180a8:	2301      	movs	r3, #1
 80180aa:	f04f 0a07 	mov.w	sl, #7
 80180ae:	9307      	str	r3, [sp, #28]
 80180b0:	e717      	b.n	8017ee2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80180b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80180b6:	e714      	b.n	8017ee2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80180b8:	f1ba 0f02 	cmp.w	sl, #2
 80180bc:	f43f ae31 	beq.w	8017d22 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1ca>
 80180c0:	f00a 0a05 	and.w	sl, sl, #5
 80180c4:	f1ba 0f04 	cmp.w	sl, #4
 80180c8:	f43f ae18 	beq.w	8017cfc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1a4>
 80180cc:	f1ba 0f05 	cmp.w	sl, #5
 80180d0:	f47f ae65 	bne.w	8017d9e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x246>
 80180d4:	9b06      	ldr	r3, [sp, #24]
 80180d6:	f003 0a01 	and.w	sl, r3, #1
 80180da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180dc:	b343      	cbz	r3, 8018130 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d8>
 80180de:	f1ba 0f00 	cmp.w	sl, #0
 80180e2:	d021      	beq.n	8018128 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d0>
 80180e4:	f858 300b 	ldr.w	r3, [r8, fp]
 80180e8:	591b      	ldr	r3, [r3, r4]
 80180ea:	461e      	mov	r6, r3
 80180ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80180ee:	f04f 0900 	mov.w	r9, #0
 80180f2:	9905      	ldr	r1, [sp, #20]
 80180f4:	4628      	mov	r0, r5
 80180f6:	9303      	str	r3, [sp, #12]
 80180f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80180fa:	e9cd 2901 	strd	r2, r9, [sp, #4]
 80180fe:	9300      	str	r3, [sp, #0]
 8018100:	463a      	mov	r2, r7
 8018102:	464b      	mov	r3, r9
 8018104:	47b0      	blx	r6
 8018106:	464b      	mov	r3, r9
 8018108:	f1ba 0f00 	cmp.w	sl, #0
 801810c:	d00e      	beq.n	801812c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5d4>
 801810e:	f858 200b 	ldr.w	r2, [r8, fp]
 8018112:	f852 a004 	ldr.w	sl, [r2, r4]
 8018116:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018118:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801811c:	9b07      	ldr	r3, [sp, #28]
 801811e:	9301      	str	r3, [sp, #4]
 8018120:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018122:	9300      	str	r3, [sp, #0]
 8018124:	2301      	movs	r3, #1
 8018126:	e636      	b.n	8017d96 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x23e>
 8018128:	4626      	mov	r6, r4
 801812a:	e7df      	b.n	80180ec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x594>
 801812c:	46a2      	mov	sl, r4
 801812e:	e7f2      	b.n	8018116 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5be>
 8018130:	f1ba 0f00 	cmp.w	sl, #0
 8018134:	d00a      	beq.n	801814c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5f4>
 8018136:	f858 300b 	ldr.w	r3, [r8, fp]
 801813a:	f853 9004 	ldr.w	r9, [r3, r4]
 801813e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018140:	9907      	ldr	r1, [sp, #28]
 8018142:	9303      	str	r3, [sp, #12]
 8018144:	2300      	movs	r3, #0
 8018146:	440a      	add	r2, r1
 8018148:	9302      	str	r3, [sp, #8]
 801814a:	e5e3      	b.n	8017d14 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x1bc>
 801814c:	46a1      	mov	r9, r4
 801814e:	e7f6      	b.n	801813e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x5e6>
 8018150:	2000      	movs	r0, #0
 8018152:	e644      	b.n	8017dde <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x286>
 8018154:	3b30      	subs	r3, #48	; 0x30
 8018156:	2b09      	cmp	r3, #9
 8018158:	d910      	bls.n	801817c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 801815a:	b978      	cbnz	r0, 801817c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x624>
 801815c:	f1b9 0f03 	cmp.w	r9, #3
 8018160:	f63f ad91 	bhi.w	8017c86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8018164:	a301      	add	r3, pc, #4	; (adr r3, 801816c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x614>)
 8018166:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 801816a:	bf00      	nop
 801816c:	08017c17 	.word	0x08017c17
 8018170:	08017c23 	.word	0x08017c23
 8018174:	08017c81 	.word	0x08017c81
 8018178:	08017caf 	.word	0x08017caf
 801817c:	f1b9 0f03 	cmp.w	r9, #3
 8018180:	f63f ad81 	bhi.w	8017c86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x12e>
 8018184:	a301      	add	r3, pc, #4	; (adr r3, 801818c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x634>)
 8018186:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 801818a:	bf00      	nop
 801818c:	08017c17 	.word	0x08017c17
 8018190:	08017c23 	.word	0x08017c23
 8018194:	08017c55 	.word	0x08017c55
 8018198:	08017cad 	.word	0x08017cad
 801819c:	f1ba 0f07 	cmp.w	sl, #7
 80181a0:	f63f ae9f 	bhi.w	8017ee2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x38a>
 80181a4:	a601      	add	r6, pc, #4	; (adr r6, 80181ac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_+0x654>)
 80181a6:	f856 f02a 	ldr.w	pc, [r6, sl, lsl #2]
 80181aa:	bf00      	nop
 80181ac:	08017ecd 	.word	0x08017ecd
 80181b0:	08017ee3 	.word	0x08017ee3
 80181b4:	08017f0d 	.word	0x08017f0d
 80181b8:	08017ee3 	.word	0x08017ee3
 80181bc:	08017f7d 	.word	0x08017f7d
 80181c0:	08017fa3 	.word	0x08017fa3
 80181c4:	08018033 	.word	0x08018033
 80181c8:	08018063 	.word	0x08018063

080181cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80181cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181d0:	b09d      	sub	sp, #116	; 0x74
 80181d2:	9114      	str	r1, [sp, #80]	; 0x50
 80181d4:	9315      	str	r3, [sp, #84]	; 0x54
 80181d6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80181d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80181da:	8809      	ldrh	r1, [r1, #0]
 80181dc:	889b      	ldrh	r3, [r3, #4]
 80181de:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80181e0:	440b      	add	r3, r1
 80181e2:	9210      	str	r2, [sp, #64]	; 0x40
 80181e4:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80181e8:	b21b      	sxth	r3, r3
 80181ea:	900f      	str	r0, [sp, #60]	; 0x3c
 80181ec:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 80181f0:	930e      	str	r3, [sp, #56]	; 0x38
 80181f2:	6833      	ldr	r3, [r6, #0]
 80181f4:	7a59      	ldrb	r1, [r3, #9]
 80181f6:	7a1b      	ldrb	r3, [r3, #8]
 80181f8:	9113      	str	r1, [sp, #76]	; 0x4c
 80181fa:	9312      	str	r3, [sp, #72]	; 0x48
 80181fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80181fe:	f9b3 4000 	ldrsh.w	r4, [r3]
 8018202:	2a00      	cmp	r2, #0
 8018204:	d059      	beq.n	80182ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8018206:	7c33      	ldrb	r3, [r6, #16]
 8018208:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801820a:	2b04      	cmp	r3, #4
 801820c:	bf14      	ite	ne
 801820e:	2301      	movne	r3, #1
 8018210:	2302      	moveq	r3, #2
 8018212:	4413      	add	r3, r2
 8018214:	f04f 0800 	mov.w	r8, #0
 8018218:	930d      	str	r3, [sp, #52]	; 0x34
 801821a:	4645      	mov	r5, r8
 801821c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8018220:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8018224:	4293      	cmp	r3, r2
 8018226:	da75      	bge.n	8018314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8018228:	2300      	movs	r3, #0
 801822a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801822c:	6832      	ldr	r2, [r6, #0]
 801822e:	931a      	str	r3, [sp, #104]	; 0x68
 8018230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018232:	428b      	cmp	r3, r1
 8018234:	db43      	blt.n	80182be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8018236:	6813      	ldr	r3, [r2, #0]
 8018238:	4610      	mov	r0, r2
 801823a:	695b      	ldr	r3, [r3, #20]
 801823c:	4798      	blx	r3
 801823e:	4681      	mov	r9, r0
 8018240:	6830      	ldr	r0, [r6, #0]
 8018242:	aa1b      	add	r2, sp, #108	; 0x6c
 8018244:	4649      	mov	r1, r9
 8018246:	6803      	ldr	r3, [r0, #0]
 8018248:	689f      	ldr	r7, [r3, #8]
 801824a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801824e:	47b8      	blx	r7
 8018250:	901a      	str	r0, [sp, #104]	; 0x68
 8018252:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8018256:	45d1      	cmp	r9, sl
 8018258:	d045      	beq.n	80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801825a:	f242 070b 	movw	r7, #8203	; 0x200b
 801825e:	45b9      	cmp	r9, r7
 8018260:	d041      	beq.n	80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018262:	f1b9 0f00 	cmp.w	r9, #0
 8018266:	f000 80ee 	beq.w	8018446 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801826a:	f1b9 0f0a 	cmp.w	r9, #10
 801826e:	d057      	beq.n	8018320 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8018270:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018272:	b383      	cbz	r3, 80182d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8018274:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8018278:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801827a:	2a00      	cmp	r2, #0
 801827c:	f000 80d2 	beq.w	8018424 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8018280:	f1bb 0f00 	cmp.w	fp, #0
 8018284:	d100      	bne.n	8018288 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8018286:	4444      	add	r4, r8
 8018288:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801828c:	f1bb 0f01 	cmp.w	fp, #1
 8018290:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8018294:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018298:	ea48 0803 	orr.w	r8, r8, r3
 801829c:	d128      	bne.n	80182f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801829e:	eba4 0408 	sub.w	r4, r4, r8
 80182a2:	2d00      	cmp	r5, #0
 80182a4:	d143      	bne.n	801832e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80182a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80182a8:	eb08 0304 	add.w	r3, r8, r4
 80182ac:	4413      	add	r3, r2
 80182ae:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80182b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80182b4:	4293      	cmp	r3, r2
 80182b6:	da44      	bge.n	8018342 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80182b8:	e02b      	b.n	8018312 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 80182ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80182bc:	e7aa      	b.n	8018214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 80182be:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80182c2:	4659      	mov	r1, fp
 80182c4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80182c6:	9301      	str	r3, [sp, #4]
 80182c8:	ab1b      	add	r3, sp, #108	; 0x6c
 80182ca:	9300      	str	r3, [sp, #0]
 80182cc:	ab1a      	add	r3, sp, #104	; 0x68
 80182ce:	f002 fe85 	bl	801afdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80182d2:	4681      	mov	r9, r0
 80182d4:	e7bd      	b.n	8018252 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80182d6:	6830      	ldr	r0, [r6, #0]
 80182d8:	6803      	ldr	r3, [r0, #0]
 80182da:	691b      	ldr	r3, [r3, #16]
 80182dc:	4798      	blx	r3
 80182de:	4550      	cmp	r0, sl
 80182e0:	d001      	beq.n	80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80182e2:	42b8      	cmp	r0, r7
 80182e4:	d1c8      	bne.n	8018278 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 80182e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182e8:	464d      	mov	r5, r9
 80182ea:	3301      	adds	r3, #1
 80182ec:	930c      	str	r3, [sp, #48]	; 0x30
 80182ee:	e797      	b.n	8018220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 80182f0:	2d00      	cmp	r5, #0
 80182f2:	f000 80aa 	beq.w	801844a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 80182f6:	f1bb 0f00 	cmp.w	fp, #0
 80182fa:	d118      	bne.n	801832e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80182fc:	6830      	ldr	r0, [r6, #0]
 80182fe:	4629      	mov	r1, r5
 8018300:	6803      	ldr	r3, [r0, #0]
 8018302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018304:	4798      	blx	r3
 8018306:	4404      	add	r4, r0
 8018308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801830a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801830c:	1ae3      	subs	r3, r4, r3
 801830e:	4293      	cmp	r3, r2
 8018310:	dd17      	ble.n	8018342 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018312:	464d      	mov	r5, r9
 8018314:	2d00      	cmp	r5, #0
 8018316:	f000 8096 	beq.w	8018446 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801831a:	2d0a      	cmp	r5, #10
 801831c:	f040 8084 	bne.w	8018428 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8018320:	250a      	movs	r5, #10
 8018322:	fab5 f085 	clz	r0, r5
 8018326:	0940      	lsrs	r0, r0, #5
 8018328:	b01d      	add	sp, #116	; 0x74
 801832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801832e:	6830      	ldr	r0, [r6, #0]
 8018330:	4629      	mov	r1, r5
 8018332:	6803      	ldr	r3, [r0, #0]
 8018334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018336:	4798      	blx	r3
 8018338:	f1bb 0f01 	cmp.w	fp, #1
 801833c:	eba4 0400 	sub.w	r4, r4, r0
 8018340:	d0b1      	beq.n	80182a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8018342:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018344:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018346:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801834a:	f9b3 5000 	ldrsh.w	r5, [r3]
 801834e:	7b43      	ldrb	r3, [r0, #13]
 8018350:	4421      	add	r1, r4
 8018352:	015b      	lsls	r3, r3, #5
 8018354:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018358:	7983      	ldrb	r3, [r0, #6]
 801835a:	4313      	orrs	r3, r2
 801835c:	440b      	add	r3, r1
 801835e:	42ab      	cmp	r3, r5
 8018360:	dbc1      	blt.n	80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018364:	4299      	cmp	r1, r3
 8018366:	dabe      	bge.n	80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018368:	6830      	ldr	r0, [r6, #0]
 801836a:	42a5      	cmp	r5, r4
 801836c:	6803      	ldr	r3, [r0, #0]
 801836e:	bfcc      	ite	gt
 8018370:	1b2d      	subgt	r5, r5, r4
 8018372:	2500      	movle	r5, #0
 8018374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018376:	bfc8      	it	gt
 8018378:	b2ad      	uxthgt	r5, r5
 801837a:	4798      	blx	r3
 801837c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801837e:	4935      	ldr	r1, [pc, #212]	; (8018454 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8018380:	7b5a      	ldrb	r2, [r3, #13]
 8018382:	f893 e008 	ldrb.w	lr, [r3, #8]
 8018386:	f012 0f40 	tst.w	r2, #64	; 0x40
 801838a:	bf18      	it	ne
 801838c:	468c      	movne	ip, r1
 801838e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018390:	bf08      	it	eq
 8018392:	f04f 0c00 	moveq.w	ip, #0
 8018396:	4408      	add	r0, r1
 8018398:	00d1      	lsls	r1, r2, #3
 801839a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801839e:	ea41 070e 	orr.w	r7, r1, lr
 80183a2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80183a4:	ea4c 0707 	orr.w	r7, ip, r7
 80183a8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80183ac:	1bc7      	subs	r7, r0, r7
 80183ae:	b2bf      	uxth	r7, r7
 80183b0:	fa0f fa87 	sxth.w	sl, r7
 80183b4:	4551      	cmp	r1, sl
 80183b6:	dd33      	ble.n	8018420 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 80183b8:	0112      	lsls	r2, r2, #4
 80183ba:	79d8      	ldrb	r0, [r3, #7]
 80183bc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80183c0:	4302      	orrs	r2, r0
 80183c2:	4492      	add	sl, r2
 80183c4:	4551      	cmp	r1, sl
 80183c6:	dc8e      	bgt.n	80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80183c8:	1bcf      	subs	r7, r1, r7
 80183ca:	468a      	mov	sl, r1
 80183cc:	b2bf      	uxth	r7, r7
 80183ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80183d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80183d2:	6830      	ldr	r0, [r6, #0]
 80183d4:	681a      	ldr	r2, [r3, #0]
 80183d6:	6801      	ldr	r1, [r0, #0]
 80183d8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80183da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80183dc:	9311      	str	r3, [sp, #68]	; 0x44
 80183de:	9216      	str	r2, [sp, #88]	; 0x58
 80183e0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80183e2:	4788      	blx	r1
 80183e4:	79b1      	ldrb	r1, [r6, #6]
 80183e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80183e8:	910b      	str	r1, [sp, #44]	; 0x2c
 80183ea:	7bb1      	ldrb	r1, [r6, #14]
 80183ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80183ee:	910a      	str	r1, [sp, #40]	; 0x28
 80183f0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 80183f4:	9109      	str	r1, [sp, #36]	; 0x24
 80183f6:	68b1      	ldr	r1, [r6, #8]
 80183f8:	9305      	str	r3, [sp, #20]
 80183fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80183fc:	9206      	str	r2, [sp, #24]
 80183fe:	e9cd a501 	strd	sl, r5, [sp, #4]
 8018402:	4425      	add	r5, r4
 8018404:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018408:	b22d      	sxth	r5, r5
 801840a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801840c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018410:	9500      	str	r5, [sp, #0]
 8018412:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018414:	681a      	ldr	r2, [r3, #0]
 8018416:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018418:	685b      	ldr	r3, [r3, #4]
 801841a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801841c:	47a8      	blx	r5
 801841e:	e762      	b.n	80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018420:	2700      	movs	r7, #0
 8018422:	e7d4      	b.n	80183ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8018424:	4690      	mov	r8, r2
 8018426:	e75e      	b.n	80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018428:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801842a:	3401      	adds	r4, #1
 801842c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801842e:	429c      	cmp	r4, r3
 8018430:	f6bf af77 	bge.w	8018322 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8018434:	4659      	mov	r1, fp
 8018436:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8018438:	f002 fd5c 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801843c:	4605      	mov	r5, r0
 801843e:	b110      	cbz	r0, 8018446 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8018440:	280a      	cmp	r0, #10
 8018442:	d1f2      	bne.n	801842a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8018444:	e76c      	b.n	8018320 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8018446:	2500      	movs	r5, #0
 8018448:	e76b      	b.n	8018322 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801844a:	f1bb 0f00 	cmp.w	fp, #0
 801844e:	f43f af5b 	beq.w	8018308 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8018452:	e776      	b.n	8018342 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018454:	fffffe00 	.word	0xfffffe00

08018458 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 8018458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801845c:	b08b      	sub	sp, #44	; 0x2c
 801845e:	460e      	mov	r6, r1
 8018460:	4690      	mov	r8, r2
 8018462:	4699      	mov	r9, r3
 8018464:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8018466:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 801846a:	6929      	ldr	r1, [r5, #16]
 801846c:	9009      	str	r0, [sp, #36]	; 0x24
 801846e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018470:	6809      	ldr	r1, [r1, #0]
 8018472:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018474:	f7ff fae2 	bl	8017a3c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018478:	4604      	mov	r4, r0
 801847a:	f1bb 0f00 	cmp.w	fp, #0
 801847e:	d022      	beq.n	80184c6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 8018480:	f8d8 3000 	ldr.w	r3, [r8]
 8018484:	4640      	mov	r0, r8
 8018486:	695b      	ldr	r3, [r3, #20]
 8018488:	4798      	blx	r3
 801848a:	4682      	mov	sl, r0
 801848c:	b1d8      	cbz	r0, 80184c6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 801848e:	f8d8 3000 	ldr.w	r3, [r8]
 8018492:	4601      	mov	r1, r0
 8018494:	4640      	mov	r0, r8
 8018496:	68db      	ldr	r3, [r3, #12]
 8018498:	4798      	blx	r3
 801849a:	4602      	mov	r2, r0
 801849c:	f990 700d 	ldrsb.w	r7, [r0, #13]
 80184a0:	692b      	ldr	r3, [r5, #16]
 80184a2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80184a6:	7a97      	ldrb	r7, [r2, #10]
 80184a8:	7c1b      	ldrb	r3, [r3, #16]
 80184aa:	4307      	orrs	r7, r0
 80184ac:	2b04      	cmp	r3, #4
 80184ae:	443c      	add	r4, r7
 80184b0:	b2a4      	uxth	r4, r4
 80184b2:	d108      	bne.n	80184c6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e>
 80184b4:	f8d8 3000 	ldr.w	r3, [r8]
 80184b8:	4651      	mov	r1, sl
 80184ba:	4640      	mov	r0, r8
 80184bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184be:	4798      	blx	r3
 80184c0:	4438      	add	r0, r7
 80184c2:	4404      	add	r4, r0
 80184c4:	b2a4      	uxth	r4, r4
 80184c6:	692b      	ldr	r3, [r5, #16]
 80184c8:	795b      	ldrb	r3, [r3, #5]
 80184ca:	bb23      	cbnz	r3, 8018516 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xbe>
 80184cc:	f1b9 0f01 	cmp.w	r9, #1
 80184d0:	d102      	bne.n	80184d8 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 80184d2:	8833      	ldrh	r3, [r6, #0]
 80184d4:	4423      	add	r3, r4
 80184d6:	8033      	strh	r3, [r6, #0]
 80184d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80184da:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80184de:	f8cd b018 	str.w	fp, [sp, #24]
 80184e2:	9205      	str	r2, [sp, #20]
 80184e4:	696a      	ldr	r2, [r5, #20]
 80184e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80184e8:	e9cd 9203 	strd	r9, r2, [sp, #12]
 80184ec:	692a      	ldr	r2, [r5, #16]
 80184ee:	9202      	str	r2, [sp, #8]
 80184f0:	68ea      	ldr	r2, [r5, #12]
 80184f2:	e9cd 6200 	strd	r6, r2, [sp]
 80184f6:	e9d5 1200 	ldrd	r1, r2, [r5]
 80184fa:	f7ff fe67 	bl	80181cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80184fe:	692b      	ldr	r3, [r5, #16]
 8018500:	795b      	ldrb	r3, [r3, #5]
 8018502:	b983      	cbnz	r3, 8018526 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xce>
 8018504:	f1b9 0f00 	cmp.w	r9, #0
 8018508:	d102      	bne.n	8018510 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 801850a:	8830      	ldrh	r0, [r6, #0]
 801850c:	4404      	add	r4, r0
 801850e:	8034      	strh	r4, [r6, #0]
 8018510:	b00b      	add	sp, #44	; 0x2c
 8018512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018516:	2b01      	cmp	r3, #1
 8018518:	d1de      	bne.n	80184d8 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 801851a:	f1b9 0f00 	cmp.w	r9, #0
 801851e:	d1db      	bne.n	80184d8 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x80>
 8018520:	8833      	ldrh	r3, [r6, #0]
 8018522:	1b1b      	subs	r3, r3, r4
 8018524:	e7d7      	b.n	80184d6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x7e>
 8018526:	2b01      	cmp	r3, #1
 8018528:	d1f2      	bne.n	8018510 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 801852a:	f1b9 0f01 	cmp.w	r9, #1
 801852e:	d1ef      	bne.n	8018510 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb8>
 8018530:	8830      	ldrh	r0, [r6, #0]
 8018532:	1b04      	subs	r4, r0, r4
 8018534:	e7eb      	b.n	801850e <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xb6>

08018536 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018536:	b530      	push	{r4, r5, lr}
 8018538:	8a44      	ldrh	r4, [r0, #18]
 801853a:	8ac5      	ldrh	r5, [r0, #22]
 801853c:	82c3      	strh	r3, [r0, #22]
 801853e:	442c      	add	r4, r5
 8018540:	1ae4      	subs	r4, r4, r3
 8018542:	8b03      	ldrh	r3, [r0, #24]
 8018544:	8244      	strh	r4, [r0, #18]
 8018546:	8a84      	ldrh	r4, [r0, #20]
 8018548:	4422      	add	r2, r4
 801854a:	440c      	add	r4, r1
 801854c:	1a59      	subs	r1, r3, r1
 801854e:	8342      	strh	r2, [r0, #26]
 8018550:	8284      	strh	r4, [r0, #20]
 8018552:	8301      	strh	r1, [r0, #24]
 8018554:	bd30      	pop	{r4, r5, pc}

08018556 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801855a:	7a45      	ldrb	r5, [r0, #9]
 801855c:	b085      	sub	sp, #20
 801855e:	4604      	mov	r4, r0
 8018560:	4689      	mov	r9, r1
 8018562:	1eeb      	subs	r3, r5, #3
 8018564:	b2db      	uxtb	r3, r3
 8018566:	b329      	cbz	r1, 80185b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8018568:	2b01      	cmp	r3, #1
 801856a:	d921      	bls.n	80185b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801856c:	1e69      	subs	r1, r5, #1
 801856e:	f1d1 0b00 	rsbs	fp, r1, #0
 8018572:	eb4b 0b01 	adc.w	fp, fp, r1
 8018576:	1eaa      	subs	r2, r5, #2
 8018578:	2500      	movs	r5, #0
 801857a:	4253      	negs	r3, r2
 801857c:	9500      	str	r5, [sp, #0]
 801857e:	4153      	adcs	r3, r2
 8018580:	9301      	str	r3, [sp, #4]
 8018582:	2600      	movs	r6, #0
 8018584:	f242 080b 	movw	r8, #8203	; 0x200b
 8018588:	8266      	strh	r6, [r4, #18]
 801858a:	82a6      	strh	r6, [r4, #20]
 801858c:	2300      	movs	r3, #0
 801858e:	68e2      	ldr	r2, [r4, #12]
 8018590:	7a21      	ldrb	r1, [r4, #8]
 8018592:	9303      	str	r3, [sp, #12]
 8018594:	ab03      	add	r3, sp, #12
 8018596:	6860      	ldr	r0, [r4, #4]
 8018598:	8827      	ldrh	r7, [r4, #0]
 801859a:	f002 fceb 	bl	801af74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801859e:	8020      	strh	r0, [r4, #0]
 80185a0:	b9b0      	cbnz	r0, 80185d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 80185a2:	8b22      	ldrh	r2, [r4, #24]
 80185a4:	2300      	movs	r3, #0
 80185a6:	4611      	mov	r1, r2
 80185a8:	4620      	mov	r0, r4
 80185aa:	f7ff ffc4 	bl	8018536 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80185ae:	e062      	b.n	8018676 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 80185b0:	468b      	mov	fp, r1
 80185b2:	e7e0      	b.n	8018576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 80185b4:	2b01      	cmp	r3, #1
 80185b6:	f105 35ff 	add.w	r5, r5, #4294967295
 80185ba:	9101      	str	r1, [sp, #4]
 80185bc:	468b      	mov	fp, r1
 80185be:	bf8c      	ite	hi
 80185c0:	2300      	movhi	r3, #0
 80185c2:	2301      	movls	r3, #1
 80185c4:	2d01      	cmp	r5, #1
 80185c6:	9300      	str	r3, [sp, #0]
 80185c8:	bf8c      	ite	hi
 80185ca:	2500      	movhi	r5, #0
 80185cc:	2501      	movls	r5, #1
 80185ce:	e7d8      	b.n	8018582 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 80185d0:	8ae3      	ldrh	r3, [r4, #22]
 80185d2:	280a      	cmp	r0, #10
 80185d4:	f103 0301 	add.w	r3, r3, #1
 80185d8:	82e3      	strh	r3, [r4, #22]
 80185da:	d0e2      	beq.n	80185a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 80185dc:	9a03      	ldr	r2, [sp, #12]
 80185de:	b972      	cbnz	r2, 80185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 80185e0:	4540      	cmp	r0, r8
 80185e2:	d1d3      	bne.n	801858c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185e4:	8823      	ldrh	r3, [r4, #0]
 80185e6:	8b21      	ldrh	r1, [r4, #24]
 80185e8:	2b20      	cmp	r3, #32
 80185ea:	d001      	beq.n	80185f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 80185ec:	4543      	cmp	r3, r8
 80185ee:	d11d      	bne.n	801862c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80185f0:	2f20      	cmp	r7, #32
 80185f2:	d002      	beq.n	80185fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80185f4:	4547      	cmp	r7, r8
 80185f6:	bf18      	it	ne
 80185f8:	460e      	movne	r6, r1
 80185fa:	2001      	movs	r0, #1
 80185fc:	e017      	b.n	801862e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 80185fe:	4540      	cmp	r0, r8
 8018600:	d012      	beq.n	8018628 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8018602:	8893      	ldrh	r3, [r2, #4]
 8018604:	4639      	mov	r1, r7
 8018606:	8023      	strh	r3, [r4, #0]
 8018608:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801860c:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8018610:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8018614:	ea4a 0a00 	orr.w	sl, sl, r0
 8018618:	68e0      	ldr	r0, [r4, #12]
 801861a:	6803      	ldr	r3, [r0, #0]
 801861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801861e:	4798      	blx	r3
 8018620:	eb0a 0200 	add.w	r2, sl, r0
 8018624:	b292      	uxth	r2, r2
 8018626:	e7dd      	b.n	80185e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8018628:	2200      	movs	r2, #0
 801862a:	e7db      	b.n	80185e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801862c:	2000      	movs	r0, #0
 801862e:	440a      	add	r2, r1
 8018630:	8aa3      	ldrh	r3, [r4, #20]
 8018632:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018636:	b292      	uxth	r2, r2
 8018638:	8322      	strh	r2, [r4, #24]
 801863a:	4413      	add	r3, r2
 801863c:	f1b9 0f00 	cmp.w	r9, #0
 8018640:	d022      	beq.n	8018688 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8018642:	f1bb 0f00 	cmp.w	fp, #0
 8018646:	d102      	bne.n	801864e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8018648:	9901      	ldr	r1, [sp, #4]
 801864a:	b149      	cbz	r1, 8018660 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801864c:	b140      	cbz	r0, 8018660 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801864e:	8ba1      	ldrh	r1, [r4, #28]
 8018650:	4419      	add	r1, r3
 8018652:	458c      	cmp	ip, r1
 8018654:	da12      	bge.n	801867c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8018656:	8a61      	ldrh	r1, [r4, #18]
 8018658:	b181      	cbz	r1, 801867c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801865a:	4563      	cmp	r3, ip
 801865c:	dd96      	ble.n	801858c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801865e:	e004      	b.n	801866a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8018660:	4563      	cmp	r3, ip
 8018662:	dd93      	ble.n	801858c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018664:	8a63      	ldrh	r3, [r4, #18]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d090      	beq.n	801858c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801866a:	2301      	movs	r3, #1
 801866c:	8ba2      	ldrh	r2, [r4, #28]
 801866e:	77a3      	strb	r3, [r4, #30]
 8018670:	8b63      	ldrh	r3, [r4, #26]
 8018672:	4413      	add	r3, r2
 8018674:	8363      	strh	r3, [r4, #26]
 8018676:	b005      	add	sp, #20
 8018678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801867c:	2300      	movs	r3, #0
 801867e:	4611      	mov	r1, r2
 8018680:	4620      	mov	r0, r4
 8018682:	f7ff ff58 	bl	8018536 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018686:	e781      	b.n	801858c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018688:	4563      	cmp	r3, ip
 801868a:	dd16      	ble.n	80186ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801868c:	9b00      	ldr	r3, [sp, #0]
 801868e:	b113      	cbz	r3, 8018696 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018690:	2301      	movs	r3, #1
 8018692:	460a      	mov	r2, r1
 8018694:	e787      	b.n	80185a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8018696:	2d00      	cmp	r5, #0
 8018698:	f43f af78 	beq.w	801858c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801869c:	2800      	cmp	r0, #0
 801869e:	f47f af75 	bne.w	801858c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80186a2:	2f20      	cmp	r7, #32
 80186a4:	d001      	beq.n	80186aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 80186a6:	4547      	cmp	r7, r8
 80186a8:	d102      	bne.n	80186b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 80186aa:	2301      	movs	r3, #1
 80186ac:	4632      	mov	r2, r6
 80186ae:	e77b      	b.n	80185a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 80186b0:	8a63      	ldrh	r3, [r4, #18]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	f43f af6a 	beq.w	801858c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80186b8:	e7dd      	b.n	8018676 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 80186ba:	2800      	cmp	r0, #0
 80186bc:	f47f af66 	bne.w	801858c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80186c0:	2f20      	cmp	r7, #32
 80186c2:	d002      	beq.n	80186ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 80186c4:	4547      	cmp	r7, r8
 80186c6:	f47f af61 	bne.w	801858c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80186ca:	2301      	movs	r3, #1
 80186cc:	4632      	mov	r2, r6
 80186ce:	e7d7      	b.n	8018680 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

080186d0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80186d0:	b570      	push	{r4, r5, r6, lr}
 80186d2:	4606      	mov	r6, r0
 80186d4:	b08a      	sub	sp, #40	; 0x28
 80186d6:	4615      	mov	r5, r2
 80186d8:	b191      	cbz	r1, 8018700 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 80186da:	2401      	movs	r4, #1
 80186dc:	e9cd 3100 	strd	r3, r1, [sp]
 80186e0:	4613      	mov	r3, r2
 80186e2:	4601      	mov	r1, r0
 80186e4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80186e8:	a802      	add	r0, sp, #8
 80186ea:	f7ff f96d 	bl	80179c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80186ee:	2100      	movs	r1, #0
 80186f0:	a802      	add	r0, sp, #8
 80186f2:	f7ff ff30 	bl	8018556 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80186f6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80186fa:	b173      	cbz	r3, 801871a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80186fc:	3401      	adds	r4, #1
 80186fe:	e7f6      	b.n	80186ee <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8018700:	2401      	movs	r4, #1
 8018702:	4611      	mov	r1, r2
 8018704:	f002 fbf6 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018708:	280a      	cmp	r0, #10
 801870a:	4629      	mov	r1, r5
 801870c:	4630      	mov	r0, r6
 801870e:	bf08      	it	eq
 8018710:	3401      	addeq	r4, #1
 8018712:	f002 fbef 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018716:	2800      	cmp	r0, #0
 8018718:	d1f6      	bne.n	8018708 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801871a:	b2a0      	uxth	r0, r4
 801871c:	b00a      	add	sp, #40	; 0x28
 801871e:	bd70      	pop	{r4, r5, r6, pc}

08018720 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018724:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 8018728:	4689      	mov	r9, r1
 801872a:	461c      	mov	r4, r3
 801872c:	f8dd a2c8 	ldr.w	sl, [sp, #712]	; 0x2c8
 8018730:	900a      	str	r0, [sp, #40]	; 0x28
 8018732:	f1ba 0f00 	cmp.w	sl, #0
 8018736:	f000 80eb 	beq.w	8018910 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	2b00      	cmp	r3, #0
 801873e:	f000 80e7 	beq.w	8018910 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018742:	7ba3      	ldrb	r3, [r4, #14]
 8018744:	2b00      	cmp	r3, #0
 8018746:	f000 80e3 	beq.w	8018910 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801874a:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 801874e:	6810      	ldr	r0, [r2, #0]
 8018750:	6851      	ldr	r1, [r2, #4]
 8018752:	2600      	movs	r6, #0
 8018754:	465b      	mov	r3, fp
 8018756:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801875a:	7965      	ldrb	r5, [r4, #5]
 801875c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8018760:	79a2      	ldrb	r2, [r4, #6]
 8018762:	9610      	str	r6, [sp, #64]	; 0x40
 8018764:	c303      	stmia	r3!, {r0, r1}
 8018766:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801876a:	a910      	add	r1, sp, #64	; 0x40
 801876c:	4658      	mov	r0, fp
 801876e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8018772:	f7ff f9a0 	bl	8017ab6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018776:	a910      	add	r1, sp, #64	; 0x40
 8018778:	79a2      	ldrb	r2, [r4, #6]
 801877a:	4608      	mov	r0, r1
 801877c:	f7ff f99b 	bl	8017ab6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018780:	2d00      	cmp	r5, #0
 8018782:	f040 80a7 	bne.w	80188d4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8018786:	7923      	ldrb	r3, [r4, #4]
 8018788:	1b9b      	subs	r3, r3, r6
 801878a:	bf18      	it	ne
 801878c:	2301      	movne	r3, #1
 801878e:	461e      	mov	r6, r3
 8018790:	9309      	str	r3, [sp, #36]	; 0x24
 8018792:	a824      	add	r0, sp, #144	; 0x90
 8018794:	f002 fa6c 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 8018798:	6820      	ldr	r0, [r4, #0]
 801879a:	6803      	ldr	r3, [r0, #0]
 801879c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801879e:	4798      	blx	r3
 80187a0:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 80187a2:	4603      	mov	r3, r0
 80187a4:	4651      	mov	r1, sl
 80187a6:	a824      	add	r0, sp, #144	; 0x90
 80187a8:	f002 fa7f 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80187ac:	a83a      	add	r0, sp, #232	; 0xe8
 80187ae:	f002 fa5f 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 80187b2:	6820      	ldr	r0, [r4, #0]
 80187b4:	6803      	ldr	r3, [r0, #0]
 80187b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187b8:	4798      	blx	r3
 80187ba:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 80187bc:	4603      	mov	r3, r0
 80187be:	4651      	mov	r1, sl
 80187c0:	a83a      	add	r0, sp, #232	; 0xe8
 80187c2:	f002 fa72 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80187c6:	a850      	add	r0, sp, #320	; 0x140
 80187c8:	f002 fa52 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 80187cc:	6820      	ldr	r0, [r4, #0]
 80187ce:	6803      	ldr	r3, [r0, #0]
 80187d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187d2:	4798      	blx	r3
 80187d4:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 80187d6:	4603      	mov	r3, r0
 80187d8:	4651      	mov	r1, sl
 80187da:	a850      	add	r0, sp, #320	; 0x140
 80187dc:	f002 fa65 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80187e0:	a866      	add	r0, sp, #408	; 0x198
 80187e2:	f002 fa45 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 80187e6:	a87c      	add	r0, sp, #496	; 0x1f0
 80187e8:	f002 fa42 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 80187ec:	b19e      	cbz	r6, 8018816 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80187ee:	6820      	ldr	r0, [r4, #0]
 80187f0:	6803      	ldr	r3, [r0, #0]
 80187f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187f4:	4798      	blx	r3
 80187f6:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 80187f8:	4603      	mov	r3, r0
 80187fa:	4651      	mov	r1, sl
 80187fc:	a866      	add	r0, sp, #408	; 0x198
 80187fe:	f002 fa54 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018802:	6820      	ldr	r0, [r4, #0]
 8018804:	6803      	ldr	r3, [r0, #0]
 8018806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018808:	4798      	blx	r3
 801880a:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 801880c:	4603      	mov	r3, r0
 801880e:	4651      	mov	r1, sl
 8018810:	a87c      	add	r0, sp, #496	; 0x1f0
 8018812:	f002 fa4a 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018816:	6820      	ldr	r0, [r4, #0]
 8018818:	6803      	ldr	r3, [r0, #0]
 801881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801881c:	4798      	blx	r3
 801881e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8018822:	eb07 0800 	add.w	r8, r7, r0
 8018826:	f1b8 0f00 	cmp.w	r8, #0
 801882a:	dd5e      	ble.n	80188ea <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ca>
 801882c:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 8018830:	4283      	cmp	r3, r0
 8018832:	db5a      	blt.n	80188ea <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ca>
 8018834:	441f      	add	r7, r3
 8018836:	fb97 f7f8 	sdiv	r7, r7, r8
 801883a:	a892      	add	r0, sp, #584	; 0x248
 801883c:	f002 fa18 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 8018840:	7c23      	ldrb	r3, [r4, #16]
 8018842:	b14b      	cbz	r3, 8018858 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8018844:	6820      	ldr	r0, [r4, #0]
 8018846:	6803      	ldr	r3, [r0, #0]
 8018848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801884a:	4798      	blx	r3
 801884c:	9ab3      	ldr	r2, [sp, #716]	; 0x2cc
 801884e:	4603      	mov	r3, r0
 8018850:	4651      	mov	r1, sl
 8018852:	a892      	add	r0, sp, #584	; 0x248
 8018854:	f002 fa29 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018858:	7c21      	ldrb	r1, [r4, #16]
 801885a:	a81c      	add	r0, sp, #112	; 0x70
 801885c:	7963      	ldrb	r3, [r4, #5]
 801885e:	9101      	str	r1, [sp, #4]
 8018860:	6821      	ldr	r1, [r4, #0]
 8018862:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8018866:	9100      	str	r1, [sp, #0]
 8018868:	a992      	add	r1, sp, #584	; 0x248
 801886a:	f7ff f8ad 	bl	80179c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801886e:	7c23      	ldrb	r3, [r4, #16]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d051      	beq.n	8018918 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8018874:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8018878:	930b      	str	r3, [sp, #44]	; 0x2c
 801887a:	2f00      	cmp	r7, #0
 801887c:	dd78      	ble.n	8018970 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 801887e:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8018882:	a81c      	add	r0, sp, #112	; 0x70
 8018884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018886:	428b      	cmp	r3, r1
 8018888:	bfd4      	ite	le
 801888a:	2100      	movle	r1, #0
 801888c:	2101      	movgt	r1, #1
 801888e:	f7ff fe62 	bl	8018556 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018892:	f8bd a082 	ldrh.w	sl, [sp, #130]	; 0x82
 8018896:	f10a 33ff 	add.w	r3, sl, #4294967295
 801889a:	fa1f fa83 	uxth.w	sl, r3
 801889e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80188a2:	459a      	cmp	sl, r3
 80188a4:	d023      	beq.n	80188ee <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ce>
 80188a6:	4629      	mov	r1, r5
 80188a8:	a824      	add	r0, sp, #144	; 0x90
 80188aa:	f002 fb23 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80188ae:	4629      	mov	r1, r5
 80188b0:	a83a      	add	r0, sp, #232	; 0xe8
 80188b2:	f002 fb1f 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80188b6:	4629      	mov	r1, r5
 80188b8:	a850      	add	r0, sp, #320	; 0x140
 80188ba:	f002 fb1b 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80188be:	2e00      	cmp	r6, #0
 80188c0:	d0e9      	beq.n	8018896 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 80188c2:	4629      	mov	r1, r5
 80188c4:	a866      	add	r0, sp, #408	; 0x198
 80188c6:	f002 fb15 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80188ca:	4629      	mov	r1, r5
 80188cc:	a87c      	add	r0, sp, #496	; 0x1f0
 80188ce:	f002 fb11 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80188d2:	e7e0      	b.n	8018896 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 80188d4:	2d01      	cmp	r5, #1
 80188d6:	d105      	bne.n	80188e4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c4>
 80188d8:	7926      	ldrb	r6, [r4, #4]
 80188da:	9509      	str	r5, [sp, #36]	; 0x24
 80188dc:	3e02      	subs	r6, #2
 80188de:	bf18      	it	ne
 80188e0:	2601      	movne	r6, #1
 80188e2:	e756      	b.n	8018792 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x72>
 80188e4:	2301      	movs	r3, #1
 80188e6:	9309      	str	r3, [sp, #36]	; 0x24
 80188e8:	e753      	b.n	8018792 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x72>
 80188ea:	2700      	movs	r7, #0
 80188ec:	e7a5      	b.n	801883a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11a>
 80188ee:	fa1f f388 	uxth.w	r3, r8
 80188f2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80188f6:	3f01      	subs	r7, #1
 80188f8:	441a      	add	r2, r3
 80188fa:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80188fe:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8018902:	1ad3      	subs	r3, r2, r3
 8018904:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8018908:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801890c:	2b00      	cmp	r3, #0
 801890e:	d1b4      	bne.n	801887a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8018910:	f50d 7d29 	add.w	sp, sp, #676	; 0x2a4
 8018914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018918:	2f00      	cmp	r7, #0
 801891a:	dd29      	ble.n	8018970 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 801891c:	4629      	mov	r1, r5
 801891e:	a824      	add	r0, sp, #144	; 0x90
 8018920:	f002 fae8 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018924:	4629      	mov	r1, r5
 8018926:	4682      	mov	sl, r0
 8018928:	a83a      	add	r0, sp, #232	; 0xe8
 801892a:	f002 fae3 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801892e:	4629      	mov	r1, r5
 8018930:	a850      	add	r0, sp, #320	; 0x140
 8018932:	f002 fadf 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018936:	b13e      	cbz	r6, 8018948 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x228>
 8018938:	4629      	mov	r1, r5
 801893a:	a866      	add	r0, sp, #408	; 0x198
 801893c:	f002 fada 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018940:	4629      	mov	r1, r5
 8018942:	a87c      	add	r0, sp, #496	; 0x1f0
 8018944:	f002 fad6 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018948:	f1ba 0f00 	cmp.w	sl, #0
 801894c:	d0e0      	beq.n	8018910 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801894e:	f1ba 0f0a 	cmp.w	sl, #10
 8018952:	d1e1      	bne.n	8018918 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8018954:	fa1f f388 	uxth.w	r3, r8
 8018958:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801895c:	3f01      	subs	r7, #1
 801895e:	441a      	add	r2, r3
 8018960:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8018964:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8018968:	1ad3      	subs	r3, r2, r3
 801896a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 801896e:	e7d3      	b.n	8018918 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 8018970:	2300      	movs	r3, #0
 8018972:	4629      	mov	r1, r5
 8018974:	a824      	add	r0, sp, #144	; 0x90
 8018976:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
 801897a:	9316      	str	r3, [sp, #88]	; 0x58
 801897c:	ab3a      	add	r3, sp, #232	; 0xe8
 801897e:	931b      	str	r3, [sp, #108]	; 0x6c
 8018980:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8018984:	e9cd b419 	strd	fp, r4, [sp, #100]	; 0x64
 8018988:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 801898c:	f002 fab2 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018990:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8018994:	b12e      	cbz	r6, 80189a2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x282>
 8018996:	4629      	mov	r1, r5
 8018998:	a866      	add	r0, sp, #408	; 0x198
 801899a:	f002 faab 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801899e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80189a2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80189a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80189a8:	f04f 0300 	mov.w	r3, #0
 80189ac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80189b0:	7c23      	ldrb	r3, [r4, #16]
 80189b2:	b14b      	cbz	r3, 80189c8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a8>
 80189b4:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 80189b8:	a81c      	add	r0, sp, #112	; 0x70
 80189ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80189bc:	428b      	cmp	r3, r1
 80189be:	bfd4      	ite	le
 80189c0:	2100      	movle	r1, #0
 80189c2:	2101      	movgt	r1, #1
 80189c4:	f7ff fdc7 	bl	8018556 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80189c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	f000 809e 	beq.w	8018b0c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ec>
 80189d0:	2e00      	cmp	r6, #0
 80189d2:	f000 8097 	beq.w	8018b04 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3e4>
 80189d6:	7c22      	ldrb	r2, [r4, #16]
 80189d8:	b9d2      	cbnz	r2, 8018a10 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2f0>
 80189da:	494f      	ldr	r1, [pc, #316]	; (8018b18 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3f8>)
 80189dc:	ab12      	add	r3, sp, #72	; 0x48
 80189de:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
 80189e2:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80189e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80189ea:	9205      	str	r2, [sp, #20]
 80189ec:	aa03      	add	r2, sp, #12
 80189ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80189f2:	ab7c      	add	r3, sp, #496	; 0x1f0
 80189f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80189f8:	9302      	str	r3, [sp, #8]
 80189fa:	ab66      	add	r3, sp, #408	; 0x198
 80189fc:	6822      	ldr	r2, [r4, #0]
 80189fe:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8018a02:	9301      	str	r3, [sp, #4]
 8018a04:	ab0d      	add	r3, sp, #52	; 0x34
 8018a06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018a08:	9300      	str	r3, [sp, #0]
 8018a0a:	462b      	mov	r3, r5
 8018a0c:	f7ff f8a4 	bl	8017b58 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 8018a10:	7c23      	ldrb	r3, [r4, #16]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d064      	beq.n	8018ae0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3c0>
 8018a16:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
 8018a1a:	7921      	ldrb	r1, [r4, #4]
 8018a1c:	2d00      	cmp	r5, #0
 8018a1e:	d166      	bne.n	8018aee <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ce>
 8018a20:	2901      	cmp	r1, #1
 8018a22:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8018a26:	d15e      	bne.n	8018ae6 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3c6>
 8018a28:	1a9b      	subs	r3, r3, r2
 8018a2a:	2202      	movs	r2, #2
 8018a2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a30:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018a34:	7c23      	ldrb	r3, [r4, #16]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d06a      	beq.n	8018b10 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3f0>
 8018a3a:	f8bd 1082 	ldrh.w	r1, [sp, #130]	; 0x82
 8018a3e:	f89d 308e 	ldrb.w	r3, [sp, #142]	; 0x8e
 8018a42:	4836      	ldr	r0, [pc, #216]	; (8018b1c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3fc>)
 8018a44:	af16      	add	r7, sp, #88	; 0x58
 8018a46:	aa14      	add	r2, sp, #80	; 0x50
 8018a48:	9105      	str	r1, [sp, #20]
 8018a4a:	9014      	str	r0, [sp, #80]	; 0x50
 8018a4c:	2000      	movs	r0, #0
 8018a4e:	f50d 79a0 	add.w	r9, sp, #320	; 0x140
 8018a52:	f10d 0a32 	add.w	sl, sp, #50	; 0x32
 8018a56:	9015      	str	r0, [sp, #84]	; 0x54
 8018a58:	e9cd 3706 	strd	r3, r7, [sp, #24]
 8018a5c:	ab03      	add	r3, sp, #12
 8018a5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a62:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a66:	ab24      	add	r3, sp, #144	; 0x90
 8018a68:	6822      	ldr	r2, [r4, #0]
 8018a6a:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8018a6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018a72:	9301      	str	r3, [sp, #4]
 8018a74:	462b      	mov	r3, r5
 8018a76:	f8cd a000 	str.w	sl, [sp]
 8018a7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018a7c:	f7ff f86c 	bl	8017b58 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 8018a80:	8939      	ldrh	r1, [r7, #8]
 8018a82:	fa1f f388 	uxth.w	r3, r8
 8018a86:	461a      	mov	r2, r3
 8018a88:	440b      	add	r3, r1
 8018a8a:	813b      	strh	r3, [r7, #8]
 8018a8c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8018a90:	1a9b      	subs	r3, r3, r2
 8018a92:	7c22      	ldrb	r2, [r4, #16]
 8018a94:	b21b      	sxth	r3, r3
 8018a96:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8018a9a:	b112      	cbz	r2, 8018aa2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x382>
 8018a9c:	4543      	cmp	r3, r8
 8018a9e:	f6ff af37 	blt.w	8018910 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018aa2:	b160      	cbz	r0, 8018abe <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x39e>
 8018aa4:	7961      	ldrb	r1, [r4, #5]
 8018aa6:	a83a      	add	r0, sp, #232	; 0xe8
 8018aa8:	f002 fa24 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018aac:	7961      	ldrb	r1, [r4, #5]
 8018aae:	4648      	mov	r0, r9
 8018ab0:	f002 fa20 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018ab4:	b11e      	cbz	r6, 8018abe <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x39e>
 8018ab6:	4629      	mov	r1, r5
 8018ab8:	a87c      	add	r0, sp, #496	; 0x1f0
 8018aba:	f002 fa1b 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018abe:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8018ac2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8018ac6:	4413      	add	r3, r2
 8018ac8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018acc:	b21b      	sxth	r3, r3
 8018ace:	429a      	cmp	r2, r3
 8018ad0:	f73f af1e 	bgt.w	8018910 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018ad4:	f8ba 3000 	ldrh.w	r3, [sl]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	f47f af65 	bne.w	80189a8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x288>
 8018ade:	e717      	b.n	8018910 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018ae0:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8018ae4:	e799      	b.n	8018a1a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2fa>
 8018ae6:	7be1      	ldrb	r1, [r4, #15]
 8018ae8:	1a5b      	subs	r3, r3, r1
 8018aea:	1a9b      	subs	r3, r3, r2
 8018aec:	e7a0      	b.n	8018a30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018aee:	2901      	cmp	r1, #1
 8018af0:	d103      	bne.n	8018afa <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3da>
 8018af2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8018af6:	4413      	add	r3, r2
 8018af8:	e797      	b.n	8018a2a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x30a>
 8018afa:	2900      	cmp	r1, #0
 8018afc:	d19a      	bne.n	8018a34 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x314>
 8018afe:	7be3      	ldrb	r3, [r4, #15]
 8018b00:	4413      	add	r3, r2
 8018b02:	e795      	b.n	8018a30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018b04:	7be2      	ldrb	r2, [r4, #15]
 8018b06:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018b0a:	e7ee      	b.n	8018aea <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x3ca>
 8018b0c:	7be3      	ldrb	r3, [r4, #15]
 8018b0e:	e78f      	b.n	8018a30 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x310>
 8018b10:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8018b14:	e795      	b.n	8018a42 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x322>
 8018b16:	bf00      	nop
 8018b18:	08017aa1 	.word	0x08017aa1
 8018b1c:	08018459 	.word	0x08018459

08018b20 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018b20:	2b02      	cmp	r3, #2
 8018b22:	b510      	push	{r4, lr}
 8018b24:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018b28:	d00b      	beq.n	8018b42 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018b2a:	2b03      	cmp	r3, #3
 8018b2c:	d00e      	beq.n	8018b4c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018b2e:	2b01      	cmp	r3, #1
 8018b30:	d001      	beq.n	8018b36 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018b32:	1860      	adds	r0, r4, r1
 8018b34:	bd10      	pop	{r4, pc}
 8018b36:	8880      	ldrh	r0, [r0, #4]
 8018b38:	4420      	add	r0, r4
 8018b3a:	b200      	sxth	r0, r0
 8018b3c:	1a80      	subs	r0, r0, r2
 8018b3e:	3801      	subs	r0, #1
 8018b40:	e7f8      	b.n	8018b34 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018b42:	8880      	ldrh	r0, [r0, #4]
 8018b44:	4420      	add	r0, r4
 8018b46:	b200      	sxth	r0, r0
 8018b48:	1a40      	subs	r0, r0, r1
 8018b4a:	e7f8      	b.n	8018b3e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018b4c:	18a0      	adds	r0, r4, r2
 8018b4e:	e7f1      	b.n	8018b34 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018b50 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018b50:	2b02      	cmp	r3, #2
 8018b52:	b510      	push	{r4, lr}
 8018b54:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018b58:	d006      	beq.n	8018b68 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018b5a:	2b03      	cmp	r3, #3
 8018b5c:	d00a      	beq.n	8018b74 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018b5e:	2b01      	cmp	r3, #1
 8018b60:	bf14      	ite	ne
 8018b62:	18a0      	addne	r0, r4, r2
 8018b64:	1860      	addeq	r0, r4, r1
 8018b66:	bd10      	pop	{r4, pc}
 8018b68:	88c0      	ldrh	r0, [r0, #6]
 8018b6a:	4420      	add	r0, r4
 8018b6c:	b200      	sxth	r0, r0
 8018b6e:	1a80      	subs	r0, r0, r2
 8018b70:	3801      	subs	r0, #1
 8018b72:	e7f8      	b.n	8018b66 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018b74:	88c0      	ldrh	r0, [r0, #6]
 8018b76:	4420      	add	r0, r4
 8018b78:	b200      	sxth	r0, r0
 8018b7a:	1a40      	subs	r0, r0, r1
 8018b7c:	e7f8      	b.n	8018b70 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018b80 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018b80:	4b01      	ldr	r3, [pc, #4]	; (8018b88 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018b82:	2200      	movs	r2, #0
 8018b84:	601a      	str	r2, [r3, #0]
 8018b86:	4770      	bx	lr
 8018b88:	2000bbb8 	.word	0x2000bbb8

08018b8c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8018b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b8e:	1e05      	subs	r5, r0, #0
 8018b90:	f04f 0601 	mov.w	r6, #1
 8018b94:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018b98:	bfba      	itte	lt
 8018b9a:	f04f 37ff 	movlt.w	r7, #4294967295
 8018b9e:	426d      	neglt	r5, r5
 8018ba0:	2701      	movge	r7, #1
 8018ba2:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8018ba6:	f1be 0f00 	cmp.w	lr, #0
 8018baa:	bfbc      	itt	lt
 8018bac:	f1ce 0e00 	rsblt	lr, lr, #0
 8018bb0:	427f      	neglt	r7, r7
 8018bb2:	2c00      	cmp	r4, #0
 8018bb4:	fa4e f001 	asr.w	r0, lr, r1
 8018bb8:	fa06 f101 	lsl.w	r1, r6, r1
 8018bbc:	bfbc      	itt	lt
 8018bbe:	4264      	neglt	r4, r4
 8018bc0:	427f      	neglt	r7, r7
 8018bc2:	3901      	subs	r1, #1
 8018bc4:	ea01 010e 	and.w	r1, r1, lr
 8018bc8:	434d      	muls	r5, r1
 8018bca:	f8dc 1000 	ldr.w	r1, [ip]
 8018bce:	fb03 1300 	mla	r3, r3, r0, r1
 8018bd2:	fb95 f1f4 	sdiv	r1, r5, r4
 8018bd6:	fb04 5511 	mls	r5, r4, r1, r5
 8018bda:	441d      	add	r5, r3
 8018bdc:	fb95 f3f4 	sdiv	r3, r5, r4
 8018be0:	4419      	add	r1, r3
 8018be2:	fb04 5413 	mls	r4, r4, r3, r5
 8018be6:	fb02 1000 	mla	r0, r2, r0, r1
 8018bea:	f8cc 4000 	str.w	r4, [ip]
 8018bee:	4378      	muls	r0, r7
 8018bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018bf4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bf8:	4c24      	ldr	r4, [pc, #144]	; (8018c8c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8018bfa:	b086      	sub	sp, #24
 8018bfc:	4605      	mov	r5, r0
 8018bfe:	6807      	ldr	r7, [r0, #0]
 8018c00:	69a3      	ldr	r3, [r4, #24]
 8018c02:	b92b      	cbnz	r3, 8018c10 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8018c04:	6840      	ldr	r0, [r0, #4]
 8018c06:	e9c5 7000 	strd	r7, r0, [r5]
 8018c0a:	b006      	add	sp, #24
 8018c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c10:	f04f 0802 	mov.w	r8, #2
 8018c14:	68a2      	ldr	r2, [r4, #8]
 8018c16:	ae06      	add	r6, sp, #24
 8018c18:	6820      	ldr	r0, [r4, #0]
 8018c1a:	fb93 f1f8 	sdiv	r1, r3, r8
 8018c1e:	440a      	add	r2, r1
 8018c20:	69e1      	ldr	r1, [r4, #28]
 8018c22:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018c26:	9700      	str	r7, [sp, #0]
 8018c28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018c2a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8018c2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018c30:	f7ff ffac 	bl	8018b8c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018c34:	69a3      	ldr	r3, [r4, #24]
 8018c36:	4607      	mov	r7, r0
 8018c38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018c3a:	9301      	str	r3, [sp, #4]
 8018c3c:	686b      	ldr	r3, [r5, #4]
 8018c3e:	6a21      	ldr	r1, [r4, #32]
 8018c40:	9300      	str	r3, [sp, #0]
 8018c42:	9602      	str	r6, [sp, #8]
 8018c44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c46:	6860      	ldr	r0, [r4, #4]
 8018c48:	f7ff ffa0 	bl	8018b8c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018c4c:	69a2      	ldr	r2, [r4, #24]
 8018c4e:	6963      	ldr	r3, [r4, #20]
 8018c50:	4407      	add	r7, r0
 8018c52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018c54:	68e0      	ldr	r0, [r4, #12]
 8018c56:	fb92 f8f8 	sdiv	r8, r2, r8
 8018c5a:	4443      	add	r3, r8
 8018c5c:	9305      	str	r3, [sp, #20]
 8018c5e:	682b      	ldr	r3, [r5, #0]
 8018c60:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018c64:	9300      	str	r3, [sp, #0]
 8018c66:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018c68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018c6a:	f7ff ff8f 	bl	8018b8c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018c6e:	69a3      	ldr	r3, [r4, #24]
 8018c70:	4680      	mov	r8, r0
 8018c72:	9602      	str	r6, [sp, #8]
 8018c74:	9301      	str	r3, [sp, #4]
 8018c76:	686b      	ldr	r3, [r5, #4]
 8018c78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018c7a:	9300      	str	r3, [sp, #0]
 8018c7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018c7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018c80:	6920      	ldr	r0, [r4, #16]
 8018c82:	f7ff ff83 	bl	8018b8c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018c86:	4440      	add	r0, r8
 8018c88:	e7bd      	b.n	8018c06 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8018c8a:	bf00      	nop
 8018c8c:	2000bbbc 	.word	0x2000bbbc

08018c90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018c90:	4b07      	ldr	r3, [pc, #28]	; (8018cb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018c92:	b510      	push	{r4, lr}
 8018c94:	781b      	ldrb	r3, [r3, #0]
 8018c96:	2b01      	cmp	r3, #1
 8018c98:	d108      	bne.n	8018cac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018c9a:	4b06      	ldr	r3, [pc, #24]	; (8018cb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018c9c:	880c      	ldrh	r4, [r1, #0]
 8018c9e:	881b      	ldrh	r3, [r3, #0]
 8018ca0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018ca4:	3b01      	subs	r3, #1
 8018ca6:	1b1b      	subs	r3, r3, r4
 8018ca8:	8003      	strh	r3, [r0, #0]
 8018caa:	800a      	strh	r2, [r1, #0]
 8018cac:	bd10      	pop	{r4, pc}
 8018cae:	bf00      	nop
 8018cb0:	2000bb88 	.word	0x2000bb88
 8018cb4:	2000bb8c 	.word	0x2000bb8c

08018cb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018cb8:	4b0a      	ldr	r3, [pc, #40]	; (8018ce4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018cba:	b510      	push	{r4, lr}
 8018cbc:	781b      	ldrb	r3, [r3, #0]
 8018cbe:	2b01      	cmp	r3, #1
 8018cc0:	d10e      	bne.n	8018ce0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018cc2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018cc6:	8843      	ldrh	r3, [r0, #2]
 8018cc8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018ccc:	18ca      	adds	r2, r1, r3
 8018cce:	4b06      	ldr	r3, [pc, #24]	; (8018ce8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018cd0:	8044      	strh	r4, [r0, #2]
 8018cd2:	881b      	ldrh	r3, [r3, #0]
 8018cd4:	1a9b      	subs	r3, r3, r2
 8018cd6:	8003      	strh	r3, [r0, #0]
 8018cd8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018cdc:	8081      	strh	r1, [r0, #4]
 8018cde:	80c3      	strh	r3, [r0, #6]
 8018ce0:	bd10      	pop	{r4, pc}
 8018ce2:	bf00      	nop
 8018ce4:	2000bb88 	.word	0x2000bb88
 8018ce8:	2000bb84 	.word	0x2000bb84

08018cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018cec:	4b07      	ldr	r3, [pc, #28]	; (8018d0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018cee:	b510      	push	{r4, lr}
 8018cf0:	781b      	ldrb	r3, [r3, #0]
 8018cf2:	2b01      	cmp	r3, #1
 8018cf4:	d108      	bne.n	8018d08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018cf6:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018cfa:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018cfe:	8003      	strh	r3, [r0, #0]
 8018d00:	8893      	ldrh	r3, [r2, #4]
 8018d02:	3b01      	subs	r3, #1
 8018d04:	1b1b      	subs	r3, r3, r4
 8018d06:	800b      	strh	r3, [r1, #0]
 8018d08:	bd10      	pop	{r4, pc}
 8018d0a:	bf00      	nop
 8018d0c:	2000bb88 	.word	0x2000bb88

08018d10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018d10:	4b08      	ldr	r3, [pc, #32]	; (8018d34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018d12:	b513      	push	{r0, r1, r4, lr}
 8018d14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d18:	2400      	movs	r4, #0
 8018d1a:	4b07      	ldr	r3, [pc, #28]	; (8018d38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018d1c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018d20:	466a      	mov	r2, sp
 8018d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d26:	9400      	str	r4, [sp, #0]
 8018d28:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018d2c:	f7ff ffde 	bl	8018cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018d30:	b002      	add	sp, #8
 8018d32:	bd10      	pop	{r4, pc}
 8018d34:	2000bb84 	.word	0x2000bb84
 8018d38:	2000bb86 	.word	0x2000bb86

08018d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018d3c:	4b0a      	ldr	r3, [pc, #40]	; (8018d68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018d3e:	460a      	mov	r2, r1
 8018d40:	b510      	push	{r4, lr}
 8018d42:	781b      	ldrb	r3, [r3, #0]
 8018d44:	2b01      	cmp	r3, #1
 8018d46:	d10d      	bne.n	8018d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018d48:	8881      	ldrh	r1, [r0, #4]
 8018d4a:	8803      	ldrh	r3, [r0, #0]
 8018d4c:	440b      	add	r3, r1
 8018d4e:	4601      	mov	r1, r0
 8018d50:	3b01      	subs	r3, #1
 8018d52:	f821 3b02 	strh.w	r3, [r1], #2
 8018d56:	f7ff ffc9 	bl	8018cec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018d5a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018d5e:	88c2      	ldrh	r2, [r0, #6]
 8018d60:	80c3      	strh	r3, [r0, #6]
 8018d62:	8082      	strh	r2, [r0, #4]
 8018d64:	bd10      	pop	{r4, pc}
 8018d66:	bf00      	nop
 8018d68:	2000bb88 	.word	0x2000bb88

08018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018d6c:	4b09      	ldr	r3, [pc, #36]	; (8018d94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018d6e:	b507      	push	{r0, r1, r2, lr}
 8018d70:	2100      	movs	r1, #0
 8018d72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d76:	4b08      	ldr	r3, [pc, #32]	; (8018d98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018d78:	9100      	str	r1, [sp, #0]
 8018d7a:	4669      	mov	r1, sp
 8018d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d80:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018d84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018d88:	f7ff ffd8 	bl	8018d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018d8c:	b003      	add	sp, #12
 8018d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d92:	bf00      	nop
 8018d94:	2000bb84 	.word	0x2000bb84
 8018d98:	2000bb86 	.word	0x2000bb86

08018d9c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018d9c:	4b03      	ldr	r3, [pc, #12]	; (8018dac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018d9e:	6818      	ldr	r0, [r3, #0]
 8018da0:	b110      	cbz	r0, 8018da8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018da2:	6803      	ldr	r3, [r0, #0]
 8018da4:	699b      	ldr	r3, [r3, #24]
 8018da6:	4718      	bx	r3
 8018da8:	4770      	bx	lr
 8018daa:	bf00      	nop
 8018dac:	2000bc0c 	.word	0x2000bc0c

08018db0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018db0:	4770      	bx	lr
	...

08018db4 <_ZN8touchgfx11Application4drawEv>:
 8018db4:	4b09      	ldr	r3, [pc, #36]	; (8018ddc <_ZN8touchgfx11Application4drawEv+0x28>)
 8018db6:	b507      	push	{r0, r1, r2, lr}
 8018db8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018dbc:	2100      	movs	r1, #0
 8018dbe:	4b08      	ldr	r3, [pc, #32]	; (8018de0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018dc0:	9100      	str	r1, [sp, #0]
 8018dc2:	4669      	mov	r1, sp
 8018dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018dc8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018dcc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018dd0:	6803      	ldr	r3, [r0, #0]
 8018dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dd4:	4798      	blx	r3
 8018dd6:	b003      	add	sp, #12
 8018dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ddc:	2000bb84 	.word	0x2000bb84
 8018de0:	2000bb86 	.word	0x2000bb86

08018de4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018de4:	4b03      	ldr	r3, [pc, #12]	; (8018df4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018de6:	6818      	ldr	r0, [r3, #0]
 8018de8:	b110      	cbz	r0, 8018df0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018dea:	6803      	ldr	r3, [r0, #0]
 8018dec:	69db      	ldr	r3, [r3, #28]
 8018dee:	4718      	bx	r3
 8018df0:	4770      	bx	lr
 8018df2:	bf00      	nop
 8018df4:	2000bc0c 	.word	0x2000bc0c

08018df8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018df8:	4b03      	ldr	r3, [pc, #12]	; (8018e08 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018dfa:	6818      	ldr	r0, [r3, #0]
 8018dfc:	b110      	cbz	r0, 8018e04 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018dfe:	6803      	ldr	r3, [r0, #0]
 8018e00:	6a1b      	ldr	r3, [r3, #32]
 8018e02:	4718      	bx	r3
 8018e04:	4770      	bx	lr
 8018e06:	bf00      	nop
 8018e08:	2000bc0c 	.word	0x2000bc0c

08018e0c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018e0c:	4b03      	ldr	r3, [pc, #12]	; (8018e1c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018e0e:	6818      	ldr	r0, [r3, #0]
 8018e10:	b110      	cbz	r0, 8018e18 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018e12:	6803      	ldr	r3, [r0, #0]
 8018e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e16:	4718      	bx	r3
 8018e18:	4770      	bx	lr
 8018e1a:	bf00      	nop
 8018e1c:	2000bc0c 	.word	0x2000bc0c

08018e20 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e24:	4d3a      	ldr	r5, [pc, #232]	; (8018f10 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8018e26:	4604      	mov	r4, r0
 8018e28:	6828      	ldr	r0, [r5, #0]
 8018e2a:	b140      	cbz	r0, 8018e3e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018e2c:	7a03      	ldrb	r3, [r0, #8]
 8018e2e:	b933      	cbnz	r3, 8018e3e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018e30:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018e34:	6803      	ldr	r3, [r0, #0]
 8018e36:	689b      	ldr	r3, [r3, #8]
 8018e38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e3c:	4718      	bx	r3
 8018e3e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8018e42:	b97b      	cbnz	r3, 8018e64 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018e44:	b170      	cbz	r0, 8018e64 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018e46:	7a03      	ldrb	r3, [r0, #8]
 8018e48:	b163      	cbz	r3, 8018e64 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018e4a:	4b32      	ldr	r3, [pc, #200]	; (8018f14 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018e4c:	6818      	ldr	r0, [r3, #0]
 8018e4e:	b110      	cbz	r0, 8018e56 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8018e50:	6803      	ldr	r3, [r0, #0]
 8018e52:	691b      	ldr	r3, [r3, #16]
 8018e54:	4798      	blx	r3
 8018e56:	6828      	ldr	r0, [r5, #0]
 8018e58:	6803      	ldr	r3, [r0, #0]
 8018e5a:	68db      	ldr	r3, [r3, #12]
 8018e5c:	4798      	blx	r3
 8018e5e:	2301      	movs	r3, #1
 8018e60:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018e64:	2500      	movs	r5, #0
 8018e66:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018e6a:	42a8      	cmp	r0, r5
 8018e6c:	dd0c      	ble.n	8018e88 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8018e6e:	1963      	adds	r3, r4, r5
 8018e70:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018e74:	b132      	cbz	r2, 8018e84 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8018e76:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018e7a:	4413      	add	r3, r2
 8018e7c:	6858      	ldr	r0, [r3, #4]
 8018e7e:	6803      	ldr	r3, [r0, #0]
 8018e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e82:	4798      	blx	r3
 8018e84:	3501      	adds	r5, #1
 8018e86:	e7ee      	b.n	8018e66 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8018e88:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8018e8c:	3801      	subs	r0, #1
 8018e8e:	f04f 0c00 	mov.w	ip, #0
 8018e92:	3678      	adds	r6, #120	; 0x78
 8018e94:	1c43      	adds	r3, r0, #1
 8018e96:	d033      	beq.n	8018f00 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8018e98:	1823      	adds	r3, r4, r0
 8018e9a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018e9e:	bb6a      	cbnz	r2, 8018efc <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8018ea0:	b281      	uxth	r1, r0
 8018ea2:	1d25      	adds	r5, r4, #4
 8018ea4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8018ea8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8018eac:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8018eb0:	4293      	cmp	r3, r2
 8018eb2:	dc0a      	bgt.n	8018eca <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8018eb4:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8018eb8:	4422      	add	r2, r4
 8018eba:	18b1      	adds	r1, r6, r2
 8018ebc:	b289      	uxth	r1, r1
 8018ebe:	428b      	cmp	r3, r1
 8018ec0:	d919      	bls.n	8018ef6 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8018ec2:	7851      	ldrb	r1, [r2, #1]
 8018ec4:	f802 1b01 	strb.w	r1, [r2], #1
 8018ec8:	e7f7      	b.n	8018eba <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8018eca:	682f      	ldr	r7, [r5, #0]
 8018ecc:	f105 0804 	add.w	r8, r5, #4
 8018ed0:	45b9      	cmp	r9, r7
 8018ed2:	d10d      	bne.n	8018ef0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8018ed4:	4696      	mov	lr, r2
 8018ed6:	f1be 0f1e 	cmp.w	lr, #30
 8018eda:	dc06      	bgt.n	8018eea <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8018edc:	f10e 0e01 	add.w	lr, lr, #1
 8018ee0:	686f      	ldr	r7, [r5, #4]
 8018ee2:	4573      	cmp	r3, lr
 8018ee4:	f845 7b04 	str.w	r7, [r5], #4
 8018ee8:	dcf5      	bgt.n	8018ed6 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018eea:	3b01      	subs	r3, #1
 8018eec:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8018ef0:	3201      	adds	r2, #1
 8018ef2:	4645      	mov	r5, r8
 8018ef4:	e7da      	b.n	8018eac <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8018ef6:	4423      	add	r3, r4
 8018ef8:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8018efc:	3801      	subs	r0, #1
 8018efe:	e7c9      	b.n	8018e94 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8018f00:	4b04      	ldr	r3, [pc, #16]	; (8018f14 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018f02:	6818      	ldr	r0, [r3, #0]
 8018f04:	b110      	cbz	r0, 8018f0c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8018f06:	6803      	ldr	r3, [r0, #0]
 8018f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f0a:	e795      	b.n	8018e38 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8018f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f10:	2000bc10 	.word	0x2000bc10
 8018f14:	2000bc0c 	.word	0x2000bc0c

08018f18 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018f18:	b570      	push	{r4, r5, r6, lr}
 8018f1a:	4606      	mov	r6, r0
 8018f1c:	460c      	mov	r4, r1
 8018f1e:	b929      	cbnz	r1, 8018f2c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018f20:	4b0c      	ldr	r3, [pc, #48]	; (8018f54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018f22:	2164      	movs	r1, #100	; 0x64
 8018f24:	4a0c      	ldr	r2, [pc, #48]	; (8018f58 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018f26:	480d      	ldr	r0, [pc, #52]	; (8018f5c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018f28:	f00c fb20 	bl	802556c <__assert_func>
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	4d0c      	ldr	r5, [pc, #48]	; (8018f60 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018f30:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018f34:	6828      	ldr	r0, [r5, #0]
 8018f36:	b110      	cbz	r0, 8018f3e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018f38:	6803      	ldr	r3, [r0, #0]
 8018f3a:	695b      	ldr	r3, [r3, #20]
 8018f3c:	4798      	blx	r3
 8018f3e:	602c      	str	r4, [r5, #0]
 8018f40:	4620      	mov	r0, r4
 8018f42:	6823      	ldr	r3, [r4, #0]
 8018f44:	68db      	ldr	r3, [r3, #12]
 8018f46:	4798      	blx	r3
 8018f48:	6833      	ldr	r3, [r6, #0]
 8018f4a:	4630      	mov	r0, r6
 8018f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f52:	4718      	bx	r3
 8018f54:	08028e5c 	.word	0x08028e5c
 8018f58:	08028f24 	.word	0x08028f24
 8018f5c:	08028e66 	.word	0x08028e66
 8018f60:	2000bc0c 	.word	0x2000bc0c

08018f64 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018f64:	b510      	push	{r4, lr}
 8018f66:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018f6a:	888a      	ldrh	r2, [r1, #4]
 8018f6c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018f70:	4422      	add	r2, r4
 8018f72:	b212      	sxth	r2, r2
 8018f74:	4293      	cmp	r3, r2
 8018f76:	da15      	bge.n	8018fa4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018f78:	8882      	ldrh	r2, [r0, #4]
 8018f7a:	4413      	add	r3, r2
 8018f7c:	b21b      	sxth	r3, r3
 8018f7e:	429c      	cmp	r4, r3
 8018f80:	da10      	bge.n	8018fa4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018f82:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018f86:	88c9      	ldrh	r1, [r1, #6]
 8018f88:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018f8c:	4419      	add	r1, r3
 8018f8e:	b209      	sxth	r1, r1
 8018f90:	428a      	cmp	r2, r1
 8018f92:	da07      	bge.n	8018fa4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018f94:	88c0      	ldrh	r0, [r0, #6]
 8018f96:	4410      	add	r0, r2
 8018f98:	b200      	sxth	r0, r0
 8018f9a:	4283      	cmp	r3, r0
 8018f9c:	bfac      	ite	ge
 8018f9e:	2000      	movge	r0, #0
 8018fa0:	2001      	movlt	r0, #1
 8018fa2:	bd10      	pop	{r4, pc}
 8018fa4:	2000      	movs	r0, #0
 8018fa6:	e7fc      	b.n	8018fa2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018fa8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018fa8:	b570      	push	{r4, r5, r6, lr}
 8018faa:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018fae:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018fb2:	42ac      	cmp	r4, r5
 8018fb4:	db18      	blt.n	8018fe8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018fb6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018fba:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018fbe:	429a      	cmp	r2, r3
 8018fc0:	db12      	blt.n	8018fe8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018fc2:	8886      	ldrh	r6, [r0, #4]
 8018fc4:	4435      	add	r5, r6
 8018fc6:	888e      	ldrh	r6, [r1, #4]
 8018fc8:	4434      	add	r4, r6
 8018fca:	b22d      	sxth	r5, r5
 8018fcc:	b224      	sxth	r4, r4
 8018fce:	42a5      	cmp	r5, r4
 8018fd0:	db0a      	blt.n	8018fe8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018fd2:	88c0      	ldrh	r0, [r0, #6]
 8018fd4:	4418      	add	r0, r3
 8018fd6:	88cb      	ldrh	r3, [r1, #6]
 8018fd8:	441a      	add	r2, r3
 8018fda:	b200      	sxth	r0, r0
 8018fdc:	b212      	sxth	r2, r2
 8018fde:	4290      	cmp	r0, r2
 8018fe0:	bfb4      	ite	lt
 8018fe2:	2000      	movlt	r0, #0
 8018fe4:	2001      	movge	r0, #1
 8018fe6:	bd70      	pop	{r4, r5, r6, pc}
 8018fe8:	2000      	movs	r0, #0
 8018fea:	e7fc      	b.n	8018fe6 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018fec <_ZN8touchgfx11Application11getInstanceEv>:
 8018fec:	4b01      	ldr	r3, [pc, #4]	; (8018ff4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018fee:	6818      	ldr	r0, [r3, #0]
 8018ff0:	4770      	bx	lr
 8018ff2:	bf00      	nop
 8018ff4:	2000bc1c 	.word	0x2000bc1c

08018ff8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018ffe:	30a8      	adds	r0, #168	; 0xa8
 8019000:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019004:	f802 3b01 	strb.w	r3, [r2], #1
 8019008:	4282      	cmp	r2, r0
 801900a:	d1fb      	bne.n	8019004 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801900c:	4770      	bx	lr

0801900e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801900e:	4603      	mov	r3, r0
 8019010:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019014:	2200      	movs	r2, #0
 8019016:	801a      	strh	r2, [r3, #0]
 8019018:	3308      	adds	r3, #8
 801901a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801901e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8019022:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019026:	428b      	cmp	r3, r1
 8019028:	d1f5      	bne.n	8019016 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801902a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801902e:	4770      	bx	lr

08019030 <_ZN8touchgfx11ApplicationC1Ev>:
 8019030:	b570      	push	{r4, r5, r6, lr}
 8019032:	4b16      	ldr	r3, [pc, #88]	; (801908c <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8019034:	2500      	movs	r5, #0
 8019036:	4604      	mov	r4, r0
 8019038:	30a8      	adds	r0, #168	; 0xa8
 801903a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801903e:	f820 5c24 	strh.w	r5, [r0, #-36]
 8019042:	f7ff ffe4 	bl	801900e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019046:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801904a:	f7ff ffe0 	bl	801900e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801904e:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8019052:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8019056:	490e      	ldr	r1, [pc, #56]	; (8019090 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8019058:	480e      	ldr	r0, [pc, #56]	; (8019094 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801905a:	f00a fd6d 	bl	8023b38 <CRC_Lock>
 801905e:	4e0e      	ldr	r6, [pc, #56]	; (8019098 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8019060:	4b0e      	ldr	r3, [pc, #56]	; (801909c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019062:	b158      	cbz	r0, 801907c <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8019064:	801d      	strh	r5, [r3, #0]
 8019066:	2300      	movs	r3, #0
 8019068:	4a0d      	ldr	r2, [pc, #52]	; (80190a0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801906a:	4620      	mov	r0, r4
 801906c:	6013      	str	r3, [r2, #0]
 801906e:	4a0d      	ldr	r2, [pc, #52]	; (80190a4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8019070:	6033      	str	r3, [r6, #0]
 8019072:	6013      	str	r3, [r2, #0]
 8019074:	f7ff ffc0 	bl	8018ff8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8019078:	4620      	mov	r0, r4
 801907a:	bd70      	pop	{r4, r5, r6, pc}
 801907c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019080:	2002      	movs	r0, #2
 8019082:	801a      	strh	r2, [r3, #0]
 8019084:	6030      	str	r0, [r6, #0]
 8019086:	f000 ffa9 	bl	8019fdc <_ZN8touchgfx6Screen4drawEv>
 801908a:	e7ec      	b.n	8019066 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801908c:	08028ef0 	.word	0x08028ef0
 8019090:	b5e8b5cd 	.word	0xb5e8b5cd
 8019094:	f407a5c2 	.word	0xf407a5c2
 8019098:	2000bc0c 	.word	0x2000bc0c
 801909c:	20000054 	.word	0x20000054
 80190a0:	2000bc1c 	.word	0x2000bc1c
 80190a4:	2000bc10 	.word	0x2000bc10

080190a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80190a8:	2300      	movs	r3, #0
 80190aa:	8003      	strh	r3, [r0, #0]
 80190ac:	8043      	strh	r3, [r0, #2]
 80190ae:	8083      	strh	r3, [r0, #4]
 80190b0:	80c3      	strh	r3, [r0, #6]
 80190b2:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80190b6:	4293      	cmp	r3, r2
 80190b8:	b530      	push	{r4, r5, lr}
 80190ba:	d912      	bls.n	80190e2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80190bc:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80190c0:	3b01      	subs	r3, #1
 80190c2:	6825      	ldr	r5, [r4, #0]
 80190c4:	b29b      	uxth	r3, r3
 80190c6:	6005      	str	r5, [r0, #0]
 80190c8:	4293      	cmp	r3, r2
 80190ca:	6865      	ldr	r5, [r4, #4]
 80190cc:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 80190d0:	6045      	str	r5, [r0, #4]
 80190d2:	d906      	bls.n	80190e2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80190d4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80190d8:	681d      	ldr	r5, [r3, #0]
 80190da:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 80190de:	685d      	ldr	r5, [r3, #4]
 80190e0:	6065      	str	r5, [r4, #4]
 80190e2:	bd30      	pop	{r4, r5, pc}

080190e4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80190e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80190e6:	466b      	mov	r3, sp
 80190e8:	4604      	mov	r4, r0
 80190ea:	e883 0006 	stmia.w	r3, {r1, r2}
 80190ee:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80190f2:	2a07      	cmp	r2, #7
 80190f4:	d906      	bls.n	8019104 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80190f6:	4b09      	ldr	r3, [pc, #36]	; (801911c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80190f8:	f44f 7102 	mov.w	r1, #520	; 0x208
 80190fc:	4a08      	ldr	r2, [pc, #32]	; (8019120 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80190fe:	4809      	ldr	r0, [pc, #36]	; (8019124 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8019100:	f00c fa34 	bl	802556c <__assert_func>
 8019104:	1c51      	adds	r1, r2, #1
 8019106:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801910a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801910e:	cb03      	ldmia	r3!, {r0, r1}
 8019110:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8019114:	6069      	str	r1, [r5, #4]
 8019116:	b003      	add	sp, #12
 8019118:	bd30      	pop	{r4, r5, pc}
 801911a:	bf00      	nop
 801911c:	08028e90 	.word	0x08028e90
 8019120:	08028f68 	.word	0x08028f68
 8019124:	08028ebf 	.word	0x08028ebf

08019128 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801912c:	b089      	sub	sp, #36	; 0x24
 801912e:	4606      	mov	r6, r0
 8019130:	466c      	mov	r4, sp
 8019132:	4620      	mov	r0, r4
 8019134:	e884 0006 	stmia.w	r4, {r1, r2}
 8019138:	f7fc f9c6 	bl	80154c8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801913c:	bbb0      	cbnz	r0, 80191ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801913e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8019142:	b1fd      	cbz	r5, 8019184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8019144:	3d01      	subs	r5, #1
 8019146:	af04      	add	r7, sp, #16
 8019148:	f04f 090a 	mov.w	r9, #10
 801914c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8019150:	ab02      	add	r3, sp, #8
 8019152:	fa1f f885 	uxth.w	r8, r5
 8019156:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801915a:	6851      	ldr	r1, [r2, #4]
 801915c:	c303      	stmia	r3!, {r0, r1}
 801915e:	4621      	mov	r1, r4
 8019160:	a802      	add	r0, sp, #8
 8019162:	f7ff ff21 	bl	8018fa8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019166:	bb08      	cbnz	r0, 80191ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8019168:	a902      	add	r1, sp, #8
 801916a:	4620      	mov	r0, r4
 801916c:	f7ff ff1c 	bl	8018fa8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019170:	b1f8      	cbz	r0, 80191b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8019172:	4642      	mov	r2, r8
 8019174:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019178:	a806      	add	r0, sp, #24
 801917a:	f7ff ff95 	bl	80190a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801917e:	f115 35ff 	adds.w	r5, r5, #4294967295
 8019182:	d2e3      	bcs.n	801914c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8019184:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8019188:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801918c:	2b08      	cmp	r3, #8
 801918e:	d108      	bne.n	80191a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019190:	4629      	mov	r1, r5
 8019192:	a806      	add	r0, sp, #24
 8019194:	2207      	movs	r2, #7
 8019196:	f7ff ff87 	bl	80190a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801919a:	a906      	add	r1, sp, #24
 801919c:	4620      	mov	r0, r4
 801919e:	f7fd fb8e 	bl	80168be <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80191a2:	4628      	mov	r0, r5
 80191a4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80191a8:	f7ff ff9c 	bl	80190e4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80191ac:	b009      	add	sp, #36	; 0x24
 80191ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191b2:	4621      	mov	r1, r4
 80191b4:	a802      	add	r0, sp, #8
 80191b6:	f7ff fed5 	bl	8018f64 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80191ba:	b150      	cbz	r0, 80191d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80191bc:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80191c0:	a806      	add	r0, sp, #24
 80191c2:	4642      	mov	r2, r8
 80191c4:	f7ff ff70 	bl	80190a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80191c8:	a902      	add	r1, sp, #8
 80191ca:	4620      	mov	r0, r4
 80191cc:	f7fd fb77 	bl	80168be <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80191d0:	e7d5      	b.n	801917e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80191d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80191d6:	e887 0003 	stmia.w	r7, {r0, r1}
 80191da:	a902      	add	r1, sp, #8
 80191dc:	4638      	mov	r0, r7
 80191de:	f7fd fb6e 	bl	80168be <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80191e2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80191e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80191ea:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80191ee:	fb13 f302 	smulbb	r3, r3, r2
 80191f2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80191f6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80191fa:	fb11 f102 	smulbb	r1, r1, r2
 80191fe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8019202:	fb09 f303 	mul.w	r3, r9, r3
 8019206:	fb12 1100 	smlabb	r1, r2, r0, r1
 801920a:	220b      	movs	r2, #11
 801920c:	434a      	muls	r2, r1
 801920e:	4293      	cmp	r3, r2
 8019210:	dab5      	bge.n	801917e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019212:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019216:	a806      	add	r0, sp, #24
 8019218:	4642      	mov	r2, r8
 801921a:	f7ff ff45 	bl	80190a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801921e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019222:	e884 0003 	stmia.w	r4, {r0, r1}
 8019226:	e7aa      	b.n	801917e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08019228 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019228:	4b1d      	ldr	r3, [pc, #116]	; (80192a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801922a:	b530      	push	{r4, r5, lr}
 801922c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019230:	b085      	sub	sp, #20
 8019232:	4b1c      	ldr	r3, [pc, #112]	; (80192a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019234:	460c      	mov	r4, r1
 8019236:	2100      	movs	r1, #0
 8019238:	4605      	mov	r5, r0
 801923a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801923e:	6820      	ldr	r0, [r4, #0]
 8019240:	9100      	str	r1, [sp, #0]
 8019242:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019246:	ab02      	add	r3, sp, #8
 8019248:	6861      	ldr	r1, [r4, #4]
 801924a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801924e:	c303      	stmia	r3!, {r0, r1}
 8019250:	4669      	mov	r1, sp
 8019252:	a802      	add	r0, sp, #8
 8019254:	f7fc f8f4 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 8019258:	ab02      	add	r3, sp, #8
 801925a:	cb03      	ldmia	r3!, {r0, r1}
 801925c:	4b12      	ldr	r3, [pc, #72]	; (80192a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801925e:	6020      	str	r0, [r4, #0]
 8019260:	6818      	ldr	r0, [r3, #0]
 8019262:	6061      	str	r1, [r4, #4]
 8019264:	b138      	cbz	r0, 8019276 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019266:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801926a:	b133      	cbz	r3, 801927a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801926c:	6821      	ldr	r1, [r4, #0]
 801926e:	4628      	mov	r0, r5
 8019270:	6862      	ldr	r2, [r4, #4]
 8019272:	f7ff ff59 	bl	8019128 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019276:	b005      	add	sp, #20
 8019278:	bd30      	pop	{r4, r5, pc}
 801927a:	6803      	ldr	r3, [r0, #0]
 801927c:	4621      	mov	r1, r4
 801927e:	689b      	ldr	r3, [r3, #8]
 8019280:	4798      	blx	r3
 8019282:	4b0a      	ldr	r3, [pc, #40]	; (80192ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019284:	6818      	ldr	r0, [r3, #0]
 8019286:	b118      	cbz	r0, 8019290 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8019288:	6803      	ldr	r3, [r0, #0]
 801928a:	4621      	mov	r1, r4
 801928c:	689b      	ldr	r3, [r3, #8]
 801928e:	4798      	blx	r3
 8019290:	4b07      	ldr	r3, [pc, #28]	; (80192b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8019292:	4621      	mov	r1, r4
 8019294:	6818      	ldr	r0, [r3, #0]
 8019296:	6803      	ldr	r3, [r0, #0]
 8019298:	695b      	ldr	r3, [r3, #20]
 801929a:	4798      	blx	r3
 801929c:	e7eb      	b.n	8019276 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801929e:	bf00      	nop
 80192a0:	2000bb84 	.word	0x2000bb84
 80192a4:	2000bb86 	.word	0x2000bb86
 80192a8:	2000bc0c 	.word	0x2000bc0c
 80192ac:	2000bc08 	.word	0x2000bc08
 80192b0:	2000bb90 	.word	0x2000bb90

080192b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80192b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b8:	4604      	mov	r4, r0
 80192ba:	b09b      	sub	sp, #108	; 0x6c
 80192bc:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 80192c0:	b129      	cbz	r1, 80192ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80192c2:	2300      	movs	r3, #0
 80192c4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80192c8:	b01b      	add	sp, #108	; 0x6c
 80192ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ce:	4baf      	ldr	r3, [pc, #700]	; (801958c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	b33b      	cbz	r3, 8019324 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80192d4:	4dae      	ldr	r5, [pc, #696]	; (8019590 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80192d6:	4628      	mov	r0, r5
 80192d8:	f7fc f8f6 	bl	80154c8 <_ZNK8touchgfx4Rect7isEmptyEv>
 80192dc:	4606      	mov	r6, r0
 80192de:	bb08      	cbnz	r0, 8019324 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80192e0:	4628      	mov	r0, r5
 80192e2:	f7ff fce9 	bl	8018cb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80192e6:	6829      	ldr	r1, [r5, #0]
 80192e8:	686a      	ldr	r2, [r5, #4]
 80192ea:	4620      	mov	r0, r4
 80192ec:	f7ff ff1c 	bl	8019128 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80192f0:	802e      	strh	r6, [r5, #0]
 80192f2:	806e      	strh	r6, [r5, #2]
 80192f4:	80ae      	strh	r6, [r5, #4]
 80192f6:	80ee      	strh	r6, [r5, #6]
 80192f8:	4fa6      	ldr	r7, [pc, #664]	; (8019594 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 80192fa:	a809      	add	r0, sp, #36	; 0x24
 80192fc:	f7ff fe87 	bl	801900e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019300:	883d      	ldrh	r5, [r7, #0]
 8019302:	462e      	mov	r6, r5
 8019304:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019308:	42b3      	cmp	r3, r6
 801930a:	d910      	bls.n	801932e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801930c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019310:	3601      	adds	r6, #1
 8019312:	a809      	add	r0, sp, #36	; 0x24
 8019314:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019318:	b2b6      	uxth	r6, r6
 801931a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801931e:	f7ff fee1 	bl	80190e4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019322:	e7ef      	b.n	8019304 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8019324:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019328:	2b00      	cmp	r3, #0
 801932a:	d1e5      	bne.n	80192f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801932c:	e7cc      	b.n	80192c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801932e:	462e      	mov	r6, r5
 8019330:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019334:	42b3      	cmp	r3, r6
 8019336:	d90b      	bls.n	8019350 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019338:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801933c:	3601      	adds	r6, #1
 801933e:	4620      	mov	r0, r4
 8019340:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019344:	b2b6      	uxth	r6, r6
 8019346:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801934a:	f7ff feed 	bl	8019128 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801934e:	e7ef      	b.n	8019330 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8019350:	4e91      	ldr	r6, [pc, #580]	; (8019598 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8019352:	6833      	ldr	r3, [r6, #0]
 8019354:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019358:	2b01      	cmp	r3, #1
 801935a:	f040 8092 	bne.w	8019482 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801935e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019362:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8019366:	f04f 0900 	mov.w	r9, #0
 801936a:	33aa      	adds	r3, #170	; 0xaa
 801936c:	42a8      	cmp	r0, r5
 801936e:	f103 0308 	add.w	r3, r3, #8
 8019372:	dd0a      	ble.n	801938a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8019374:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019378:	3501      	adds	r5, #1
 801937a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801937e:	440a      	add	r2, r1
 8019380:	b212      	sxth	r2, r2
 8019382:	4591      	cmp	r9, r2
 8019384:	bfb8      	it	lt
 8019386:	4691      	movlt	r9, r2
 8019388:	e7f0      	b.n	801936c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801938a:	4b84      	ldr	r3, [pc, #528]	; (801959c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801938c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80195a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8019390:	881d      	ldrh	r5, [r3, #0]
 8019392:	2300      	movs	r3, #0
 8019394:	2d0f      	cmp	r5, #15
 8019396:	bf8c      	ite	hi
 8019398:	08ed      	lsrhi	r5, r5, #3
 801939a:	2501      	movls	r5, #1
 801939c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80193a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80193a4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80193a8:	6830      	ldr	r0, [r6, #0]
 80193aa:	440b      	add	r3, r1
 80193ac:	6802      	ldr	r2, [r0, #0]
 80193ae:	b21b      	sxth	r3, r3
 80193b0:	4599      	cmp	r9, r3
 80193b2:	dd49      	ble.n	8019448 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 80193b4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80193b8:	4798      	blx	r3
 80193ba:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80193be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80193c2:	4413      	add	r3, r2
 80193c4:	b21b      	sxth	r3, r3
 80193c6:	195a      	adds	r2, r3, r5
 80193c8:	4290      	cmp	r0, r2
 80193ca:	da07      	bge.n	80193dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80193cc:	4581      	cmp	r9, r0
 80193ce:	dd05      	ble.n	80193dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80193d0:	4298      	cmp	r0, r3
 80193d2:	da33      	bge.n	801943c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	dd31      	ble.n	801943c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80193d8:	4648      	mov	r0, r9
 80193da:	e004      	b.n	80193e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 80193dc:	4298      	cmp	r0, r3
 80193de:	dbfb      	blt.n	80193d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 80193e0:	4548      	cmp	r0, r9
 80193e2:	bfa8      	it	ge
 80193e4:	4648      	movge	r0, r9
 80193e6:	f9b8 2000 	ldrsh.w	r2, [r8]
 80193ea:	2100      	movs	r1, #0
 80193ec:	1ac0      	subs	r0, r0, r3
 80193ee:	f8b7 a000 	ldrh.w	sl, [r7]
 80193f2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80193f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80193fa:	f8ad 2018 	strh.w	r2, [sp, #24]
 80193fe:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019402:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019406:	4553      	cmp	r3, sl
 8019408:	d9ca      	bls.n	80193a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801940a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801940e:	ab07      	add	r3, sp, #28
 8019410:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019414:	6851      	ldr	r1, [r2, #4]
 8019416:	c303      	stmia	r3!, {r0, r1}
 8019418:	a807      	add	r0, sp, #28
 801941a:	a905      	add	r1, sp, #20
 801941c:	f7fc f810 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 8019420:	a807      	add	r0, sp, #28
 8019422:	f7fc f851 	bl	80154c8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019426:	b920      	cbnz	r0, 8019432 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8019428:	6823      	ldr	r3, [r4, #0]
 801942a:	a907      	add	r1, sp, #28
 801942c:	4620      	mov	r0, r4
 801942e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019430:	4798      	blx	r3
 8019432:	f10a 0a01 	add.w	sl, sl, #1
 8019436:	fa1f fa8a 	uxth.w	sl, sl
 801943a:	e7e2      	b.n	8019402 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801943c:	6830      	ldr	r0, [r6, #0]
 801943e:	2101      	movs	r1, #1
 8019440:	6803      	ldr	r3, [r0, #0]
 8019442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019444:	4798      	blx	r3
 8019446:	e7ab      	b.n	80193a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8019448:	69d3      	ldr	r3, [r2, #28]
 801944a:	4798      	blx	r3
 801944c:	4b54      	ldr	r3, [pc, #336]	; (80195a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801944e:	781b      	ldrb	r3, [r3, #0]
 8019450:	2b00      	cmp	r3, #0
 8019452:	f43f af39 	beq.w	80192c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019456:	2300      	movs	r3, #0
 8019458:	883d      	ldrh	r5, [r7, #0]
 801945a:	34ea      	adds	r4, #234	; 0xea
 801945c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8019460:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8019464:	42ab      	cmp	r3, r5
 8019466:	f67f af2f 	bls.w	80192c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801946a:	ab1a      	add	r3, sp, #104	; 0x68
 801946c:	4620      	mov	r0, r4
 801946e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019472:	3501      	adds	r5, #1
 8019474:	3b44      	subs	r3, #68	; 0x44
 8019476:	b2ad      	uxth	r5, r5
 8019478:	e893 0006 	ldmia.w	r3, {r1, r2}
 801947c:	f7ff fe32 	bl	80190e4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019480:	e7ee      	b.n	8019460 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8019482:	2b02      	cmp	r3, #2
 8019484:	d16a      	bne.n	801955c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8019486:	f8df a120 	ldr.w	sl, [pc, #288]	; 80195a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801948a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801948e:	42ab      	cmp	r3, r5
 8019490:	d9dc      	bls.n	801944c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8019492:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019496:	ab03      	add	r3, sp, #12
 8019498:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801949c:	6851      	ldr	r1, [r2, #4]
 801949e:	c303      	stmia	r3!, {r0, r1}
 80194a0:	f89a 3000 	ldrb.w	r3, [sl]
 80194a4:	2b01      	cmp	r3, #1
 80194a6:	d102      	bne.n	80194ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 80194a8:	a803      	add	r0, sp, #12
 80194aa:	f7ff fc5f 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80194ae:	a803      	add	r0, sp, #12
 80194b0:	f7fc f80a 	bl	80154c8 <_ZNK8touchgfx4Rect7isEmptyEv>
 80194b4:	2800      	cmp	r0, #0
 80194b6:	d14a      	bne.n	801954e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 80194b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80194bc:	f10d 0914 	add.w	r9, sp, #20
 80194c0:	f10d 081c 	add.w	r8, sp, #28
 80194c4:	f8ad 001a 	strh.w	r0, [sp, #26]
 80194c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80194cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80194d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80194d4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80194d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80194dc:	f8bd b012 	ldrh.w	fp, [sp, #18]
 80194e0:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 80194e4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80194e8:	44dc      	add	ip, fp
 80194ea:	6830      	ldr	r0, [r6, #0]
 80194ec:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80194f0:	ebac 0c02 	sub.w	ip, ip, r2
 80194f4:	f8d0 e000 	ldr.w	lr, [r0]
 80194f8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80194fc:	fa1f fc8c 	uxth.w	ip, ip
 8019500:	f8cd c000 	str.w	ip, [sp]
 8019504:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8019508:	47d8      	blx	fp
 801950a:	f89a 3000 	ldrb.w	r3, [sl]
 801950e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019512:	2b01      	cmp	r3, #1
 8019514:	d11e      	bne.n	8019554 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8019516:	e899 0003 	ldmia.w	r9, {r0, r1}
 801951a:	e888 0003 	stmia.w	r8, {r0, r1}
 801951e:	4640      	mov	r0, r8
 8019520:	f7ff fbca 	bl	8018cb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019524:	6823      	ldr	r3, [r4, #0]
 8019526:	4641      	mov	r1, r8
 8019528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801952a:	4620      	mov	r0, r4
 801952c:	4798      	blx	r3
 801952e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019532:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019536:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801953a:	4413      	add	r3, r2
 801953c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019540:	440a      	add	r2, r1
 8019542:	b21b      	sxth	r3, r3
 8019544:	b212      	sxth	r2, r2
 8019546:	f8ad 3016 	strh.w	r3, [sp, #22]
 801954a:	4293      	cmp	r3, r2
 801954c:	dbc6      	blt.n	80194dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801954e:	3501      	adds	r5, #1
 8019550:	b2ad      	uxth	r5, r5
 8019552:	e79a      	b.n	801948a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8019554:	6823      	ldr	r3, [r4, #0]
 8019556:	4649      	mov	r1, r9
 8019558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801955a:	e7e6      	b.n	801952a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801955c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019560:	42ab      	cmp	r3, r5
 8019562:	f67f af73 	bls.w	801944c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8019566:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801956a:	ab07      	add	r3, sp, #28
 801956c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019570:	6851      	ldr	r1, [r2, #4]
 8019572:	c303      	stmia	r3!, {r0, r1}
 8019574:	a807      	add	r0, sp, #28
 8019576:	f7fb ffa7 	bl	80154c8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801957a:	b920      	cbnz	r0, 8019586 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801957c:	6823      	ldr	r3, [r4, #0]
 801957e:	a907      	add	r1, sp, #28
 8019580:	4620      	mov	r0, r4
 8019582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019584:	4798      	blx	r3
 8019586:	3501      	adds	r5, #1
 8019588:	b2ad      	uxth	r5, r5
 801958a:	e7e7      	b.n	801955c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801958c:	2000bc08 	.word	0x2000bc08
 8019590:	2000bc14 	.word	0x2000bc14
 8019594:	20000054 	.word	0x20000054
 8019598:	2000bb90 	.word	0x2000bb90
 801959c:	2000bb86 	.word	0x2000bb86
 80195a0:	2000bb8e 	.word	0x2000bb8e
 80195a4:	2000bb84 	.word	0x2000bb84
 80195a8:	2000bb88 	.word	0x2000bb88

080195ac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80195ac:	4b03      	ldr	r3, [pc, #12]	; (80195bc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80195ae:	2200      	movs	r2, #0
 80195b0:	801a      	strh	r2, [r3, #0]
 80195b2:	805a      	strh	r2, [r3, #2]
 80195b4:	809a      	strh	r2, [r3, #4]
 80195b6:	80da      	strh	r2, [r3, #6]
 80195b8:	4770      	bx	lr
 80195ba:	bf00      	nop
 80195bc:	2000bc14 	.word	0x2000bc14

080195c0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 80195c0:	2000      	movs	r0, #0
 80195c2:	4770      	bx	lr

080195c4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 80195c4:	2000      	movs	r0, #0
 80195c6:	4770      	bx	lr

080195c8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80195c8:	b508      	push	{r3, lr}
 80195ca:	6803      	ldr	r3, [r0, #0]
 80195cc:	68db      	ldr	r3, [r3, #12]
 80195ce:	4798      	blx	r3
 80195d0:	b128      	cbz	r0, 80195de <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80195d2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80195d6:	7a80      	ldrb	r0, [r0, #10]
 80195d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80195dc:	4318      	orrs	r0, r3
 80195de:	bd08      	pop	{r3, pc}

080195e0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 80195e0:	b40e      	push	{r1, r2, r3}
 80195e2:	b533      	push	{r0, r1, r4, r5, lr}
 80195e4:	ab05      	add	r3, sp, #20
 80195e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80195ea:	9301      	str	r3, [sp, #4]
 80195ec:	4b0a      	ldr	r3, [pc, #40]	; (8019618 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 80195ee:	685c      	ldr	r4, [r3, #4]
 80195f0:	1061      	asrs	r1, r4, #1
 80195f2:	07e4      	lsls	r4, r4, #31
 80195f4:	eb00 0501 	add.w	r5, r0, r1
 80195f8:	bf46      	itte	mi
 80195fa:	681b      	ldrmi	r3, [r3, #0]
 80195fc:	5841      	ldrmi	r1, [r0, r1]
 80195fe:	681c      	ldrpl	r4, [r3, #0]
 8019600:	4628      	mov	r0, r5
 8019602:	bf48      	it	mi
 8019604:	58cc      	ldrmi	r4, [r1, r3]
 8019606:	2100      	movs	r1, #0
 8019608:	9b01      	ldr	r3, [sp, #4]
 801960a:	47a0      	blx	r4
 801960c:	b002      	add	sp, #8
 801960e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019612:	b003      	add	sp, #12
 8019614:	4770      	bx	lr
 8019616:	bf00      	nop
 8019618:	20000028 	.word	0x20000028

0801961c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801961c:	b40c      	push	{r2, r3}
 801961e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019620:	ab06      	add	r3, sp, #24
 8019622:	f853 2b04 	ldr.w	r2, [r3], #4
 8019626:	9301      	str	r3, [sp, #4]
 8019628:	4b09      	ldr	r3, [pc, #36]	; (8019650 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801962a:	685d      	ldr	r5, [r3, #4]
 801962c:	106c      	asrs	r4, r5, #1
 801962e:	07ed      	lsls	r5, r5, #31
 8019630:	eb00 0604 	add.w	r6, r0, r4
 8019634:	bf45      	ittet	mi
 8019636:	681b      	ldrmi	r3, [r3, #0]
 8019638:	5900      	ldrmi	r0, [r0, r4]
 801963a:	681c      	ldrpl	r4, [r3, #0]
 801963c:	58c4      	ldrmi	r4, [r0, r3]
 801963e:	4630      	mov	r0, r6
 8019640:	9b01      	ldr	r3, [sp, #4]
 8019642:	47a0      	blx	r4
 8019644:	b002      	add	sp, #8
 8019646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801964a:	b002      	add	sp, #8
 801964c:	4770      	bx	lr
 801964e:	bf00      	nop
 8019650:	20000028 	.word	0x20000028

08019654 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019654:	b40e      	push	{r1, r2, r3}
 8019656:	b530      	push	{r4, r5, lr}
 8019658:	b098      	sub	sp, #96	; 0x60
 801965a:	4604      	mov	r4, r0
 801965c:	ab1b      	add	r3, sp, #108	; 0x6c
 801965e:	a802      	add	r0, sp, #8
 8019660:	f853 5b04 	ldr.w	r5, [r3], #4
 8019664:	9301      	str	r3, [sp, #4]
 8019666:	f001 fb03 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 801966a:	6823      	ldr	r3, [r4, #0]
 801966c:	4620      	mov	r0, r4
 801966e:	2401      	movs	r4, #1
 8019670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019672:	4798      	blx	r3
 8019674:	9a01      	ldr	r2, [sp, #4]
 8019676:	4603      	mov	r3, r0
 8019678:	4629      	mov	r1, r5
 801967a:	a802      	add	r0, sp, #8
 801967c:	f001 fb15 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019680:	a802      	add	r0, sp, #8
 8019682:	f001 fb4b 	bl	801ad1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019686:	b2a3      	uxth	r3, r4
 8019688:	b138      	cbz	r0, 801969a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801968a:	280a      	cmp	r0, #10
 801968c:	a802      	add	r0, sp, #8
 801968e:	bf04      	itt	eq
 8019690:	3301      	addeq	r3, #1
 8019692:	b21c      	sxtheq	r4, r3
 8019694:	f001 fb42 	bl	801ad1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019698:	e7f5      	b.n	8019686 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801969a:	4618      	mov	r0, r3
 801969c:	b018      	add	sp, #96	; 0x60
 801969e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80196a2:	b003      	add	sp, #12
 80196a4:	4770      	bx	lr
	...

080196a8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80196a8:	b40e      	push	{r1, r2, r3}
 80196aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196ac:	b098      	sub	sp, #96	; 0x60
 80196ae:	4605      	mov	r5, r0
 80196b0:	4f25      	ldr	r7, [pc, #148]	; (8019748 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 80196b2:	ab1d      	add	r3, sp, #116	; 0x74
 80196b4:	a802      	add	r0, sp, #8
 80196b6:	ae18      	add	r6, sp, #96	; 0x60
 80196b8:	f853 4b04 	ldr.w	r4, [r3], #4
 80196bc:	9300      	str	r3, [sp, #0]
 80196be:	f001 fad7 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 80196c2:	682b      	ldr	r3, [r5, #0]
 80196c4:	4628      	mov	r0, r5
 80196c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196c8:	4798      	blx	r3
 80196ca:	4621      	mov	r1, r4
 80196cc:	2400      	movs	r4, #0
 80196ce:	4603      	mov	r3, r0
 80196d0:	9a00      	ldr	r2, [sp, #0]
 80196d2:	a802      	add	r0, sp, #8
 80196d4:	f001 fae9 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80196d8:	f846 4d5c 	str.w	r4, [r6, #-92]!
 80196dc:	462a      	mov	r2, r5
 80196de:	4633      	mov	r3, r6
 80196e0:	4621      	mov	r1, r4
 80196e2:	a802      	add	r0, sp, #8
 80196e4:	f001 fc46 	bl	801af74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80196e8:	b340      	cbz	r0, 801973c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 80196ea:	280a      	cmp	r0, #10
 80196ec:	d01f      	beq.n	801972e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80196ee:	9901      	ldr	r1, [sp, #4]
 80196f0:	b1e9      	cbz	r1, 801972e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80196f2:	7b4b      	ldrb	r3, [r1, #13]
 80196f4:	f891 c008 	ldrb.w	ip, [r1, #8]
 80196f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80196fc:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8019700:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019704:	79c9      	ldrb	r1, [r1, #7]
 8019706:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801970a:	bf18      	it	ne
 801970c:	4638      	movne	r0, r7
 801970e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019712:	bf08      	it	eq
 8019714:	2000      	moveq	r0, #0
 8019716:	88aa      	ldrh	r2, [r5, #4]
 8019718:	ea41 010e 	orr.w	r1, r1, lr
 801971c:	ea43 030c 	orr.w	r3, r3, ip
 8019720:	440a      	add	r2, r1
 8019722:	4303      	orrs	r3, r0
 8019724:	1ad3      	subs	r3, r2, r3
 8019726:	b29b      	uxth	r3, r3
 8019728:	42a3      	cmp	r3, r4
 801972a:	bfc8      	it	gt
 801972c:	b21c      	sxthgt	r4, r3
 801972e:	4633      	mov	r3, r6
 8019730:	462a      	mov	r2, r5
 8019732:	2100      	movs	r1, #0
 8019734:	a802      	add	r0, sp, #8
 8019736:	f001 fc1d 	bl	801af74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801973a:	e7d5      	b.n	80196e8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801973c:	b2a0      	uxth	r0, r4
 801973e:	b018      	add	sp, #96	; 0x60
 8019740:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019744:	b003      	add	sp, #12
 8019746:	4770      	bx	lr
 8019748:	fffffe00 	.word	0xfffffe00

0801974c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801974c:	b40e      	push	{r1, r2, r3}
 801974e:	b570      	push	{r4, r5, r6, lr}
 8019750:	b099      	sub	sp, #100	; 0x64
 8019752:	4604      	mov	r4, r0
 8019754:	26ff      	movs	r6, #255	; 0xff
 8019756:	ab1d      	add	r3, sp, #116	; 0x74
 8019758:	a802      	add	r0, sp, #8
 801975a:	f853 5b04 	ldr.w	r5, [r3], #4
 801975e:	9300      	str	r3, [sp, #0]
 8019760:	f001 fa86 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 8019764:	6823      	ldr	r3, [r4, #0]
 8019766:	4620      	mov	r0, r4
 8019768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801976a:	4798      	blx	r3
 801976c:	4629      	mov	r1, r5
 801976e:	4603      	mov	r3, r0
 8019770:	9a00      	ldr	r2, [sp, #0]
 8019772:	a802      	add	r0, sp, #8
 8019774:	ad18      	add	r5, sp, #96	; 0x60
 8019776:	f001 fa98 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801977a:	2100      	movs	r1, #0
 801977c:	4622      	mov	r2, r4
 801977e:	a802      	add	r0, sp, #8
 8019780:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8019784:	462b      	mov	r3, r5
 8019786:	f001 fbf5 	bl	801af74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801978a:	b190      	cbz	r0, 80197b2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801978c:	280a      	cmp	r0, #10
 801978e:	d009      	beq.n	80197a4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8019790:	9a01      	ldr	r2, [sp, #4]
 8019792:	b13a      	cbz	r2, 80197a4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8019794:	7923      	ldrb	r3, [r4, #4]
 8019796:	7a12      	ldrb	r2, [r2, #8]
 8019798:	1a9b      	subs	r3, r3, r2
 801979a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801979e:	429e      	cmp	r6, r3
 80197a0:	bf28      	it	cs
 80197a2:	461e      	movcs	r6, r3
 80197a4:	462b      	mov	r3, r5
 80197a6:	4622      	mov	r2, r4
 80197a8:	2100      	movs	r1, #0
 80197aa:	a802      	add	r0, sp, #8
 80197ac:	f001 fbe2 	bl	801af74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80197b0:	e7eb      	b.n	801978a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80197b2:	4630      	mov	r0, r6
 80197b4:	b019      	add	sp, #100	; 0x64
 80197b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197ba:	b003      	add	sp, #12
 80197bc:	4770      	bx	lr
	...

080197c0 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>:
 80197c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197c4:	b0b9      	sub	sp, #228	; 0xe4
 80197c6:	4604      	mov	r4, r0
 80197c8:	4615      	mov	r5, r2
 80197ca:	4698      	mov	r8, r3
 80197cc:	ae0c      	add	r6, sp, #48	; 0x30
 80197ce:	4689      	mov	r9, r1
 80197d0:	af22      	add	r7, sp, #136	; 0x88
 80197d2:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8019890 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xd0>
 80197d6:	4630      	mov	r0, r6
 80197d8:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8019894 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xd4>
 80197dc:	f001 fa48 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 80197e0:	6823      	ldr	r3, [r4, #0]
 80197e2:	4620      	mov	r0, r4
 80197e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197e6:	4798      	blx	r3
 80197e8:	4642      	mov	r2, r8
 80197ea:	4629      	mov	r1, r5
 80197ec:	4603      	mov	r3, r0
 80197ee:	4630      	mov	r0, r6
 80197f0:	f001 fa5b 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80197f4:	4638      	mov	r0, r7
 80197f6:	f001 fa3b 	bl	801ac70 <_ZN8touchgfx12TextProviderC1Ev>
 80197fa:	6823      	ldr	r3, [r4, #0]
 80197fc:	4620      	mov	r0, r4
 80197fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019800:	4798      	blx	r3
 8019802:	4629      	mov	r1, r5
 8019804:	2500      	movs	r5, #0
 8019806:	4603      	mov	r3, r0
 8019808:	4642      	mov	r2, r8
 801980a:	4638      	mov	r0, r7
 801980c:	46a8      	mov	r8, r5
 801980e:	f001 fa4c 	bl	801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019812:	4649      	mov	r1, r9
 8019814:	4630      	mov	r0, r6
 8019816:	f001 fb6d 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801981a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 801981e:	f8da 3000 	ldr.w	r3, [sl]
 8019822:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 8019826:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801982a:	b122      	cbz	r2, 8019836 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x76>
 801982c:	f8d3 c04c 	ldr.w	ip, [r3, #76]	; 0x4c
 8019830:	f1bc 0f00 	cmp.w	ip, #0
 8019834:	d101      	bne.n	801983a <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x7a>
 8019836:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801983a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801983e:	aa0a      	add	r2, sp, #40	; 0x28
 8019840:	9305      	str	r3, [sp, #20]
 8019842:	ab03      	add	r3, sp, #12
 8019844:	e9cd b80a 	strd	fp, r8, [sp, #40]	; 0x28
 8019848:	e9cd 8806 	strd	r8, r8, [sp, #24]
 801984c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019850:	4622      	mov	r2, r4
 8019852:	e883 0003 	stmia.w	r3, {r0, r1}
 8019856:	ab09      	add	r3, sp, #36	; 0x24
 8019858:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 801985c:	4660      	mov	r0, ip
 801985e:	9300      	str	r3, [sp, #0]
 8019860:	464b      	mov	r3, r9
 8019862:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8019866:	f7fe f977 	bl	8017b58 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRtRNS_12TextProviderES7_MS0_FvS1_S4_hS7_ibPKNS0_24DrawStringInternalStructEEibSA_>
 801986a:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801986e:	42ab      	cmp	r3, r5
 8019870:	bfc8      	it	gt
 8019872:	b29d      	uxthgt	r5, r3
 8019874:	b118      	cbz	r0, 801987e <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0xbe>
 8019876:	4649      	mov	r1, r9
 8019878:	4638      	mov	r0, r7
 801987a:	f001 fb3b 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801987e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019882:	2b00      	cmp	r3, #0
 8019884:	d1cb      	bne.n	801981e <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x5e>
 8019886:	4628      	mov	r0, r5
 8019888:	b039      	add	sp, #228	; 0xe4
 801988a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801988e:	bf00      	nop
 8019890:	2000bb90 	.word	0x2000bb90
 8019894:	08017aa1 	.word	0x08017aa1

08019898 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019898:	b513      	push	{r0, r1, r4, lr}
 801989a:	1d01      	adds	r1, r0, #4
 801989c:	4603      	mov	r3, r0
 801989e:	466a      	mov	r2, sp
 80198a0:	c903      	ldmia	r1, {r0, r1}
 80198a2:	e882 0003 	stmia.w	r2, {r0, r1}
 80198a6:	2100      	movs	r1, #0
 80198a8:	4618      	mov	r0, r3
 80198aa:	9100      	str	r1, [sp, #0]
 80198ac:	6819      	ldr	r1, [r3, #0]
 80198ae:	690c      	ldr	r4, [r1, #16]
 80198b0:	4611      	mov	r1, r2
 80198b2:	47a0      	blx	r4
 80198b4:	b002      	add	sp, #8
 80198b6:	bd10      	pop	{r4, pc}

080198b8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80198b8:	b538      	push	{r3, r4, r5, lr}
 80198ba:	680b      	ldr	r3, [r1, #0]
 80198bc:	460c      	mov	r4, r1
 80198be:	4605      	mov	r5, r0
 80198c0:	68db      	ldr	r3, [r3, #12]
 80198c2:	4798      	blx	r3
 80198c4:	6823      	ldr	r3, [r4, #0]
 80198c6:	4620      	mov	r0, r4
 80198c8:	4629      	mov	r1, r5
 80198ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198cc:	4798      	blx	r3
 80198ce:	4628      	mov	r0, r5
 80198d0:	bd38      	pop	{r3, r4, r5, pc}

080198d2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80198d2:	b410      	push	{r4}
 80198d4:	880a      	ldrh	r2, [r1, #0]
 80198d6:	8884      	ldrh	r4, [r0, #4]
 80198d8:	4422      	add	r2, r4
 80198da:	800a      	strh	r2, [r1, #0]
 80198dc:	884a      	ldrh	r2, [r1, #2]
 80198de:	88c4      	ldrh	r4, [r0, #6]
 80198e0:	4422      	add	r2, r4
 80198e2:	804a      	strh	r2, [r1, #2]
 80198e4:	6940      	ldr	r0, [r0, #20]
 80198e6:	b120      	cbz	r0, 80198f2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80198e8:	6803      	ldr	r3, [r0, #0]
 80198ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198f0:	4718      	bx	r3
 80198f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198f6:	4770      	bx	lr

080198f8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80198f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198fa:	460b      	mov	r3, r1
 80198fc:	b085      	sub	sp, #20
 80198fe:	4604      	mov	r4, r0
 8019900:	b901      	cbnz	r1, 8019904 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019902:	b1fa      	cbz	r2, 8019944 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8019904:	1d27      	adds	r7, r4, #4
 8019906:	466e      	mov	r6, sp
 8019908:	ad02      	add	r5, sp, #8
 801990a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801990e:	e886 0003 	stmia.w	r6, {r0, r1}
 8019912:	88e1      	ldrh	r1, [r4, #6]
 8019914:	4620      	mov	r0, r4
 8019916:	440a      	add	r2, r1
 8019918:	88a1      	ldrh	r1, [r4, #4]
 801991a:	4419      	add	r1, r3
 801991c:	6823      	ldr	r3, [r4, #0]
 801991e:	b212      	sxth	r2, r2
 8019920:	b209      	sxth	r1, r1
 8019922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019924:	4798      	blx	r3
 8019926:	e897 0003 	ldmia.w	r7, {r0, r1}
 801992a:	e885 0003 	stmia.w	r5, {r0, r1}
 801992e:	6960      	ldr	r0, [r4, #20]
 8019930:	b150      	cbz	r0, 8019948 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8019932:	6803      	ldr	r3, [r0, #0]
 8019934:	4631      	mov	r1, r6
 8019936:	691b      	ldr	r3, [r3, #16]
 8019938:	4798      	blx	r3
 801993a:	6960      	ldr	r0, [r4, #20]
 801993c:	6803      	ldr	r3, [r0, #0]
 801993e:	691b      	ldr	r3, [r3, #16]
 8019940:	4629      	mov	r1, r5
 8019942:	4798      	blx	r3
 8019944:	b005      	add	sp, #20
 8019946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019948:	f7ff fb50 	bl	8018fec <_ZN8touchgfx11Application11getInstanceEv>
 801994c:	6803      	ldr	r3, [r0, #0]
 801994e:	4631      	mov	r1, r6
 8019950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019952:	4798      	blx	r3
 8019954:	f7ff fb4a 	bl	8018fec <_ZN8touchgfx11Application11getInstanceEv>
 8019958:	6803      	ldr	r3, [r0, #0]
 801995a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801995c:	e7f0      	b.n	8019940 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801995e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801995e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019960:	8882      	ldrh	r2, [r0, #4]
 8019962:	4605      	mov	r5, r0
 8019964:	880b      	ldrh	r3, [r1, #0]
 8019966:	460c      	mov	r4, r1
 8019968:	4413      	add	r3, r2
 801996a:	800b      	strh	r3, [r1, #0]
 801996c:	884b      	ldrh	r3, [r1, #2]
 801996e:	88c2      	ldrh	r2, [r0, #6]
 8019970:	4413      	add	r3, r2
 8019972:	4602      	mov	r2, r0
 8019974:	804b      	strh	r3, [r1, #2]
 8019976:	466b      	mov	r3, sp
 8019978:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801997c:	6851      	ldr	r1, [r2, #4]
 801997e:	c303      	stmia	r3!, {r0, r1}
 8019980:	4621      	mov	r1, r4
 8019982:	4668      	mov	r0, sp
 8019984:	f7fb fd5c 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 8019988:	466b      	mov	r3, sp
 801998a:	cb03      	ldmia	r3!, {r0, r1}
 801998c:	6020      	str	r0, [r4, #0]
 801998e:	6061      	str	r1, [r4, #4]
 8019990:	6968      	ldr	r0, [r5, #20]
 8019992:	b128      	cbz	r0, 80199a0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019994:	6803      	ldr	r3, [r0, #0]
 8019996:	691b      	ldr	r3, [r3, #16]
 8019998:	4621      	mov	r1, r4
 801999a:	4798      	blx	r3
 801999c:	b003      	add	sp, #12
 801999e:	bd30      	pop	{r4, r5, pc}
 80199a0:	f7ff fb24 	bl	8018fec <_ZN8touchgfx11Application11getInstanceEv>
 80199a4:	6803      	ldr	r3, [r0, #0]
 80199a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199a8:	e7f6      	b.n	8019998 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

080199aa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80199aa:	b570      	push	{r4, r5, r6, lr}
 80199ac:	8882      	ldrh	r2, [r0, #4]
 80199ae:	460c      	mov	r4, r1
 80199b0:	880b      	ldrh	r3, [r1, #0]
 80199b2:	4605      	mov	r5, r0
 80199b4:	4413      	add	r3, r2
 80199b6:	800b      	strh	r3, [r1, #0]
 80199b8:	884b      	ldrh	r3, [r1, #2]
 80199ba:	88c2      	ldrh	r2, [r0, #6]
 80199bc:	4413      	add	r3, r2
 80199be:	804b      	strh	r3, [r1, #2]
 80199c0:	1d01      	adds	r1, r0, #4
 80199c2:	4620      	mov	r0, r4
 80199c4:	f7fb fd3c 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 80199c8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80199cc:	b153      	cbz	r3, 80199e4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80199ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80199d2:	b13b      	cbz	r3, 80199e4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80199d4:	6968      	ldr	r0, [r5, #20]
 80199d6:	b128      	cbz	r0, 80199e4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80199d8:	6803      	ldr	r3, [r0, #0]
 80199da:	4621      	mov	r1, r4
 80199dc:	6a1b      	ldr	r3, [r3, #32]
 80199de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80199e2:	4718      	bx	r3
 80199e4:	bd70      	pop	{r4, r5, r6, pc}

080199e6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80199e6:	b510      	push	{r4, lr}
 80199e8:	2300      	movs	r3, #0
 80199ea:	4604      	mov	r4, r0
 80199ec:	4608      	mov	r0, r1
 80199ee:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80199f2:	8023      	strh	r3, [r4, #0]
 80199f4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80199f8:	8063      	strh	r3, [r4, #2]
 80199fa:	6803      	ldr	r3, [r0, #0]
 80199fc:	80a1      	strh	r1, [r4, #4]
 80199fe:	4621      	mov	r1, r4
 8019a00:	80e2      	strh	r2, [r4, #6]
 8019a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a04:	4798      	blx	r3
 8019a06:	4620      	mov	r0, r4
 8019a08:	bd10      	pop	{r4, pc}
	...

08019a0c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019a0c:	b530      	push	{r4, r5, lr}
 8019a0e:	8083      	strh	r3, [r0, #4]
 8019a10:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019a14:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019a18:	7183      	strb	r3, [r0, #6]
 8019a1a:	79c3      	ldrb	r3, [r0, #7]
 8019a1c:	6101      	str	r1, [r0, #16]
 8019a1e:	f365 0306 	bfi	r3, r5, #0, #7
 8019a22:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019a26:	8282      	strh	r2, [r0, #20]
 8019a28:	f365 13c7 	bfi	r3, r5, #7, #1
 8019a2c:	71c3      	strb	r3, [r0, #7]
 8019a2e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019a32:	7203      	strb	r3, [r0, #8]
 8019a34:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019a38:	7243      	strb	r3, [r0, #9]
 8019a3a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019a3e:	8143      	strh	r3, [r0, #10]
 8019a40:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019a44:	8183      	strh	r3, [r0, #12]
 8019a46:	4b01      	ldr	r3, [pc, #4]	; (8019a4c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019a48:	6003      	str	r3, [r0, #0]
 8019a4a:	bd30      	pop	{r4, r5, pc}
 8019a4c:	08029090 	.word	0x08029090

08019a50 <_ZNK8touchgfx9ConstFont4findEt>:
 8019a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a52:	8a84      	ldrh	r4, [r0, #20]
 8019a54:	2500      	movs	r5, #0
 8019a56:	260e      	movs	r6, #14
 8019a58:	3c01      	subs	r4, #1
 8019a5a:	42a5      	cmp	r5, r4
 8019a5c:	dc0c      	bgt.n	8019a78 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8019a5e:	192a      	adds	r2, r5, r4
 8019a60:	6903      	ldr	r3, [r0, #16]
 8019a62:	1052      	asrs	r2, r2, #1
 8019a64:	fb06 3302 	mla	r3, r6, r2, r3
 8019a68:	889f      	ldrh	r7, [r3, #4]
 8019a6a:	428f      	cmp	r7, r1
 8019a6c:	d901      	bls.n	8019a72 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8019a6e:	1e54      	subs	r4, r2, #1
 8019a70:	e7f3      	b.n	8019a5a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019a72:	d202      	bcs.n	8019a7a <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8019a74:	1c55      	adds	r5, r2, #1
 8019a76:	e7f0      	b.n	8019a5a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019a78:	2300      	movs	r3, #0
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a7e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a80:	4605      	mov	r5, r0
 8019a82:	4617      	mov	r7, r2
 8019a84:	461e      	mov	r6, r3
 8019a86:	f7ff ffe3 	bl	8019a50 <_ZNK8touchgfx9ConstFont4findEt>
 8019a8a:	b9e0      	cbnz	r0, 8019ac6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019a8c:	b911      	cbnz	r1, 8019a94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8019a8e:	2400      	movs	r4, #0
 8019a90:	4620      	mov	r0, r4
 8019a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a94:	290a      	cmp	r1, #10
 8019a96:	d0fa      	beq.n	8019a8e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019a98:	682b      	ldr	r3, [r5, #0]
 8019a9a:	4628      	mov	r0, r5
 8019a9c:	691b      	ldr	r3, [r3, #16]
 8019a9e:	4798      	blx	r3
 8019aa0:	4601      	mov	r1, r0
 8019aa2:	4628      	mov	r0, r5
 8019aa4:	f7ff ffd4 	bl	8019a50 <_ZNK8touchgfx9ConstFont4findEt>
 8019aa8:	4604      	mov	r4, r0
 8019aaa:	2800      	cmp	r0, #0
 8019aac:	d0ef      	beq.n	8019a8e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019aae:	682b      	ldr	r3, [r5, #0]
 8019ab0:	4621      	mov	r1, r4
 8019ab2:	4628      	mov	r0, r5
 8019ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ab6:	4798      	blx	r3
 8019ab8:	6038      	str	r0, [r7, #0]
 8019aba:	682b      	ldr	r3, [r5, #0]
 8019abc:	4628      	mov	r0, r5
 8019abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ac0:	4798      	blx	r3
 8019ac2:	7030      	strb	r0, [r6, #0]
 8019ac4:	e7e4      	b.n	8019a90 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8019ac6:	4604      	mov	r4, r0
 8019ac8:	e7f1      	b.n	8019aae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08019aca <_ZN8touchgfx6memsetEPvhm>:
 8019aca:	4402      	add	r2, r0
 8019acc:	4290      	cmp	r0, r2
 8019ace:	d002      	beq.n	8019ad6 <_ZN8touchgfx6memsetEPvhm+0xc>
 8019ad0:	f800 1b01 	strb.w	r1, [r0], #1
 8019ad4:	e7fa      	b.n	8019acc <_ZN8touchgfx6memsetEPvhm+0x2>
 8019ad6:	4770      	bx	lr

08019ad8 <_ZN8touchgfx3clzEl>:
 8019ad8:	b1e8      	cbz	r0, 8019b16 <_ZN8touchgfx3clzEl+0x3e>
 8019ada:	2800      	cmp	r0, #0
 8019adc:	bfb8      	it	lt
 8019ade:	4240      	neglt	r0, r0
 8019ae0:	0c03      	lsrs	r3, r0, #16
 8019ae2:	041b      	lsls	r3, r3, #16
 8019ae4:	b9ab      	cbnz	r3, 8019b12 <_ZN8touchgfx3clzEl+0x3a>
 8019ae6:	0400      	lsls	r0, r0, #16
 8019ae8:	2310      	movs	r3, #16
 8019aea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019aee:	bf04      	itt	eq
 8019af0:	0200      	lsleq	r0, r0, #8
 8019af2:	3308      	addeq	r3, #8
 8019af4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019af8:	bf04      	itt	eq
 8019afa:	0100      	lsleq	r0, r0, #4
 8019afc:	3304      	addeq	r3, #4
 8019afe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019b02:	bf04      	itt	eq
 8019b04:	0080      	lsleq	r0, r0, #2
 8019b06:	3302      	addeq	r3, #2
 8019b08:	2800      	cmp	r0, #0
 8019b0a:	bfa8      	it	ge
 8019b0c:	3301      	addge	r3, #1
 8019b0e:	1e58      	subs	r0, r3, #1
 8019b10:	4770      	bx	lr
 8019b12:	2300      	movs	r3, #0
 8019b14:	e7e9      	b.n	8019aea <_ZN8touchgfx3clzEl+0x12>
 8019b16:	201f      	movs	r0, #31
 8019b18:	4770      	bx	lr

08019b1a <_ZN8touchgfx6muldivElllRl>:
 8019b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b1e:	4604      	mov	r4, r0
 8019b20:	4698      	mov	r8, r3
 8019b22:	2601      	movs	r6, #1
 8019b24:	f7ff ffd8 	bl	8019ad8 <_ZN8touchgfx3clzEl>
 8019b28:	2c00      	cmp	r4, #0
 8019b2a:	fa04 f500 	lsl.w	r5, r4, r0
 8019b2e:	fa06 f600 	lsl.w	r6, r6, r0
 8019b32:	bfba      	itte	lt
 8019b34:	f04f 37ff 	movlt.w	r7, #4294967295
 8019b38:	4264      	neglt	r4, r4
 8019b3a:	2701      	movge	r7, #1
 8019b3c:	2900      	cmp	r1, #0
 8019b3e:	f106 36ff 	add.w	r6, r6, #4294967295
 8019b42:	bfbc      	itt	lt
 8019b44:	4249      	neglt	r1, r1
 8019b46:	427f      	neglt	r7, r7
 8019b48:	2a00      	cmp	r2, #0
 8019b4a:	fa41 fc00 	asr.w	ip, r1, r0
 8019b4e:	ea01 0106 	and.w	r1, r1, r6
 8019b52:	bfb8      	it	lt
 8019b54:	427f      	neglt	r7, r7
 8019b56:	fb04 f401 	mul.w	r4, r4, r1
 8019b5a:	fb95 f3f2 	sdiv	r3, r5, r2
 8019b5e:	fb02 5513 	mls	r5, r2, r3, r5
 8019b62:	bfb8      	it	lt
 8019b64:	4252      	neglt	r2, r2
 8019b66:	fb94 f0f2 	sdiv	r0, r4, r2
 8019b6a:	fb02 4410 	mls	r4, r2, r0, r4
 8019b6e:	fb0c 4405 	mla	r4, ip, r5, r4
 8019b72:	fb94 f1f2 	sdiv	r1, r4, r2
 8019b76:	4408      	add	r0, r1
 8019b78:	fb02 4211 	mls	r2, r2, r1, r4
 8019b7c:	fb0c 0003 	mla	r0, ip, r3, r0
 8019b80:	f8c8 2000 	str.w	r2, [r8]
 8019b84:	4378      	muls	r0, r7
 8019b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019b8a <_ZN8touchgfx10ClickEventD1Ev>:
 8019b8a:	4770      	bx	lr

08019b8c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019b8c:	2000      	movs	r0, #0
 8019b8e:	4770      	bx	lr

08019b90 <_ZN8touchgfx9DragEventD1Ev>:
 8019b90:	4770      	bx	lr

08019b92 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019b92:	2001      	movs	r0, #1
 8019b94:	4770      	bx	lr

08019b96 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019b96:	2002      	movs	r0, #2
 8019b98:	4770      	bx	lr

08019b9a <_ZN8touchgfx12GestureEventD1Ev>:
 8019b9a:	4770      	bx	lr

08019b9c <_ZN8touchgfx10ClickEventD0Ev>:
 8019b9c:	b510      	push	{r4, lr}
 8019b9e:	4604      	mov	r4, r0
 8019ba0:	210c      	movs	r1, #12
 8019ba2:	f00b fcb8 	bl	8025516 <_ZdlPvj>
 8019ba6:	4620      	mov	r0, r4
 8019ba8:	bd10      	pop	{r4, pc}

08019baa <_ZN8touchgfx9DragEventD0Ev>:
 8019baa:	b510      	push	{r4, lr}
 8019bac:	4604      	mov	r4, r0
 8019bae:	2110      	movs	r1, #16
 8019bb0:	f00b fcb1 	bl	8025516 <_ZdlPvj>
 8019bb4:	4620      	mov	r0, r4
 8019bb6:	bd10      	pop	{r4, pc}

08019bb8 <_ZN8touchgfx12GestureEventD0Ev>:
 8019bb8:	b510      	push	{r4, lr}
 8019bba:	4604      	mov	r4, r0
 8019bbc:	210c      	movs	r1, #12
 8019bbe:	f00b fcaa 	bl	8025516 <_ZdlPvj>
 8019bc2:	4620      	mov	r0, r4
 8019bc4:	bd10      	pop	{r4, pc}
	...

08019bc8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019bc8:	b530      	push	{r4, r5, lr}
 8019bca:	460d      	mov	r5, r1
 8019bcc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019bce:	b087      	sub	sp, #28
 8019bd0:	4604      	mov	r4, r0
 8019bd2:	b301      	cbz	r1, 8019c16 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019bd4:	a801      	add	r0, sp, #4
 8019bd6:	f7ff ff06 	bl	80199e6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019bda:	892a      	ldrh	r2, [r5, #8]
 8019bdc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019be0:	7928      	ldrb	r0, [r5, #4]
 8019be2:	1ad2      	subs	r2, r2, r3
 8019be4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019be6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019bea:	441a      	add	r2, r3
 8019bec:	896b      	ldrh	r3, [r5, #10]
 8019bee:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019bf2:	f88d 0010 	strb.w	r0, [sp, #16]
 8019bf6:	1b5b      	subs	r3, r3, r5
 8019bf8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019bfa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019bfc:	442b      	add	r3, r5
 8019bfe:	4d07      	ldr	r5, [pc, #28]	; (8019c1c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019c00:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019c04:	a903      	add	r1, sp, #12
 8019c06:	9503      	str	r5, [sp, #12]
 8019c08:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019c0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019c10:	6803      	ldr	r3, [r0, #0]
 8019c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c14:	4798      	blx	r3
 8019c16:	b007      	add	sp, #28
 8019c18:	bd30      	pop	{r4, r5, pc}
 8019c1a:	bf00      	nop
 8019c1c:	0802910c 	.word	0x0802910c

08019c20 <_ZNK8touchgfx4Rect9intersectEss>:
 8019c20:	b510      	push	{r4, lr}
 8019c22:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019c26:	428b      	cmp	r3, r1
 8019c28:	dc10      	bgt.n	8019c4c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019c2a:	8884      	ldrh	r4, [r0, #4]
 8019c2c:	4423      	add	r3, r4
 8019c2e:	b21b      	sxth	r3, r3
 8019c30:	4299      	cmp	r1, r3
 8019c32:	da0b      	bge.n	8019c4c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019c34:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019c38:	4293      	cmp	r3, r2
 8019c3a:	dc07      	bgt.n	8019c4c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019c3c:	88c0      	ldrh	r0, [r0, #6]
 8019c3e:	4418      	add	r0, r3
 8019c40:	b200      	sxth	r0, r0
 8019c42:	4282      	cmp	r2, r0
 8019c44:	bfac      	ite	ge
 8019c46:	2000      	movge	r0, #0
 8019c48:	2001      	movlt	r0, #1
 8019c4a:	bd10      	pop	{r4, pc}
 8019c4c:	2000      	movs	r0, #0
 8019c4e:	e7fc      	b.n	8019c4a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019c50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c52:	460c      	mov	r4, r1
 8019c54:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019c56:	b089      	sub	sp, #36	; 0x24
 8019c58:	4605      	mov	r5, r0
 8019c5a:	2900      	cmp	r1, #0
 8019c5c:	d054      	beq.n	8019d08 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8019c5e:	4668      	mov	r0, sp
 8019c60:	f7ff fec1 	bl	80199e6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019c64:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019c66:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019c68:	4668      	mov	r0, sp
 8019c6a:	8922      	ldrh	r2, [r4, #8]
 8019c6c:	88e1      	ldrh	r1, [r4, #6]
 8019c6e:	443a      	add	r2, r7
 8019c70:	4431      	add	r1, r6
 8019c72:	b212      	sxth	r2, r2
 8019c74:	b209      	sxth	r1, r1
 8019c76:	f7ff ffd3 	bl	8019c20 <_ZNK8touchgfx4Rect9intersectEss>
 8019c7a:	b1d0      	cbz	r0, 8019cb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019c7c:	89a2      	ldrh	r2, [r4, #12]
 8019c7e:	4668      	mov	r0, sp
 8019c80:	8961      	ldrh	r1, [r4, #10]
 8019c82:	443a      	add	r2, r7
 8019c84:	4431      	add	r1, r6
 8019c86:	b212      	sxth	r2, r2
 8019c88:	b209      	sxth	r1, r1
 8019c8a:	f7ff ffc9 	bl	8019c20 <_ZNK8touchgfx4Rect9intersectEss>
 8019c8e:	4603      	mov	r3, r0
 8019c90:	b978      	cbnz	r0, 8019cb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019c92:	4a1e      	ldr	r2, [pc, #120]	; (8019d0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019c94:	a904      	add	r1, sp, #16
 8019c96:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019c98:	9204      	str	r2, [sp, #16]
 8019c9a:	2202      	movs	r2, #2
 8019c9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ca0:	f88d 2014 	strb.w	r2, [sp, #20]
 8019ca4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019ca8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019cac:	6803      	ldr	r3, [r0, #0]
 8019cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cb0:	4798      	blx	r3
 8019cb2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019cb4:	a802      	add	r0, sp, #8
 8019cb6:	f7ff fe96 	bl	80199e6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019cba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019cbe:	88e0      	ldrh	r0, [r4, #6]
 8019cc0:	8961      	ldrh	r1, [r4, #10]
 8019cc2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019cc6:	1a80      	subs	r0, r0, r2
 8019cc8:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8019ccc:	1a89      	subs	r1, r1, r2
 8019cce:	8923      	ldrh	r3, [r4, #8]
 8019cd0:	4460      	add	r0, ip
 8019cd2:	89a2      	ldrh	r2, [r4, #12]
 8019cd4:	4461      	add	r1, ip
 8019cd6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019cd8:	eba3 030e 	sub.w	r3, r3, lr
 8019cdc:	eba2 020e 	sub.w	r2, r2, lr
 8019ce0:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019ce4:	7927      	ldrb	r7, [r4, #4]
 8019ce6:	4433      	add	r3, r6
 8019ce8:	4432      	add	r2, r6
 8019cea:	4c09      	ldr	r4, [pc, #36]	; (8019d10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8019cec:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019cee:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019cf2:	a904      	add	r1, sp, #16
 8019cf4:	9404      	str	r4, [sp, #16]
 8019cf6:	f88d 7014 	strb.w	r7, [sp, #20]
 8019cfa:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019cfe:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019d02:	6803      	ldr	r3, [r0, #0]
 8019d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019d06:	4798      	blx	r3
 8019d08:	b009      	add	sp, #36	; 0x24
 8019d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d0c:	080290e4 	.word	0x080290e4
 8019d10:	080290f8 	.word	0x080290f8

08019d14 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d18:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8019d1c:	b0a1      	sub	sp, #132	; 0x84
 8019d1e:	4604      	mov	r4, r0
 8019d20:	460d      	mov	r5, r1
 8019d22:	790b      	ldrb	r3, [r1, #4]
 8019d24:	f1b9 0f00 	cmp.w	r9, #0
 8019d28:	d00f      	beq.n	8019d4a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	f040 80a2 	bne.w	8019e74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019d30:	b021      	add	sp, #132	; 0x84
 8019d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d36:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019d3a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019d3e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019d42:	1d20      	adds	r0, r4, #4
 8019d44:	f7fb faca 	bl	80152dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019d48:	e094      	b.n	8019e74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d1f0      	bne.n	8019d30 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019d4e:	4b5f      	ldr	r3, [pc, #380]	; (8019ecc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019d56:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019d5a:	f1ba 0f03 	cmp.w	sl, #3
 8019d5e:	ddea      	ble.n	8019d36 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019d60:	f1ba 0f0c 	cmp.w	sl, #12
 8019d64:	f04f 0303 	mov.w	r3, #3
 8019d68:	f04f 0600 	mov.w	r6, #0
 8019d6c:	4958      	ldr	r1, [pc, #352]	; (8019ed0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019d6e:	bfd8      	it	le
 8019d70:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019d74:	960a      	str	r6, [sp, #40]	; 0x28
 8019d76:	bfd8      	it	le
 8019d78:	fb92 f3f3 	sdivle	r3, r2, r3
 8019d7c:	9301      	str	r3, [sp, #4]
 8019d7e:	4b55      	ldr	r3, [pc, #340]	; (8019ed4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019d80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019d84:	4b54      	ldr	r3, [pc, #336]	; (8019ed8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019d86:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019d8a:	2248      	movs	r2, #72	; 0x48
 8019d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d90:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019d94:	ab0e      	add	r3, sp, #56	; 0x38
 8019d96:	4618      	mov	r0, r3
 8019d98:	f00b fc66 	bl	8025668 <memcpy>
 8019d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8019da0:	f8cd a008 	str.w	sl, [sp, #8]
 8019da4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019da8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019dac:	46b3      	mov	fp, r6
 8019dae:	fb93 f3f2 	sdiv	r3, r3, r2
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	9303      	str	r3, [sp, #12]
 8019db6:	2300      	movs	r3, #0
 8019db8:	9a03      	ldr	r2, [sp, #12]
 8019dba:	88ef      	ldrh	r7, [r5, #6]
 8019dbc:	a80a      	add	r0, sp, #40	; 0x28
 8019dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8019dc0:	9b07      	ldr	r3, [sp, #28]
 8019dc2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8019dc6:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8019dca:	fb13 f302 	smulbb	r3, r3, r2
 8019dce:	b29b      	uxth	r3, r3
 8019dd0:	9304      	str	r3, [sp, #16]
 8019dd2:	9b07      	ldr	r3, [sp, #28]
 8019dd4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019dd8:	685b      	ldr	r3, [r3, #4]
 8019dda:	fb13 f302 	smulbb	r3, r3, r2
 8019dde:	b29b      	uxth	r3, r3
 8019de0:	9305      	str	r3, [sp, #20]
 8019de2:	9b04      	ldr	r3, [sp, #16]
 8019de4:	441f      	add	r7, r3
 8019de6:	9b05      	ldr	r3, [sp, #20]
 8019de8:	4498      	add	r8, r3
 8019dea:	b23f      	sxth	r7, r7
 8019dec:	fa0f f888 	sxth.w	r8, r8
 8019df0:	4639      	mov	r1, r7
 8019df2:	4642      	mov	r2, r8
 8019df4:	f7ff ff14 	bl	8019c20 <_ZNK8touchgfx4Rect9intersectEss>
 8019df8:	b380      	cbz	r0, 8019e5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019dfa:	4639      	mov	r1, r7
 8019dfc:	ab09      	add	r3, sp, #36	; 0x24
 8019dfe:	4642      	mov	r2, r8
 8019e00:	1d20      	adds	r0, r4, #4
 8019e02:	f7fb fa6b 	bl	80152dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019e06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019e08:	b341      	cbz	r1, 8019e5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019e0a:	4549      	cmp	r1, r9
 8019e0c:	d026      	beq.n	8019e5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019e0e:	a80c      	add	r0, sp, #48	; 0x30
 8019e10:	f7ff fde9 	bl	80199e6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e14:	2002      	movs	r0, #2
 8019e16:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019e1a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019e1e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019e22:	fb92 f2f0 	sdiv	r2, r2, r0
 8019e26:	440a      	add	r2, r1
 8019e28:	1a99      	subs	r1, r3, r2
 8019e2a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019e2e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019e32:	fb93 f3f0 	sdiv	r3, r3, r0
 8019e36:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8019e3a:	4403      	add	r3, r0
 8019e3c:	1ad3      	subs	r3, r2, r3
 8019e3e:	9a06      	ldr	r2, [sp, #24]
 8019e40:	435b      	muls	r3, r3
 8019e42:	fb01 3301 	mla	r3, r1, r1, r3
 8019e46:	4293      	cmp	r3, r2
 8019e48:	d208      	bcs.n	8019e5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019e4a:	9a04      	ldr	r2, [sp, #16]
 8019e4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019e50:	86a2      	strh	r2, [r4, #52]	; 0x34
 8019e52:	9a05      	ldr	r2, [sp, #20]
 8019e54:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019e58:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019e5a:	9306      	str	r3, [sp, #24]
 8019e5c:	f10b 0b02 	add.w	fp, fp, #2
 8019e60:	f1bb 0f08 	cmp.w	fp, #8
 8019e64:	dda7      	ble.n	8019db6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8019e66:	9b02      	ldr	r3, [sp, #8]
 8019e68:	3601      	adds	r6, #1
 8019e6a:	4453      	add	r3, sl
 8019e6c:	9302      	str	r3, [sp, #8]
 8019e6e:	9b01      	ldr	r3, [sp, #4]
 8019e70:	42b3      	cmp	r3, r6
 8019e72:	d199      	bne.n	8019da8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019e74:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019e76:	2900      	cmp	r1, #0
 8019e78:	f43f af5a 	beq.w	8019d30 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019e7c:	a80c      	add	r0, sp, #48	; 0x30
 8019e7e:	2600      	movs	r6, #0
 8019e80:	f7ff fdb1 	bl	80199e6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e84:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019e88:	88ea      	ldrh	r2, [r5, #6]
 8019e8a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8019e8e:	1ad2      	subs	r2, r2, r3
 8019e90:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019e92:	7929      	ldrb	r1, [r5, #4]
 8019e94:	441a      	add	r2, r3
 8019e96:	892b      	ldrh	r3, [r5, #8]
 8019e98:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8019e9c:	a90e      	add	r1, sp, #56	; 0x38
 8019e9e:	1a1b      	subs	r3, r3, r0
 8019ea0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019ea2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019ea6:	4403      	add	r3, r0
 8019ea8:	480c      	ldr	r0, [pc, #48]	; (8019edc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8019eaa:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8019eae:	900e      	str	r0, [sp, #56]	; 0x38
 8019eb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019eb2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8019eb6:	6803      	ldr	r3, [r0, #0]
 8019eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019eba:	4798      	blx	r3
 8019ebc:	792b      	ldrb	r3, [r5, #4]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	f43f af36 	beq.w	8019d30 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019ec4:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019ec8:	e732      	b.n	8019d30 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019eca:	bf00      	nop
 8019ecc:	2000bb90 	.word	0x2000bb90
 8019ed0:	08026cb8 	.word	0x08026cb8
 8019ed4:	2000bb84 	.word	0x2000bb84
 8019ed8:	2000bb86 	.word	0x2000bb86
 8019edc:	080290e4 	.word	0x080290e4

08019ee0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ee2:	4604      	mov	r4, r0
 8019ee4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019ee8:	3201      	adds	r2, #1
 8019eea:	d112      	bne.n	8019f12 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019eec:	2500      	movs	r5, #0
 8019eee:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019ef2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019ef6:	6803      	ldr	r3, [r0, #0]
 8019ef8:	9500      	str	r5, [sp, #0]
 8019efa:	466d      	mov	r5, sp
 8019efc:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019f00:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019f04:	4629      	mov	r1, r5
 8019f06:	6a1b      	ldr	r3, [r3, #32]
 8019f08:	4798      	blx	r3
 8019f0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019f0e:	e884 0003 	stmia.w	r4, {r0, r1}
 8019f12:	4620      	mov	r0, r4
 8019f14:	b003      	add	sp, #12
 8019f16:	bd30      	pop	{r4, r5, pc}

08019f18 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019f18:	b513      	push	{r0, r1, r4, lr}
 8019f1a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019f1e:	4604      	mov	r4, r0
 8019f20:	3301      	adds	r3, #1
 8019f22:	d109      	bne.n	8019f38 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019f24:	4601      	mov	r1, r0
 8019f26:	4668      	mov	r0, sp
 8019f28:	f7ff fd5d 	bl	80199e6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8019f30:	8423      	strh	r3, [r4, #32]
 8019f32:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019f36:	8463      	strh	r3, [r4, #34]	; 0x22
 8019f38:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019f3c:	b002      	add	sp, #8
 8019f3e:	bd10      	pop	{r4, pc}

08019f40 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019f40:	b513      	push	{r0, r1, r4, lr}
 8019f42:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019f46:	4604      	mov	r4, r0
 8019f48:	3301      	adds	r3, #1
 8019f4a:	d109      	bne.n	8019f60 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019f4c:	4601      	mov	r1, r0
 8019f4e:	4668      	mov	r0, sp
 8019f50:	f7ff fd49 	bl	80199e6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f54:	f8bd 3000 	ldrh.w	r3, [sp]
 8019f58:	8423      	strh	r3, [r4, #32]
 8019f5a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019f5e:	8463      	strh	r3, [r4, #34]	; 0x22
 8019f60:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019f64:	b002      	add	sp, #8
 8019f66:	bd10      	pop	{r4, pc}

08019f68 <_ZN8touchgfx6ScreenC1Ev>:
 8019f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f6a:	4605      	mov	r5, r0
 8019f6c:	4b17      	ldr	r3, [pc, #92]	; (8019fcc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019f6e:	2200      	movs	r2, #0
 8019f70:	4917      	ldr	r1, [pc, #92]	; (8019fd0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019f72:	f845 3b04 	str.w	r3, [r5], #4
 8019f76:	2301      	movs	r3, #1
 8019f78:	8102      	strh	r2, [r0, #8]
 8019f7a:	4604      	mov	r4, r0
 8019f7c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8019f80:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019f84:	4b13      	ldr	r3, [pc, #76]	; (8019fd4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019f86:	8142      	strh	r2, [r0, #10]
 8019f88:	f9b3 7000 	ldrsh.w	r7, [r3]
 8019f8c:	4b12      	ldr	r3, [pc, #72]	; (8019fd8 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8019f8e:	8182      	strh	r2, [r0, #12]
 8019f90:	81c2      	strh	r2, [r0, #14]
 8019f92:	8202      	strh	r2, [r0, #16]
 8019f94:	8242      	strh	r2, [r0, #18]
 8019f96:	8282      	strh	r2, [r0, #20]
 8019f98:	82c2      	strh	r2, [r0, #22]
 8019f9a:	6202      	str	r2, [r0, #32]
 8019f9c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8019fa0:	6342      	str	r2, [r0, #52]	; 0x34
 8019fa2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019fa6:	6041      	str	r1, [r0, #4]
 8019fa8:	4611      	mov	r1, r2
 8019faa:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019fae:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8019fb2:	4628      	mov	r0, r5
 8019fb4:	f7f6 f927 	bl	8010206 <_ZN8touchgfx8Drawable5setXYEss>
 8019fb8:	4639      	mov	r1, r7
 8019fba:	4628      	mov	r0, r5
 8019fbc:	f7f6 f941 	bl	8010242 <_ZN8touchgfx8Drawable8setWidthEs>
 8019fc0:	4628      	mov	r0, r5
 8019fc2:	4631      	mov	r1, r6
 8019fc4:	f7f6 f94c 	bl	8010260 <_ZN8touchgfx8Drawable9setHeightEs>
 8019fc8:	4620      	mov	r0, r4
 8019fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fcc:	08029120 	.word	0x08029120
 8019fd0:	08027df4 	.word	0x08027df4
 8019fd4:	2000bb84 	.word	0x2000bb84
 8019fd8:	2000bb86 	.word	0x2000bb86

08019fdc <_ZN8touchgfx6Screen4drawEv>:
 8019fdc:	4b09      	ldr	r3, [pc, #36]	; (801a004 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019fde:	b507      	push	{r0, r1, r2, lr}
 8019fe0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019fe4:	2100      	movs	r1, #0
 8019fe6:	4b08      	ldr	r3, [pc, #32]	; (801a008 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019fe8:	9100      	str	r1, [sp, #0]
 8019fea:	4669      	mov	r1, sp
 8019fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ff0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019ff4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019ff8:	6803      	ldr	r3, [r0, #0]
 8019ffa:	689b      	ldr	r3, [r3, #8]
 8019ffc:	4798      	blx	r3
 8019ffe:	b003      	add	sp, #12
 801a000:	f85d fb04 	ldr.w	pc, [sp], #4
 801a004:	2000bb84 	.word	0x2000bb84
 801a008:	2000bb86 	.word	0x2000bb86

0801a00c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a010:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a014:	b089      	sub	sp, #36	; 0x24
 801a016:	4680      	mov	r8, r0
 801a018:	460c      	mov	r4, r1
 801a01a:	4615      	mov	r5, r2
 801a01c:	b16b      	cbz	r3, 801a03a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a01e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a022:	b153      	cbz	r3, 801a03a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a024:	4628      	mov	r0, r5
 801a026:	f7ff ff5b 	bl	8019ee0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a02a:	4621      	mov	r1, r4
 801a02c:	f7fe ff9a 	bl	8018f64 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a030:	69eb      	ldr	r3, [r5, #28]
 801a032:	b928      	cbnz	r0, 801a040 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801a034:	461d      	mov	r5, r3
 801a036:	2b00      	cmp	r3, #0
 801a038:	d1f4      	bne.n	801a024 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801a03a:	b009      	add	sp, #36	; 0x24
 801a03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a040:	ae04      	add	r6, sp, #16
 801a042:	2b00      	cmp	r3, #0
 801a044:	d051      	beq.n	801a0ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a046:	682b      	ldr	r3, [r5, #0]
 801a048:	4629      	mov	r1, r5
 801a04a:	a802      	add	r0, sp, #8
 801a04c:	68db      	ldr	r3, [r3, #12]
 801a04e:	4798      	blx	r3
 801a050:	4628      	mov	r0, r5
 801a052:	f7ff ff61 	bl	8019f18 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a056:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a05a:	4407      	add	r7, r0
 801a05c:	4628      	mov	r0, r5
 801a05e:	f7ff ff6f 	bl	8019f40 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a062:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a066:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a06a:	b23f      	sxth	r7, r7
 801a06c:	4418      	add	r0, r3
 801a06e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a072:	4621      	mov	r1, r4
 801a074:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a078:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a07c:	4630      	mov	r0, r6
 801a07e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a082:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a086:	f7fb f9db 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 801a08a:	4628      	mov	r0, r5
 801a08c:	f7ff ff28 	bl	8019ee0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a090:	ab06      	add	r3, sp, #24
 801a092:	4602      	mov	r2, r0
 801a094:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a098:	e883 0003 	stmia.w	r3, {r0, r1}
 801a09c:	4611      	mov	r1, r2
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f7fb f9ce 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 801a0a4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a0a8:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a0ac:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a0b0:	4299      	cmp	r1, r3
 801a0b2:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a0b6:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a0ba:	d10b      	bne.n	801a0d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a0bc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a0c0:	4552      	cmp	r2, sl
 801a0c2:	d107      	bne.n	801a0d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a0c4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a0c8:	455a      	cmp	r2, fp
 801a0ca:	d103      	bne.n	801a0d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a0cc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a0d0:	454a      	cmp	r2, r9
 801a0d2:	d00a      	beq.n	801a0ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a0d4:	f1bb 0f00 	cmp.w	fp, #0
 801a0d8:	d002      	beq.n	801a0e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801a0da:	f1b9 0f00 	cmp.w	r9, #0
 801a0de:	d12e      	bne.n	801a13e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801a0e0:	69ea      	ldr	r2, [r5, #28]
 801a0e2:	4621      	mov	r1, r4
 801a0e4:	4640      	mov	r0, r8
 801a0e6:	f7ff ff91 	bl	801a00c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a0ea:	4628      	mov	r0, r5
 801a0ec:	f7ff fef8 	bl	8019ee0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a0f0:	6861      	ldr	r1, [r4, #4]
 801a0f2:	4602      	mov	r2, r0
 801a0f4:	4633      	mov	r3, r6
 801a0f6:	6820      	ldr	r0, [r4, #0]
 801a0f8:	c303      	stmia	r3!, {r0, r1}
 801a0fa:	4611      	mov	r1, r2
 801a0fc:	4630      	mov	r0, r6
 801a0fe:	f7fb f99f 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 801a102:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d097      	beq.n	801a03a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a10a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d093      	beq.n	801a03a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a112:	4628      	mov	r0, r5
 801a114:	f7ff ff00 	bl	8019f18 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a118:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a11c:	1a18      	subs	r0, r3, r0
 801a11e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a122:	4628      	mov	r0, r5
 801a124:	f7ff ff0c 	bl	8019f40 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a128:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a12c:	4631      	mov	r1, r6
 801a12e:	1a18      	subs	r0, r3, r0
 801a130:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a134:	4628      	mov	r0, r5
 801a136:	682b      	ldr	r3, [r5, #0]
 801a138:	689b      	ldr	r3, [r3, #8]
 801a13a:	4798      	blx	r3
 801a13c:	e77d      	b.n	801a03a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a13e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a142:	fa1f f08a 	uxth.w	r0, sl
 801a146:	4552      	cmp	r2, sl
 801a148:	9000      	str	r0, [sp, #0]
 801a14a:	da12      	bge.n	801a172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801a14c:	9301      	str	r3, [sp, #4]
 801a14e:	9b00      	ldr	r3, [sp, #0]
 801a150:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a154:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a158:	1a9a      	subs	r2, r3, r2
 801a15a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a15e:	4631      	mov	r1, r6
 801a160:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a164:	4640      	mov	r0, r8
 801a166:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a16a:	69ea      	ldr	r2, [r5, #28]
 801a16c:	f7ff ff4e 	bl	801a00c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a170:	9b01      	ldr	r3, [sp, #4]
 801a172:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a176:	b29f      	uxth	r7, r3
 801a178:	429a      	cmp	r2, r3
 801a17a:	da0d      	bge.n	801a198 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801a17c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a180:	1aba      	subs	r2, r7, r2
 801a182:	f8ad a012 	strh.w	sl, [sp, #18]
 801a186:	4631      	mov	r1, r6
 801a188:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a18c:	4640      	mov	r0, r8
 801a18e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a192:	69ea      	ldr	r2, [r5, #28]
 801a194:	f7ff ff3a 	bl	801a00c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a198:	8822      	ldrh	r2, [r4, #0]
 801a19a:	445f      	add	r7, fp
 801a19c:	88a3      	ldrh	r3, [r4, #4]
 801a19e:	b2bf      	uxth	r7, r7
 801a1a0:	4413      	add	r3, r2
 801a1a2:	b23a      	sxth	r2, r7
 801a1a4:	b29b      	uxth	r3, r3
 801a1a6:	b219      	sxth	r1, r3
 801a1a8:	4291      	cmp	r1, r2
 801a1aa:	dd0d      	ble.n	801a1c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801a1ac:	1bdb      	subs	r3, r3, r7
 801a1ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a1b2:	f8ad a012 	strh.w	sl, [sp, #18]
 801a1b6:	4631      	mov	r1, r6
 801a1b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a1bc:	4640      	mov	r0, r8
 801a1be:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a1c2:	69ea      	ldr	r2, [r5, #28]
 801a1c4:	f7ff ff22 	bl	801a00c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a1c8:	88e2      	ldrh	r2, [r4, #6]
 801a1ca:	8863      	ldrh	r3, [r4, #2]
 801a1cc:	4413      	add	r3, r2
 801a1ce:	9a00      	ldr	r2, [sp, #0]
 801a1d0:	444a      	add	r2, r9
 801a1d2:	b29b      	uxth	r3, r3
 801a1d4:	fa1f f982 	uxth.w	r9, r2
 801a1d8:	b219      	sxth	r1, r3
 801a1da:	fa0f f289 	sxth.w	r2, r9
 801a1de:	428a      	cmp	r2, r1
 801a1e0:	da83      	bge.n	801a0ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a1e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a1e6:	eba3 0309 	sub.w	r3, r3, r9
 801a1ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a1ee:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a1f2:	4631      	mov	r1, r6
 801a1f4:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a1f8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a1fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a200:	69ea      	ldr	r2, [r5, #28]
 801a202:	e76f      	b.n	801a0e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801a204 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a206:	2300      	movs	r3, #0
 801a208:	aa02      	add	r2, sp, #8
 801a20a:	4604      	mov	r4, r0
 801a20c:	3004      	adds	r0, #4
 801a20e:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a212:	460d      	mov	r5, r1
 801a214:	f7fb f9eb 	bl	80155ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a218:	9a01      	ldr	r2, [sp, #4]
 801a21a:	b11a      	cbz	r2, 801a224 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a21c:	4629      	mov	r1, r5
 801a21e:	4620      	mov	r0, r4
 801a220:	f7ff fef4 	bl	801a00c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a224:	b003      	add	sp, #12
 801a226:	bd30      	pop	{r4, r5, pc}

0801a228 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a22a:	4602      	mov	r2, r0
 801a22c:	4604      	mov	r4, r0
 801a22e:	460d      	mov	r5, r1
 801a230:	466b      	mov	r3, sp
 801a232:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a236:	6851      	ldr	r1, [r2, #4]
 801a238:	c303      	stmia	r3!, {r0, r1}
 801a23a:	4629      	mov	r1, r5
 801a23c:	4668      	mov	r0, sp
 801a23e:	f7fb f8ff 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 801a242:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a246:	4669      	mov	r1, sp
 801a248:	b123      	cbz	r3, 801a254 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a24a:	4620      	mov	r0, r4
 801a24c:	f7ff ffda 	bl	801a204 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a250:	b003      	add	sp, #12
 801a252:	bd30      	pop	{r4, r5, pc}
 801a254:	1d20      	adds	r0, r4, #4
 801a256:	f7fb f991 	bl	801557c <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a25a:	e7f9      	b.n	801a250 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a25c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a25c:	460b      	mov	r3, r1
 801a25e:	680a      	ldr	r2, [r1, #0]
 801a260:	1d01      	adds	r1, r0, #4
 801a262:	6952      	ldr	r2, [r2, #20]
 801a264:	4618      	mov	r0, r3
 801a266:	4710      	bx	r2

0801a268 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801a268:	f011 0f40 	tst.w	r1, #64	; 0x40
 801a26c:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801a270:	4b03      	ldr	r3, [pc, #12]	; (801a280 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801a272:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a276:	bf08      	it	eq
 801a278:	2300      	moveq	r3, #0
 801a27a:	4308      	orrs	r0, r1
 801a27c:	4318      	orrs	r0, r3
 801a27e:	4770      	bx	lr
 801a280:	fffffe00 	.word	0xfffffe00

0801a284 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801a284:	7b43      	ldrb	r3, [r0, #13]
 801a286:	7201      	strb	r1, [r0, #8]
 801a288:	b289      	uxth	r1, r1
 801a28a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801a28e:	05ca      	lsls	r2, r1, #23
 801a290:	bf48      	it	mi
 801a292:	f043 0320 	orrmi.w	r3, r3, #32
 801a296:	7343      	strb	r3, [r0, #13]
 801a298:	058b      	lsls	r3, r1, #22
 801a29a:	bf42      	ittt	mi
 801a29c:	7b43      	ldrbmi	r3, [r0, #13]
 801a29e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801a2a2:	7343      	strbmi	r3, [r0, #13]
 801a2a4:	4770      	bx	lr

0801a2a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a2a6:	b530      	push	{r4, r5, lr}
 801a2a8:	2500      	movs	r5, #0
 801a2aa:	2401      	movs	r4, #1
 801a2ac:	6843      	ldr	r3, [r0, #4]
 801a2ae:	b913      	cbnz	r3, 801a2b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a2b0:	6803      	ldr	r3, [r0, #0]
 801a2b2:	b1f3      	cbz	r3, 801a2f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a2b4:	6043      	str	r3, [r0, #4]
 801a2b6:	7c03      	ldrb	r3, [r0, #16]
 801a2b8:	b143      	cbz	r3, 801a2cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a2ba:	68c3      	ldr	r3, [r0, #12]
 801a2bc:	b12b      	cbz	r3, 801a2ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a2be:	881a      	ldrh	r2, [r3, #0]
 801a2c0:	b11a      	cbz	r2, 801a2ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a2c2:	1c9a      	adds	r2, r3, #2
 801a2c4:	60c2      	str	r2, [r0, #12]
 801a2c6:	8818      	ldrh	r0, [r3, #0]
 801a2c8:	bd30      	pop	{r4, r5, pc}
 801a2ca:	7405      	strb	r5, [r0, #16]
 801a2cc:	6843      	ldr	r3, [r0, #4]
 801a2ce:	8819      	ldrh	r1, [r3, #0]
 801a2d0:	b179      	cbz	r1, 801a2f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a2d2:	1c9a      	adds	r2, r3, #2
 801a2d4:	2902      	cmp	r1, #2
 801a2d6:	6042      	str	r2, [r0, #4]
 801a2d8:	d1f5      	bne.n	801a2c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a2da:	6883      	ldr	r3, [r0, #8]
 801a2dc:	1d1a      	adds	r2, r3, #4
 801a2de:	6082      	str	r2, [r0, #8]
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	60c3      	str	r3, [r0, #12]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d0e1      	beq.n	801a2ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a2e8:	881b      	ldrh	r3, [r3, #0]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d0de      	beq.n	801a2ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a2ee:	7404      	strb	r4, [r0, #16]
 801a2f0:	e7dc      	b.n	801a2ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a2f2:	2000      	movs	r0, #0
 801a2f4:	e7e8      	b.n	801a2c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a2f6 <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>:
 801a2f6:	2301      	movs	r3, #1
 801a2f8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 801a2fc:	4770      	bx	lr

0801a2fe <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>:
 801a2fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a300:	f04f 0c0a 	mov.w	ip, #10
 801a304:	2500      	movs	r5, #0
 801a306:	2702      	movs	r7, #2
 801a308:	42ab      	cmp	r3, r5
 801a30a:	dd0f      	ble.n	801a32c <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x2e>
 801a30c:	195c      	adds	r4, r3, r5
 801a30e:	fb94 f4f7 	sdiv	r4, r4, r7
 801a312:	fb0c f604 	mul.w	r6, ip, r4
 801a316:	1990      	adds	r0, r2, r6
 801a318:	5b96      	ldrh	r6, [r2, r6]
 801a31a:	428e      	cmp	r6, r1
 801a31c:	d203      	bcs.n	801a326 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x28>
 801a31e:	1c65      	adds	r5, r4, #1
 801a320:	461c      	mov	r4, r3
 801a322:	4623      	mov	r3, r4
 801a324:	e7f0      	b.n	801a308 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0xa>
 801a326:	d1fc      	bne.n	801a322 <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x24>
 801a328:	3002      	adds	r0, #2
 801a32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a32c:	2000      	movs	r0, #0
 801a32e:	e7fc      	b.n	801a32a <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti+0x2c>

0801a330 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>:
 801a330:	f46f 6cc4 	mvn.w	ip, #1568	; 0x620
 801a334:	460b      	mov	r3, r1
 801a336:	eb01 020c 	add.w	r2, r1, ip
 801a33a:	b410      	push	{r4}
 801a33c:	b294      	uxth	r4, r2
 801a33e:	2c19      	cmp	r4, #25
 801a340:	d805      	bhi.n	801a34e <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x1e>
 801a342:	480d      	ldr	r0, [pc, #52]	; (801a378 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x48>)
 801a344:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 801a348:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a34c:	4770      	bx	lr
 801a34e:	f46f 64c8 	mvn.w	r4, #1600	; 0x640
 801a352:	190a      	adds	r2, r1, r4
 801a354:	b294      	uxth	r4, r2
 801a356:	2c09      	cmp	r4, #9
 801a358:	d801      	bhi.n	801a35e <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x2e>
 801a35a:	4808      	ldr	r0, [pc, #32]	; (801a37c <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x4c>)
 801a35c:	e7f2      	b.n	801a344 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x14>
 801a35e:	f46f 62ce 	mvn.w	r2, #1648	; 0x670
 801a362:	4413      	add	r3, r2
 801a364:	2b62      	cmp	r3, #98	; 0x62
 801a366:	d805      	bhi.n	801a374 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x44>
 801a368:	2328      	movs	r3, #40	; 0x28
 801a36a:	4a05      	ldr	r2, [pc, #20]	; (801a380 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x50>)
 801a36c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a370:	f7ff bfc5 	b.w	801a2fe <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801a374:	2000      	movs	r0, #0
 801a376:	e7e7      	b.n	801a348 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt+0x18>
 801a378:	08029e1c 	.word	0x08029e1c
 801a37c:	08029eec 	.word	0x08029eec
 801a380:	080291ba 	.word	0x080291ba

0801a384 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a384:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a386:	4605      	mov	r5, r0
 801a388:	4608      	mov	r0, r1
 801a38a:	b1f1      	cbz	r1, 801a3ca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a38c:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a390:	460b      	mov	r3, r1
 801a392:	f101 0708 	add.w	r7, r1, #8
 801a396:	4622      	mov	r2, r4
 801a398:	6818      	ldr	r0, [r3, #0]
 801a39a:	3308      	adds	r3, #8
 801a39c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a3a0:	4626      	mov	r6, r4
 801a3a2:	42bb      	cmp	r3, r7
 801a3a4:	c603      	stmia	r6!, {r0, r1}
 801a3a6:	4634      	mov	r4, r6
 801a3a8:	d1f6      	bne.n	801a398 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a3aa:	6818      	ldr	r0, [r3, #0]
 801a3ac:	6030      	str	r0, [r6, #0]
 801a3ae:	4610      	mov	r0, r2
 801a3b0:	889b      	ldrh	r3, [r3, #4]
 801a3b2:	80b3      	strh	r3, [r6, #4]
 801a3b4:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a3b8:	015b      	lsls	r3, r3, #5
 801a3ba:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a3be:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a3c2:	430b      	orrs	r3, r1
 801a3c4:	425b      	negs	r3, r3
 801a3c6:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a3cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a3cc:	b538      	push	{r3, r4, r5, lr}
 801a3ce:	460c      	mov	r4, r1
 801a3d0:	6811      	ldr	r1, [r2, #0]
 801a3d2:	4610      	mov	r0, r2
 801a3d4:	68cd      	ldr	r5, [r1, #12]
 801a3d6:	4619      	mov	r1, r3
 801a3d8:	47a8      	blx	r5
 801a3da:	2800      	cmp	r0, #0
 801a3dc:	bf08      	it	eq
 801a3de:	4620      	moveq	r0, r4
 801a3e0:	bd38      	pop	{r3, r4, r5, pc}

0801a3e2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a3e2:	b570      	push	{r4, r5, r6, lr}
 801a3e4:	8810      	ldrh	r0, [r2, #0]
 801a3e6:	4298      	cmp	r0, r3
 801a3e8:	d817      	bhi.n	801a41a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a3ea:	1e48      	subs	r0, r1, #1
 801a3ec:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a3f0:	4298      	cmp	r0, r3
 801a3f2:	d312      	bcc.n	801a41a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a3f4:	2400      	movs	r4, #0
 801a3f6:	428c      	cmp	r4, r1
 801a3f8:	d20f      	bcs.n	801a41a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a3fa:	1860      	adds	r0, r4, r1
 801a3fc:	1040      	asrs	r0, r0, #1
 801a3fe:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a402:	0085      	lsls	r5, r0, #2
 801a404:	42b3      	cmp	r3, r6
 801a406:	d902      	bls.n	801a40e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a408:	3001      	adds	r0, #1
 801a40a:	b284      	uxth	r4, r0
 801a40c:	e7f3      	b.n	801a3f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a40e:	d102      	bne.n	801a416 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801a410:	442a      	add	r2, r5
 801a412:	8850      	ldrh	r0, [r2, #2]
 801a414:	bd70      	pop	{r4, r5, r6, pc}
 801a416:	b281      	uxth	r1, r0
 801a418:	e7ed      	b.n	801a3f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a41a:	2000      	movs	r0, #0
 801a41c:	e7fa      	b.n	801a414 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
	...

0801a420 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801a420:	b510      	push	{r4, lr}
 801a422:	8ac3      	ldrh	r3, [r0, #22]
 801a424:	428b      	cmp	r3, r1
 801a426:	d805      	bhi.n	801a434 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801a428:	4b07      	ldr	r3, [pc, #28]	; (801a448 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801a42a:	21fd      	movs	r1, #253	; 0xfd
 801a42c:	4a07      	ldr	r2, [pc, #28]	; (801a44c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801a42e:	4808      	ldr	r0, [pc, #32]	; (801a450 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801a430:	f00b f89c 	bl	802556c <__assert_func>
 801a434:	8a83      	ldrh	r3, [r0, #20]
 801a436:	240a      	movs	r4, #10
 801a438:	4419      	add	r1, r3
 801a43a:	fbb1 f3f4 	udiv	r3, r1, r4
 801a43e:	fb04 1113 	mls	r1, r4, r3, r1
 801a442:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a446:	bd10      	pop	{r4, pc}
 801a448:	0802916d 	.word	0x0802916d
 801a44c:	0802a31e 	.word	0x0802a31e
 801a450:	0802917b 	.word	0x0802917b

0801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801a454:	b508      	push	{r3, lr}
 801a456:	8ac3      	ldrh	r3, [r0, #22]
 801a458:	428b      	cmp	r3, r1
 801a45a:	d805      	bhi.n	801a468 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801a45c:	4b07      	ldr	r3, [pc, #28]	; (801a47c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801a45e:	21d3      	movs	r1, #211	; 0xd3
 801a460:	4a07      	ldr	r2, [pc, #28]	; (801a480 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801a462:	4808      	ldr	r0, [pc, #32]	; (801a484 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801a464:	f00b f882 	bl	802556c <__assert_func>
 801a468:	8a83      	ldrh	r3, [r0, #20]
 801a46a:	220a      	movs	r2, #10
 801a46c:	4419      	add	r1, r3
 801a46e:	fbb1 f3f2 	udiv	r3, r1, r2
 801a472:	fb02 1113 	mls	r1, r2, r3, r1
 801a476:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801a47a:	bd08      	pop	{r3, pc}
 801a47c:	0802916d 	.word	0x0802916d
 801a480:	0802a06e 	.word	0x0802a06e
 801a484:	0802917b 	.word	0x0802917b

0801a488 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a48c:	4604      	mov	r4, r0
 801a48e:	4688      	mov	r8, r1
 801a490:	4615      	mov	r5, r2
 801a492:	b94a      	cbnz	r2, 801a4a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801a494:	4691      	mov	r9, r2
 801a496:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a49a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a49e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a4a2:	4648      	mov	r0, r9
 801a4a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4a8:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801a4ac:	8892      	ldrh	r2, [r2, #4]
 801a4ae:	462b      	mov	r3, r5
 801a4b0:	f105 0c08 	add.w	ip, r5, #8
 801a4b4:	46b3      	mov	fp, r6
 801a4b6:	6818      	ldr	r0, [r3, #0]
 801a4b8:	3308      	adds	r3, #8
 801a4ba:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a4be:	4637      	mov	r7, r6
 801a4c0:	4563      	cmp	r3, ip
 801a4c2:	c703      	stmia	r7!, {r0, r1}
 801a4c4:	463e      	mov	r6, r7
 801a4c6:	d1f6      	bne.n	801a4b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801a4c8:	6818      	ldr	r0, [r3, #0]
 801a4ca:	46d9      	mov	r9, fp
 801a4cc:	6038      	str	r0, [r7, #0]
 801a4ce:	889b      	ldrh	r3, [r3, #4]
 801a4d0:	80bb      	strh	r3, [r7, #4]
 801a4d2:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801a4d6:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801a4da:	18d3      	adds	r3, r2, r3
 801a4dc:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801a4e0:	b298      	uxth	r0, r3
 801a4e2:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801a4e6:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801a4ea:	281d      	cmp	r0, #29
 801a4ec:	ea4a 0a01 	orr.w	sl, sl, r1
 801a4f0:	fa1f f68a 	uxth.w	r6, sl
 801a4f4:	d842      	bhi.n	801a57c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801a4f6:	2301      	movs	r3, #1
 801a4f8:	4950      	ldr	r1, [pc, #320]	; (801a63c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801a4fa:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801a4fe:	4083      	lsls	r3, r0
 801a500:	420b      	tst	r3, r1
 801a502:	d114      	bne.n	801a52e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a504:	f413 7f60 	tst.w	r3, #896	; 0x380
 801a508:	d03c      	beq.n	801a584 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801a50a:	fa1f fa8a 	uxth.w	sl, sl
 801a50e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a512:	4658      	mov	r0, fp
 801a514:	eba1 010a 	sub.w	r1, r1, sl
 801a518:	b209      	sxth	r1, r1
 801a51a:	f7ff feb3 	bl	801a284 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a51e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801a522:	1b86      	subs	r6, r0, r6
 801a524:	eba6 0a0a 	sub.w	sl, r6, sl
 801a528:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801a52c:	e7b9      	b.n	801a4a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a52e:	2100      	movs	r1, #0
 801a530:	f104 001a 	add.w	r0, r4, #26
 801a534:	f7ff ff8e 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a538:	f640 6333 	movw	r3, #3635	; 0xe33
 801a53c:	4601      	mov	r1, r0
 801a53e:	4298      	cmp	r0, r3
 801a540:	d10a      	bne.n	801a558 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801a542:	f8d8 3000 	ldr.w	r3, [r8]
 801a546:	4640      	mov	r0, r8
 801a548:	68db      	ldr	r3, [r3, #12]
 801a54a:	4798      	blx	r3
 801a54c:	7b41      	ldrb	r1, [r0, #13]
 801a54e:	7a00      	ldrb	r0, [r0, #8]
 801a550:	f7ff fe8a 	bl	801a268 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a554:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a558:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801a55c:	4658      	mov	r0, fp
 801a55e:	4431      	add	r1, r6
 801a560:	4451      	add	r1, sl
 801a562:	b209      	sxth	r1, r1
 801a564:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801a568:	f7ff fe8c 	bl	801a284 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a56c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a570:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a574:	1a9b      	subs	r3, r3, r2
 801a576:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a57a:	e792      	b.n	801a4a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a57c:	f640 631b 	movw	r3, #3611	; 0xe1b
 801a580:	429a      	cmp	r2, r3
 801a582:	d005      	beq.n	801a590 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801a584:	f022 0302 	bic.w	r3, r2, #2
 801a588:	f640 611d 	movw	r1, #3613	; 0xe1d
 801a58c:	428b      	cmp	r3, r1
 801a58e:	d119      	bne.n	801a5c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801a590:	1e53      	subs	r3, r2, #1
 801a592:	4629      	mov	r1, r5
 801a594:	4642      	mov	r2, r8
 801a596:	4620      	mov	r0, r4
 801a598:	b29b      	uxth	r3, r3
 801a59a:	f7ff ff17 	bl	801a3cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a59e:	7b41      	ldrb	r1, [r0, #13]
 801a5a0:	7a00      	ldrb	r0, [r0, #8]
 801a5a2:	f7ff fe61 	bl	801a268 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a5a6:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801a5aa:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a5ae:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a5b2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a5b6:	4313      	orrs	r3, r2
 801a5b8:	115a      	asrs	r2, r3, #5
 801a5ba:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a5be:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a5c2:	e02e      	b.n	801a622 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a5c4:	4639      	mov	r1, r7
 801a5c6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a5ca:	f7ff fe4d 	bl	801a268 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a5ce:	f640 6109 	movw	r1, #3593	; 0xe09
 801a5d2:	f022 0310 	bic.w	r3, r2, #16
 801a5d6:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a5da:	428b      	cmp	r3, r1
 801a5dc:	d003      	beq.n	801a5e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801a5de:	f640 6313 	movw	r3, #3603	; 0xe13
 801a5e2:	429a      	cmp	r2, r3
 801a5e4:	d127      	bne.n	801a636 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801a5e6:	b27f      	sxtb	r7, r7
 801a5e8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a5ec:	4629      	mov	r1, r5
 801a5ee:	4620      	mov	r0, r4
 801a5f0:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801a5f4:	431f      	orrs	r7, r3
 801a5f6:	f640 6313 	movw	r3, #3603	; 0xe13
 801a5fa:	429a      	cmp	r2, r3
 801a5fc:	bf14      	ite	ne
 801a5fe:	f102 33ff 	addne.w	r3, r2, #4294967295
 801a602:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a606:	4642      	mov	r2, r8
 801a608:	bf18      	it	ne
 801a60a:	b29b      	uxthne	r3, r3
 801a60c:	f7ff fede 	bl	801a3cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a610:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a614:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a618:	7a83      	ldrb	r3, [r0, #10]
 801a61a:	4313      	orrs	r3, r2
 801a61c:	1aff      	subs	r7, r7, r3
 801a61e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801a622:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801a626:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a62a:	f7ff fe1d 	bl	801a268 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a62e:	1b80      	subs	r0, r0, r6
 801a630:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801a634:	e735      	b.n	801a4a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a636:	2300      	movs	r3, #0
 801a638:	e7c1      	b.n	801a5be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801a63a:	bf00      	nop
 801a63c:	3fc00079 	.word	0x3fc00079

0801a640 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a640:	3a01      	subs	r2, #1
 801a642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a646:	b292      	uxth	r2, r2
 801a648:	460c      	mov	r4, r1
 801a64a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a64e:	42b2      	cmp	r2, r6
 801a650:	d018      	beq.n	801a684 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801a652:	8b01      	ldrh	r1, [r0, #24]
 801a654:	f834 5b02 	ldrh.w	r5, [r4], #2
 801a658:	4291      	cmp	r1, r2
 801a65a:	d805      	bhi.n	801a668 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801a65c:	4b13      	ldr	r3, [pc, #76]	; (801a6ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801a65e:	21d3      	movs	r1, #211	; 0xd3
 801a660:	4a13      	ldr	r2, [pc, #76]	; (801a6b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801a662:	4814      	ldr	r0, [pc, #80]	; (801a6b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801a664:	f00a ff82 	bl	802556c <__assert_func>
 801a668:	8ac1      	ldrh	r1, [r0, #22]
 801a66a:	4411      	add	r1, r2
 801a66c:	3a01      	subs	r2, #1
 801a66e:	f001 0101 	and.w	r1, r1, #1
 801a672:	b292      	uxth	r2, r2
 801a674:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a678:	8a49      	ldrh	r1, [r1, #18]
 801a67a:	428d      	cmp	r5, r1
 801a67c:	d0e7      	beq.n	801a64e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801a67e:	2000      	movs	r0, #0
 801a680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a684:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801a688:	2600      	movs	r6, #0
 801a68a:	f100 051a 	add.w	r5, r0, #26
 801a68e:	441f      	add	r7, r3
 801a690:	b2b1      	uxth	r1, r6
 801a692:	42b9      	cmp	r1, r7
 801a694:	da08      	bge.n	801a6a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801a696:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801a69a:	4628      	mov	r0, r5
 801a69c:	f7ff feda 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a6a0:	3601      	adds	r6, #1
 801a6a2:	4540      	cmp	r0, r8
 801a6a4:	d0f4      	beq.n	801a690 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801a6a6:	e7ea      	b.n	801a67e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a6a8:	2001      	movs	r0, #1
 801a6aa:	e7e9      	b.n	801a680 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a6ac:	0802916d 	.word	0x0802916d
 801a6b0:	0802a47e 	.word	0x0802a47e
 801a6b4:	0802917b 	.word	0x0802917b

0801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801a6b8:	b538      	push	{r3, r4, r5, lr}
 801a6ba:	8ac3      	ldrh	r3, [r0, #22]
 801a6bc:	428b      	cmp	r3, r1
 801a6be:	d205      	bcs.n	801a6cc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801a6c0:	4b08      	ldr	r3, [pc, #32]	; (801a6e4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801a6c2:	21d8      	movs	r1, #216	; 0xd8
 801a6c4:	4a08      	ldr	r2, [pc, #32]	; (801a6e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801a6c6:	4809      	ldr	r0, [pc, #36]	; (801a6ec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801a6c8:	f00a ff50 	bl	802556c <__assert_func>
 801a6cc:	8a82      	ldrh	r2, [r0, #20]
 801a6ce:	250a      	movs	r5, #10
 801a6d0:	1a5b      	subs	r3, r3, r1
 801a6d2:	440a      	add	r2, r1
 801a6d4:	82c3      	strh	r3, [r0, #22]
 801a6d6:	fbb2 f4f5 	udiv	r4, r2, r5
 801a6da:	fb05 2214 	mls	r2, r5, r4, r2
 801a6de:	8282      	strh	r2, [r0, #20]
 801a6e0:	bd38      	pop	{r3, r4, r5, pc}
 801a6e2:	bf00      	nop
 801a6e4:	08029161 	.word	0x08029161
 801a6e8:	0802a29a 	.word	0x0802a29a
 801a6ec:	0802917b 	.word	0x0802917b

0801a6f0 <_ZN8touchgfx12TextProvider16unicodeConverterEh>:
 801a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6f4:	f100 061a 	add.w	r6, r0, #26
 801a6f8:	b087      	sub	sp, #28
 801a6fa:	4607      	mov	r7, r0
 801a6fc:	460d      	mov	r5, r1
 801a6fe:	4630      	mov	r0, r6
 801a700:	2100      	movs	r1, #0
 801a702:	f7ff fea7 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a706:	4604      	mov	r4, r0
 801a708:	2800      	cmp	r0, #0
 801a70a:	d03d      	beq.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a70c:	2d01      	cmp	r5, #1
 801a70e:	d112      	bne.n	801a736 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a710:	287f      	cmp	r0, #127	; 0x7f
 801a712:	d810      	bhi.n	801a736 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a714:	283e      	cmp	r0, #62	; 0x3e
 801a716:	f000 8229 	beq.w	801ab6c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x47c>
 801a71a:	d807      	bhi.n	801a72c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3c>
 801a71c:	2829      	cmp	r0, #41	; 0x29
 801a71e:	d037      	beq.n	801a790 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa0>
 801a720:	283c      	cmp	r0, #60	; 0x3c
 801a722:	d030      	beq.n	801a786 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x96>
 801a724:	2828      	cmp	r0, #40	; 0x28
 801a726:	d106      	bne.n	801a736 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a728:	2429      	movs	r4, #41	; 0x29
 801a72a:	e02d      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a72c:	285d      	cmp	r0, #93	; 0x5d
 801a72e:	d033      	beq.n	801a798 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa8>
 801a730:	d823      	bhi.n	801a77a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x8a>
 801a732:	285b      	cmp	r0, #91	; 0x5b
 801a734:	d02e      	beq.n	801a794 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xa4>
 801a736:	2101      	movs	r1, #1
 801a738:	4630      	mov	r0, r6
 801a73a:	f7ff fe8b 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a73e:	2102      	movs	r1, #2
 801a740:	4605      	mov	r5, r0
 801a742:	4630      	mov	r0, r6
 801a744:	f7ff fe86 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a748:	2c20      	cmp	r4, #32
 801a74a:	4680      	mov	r8, r0
 801a74c:	9000      	str	r0, [sp, #0]
 801a74e:	f040 820f 	bne.w	801ab70 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x480>
 801a752:	f2a5 634c 	subw	r3, r5, #1612	; 0x64c
 801a756:	b29b      	uxth	r3, r3
 801a758:	2b04      	cmp	r3, #4
 801a75a:	f240 6351 	movw	r3, #1617	; 0x651
 801a75e:	d81f      	bhi.n	801a7a0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb0>
 801a760:	4298      	cmp	r0, r3
 801a762:	d14c      	bne.n	801a7fe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 801a764:	2102      	movs	r1, #2
 801a766:	4630      	mov	r0, r6
 801a768:	f7ff ffa6 	bl	801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a76c:	f6a5 14ee 	subw	r4, r5, #2542	; 0x9ee
 801a770:	2301      	movs	r3, #1
 801a772:	b2a4      	uxth	r4, r4
 801a774:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a778:	e006      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a77a:	287b      	cmp	r0, #123	; 0x7b
 801a77c:	d00e      	beq.n	801a79c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xac>
 801a77e:	287d      	cmp	r0, #125	; 0x7d
 801a780:	d1d9      	bne.n	801a736 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46>
 801a782:	247b      	movs	r4, #123	; 0x7b
 801a784:	e000      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a786:	243e      	movs	r4, #62	; 0x3e
 801a788:	4620      	mov	r0, r4
 801a78a:	b007      	add	sp, #28
 801a78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a790:	2428      	movs	r4, #40	; 0x28
 801a792:	e7f9      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a794:	245d      	movs	r4, #93	; 0x5d
 801a796:	e7f7      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a798:	245b      	movs	r4, #91	; 0x5b
 801a79a:	e7f5      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a79c:	247d      	movs	r4, #125	; 0x7d
 801a79e:	e7f3      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a7a0:	429d      	cmp	r5, r3
 801a7a2:	d12c      	bne.n	801a7fe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 801a7a4:	f5b0 6fce 	cmp.w	r0, #1648	; 0x670
 801a7a8:	d129      	bne.n	801a7fe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x10e>
 801a7aa:	2102      	movs	r1, #2
 801a7ac:	4630      	mov	r0, r6
 801a7ae:	f7ff ff83 	bl	801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a7b2:	2301      	movs	r3, #1
 801a7b4:	f64f 4463 	movw	r4, #64611	; 0xfc63
 801a7b8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a7bc:	e7e4      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a7be:	f240 63d2 	movw	r3, #1746	; 0x6d2
 801a7c2:	4598      	cmp	r8, r3
 801a7c4:	d12d      	bne.n	801a822 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801a7c6:	2102      	movs	r1, #2
 801a7c8:	4630      	mov	r0, r6
 801a7ca:	f7ff ff75 	bl	801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a7ce:	2301      	movs	r3, #1
 801a7d0:	f64f 54f0 	movw	r4, #65008	; 0xfdf0
 801a7d4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a7d8:	e7d6      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a7da:	f240 6342 	movw	r3, #1602	; 0x642
 801a7de:	429c      	cmp	r4, r3
 801a7e0:	d11f      	bne.n	801a822 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801a7e2:	f240 63d2 	movw	r3, #1746	; 0x6d2
 801a7e6:	4598      	cmp	r8, r3
 801a7e8:	d11b      	bne.n	801a822 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801a7ea:	2102      	movs	r1, #2
 801a7ec:	4630      	mov	r0, r6
 801a7ee:	f7ff ff63 	bl	801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a7f2:	2301      	movs	r3, #1
 801a7f4:	f64f 54f1 	movw	r4, #65009	; 0xfdf1
 801a7f8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a7fc:	e7c4      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a7fe:	f2a5 634b 	subw	r3, r5, #1611	; 0x64b
 801a802:	b29b      	uxth	r3, r3
 801a804:	2b07      	cmp	r3, #7
 801a806:	d80c      	bhi.n	801a822 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801a808:	f505 45f1 	add.w	r5, r5, #30848	; 0x7880
 801a80c:	2101      	movs	r1, #1
 801a80e:	4630      	mov	r0, r6
 801a810:	f7ff ff52 	bl	801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a814:	356d      	adds	r5, #109	; 0x6d
 801a816:	2301      	movs	r3, #1
 801a818:	409d      	lsls	r5, r3
 801a81a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a81e:	b2ac      	uxth	r4, r5
 801a820:	e7b2      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a822:	f46f 61c4 	mvn.w	r1, #1568	; 0x620
 801a826:	1863      	adds	r3, r4, r1
 801a828:	b29b      	uxth	r3, r3
 801a82a:	2b19      	cmp	r3, #25
 801a82c:	d90b      	bls.n	801a846 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x156>
 801a82e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801a832:	18a3      	adds	r3, r4, r2
 801a834:	b29b      	uxth	r3, r3
 801a836:	2b09      	cmp	r3, #9
 801a838:	d905      	bls.n	801a846 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x156>
 801a83a:	f46f 63ce 	mvn.w	r3, #1648	; 0x670
 801a83e:	18e3      	adds	r3, r4, r3
 801a840:	b29b      	uxth	r3, r3
 801a842:	2b62      	cmp	r3, #98	; 0x62
 801a844:	d8a0      	bhi.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a846:	2103      	movs	r1, #3
 801a848:	4630      	mov	r0, r6
 801a84a:	f7ff fe03 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a84e:	f2a4 6327 	subw	r3, r4, #1575	; 0x627
 801a852:	4682      	mov	sl, r0
 801a854:	4683      	mov	fp, r0
 801a856:	b29b      	uxth	r3, r3
 801a858:	2b21      	cmp	r3, #33	; 0x21
 801a85a:	d82c      	bhi.n	801a8b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801a85c:	f2a8 6327 	subw	r3, r8, #1575	; 0x627
 801a860:	b29b      	uxth	r3, r3
 801a862:	2b23      	cmp	r3, #35	; 0x23
 801a864:	d827      	bhi.n	801a8b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801a866:	f2a0 632f 	subw	r3, r0, #1583	; 0x62f
 801a86a:	b29b      	uxth	r3, r3
 801a86c:	2b18      	cmp	r3, #24
 801a86e:	d822      	bhi.n	801a8b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801a870:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
 801a874:	4ab0      	ldr	r2, [pc, #704]	; (801ab38 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x448>)
 801a876:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 801a87a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 801a87e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a882:	0089      	lsls	r1, r1, #2
 801a884:	f5a1 4182 	sub.w	r1, r1, #16640	; 0x4100
 801a888:	391a      	subs	r1, #26
 801a88a:	4419      	add	r1, r3
 801a88c:	2308      	movs	r3, #8
 801a88e:	4401      	add	r1, r0
 801a890:	4638      	mov	r0, r7
 801a892:	b289      	uxth	r1, r1
 801a894:	f7ff fd33 	bl	801a2fe <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801a898:	4681      	mov	r9, r0
 801a89a:	b160      	cbz	r0, 801a8b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801a89c:	8842      	ldrh	r2, [r0, #2]
 801a89e:	42aa      	cmp	r2, r5
 801a8a0:	d109      	bne.n	801a8b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1c6>
 801a8a2:	2103      	movs	r1, #3
 801a8a4:	4630      	mov	r0, r6
 801a8a6:	f7ff ff07 	bl	801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a8aa:	2201      	movs	r2, #1
 801a8ac:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 801a8b0:	f8b9 4000 	ldrh.w	r4, [r9]
 801a8b4:	e768      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801a8b6:	f5a4 63c5 	sub.w	r3, r4, #1576	; 0x628
 801a8ba:	b29b      	uxth	r3, r3
 801a8bc:	2b22      	cmp	r3, #34	; 0x22
 801a8be:	d823      	bhi.n	801a908 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801a8c0:	f2a5 632c 	subw	r3, r5, #1580	; 0x62c
 801a8c4:	b29b      	uxth	r3, r3
 801a8c6:	2b24      	cmp	r3, #36	; 0x24
 801a8c8:	d81e      	bhi.n	801a908 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801a8ca:	f2a8 632c 	subw	r3, r8, #1580	; 0x62c
 801a8ce:	b29b      	uxth	r3, r3
 801a8d0:	2b25      	cmp	r3, #37	; 0x25
 801a8d2:	d819      	bhi.n	801a908 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x218>
 801a8d4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 801a8d8:	4a98      	ldr	r2, [pc, #608]	; (801ab3c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x44c>)
 801a8da:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 801a8de:	4638      	mov	r0, r7
 801a8e0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a8e4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801a8e8:	ebc4 1181 	rsb	r1, r4, r1, lsl #6
 801a8ec:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 801a8f0:	f501 517e 	add.w	r1, r1, #16256	; 0x3f80
 801a8f4:	311c      	adds	r1, #28
 801a8f6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801a8fa:	2362      	movs	r3, #98	; 0x62
 801a8fc:	b289      	uxth	r1, r1
 801a8fe:	f7ff fcfe 	bl	801a2fe <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801a902:	4681      	mov	r9, r0
 801a904:	2800      	cmp	r0, #0
 801a906:	d179      	bne.n	801a9fc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>
 801a908:	f2a5 634b 	subw	r3, r5, #1611	; 0x64b
 801a90c:	b29b      	uxth	r3, r3
 801a90e:	2b0a      	cmp	r3, #10
 801a910:	f240 8147 	bls.w	801aba2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b2>
 801a914:	f240 6374 	movw	r3, #1652	; 0x674
 801a918:	429d      	cmp	r5, r3
 801a91a:	bf0b      	itete	eq
 801a91c:	4643      	moveq	r3, r8
 801a91e:	462b      	movne	r3, r5
 801a920:	46d3      	moveq	fp, sl
 801a922:	46c3      	movne	fp, r8
 801a924:	9300      	str	r3, [sp, #0]
 801a926:	bf0c      	ite	eq
 801a928:	462b      	moveq	r3, r5
 801a92a:	2300      	movne	r3, #0
 801a92c:	9302      	str	r3, [sp, #8]
 801a92e:	f2a4 6326 	subw	r3, r4, #1574	; 0x626
 801a932:	b29b      	uxth	r3, r3
 801a934:	2b24      	cmp	r3, #36	; 0x24
 801a936:	d903      	bls.n	801a940 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x250>
 801a938:	f04f 0800 	mov.w	r8, #0
 801a93c:	46c1      	mov	r9, r8
 801a93e:	e022      	b.n	801a986 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x296>
 801a940:	9b00      	ldr	r3, [sp, #0]
 801a942:	f2a3 6322 	subw	r3, r3, #1570	; 0x622
 801a946:	b29b      	uxth	r3, r3
 801a948:	2bb3      	cmp	r3, #179	; 0xb3
 801a94a:	d8f5      	bhi.n	801a938 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x248>
 801a94c:	f240 6344 	movw	r3, #1604	; 0x644
 801a950:	9a00      	ldr	r2, [sp, #0]
 801a952:	429a      	cmp	r2, r3
 801a954:	d103      	bne.n	801a95e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x26e>
 801a956:	f240 6327 	movw	r3, #1575	; 0x627
 801a95a:	459b      	cmp	fp, r3
 801a95c:	d0ec      	beq.n	801a938 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x248>
 801a95e:	f89d 1000 	ldrb.w	r1, [sp]
 801a962:	23ab      	movs	r3, #171	; 0xab
 801a964:	4a76      	ldr	r2, [pc, #472]	; (801ab40 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x450>)
 801a966:	4638      	mov	r0, r7
 801a968:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 801a96c:	b289      	uxth	r1, r1
 801a96e:	f7ff fcc6 	bl	801a2fe <_ZNK8touchgfx12TextProvider12binarySearchEtPA5_Kti>
 801a972:	f1b0 0900 	subs.w	r9, r0, #0
 801a976:	9b00      	ldr	r3, [sp, #0]
 801a978:	bf1a      	itte	ne
 801a97a:	f04f 0801 	movne.w	r8, #1
 801a97e:	465b      	movne	r3, fp
 801a980:	f04f 0800 	moveq.w	r8, #0
 801a984:	9300      	str	r3, [sp, #0]
 801a986:	9b00      	ldr	r3, [sp, #0]
 801a988:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 801a98c:	f2a3 6222 	subw	r2, r3, #1570	; 0x622
 801a990:	b292      	uxth	r2, r2
 801a992:	2ab1      	cmp	r2, #177	; 0xb1
 801a994:	bf94      	ite	ls
 801a996:	2300      	movls	r3, #0
 801a998:	2301      	movhi	r3, #1
 801a99a:	2ab2      	cmp	r2, #178	; 0xb2
 801a99c:	9301      	str	r3, [sp, #4]
 801a99e:	f081 0301 	eor.w	r3, r1, #1
 801a9a2:	bf34      	ite	cc
 801a9a4:	f04f 0a02 	movcc.w	sl, #2
 801a9a8:	f04f 0a00 	movcs.w	sl, #0
 801a9ac:	9304      	str	r3, [sp, #16]
 801a9ae:	449a      	add	sl, r3
 801a9b0:	f1b9 0f00 	cmp.w	r9, #0
 801a9b4:	f000 80a9 	beq.w	801ab0a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x41a>
 801a9b8:	f839 201a 	ldrh.w	r2, [r9, sl, lsl #1]
 801a9bc:	2a00      	cmp	r2, #0
 801a9be:	f040 8086 	bne.w	801aace <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801a9c2:	f1b8 0f00 	cmp.w	r8, #0
 801a9c6:	f000 8082 	beq.w	801aace <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801a9ca:	4641      	mov	r1, r8
 801a9cc:	4630      	mov	r0, r6
 801a9ce:	f7ff fd41 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a9d2:	f108 0b01 	add.w	fp, r8, #1
 801a9d6:	f240 6274 	movw	r2, #1652	; 0x674
 801a9da:	f2a0 614b 	subw	r1, r0, #1611	; 0x64b
 801a9de:	b289      	uxth	r1, r1
 801a9e0:	290a      	cmp	r1, #10
 801a9e2:	d901      	bls.n	801a9e8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2f8>
 801a9e4:	4290      	cmp	r0, r2
 801a9e6:	d110      	bne.n	801aa0a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x31a>
 801a9e8:	fa1f f18b 	uxth.w	r1, fp
 801a9ec:	4630      	mov	r0, r6
 801a9ee:	9203      	str	r2, [sp, #12]
 801a9f0:	f10b 0b01 	add.w	fp, fp, #1
 801a9f4:	f7ff fd2e 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a9f8:	9a03      	ldr	r2, [sp, #12]
 801a9fa:	e7ee      	b.n	801a9da <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2ea>
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	f8cd a000 	str.w	sl, [sp]
 801aa02:	f04f 0802 	mov.w	r8, #2
 801aa06:	9302      	str	r3, [sp, #8]
 801aa08:	e7bd      	b.n	801a986 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x296>
 801aa0a:	4601      	mov	r1, r0
 801aa0c:	4638      	mov	r0, r7
 801aa0e:	f7ff fc8f 	bl	801a330 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801aa12:	9003      	str	r0, [sp, #12]
 801aa14:	fa1f f18b 	uxth.w	r1, fp
 801aa18:	4630      	mov	r0, r6
 801aa1a:	f7ff fd1b 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801aa1e:	f10b 0b01 	add.w	fp, fp, #1
 801aa22:	f240 6274 	movw	r2, #1652	; 0x674
 801aa26:	f2a0 614b 	subw	r1, r0, #1611	; 0x64b
 801aa2a:	b289      	uxth	r1, r1
 801aa2c:	290a      	cmp	r1, #10
 801aa2e:	d901      	bls.n	801aa34 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x344>
 801aa30:	4290      	cmp	r0, r2
 801aa32:	d109      	bne.n	801aa48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>
 801aa34:	fa1f f18b 	uxth.w	r1, fp
 801aa38:	4630      	mov	r0, r6
 801aa3a:	9205      	str	r2, [sp, #20]
 801aa3c:	f10b 0b01 	add.w	fp, fp, #1
 801aa40:	f7ff fd08 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801aa44:	9a05      	ldr	r2, [sp, #20]
 801aa46:	e7ee      	b.n	801aa26 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x336>
 801aa48:	4601      	mov	r1, r0
 801aa4a:	4638      	mov	r0, r7
 801aa4c:	f7ff fc70 	bl	801a330 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801aa50:	9b03      	ldr	r3, [sp, #12]
 801aa52:	b133      	cbz	r3, 801aa62 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801aa54:	88da      	ldrh	r2, [r3, #6]
 801aa56:	b122      	cbz	r2, 801aa62 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801aa58:	b118      	cbz	r0, 801aa62 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x372>
 801aa5a:	8842      	ldrh	r2, [r0, #2]
 801aa5c:	b9ea      	cbnz	r2, 801aa9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801aa5e:	88c2      	ldrh	r2, [r0, #6]
 801aa60:	b9da      	cbnz	r2, 801aa9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801aa62:	f1ba 0f02 	cmp.w	sl, #2
 801aa66:	d109      	bne.n	801aa7c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x38c>
 801aa68:	f8b9 2000 	ldrh.w	r2, [r9]
 801aa6c:	b1aa      	cbz	r2, 801aa9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801aa6e:	f240 6244 	movw	r2, #1604	; 0x644
 801aa72:	4294      	cmp	r4, r2
 801aa74:	d111      	bne.n	801aa9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801aa76:	2301      	movs	r3, #1
 801aa78:	9301      	str	r3, [sp, #4]
 801aa7a:	e069      	b.n	801ab50 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x460>
 801aa7c:	f1ba 0f03 	cmp.w	sl, #3
 801aa80:	d10b      	bne.n	801aa9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801aa82:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801aa86:	b142      	cbz	r2, 801aa9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801aa88:	f240 6244 	movw	r2, #1604	; 0x644
 801aa8c:	4294      	cmp	r4, r2
 801aa8e:	d104      	bne.n	801aa9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3aa>
 801aa90:	f240 6247 	movw	r2, #1607	; 0x647
 801aa94:	9b00      	ldr	r3, [sp, #0]
 801aa96:	4293      	cmp	r3, r2
 801aa98:	d146      	bne.n	801ab28 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x438>
 801aa9a:	f2a5 6522 	subw	r5, r5, #1570	; 0x622
 801aa9e:	4621      	mov	r1, r4
 801aaa0:	4638      	mov	r0, r7
 801aaa2:	b2ad      	uxth	r5, r5
 801aaa4:	f7ff fc44 	bl	801a330 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801aaa8:	2db1      	cmp	r5, #177	; 0xb1
 801aaaa:	bf8c      	ite	hi
 801aaac:	2200      	movhi	r2, #0
 801aaae:	2202      	movls	r2, #2
 801aab0:	b168      	cbz	r0, 801aace <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801aab2:	9b04      	ldr	r3, [sp, #16]
 801aab4:	441a      	add	r2, r3
 801aab6:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]
 801aaba:	b141      	cbz	r1, 801aace <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801aabc:	2db1      	cmp	r5, #177	; 0xb1
 801aabe:	4692      	mov	sl, r2
 801aac0:	4681      	mov	r9, r0
 801aac2:	f04f 0800 	mov.w	r8, #0
 801aac6:	bf94      	ite	ls
 801aac8:	2300      	movls	r3, #0
 801aaca:	2301      	movhi	r3, #1
 801aacc:	9301      	str	r3, [sp, #4]
 801aace:	f1ba 0f02 	cmp.w	sl, #2
 801aad2:	d122      	bne.n	801ab1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x42a>
 801aad4:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801aad8:	2a00      	cmp	r2, #0
 801aada:	d0cc      	beq.n	801aa76 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x386>
 801aadc:	f839 301a 	ldrh.w	r3, [r9, sl, lsl #1]
 801aae0:	eb09 054a 	add.w	r5, r9, sl, lsl #1
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	f43f ae4f 	beq.w	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aaea:	9b01      	ldr	r3, [sp, #4]
 801aaec:	4641      	mov	r1, r8
 801aaee:	4630      	mov	r0, r6
 801aaf0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aaf4:	f7ff fde0 	bl	801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801aaf8:	9b02      	ldr	r3, [sp, #8]
 801aafa:	b123      	cbz	r3, 801ab06 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x416>
 801aafc:	461a      	mov	r2, r3
 801aafe:	2101      	movs	r1, #1
 801ab00:	4630      	mov	r0, r6
 801ab02:	f7ff fc8d 	bl	801a420 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801ab06:	882c      	ldrh	r4, [r5, #0]
 801ab08:	e63e      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ab0a:	4621      	mov	r1, r4
 801ab0c:	4638      	mov	r0, r7
 801ab0e:	f7ff fc0f 	bl	801a330 <_ZNK8touchgfx12TextProvider21contextualFormForCharEt>
 801ab12:	4681      	mov	r9, r0
 801ab14:	2800      	cmp	r0, #0
 801ab16:	d1da      	bne.n	801aace <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3de>
 801ab18:	e636      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ab1a:	f1ba 0f03 	cmp.w	sl, #3
 801ab1e:	d111      	bne.n	801ab44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x454>
 801ab20:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 801ab24:	2a00      	cmp	r2, #0
 801ab26:	d1d9      	bne.n	801aadc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801ab28:	2301      	movs	r3, #1
 801ab2a:	9301      	str	r3, [sp, #4]
 801ab2c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801ab30:	b172      	cbz	r2, 801ab50 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x460>
 801ab32:	f04f 0a01 	mov.w	sl, #1
 801ab36:	e7d1      	b.n	801aadc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801ab38:	08029dcc 	.word	0x08029dcc
 801ab3c:	080299f8 	.word	0x080299f8
 801ab40:	0802934a 	.word	0x0802934a
 801ab44:	f1ba 0f01 	cmp.w	sl, #1
 801ab48:	d0f0      	beq.n	801ab2c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x43c>
 801ab4a:	f1ba 0f00 	cmp.w	sl, #0
 801ab4e:	d1c5      	bne.n	801aadc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801ab50:	f8b9 2000 	ldrh.w	r2, [r9]
 801ab54:	b93a      	cbnz	r2, 801ab66 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x476>
 801ab56:	f8b9 a002 	ldrh.w	sl, [r9, #2]
 801ab5a:	f11a 0a00 	adds.w	sl, sl, #0
 801ab5e:	bf18      	it	ne
 801ab60:	f04f 0a01 	movne.w	sl, #1
 801ab64:	e7ba      	b.n	801aadc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801ab66:	f04f 0a00 	mov.w	sl, #0
 801ab6a:	e7b7      	b.n	801aadc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ec>
 801ab6c:	243c      	movs	r4, #60	; 0x3c
 801ab6e:	e60b      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801ab70:	f240 6344 	movw	r3, #1604	; 0x644
 801ab74:	429d      	cmp	r5, r3
 801ab76:	f47f ae54 	bne.w	801a822 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x132>
 801ab7a:	f240 6335 	movw	r3, #1589	; 0x635
 801ab7e:	429c      	cmp	r4, r3
 801ab80:	f47f ae2b 	bne.w	801a7da <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xea>
 801ab84:	f240 6349 	movw	r3, #1609	; 0x649
 801ab88:	4598      	cmp	r8, r3
 801ab8a:	f47f ae18 	bne.w	801a7be <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xce>
 801ab8e:	2102      	movs	r1, #2
 801ab90:	4630      	mov	r0, r6
 801ab92:	f7ff fd91 	bl	801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801ab96:	2301      	movs	r3, #1
 801ab98:	f64f 54f9 	movw	r4, #65017	; 0xfdf9
 801ab9c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aba0:	e5f2      	b.n	801a788 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x98>
 801aba2:	9502      	str	r5, [sp, #8]
 801aba4:	e6c3      	b.n	801a92e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x23e>
 801aba6:	bf00      	nop

0801aba8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801aba8:	b538      	push	{r3, r4, r5, lr}
 801abaa:	8ac3      	ldrh	r3, [r0, #22]
 801abac:	2b09      	cmp	r3, #9
 801abae:	d905      	bls.n	801abbc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801abb0:	4b08      	ldr	r3, [pc, #32]	; (801abd4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801abb2:	21f7      	movs	r1, #247	; 0xf7
 801abb4:	4a08      	ldr	r2, [pc, #32]	; (801abd8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801abb6:	4809      	ldr	r0, [pc, #36]	; (801abdc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801abb8:	f00a fcd8 	bl	802556c <__assert_func>
 801abbc:	8a82      	ldrh	r2, [r0, #20]
 801abbe:	250a      	movs	r5, #10
 801abc0:	441a      	add	r2, r3
 801abc2:	3301      	adds	r3, #1
 801abc4:	fbb2 f4f5 	udiv	r4, r2, r5
 801abc8:	fb05 2214 	mls	r2, r5, r4, r2
 801abcc:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801abd0:	82c3      	strh	r3, [r0, #22]
 801abd2:	bd38      	pop	{r3, r4, r5, pc}
 801abd4:	08029155 	.word	0x08029155
 801abd8:	0802a1eb 	.word	0x0802a1eb
 801abdc:	0802917b 	.word	0x0802917b

0801abe0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801abe0:	b538      	push	{r3, r4, r5, lr}
 801abe2:	4604      	mov	r4, r0
 801abe4:	f100 051a 	add.w	r5, r0, #26
 801abe8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801abea:	2b0a      	cmp	r3, #10
 801abec:	d01c      	beq.n	801ac28 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801abee:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801abf0:	b962      	cbnz	r2, 801ac0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801abf2:	f104 051a 	add.w	r5, r4, #26
 801abf6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801abf8:	2b0a      	cmp	r3, #10
 801abfa:	d015      	beq.n	801ac28 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801abfc:	4620      	mov	r0, r4
 801abfe:	f7ff fb52 	bl	801a2a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ac02:	4601      	mov	r1, r0
 801ac04:	4628      	mov	r0, r5
 801ac06:	f7ff ffcf 	bl	801aba8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801ac0a:	e7f4      	b.n	801abf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801ac0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ac0e:	3a01      	subs	r2, #1
 801ac10:	4628      	mov	r0, r5
 801ac12:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801ac16:	3301      	adds	r3, #1
 801ac18:	f003 0301 	and.w	r3, r3, #1
 801ac1c:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801ac1e:	8722      	strh	r2, [r4, #56]	; 0x38
 801ac20:	86e3      	strh	r3, [r4, #54]	; 0x36
 801ac22:	f7ff ffc1 	bl	801aba8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801ac26:	e7df      	b.n	801abe8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801ac28:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ac2c <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	b510      	push	{r4, lr}
 801ac30:	6043      	str	r3, [r0, #4]
 801ac32:	4604      	mov	r4, r0
 801ac34:	60c3      	str	r3, [r0, #12]
 801ac36:	7403      	strb	r3, [r0, #16]
 801ac38:	8603      	strh	r3, [r0, #48]	; 0x30
 801ac3a:	8303      	strh	r3, [r0, #24]
 801ac3c:	8703      	strh	r3, [r0, #56]	; 0x38
 801ac3e:	f7ff ffcf 	bl	801abe0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ac42:	4a0a      	ldr	r2, [pc, #40]	; (801ac6c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801ac44:	6813      	ldr	r3, [r2, #0]
 801ac46:	4611      	mov	r1, r2
 801ac48:	b913      	cbnz	r3, 801ac50 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801ac4a:	6852      	ldr	r2, [r2, #4]
 801ac4c:	07d0      	lsls	r0, r2, #31
 801ac4e:	d50b      	bpl.n	801ac68 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801ac50:	6849      	ldr	r1, [r1, #4]
 801ac52:	104a      	asrs	r2, r1, #1
 801ac54:	07c9      	lsls	r1, r1, #31
 801ac56:	eb04 0002 	add.w	r0, r4, r2
 801ac5a:	bf48      	it	mi
 801ac5c:	58a2      	ldrmi	r2, [r4, r2]
 801ac5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac62:	bf48      	it	mi
 801ac64:	58d3      	ldrmi	r3, [r2, r3]
 801ac66:	4718      	bx	r3
 801ac68:	bd10      	pop	{r4, pc}
 801ac6a:	bf00      	nop
 801ac6c:	20000038 	.word	0x20000038

0801ac70 <_ZN8touchgfx12TextProviderC1Ev>:
 801ac70:	2300      	movs	r3, #0
 801ac72:	2201      	movs	r2, #1
 801ac74:	b510      	push	{r4, lr}
 801ac76:	4604      	mov	r4, r0
 801ac78:	60c3      	str	r3, [r0, #12]
 801ac7a:	7403      	strb	r3, [r0, #16]
 801ac7c:	82c3      	strh	r3, [r0, #22]
 801ac7e:	8303      	strh	r3, [r0, #24]
 801ac80:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801ac82:	8603      	strh	r3, [r0, #48]	; 0x30
 801ac84:	86c3      	strh	r3, [r0, #54]	; 0x36
 801ac86:	8703      	strh	r3, [r0, #56]	; 0x38
 801ac88:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ac8a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801ac8e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801ac92:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801ac96:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801ac9a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801ac9e:	e9c0 3300 	strd	r3, r3, [r0]
 801aca2:	f7ff ffc3 	bl	801ac2c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801aca6:	4620      	mov	r0, r4
 801aca8:	bd10      	pop	{r4, pc}

0801acaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801acaa:	b410      	push	{r4}
 801acac:	6082      	str	r2, [r0, #8]
 801acae:	6001      	str	r1, [r0, #0]
 801acb0:	63c3      	str	r3, [r0, #60]	; 0x3c
 801acb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801acb6:	f7ff bfb9 	b.w	801ac2c <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801acbc <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801acbc:	b508      	push	{r3, lr}
 801acbe:	88c2      	ldrh	r2, [r0, #6]
 801acc0:	440a      	add	r2, r1
 801acc2:	2a02      	cmp	r2, #2
 801acc4:	dd05      	ble.n	801acd2 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801acc6:	4b06      	ldr	r3, [pc, #24]	; (801ace0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801acc8:	21ec      	movs	r1, #236	; 0xec
 801acca:	4a06      	ldr	r2, [pc, #24]	; (801ace4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801accc:	4806      	ldr	r0, [pc, #24]	; (801ace8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801acce:	f00a fc4d 	bl	802556c <__assert_func>
 801acd2:	8883      	ldrh	r3, [r0, #4]
 801acd4:	80c2      	strh	r2, [r0, #6]
 801acd6:	1a59      	subs	r1, r3, r1
 801acd8:	f001 0101 	and.w	r1, r1, #1
 801acdc:	8081      	strh	r1, [r0, #4]
 801acde:	bd08      	pop	{r3, pc}
 801ace0:	080291a7 	.word	0x080291a7
 801ace4:	0802a3f7 	.word	0x0802a3f7
 801ace8:	0802917b 	.word	0x0802917b

0801acec <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801acec:	b508      	push	{r3, lr}
 801acee:	88c3      	ldrh	r3, [r0, #6]
 801acf0:	428b      	cmp	r3, r1
 801acf2:	d805      	bhi.n	801ad00 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801acf4:	4b06      	ldr	r3, [pc, #24]	; (801ad10 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801acf6:	21fd      	movs	r1, #253	; 0xfd
 801acf8:	4a06      	ldr	r2, [pc, #24]	; (801ad14 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801acfa:	4807      	ldr	r0, [pc, #28]	; (801ad18 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801acfc:	f00a fc36 	bl	802556c <__assert_func>
 801ad00:	8883      	ldrh	r3, [r0, #4]
 801ad02:	4419      	add	r1, r3
 801ad04:	f001 0101 	and.w	r1, r1, #1
 801ad08:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801ad0c:	bd08      	pop	{r3, pc}
 801ad0e:	bf00      	nop
 801ad10:	0802916d 	.word	0x0802916d
 801ad14:	0802a54f 	.word	0x0802a54f
 801ad18:	0802917b 	.word	0x0802917b

0801ad1c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ad1c:	b570      	push	{r4, r5, r6, lr}
 801ad1e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801ad20:	4604      	mov	r4, r0
 801ad22:	b92a      	cbnz	r2, 801ad30 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801ad24:	4b12      	ldr	r3, [pc, #72]	; (801ad70 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801ad26:	21de      	movs	r1, #222	; 0xde
 801ad28:	4a12      	ldr	r2, [pc, #72]	; (801ad74 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801ad2a:	4813      	ldr	r0, [pc, #76]	; (801ad78 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801ad2c:	f00a fc1e 	bl	802556c <__assert_func>
 801ad30:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ad32:	260a      	movs	r6, #10
 801ad34:	3a01      	subs	r2, #1
 801ad36:	3412      	adds	r4, #18
 801ad38:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ad3c:	3301      	adds	r3, #1
 801ad3e:	8b4d      	ldrh	r5, [r1, #26]
 801ad40:	8602      	strh	r2, [r0, #48]	; 0x30
 801ad42:	fbb3 f1f6 	udiv	r1, r3, r6
 801ad46:	fb06 3311 	mls	r3, r6, r1, r3
 801ad4a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801ad4c:	f7ff ff48 	bl	801abe0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ad50:	88e3      	ldrh	r3, [r4, #6]
 801ad52:	2101      	movs	r1, #1
 801ad54:	2b02      	cmp	r3, #2
 801ad56:	bf04      	itt	eq
 801ad58:	2301      	moveq	r3, #1
 801ad5a:	80e3      	strheq	r3, [r4, #6]
 801ad5c:	4620      	mov	r0, r4
 801ad5e:	f7ff ffad 	bl	801acbc <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801ad62:	4620      	mov	r0, r4
 801ad64:	462a      	mov	r2, r5
 801ad66:	2100      	movs	r1, #0
 801ad68:	f7ff ffc0 	bl	801acec <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801ad6c:	4628      	mov	r0, r5
 801ad6e:	bd70      	pop	{r4, r5, r6, pc}
 801ad70:	0802914c 	.word	0x0802914c
 801ad74:	0802a140 	.word	0x0802a140
 801ad78:	0802917b 	.word	0x0802917b

0801ad7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ad7c:	428a      	cmp	r2, r1
 801ad7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad82:	4604      	mov	r4, r0
 801ad84:	460e      	mov	r6, r1
 801ad86:	4615      	mov	r5, r2
 801ad88:	469a      	mov	sl, r3
 801ad8a:	d92b      	bls.n	801ade4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801ad8c:	1a57      	subs	r7, r2, r1
 801ad8e:	f04f 0800 	mov.w	r8, #0
 801ad92:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801ad96:	f04f 0b0a 	mov.w	fp, #10
 801ad9a:	b2bf      	uxth	r7, r7
 801ad9c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ad9e:	b92b      	cbnz	r3, 801adac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801ada0:	4b24      	ldr	r3, [pc, #144]	; (801ae34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801ada2:	21e6      	movs	r1, #230	; 0xe6
 801ada4:	4a24      	ldr	r2, [pc, #144]	; (801ae38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801ada6:	4825      	ldr	r0, [pc, #148]	; (801ae3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801ada8:	f00a fbe0 	bl	802556c <__assert_func>
 801adac:	3b01      	subs	r3, #1
 801adae:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801adb0:	2101      	movs	r1, #1
 801adb2:	4648      	mov	r0, r9
 801adb4:	b29b      	uxth	r3, r3
 801adb6:	f108 0801 	add.w	r8, r8, #1
 801adba:	441a      	add	r2, r3
 801adbc:	8623      	strh	r3, [r4, #48]	; 0x30
 801adbe:	fbb2 f3fb 	udiv	r3, r2, fp
 801adc2:	fb0b 2313 	mls	r3, fp, r3, r2
 801adc6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801adca:	8b5a      	ldrh	r2, [r3, #26]
 801adcc:	9201      	str	r2, [sp, #4]
 801adce:	f7ff ff75 	bl	801acbc <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801add2:	9a01      	ldr	r2, [sp, #4]
 801add4:	2100      	movs	r1, #0
 801add6:	4648      	mov	r0, r9
 801add8:	f7ff ff88 	bl	801acec <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801addc:	fa1f f388 	uxth.w	r3, r8
 801ade0:	429f      	cmp	r7, r3
 801ade2:	d8db      	bhi.n	801ad9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801ade4:	f104 071a 	add.w	r7, r4, #26
 801ade8:	4631      	mov	r1, r6
 801adea:	260a      	movs	r6, #10
 801adec:	4638      	mov	r0, r7
 801adee:	f7ff fc63 	bl	801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801adf2:	b1c5      	cbz	r5, 801ae26 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801adf4:	3d01      	subs	r5, #1
 801adf6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801adf8:	b2ad      	uxth	r5, r5
 801adfa:	2b09      	cmp	r3, #9
 801adfc:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801ae00:	d903      	bls.n	801ae0a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801ae02:	4b0f      	ldr	r3, [pc, #60]	; (801ae40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801ae04:	21ec      	movs	r1, #236	; 0xec
 801ae06:	4a0f      	ldr	r2, [pc, #60]	; (801ae44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801ae08:	e7cd      	b.n	801ada6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801ae0a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801ae0c:	3301      	adds	r3, #1
 801ae0e:	3109      	adds	r1, #9
 801ae10:	8623      	strh	r3, [r4, #48]	; 0x30
 801ae12:	fbb1 f0f6 	udiv	r0, r1, r6
 801ae16:	fb06 1110 	mls	r1, r6, r0, r1
 801ae1a:	4638      	mov	r0, r7
 801ae1c:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801ae1e:	2100      	movs	r1, #0
 801ae20:	f7ff fafe 	bl	801a420 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801ae24:	e7e5      	b.n	801adf2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801ae26:	4620      	mov	r0, r4
 801ae28:	b003      	add	sp, #12
 801ae2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae2e:	f7ff bed7 	b.w	801abe0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ae32:	bf00      	nop
 801ae34:	0802914c 	.word	0x0802914c
 801ae38:	08029fc4 	.word	0x08029fc4
 801ae3c:	0802917b 	.word	0x0802917b
 801ae40:	080291a7 	.word	0x080291a7
 801ae44:	08029f3c 	.word	0x08029f3c

0801ae48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ae48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae4c:	4605      	mov	r5, r0
 801ae4e:	4616      	mov	r6, r2
 801ae50:	1c8c      	adds	r4, r1, #2
 801ae52:	8809      	ldrh	r1, [r1, #0]
 801ae54:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ae58:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ae5c:	42b3      	cmp	r3, r6
 801ae5e:	d124      	bne.n	801aeaa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ae60:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ae64:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ae68:	f001 070f 	and.w	r7, r1, #15
 801ae6c:	4652      	mov	r2, sl
 801ae6e:	f8cd 8000 	str.w	r8, [sp]
 801ae72:	464b      	mov	r3, r9
 801ae74:	4621      	mov	r1, r4
 801ae76:	4628      	mov	r0, r5
 801ae78:	f7ff fbe2 	bl	801a640 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ae7c:	4683      	mov	fp, r0
 801ae7e:	b168      	cbz	r0, 801ae9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ae80:	eb0a 0109 	add.w	r1, sl, r9
 801ae84:	463a      	mov	r2, r7
 801ae86:	4628      	mov	r0, r5
 801ae88:	4441      	add	r1, r8
 801ae8a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ae8e:	4649      	mov	r1, r9
 801ae90:	f7ff ff74 	bl	801ad7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ae94:	4658      	mov	r0, fp
 801ae96:	b003      	add	sp, #12
 801ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae9c:	eb07 010a 	add.w	r1, r7, sl
 801aea0:	4449      	add	r1, r9
 801aea2:	4441      	add	r1, r8
 801aea4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801aea8:	e7d2      	b.n	801ae50 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801aeaa:	f04f 0b00 	mov.w	fp, #0
 801aeae:	e7f1      	b.n	801ae94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801aeb0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801aeb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aeb4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801aeb6:	4604      	mov	r4, r0
 801aeb8:	260b      	movs	r6, #11
 801aeba:	f100 091a 	add.w	r9, r0, #26
 801aebe:	886f      	ldrh	r7, [r5, #2]
 801aec0:	087f      	lsrs	r7, r7, #1
 801aec2:	3e01      	subs	r6, #1
 801aec4:	d013      	beq.n	801aeee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801aec6:	2100      	movs	r1, #0
 801aec8:	4648      	mov	r0, r9
 801aeca:	f7ff fac3 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801aece:	462a      	mov	r2, r5
 801aed0:	4680      	mov	r8, r0
 801aed2:	4603      	mov	r3, r0
 801aed4:	4639      	mov	r1, r7
 801aed6:	4620      	mov	r0, r4
 801aed8:	f7ff fa83 	bl	801a3e2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801aedc:	b138      	cbz	r0, 801aeee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801aede:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801aee2:	4642      	mov	r2, r8
 801aee4:	4620      	mov	r0, r4
 801aee6:	f7ff ffaf 	bl	801ae48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801aeea:	2800      	cmp	r0, #0
 801aeec:	d1e9      	bne.n	801aec2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801aeee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801aef4:	4b1e      	ldr	r3, [pc, #120]	; (801af70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801aef6:	b570      	push	{r4, r5, r6, lr}
 801aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aefc:	4604      	mov	r4, r0
 801aefe:	f003 0501 	and.w	r5, r3, #1
 801af02:	b902      	cbnz	r2, 801af06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801af04:	b165      	cbz	r5, 801af20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801af06:	105b      	asrs	r3, r3, #1
 801af08:	f104 061a 	add.w	r6, r4, #26
 801af0c:	18e0      	adds	r0, r4, r3
 801af0e:	b10d      	cbz	r5, 801af14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801af10:	58e3      	ldr	r3, [r4, r3]
 801af12:	589a      	ldr	r2, [r3, r2]
 801af14:	4790      	blx	r2
 801af16:	2100      	movs	r1, #0
 801af18:	4602      	mov	r2, r0
 801af1a:	4630      	mov	r0, r6
 801af1c:	f7ff fa80 	bl	801a420 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801af20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801af22:	b303      	cbz	r3, 801af66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801af24:	f104 051a 	add.w	r5, r4, #26
 801af28:	2100      	movs	r1, #0
 801af2a:	4628      	mov	r0, r5
 801af2c:	f7ff fa92 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801af30:	b1c8      	cbz	r0, 801af66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801af32:	4620      	mov	r0, r4
 801af34:	f7ff ffbc 	bl	801aeb0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801af38:	2101      	movs	r1, #1
 801af3a:	4628      	mov	r0, r5
 801af3c:	f7ff fa8a 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801af40:	f640 133f 	movw	r3, #2367	; 0x93f
 801af44:	4606      	mov	r6, r0
 801af46:	4298      	cmp	r0, r3
 801af48:	d10d      	bne.n	801af66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801af4a:	2100      	movs	r1, #0
 801af4c:	4628      	mov	r0, r5
 801af4e:	f7ff fa81 	bl	801a454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801af52:	2101      	movs	r1, #1
 801af54:	4602      	mov	r2, r0
 801af56:	4628      	mov	r0, r5
 801af58:	f7ff fa62 	bl	801a420 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801af5c:	4632      	mov	r2, r6
 801af5e:	2100      	movs	r1, #0
 801af60:	4628      	mov	r0, r5
 801af62:	f7ff fa5d 	bl	801a420 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801af66:	4620      	mov	r0, r4
 801af68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af6c:	f7ff bed6 	b.w	801ad1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801af70:	20000040 	.word	0x20000040

0801af74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801af74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af76:	4617      	mov	r7, r2
 801af78:	461e      	mov	r6, r3
 801af7a:	4605      	mov	r5, r0
 801af7c:	f7ff ffba 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801af80:	683b      	ldr	r3, [r7, #0]
 801af82:	4604      	mov	r4, r0
 801af84:	4601      	mov	r1, r0
 801af86:	4638      	mov	r0, r7
 801af88:	68db      	ldr	r3, [r3, #12]
 801af8a:	4798      	blx	r3
 801af8c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801af90:	4602      	mov	r2, r0
 801af92:	6030      	str	r0, [r6, #0]
 801af94:	b29b      	uxth	r3, r3
 801af96:	2b7f      	cmp	r3, #127	; 0x7f
 801af98:	d813      	bhi.n	801afc2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801af9a:	4639      	mov	r1, r7
 801af9c:	4628      	mov	r0, r5
 801af9e:	f7ff fa73 	bl	801a488 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801afa2:	6030      	str	r0, [r6, #0]
 801afa4:	6833      	ldr	r3, [r6, #0]
 801afa6:	b143      	cbz	r3, 801afba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801afa8:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801afac:	7a9b      	ldrb	r3, [r3, #10]
 801afae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801afb2:	4313      	orrs	r3, r2
 801afb4:	bf0c      	ite	eq
 801afb6:	2301      	moveq	r3, #1
 801afb8:	2300      	movne	r3, #0
 801afba:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801afbe:	4620      	mov	r0, r4
 801afc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afc2:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d0ec      	beq.n	801afa4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801afca:	f640 1302 	movw	r3, #2306	; 0x902
 801afce:	429c      	cmp	r4, r3
 801afd0:	d1e8      	bne.n	801afa4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801afd2:	4601      	mov	r1, r0
 801afd4:	4628      	mov	r0, r5
 801afd6:	f7ff f9d5 	bl	801a384 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801afda:	e7e2      	b.n	801afa2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801afdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801afdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afe0:	4617      	mov	r7, r2
 801afe2:	461e      	mov	r6, r3
 801afe4:	4605      	mov	r5, r0
 801afe6:	f7ff ff85 	bl	801aef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801afea:	683b      	ldr	r3, [r7, #0]
 801afec:	4604      	mov	r4, r0
 801afee:	4601      	mov	r1, r0
 801aff0:	4638      	mov	r0, r7
 801aff2:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801aff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801affa:	47c0      	blx	r8
 801affc:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801b000:	4602      	mov	r2, r0
 801b002:	6030      	str	r0, [r6, #0]
 801b004:	b29b      	uxth	r3, r3
 801b006:	2b7f      	cmp	r3, #127	; 0x7f
 801b008:	d814      	bhi.n	801b034 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801b00a:	4639      	mov	r1, r7
 801b00c:	4628      	mov	r0, r5
 801b00e:	f7ff fa3b 	bl	801a488 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b012:	6030      	str	r0, [r6, #0]
 801b014:	6833      	ldr	r3, [r6, #0]
 801b016:	b143      	cbz	r3, 801b02a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b018:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801b01c:	7a9b      	ldrb	r3, [r3, #10]
 801b01e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b022:	4313      	orrs	r3, r2
 801b024:	bf0c      	ite	eq
 801b026:	2301      	moveq	r3, #1
 801b028:	2300      	movne	r3, #0
 801b02a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b02e:	4620      	mov	r0, r4
 801b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b034:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d0eb      	beq.n	801b014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801b03c:	f640 1302 	movw	r3, #2306	; 0x902
 801b040:	429c      	cmp	r4, r3
 801b042:	d1e7      	bne.n	801b014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801b044:	4601      	mov	r1, r0
 801b046:	4628      	mov	r0, r5
 801b048:	f7ff f99c 	bl	801a384 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b04c:	e7e1      	b.n	801b012 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801b04e <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b04e:	4602      	mov	r2, r0
 801b050:	b148      	cbz	r0, 801b066 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b052:	2300      	movs	r3, #0
 801b054:	b298      	uxth	r0, r3
 801b056:	3301      	adds	r3, #1
 801b058:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b05c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b060:	2900      	cmp	r1, #0
 801b062:	d1f7      	bne.n	801b054 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b064:	4770      	bx	lr
 801b066:	4770      	bx	lr

0801b068 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801b068:	b140      	cbz	r0, 801b07c <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801b06a:	4602      	mov	r2, r0
 801b06c:	1a13      	subs	r3, r2, r0
 801b06e:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b072:	b29b      	uxth	r3, r3
 801b074:	2900      	cmp	r1, #0
 801b076:	d1f9      	bne.n	801b06c <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801b078:	4618      	mov	r0, r3
 801b07a:	4770      	bx	lr
 801b07c:	4603      	mov	r3, r0
 801b07e:	e7fb      	b.n	801b078 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801b080 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b080:	b530      	push	{r4, r5, lr}
 801b082:	4604      	mov	r4, r0
 801b084:	b159      	cbz	r1, 801b09e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b086:	b148      	cbz	r0, 801b09c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b088:	2300      	movs	r3, #0
 801b08a:	b298      	uxth	r0, r3
 801b08c:	4282      	cmp	r2, r0
 801b08e:	d905      	bls.n	801b09c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b090:	5ccd      	ldrb	r5, [r1, r3]
 801b092:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b096:	3301      	adds	r3, #1
 801b098:	2d00      	cmp	r5, #0
 801b09a:	d1f6      	bne.n	801b08a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b09c:	bd30      	pop	{r4, r5, pc}
 801b09e:	4608      	mov	r0, r1
 801b0a0:	e7fc      	b.n	801b09c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b0a2 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801b0a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0a4:	468c      	mov	ip, r1
 801b0a6:	b08b      	sub	sp, #44	; 0x2c
 801b0a8:	2100      	movs	r1, #0
 801b0aa:	ae01      	add	r6, sp, #4
 801b0ac:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b0b0:	211f      	movs	r1, #31
 801b0b2:	fbb0 f7f3 	udiv	r7, r0, r3
 801b0b6:	fb03 0517 	mls	r5, r3, r7, r0
 801b0ba:	4638      	mov	r0, r7
 801b0bc:	b2ec      	uxtb	r4, r5
 801b0be:	2d09      	cmp	r5, #9
 801b0c0:	bfd4      	ite	le
 801b0c2:	3430      	addle	r4, #48	; 0x30
 801b0c4:	3457      	addgt	r4, #87	; 0x57
 801b0c6:	b2e4      	uxtb	r4, r4
 801b0c8:	558c      	strb	r4, [r1, r6]
 801b0ca:	1e4c      	subs	r4, r1, #1
 801b0cc:	b92f      	cbnz	r7, 801b0da <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801b0ce:	4431      	add	r1, r6
 801b0d0:	4660      	mov	r0, ip
 801b0d2:	f7ff ffd5 	bl	801b080 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b0d6:	b00b      	add	sp, #44	; 0x2c
 801b0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0da:	4621      	mov	r1, r4
 801b0dc:	e7e9      	b.n	801b0b2 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801b0de <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b0de:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0e0:	4607      	mov	r7, r0
 801b0e2:	b08b      	sub	sp, #44	; 0x2c
 801b0e4:	4608      	mov	r0, r1
 801b0e6:	b341      	cbz	r1, 801b13a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b0e8:	1e99      	subs	r1, r3, #2
 801b0ea:	290e      	cmp	r1, #14
 801b0ec:	d825      	bhi.n	801b13a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b0ee:	2100      	movs	r1, #0
 801b0f0:	463c      	mov	r4, r7
 801b0f2:	261f      	movs	r6, #31
 801b0f4:	f10d 0c04 	add.w	ip, sp, #4
 801b0f8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b0fc:	1e71      	subs	r1, r6, #1
 801b0fe:	fb94 fef3 	sdiv	lr, r4, r3
 801b102:	fb03 441e 	mls	r4, r3, lr, r4
 801b106:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b10a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b10e:	b2ec      	uxtb	r4, r5
 801b110:	2d09      	cmp	r5, #9
 801b112:	bfd4      	ite	le
 801b114:	3430      	addle	r4, #48	; 0x30
 801b116:	3457      	addgt	r4, #87	; 0x57
 801b118:	b2e4      	uxtb	r4, r4
 801b11a:	f80c 4006 	strb.w	r4, [ip, r6]
 801b11e:	4674      	mov	r4, lr
 801b120:	b96c      	cbnz	r4, 801b13e <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b122:	2f00      	cmp	r7, #0
 801b124:	da05      	bge.n	801b132 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b126:	ab0a      	add	r3, sp, #40	; 0x28
 801b128:	4419      	add	r1, r3
 801b12a:	232d      	movs	r3, #45	; 0x2d
 801b12c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b130:	1eb1      	subs	r1, r6, #2
 801b132:	3101      	adds	r1, #1
 801b134:	4461      	add	r1, ip
 801b136:	f7ff ffa3 	bl	801b080 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b13a:	b00b      	add	sp, #44	; 0x2c
 801b13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b13e:	460e      	mov	r6, r1
 801b140:	e7dc      	b.n	801b0fc <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b142 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801b142:	b510      	push	{r4, lr}
 801b144:	b158      	cbz	r0, 801b15e <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801b146:	1e82      	subs	r2, r0, #2
 801b148:	210a      	movs	r1, #10
 801b14a:	2000      	movs	r0, #0
 801b14c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b150:	3b30      	subs	r3, #48	; 0x30
 801b152:	b29c      	uxth	r4, r3
 801b154:	2c09      	cmp	r4, #9
 801b156:	d802      	bhi.n	801b15e <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801b158:	fb01 3000 	mla	r0, r1, r0, r3
 801b15c:	e7f6      	b.n	801b14c <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801b15e:	bd10      	pop	{r4, pc}

0801b160 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b164:	b085      	sub	sp, #20
 801b166:	f8d0 8000 	ldr.w	r8, [r0]
 801b16a:	468a      	mov	sl, r1
 801b16c:	461c      	mov	r4, r3
 801b16e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b172:	4681      	mov	r9, r0
 801b174:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b178:	4640      	mov	r0, r8
 801b17a:	9203      	str	r2, [sp, #12]
 801b17c:	9102      	str	r1, [sp, #8]
 801b17e:	9301      	str	r3, [sp, #4]
 801b180:	f7ff ff65 	bl	801b04e <_ZN8touchgfx7Unicode6strlenEPKt>
 801b184:	9a03      	ldr	r2, [sp, #12]
 801b186:	f1ba 0f00 	cmp.w	sl, #0
 801b18a:	bf0c      	ite	eq
 801b18c:	4684      	moveq	ip, r0
 801b18e:	f100 0c01 	addne.w	ip, r0, #1
 801b192:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801b196:	8812      	ldrh	r2, [r2, #0]
 801b198:	fa1f fc8c 	uxth.w	ip, ip
 801b19c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b19e:	2a69      	cmp	r2, #105	; 0x69
 801b1a0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b1a2:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801b1a4:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801b1a8:	d004      	beq.n	801b1b4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b1aa:	d844      	bhi.n	801b236 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801b1ac:	2a58      	cmp	r2, #88	; 0x58
 801b1ae:	d001      	beq.n	801b1b4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b1b0:	2a64      	cmp	r2, #100	; 0x64
 801b1b2:	d14b      	bne.n	801b24c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801b1b4:	b1a4      	cbz	r4, 801b1e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b1b6:	b956      	cbnz	r6, 801b1ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801b1b8:	2801      	cmp	r0, #1
 801b1ba:	d108      	bne.n	801b1ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801b1bc:	f8b8 2000 	ldrh.w	r2, [r8]
 801b1c0:	2a30      	cmp	r2, #48	; 0x30
 801b1c2:	bf02      	ittt	eq
 801b1c4:	f108 0202 	addeq.w	r2, r8, #2
 801b1c8:	4630      	moveq	r0, r6
 801b1ca:	f8c9 2000 	streq.w	r2, [r9]
 801b1ce:	45b4      	cmp	ip, r6
 801b1d0:	da3e      	bge.n	801b250 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801b1d2:	b2b6      	uxth	r6, r6
 801b1d4:	eba6 040c 	sub.w	r4, r6, ip
 801b1d8:	46b4      	mov	ip, r6
 801b1da:	b2a4      	uxth	r4, r4
 801b1dc:	f04f 0b00 	mov.w	fp, #0
 801b1e0:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b1e4:	3a01      	subs	r2, #1
 801b1e6:	b169      	cbz	r1, 801b204 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b1e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b1ea:	458c      	cmp	ip, r1
 801b1ec:	da09      	bge.n	801b202 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801b1ee:	eba1 010c 	sub.w	r1, r1, ip
 801b1f2:	b289      	uxth	r1, r1
 801b1f4:	b933      	cbnz	r3, 801b204 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b1f6:	f1bb 0f00 	cmp.w	fp, #0
 801b1fa:	d02b      	beq.n	801b254 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801b1fc:	b350      	cbz	r0, 801b254 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801b1fe:	440c      	add	r4, r1
 801b200:	b2a4      	uxth	r4, r4
 801b202:	2100      	movs	r1, #0
 801b204:	682b      	ldr	r3, [r5, #0]
 801b206:	4293      	cmp	r3, r2
 801b208:	da07      	bge.n	801b21a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801b20a:	f1ba 0f00 	cmp.w	sl, #0
 801b20e:	d004      	beq.n	801b21a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801b210:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801b214:	682b      	ldr	r3, [r5, #0]
 801b216:	3301      	adds	r3, #1
 801b218:	602b      	str	r3, [r5, #0]
 801b21a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801b21e:	b354      	cbz	r4, 801b276 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b220:	682e      	ldr	r6, [r5, #0]
 801b222:	3c01      	subs	r4, #1
 801b224:	42b2      	cmp	r2, r6
 801b226:	b2a4      	uxth	r4, r4
 801b228:	dd25      	ble.n	801b276 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b22a:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801b22e:	682b      	ldr	r3, [r5, #0]
 801b230:	3301      	adds	r3, #1
 801b232:	602b      	str	r3, [r5, #0]
 801b234:	e7f3      	b.n	801b21e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801b236:	2a73      	cmp	r2, #115	; 0x73
 801b238:	d003      	beq.n	801b242 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801b23a:	2a78      	cmp	r2, #120	; 0x78
 801b23c:	d0ba      	beq.n	801b1b4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b23e:	2a6f      	cmp	r2, #111	; 0x6f
 801b240:	e7b7      	b.n	801b1b2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801b242:	2c00      	cmp	r4, #0
 801b244:	d0cc      	beq.n	801b1e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b246:	42b0      	cmp	r0, r6
 801b248:	dd00      	ble.n	801b24c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801b24a:	b2b0      	uxth	r0, r6
 801b24c:	2400      	movs	r4, #0
 801b24e:	e7c7      	b.n	801b1e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b250:	2400      	movs	r4, #0
 801b252:	e7c3      	b.n	801b1dc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801b254:	2900      	cmp	r1, #0
 801b256:	d0d5      	beq.n	801b204 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b258:	f04f 0c20 	mov.w	ip, #32
 801b25c:	682e      	ldr	r6, [r5, #0]
 801b25e:	2900      	cmp	r1, #0
 801b260:	d0d0      	beq.n	801b204 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b262:	3901      	subs	r1, #1
 801b264:	4296      	cmp	r6, r2
 801b266:	b289      	uxth	r1, r1
 801b268:	dacb      	bge.n	801b202 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801b26a:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801b26e:	682b      	ldr	r3, [r5, #0]
 801b270:	3301      	adds	r3, #1
 801b272:	602b      	str	r3, [r5, #0]
 801b274:	e7f2      	b.n	801b25c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801b276:	b198      	cbz	r0, 801b2a0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b278:	f8d9 3000 	ldr.w	r3, [r9]
 801b27c:	881c      	ldrh	r4, [r3, #0]
 801b27e:	b17c      	cbz	r4, 801b2a0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b280:	682c      	ldr	r4, [r5, #0]
 801b282:	3801      	subs	r0, #1
 801b284:	42a2      	cmp	r2, r4
 801b286:	b280      	uxth	r0, r0
 801b288:	dd0a      	ble.n	801b2a0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b28a:	1c9c      	adds	r4, r3, #2
 801b28c:	f8c9 4000 	str.w	r4, [r9]
 801b290:	881c      	ldrh	r4, [r3, #0]
 801b292:	682b      	ldr	r3, [r5, #0]
 801b294:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801b298:	682b      	ldr	r3, [r5, #0]
 801b29a:	3301      	adds	r3, #1
 801b29c:	602b      	str	r3, [r5, #0]
 801b29e:	e7ea      	b.n	801b276 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b2a0:	2620      	movs	r6, #32
 801b2a2:	b151      	cbz	r1, 801b2ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801b2a4:	6828      	ldr	r0, [r5, #0]
 801b2a6:	3901      	subs	r1, #1
 801b2a8:	4282      	cmp	r2, r0
 801b2aa:	b289      	uxth	r1, r1
 801b2ac:	dd05      	ble.n	801b2ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801b2ae:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801b2b2:	682b      	ldr	r3, [r5, #0]
 801b2b4:	3301      	adds	r3, #1
 801b2b6:	602b      	str	r3, [r5, #0]
 801b2b8:	e7f3      	b.n	801b2a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801b2ba:	b005      	add	sp, #20
 801b2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b2c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801b2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	f04f 0801 	mov.w	r8, #1
 801b2cc:	2000      	movs	r0, #0
 801b2ce:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801b2d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801b2d6:	8008      	strh	r0, [r1, #0]
 801b2d8:	7010      	strb	r0, [r2, #0]
 801b2da:	7018      	strb	r0, [r3, #0]
 801b2dc:	f88c 0000 	strb.w	r0, [ip]
 801b2e0:	f88e 0000 	strb.w	r0, [lr]
 801b2e4:	7030      	strb	r0, [r6, #0]
 801b2e6:	6820      	ldr	r0, [r4, #0]
 801b2e8:	8800      	ldrh	r0, [r0, #0]
 801b2ea:	b190      	cbz	r0, 801b312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801b2ec:	282b      	cmp	r0, #43	; 0x2b
 801b2ee:	d001      	beq.n	801b2f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801b2f0:	2820      	cmp	r0, #32
 801b2f2:	d104      	bne.n	801b2fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801b2f4:	8008      	strh	r0, [r1, #0]
 801b2f6:	6820      	ldr	r0, [r4, #0]
 801b2f8:	3002      	adds	r0, #2
 801b2fa:	6020      	str	r0, [r4, #0]
 801b2fc:	e7f3      	b.n	801b2e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801b2fe:	282d      	cmp	r0, #45	; 0x2d
 801b300:	d102      	bne.n	801b308 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801b302:	f882 8000 	strb.w	r8, [r2]
 801b306:	e7f6      	b.n	801b2f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801b308:	2823      	cmp	r0, #35	; 0x23
 801b30a:	d102      	bne.n	801b312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801b30c:	f883 8000 	strb.w	r8, [r3]
 801b310:	e7f1      	b.n	801b2f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801b312:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b316:	2b09      	cmp	r3, #9
 801b318:	d901      	bls.n	801b31e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801b31a:	282a      	cmp	r0, #42	; 0x2a
 801b31c:	d114      	bne.n	801b348 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801b31e:	2201      	movs	r2, #1
 801b320:	f88e 2000 	strb.w	r2, [lr]
 801b324:	6823      	ldr	r3, [r4, #0]
 801b326:	8819      	ldrh	r1, [r3, #0]
 801b328:	2930      	cmp	r1, #48	; 0x30
 801b32a:	bf02      	ittt	eq
 801b32c:	3302      	addeq	r3, #2
 801b32e:	6023      	streq	r3, [r4, #0]
 801b330:	f88c 2000 	strbeq.w	r2, [ip]
 801b334:	6820      	ldr	r0, [r4, #0]
 801b336:	8803      	ldrh	r3, [r0, #0]
 801b338:	2b2a      	cmp	r3, #42	; 0x2a
 801b33a:	d11e      	bne.n	801b37a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801b33c:	f04f 33ff 	mov.w	r3, #4294967295
 801b340:	603b      	str	r3, [r7, #0]
 801b342:	6823      	ldr	r3, [r4, #0]
 801b344:	3302      	adds	r3, #2
 801b346:	6023      	str	r3, [r4, #0]
 801b348:	6823      	ldr	r3, [r4, #0]
 801b34a:	881b      	ldrh	r3, [r3, #0]
 801b34c:	2b2e      	cmp	r3, #46	; 0x2e
 801b34e:	d112      	bne.n	801b376 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801b350:	2301      	movs	r3, #1
 801b352:	7033      	strb	r3, [r6, #0]
 801b354:	6823      	ldr	r3, [r4, #0]
 801b356:	1c98      	adds	r0, r3, #2
 801b358:	6020      	str	r0, [r4, #0]
 801b35a:	885b      	ldrh	r3, [r3, #2]
 801b35c:	2b2a      	cmp	r3, #42	; 0x2a
 801b35e:	d117      	bne.n	801b390 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801b360:	f04f 33ff 	mov.w	r3, #4294967295
 801b364:	602b      	str	r3, [r5, #0]
 801b366:	6823      	ldr	r3, [r4, #0]
 801b368:	3302      	adds	r3, #2
 801b36a:	6023      	str	r3, [r4, #0]
 801b36c:	682b      	ldr	r3, [r5, #0]
 801b36e:	2b06      	cmp	r3, #6
 801b370:	bfa8      	it	ge
 801b372:	2306      	movge	r3, #6
 801b374:	602b      	str	r3, [r5, #0]
 801b376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b37a:	f7ff fee2 	bl	801b142 <_ZN8touchgfx7Unicode4atoiEPKt>
 801b37e:	6038      	str	r0, [r7, #0]
 801b380:	6823      	ldr	r3, [r4, #0]
 801b382:	881a      	ldrh	r2, [r3, #0]
 801b384:	3a30      	subs	r2, #48	; 0x30
 801b386:	2a09      	cmp	r2, #9
 801b388:	d8de      	bhi.n	801b348 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801b38a:	3302      	adds	r3, #2
 801b38c:	6023      	str	r3, [r4, #0]
 801b38e:	e7f7      	b.n	801b380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801b390:	f7ff fed7 	bl	801b142 <_ZN8touchgfx7Unicode4atoiEPKt>
 801b394:	6028      	str	r0, [r5, #0]
 801b396:	6823      	ldr	r3, [r4, #0]
 801b398:	881a      	ldrh	r2, [r3, #0]
 801b39a:	3a30      	subs	r2, #48	; 0x30
 801b39c:	2a09      	cmp	r2, #9
 801b39e:	d8e5      	bhi.n	801b36c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801b3a0:	3302      	adds	r3, #2
 801b3a2:	6023      	str	r3, [r4, #0]
 801b3a4:	e7f7      	b.n	801b396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801b3a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801b3a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3aa:	b0a2      	sub	sp, #136	; 0x88
 801b3ac:	2500      	movs	r5, #0
 801b3ae:	4606      	mov	r6, r0
 801b3b0:	460f      	mov	r7, r1
 801b3b2:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801b3b6:	9209      	str	r2, [sp, #36]	; 0x24
 801b3b8:	4629      	mov	r1, r5
 801b3ba:	2242      	movs	r2, #66	; 0x42
 801b3bc:	4640      	mov	r0, r8
 801b3be:	461c      	mov	r4, r3
 801b3c0:	950d      	str	r5, [sp, #52]	; 0x34
 801b3c2:	f7fe fb82 	bl	8019aca <_ZN8touchgfx6memsetEPvhm>
 801b3c6:	b30e      	cbz	r6, 801b40c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801b3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3ca:	b1f3      	cbz	r3, 801b40a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801b3cc:	f107 3aff 	add.w	sl, r7, #4294967295
 801b3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b3d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b3d4:	8812      	ldrh	r2, [r2, #0]
 801b3d6:	2a00      	cmp	r2, #0
 801b3d8:	f000 80b3 	beq.w	801b542 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801b3dc:	459a      	cmp	sl, r3
 801b3de:	f340 80b0 	ble.w	801b542 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801b3e2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b3e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b3e8:	f8b9 2000 	ldrh.w	r2, [r9]
 801b3ec:	2a00      	cmp	r2, #0
 801b3ee:	d0ef      	beq.n	801b3d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b3f0:	2a25      	cmp	r2, #37	; 0x25
 801b3f2:	f000 80aa 	beq.w	801b54a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801b3f6:	459a      	cmp	sl, r3
 801b3f8:	ddea      	ble.n	801b3d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b3fa:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b3fe:	f109 0202 	add.w	r2, r9, #2
 801b402:	3301      	adds	r3, #1
 801b404:	9209      	str	r2, [sp, #36]	; 0x24
 801b406:	930d      	str	r3, [sp, #52]	; 0x34
 801b408:	e7eb      	b.n	801b3e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801b40a:	8033      	strh	r3, [r6, #0]
 801b40c:	4630      	mov	r0, r6
 801b40e:	b022      	add	sp, #136	; 0x88
 801b410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b414:	3b63      	subs	r3, #99	; 0x63
 801b416:	2b01      	cmp	r3, #1
 801b418:	f200 80df 	bhi.w	801b5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801b41c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801b420:	8813      	ldrh	r3, [r2, #0]
 801b422:	2b69      	cmp	r3, #105	; 0x69
 801b424:	d058      	beq.n	801b4d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801b426:	d81b      	bhi.n	801b460 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801b428:	2b63      	cmp	r3, #99	; 0x63
 801b42a:	d02e      	beq.n	801b48a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801b42c:	2b64      	cmp	r3, #100	; 0x64
 801b42e:	d053      	beq.n	801b4d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801b430:	2b58      	cmp	r3, #88	; 0x58
 801b432:	d06f      	beq.n	801b514 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801b434:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801b438:	46a1      	mov	r9, r4
 801b43a:	e02d      	b.n	801b498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b43c:	2b73      	cmp	r3, #115	; 0x73
 801b43e:	d0ed      	beq.n	801b41c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b440:	d803      	bhi.n	801b44a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801b442:	2b6f      	cmp	r3, #111	; 0x6f
 801b444:	f040 80c9 	bne.w	801b5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801b448:	e7e8      	b.n	801b41c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b44a:	2b75      	cmp	r3, #117	; 0x75
 801b44c:	d0e6      	beq.n	801b41c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b44e:	2b78      	cmp	r3, #120	; 0x78
 801b450:	e7f8      	b.n	801b444 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801b452:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b454:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b45a:	3302      	adds	r3, #2
 801b45c:	9309      	str	r3, [sp, #36]	; 0x24
 801b45e:	e7b7      	b.n	801b3d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b460:	2b73      	cmp	r3, #115	; 0x73
 801b462:	d034      	beq.n	801b4ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801b464:	d807      	bhi.n	801b476 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801b466:	2b6f      	cmp	r3, #111	; 0x6f
 801b468:	d1e4      	bne.n	801b434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801b46a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b46c:	f104 0904 	add.w	r9, r4, #4
 801b470:	2308      	movs	r3, #8
 801b472:	1aba      	subs	r2, r7, r2
 801b474:	e048      	b.n	801b508 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801b476:	2b75      	cmp	r3, #117	; 0x75
 801b478:	d041      	beq.n	801b4fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801b47a:	2b78      	cmp	r3, #120	; 0x78
 801b47c:	d1da      	bne.n	801b434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801b47e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b480:	f104 0904 	add.w	r9, r4, #4
 801b484:	2310      	movs	r3, #16
 801b486:	1aba      	subs	r2, r7, r2
 801b488:	e03e      	b.n	801b508 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801b48a:	7823      	ldrb	r3, [r4, #0]
 801b48c:	f104 0904 	add.w	r9, r4, #4
 801b490:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801b494:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b498:	aa0d      	add	r2, sp, #52	; 0x34
 801b49a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b49e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b4a2:	a810      	add	r0, sp, #64	; 0x40
 801b4a4:	9205      	str	r2, [sp, #20]
 801b4a6:	464c      	mov	r4, r9
 801b4a8:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801b4ac:	9204      	str	r2, [sp, #16]
 801b4ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b4b0:	9203      	str	r2, [sp, #12]
 801b4b2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801b4b6:	9202      	str	r2, [sp, #8]
 801b4b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b4ba:	9201      	str	r2, [sp, #4]
 801b4bc:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801b4c0:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801b4c4:	9200      	str	r2, [sp, #0]
 801b4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4c8:	f7ff fe4a 	bl	801b160 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801b4cc:	e7c4      	b.n	801b458 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801b4ce:	f104 0904 	add.w	r9, r4, #4
 801b4d2:	6823      	ldr	r3, [r4, #0]
 801b4d4:	9310      	str	r3, [sp, #64]	; 0x40
 801b4d6:	e7df      	b.n	801b498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b4d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b4da:	230a      	movs	r3, #10
 801b4dc:	4641      	mov	r1, r8
 801b4de:	6820      	ldr	r0, [r4, #0]
 801b4e0:	1aba      	subs	r2, r7, r2
 801b4e2:	f104 0904 	add.w	r9, r4, #4
 801b4e6:	b292      	uxth	r2, r2
 801b4e8:	f7ff fdf9 	bl	801b0de <_ZN8touchgfx7Unicode4itoaElPtti>
 801b4ec:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b4f0:	2b2d      	cmp	r3, #45	; 0x2d
 801b4f2:	d1d1      	bne.n	801b498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b4f4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b4f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4fa:	3302      	adds	r3, #2
 801b4fc:	e7ea      	b.n	801b4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801b4fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b500:	f104 0904 	add.w	r9, r4, #4
 801b504:	230a      	movs	r3, #10
 801b506:	1aba      	subs	r2, r7, r2
 801b508:	b292      	uxth	r2, r2
 801b50a:	4641      	mov	r1, r8
 801b50c:	6820      	ldr	r0, [r4, #0]
 801b50e:	f7ff fdc8 	bl	801b0a2 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b512:	e7c1      	b.n	801b498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b514:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b516:	2310      	movs	r3, #16
 801b518:	4641      	mov	r1, r8
 801b51a:	6820      	ldr	r0, [r4, #0]
 801b51c:	1aba      	subs	r2, r7, r2
 801b51e:	f104 0904 	add.w	r9, r4, #4
 801b522:	b292      	uxth	r2, r2
 801b524:	f7ff fdbd 	bl	801b0a2 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b528:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801b52c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b530:	2b00      	cmp	r3, #0
 801b532:	d0b1      	beq.n	801b498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b534:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801b538:	2919      	cmp	r1, #25
 801b53a:	d8f7      	bhi.n	801b52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801b53c:	3b20      	subs	r3, #32
 801b53e:	8013      	strh	r3, [r2, #0]
 801b540:	e7f4      	b.n	801b52c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801b542:	2200      	movs	r2, #0
 801b544:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b548:	e760      	b.n	801b40c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801b54a:	459a      	cmp	sl, r3
 801b54c:	f77f af40 	ble.w	801b3d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b550:	f109 0302 	add.w	r3, r9, #2
 801b554:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801b558:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801b55c:	a809      	add	r0, sp, #36	; 0x24
 801b55e:	9309      	str	r3, [sp, #36]	; 0x24
 801b560:	ab0f      	add	r3, sp, #60	; 0x3c
 801b562:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801b566:	9304      	str	r3, [sp, #16]
 801b568:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801b56c:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801b570:	9303      	str	r3, [sp, #12]
 801b572:	ab0e      	add	r3, sp, #56	; 0x38
 801b574:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801b578:	9302      	str	r3, [sp, #8]
 801b57a:	ab0c      	add	r3, sp, #48	; 0x30
 801b57c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801b580:	9301      	str	r3, [sp, #4]
 801b582:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801b586:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801b58a:	9300      	str	r3, [sp, #0]
 801b58c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801b590:	950e      	str	r5, [sp, #56]	; 0x38
 801b592:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801b596:	950f      	str	r5, [sp, #60]	; 0x3c
 801b598:	f7ff fe92 	bl	801b2c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801b59c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	bfbf      	itttt	lt
 801b5a4:	6823      	ldrlt	r3, [r4, #0]
 801b5a6:	3404      	addlt	r4, #4
 801b5a8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b5ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b5ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	bfbf      	itttt	lt
 801b5b4:	6823      	ldrlt	r3, [r4, #0]
 801b5b6:	3404      	addlt	r4, #4
 801b5b8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b5bc:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801b5be:	8813      	ldrh	r3, [r2, #0]
 801b5c0:	2b69      	cmp	r3, #105	; 0x69
 801b5c2:	f43f af2b 	beq.w	801b41c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b5c6:	f63f af39 	bhi.w	801b43c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801b5ca:	2b58      	cmp	r3, #88	; 0x58
 801b5cc:	f43f af26 	beq.w	801b41c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b5d0:	f63f af20 	bhi.w	801b414 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801b5d4:	2b25      	cmp	r3, #37	; 0x25
 801b5d6:	f43f af3c 	beq.w	801b452 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801b5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b5dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b5e0:	f8b9 2000 	ldrh.w	r2, [r9]
 801b5e4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b5e8:	3301      	adds	r3, #1
 801b5ea:	930d      	str	r3, [sp, #52]	; 0x34
 801b5ec:	e734      	b.n	801b458 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801b5f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5f2:	4605      	mov	r5, r0
 801b5f4:	b0a1      	sub	sp, #132	; 0x84
 801b5f6:	4610      	mov	r0, r2
 801b5f8:	460e      	mov	r6, r1
 801b5fa:	4614      	mov	r4, r2
 801b5fc:	461f      	mov	r7, r3
 801b5fe:	f7ff fd33 	bl	801b068 <_ZN8touchgfx7Unicode6strlenEPKc>
 801b602:	283f      	cmp	r0, #63	; 0x3f
 801b604:	d906      	bls.n	801b614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801b606:	4b0a      	ldr	r3, [pc, #40]	; (801b630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801b608:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801b60c:	4a09      	ldr	r2, [pc, #36]	; (801b634 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801b60e:	480a      	ldr	r0, [pc, #40]	; (801b638 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801b610:	f009 ffac 	bl	802556c <__assert_func>
 801b614:	4621      	mov	r1, r4
 801b616:	2240      	movs	r2, #64	; 0x40
 801b618:	4668      	mov	r0, sp
 801b61a:	f7ff fd31 	bl	801b080 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b61e:	463b      	mov	r3, r7
 801b620:	466a      	mov	r2, sp
 801b622:	4631      	mov	r1, r6
 801b624:	4628      	mov	r0, r5
 801b626:	f7ff febe 	bl	801b3a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801b62a:	b021      	add	sp, #132	; 0x84
 801b62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b62e:	bf00      	nop
 801b630:	0802a627 	.word	0x0802a627
 801b634:	0802a6f9 	.word	0x0802a6f9
 801b638:	0802a644 	.word	0x0802a644

0801b63c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b63c:	b40c      	push	{r2, r3}
 801b63e:	b507      	push	{r0, r1, r2, lr}
 801b640:	ab04      	add	r3, sp, #16
 801b642:	f853 2b04 	ldr.w	r2, [r3], #4
 801b646:	9301      	str	r3, [sp, #4]
 801b648:	f7ff ffd2 	bl	801b5f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b64c:	b003      	add	sp, #12
 801b64e:	f85d eb04 	ldr.w	lr, [sp], #4
 801b652:	b002      	add	sp, #8
 801b654:	4770      	bx	lr
	...

0801b658 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b65c:	b0c3      	sub	sp, #268	; 0x10c
 801b65e:	2400      	movs	r4, #0
 801b660:	4606      	mov	r6, r0
 801b662:	4689      	mov	r9, r1
 801b664:	af10      	add	r7, sp, #64	; 0x40
 801b666:	9209      	str	r2, [sp, #36]	; 0x24
 801b668:	4621      	mov	r1, r4
 801b66a:	22c8      	movs	r2, #200	; 0xc8
 801b66c:	4638      	mov	r0, r7
 801b66e:	469a      	mov	sl, r3
 801b670:	940c      	str	r4, [sp, #48]	; 0x30
 801b672:	f7fe fa2a 	bl	8019aca <_ZN8touchgfx6memsetEPvhm>
 801b676:	b116      	cbz	r6, 801b67e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801b678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b67a:	b923      	cbnz	r3, 801b686 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801b67c:	8033      	strh	r3, [r6, #0]
 801b67e:	4630      	mov	r0, r6
 801b680:	b043      	add	sp, #268	; 0x10c
 801b682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b686:	f109 3bff 	add.w	fp, r9, #4294967295
 801b68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b68c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b68e:	8812      	ldrh	r2, [r2, #0]
 801b690:	2a00      	cmp	r2, #0
 801b692:	f000 80d1 	beq.w	801b838 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801b696:	459b      	cmp	fp, r3
 801b698:	f340 80ce 	ble.w	801b838 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801b69c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801b69e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b6a0:	882a      	ldrh	r2, [r5, #0]
 801b6a2:	2a00      	cmp	r2, #0
 801b6a4:	d0f1      	beq.n	801b68a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b6a6:	2a25      	cmp	r2, #37	; 0x25
 801b6a8:	f000 80ca 	beq.w	801b840 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801b6ac:	459b      	cmp	fp, r3
 801b6ae:	ddec      	ble.n	801b68a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b6b0:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b6b4:	3502      	adds	r5, #2
 801b6b6:	3301      	adds	r3, #1
 801b6b8:	9509      	str	r5, [sp, #36]	; 0x24
 801b6ba:	930c      	str	r3, [sp, #48]	; 0x30
 801b6bc:	e7ee      	b.n	801b69c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801b6be:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b6c2:	3202      	adds	r2, #2
 801b6c4:	920c      	str	r2, [sp, #48]	; 0x30
 801b6c6:	e0ac      	b.n	801b822 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801b6c8:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b6cc:	970f      	str	r7, [sp, #60]	; 0x3c
 801b6ce:	3401      	adds	r4, #1
 801b6d0:	edd3 7a00 	vldr	s15, [r3]
 801b6d4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b6d8:	b923      	cbnz	r3, 801b6e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801b6da:	2301      	movs	r3, #1
 801b6dc:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b6e0:	2303      	movs	r3, #3
 801b6e2:	930e      	str	r3, [sp, #56]	; 0x38
 801b6e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b6e8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b6ea:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801b6ee:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801b8ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801b6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6f6:	bf42      	ittt	mi
 801b6f8:	232d      	movmi	r3, #45	; 0x2d
 801b6fa:	eef1 7a67 	vnegmi.f32	s15, s15
 801b6fe:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801b702:	2300      	movs	r3, #0
 801b704:	4298      	cmp	r0, r3
 801b706:	dd03      	ble.n	801b710 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801b708:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b70c:	3301      	adds	r3, #1
 801b70e:	e7f9      	b.n	801b704 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801b710:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b718:	eeb0 7a67 	vmov.f32	s14, s15
 801b71c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b724:	da26      	bge.n	801b774 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801b726:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801b72a:	eba9 0202 	sub.w	r2, r9, r2
 801b72e:	2100      	movs	r1, #0
 801b730:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b734:	b28d      	uxth	r5, r1
 801b736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b73a:	db21      	blt.n	801b780 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801b73c:	1a53      	subs	r3, r2, r1
 801b73e:	2b00      	cmp	r3, #0
 801b740:	dd1e      	ble.n	801b780 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801b742:	2963      	cmp	r1, #99	; 0x63
 801b744:	d01b      	beq.n	801b77e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801b746:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b74a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801b74e:	ee17 3a10 	vmov	r3, s14
 801b752:	2b09      	cmp	r3, #9
 801b754:	bfa8      	it	ge
 801b756:	2309      	movge	r3, #9
 801b758:	ee07 3a10 	vmov	s14, r3
 801b75c:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801b760:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b764:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801b768:	3101      	adds	r1, #1
 801b76a:	eee7 7a66 	vfms.f32	s15, s14, s13
 801b76e:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801b772:	e7dd      	b.n	801b730 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801b774:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b778:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b77c:	e7ce      	b.n	801b71c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801b77e:	460d      	mov	r5, r1
 801b780:	2a63      	cmp	r2, #99	; 0x63
 801b782:	bfd4      	ite	le
 801b784:	ebc5 0202 	rsble	r2, r5, r2
 801b788:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801b78c:	2a00      	cmp	r2, #0
 801b78e:	dd4e      	ble.n	801b82e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801b790:	4603      	mov	r3, r0
 801b792:	f04f 0801 	mov.w	r8, #1
 801b796:	2b00      	cmp	r3, #0
 801b798:	dd0e      	ble.n	801b7b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801b79a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b79e:	210a      	movs	r1, #10
 801b7a0:	3b01      	subs	r3, #1
 801b7a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b7a6:	ee17 ca10 	vmov	ip, s14
 801b7aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b7ae:	fb01 c808 	mla	r8, r1, r8, ip
 801b7b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b7b6:	e7ee      	b.n	801b796 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801b7b8:	2800      	cmp	r0, #0
 801b7ba:	f100 33ff 	add.w	r3, r0, #4294967295
 801b7be:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801b7c2:	bfac      	ite	ge
 801b7c4:	1a18      	subge	r0, r3, r0
 801b7c6:	4618      	movlt	r0, r3
 801b7c8:	b292      	uxth	r2, r2
 801b7ca:	230a      	movs	r3, #10
 801b7cc:	900e      	str	r0, [sp, #56]	; 0x38
 801b7ce:	1979      	adds	r1, r7, r5
 801b7d0:	4640      	mov	r0, r8
 801b7d2:	f7ff fc84 	bl	801b0de <_ZN8touchgfx7Unicode4itoaElPtti>
 801b7d6:	f1b8 0f01 	cmp.w	r8, #1
 801b7da:	dc26      	bgt.n	801b82a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801b7dc:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	bf0c      	ite	eq
 801b7e4:	2300      	moveq	r3, #0
 801b7e6:	232e      	movne	r3, #46	; 0x2e
 801b7e8:	aa42      	add	r2, sp, #264	; 0x108
 801b7ea:	4415      	add	r5, r2
 801b7ec:	aa0c      	add	r2, sp, #48	; 0x30
 801b7ee:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801b7f2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b7f6:	a80f      	add	r0, sp, #60	; 0x3c
 801b7f8:	9205      	str	r2, [sp, #20]
 801b7fa:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801b7fe:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b802:	9204      	str	r2, [sp, #16]
 801b804:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b806:	9203      	str	r2, [sp, #12]
 801b808:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801b80c:	9202      	str	r2, [sp, #8]
 801b80e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b810:	9201      	str	r2, [sp, #4]
 801b812:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801b816:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801b81a:	9200      	str	r2, [sp, #0]
 801b81c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b81e:	f7ff fc9f 	bl	801b160 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801b822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b824:	3302      	adds	r3, #2
 801b826:	9309      	str	r3, [sp, #36]	; 0x24
 801b828:	e72f      	b.n	801b68a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b82a:	232e      	movs	r3, #46	; 0x2e
 801b82c:	e7dc      	b.n	801b7e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801b82e:	ab42      	add	r3, sp, #264	; 0x108
 801b830:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801b834:	2300      	movs	r3, #0
 801b836:	e7d9      	b.n	801b7ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801b838:	2200      	movs	r2, #0
 801b83a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b83e:	e71e      	b.n	801b67e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801b840:	459b      	cmp	fp, r3
 801b842:	f77f af22 	ble.w	801b68a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b846:	2300      	movs	r3, #0
 801b848:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801b84c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801b850:	a809      	add	r0, sp, #36	; 0x24
 801b852:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b85a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b85e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801b862:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801b866:	930d      	str	r3, [sp, #52]	; 0x34
 801b868:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b86c:	930e      	str	r3, [sp, #56]	; 0x38
 801b86e:	1cab      	adds	r3, r5, #2
 801b870:	9309      	str	r3, [sp, #36]	; 0x24
 801b872:	ab0e      	add	r3, sp, #56	; 0x38
 801b874:	9304      	str	r3, [sp, #16]
 801b876:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801b87a:	9303      	str	r3, [sp, #12]
 801b87c:	ab0d      	add	r3, sp, #52	; 0x34
 801b87e:	9302      	str	r3, [sp, #8]
 801b880:	ab0b      	add	r3, sp, #44	; 0x2c
 801b882:	9301      	str	r3, [sp, #4]
 801b884:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801b888:	9300      	str	r3, [sp, #0]
 801b88a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801b88e:	f7ff fd17 	bl	801b2c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801b892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b894:	2b00      	cmp	r3, #0
 801b896:	da0b      	bge.n	801b8b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801b898:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b89c:	3401      	adds	r4, #1
 801b89e:	edd3 7a00 	vldr	s15, [r3]
 801b8a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b8a6:	ee17 3a90 	vmov	r3, s15
 801b8aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8ae:	930d      	str	r3, [sp, #52]	; 0x34
 801b8b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	da0b      	bge.n	801b8ce <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801b8b6:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b8ba:	3401      	adds	r4, #1
 801b8bc:	edd3 7a00 	vldr	s15, [r3]
 801b8c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b8c4:	ee17 3a90 	vmov	r3, s15
 801b8c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8cc:	930e      	str	r3, [sp, #56]	; 0x38
 801b8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b8d2:	881b      	ldrh	r3, [r3, #0]
 801b8d4:	2b25      	cmp	r3, #37	; 0x25
 801b8d6:	f43f aef2 	beq.w	801b6be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801b8da:	2b66      	cmp	r3, #102	; 0x66
 801b8dc:	f43f aef4 	beq.w	801b6c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801b8e0:	9509      	str	r5, [sp, #36]	; 0x24
 801b8e2:	882b      	ldrh	r3, [r5, #0]
 801b8e4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b8e8:	3201      	adds	r2, #1
 801b8ea:	e6eb      	b.n	801b6c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801b8ec:	3f000002 	.word	0x3f000002

0801b8f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801b8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8f2:	4605      	mov	r5, r0
 801b8f4:	b0a1      	sub	sp, #132	; 0x84
 801b8f6:	4610      	mov	r0, r2
 801b8f8:	460e      	mov	r6, r1
 801b8fa:	4614      	mov	r4, r2
 801b8fc:	461f      	mov	r7, r3
 801b8fe:	f7ff fbb3 	bl	801b068 <_ZN8touchgfx7Unicode6strlenEPKc>
 801b902:	283f      	cmp	r0, #63	; 0x3f
 801b904:	d906      	bls.n	801b914 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801b906:	4b0a      	ldr	r3, [pc, #40]	; (801b930 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801b908:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801b90c:	4a09      	ldr	r2, [pc, #36]	; (801b934 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801b90e:	480a      	ldr	r0, [pc, #40]	; (801b938 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801b910:	f009 fe2c 	bl	802556c <__assert_func>
 801b914:	4621      	mov	r1, r4
 801b916:	2240      	movs	r2, #64	; 0x40
 801b918:	4668      	mov	r0, sp
 801b91a:	f7ff fbb1 	bl	801b080 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b91e:	463b      	mov	r3, r7
 801b920:	466a      	mov	r2, sp
 801b922:	4631      	mov	r1, r6
 801b924:	4628      	mov	r0, r5
 801b926:	f7ff fe97 	bl	801b658 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801b92a:	b021      	add	sp, #132	; 0x84
 801b92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b92e:	bf00      	nop
 801b930:	0802a627 	.word	0x0802a627
 801b934:	0802a66a 	.word	0x0802a66a
 801b938:	0802a644 	.word	0x0802a644

0801b93c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b93c:	4b01      	ldr	r3, [pc, #4]	; (801b944 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b93e:	6018      	str	r0, [r3, #0]
 801b940:	4770      	bx	lr
 801b942:	bf00      	nop
 801b944:	2000bc30 	.word	0x2000bc30

0801b948 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b948:	4b07      	ldr	r3, [pc, #28]	; (801b968 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801b94a:	881a      	ldrh	r2, [r3, #0]
 801b94c:	4282      	cmp	r2, r0
 801b94e:	d809      	bhi.n	801b964 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b950:	4b06      	ldr	r3, [pc, #24]	; (801b96c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801b952:	881b      	ldrh	r3, [r3, #0]
 801b954:	4413      	add	r3, r2
 801b956:	4298      	cmp	r0, r3
 801b958:	da04      	bge.n	801b964 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b95a:	4b05      	ldr	r3, [pc, #20]	; (801b970 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b962:	4770      	bx	lr
 801b964:	2000      	movs	r0, #0
 801b966:	4770      	bx	lr
 801b968:	2000bc50 	.word	0x2000bc50
 801b96c:	2000bc54 	.word	0x2000bc54
 801b970:	2000bc34 	.word	0x2000bc34

0801b974 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b978:	4d26      	ldr	r5, [pc, #152]	; (801ba14 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b97a:	682b      	ldr	r3, [r5, #0]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d046      	beq.n	801ba0e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b980:	4a25      	ldr	r2, [pc, #148]	; (801ba18 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b982:	4f26      	ldr	r7, [pc, #152]	; (801ba1c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b984:	8810      	ldrh	r0, [r2, #0]
 801b986:	883c      	ldrh	r4, [r7, #0]
 801b988:	4e25      	ldr	r6, [pc, #148]	; (801ba20 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b98a:	4420      	add	r0, r4
 801b98c:	1c42      	adds	r2, r0, #1
 801b98e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801b992:	f022 0201 	bic.w	r2, r2, #1
 801b996:	0412      	lsls	r2, r2, #16
 801b998:	0c12      	lsrs	r2, r2, #16
 801b99a:	0051      	lsls	r1, r2, #1
 801b99c:	220e      	movs	r2, #14
 801b99e:	eb08 0e01 	add.w	lr, r8, r1
 801b9a2:	fb02 fc04 	mul.w	ip, r2, r4
 801b9a6:	eb03 0208 	add.w	r2, r3, r8
 801b9aa:	4c1e      	ldr	r4, [pc, #120]	; (801ba24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b9ac:	6022      	str	r2, [r4, #0]
 801b9ae:	eb03 020e 	add.w	r2, r3, lr
 801b9b2:	44e6      	add	lr, ip
 801b9b4:	6032      	str	r2, [r6, #0]
 801b9b6:	4473      	add	r3, lr
 801b9b8:	4a1b      	ldr	r2, [pc, #108]	; (801ba28 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b9ba:	6013      	str	r3, [r2, #0]
 801b9bc:	2300      	movs	r3, #0
 801b9be:	4a1b      	ldr	r2, [pc, #108]	; (801ba2c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b9c0:	8013      	strh	r3, [r2, #0]
 801b9c2:	4a1b      	ldr	r2, [pc, #108]	; (801ba30 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b9c4:	6812      	ldr	r2, [r2, #0]
 801b9c6:	eba2 0208 	sub.w	r2, r2, r8
 801b9ca:	1a52      	subs	r2, r2, r1
 801b9cc:	4919      	ldr	r1, [pc, #100]	; (801ba34 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b9ce:	eba2 020c 	sub.w	r2, r2, ip
 801b9d2:	469c      	mov	ip, r3
 801b9d4:	600a      	str	r2, [r1, #0]
 801b9d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b9da:	4a17      	ldr	r2, [pc, #92]	; (801ba38 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b9dc:	8013      	strh	r3, [r2, #0]
 801b9de:	4283      	cmp	r3, r0
 801b9e0:	d10d      	bne.n	801b9fe <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801b9e2:	883d      	ldrh	r5, [r7, #0]
 801b9e4:	2300      	movs	r3, #0
 801b9e6:	6830      	ldr	r0, [r6, #0]
 801b9e8:	240e      	movs	r4, #14
 801b9ea:	429d      	cmp	r5, r3
 801b9ec:	d90f      	bls.n	801ba0e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b9ee:	fb04 0203 	mla	r2, r4, r3, r0
 801b9f2:	3301      	adds	r3, #1
 801b9f4:	7b11      	ldrb	r1, [r2, #12]
 801b9f6:	f36f 1145 	bfc	r1, #5, #1
 801b9fa:	7311      	strb	r1, [r2, #12]
 801b9fc:	e7f5      	b.n	801b9ea <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801b9fe:	682a      	ldr	r2, [r5, #0]
 801ba00:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ba04:	6822      	ldr	r2, [r4, #0]
 801ba06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801ba0a:	3301      	adds	r3, #1
 801ba0c:	e7e7      	b.n	801b9de <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801ba0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba12:	bf00      	nop
 801ba14:	2000bc34 	.word	0x2000bc34
 801ba18:	2000bc50 	.word	0x2000bc50
 801ba1c:	2000bc54 	.word	0x2000bc54
 801ba20:	2000bc38 	.word	0x2000bc38
 801ba24:	2000bc48 	.word	0x2000bc48
 801ba28:	2000bc40 	.word	0x2000bc40
 801ba2c:	2000bc52 	.word	0x2000bc52
 801ba30:	2000bc3c 	.word	0x2000bc3c
 801ba34:	2000bc4c 	.word	0x2000bc4c
 801ba38:	2000bc44 	.word	0x2000bc44

0801ba3c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ba3c:	4b10      	ldr	r3, [pc, #64]	; (801ba80 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801ba3e:	b510      	push	{r4, lr}
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	b9db      	cbnz	r3, 801ba7c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801ba44:	b1d1      	cbz	r1, 801ba7c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801ba46:	4b0f      	ldr	r3, [pc, #60]	; (801ba84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801ba48:	240e      	movs	r4, #14
 801ba4a:	801a      	strh	r2, [r3, #0]
 801ba4c:	b292      	uxth	r2, r2
 801ba4e:	4b0e      	ldr	r3, [pc, #56]	; (801ba88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801ba50:	881b      	ldrh	r3, [r3, #0]
 801ba52:	4413      	add	r3, r2
 801ba54:	4362      	muls	r2, r4
 801ba56:	2406      	movs	r4, #6
 801ba58:	fb04 2203 	mla	r2, r4, r3, r2
 801ba5c:	428a      	cmp	r2, r1
 801ba5e:	d305      	bcc.n	801ba6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801ba60:	4b0a      	ldr	r3, [pc, #40]	; (801ba8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801ba62:	2137      	movs	r1, #55	; 0x37
 801ba64:	4a0a      	ldr	r2, [pc, #40]	; (801ba90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801ba66:	480b      	ldr	r0, [pc, #44]	; (801ba94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801ba68:	f009 fd80 	bl	802556c <__assert_func>
 801ba6c:	4b0a      	ldr	r3, [pc, #40]	; (801ba98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801ba6e:	6019      	str	r1, [r3, #0]
 801ba70:	4b0a      	ldr	r3, [pc, #40]	; (801ba9c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801ba72:	6018      	str	r0, [r3, #0]
 801ba74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba78:	f7ff bf7c 	b.w	801b974 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ba7c:	bd10      	pop	{r4, pc}
 801ba7e:	bf00      	nop
 801ba80:	2000bc40 	.word	0x2000bc40
 801ba84:	2000bc54 	.word	0x2000bc54
 801ba88:	2000bc50 	.word	0x2000bc50
 801ba8c:	0802a7db 	.word	0x0802a7db
 801ba90:	0802a834 	.word	0x0802a834
 801ba94:	0802a7b6 	.word	0x0802a7b6
 801ba98:	2000bc3c 	.word	0x2000bc3c
 801ba9c:	2000bc34 	.word	0x2000bc34

0801baa0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801baa0:	b470      	push	{r4, r5, r6}
 801baa2:	4c07      	ldr	r4, [pc, #28]	; (801bac0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801baa4:	4605      	mov	r5, r0
 801baa6:	4610      	mov	r0, r2
 801baa8:	9a03      	ldr	r2, [sp, #12]
 801baaa:	6826      	ldr	r6, [r4, #0]
 801baac:	b936      	cbnz	r6, 801babc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801baae:	6025      	str	r5, [r4, #0]
 801bab0:	4c04      	ldr	r4, [pc, #16]	; (801bac4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bab2:	8021      	strh	r1, [r4, #0]
 801bab4:	4619      	mov	r1, r3
 801bab6:	bc70      	pop	{r4, r5, r6}
 801bab8:	f7ff bfc0 	b.w	801ba3c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801babc:	bc70      	pop	{r4, r5, r6}
 801babe:	4770      	bx	lr
 801bac0:	2000bc58 	.word	0x2000bc58
 801bac4:	2000bc50 	.word	0x2000bc50

0801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bac8:	b508      	push	{r3, lr}
 801baca:	4b14      	ldr	r3, [pc, #80]	; (801bb1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bacc:	6819      	ldr	r1, [r3, #0]
 801bace:	b931      	cbnz	r1, 801bade <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801bad0:	4b13      	ldr	r3, [pc, #76]	; (801bb20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bad2:	f240 21e6 	movw	r1, #742	; 0x2e6
 801bad6:	4a13      	ldr	r2, [pc, #76]	; (801bb24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bad8:	4813      	ldr	r0, [pc, #76]	; (801bb28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bada:	f009 fd47 	bl	802556c <__assert_func>
 801bade:	4a13      	ldr	r2, [pc, #76]	; (801bb2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bae0:	8803      	ldrh	r3, [r0, #0]
 801bae2:	8812      	ldrh	r2, [r2, #0]
 801bae4:	4293      	cmp	r3, r2
 801bae6:	d204      	bcs.n	801baf2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801bae8:	2214      	movs	r2, #20
 801baea:	fb02 1303 	mla	r3, r2, r3, r1
 801baee:	8918      	ldrh	r0, [r3, #8]
 801baf0:	bd08      	pop	{r3, pc}
 801baf2:	490f      	ldr	r1, [pc, #60]	; (801bb30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801baf4:	8809      	ldrh	r1, [r1, #0]
 801baf6:	4411      	add	r1, r2
 801baf8:	428b      	cmp	r3, r1
 801bafa:	da06      	bge.n	801bb0a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801bafc:	1a9b      	subs	r3, r3, r2
 801bafe:	4a0d      	ldr	r2, [pc, #52]	; (801bb34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801bb00:	210e      	movs	r1, #14
 801bb02:	6812      	ldr	r2, [r2, #0]
 801bb04:	fb01 2303 	mla	r3, r1, r3, r2
 801bb08:	e7f1      	b.n	801baee <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801bb0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bb0e:	4293      	cmp	r3, r2
 801bb10:	bf0a      	itet	eq
 801bb12:	4b09      	ldreq	r3, [pc, #36]	; (801bb38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801bb14:	2000      	movne	r0, #0
 801bb16:	8818      	ldrheq	r0, [r3, #0]
 801bb18:	e7ea      	b.n	801baf0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801bb1a:	bf00      	nop
 801bb1c:	2000bc58 	.word	0x2000bc58
 801bb20:	08027a0c 	.word	0x08027a0c
 801bb24:	0802a8e1 	.word	0x0802a8e1
 801bb28:	0802a7b6 	.word	0x0802a7b6
 801bb2c:	2000bc50 	.word	0x2000bc50
 801bb30:	2000bc54 	.word	0x2000bc54
 801bb34:	2000bc38 	.word	0x2000bc38
 801bb38:	2000bb84 	.word	0x2000bb84

0801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bb3c:	b508      	push	{r3, lr}
 801bb3e:	4b14      	ldr	r3, [pc, #80]	; (801bb90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bb40:	6819      	ldr	r1, [r3, #0]
 801bb42:	b931      	cbnz	r1, 801bb52 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801bb44:	4b13      	ldr	r3, [pc, #76]	; (801bb94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bb46:	f240 21fa 	movw	r1, #762	; 0x2fa
 801bb4a:	4a13      	ldr	r2, [pc, #76]	; (801bb98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bb4c:	4813      	ldr	r0, [pc, #76]	; (801bb9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bb4e:	f009 fd0d 	bl	802556c <__assert_func>
 801bb52:	4a13      	ldr	r2, [pc, #76]	; (801bba0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bb54:	8803      	ldrh	r3, [r0, #0]
 801bb56:	8812      	ldrh	r2, [r2, #0]
 801bb58:	4293      	cmp	r3, r2
 801bb5a:	d204      	bcs.n	801bb66 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801bb5c:	2214      	movs	r2, #20
 801bb5e:	fb02 1303 	mla	r3, r2, r3, r1
 801bb62:	8958      	ldrh	r0, [r3, #10]
 801bb64:	bd08      	pop	{r3, pc}
 801bb66:	490f      	ldr	r1, [pc, #60]	; (801bba4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801bb68:	8809      	ldrh	r1, [r1, #0]
 801bb6a:	4411      	add	r1, r2
 801bb6c:	428b      	cmp	r3, r1
 801bb6e:	da06      	bge.n	801bb7e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801bb70:	1a9b      	subs	r3, r3, r2
 801bb72:	4a0d      	ldr	r2, [pc, #52]	; (801bba8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801bb74:	210e      	movs	r1, #14
 801bb76:	6812      	ldr	r2, [r2, #0]
 801bb78:	fb01 2303 	mla	r3, r1, r3, r2
 801bb7c:	e7f1      	b.n	801bb62 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801bb7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bb82:	4293      	cmp	r3, r2
 801bb84:	bf0a      	itet	eq
 801bb86:	4b09      	ldreq	r3, [pc, #36]	; (801bbac <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801bb88:	2000      	movne	r0, #0
 801bb8a:	8818      	ldrheq	r0, [r3, #0]
 801bb8c:	e7ea      	b.n	801bb64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801bb8e:	bf00      	nop
 801bb90:	2000bc58 	.word	0x2000bc58
 801bb94:	08027a0c 	.word	0x08027a0c
 801bb98:	0802a90d 	.word	0x0802a90d
 801bb9c:	0802a7b6 	.word	0x0802a7b6
 801bba0:	2000bc50 	.word	0x2000bc50
 801bba4:	2000bc54 	.word	0x2000bc54
 801bba8:	2000bc38 	.word	0x2000bc38
 801bbac:	2000bb86 	.word	0x2000bb86

0801bbb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bbb0:	4b23      	ldr	r3, [pc, #140]	; (801bc40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bbb2:	b510      	push	{r4, lr}
 801bbb4:	681c      	ldr	r4, [r3, #0]
 801bbb6:	b934      	cbnz	r4, 801bbc6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801bbb8:	4b22      	ldr	r3, [pc, #136]	; (801bc44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bbba:	f240 310e 	movw	r1, #782	; 0x30e
 801bbbe:	4a22      	ldr	r2, [pc, #136]	; (801bc48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801bbc0:	4822      	ldr	r0, [pc, #136]	; (801bc4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801bbc2:	f009 fcd3 	bl	802556c <__assert_func>
 801bbc6:	4a22      	ldr	r2, [pc, #136]	; (801bc50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801bbc8:	880b      	ldrh	r3, [r1, #0]
 801bbca:	8812      	ldrh	r2, [r2, #0]
 801bbcc:	4293      	cmp	r3, r2
 801bbce:	d211      	bcs.n	801bbf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801bbd0:	2214      	movs	r2, #20
 801bbd2:	fb02 4303 	mla	r3, r2, r3, r4
 801bbd6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bbda:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bbde:	8a1a      	ldrh	r2, [r3, #16]
 801bbe0:	8a5b      	ldrh	r3, [r3, #18]
 801bbe2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bbe6:	8004      	strh	r4, [r0, #0]
 801bbe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bbec:	8041      	strh	r1, [r0, #2]
 801bbee:	8082      	strh	r2, [r0, #4]
 801bbf0:	80c3      	strh	r3, [r0, #6]
 801bbf2:	e00e      	b.n	801bc12 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bbf4:	4917      	ldr	r1, [pc, #92]	; (801bc54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801bbf6:	8809      	ldrh	r1, [r1, #0]
 801bbf8:	4411      	add	r1, r2
 801bbfa:	428b      	cmp	r3, r1
 801bbfc:	da0a      	bge.n	801bc14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801bbfe:	1a9b      	subs	r3, r3, r2
 801bc00:	4a15      	ldr	r2, [pc, #84]	; (801bc58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801bc02:	210e      	movs	r1, #14
 801bc04:	6812      	ldr	r2, [r2, #0]
 801bc06:	fb01 2303 	mla	r3, r1, r3, r2
 801bc0a:	681a      	ldr	r2, [r3, #0]
 801bc0c:	6002      	str	r2, [r0, #0]
 801bc0e:	685a      	ldr	r2, [r3, #4]
 801bc10:	6042      	str	r2, [r0, #4]
 801bc12:	bd10      	pop	{r4, pc}
 801bc14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bc18:	4293      	cmp	r3, r2
 801bc1a:	d10b      	bne.n	801bc34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801bc1c:	4b0f      	ldr	r3, [pc, #60]	; (801bc5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801bc1e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bc22:	4b0f      	ldr	r3, [pc, #60]	; (801bc60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801bc24:	8081      	strh	r1, [r0, #4]
 801bc26:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc2a:	2300      	movs	r3, #0
 801bc2c:	80c2      	strh	r2, [r0, #6]
 801bc2e:	8003      	strh	r3, [r0, #0]
 801bc30:	8043      	strh	r3, [r0, #2]
 801bc32:	e7ee      	b.n	801bc12 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bc34:	2300      	movs	r3, #0
 801bc36:	8003      	strh	r3, [r0, #0]
 801bc38:	8043      	strh	r3, [r0, #2]
 801bc3a:	8083      	strh	r3, [r0, #4]
 801bc3c:	e7d8      	b.n	801bbf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801bc3e:	bf00      	nop
 801bc40:	2000bc58 	.word	0x2000bc58
 801bc44:	08027a0c 	.word	0x08027a0c
 801bc48:	0802a87a 	.word	0x0802a87a
 801bc4c:	0802a7b6 	.word	0x0802a7b6
 801bc50:	2000bc50 	.word	0x2000bc50
 801bc54:	2000bc54 	.word	0x2000bc54
 801bc58:	2000bc38 	.word	0x2000bc38
 801bc5c:	2000bb84 	.word	0x2000bb84
 801bc60:	2000bb86 	.word	0x2000bb86

0801bc64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801bc64:	4b18      	ldr	r3, [pc, #96]	; (801bcc8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	b34b      	cbz	r3, 801bcbe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801bc6a:	4a18      	ldr	r2, [pc, #96]	; (801bccc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801bc6c:	8800      	ldrh	r0, [r0, #0]
 801bc6e:	8812      	ldrh	r2, [r2, #0]
 801bc70:	4290      	cmp	r0, r2
 801bc72:	d211      	bcs.n	801bc98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801bc74:	2214      	movs	r2, #20
 801bc76:	fb02 3300 	mla	r3, r2, r0, r3
 801bc7a:	8a1a      	ldrh	r2, [r3, #16]
 801bc7c:	8919      	ldrh	r1, [r3, #8]
 801bc7e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bc82:	428a      	cmp	r2, r1
 801bc84:	db1d      	blt.n	801bcc2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801bc86:	8a58      	ldrh	r0, [r3, #18]
 801bc88:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801bc8c:	895b      	ldrh	r3, [r3, #10]
 801bc8e:	4298      	cmp	r0, r3
 801bc90:	bfac      	ite	ge
 801bc92:	2000      	movge	r0, #0
 801bc94:	2001      	movlt	r0, #1
 801bc96:	4770      	bx	lr
 801bc98:	4b0d      	ldr	r3, [pc, #52]	; (801bcd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801bc9a:	881b      	ldrh	r3, [r3, #0]
 801bc9c:	4413      	add	r3, r2
 801bc9e:	4298      	cmp	r0, r3
 801bca0:	da0d      	bge.n	801bcbe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801bca2:	4b0c      	ldr	r3, [pc, #48]	; (801bcd4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801bca4:	1a80      	subs	r0, r0, r2
 801bca6:	220e      	movs	r2, #14
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	fb02 3300 	mla	r3, r2, r0, r3
 801bcae:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801bcb2:	891a      	ldrh	r2, [r3, #8]
 801bcb4:	4291      	cmp	r1, r2
 801bcb6:	db04      	blt.n	801bcc2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801bcb8:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801bcbc:	e7e6      	b.n	801bc8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801bcbe:	2000      	movs	r0, #0
 801bcc0:	4770      	bx	lr
 801bcc2:	2001      	movs	r0, #1
 801bcc4:	4770      	bx	lr
 801bcc6:	bf00      	nop
 801bcc8:	2000bc58 	.word	0x2000bc58
 801bccc:	2000bc50 	.word	0x2000bc50
 801bcd0:	2000bc54 	.word	0x2000bc54
 801bcd4:	2000bc38 	.word	0x2000bc38

0801bcd8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bcd8:	b508      	push	{r3, lr}
 801bcda:	4b12      	ldr	r3, [pc, #72]	; (801bd24 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bcdc:	6819      	ldr	r1, [r3, #0]
 801bcde:	b931      	cbnz	r1, 801bcee <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bce0:	4b11      	ldr	r3, [pc, #68]	; (801bd28 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bce2:	f240 3132 	movw	r1, #818	; 0x332
 801bce6:	4a11      	ldr	r2, [pc, #68]	; (801bd2c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bce8:	4811      	ldr	r0, [pc, #68]	; (801bd30 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bcea:	f009 fc3f 	bl	802556c <__assert_func>
 801bcee:	8803      	ldrh	r3, [r0, #0]
 801bcf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bcf4:	4293      	cmp	r3, r2
 801bcf6:	d012      	beq.n	801bd1e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bcf8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bcfc:	4293      	cmp	r3, r2
 801bcfe:	d103      	bne.n	801bd08 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bd00:	4b0c      	ldr	r3, [pc, #48]	; (801bd34 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bd06:	bd08      	pop	{r3, pc}
 801bd08:	4a0b      	ldr	r2, [pc, #44]	; (801bd38 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801bd0a:	6812      	ldr	r2, [r2, #0]
 801bd0c:	b11a      	cbz	r2, 801bd16 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801bd0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bd12:	2800      	cmp	r0, #0
 801bd14:	d1f7      	bne.n	801bd06 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bd16:	2214      	movs	r2, #20
 801bd18:	4353      	muls	r3, r2
 801bd1a:	58c8      	ldr	r0, [r1, r3]
 801bd1c:	e7f3      	b.n	801bd06 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bd1e:	2000      	movs	r0, #0
 801bd20:	e7f1      	b.n	801bd06 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bd22:	bf00      	nop
 801bd24:	2000bc58 	.word	0x2000bc58
 801bd28:	08027a0c 	.word	0x08027a0c
 801bd2c:	0802a8b0 	.word	0x0802a8b0
 801bd30:	0802a7b6 	.word	0x0802a7b6
 801bd34:	2000bb90 	.word	0x2000bb90
 801bd38:	2000bc34 	.word	0x2000bc34

0801bd3c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bd3c:	8802      	ldrh	r2, [r0, #0]
 801bd3e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bd42:	429a      	cmp	r2, r3
 801bd44:	d840      	bhi.n	801bdc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bd46:	4b21      	ldr	r3, [pc, #132]	; (801bdcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801bd48:	881b      	ldrh	r3, [r3, #0]
 801bd4a:	429a      	cmp	r2, r3
 801bd4c:	d220      	bcs.n	801bd90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801bd4e:	4b20      	ldr	r3, [pc, #128]	; (801bdd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bd50:	6819      	ldr	r1, [r3, #0]
 801bd52:	2314      	movs	r3, #20
 801bd54:	fb03 1302 	mla	r3, r3, r2, r1
 801bd58:	6858      	ldr	r0, [r3, #4]
 801bd5a:	2800      	cmp	r0, #0
 801bd5c:	d035      	beq.n	801bdca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bd5e:	491d      	ldr	r1, [pc, #116]	; (801bdd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bd60:	6809      	ldr	r1, [r1, #0]
 801bd62:	2900      	cmp	r1, #0
 801bd64:	d031      	beq.n	801bdca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bd66:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bd6a:	b371      	cbz	r1, 801bdca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bd6c:	895a      	ldrh	r2, [r3, #10]
 801bd6e:	8918      	ldrh	r0, [r3, #8]
 801bd70:	4350      	muls	r0, r2
 801bd72:	7c5a      	ldrb	r2, [r3, #17]
 801bd74:	7cdb      	ldrb	r3, [r3, #19]
 801bd76:	0952      	lsrs	r2, r2, #5
 801bd78:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bd7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bd80:	2b0b      	cmp	r3, #11
 801bd82:	bf18      	it	ne
 801bd84:	0040      	lslne	r0, r0, #1
 801bd86:	3003      	adds	r0, #3
 801bd88:	f020 0003 	bic.w	r0, r0, #3
 801bd8c:	4408      	add	r0, r1
 801bd8e:	4770      	bx	lr
 801bd90:	4911      	ldr	r1, [pc, #68]	; (801bdd8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bd92:	8809      	ldrh	r1, [r1, #0]
 801bd94:	4419      	add	r1, r3
 801bd96:	428a      	cmp	r2, r1
 801bd98:	da16      	bge.n	801bdc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bd9a:	4910      	ldr	r1, [pc, #64]	; (801bddc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bd9c:	1ad3      	subs	r3, r2, r3
 801bd9e:	200e      	movs	r0, #14
 801bda0:	6809      	ldr	r1, [r1, #0]
 801bda2:	fb00 1303 	mla	r3, r0, r3, r1
 801bda6:	7b19      	ldrb	r1, [r3, #12]
 801bda8:	f001 011f 	and.w	r1, r1, #31
 801bdac:	290b      	cmp	r1, #11
 801bdae:	d10b      	bne.n	801bdc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bdb0:	8919      	ldrh	r1, [r3, #8]
 801bdb2:	8958      	ldrh	r0, [r3, #10]
 801bdb4:	4b07      	ldr	r3, [pc, #28]	; (801bdd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bdb6:	4348      	muls	r0, r1
 801bdb8:	6819      	ldr	r1, [r3, #0]
 801bdba:	3003      	adds	r0, #3
 801bdbc:	f020 0303 	bic.w	r3, r0, #3
 801bdc0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bdc4:	4418      	add	r0, r3
 801bdc6:	4770      	bx	lr
 801bdc8:	2000      	movs	r0, #0
 801bdca:	4770      	bx	lr
 801bdcc:	2000bc50 	.word	0x2000bc50
 801bdd0:	2000bc58 	.word	0x2000bc58
 801bdd4:	2000bc34 	.word	0x2000bc34
 801bdd8:	2000bc54 	.word	0x2000bc54
 801bddc:	2000bc38 	.word	0x2000bc38

0801bde0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bde0:	4b19      	ldr	r3, [pc, #100]	; (801be48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bde2:	6819      	ldr	r1, [r3, #0]
 801bde4:	8803      	ldrh	r3, [r0, #0]
 801bde6:	b1e9      	cbz	r1, 801be24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bde8:	4a18      	ldr	r2, [pc, #96]	; (801be4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801bdea:	8812      	ldrh	r2, [r2, #0]
 801bdec:	429a      	cmp	r2, r3
 801bdee:	d90a      	bls.n	801be06 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bdf0:	2214      	movs	r2, #20
 801bdf2:	fb02 1303 	mla	r3, r2, r3, r1
 801bdf6:	7c58      	ldrb	r0, [r3, #17]
 801bdf8:	0942      	lsrs	r2, r0, #5
 801bdfa:	7cd8      	ldrb	r0, [r3, #19]
 801bdfc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801be00:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801be04:	4770      	bx	lr
 801be06:	4912      	ldr	r1, [pc, #72]	; (801be50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801be08:	8809      	ldrh	r1, [r1, #0]
 801be0a:	4411      	add	r1, r2
 801be0c:	428b      	cmp	r3, r1
 801be0e:	da09      	bge.n	801be24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801be10:	1a9b      	subs	r3, r3, r2
 801be12:	4a10      	ldr	r2, [pc, #64]	; (801be54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801be14:	210e      	movs	r1, #14
 801be16:	6812      	ldr	r2, [r2, #0]
 801be18:	fb01 2303 	mla	r3, r1, r3, r2
 801be1c:	7b18      	ldrb	r0, [r3, #12]
 801be1e:	f000 001f 	and.w	r0, r0, #31
 801be22:	4770      	bx	lr
 801be24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be28:	4293      	cmp	r3, r2
 801be2a:	d10a      	bne.n	801be42 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801be2c:	4b0a      	ldr	r3, [pc, #40]	; (801be58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801be34:	b10a      	cbz	r2, 801be3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801be36:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801be38:	b900      	cbnz	r0, 801be3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801be3a:	6898      	ldr	r0, [r3, #8]
 801be3c:	6803      	ldr	r3, [r0, #0]
 801be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be40:	4718      	bx	r3
 801be42:	2000      	movs	r0, #0
 801be44:	4770      	bx	lr
 801be46:	bf00      	nop
 801be48:	2000bc58 	.word	0x2000bc58
 801be4c:	2000bc50 	.word	0x2000bc50
 801be50:	2000bc54 	.word	0x2000bc54
 801be54:	2000bc38 	.word	0x2000bc38
 801be58:	2000bb90 	.word	0x2000bb90

0801be5c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801be5c:	2018      	movs	r0, #24
 801be5e:	4770      	bx	lr

0801be60 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801be60:	2001      	movs	r0, #1
 801be62:	4770      	bx	lr

0801be64 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801be64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801be68:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801be6c:	4770      	bx	lr

0801be6e <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801be6e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801be72:	4770      	bx	lr

0801be74 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801be74:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801be78:	4770      	bx	lr

0801be7a <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801be7a:	b2c8      	uxtb	r0, r1
 801be7c:	4770      	bx	lr

0801be7e <_ZN8touchgfx8LCD24bpp4initEv>:
 801be7e:	4770      	bx	lr

0801be80 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be84:	b085      	sub	sp, #20
 801be86:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801be88:	9203      	str	r2, [sp, #12]
 801be8a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801be8e:	6878      	ldr	r0, [r7, #4]
 801be90:	9201      	str	r2, [sp, #4]
 801be92:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801be94:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801be98:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801be9c:	fa1f fc84 	uxth.w	ip, r4
 801bea0:	43e4      	mvns	r4, r4
 801bea2:	9100      	str	r1, [sp, #0]
 801bea4:	b2e4      	uxtb	r4, r4
 801bea6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801beaa:	fb00 2505 	mla	r5, r0, r5, r2
 801beae:	683a      	ldr	r2, [r7, #0]
 801beb0:	6877      	ldr	r7, [r6, #4]
 801beb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801beb6:	3704      	adds	r7, #4
 801beb8:	4415      	add	r5, r2
 801beba:	6832      	ldr	r2, [r6, #0]
 801bebc:	9202      	str	r2, [sp, #8]
 801bebe:	9a00      	ldr	r2, [sp, #0]
 801bec0:	2a00      	cmp	r2, #0
 801bec2:	dc03      	bgt.n	801becc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801bec4:	9a03      	ldr	r2, [sp, #12]
 801bec6:	2a00      	cmp	r2, #0
 801bec8:	f340 8116 	ble.w	801c0f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801becc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bece:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bed2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bed4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bed8:	2b00      	cmp	r3, #0
 801beda:	dd0f      	ble.n	801befc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801bedc:	1406      	asrs	r6, r0, #16
 801bede:	d406      	bmi.n	801beee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bee0:	4546      	cmp	r6, r8
 801bee2:	da04      	bge.n	801beee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bee4:	1416      	asrs	r6, r2, #16
 801bee6:	d402      	bmi.n	801beee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bee8:	9901      	ldr	r1, [sp, #4]
 801beea:	428e      	cmp	r6, r1
 801beec:	db07      	blt.n	801befe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801beee:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bef0:	3b01      	subs	r3, #1
 801bef2:	3503      	adds	r5, #3
 801bef4:	4408      	add	r0, r1
 801bef6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bef8:	440a      	add	r2, r1
 801befa:	e7ed      	b.n	801bed8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801befc:	d011      	beq.n	801bf22 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801befe:	1e5e      	subs	r6, r3, #1
 801bf00:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bf02:	fb01 0e06 	mla	lr, r1, r6, r0
 801bf06:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801bf0a:	d548      	bpl.n	801bf9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801bf0c:	4699      	mov	r9, r3
 801bf0e:	462e      	mov	r6, r5
 801bf10:	f1b9 0f00 	cmp.w	r9, #0
 801bf14:	f300 809e 	bgt.w	801c054 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801bf18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf20:	441d      	add	r5, r3
 801bf22:	9b00      	ldr	r3, [sp, #0]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	f340 80e7 	ble.w	801c0f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bf2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bf2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf30:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf38:	eef0 6a62 	vmov.f32	s13, s5
 801bf3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bf40:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bf48:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801bf4c:	eef0 6a43 	vmov.f32	s13, s6
 801bf50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bf54:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801bf58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf60:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf70:	ee12 2a90 	vmov	r2, s5
 801bf74:	eef0 2a47 	vmov.f32	s5, s14
 801bf78:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf7c:	ee13 2a10 	vmov	r2, s6
 801bf80:	9311      	str	r3, [sp, #68]	; 0x44
 801bf82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf84:	eeb0 3a67 	vmov.f32	s6, s15
 801bf88:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf8c:	9312      	str	r3, [sp, #72]	; 0x48
 801bf8e:	9b00      	ldr	r3, [sp, #0]
 801bf90:	9a03      	ldr	r2, [sp, #12]
 801bf92:	3b01      	subs	r3, #1
 801bf94:	9300      	str	r3, [sp, #0]
 801bf96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf98:	bf08      	it	eq
 801bf9a:	4613      	moveq	r3, r2
 801bf9c:	e78f      	b.n	801bebe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801bf9e:	45c6      	cmp	lr, r8
 801bfa0:	dab4      	bge.n	801bf0c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801bfa2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bfa4:	fb01 2606 	mla	r6, r1, r6, r2
 801bfa8:	1436      	asrs	r6, r6, #16
 801bfaa:	d4af      	bmi.n	801bf0c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801bfac:	9901      	ldr	r1, [sp, #4]
 801bfae:	428e      	cmp	r6, r1
 801bfb0:	daac      	bge.n	801bf0c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801bfb2:	1cee      	adds	r6, r5, #3
 801bfb4:	4699      	mov	r9, r3
 801bfb6:	f1b9 0f00 	cmp.w	r9, #0
 801bfba:	f106 0603 	add.w	r6, r6, #3
 801bfbe:	ddab      	ble.n	801bf18 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801bfc0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801bfc4:	9902      	ldr	r1, [sp, #8]
 801bfc6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801bfca:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801bfce:	fb08 1e0e 	mla	lr, r8, lr, r1
 801bfd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bfd4:	fb1b fb04 	smulbb	fp, fp, r4
 801bfd8:	f109 39ff 	add.w	r9, r9, #4294967295
 801bfdc:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801bfe0:	4408      	add	r0, r1
 801bfe2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bfe4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bfe8:	440a      	add	r2, r1
 801bfea:	eb07 0a0e 	add.w	sl, r7, lr
 801bfee:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801bff2:	fb0e be0c 	mla	lr, lr, ip, fp
 801bff6:	fa1f fe8e 	uxth.w	lr, lr
 801bffa:	f10e 0b01 	add.w	fp, lr, #1
 801bffe:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c002:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c006:	fb1b fb04 	smulbb	fp, fp, r4
 801c00a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c00e:	f806 ec06 	strb.w	lr, [r6, #-6]
 801c012:	f89a e001 	ldrb.w	lr, [sl, #1]
 801c016:	fb0e be0c 	mla	lr, lr, ip, fp
 801c01a:	fa1f fe8e 	uxth.w	lr, lr
 801c01e:	f10e 0b01 	add.w	fp, lr, #1
 801c022:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c026:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c02a:	f806 ec05 	strb.w	lr, [r6, #-5]
 801c02e:	f89a e002 	ldrb.w	lr, [sl, #2]
 801c032:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c036:	fb1a fa04 	smulbb	sl, sl, r4
 801c03a:	fb0e ae0c 	mla	lr, lr, ip, sl
 801c03e:	fa1f fe8e 	uxth.w	lr, lr
 801c042:	f10e 0a01 	add.w	sl, lr, #1
 801c046:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c04a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c04e:	f806 ec04 	strb.w	lr, [r6, #-4]
 801c052:	e7b0      	b.n	801bfb6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c054:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c058:	d446      	bmi.n	801c0e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c05a:	45c2      	cmp	sl, r8
 801c05c:	da44      	bge.n	801c0e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c05e:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801c062:	d441      	bmi.n	801c0e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c064:	9901      	ldr	r1, [sp, #4]
 801c066:	458e      	cmp	lr, r1
 801c068:	da3e      	bge.n	801c0e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801c06a:	9902      	ldr	r1, [sp, #8]
 801c06c:	f896 b000 	ldrb.w	fp, [r6]
 801c070:	fb08 1e0e 	mla	lr, r8, lr, r1
 801c074:	fb1b fb04 	smulbb	fp, fp, r4
 801c078:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801c07c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c080:	eb07 0a0e 	add.w	sl, r7, lr
 801c084:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c088:	fb0e be0c 	mla	lr, lr, ip, fp
 801c08c:	fa1f fe8e 	uxth.w	lr, lr
 801c090:	f10e 0b01 	add.w	fp, lr, #1
 801c094:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c098:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c09c:	fb1b fb04 	smulbb	fp, fp, r4
 801c0a0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c0a4:	f886 e000 	strb.w	lr, [r6]
 801c0a8:	f89a e001 	ldrb.w	lr, [sl, #1]
 801c0ac:	fb0e be0c 	mla	lr, lr, ip, fp
 801c0b0:	fa1f fe8e 	uxth.w	lr, lr
 801c0b4:	f10e 0b01 	add.w	fp, lr, #1
 801c0b8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c0bc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c0c0:	f886 e001 	strb.w	lr, [r6, #1]
 801c0c4:	f89a e002 	ldrb.w	lr, [sl, #2]
 801c0c8:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c0cc:	fb1a fa04 	smulbb	sl, sl, r4
 801c0d0:	fb0e ae0c 	mla	lr, lr, ip, sl
 801c0d4:	fa1f fe8e 	uxth.w	lr, lr
 801c0d8:	f10e 0a01 	add.w	sl, lr, #1
 801c0dc:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801c0e0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c0e4:	f886 e002 	strb.w	lr, [r6, #2]
 801c0e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c0ea:	3603      	adds	r6, #3
 801c0ec:	f109 39ff 	add.w	r9, r9, #4294967295
 801c0f0:	4408      	add	r0, r1
 801c0f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c0f4:	440a      	add	r2, r1
 801c0f6:	e70b      	b.n	801bf10 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801c0f8:	b005      	add	sp, #20
 801c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c0fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c0fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c102:	b085      	sub	sp, #20
 801c104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c108:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c10a:	9203      	str	r2, [sp, #12]
 801c10c:	6870      	ldr	r0, [r6, #4]
 801c10e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c110:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c114:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c118:	9101      	str	r1, [sp, #4]
 801c11a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c11e:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801c122:	fb00 2404 	mla	r4, r0, r4, r2
 801c126:	6832      	ldr	r2, [r6, #0]
 801c128:	686e      	ldr	r6, [r5, #4]
 801c12a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c12e:	3604      	adds	r6, #4
 801c130:	4414      	add	r4, r2
 801c132:	682a      	ldr	r2, [r5, #0]
 801c134:	9202      	str	r2, [sp, #8]
 801c136:	9a01      	ldr	r2, [sp, #4]
 801c138:	2a00      	cmp	r2, #0
 801c13a:	dc03      	bgt.n	801c144 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801c13c:	9a03      	ldr	r2, [sp, #12]
 801c13e:	2a00      	cmp	r2, #0
 801c140:	f340 80b2 	ble.w	801c2a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c144:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c146:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c14a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c14c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c150:	2b00      	cmp	r3, #0
 801c152:	dd0c      	ble.n	801c16e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c154:	1405      	asrs	r5, r0, #16
 801c156:	d405      	bmi.n	801c164 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c158:	4575      	cmp	r5, lr
 801c15a:	da03      	bge.n	801c164 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c15c:	1415      	asrs	r5, r2, #16
 801c15e:	d401      	bmi.n	801c164 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c160:	4545      	cmp	r5, r8
 801c162:	db05      	blt.n	801c170 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c164:	4460      	add	r0, ip
 801c166:	443a      	add	r2, r7
 801c168:	3b01      	subs	r3, #1
 801c16a:	3403      	adds	r4, #3
 801c16c:	e7f0      	b.n	801c150 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801c16e:	d03d      	beq.n	801c1ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c170:	1e5d      	subs	r5, r3, #1
 801c172:	fb0c 0905 	mla	r9, ip, r5, r0
 801c176:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c17a:	d42c      	bmi.n	801c1d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c17c:	45f1      	cmp	r9, lr
 801c17e:	da2a      	bge.n	801c1d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c180:	fb07 2505 	mla	r5, r7, r5, r2
 801c184:	142d      	asrs	r5, r5, #16
 801c186:	d426      	bmi.n	801c1d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c188:	4545      	cmp	r5, r8
 801c18a:	da24      	bge.n	801c1d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c18c:	1ce5      	adds	r5, r4, #3
 801c18e:	469a      	mov	sl, r3
 801c190:	f1ba 0f00 	cmp.w	sl, #0
 801c194:	f105 0503 	add.w	r5, r5, #3
 801c198:	dd23      	ble.n	801c1e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c19a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c19e:	9902      	ldr	r1, [sp, #8]
 801c1a0:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c1a4:	443a      	add	r2, r7
 801c1a6:	fb0e 1909 	mla	r9, lr, r9, r1
 801c1aa:	4460      	add	r0, ip
 801c1ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c1b0:	f819 900b 	ldrb.w	r9, [r9, fp]
 801c1b4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c1b8:	eb06 0b09 	add.w	fp, r6, r9
 801c1bc:	f816 9009 	ldrb.w	r9, [r6, r9]
 801c1c0:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c1c4:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c1c8:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c1cc:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c1d0:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c1d4:	e7dc      	b.n	801c190 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c1d6:	2500      	movs	r5, #0
 801c1d8:	eba3 0905 	sub.w	r9, r3, r5
 801c1dc:	f1b9 0f00 	cmp.w	r9, #0
 801c1e0:	dc3c      	bgt.n	801c25c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801c1e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1ea:	441c      	add	r4, r3
 801c1ec:	9b01      	ldr	r3, [sp, #4]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	dd5a      	ble.n	801c2a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c1f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1fc:	eeb0 6a62 	vmov.f32	s12, s5
 801c200:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c204:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c208:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c20c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c210:	eeb0 6a43 	vmov.f32	s12, s6
 801c214:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c218:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c21c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c220:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c224:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c228:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c22c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c230:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c234:	ee12 2a90 	vmov	r2, s5
 801c238:	eef0 2a47 	vmov.f32	s5, s14
 801c23c:	fb92 fcf3 	sdiv	ip, r2, r3
 801c240:	ee13 2a10 	vmov	r2, s6
 801c244:	eeb0 3a67 	vmov.f32	s6, s15
 801c248:	fb92 f7f3 	sdiv	r7, r2, r3
 801c24c:	9b01      	ldr	r3, [sp, #4]
 801c24e:	9a03      	ldr	r2, [sp, #12]
 801c250:	3b01      	subs	r3, #1
 801c252:	9301      	str	r3, [sp, #4]
 801c254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c256:	bf08      	it	eq
 801c258:	4613      	moveq	r3, r2
 801c25a:	e76c      	b.n	801c136 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801c25c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c260:	d41e      	bmi.n	801c2a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c262:	45f2      	cmp	sl, lr
 801c264:	da1c      	bge.n	801c2a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c266:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c26a:	d419      	bmi.n	801c2a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c26c:	45c1      	cmp	r9, r8
 801c26e:	da17      	bge.n	801c2a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c270:	9902      	ldr	r1, [sp, #8]
 801c272:	fb0e 1909 	mla	r9, lr, r9, r1
 801c276:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c27a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c27e:	f816 b009 	ldrb.w	fp, [r6, r9]
 801c282:	eb06 0a09 	add.w	sl, r6, r9
 801c286:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801c28a:	f804 b009 	strb.w	fp, [r4, r9]
 801c28e:	44a1      	add	r9, r4
 801c290:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c294:	f889 b001 	strb.w	fp, [r9, #1]
 801c298:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c29c:	f889 a002 	strb.w	sl, [r9, #2]
 801c2a0:	4460      	add	r0, ip
 801c2a2:	443a      	add	r2, r7
 801c2a4:	3501      	adds	r5, #1
 801c2a6:	e797      	b.n	801c1d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801c2a8:	b005      	add	sp, #20
 801c2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c2ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2b2:	b087      	sub	sp, #28
 801c2b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c2b8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c2ba:	9204      	str	r2, [sp, #16]
 801c2bc:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c2c0:	6870      	ldr	r0, [r6, #4]
 801c2c2:	9205      	str	r2, [sp, #20]
 801c2c4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c2c6:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c2ca:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c2ce:	9101      	str	r1, [sp, #4]
 801c2d0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c2d4:	fb00 2505 	mla	r5, r0, r5, r2
 801c2d8:	6832      	ldr	r2, [r6, #0]
 801c2da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c2de:	4415      	add	r5, r2
 801c2e0:	6822      	ldr	r2, [r4, #0]
 801c2e2:	9202      	str	r2, [sp, #8]
 801c2e4:	6862      	ldr	r2, [r4, #4]
 801c2e6:	3204      	adds	r2, #4
 801c2e8:	9203      	str	r2, [sp, #12]
 801c2ea:	9a01      	ldr	r2, [sp, #4]
 801c2ec:	2a00      	cmp	r2, #0
 801c2ee:	dc03      	bgt.n	801c2f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c2f0:	9a04      	ldr	r2, [sp, #16]
 801c2f2:	2a00      	cmp	r2, #0
 801c2f4:	f340 8124 	ble.w	801c540 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c2f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c2fa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c2fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c300:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c304:	2b00      	cmp	r3, #0
 801c306:	dd0e      	ble.n	801c326 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c308:	1422      	asrs	r2, r4, #16
 801c30a:	d405      	bmi.n	801c318 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c30c:	4572      	cmp	r2, lr
 801c30e:	da03      	bge.n	801c318 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c310:	1402      	asrs	r2, r0, #16
 801c312:	d401      	bmi.n	801c318 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c314:	4542      	cmp	r2, r8
 801c316:	db07      	blt.n	801c328 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c318:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c31a:	3b01      	subs	r3, #1
 801c31c:	3503      	adds	r5, #3
 801c31e:	4414      	add	r4, r2
 801c320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c322:	4410      	add	r0, r2
 801c324:	e7ee      	b.n	801c304 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c326:	d010      	beq.n	801c34a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801c328:	1e5a      	subs	r2, r3, #1
 801c32a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c32c:	fb06 4602 	mla	r6, r6, r2, r4
 801c330:	1436      	asrs	r6, r6, #16
 801c332:	d546      	bpl.n	801c3c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801c334:	4699      	mov	r9, r3
 801c336:	462f      	mov	r7, r5
 801c338:	f1b9 0f00 	cmp.w	r9, #0
 801c33c:	f300 80a5 	bgt.w	801c48a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c340:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c344:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c348:	441d      	add	r5, r3
 801c34a:	9b01      	ldr	r3, [sp, #4]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	f340 80f7 	ble.w	801c540 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c352:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c356:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c358:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c35c:	eeb0 6a62 	vmov.f32	s12, s5
 801c360:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c364:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c368:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c36c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c370:	eeb0 6a43 	vmov.f32	s12, s6
 801c374:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c378:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c37c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c380:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c384:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c388:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c38c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c390:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c394:	ee12 2a90 	vmov	r2, s5
 801c398:	eef0 2a47 	vmov.f32	s5, s14
 801c39c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3a0:	ee13 2a10 	vmov	r2, s6
 801c3a4:	9313      	str	r3, [sp, #76]	; 0x4c
 801c3a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3a8:	eeb0 3a67 	vmov.f32	s6, s15
 801c3ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3b0:	9314      	str	r3, [sp, #80]	; 0x50
 801c3b2:	9b01      	ldr	r3, [sp, #4]
 801c3b4:	9a04      	ldr	r2, [sp, #16]
 801c3b6:	3b01      	subs	r3, #1
 801c3b8:	9301      	str	r3, [sp, #4]
 801c3ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3bc:	bf08      	it	eq
 801c3be:	4613      	moveq	r3, r2
 801c3c0:	e793      	b.n	801c2ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c3c2:	4576      	cmp	r6, lr
 801c3c4:	dab6      	bge.n	801c334 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c3c6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c3c8:	fb06 0202 	mla	r2, r6, r2, r0
 801c3cc:	1412      	asrs	r2, r2, #16
 801c3ce:	d4b1      	bmi.n	801c334 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c3d0:	4542      	cmp	r2, r8
 801c3d2:	daaf      	bge.n	801c334 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c3d4:	1cef      	adds	r7, r5, #3
 801c3d6:	4699      	mov	r9, r3
 801c3d8:	f1b9 0f00 	cmp.w	r9, #0
 801c3dc:	ddb0      	ble.n	801c340 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c3de:	9902      	ldr	r1, [sp, #8]
 801c3e0:	1402      	asrs	r2, r0, #16
 801c3e2:	1426      	asrs	r6, r4, #16
 801c3e4:	fb0e 1202 	mla	r2, lr, r2, r1
 801c3e8:	9903      	ldr	r1, [sp, #12]
 801c3ea:	5d92      	ldrb	r2, [r2, r6]
 801c3ec:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c3f0:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c3f4:	d041      	beq.n	801c47a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c3f6:	9a05      	ldr	r2, [sp, #20]
 801c3f8:	fa5f fb86 	uxtb.w	fp, r6
 801c3fc:	fb02 fc0c 	mul.w	ip, r2, ip
 801c400:	f10c 0201 	add.w	r2, ip, #1
 801c404:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c408:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c40c:	1212      	asrs	r2, r2, #8
 801c40e:	fa1f fa82 	uxth.w	sl, r2
 801c412:	43d2      	mvns	r2, r2
 801c414:	fb1b fb0a 	smulbb	fp, fp, sl
 801c418:	b2d2      	uxtb	r2, r2
 801c41a:	fb0c bc02 	mla	ip, ip, r2, fp
 801c41e:	fa1f fc8c 	uxth.w	ip, ip
 801c422:	f10c 0b01 	add.w	fp, ip, #1
 801c426:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c42a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c42e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c432:	fb1b fb0a 	smulbb	fp, fp, sl
 801c436:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c43a:	fb16 fa0a 	smulbb	sl, r6, sl
 801c43e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c442:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c446:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c44a:	fb06 aa02 	mla	sl, r6, r2, sl
 801c44e:	fb0c bc02 	mla	ip, ip, r2, fp
 801c452:	fa1f fa8a 	uxth.w	sl, sl
 801c456:	fa1f fc8c 	uxth.w	ip, ip
 801c45a:	f10a 0601 	add.w	r6, sl, #1
 801c45e:	f10c 0b01 	add.w	fp, ip, #1
 801c462:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c466:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c46a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c46e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c472:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c476:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c47a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c47c:	3703      	adds	r7, #3
 801c47e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c482:	4414      	add	r4, r2
 801c484:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c486:	4410      	add	r0, r2
 801c488:	e7a6      	b.n	801c3d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c48a:	1426      	asrs	r6, r4, #16
 801c48c:	d450      	bmi.n	801c530 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c48e:	4576      	cmp	r6, lr
 801c490:	da4e      	bge.n	801c530 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c492:	1402      	asrs	r2, r0, #16
 801c494:	d44c      	bmi.n	801c530 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c496:	4542      	cmp	r2, r8
 801c498:	da4a      	bge.n	801c530 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c49a:	9902      	ldr	r1, [sp, #8]
 801c49c:	fb0e 1202 	mla	r2, lr, r2, r1
 801c4a0:	9903      	ldr	r1, [sp, #12]
 801c4a2:	5d92      	ldrb	r2, [r2, r6]
 801c4a4:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c4a8:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c4ac:	d040      	beq.n	801c530 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c4ae:	9a05      	ldr	r2, [sp, #20]
 801c4b0:	fa5f fb86 	uxtb.w	fp, r6
 801c4b4:	fb02 fc0c 	mul.w	ip, r2, ip
 801c4b8:	f10c 0201 	add.w	r2, ip, #1
 801c4bc:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c4c0:	f897 c000 	ldrb.w	ip, [r7]
 801c4c4:	1212      	asrs	r2, r2, #8
 801c4c6:	fa1f fa82 	uxth.w	sl, r2
 801c4ca:	43d2      	mvns	r2, r2
 801c4cc:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4d0:	b2d2      	uxtb	r2, r2
 801c4d2:	fb0c bc02 	mla	ip, ip, r2, fp
 801c4d6:	fa1f fc8c 	uxth.w	ip, ip
 801c4da:	f10c 0b01 	add.w	fp, ip, #1
 801c4de:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c4e2:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c4e6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c4ea:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4ee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c4f2:	fb16 fa0a 	smulbb	sl, r6, sl
 801c4f6:	78be      	ldrb	r6, [r7, #2]
 801c4f8:	f887 c000 	strb.w	ip, [r7]
 801c4fc:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c500:	fb06 aa02 	mla	sl, r6, r2, sl
 801c504:	fb0c bc02 	mla	ip, ip, r2, fp
 801c508:	fa1f fa8a 	uxth.w	sl, sl
 801c50c:	fa1f fc8c 	uxth.w	ip, ip
 801c510:	f10a 0601 	add.w	r6, sl, #1
 801c514:	f10c 0b01 	add.w	fp, ip, #1
 801c518:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c51c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c520:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c524:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c528:	f887 a002 	strb.w	sl, [r7, #2]
 801c52c:	f887 c001 	strb.w	ip, [r7, #1]
 801c530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c532:	3703      	adds	r7, #3
 801c534:	f109 39ff 	add.w	r9, r9, #4294967295
 801c538:	4414      	add	r4, r2
 801c53a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c53c:	4410      	add	r0, r2
 801c53e:	e6fb      	b.n	801c338 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c540:	b007      	add	sp, #28
 801c542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c546 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c54a:	b085      	sub	sp, #20
 801c54c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c550:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c552:	9203      	str	r2, [sp, #12]
 801c554:	6870      	ldr	r0, [r6, #4]
 801c556:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c558:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c55c:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c560:	9100      	str	r1, [sp, #0]
 801c562:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c566:	fb00 2404 	mla	r4, r0, r4, r2
 801c56a:	6832      	ldr	r2, [r6, #0]
 801c56c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c570:	4414      	add	r4, r2
 801c572:	682a      	ldr	r2, [r5, #0]
 801c574:	9201      	str	r2, [sp, #4]
 801c576:	686a      	ldr	r2, [r5, #4]
 801c578:	3204      	adds	r2, #4
 801c57a:	9202      	str	r2, [sp, #8]
 801c57c:	9a00      	ldr	r2, [sp, #0]
 801c57e:	2a00      	cmp	r2, #0
 801c580:	dc03      	bgt.n	801c58a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801c582:	9a03      	ldr	r2, [sp, #12]
 801c584:	2a00      	cmp	r2, #0
 801c586:	f340 8131 	ble.w	801c7ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c58a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c58c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c590:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c592:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c596:	2b00      	cmp	r3, #0
 801c598:	dd0e      	ble.n	801c5b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c59a:	1405      	asrs	r5, r0, #16
 801c59c:	d405      	bmi.n	801c5aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c59e:	4575      	cmp	r5, lr
 801c5a0:	da03      	bge.n	801c5aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c5a2:	1415      	asrs	r5, r2, #16
 801c5a4:	d401      	bmi.n	801c5aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c5a6:	4545      	cmp	r5, r8
 801c5a8:	db07      	blt.n	801c5ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c5aa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c5ac:	3b01      	subs	r3, #1
 801c5ae:	3403      	adds	r4, #3
 801c5b0:	4428      	add	r0, r5
 801c5b2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c5b4:	442a      	add	r2, r5
 801c5b6:	e7ee      	b.n	801c596 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801c5b8:	d06f      	beq.n	801c69a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c5ba:	1e5d      	subs	r5, r3, #1
 801c5bc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c5be:	fb06 0605 	mla	r6, r6, r5, r0
 801c5c2:	1436      	asrs	r6, r6, #16
 801c5c4:	d460      	bmi.n	801c688 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c5c6:	4576      	cmp	r6, lr
 801c5c8:	da5e      	bge.n	801c688 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c5ca:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c5cc:	fb06 2505 	mla	r5, r6, r5, r2
 801c5d0:	142d      	asrs	r5, r5, #16
 801c5d2:	d459      	bmi.n	801c688 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c5d4:	4545      	cmp	r5, r8
 801c5d6:	da57      	bge.n	801c688 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c5d8:	1ce5      	adds	r5, r4, #3
 801c5da:	469a      	mov	sl, r3
 801c5dc:	f1ba 0f00 	cmp.w	sl, #0
 801c5e0:	dd56      	ble.n	801c690 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801c5e2:	9901      	ldr	r1, [sp, #4]
 801c5e4:	1416      	asrs	r6, r2, #16
 801c5e6:	1407      	asrs	r7, r0, #16
 801c5e8:	fb0e 1606 	mla	r6, lr, r6, r1
 801c5ec:	9902      	ldr	r1, [sp, #8]
 801c5ee:	5df6      	ldrb	r6, [r6, r7]
 801c5f0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801c5f4:	0e37      	lsrs	r7, r6, #24
 801c5f6:	2fff      	cmp	r7, #255	; 0xff
 801c5f8:	f000 80ef 	beq.w	801c7da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801c5fc:	fa5f fc87 	uxtb.w	ip, r7
 801c600:	b3d7      	cbz	r7, 801c678 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c602:	fa1f f78c 	uxth.w	r7, ip
 801c606:	ea6f 0c0c 	mvn.w	ip, ip
 801c60a:	fa5f fb86 	uxtb.w	fp, r6
 801c60e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c612:	fa5f fc8c 	uxtb.w	ip, ip
 801c616:	fb1b fb07 	smulbb	fp, fp, r7
 801c61a:	fb09 b90c 	mla	r9, r9, ip, fp
 801c61e:	fa1f f989 	uxth.w	r9, r9
 801c622:	f109 0b01 	add.w	fp, r9, #1
 801c626:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c62a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c62e:	fb1b fb0c 	smulbb	fp, fp, ip
 801c632:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c636:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c63a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c63e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c642:	fb09 b907 	mla	r9, r9, r7, fp
 801c646:	fa1f f989 	uxth.w	r9, r9
 801c64a:	f109 0b01 	add.w	fp, r9, #1
 801c64e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c652:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c656:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c65a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c65e:	fb19 fc0c 	smulbb	ip, r9, ip
 801c662:	fb06 c607 	mla	r6, r6, r7, ip
 801c666:	b2b6      	uxth	r6, r6
 801c668:	f106 0c01 	add.w	ip, r6, #1
 801c66c:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801c670:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c674:	f805 cc01 	strb.w	ip, [r5, #-1]
 801c678:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c67a:	3503      	adds	r5, #3
 801c67c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c680:	4408      	add	r0, r1
 801c682:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c684:	440a      	add	r2, r1
 801c686:	e7a9      	b.n	801c5dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c688:	2600      	movs	r6, #0
 801c68a:	1b9d      	subs	r5, r3, r6
 801c68c:	2d00      	cmp	r5, #0
 801c68e:	dc40      	bgt.n	801c712 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c690:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c698:	441c      	add	r4, r3
 801c69a:	9b00      	ldr	r3, [sp, #0]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	f340 80a5 	ble.w	801c7ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c6a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6ac:	eeb0 6a62 	vmov.f32	s12, s5
 801c6b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c6b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6bc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c6c0:	eeb0 6a43 	vmov.f32	s12, s6
 801c6c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6c8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c6cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6e4:	ee12 2a90 	vmov	r2, s5
 801c6e8:	eef0 2a47 	vmov.f32	s5, s14
 801c6ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6f0:	ee13 2a10 	vmov	r2, s6
 801c6f4:	9311      	str	r3, [sp, #68]	; 0x44
 801c6f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6f8:	eeb0 3a67 	vmov.f32	s6, s15
 801c6fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c700:	9312      	str	r3, [sp, #72]	; 0x48
 801c702:	9b00      	ldr	r3, [sp, #0]
 801c704:	9a03      	ldr	r2, [sp, #12]
 801c706:	3b01      	subs	r3, #1
 801c708:	9300      	str	r3, [sp, #0]
 801c70a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c70c:	bf08      	it	eq
 801c70e:	4613      	moveq	r3, r2
 801c710:	e734      	b.n	801c57c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c712:	1407      	asrs	r7, r0, #16
 801c714:	d450      	bmi.n	801c7b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c716:	4577      	cmp	r7, lr
 801c718:	da4e      	bge.n	801c7b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c71a:	1415      	asrs	r5, r2, #16
 801c71c:	d44c      	bmi.n	801c7b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c71e:	4545      	cmp	r5, r8
 801c720:	da4a      	bge.n	801c7b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c722:	9901      	ldr	r1, [sp, #4]
 801c724:	fb0e 1505 	mla	r5, lr, r5, r1
 801c728:	9902      	ldr	r1, [sp, #8]
 801c72a:	5ded      	ldrb	r5, [r5, r7]
 801c72c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801c730:	0e2f      	lsrs	r7, r5, #24
 801c732:	2fff      	cmp	r7, #255	; 0xff
 801c734:	d046      	beq.n	801c7c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801c736:	fa5f f987 	uxtb.w	r9, r7
 801c73a:	b3ef      	cbz	r7, 801c7b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c73c:	fa1f fc89 	uxth.w	ip, r9
 801c740:	ea6f 0909 	mvn.w	r9, r9
 801c744:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c748:	fa5f fb85 	uxtb.w	fp, r5
 801c74c:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c750:	fa5f f989 	uxtb.w	r9, r9
 801c754:	fb1b fb0c 	smulbb	fp, fp, ip
 801c758:	fb0a ba09 	mla	sl, sl, r9, fp
 801c75c:	fa1f fa8a 	uxth.w	sl, sl
 801c760:	f10a 0b01 	add.w	fp, sl, #1
 801c764:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c768:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c76c:	f804 a007 	strb.w	sl, [r4, r7]
 801c770:	4427      	add	r7, r4
 801c772:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c776:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c77a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c77e:	fb1b fb09 	smulbb	fp, fp, r9
 801c782:	fb0a ba0c 	mla	sl, sl, ip, fp
 801c786:	fa1f fa8a 	uxth.w	sl, sl
 801c78a:	f10a 0b01 	add.w	fp, sl, #1
 801c78e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c792:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c796:	f887 a001 	strb.w	sl, [r7, #1]
 801c79a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c79e:	fb1a f909 	smulbb	r9, sl, r9
 801c7a2:	fb05 950c 	mla	r5, r5, ip, r9
 801c7a6:	b2ad      	uxth	r5, r5
 801c7a8:	f105 0901 	add.w	r9, r5, #1
 801c7ac:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801c7b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c7b4:	f887 9002 	strb.w	r9, [r7, #2]
 801c7b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c7ba:	3601      	adds	r6, #1
 801c7bc:	4408      	add	r0, r1
 801c7be:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c7c0:	440a      	add	r2, r1
 801c7c2:	e762      	b.n	801c68a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c7c4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c7c8:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801c7cc:	55e5      	strb	r5, [r4, r7]
 801c7ce:	4427      	add	r7, r4
 801c7d0:	0c2d      	lsrs	r5, r5, #16
 801c7d2:	f887 c001 	strb.w	ip, [r7, #1]
 801c7d6:	70bd      	strb	r5, [r7, #2]
 801c7d8:	e7ee      	b.n	801c7b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c7da:	0a37      	lsrs	r7, r6, #8
 801c7dc:	f805 6c03 	strb.w	r6, [r5, #-3]
 801c7e0:	0c36      	lsrs	r6, r6, #16
 801c7e2:	f805 7c02 	strb.w	r7, [r5, #-2]
 801c7e6:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c7ea:	e745      	b.n	801c678 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c7ec:	b005      	add	sp, #20
 801c7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c7f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7f6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c7f8:	9201      	str	r2, [sp, #4]
 801c7fa:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801c7fe:	6870      	ldr	r0, [r6, #4]
 801c800:	9200      	str	r2, [sp, #0]
 801c802:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c806:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801c80a:	fa1f fc85 	uxth.w	ip, r5
 801c80e:	43ed      	mvns	r5, r5
 801c810:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c814:	b2ed      	uxtb	r5, r5
 801c816:	fb00 2404 	mla	r4, r0, r4, r2
 801c81a:	6832      	ldr	r2, [r6, #0]
 801c81c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c820:	4414      	add	r4, r2
 801c822:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c824:	f8d2 8000 	ldr.w	r8, [r2]
 801c828:	2900      	cmp	r1, #0
 801c82a:	dc03      	bgt.n	801c834 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801c82c:	9a01      	ldr	r2, [sp, #4]
 801c82e:	2a00      	cmp	r2, #0
 801c830:	f340 8104 	ble.w	801ca3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c836:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c83a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c83c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c840:	2b00      	cmp	r3, #0
 801c842:	dd0f      	ble.n	801c864 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c844:	1406      	asrs	r6, r0, #16
 801c846:	d406      	bmi.n	801c856 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c848:	4576      	cmp	r6, lr
 801c84a:	da04      	bge.n	801c856 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c84c:	1416      	asrs	r6, r2, #16
 801c84e:	d402      	bmi.n	801c856 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c850:	9f00      	ldr	r7, [sp, #0]
 801c852:	42be      	cmp	r6, r7
 801c854:	db07      	blt.n	801c866 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c856:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c858:	3b01      	subs	r3, #1
 801c85a:	3403      	adds	r4, #3
 801c85c:	4430      	add	r0, r6
 801c85e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c860:	4432      	add	r2, r6
 801c862:	e7ed      	b.n	801c840 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c864:	d05f      	beq.n	801c926 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801c866:	1e5e      	subs	r6, r3, #1
 801c868:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c86a:	fb07 0706 	mla	r7, r7, r6, r0
 801c86e:	143f      	asrs	r7, r7, #16
 801c870:	d450      	bmi.n	801c914 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c872:	4577      	cmp	r7, lr
 801c874:	da4e      	bge.n	801c914 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c876:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c878:	fb07 2606 	mla	r6, r7, r6, r2
 801c87c:	1436      	asrs	r6, r6, #16
 801c87e:	d449      	bmi.n	801c914 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c880:	9f00      	ldr	r7, [sp, #0]
 801c882:	42be      	cmp	r6, r7
 801c884:	da46      	bge.n	801c914 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c886:	1ce6      	adds	r6, r4, #3
 801c888:	4699      	mov	r9, r3
 801c88a:	f1b9 0f00 	cmp.w	r9, #0
 801c88e:	f106 0603 	add.w	r6, r6, #3
 801c892:	dd43      	ble.n	801c91c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c894:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c898:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c89c:	1417      	asrs	r7, r2, #16
 801c89e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c8a2:	fb1b fb05 	smulbb	fp, fp, r5
 801c8a6:	fb0e a707 	mla	r7, lr, r7, sl
 801c8aa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c8ae:	eb08 0a07 	add.w	sl, r8, r7
 801c8b2:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c8b6:	fb07 b70c 	mla	r7, r7, ip, fp
 801c8ba:	b2bf      	uxth	r7, r7
 801c8bc:	f107 0b01 	add.w	fp, r7, #1
 801c8c0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c8c4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c8c8:	fb1b fb05 	smulbb	fp, fp, r5
 801c8cc:	123f      	asrs	r7, r7, #8
 801c8ce:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c8d2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c8d6:	fb07 b70c 	mla	r7, r7, ip, fp
 801c8da:	b2bf      	uxth	r7, r7
 801c8dc:	f107 0b01 	add.w	fp, r7, #1
 801c8e0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c8e4:	123f      	asrs	r7, r7, #8
 801c8e6:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c8ea:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c8ee:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c8f2:	fb1a fa05 	smulbb	sl, sl, r5
 801c8f6:	fb07 a70c 	mla	r7, r7, ip, sl
 801c8fa:	b2bf      	uxth	r7, r7
 801c8fc:	f107 0a01 	add.w	sl, r7, #1
 801c900:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c904:	123f      	asrs	r7, r7, #8
 801c906:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c90a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c90c:	4438      	add	r0, r7
 801c90e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c910:	443a      	add	r2, r7
 801c912:	e7ba      	b.n	801c88a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c914:	2700      	movs	r7, #0
 801c916:	1bde      	subs	r6, r3, r7
 801c918:	2e00      	cmp	r6, #0
 801c91a:	dc3f      	bgt.n	801c99c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c91c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c924:	441c      	add	r4, r3
 801c926:	2900      	cmp	r1, #0
 801c928:	f340 8088 	ble.w	801ca3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c92c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c932:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c936:	3901      	subs	r1, #1
 801c938:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c93c:	eef0 6a62 	vmov.f32	s13, s5
 801c940:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c944:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c948:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c94c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c950:	eef0 6a43 	vmov.f32	s13, s6
 801c954:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c958:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c95c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c960:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c964:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c968:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c96c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c970:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c974:	ee12 2a90 	vmov	r2, s5
 801c978:	eef0 2a47 	vmov.f32	s5, s14
 801c97c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c980:	ee13 2a10 	vmov	r2, s6
 801c984:	930f      	str	r3, [sp, #60]	; 0x3c
 801c986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c988:	eeb0 3a67 	vmov.f32	s6, s15
 801c98c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c990:	9a01      	ldr	r2, [sp, #4]
 801c992:	9310      	str	r3, [sp, #64]	; 0x40
 801c994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c996:	bf08      	it	eq
 801c998:	4613      	moveq	r3, r2
 801c99a:	e745      	b.n	801c828 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c99c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c9a0:	d446      	bmi.n	801ca30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c9a2:	45f2      	cmp	sl, lr
 801c9a4:	da44      	bge.n	801ca30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c9a6:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c9aa:	d441      	bmi.n	801ca30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c9ac:	9e00      	ldr	r6, [sp, #0]
 801c9ae:	45b1      	cmp	r9, r6
 801c9b0:	da3e      	bge.n	801ca30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c9b2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c9b6:	fb0e a909 	mla	r9, lr, r9, sl
 801c9ba:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c9be:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c9c2:	fb1b fb05 	smulbb	fp, fp, r5
 801c9c6:	eb08 0a09 	add.w	sl, r8, r9
 801c9ca:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c9ce:	fb09 b90c 	mla	r9, r9, ip, fp
 801c9d2:	fa1f f989 	uxth.w	r9, r9
 801c9d6:	f109 0b01 	add.w	fp, r9, #1
 801c9da:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c9de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9e2:	f804 9006 	strb.w	r9, [r4, r6]
 801c9e6:	4426      	add	r6, r4
 801c9e8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c9ec:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c9f0:	fb1b fb05 	smulbb	fp, fp, r5
 801c9f4:	fb09 b90c 	mla	r9, r9, ip, fp
 801c9f8:	fa1f f989 	uxth.w	r9, r9
 801c9fc:	f109 0b01 	add.w	fp, r9, #1
 801ca00:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ca04:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca08:	f886 9001 	strb.w	r9, [r6, #1]
 801ca0c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ca10:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ca14:	fb1a fa05 	smulbb	sl, sl, r5
 801ca18:	fb09 a90c 	mla	r9, r9, ip, sl
 801ca1c:	fa1f f989 	uxth.w	r9, r9
 801ca20:	f109 0a01 	add.w	sl, r9, #1
 801ca24:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ca28:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca2c:	f886 9002 	strb.w	r9, [r6, #2]
 801ca30:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ca32:	3701      	adds	r7, #1
 801ca34:	4430      	add	r0, r6
 801ca36:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ca38:	4432      	add	r2, r6
 801ca3a:	e76c      	b.n	801c916 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801ca3c:	b003      	add	sp, #12
 801ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca46:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ca48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ca4c:	9201      	str	r2, [sp, #4]
 801ca4e:	6868      	ldr	r0, [r5, #4]
 801ca50:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801ca54:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801ca58:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ca5c:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801ca60:	fb00 2404 	mla	r4, r0, r4, r2
 801ca64:	682a      	ldr	r2, [r5, #0]
 801ca66:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca6a:	4414      	add	r4, r2
 801ca6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ca6e:	f8d2 9000 	ldr.w	r9, [r2]
 801ca72:	2900      	cmp	r1, #0
 801ca74:	dc03      	bgt.n	801ca7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ca76:	9a01      	ldr	r2, [sp, #4]
 801ca78:	2a00      	cmp	r2, #0
 801ca7a:	f340 80a8 	ble.w	801cbce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801ca7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ca80:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ca84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ca86:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	dd0c      	ble.n	801caa8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801ca8e:	1405      	asrs	r5, r0, #16
 801ca90:	d405      	bmi.n	801ca9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801ca92:	4565      	cmp	r5, ip
 801ca94:	da03      	bge.n	801ca9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801ca96:	1415      	asrs	r5, r2, #16
 801ca98:	d401      	bmi.n	801ca9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801ca9a:	4575      	cmp	r5, lr
 801ca9c:	db05      	blt.n	801caaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801ca9e:	4438      	add	r0, r7
 801caa0:	4432      	add	r2, r6
 801caa2:	3b01      	subs	r3, #1
 801caa4:	3403      	adds	r4, #3
 801caa6:	e7f0      	b.n	801ca8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801caa8:	d03a      	beq.n	801cb20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801caaa:	1e5d      	subs	r5, r3, #1
 801caac:	fb07 0805 	mla	r8, r7, r5, r0
 801cab0:	ea5f 4828 	movs.w	r8, r8, asr #16
 801cab4:	d429      	bmi.n	801cb0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cab6:	45e0      	cmp	r8, ip
 801cab8:	da27      	bge.n	801cb0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801caba:	fb06 2505 	mla	r5, r6, r5, r2
 801cabe:	142d      	asrs	r5, r5, #16
 801cac0:	d423      	bmi.n	801cb0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cac2:	4575      	cmp	r5, lr
 801cac4:	da21      	bge.n	801cb0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cac6:	f104 0803 	add.w	r8, r4, #3
 801caca:	469a      	mov	sl, r3
 801cacc:	f1ba 0f00 	cmp.w	sl, #0
 801cad0:	f108 0803 	add.w	r8, r8, #3
 801cad4:	dd1f      	ble.n	801cb16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801cad6:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801cada:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cade:	1415      	asrs	r5, r2, #16
 801cae0:	4438      	add	r0, r7
 801cae2:	4432      	add	r2, r6
 801cae4:	fb0c b505 	mla	r5, ip, r5, fp
 801cae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801caec:	eb09 0b05 	add.w	fp, r9, r5
 801caf0:	f819 5005 	ldrb.w	r5, [r9, r5]
 801caf4:	f808 5c06 	strb.w	r5, [r8, #-6]
 801caf8:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801cafc:	f808 5c05 	strb.w	r5, [r8, #-5]
 801cb00:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801cb04:	f808 5c04 	strb.w	r5, [r8, #-4]
 801cb08:	e7e0      	b.n	801cacc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801cb0a:	2500      	movs	r5, #0
 801cb0c:	eba3 0805 	sub.w	r8, r3, r5
 801cb10:	f1b8 0f00 	cmp.w	r8, #0
 801cb14:	dc38      	bgt.n	801cb88 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801cb16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb1e:	441c      	add	r4, r3
 801cb20:	2900      	cmp	r1, #0
 801cb22:	dd54      	ble.n	801cbce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801cb24:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb2e:	3901      	subs	r1, #1
 801cb30:	eeb0 6a62 	vmov.f32	s12, s5
 801cb34:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cb38:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb40:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cb44:	eeb0 6a43 	vmov.f32	s12, s6
 801cb48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb4c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cb50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb54:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb58:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb68:	ee12 2a90 	vmov	r2, s5
 801cb6c:	eef0 2a47 	vmov.f32	s5, s14
 801cb70:	fb92 f7f3 	sdiv	r7, r2, r3
 801cb74:	ee13 2a10 	vmov	r2, s6
 801cb78:	eeb0 3a67 	vmov.f32	s6, s15
 801cb7c:	fb92 f6f3 	sdiv	r6, r2, r3
 801cb80:	9a01      	ldr	r2, [sp, #4]
 801cb82:	bf08      	it	eq
 801cb84:	4613      	moveq	r3, r2
 801cb86:	e774      	b.n	801ca72 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801cb88:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801cb8c:	d41b      	bmi.n	801cbc6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cb8e:	45e2      	cmp	sl, ip
 801cb90:	da19      	bge.n	801cbc6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cb92:	ea5f 4822 	movs.w	r8, r2, asr #16
 801cb96:	d416      	bmi.n	801cbc6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cb98:	45f0      	cmp	r8, lr
 801cb9a:	da14      	bge.n	801cbc6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801cb9c:	fb0c a808 	mla	r8, ip, r8, sl
 801cba0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cba4:	f819 b008 	ldrb.w	fp, [r9, r8]
 801cba8:	eb09 0a08 	add.w	sl, r9, r8
 801cbac:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801cbb0:	f804 b008 	strb.w	fp, [r4, r8]
 801cbb4:	44a0      	add	r8, r4
 801cbb6:	f89a b001 	ldrb.w	fp, [sl, #1]
 801cbba:	f888 b001 	strb.w	fp, [r8, #1]
 801cbbe:	f89a a002 	ldrb.w	sl, [sl, #2]
 801cbc2:	f888 a002 	strb.w	sl, [r8, #2]
 801cbc6:	4438      	add	r0, r7
 801cbc8:	4432      	add	r2, r6
 801cbca:	3501      	adds	r5, #1
 801cbcc:	e79e      	b.n	801cb0c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801cbce:	b003      	add	sp, #12
 801cbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cbd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbd8:	b085      	sub	sp, #20
 801cbda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cbde:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cbe0:	9202      	str	r2, [sp, #8]
 801cbe2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cbe6:	6860      	ldr	r0, [r4, #4]
 801cbe8:	9203      	str	r2, [sp, #12]
 801cbea:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801cbee:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801cbf2:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cbf6:	fb00 2505 	mla	r5, r0, r5, r2
 801cbfa:	6822      	ldr	r2, [r4, #0]
 801cbfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc00:	4415      	add	r5, r2
 801cc02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cc04:	6812      	ldr	r2, [r2, #0]
 801cc06:	9201      	str	r2, [sp, #4]
 801cc08:	2900      	cmp	r1, #0
 801cc0a:	dc03      	bgt.n	801cc14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801cc0c:	9a02      	ldr	r2, [sp, #8]
 801cc0e:	2a00      	cmp	r2, #0
 801cc10:	f340 811c 	ble.w	801ce4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cc14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cc16:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cc1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cc1c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	dd0e      	ble.n	801cc42 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cc24:	1422      	asrs	r2, r4, #16
 801cc26:	d405      	bmi.n	801cc34 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cc28:	4572      	cmp	r2, lr
 801cc2a:	da03      	bge.n	801cc34 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cc2c:	1402      	asrs	r2, r0, #16
 801cc2e:	d401      	bmi.n	801cc34 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cc30:	4542      	cmp	r2, r8
 801cc32:	db07      	blt.n	801cc44 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801cc34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc36:	3b01      	subs	r3, #1
 801cc38:	3503      	adds	r5, #3
 801cc3a:	4414      	add	r4, r2
 801cc3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cc3e:	4410      	add	r0, r2
 801cc40:	e7ee      	b.n	801cc20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801cc42:	d072      	beq.n	801cd2a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801cc44:	1e5a      	subs	r2, r3, #1
 801cc46:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cc48:	fb06 4602 	mla	r6, r6, r2, r4
 801cc4c:	1436      	asrs	r6, r6, #16
 801cc4e:	d461      	bmi.n	801cd14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cc50:	4576      	cmp	r6, lr
 801cc52:	da5f      	bge.n	801cd14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cc54:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cc56:	fb06 0202 	mla	r2, r6, r2, r0
 801cc5a:	1412      	asrs	r2, r2, #16
 801cc5c:	d45a      	bmi.n	801cd14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cc5e:	4542      	cmp	r2, r8
 801cc60:	da58      	bge.n	801cd14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cc62:	1cef      	adds	r7, r5, #3
 801cc64:	4699      	mov	r9, r3
 801cc66:	f1b9 0f00 	cmp.w	r9, #0
 801cc6a:	dd59      	ble.n	801cd20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cc6c:	1426      	asrs	r6, r4, #16
 801cc6e:	1402      	asrs	r2, r0, #16
 801cc70:	fb0e 6202 	mla	r2, lr, r2, r6
 801cc74:	9e01      	ldr	r6, [sp, #4]
 801cc76:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cc7a:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801cc7e:	d041      	beq.n	801cd04 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801cc80:	9a03      	ldr	r2, [sp, #12]
 801cc82:	fa5f fb86 	uxtb.w	fp, r6
 801cc86:	fb02 fc0c 	mul.w	ip, r2, ip
 801cc8a:	f10c 0201 	add.w	r2, ip, #1
 801cc8e:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801cc92:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801cc96:	1212      	asrs	r2, r2, #8
 801cc98:	fa1f fa82 	uxth.w	sl, r2
 801cc9c:	43d2      	mvns	r2, r2
 801cc9e:	fb1b fb0a 	smulbb	fp, fp, sl
 801cca2:	b2d2      	uxtb	r2, r2
 801cca4:	fb0c bc02 	mla	ip, ip, r2, fp
 801cca8:	fa1f fc8c 	uxth.w	ip, ip
 801ccac:	f10c 0b01 	add.w	fp, ip, #1
 801ccb0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ccb4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ccb8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ccbc:	fb1b fb0a 	smulbb	fp, fp, sl
 801ccc0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ccc4:	fb16 fa0a 	smulbb	sl, r6, sl
 801ccc8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cccc:	f807 cc03 	strb.w	ip, [r7, #-3]
 801ccd0:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801ccd4:	fb06 aa02 	mla	sl, r6, r2, sl
 801ccd8:	fb0c bc02 	mla	ip, ip, r2, fp
 801ccdc:	fa1f fa8a 	uxth.w	sl, sl
 801cce0:	fa1f fc8c 	uxth.w	ip, ip
 801cce4:	f10a 0601 	add.w	r6, sl, #1
 801cce8:	f10c 0b01 	add.w	fp, ip, #1
 801ccec:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ccf0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ccf4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ccf8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ccfc:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cd00:	f807 cc02 	strb.w	ip, [r7, #-2]
 801cd04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd06:	3703      	adds	r7, #3
 801cd08:	f109 39ff 	add.w	r9, r9, #4294967295
 801cd0c:	4414      	add	r4, r2
 801cd0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd10:	4410      	add	r0, r2
 801cd12:	e7a8      	b.n	801cc66 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cd14:	f04f 0c00 	mov.w	ip, #0
 801cd18:	eba3 020c 	sub.w	r2, r3, ip
 801cd1c:	2a00      	cmp	r2, #0
 801cd1e:	dc3d      	bgt.n	801cd9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801cd20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd28:	441d      	add	r5, r3
 801cd2a:	2900      	cmp	r1, #0
 801cd2c:	f340 808e 	ble.w	801ce4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cd30:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd3a:	3901      	subs	r1, #1
 801cd3c:	eeb0 6a62 	vmov.f32	s12, s5
 801cd40:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cd44:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cd4c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cd50:	eeb0 6a43 	vmov.f32	s12, s6
 801cd54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cd58:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cd5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd60:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cd64:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cd68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cd6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cd70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cd74:	ee12 2a90 	vmov	r2, s5
 801cd78:	eef0 2a47 	vmov.f32	s5, s14
 801cd7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd80:	ee13 2a10 	vmov	r2, s6
 801cd84:	9311      	str	r3, [sp, #68]	; 0x44
 801cd86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd88:	eeb0 3a67 	vmov.f32	s6, s15
 801cd8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd90:	9a02      	ldr	r2, [sp, #8]
 801cd92:	9312      	str	r3, [sp, #72]	; 0x48
 801cd94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd96:	bf08      	it	eq
 801cd98:	4613      	moveq	r3, r2
 801cd9a:	e735      	b.n	801cc08 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801cd9c:	1426      	asrs	r6, r4, #16
 801cd9e:	d44e      	bmi.n	801ce3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cda0:	4576      	cmp	r6, lr
 801cda2:	da4c      	bge.n	801ce3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cda4:	1402      	asrs	r2, r0, #16
 801cda6:	d44a      	bmi.n	801ce3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cda8:	4542      	cmp	r2, r8
 801cdaa:	da48      	bge.n	801ce3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cdac:	fb0e 6202 	mla	r2, lr, r2, r6
 801cdb0:	9e01      	ldr	r6, [sp, #4]
 801cdb2:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801cdb6:	0e3a      	lsrs	r2, r7, #24
 801cdb8:	d041      	beq.n	801ce3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cdba:	9e03      	ldr	r6, [sp, #12]
 801cdbc:	fa5f fb87 	uxtb.w	fp, r7
 801cdc0:	4372      	muls	r2, r6
 801cdc2:	1c56      	adds	r6, r2, #1
 801cdc4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801cdc8:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801cdcc:	1212      	asrs	r2, r2, #8
 801cdce:	f815 9006 	ldrb.w	r9, [r5, r6]
 801cdd2:	fa1f fa82 	uxth.w	sl, r2
 801cdd6:	43d2      	mvns	r2, r2
 801cdd8:	fb1b fb0a 	smulbb	fp, fp, sl
 801cddc:	b2d2      	uxtb	r2, r2
 801cdde:	fb09 b902 	mla	r9, r9, r2, fp
 801cde2:	fa1f f989 	uxth.w	r9, r9
 801cde6:	f109 0b01 	add.w	fp, r9, #1
 801cdea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cdee:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801cdf2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cdf6:	fb1b fb0a 	smulbb	fp, fp, sl
 801cdfa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cdfe:	fb17 fa0a 	smulbb	sl, r7, sl
 801ce02:	f805 9006 	strb.w	r9, [r5, r6]
 801ce06:	442e      	add	r6, r5
 801ce08:	78b7      	ldrb	r7, [r6, #2]
 801ce0a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ce0e:	fb07 aa02 	mla	sl, r7, r2, sl
 801ce12:	fb09 b902 	mla	r9, r9, r2, fp
 801ce16:	fa1f fa8a 	uxth.w	sl, sl
 801ce1a:	fa1f f989 	uxth.w	r9, r9
 801ce1e:	f10a 0701 	add.w	r7, sl, #1
 801ce22:	f109 0b01 	add.w	fp, r9, #1
 801ce26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ce2a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce2e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ce32:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce36:	f886 a002 	strb.w	sl, [r6, #2]
 801ce3a:	f886 9001 	strb.w	r9, [r6, #1]
 801ce3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ce40:	f10c 0c01 	add.w	ip, ip, #1
 801ce44:	4414      	add	r4, r2
 801ce46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ce48:	4410      	add	r0, r2
 801ce4a:	e765      	b.n	801cd18 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801ce4c:	b005      	add	sp, #20
 801ce4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ce52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce56:	b085      	sub	sp, #20
 801ce58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ce5e:	9203      	str	r2, [sp, #12]
 801ce60:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ce64:	6860      	ldr	r0, [r4, #4]
 801ce66:	9201      	str	r2, [sp, #4]
 801ce68:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ce6c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ce70:	fb00 2505 	mla	r5, r0, r5, r2
 801ce74:	6822      	ldr	r2, [r4, #0]
 801ce76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce7a:	4415      	add	r5, r2
 801ce7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ce7e:	6812      	ldr	r2, [r2, #0]
 801ce80:	9202      	str	r2, [sp, #8]
 801ce82:	2900      	cmp	r1, #0
 801ce84:	dc03      	bgt.n	801ce8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ce86:	9a03      	ldr	r2, [sp, #12]
 801ce88:	2a00      	cmp	r2, #0
 801ce8a:	f340 8122 	ble.w	801d0d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ce8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce90:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ce94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ce96:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	dd0f      	ble.n	801cebe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ce9e:	1422      	asrs	r2, r4, #16
 801cea0:	d406      	bmi.n	801ceb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cea2:	4572      	cmp	r2, lr
 801cea4:	da04      	bge.n	801ceb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cea6:	1402      	asrs	r2, r0, #16
 801cea8:	d402      	bmi.n	801ceb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ceaa:	9e01      	ldr	r6, [sp, #4]
 801ceac:	42b2      	cmp	r2, r6
 801ceae:	db07      	blt.n	801cec0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ceb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ceb2:	3b01      	subs	r3, #1
 801ceb4:	3503      	adds	r5, #3
 801ceb6:	4414      	add	r4, r2
 801ceb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ceba:	4410      	add	r0, r2
 801cebc:	e7ed      	b.n	801ce9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801cebe:	d06e      	beq.n	801cf9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cec0:	1e5a      	subs	r2, r3, #1
 801cec2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cec4:	fb06 4602 	mla	r6, r6, r2, r4
 801cec8:	1436      	asrs	r6, r6, #16
 801ceca:	d45d      	bmi.n	801cf88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cecc:	4576      	cmp	r6, lr
 801cece:	da5b      	bge.n	801cf88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ced0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ced2:	fb06 0202 	mla	r2, r6, r2, r0
 801ced6:	1412      	asrs	r2, r2, #16
 801ced8:	d456      	bmi.n	801cf88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ceda:	9e01      	ldr	r6, [sp, #4]
 801cedc:	42b2      	cmp	r2, r6
 801cede:	da53      	bge.n	801cf88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cee0:	1cee      	adds	r6, r5, #3
 801cee2:	469a      	mov	sl, r3
 801cee4:	f1ba 0f00 	cmp.w	sl, #0
 801cee8:	dd54      	ble.n	801cf94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ceea:	1427      	asrs	r7, r4, #16
 801ceec:	1402      	asrs	r2, r0, #16
 801ceee:	fb0e 7202 	mla	r2, lr, r2, r7
 801cef2:	9f02      	ldr	r7, [sp, #8]
 801cef4:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801cef8:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801cefc:	d03c      	beq.n	801cf78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801cefe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cf02:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cf06:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cf0a:	fa5f f28c 	uxtb.w	r2, ip
 801cf0e:	b2ff      	uxtb	r7, r7
 801cf10:	f000 80d8 	beq.w	801d0c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801cf14:	fa1f f882 	uxth.w	r8, r2
 801cf18:	43d2      	mvns	r2, r2
 801cf1a:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801cf1e:	fb17 f708 	smulbb	r7, r7, r8
 801cf22:	b2d2      	uxtb	r2, r2
 801cf24:	fb19 f908 	smulbb	r9, r9, r8
 801cf28:	fb0c 7702 	mla	r7, ip, r2, r7
 801cf2c:	fb1b f808 	smulbb	r8, fp, r8
 801cf30:	b2bf      	uxth	r7, r7
 801cf32:	f107 0c01 	add.w	ip, r7, #1
 801cf36:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801cf3a:	123f      	asrs	r7, r7, #8
 801cf3c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801cf40:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801cf44:	fb07 9902 	mla	r9, r7, r2, r9
 801cf48:	fa1f f989 	uxth.w	r9, r9
 801cf4c:	f109 0701 	add.w	r7, r9, #1
 801cf50:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cf54:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801cf58:	fb07 8802 	mla	r8, r7, r2, r8
 801cf5c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cf60:	fa1f f888 	uxth.w	r8, r8
 801cf64:	f806 9c02 	strb.w	r9, [r6, #-2]
 801cf68:	f108 0201 	add.w	r2, r8, #1
 801cf6c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801cf70:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cf74:	f806 8c01 	strb.w	r8, [r6, #-1]
 801cf78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cf7a:	3603      	adds	r6, #3
 801cf7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cf80:	4414      	add	r4, r2
 801cf82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf84:	4410      	add	r0, r2
 801cf86:	e7ad      	b.n	801cee4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cf88:	f04f 0c00 	mov.w	ip, #0
 801cf8c:	eba3 020c 	sub.w	r2, r3, ip
 801cf90:	2a00      	cmp	r2, #0
 801cf92:	dc3d      	bgt.n	801d010 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801cf94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cf98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf9c:	441d      	add	r5, r3
 801cf9e:	2900      	cmp	r1, #0
 801cfa0:	f340 8097 	ble.w	801d0d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801cfa4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cfa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cfae:	3901      	subs	r1, #1
 801cfb0:	eeb0 6a62 	vmov.f32	s12, s5
 801cfb4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cfb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cfbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cfc0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cfc4:	eeb0 6a43 	vmov.f32	s12, s6
 801cfc8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cfcc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cfd0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cfd4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cfd8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cfdc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cfe0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cfe4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cfe8:	ee12 2a90 	vmov	r2, s5
 801cfec:	eef0 2a47 	vmov.f32	s5, s14
 801cff0:	fb92 f3f3 	sdiv	r3, r2, r3
 801cff4:	ee13 2a10 	vmov	r2, s6
 801cff8:	9311      	str	r3, [sp, #68]	; 0x44
 801cffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cffc:	eeb0 3a67 	vmov.f32	s6, s15
 801d000:	fb92 f3f3 	sdiv	r3, r2, r3
 801d004:	9a03      	ldr	r2, [sp, #12]
 801d006:	9312      	str	r3, [sp, #72]	; 0x48
 801d008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d00a:	bf08      	it	eq
 801d00c:	4613      	moveq	r3, r2
 801d00e:	e738      	b.n	801ce82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801d010:	1426      	asrs	r6, r4, #16
 801d012:	d448      	bmi.n	801d0a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d014:	4576      	cmp	r6, lr
 801d016:	da46      	bge.n	801d0a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d018:	1402      	asrs	r2, r0, #16
 801d01a:	d444      	bmi.n	801d0a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d01c:	9f01      	ldr	r7, [sp, #4]
 801d01e:	42ba      	cmp	r2, r7
 801d020:	da41      	bge.n	801d0a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d022:	fb0e 6202 	mla	r2, lr, r2, r6
 801d026:	9e02      	ldr	r6, [sp, #8]
 801d028:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d02c:	0e3a      	lsrs	r2, r7, #24
 801d02e:	d03a      	beq.n	801d0a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d030:	2aff      	cmp	r2, #255	; 0xff
 801d032:	b2d6      	uxtb	r6, r2
 801d034:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d038:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d03c:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801d040:	b2ff      	uxtb	r7, r7
 801d042:	d037      	beq.n	801d0b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801d044:	fa1f f986 	uxth.w	r9, r6
 801d048:	4462      	add	r2, ip
 801d04a:	43f6      	mvns	r6, r6
 801d04c:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d050:	fb17 f709 	smulbb	r7, r7, r9
 801d054:	fb1a fa09 	smulbb	sl, sl, r9
 801d058:	b2f6      	uxtb	r6, r6
 801d05a:	fb1b f909 	smulbb	r9, fp, r9
 801d05e:	fb08 7706 	mla	r7, r8, r6, r7
 801d062:	b2bf      	uxth	r7, r7
 801d064:	f107 0801 	add.w	r8, r7, #1
 801d068:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d06c:	123f      	asrs	r7, r7, #8
 801d06e:	54af      	strb	r7, [r5, r2]
 801d070:	442a      	add	r2, r5
 801d072:	7857      	ldrb	r7, [r2, #1]
 801d074:	fb07 aa06 	mla	sl, r7, r6, sl
 801d078:	fa1f fa8a 	uxth.w	sl, sl
 801d07c:	f10a 0701 	add.w	r7, sl, #1
 801d080:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d084:	7897      	ldrb	r7, [r2, #2]
 801d086:	fb07 9906 	mla	r9, r7, r6, r9
 801d08a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d08e:	fa1f f989 	uxth.w	r9, r9
 801d092:	f882 a001 	strb.w	sl, [r2, #1]
 801d096:	f109 0601 	add.w	r6, r9, #1
 801d09a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d09e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0a2:	f882 9002 	strb.w	r9, [r2, #2]
 801d0a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d0a8:	f10c 0c01 	add.w	ip, ip, #1
 801d0ac:	4414      	add	r4, r2
 801d0ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0b0:	4410      	add	r0, r2
 801d0b2:	e76b      	b.n	801cf8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801d0b4:	4462      	add	r2, ip
 801d0b6:	54af      	strb	r7, [r5, r2]
 801d0b8:	442a      	add	r2, r5
 801d0ba:	f882 a001 	strb.w	sl, [r2, #1]
 801d0be:	f882 b002 	strb.w	fp, [r2, #2]
 801d0c2:	e7f0      	b.n	801d0a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801d0c4:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d0c8:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d0cc:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d0d0:	e752      	b.n	801cf78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801d0d2:	b005      	add	sp, #20
 801d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0dc:	b087      	sub	sp, #28
 801d0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d0e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d0e4:	9204      	str	r2, [sp, #16]
 801d0e6:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801d0ea:	6860      	ldr	r0, [r4, #4]
 801d0ec:	9205      	str	r2, [sp, #20]
 801d0ee:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801d0f2:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801d0f6:	9101      	str	r1, [sp, #4]
 801d0f8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d0fc:	fb00 2505 	mla	r5, r0, r5, r2
 801d100:	6822      	ldr	r2, [r4, #0]
 801d102:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d106:	4415      	add	r5, r2
 801d108:	f10e 0201 	add.w	r2, lr, #1
 801d10c:	f022 0201 	bic.w	r2, r2, #1
 801d110:	9202      	str	r2, [sp, #8]
 801d112:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d114:	6812      	ldr	r2, [r2, #0]
 801d116:	9203      	str	r2, [sp, #12]
 801d118:	9a01      	ldr	r2, [sp, #4]
 801d11a:	2a00      	cmp	r2, #0
 801d11c:	dc03      	bgt.n	801d126 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801d11e:	9a04      	ldr	r2, [sp, #16]
 801d120:	2a00      	cmp	r2, #0
 801d122:	f340 8132 	ble.w	801d38a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d126:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d128:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d12c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d12e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d132:	2b00      	cmp	r3, #0
 801d134:	dd0e      	ble.n	801d154 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d136:	1422      	asrs	r2, r4, #16
 801d138:	d405      	bmi.n	801d146 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d13a:	4596      	cmp	lr, r2
 801d13c:	dd03      	ble.n	801d146 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d13e:	1402      	asrs	r2, r0, #16
 801d140:	d401      	bmi.n	801d146 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d142:	4542      	cmp	r2, r8
 801d144:	db07      	blt.n	801d156 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801d146:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d148:	3b01      	subs	r3, #1
 801d14a:	3503      	adds	r5, #3
 801d14c:	4414      	add	r4, r2
 801d14e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d150:	4410      	add	r0, r2
 801d152:	e7ee      	b.n	801d132 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801d154:	d010      	beq.n	801d178 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d156:	1e5a      	subs	r2, r3, #1
 801d158:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d15a:	fb06 4602 	mla	r6, r6, r2, r4
 801d15e:	1436      	asrs	r6, r6, #16
 801d160:	d546      	bpl.n	801d1f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d162:	4699      	mov	r9, r3
 801d164:	462e      	mov	r6, r5
 801d166:	f1b9 0f00 	cmp.w	r9, #0
 801d16a:	f300 80ac 	bgt.w	801d2c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801d16e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d172:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d176:	441d      	add	r5, r3
 801d178:	9b01      	ldr	r3, [sp, #4]
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	f340 8105 	ble.w	801d38a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d180:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d186:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d18a:	eeb0 6a62 	vmov.f32	s12, s5
 801d18e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d192:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d196:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d19a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d19e:	eeb0 6a43 	vmov.f32	s12, s6
 801d1a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d1a6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d1aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d1ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d1b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d1b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d1ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d1be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d1c2:	ee12 2a90 	vmov	r2, s5
 801d1c6:	eef0 2a47 	vmov.f32	s5, s14
 801d1ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1ce:	ee13 2a10 	vmov	r2, s6
 801d1d2:	9313      	str	r3, [sp, #76]	; 0x4c
 801d1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d1d6:	eeb0 3a67 	vmov.f32	s6, s15
 801d1da:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1de:	9314      	str	r3, [sp, #80]	; 0x50
 801d1e0:	9b01      	ldr	r3, [sp, #4]
 801d1e2:	9a04      	ldr	r2, [sp, #16]
 801d1e4:	3b01      	subs	r3, #1
 801d1e6:	9301      	str	r3, [sp, #4]
 801d1e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d1ea:	bf08      	it	eq
 801d1ec:	4613      	moveq	r3, r2
 801d1ee:	e793      	b.n	801d118 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801d1f0:	45b6      	cmp	lr, r6
 801d1f2:	ddb6      	ble.n	801d162 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d1f4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d1f6:	fb06 0202 	mla	r2, r6, r2, r0
 801d1fa:	1412      	asrs	r2, r2, #16
 801d1fc:	d4b1      	bmi.n	801d162 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d1fe:	4542      	cmp	r2, r8
 801d200:	daaf      	bge.n	801d162 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d202:	1cee      	adds	r6, r5, #3
 801d204:	4699      	mov	r9, r3
 801d206:	f1b9 0f00 	cmp.w	r9, #0
 801d20a:	ddb0      	ble.n	801d16e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d20c:	1422      	asrs	r2, r4, #16
 801d20e:	9902      	ldr	r1, [sp, #8]
 801d210:	1407      	asrs	r7, r0, #16
 801d212:	fb01 2707 	mla	r7, r1, r7, r2
 801d216:	9903      	ldr	r1, [sp, #12]
 801d218:	087a      	lsrs	r2, r7, #1
 801d21a:	5c8a      	ldrb	r2, [r1, r2]
 801d21c:	07f9      	lsls	r1, r7, #31
 801d21e:	bf54      	ite	pl
 801d220:	f002 020f 	andpl.w	r2, r2, #15
 801d224:	1112      	asrmi	r2, r2, #4
 801d226:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d22a:	b2d2      	uxtb	r2, r2
 801d22c:	2a00      	cmp	r2, #0
 801d22e:	d042      	beq.n	801d2b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801d230:	4957      	ldr	r1, [pc, #348]	; (801d390 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d232:	680f      	ldr	r7, [r1, #0]
 801d234:	9905      	ldr	r1, [sp, #20]
 801d236:	fa5f fb87 	uxtb.w	fp, r7
 801d23a:	434a      	muls	r2, r1
 801d23c:	f102 0c01 	add.w	ip, r2, #1
 801d240:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d244:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d248:	1212      	asrs	r2, r2, #8
 801d24a:	fa1f fa82 	uxth.w	sl, r2
 801d24e:	43d2      	mvns	r2, r2
 801d250:	fb1b fb0a 	smulbb	fp, fp, sl
 801d254:	b2d2      	uxtb	r2, r2
 801d256:	fb0c bc02 	mla	ip, ip, r2, fp
 801d25a:	fa1f fc8c 	uxth.w	ip, ip
 801d25e:	f10c 0b01 	add.w	fp, ip, #1
 801d262:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d266:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d26a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d26e:	fb1b fb0a 	smulbb	fp, fp, sl
 801d272:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d276:	fb17 fa0a 	smulbb	sl, r7, sl
 801d27a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d27e:	f806 cc03 	strb.w	ip, [r6, #-3]
 801d282:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801d286:	fb07 aa02 	mla	sl, r7, r2, sl
 801d28a:	fb0c bc02 	mla	ip, ip, r2, fp
 801d28e:	fa1f fa8a 	uxth.w	sl, sl
 801d292:	fa1f fc8c 	uxth.w	ip, ip
 801d296:	f10a 0701 	add.w	r7, sl, #1
 801d29a:	f10c 0b01 	add.w	fp, ip, #1
 801d29e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d2a2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d2a6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d2aa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d2ae:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d2b2:	f806 cc02 	strb.w	ip, [r6, #-2]
 801d2b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d2b8:	3603      	adds	r6, #3
 801d2ba:	f109 39ff 	add.w	r9, r9, #4294967295
 801d2be:	4414      	add	r4, r2
 801d2c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d2c2:	4410      	add	r0, r2
 801d2c4:	e79f      	b.n	801d206 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801d2c6:	1422      	asrs	r2, r4, #16
 801d2c8:	d457      	bmi.n	801d37a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d2ca:	4596      	cmp	lr, r2
 801d2cc:	dd55      	ble.n	801d37a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d2ce:	1407      	asrs	r7, r0, #16
 801d2d0:	d453      	bmi.n	801d37a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d2d2:	4547      	cmp	r7, r8
 801d2d4:	da51      	bge.n	801d37a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d2d6:	9902      	ldr	r1, [sp, #8]
 801d2d8:	fb07 2701 	mla	r7, r7, r1, r2
 801d2dc:	9903      	ldr	r1, [sp, #12]
 801d2de:	087a      	lsrs	r2, r7, #1
 801d2e0:	07ff      	lsls	r7, r7, #31
 801d2e2:	5c8a      	ldrb	r2, [r1, r2]
 801d2e4:	bf54      	ite	pl
 801d2e6:	f002 020f 	andpl.w	r2, r2, #15
 801d2ea:	1112      	asrmi	r2, r2, #4
 801d2ec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d2f0:	b2d2      	uxtb	r2, r2
 801d2f2:	2a00      	cmp	r2, #0
 801d2f4:	d041      	beq.n	801d37a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d2f6:	4926      	ldr	r1, [pc, #152]	; (801d390 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d2f8:	680f      	ldr	r7, [r1, #0]
 801d2fa:	9905      	ldr	r1, [sp, #20]
 801d2fc:	fa5f fb87 	uxtb.w	fp, r7
 801d300:	434a      	muls	r2, r1
 801d302:	f102 0c01 	add.w	ip, r2, #1
 801d306:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d30a:	f896 c000 	ldrb.w	ip, [r6]
 801d30e:	1212      	asrs	r2, r2, #8
 801d310:	fa1f fa82 	uxth.w	sl, r2
 801d314:	43d2      	mvns	r2, r2
 801d316:	fb1b fb0a 	smulbb	fp, fp, sl
 801d31a:	b2d2      	uxtb	r2, r2
 801d31c:	fb0c bc02 	mla	ip, ip, r2, fp
 801d320:	fa1f fc8c 	uxth.w	ip, ip
 801d324:	f10c 0b01 	add.w	fp, ip, #1
 801d328:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d32c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d330:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d334:	fb1b fb0a 	smulbb	fp, fp, sl
 801d338:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d33c:	fb17 fa0a 	smulbb	sl, r7, sl
 801d340:	78b7      	ldrb	r7, [r6, #2]
 801d342:	f886 c000 	strb.w	ip, [r6]
 801d346:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d34a:	fb07 aa02 	mla	sl, r7, r2, sl
 801d34e:	fb0c bc02 	mla	ip, ip, r2, fp
 801d352:	fa1f fa8a 	uxth.w	sl, sl
 801d356:	fa1f fc8c 	uxth.w	ip, ip
 801d35a:	f10a 0701 	add.w	r7, sl, #1
 801d35e:	f10c 0b01 	add.w	fp, ip, #1
 801d362:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d366:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d36a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d36e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d372:	f886 a002 	strb.w	sl, [r6, #2]
 801d376:	f886 c001 	strb.w	ip, [r6, #1]
 801d37a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d37c:	3603      	adds	r6, #3
 801d37e:	f109 39ff 	add.w	r9, r9, #4294967295
 801d382:	4414      	add	r4, r2
 801d384:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d386:	4410      	add	r0, r2
 801d388:	e6ed      	b.n	801d166 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801d38a:	b007      	add	sp, #28
 801d38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d390:	2000bbb8 	.word	0x2000bbb8

0801d394 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d398:	b087      	sub	sp, #28
 801d39a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d39e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d3a0:	9205      	str	r2, [sp, #20]
 801d3a2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801d3a6:	6860      	ldr	r0, [r4, #4]
 801d3a8:	9202      	str	r2, [sp, #8]
 801d3aa:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801d3ae:	9101      	str	r1, [sp, #4]
 801d3b0:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801d3b4:	fb00 2606 	mla	r6, r0, r6, r2
 801d3b8:	6822      	ldr	r2, [r4, #0]
 801d3ba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d3be:	4416      	add	r6, r2
 801d3c0:	f108 0201 	add.w	r2, r8, #1
 801d3c4:	f022 0201 	bic.w	r2, r2, #1
 801d3c8:	9203      	str	r2, [sp, #12]
 801d3ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d3cc:	6812      	ldr	r2, [r2, #0]
 801d3ce:	9204      	str	r2, [sp, #16]
 801d3d0:	9a01      	ldr	r2, [sp, #4]
 801d3d2:	2a00      	cmp	r2, #0
 801d3d4:	dc03      	bgt.n	801d3de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d3d6:	9a05      	ldr	r2, [sp, #20]
 801d3d8:	2a00      	cmp	r2, #0
 801d3da:	f340 813a 	ble.w	801d652 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d3de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d3e0:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d3e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d3e6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	dd0f      	ble.n	801d40e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d3ee:	142a      	asrs	r2, r5, #16
 801d3f0:	d406      	bmi.n	801d400 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d3f2:	4590      	cmp	r8, r2
 801d3f4:	dd04      	ble.n	801d400 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d3f6:	1422      	asrs	r2, r4, #16
 801d3f8:	d402      	bmi.n	801d400 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d3fa:	9802      	ldr	r0, [sp, #8]
 801d3fc:	4282      	cmp	r2, r0
 801d3fe:	db07      	blt.n	801d410 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d400:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d402:	3b01      	subs	r3, #1
 801d404:	3603      	adds	r6, #3
 801d406:	4415      	add	r5, r2
 801d408:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d40a:	4414      	add	r4, r2
 801d40c:	e7ed      	b.n	801d3ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d40e:	d073      	beq.n	801d4f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801d410:	1e5a      	subs	r2, r3, #1
 801d412:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d414:	fb00 5002 	mla	r0, r0, r2, r5
 801d418:	1400      	asrs	r0, r0, #16
 801d41a:	d464      	bmi.n	801d4e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d41c:	4580      	cmp	r8, r0
 801d41e:	dd62      	ble.n	801d4e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d420:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d422:	fb00 4202 	mla	r2, r0, r2, r4
 801d426:	1412      	asrs	r2, r2, #16
 801d428:	d45d      	bmi.n	801d4e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d42a:	9802      	ldr	r0, [sp, #8]
 801d42c:	4282      	cmp	r2, r0
 801d42e:	da5a      	bge.n	801d4e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d430:	1cf0      	adds	r0, r6, #3
 801d432:	469a      	mov	sl, r3
 801d434:	f1ba 0f00 	cmp.w	sl, #0
 801d438:	dd59      	ble.n	801d4ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801d43a:	142a      	asrs	r2, r5, #16
 801d43c:	9903      	ldr	r1, [sp, #12]
 801d43e:	1427      	asrs	r7, r4, #16
 801d440:	fb01 2707 	mla	r7, r1, r7, r2
 801d444:	9904      	ldr	r1, [sp, #16]
 801d446:	087a      	lsrs	r2, r7, #1
 801d448:	5c8a      	ldrb	r2, [r1, r2]
 801d44a:	07f9      	lsls	r1, r7, #31
 801d44c:	bf54      	ite	pl
 801d44e:	f002 020f 	andpl.w	r2, r2, #15
 801d452:	1112      	asrmi	r2, r2, #4
 801d454:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d458:	b2d2      	uxtb	r2, r2
 801d45a:	2a00      	cmp	r2, #0
 801d45c:	d03b      	beq.n	801d4d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d45e:	497e      	ldr	r1, [pc, #504]	; (801d658 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d460:	2aff      	cmp	r2, #255	; 0xff
 801d462:	680f      	ldr	r7, [r1, #0]
 801d464:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d468:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d46c:	b2ff      	uxtb	r7, r7
 801d46e:	f000 80e9 	beq.w	801d644 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d472:	fa1f fe82 	uxth.w	lr, r2
 801d476:	43d2      	mvns	r2, r2
 801d478:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801d47c:	fb17 f70e 	smulbb	r7, r7, lr
 801d480:	b2d2      	uxtb	r2, r2
 801d482:	fb19 f90e 	smulbb	r9, r9, lr
 801d486:	fb0c 7702 	mla	r7, ip, r2, r7
 801d48a:	fb1b fe0e 	smulbb	lr, fp, lr
 801d48e:	b2bf      	uxth	r7, r7
 801d490:	f107 0c01 	add.w	ip, r7, #1
 801d494:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d498:	123f      	asrs	r7, r7, #8
 801d49a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d49e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d4a2:	fb07 9902 	mla	r9, r7, r2, r9
 801d4a6:	fa1f f989 	uxth.w	r9, r9
 801d4aa:	f109 0701 	add.w	r7, r9, #1
 801d4ae:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d4b2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d4b6:	fb07 ee02 	mla	lr, r7, r2, lr
 801d4ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d4be:	fa1f fe8e 	uxth.w	lr, lr
 801d4c2:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d4c6:	f10e 0201 	add.w	r2, lr, #1
 801d4ca:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d4ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d4d2:	f800 ec01 	strb.w	lr, [r0, #-1]
 801d4d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d4d8:	3003      	adds	r0, #3
 801d4da:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d4de:	4415      	add	r5, r2
 801d4e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d4e2:	4414      	add	r4, r2
 801d4e4:	e7a6      	b.n	801d434 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d4e6:	2700      	movs	r7, #0
 801d4e8:	1bda      	subs	r2, r3, r7
 801d4ea:	2a00      	cmp	r2, #0
 801d4ec:	dc40      	bgt.n	801d570 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d4ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4f6:	441e      	add	r6, r3
 801d4f8:	9b01      	ldr	r3, [sp, #4]
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	f340 80a9 	ble.w	801d652 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d500:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d506:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d50a:	eeb0 6a62 	vmov.f32	s12, s5
 801d50e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d512:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d516:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d51a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d51e:	eeb0 6a43 	vmov.f32	s12, s6
 801d522:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d526:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d52a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d52e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d532:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d536:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d53a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d53e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d542:	ee12 2a90 	vmov	r2, s5
 801d546:	eef0 2a47 	vmov.f32	s5, s14
 801d54a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d54e:	ee13 2a10 	vmov	r2, s6
 801d552:	9313      	str	r3, [sp, #76]	; 0x4c
 801d554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d556:	eeb0 3a67 	vmov.f32	s6, s15
 801d55a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d55e:	9314      	str	r3, [sp, #80]	; 0x50
 801d560:	9b01      	ldr	r3, [sp, #4]
 801d562:	9a05      	ldr	r2, [sp, #20]
 801d564:	3b01      	subs	r3, #1
 801d566:	9301      	str	r3, [sp, #4]
 801d568:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d56a:	bf08      	it	eq
 801d56c:	4613      	moveq	r3, r2
 801d56e:	e72f      	b.n	801d3d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d570:	142a      	asrs	r2, r5, #16
 801d572:	d458      	bmi.n	801d626 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d574:	4590      	cmp	r8, r2
 801d576:	dd56      	ble.n	801d626 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d578:	1420      	asrs	r0, r4, #16
 801d57a:	d454      	bmi.n	801d626 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d57c:	9902      	ldr	r1, [sp, #8]
 801d57e:	4288      	cmp	r0, r1
 801d580:	da51      	bge.n	801d626 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d582:	9903      	ldr	r1, [sp, #12]
 801d584:	fb00 2001 	mla	r0, r0, r1, r2
 801d588:	9904      	ldr	r1, [sp, #16]
 801d58a:	0842      	lsrs	r2, r0, #1
 801d58c:	07c0      	lsls	r0, r0, #31
 801d58e:	5c8a      	ldrb	r2, [r1, r2]
 801d590:	bf54      	ite	pl
 801d592:	f002 020f 	andpl.w	r2, r2, #15
 801d596:	1112      	asrmi	r2, r2, #4
 801d598:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d59c:	b2d2      	uxtb	r2, r2
 801d59e:	2a00      	cmp	r2, #0
 801d5a0:	d041      	beq.n	801d626 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d5a2:	492d      	ldr	r1, [pc, #180]	; (801d658 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d5a4:	2aff      	cmp	r2, #255	; 0xff
 801d5a6:	6808      	ldr	r0, [r1, #0]
 801d5a8:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d5ac:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d5b0:	fa5f fc80 	uxtb.w	ip, r0
 801d5b4:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d5b8:	d03b      	beq.n	801d632 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801d5ba:	fa1f f982 	uxth.w	r9, r2
 801d5be:	4438      	add	r0, r7
 801d5c0:	43d2      	mvns	r2, r2
 801d5c2:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d5c6:	fb1c fc09 	smulbb	ip, ip, r9
 801d5ca:	fb1a fa09 	smulbb	sl, sl, r9
 801d5ce:	b2d2      	uxtb	r2, r2
 801d5d0:	fb1b f909 	smulbb	r9, fp, r9
 801d5d4:	fb0e cc02 	mla	ip, lr, r2, ip
 801d5d8:	fa1f fc8c 	uxth.w	ip, ip
 801d5dc:	f10c 0e01 	add.w	lr, ip, #1
 801d5e0:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d5e4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d5e8:	f806 c000 	strb.w	ip, [r6, r0]
 801d5ec:	4430      	add	r0, r6
 801d5ee:	f890 c001 	ldrb.w	ip, [r0, #1]
 801d5f2:	fb0c aa02 	mla	sl, ip, r2, sl
 801d5f6:	fa1f fa8a 	uxth.w	sl, sl
 801d5fa:	f10a 0c01 	add.w	ip, sl, #1
 801d5fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d602:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d606:	fb0c 9902 	mla	r9, ip, r2, r9
 801d60a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d60e:	fa1f f989 	uxth.w	r9, r9
 801d612:	f880 a001 	strb.w	sl, [r0, #1]
 801d616:	f109 0201 	add.w	r2, r9, #1
 801d61a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d61e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d622:	f880 9002 	strb.w	r9, [r0, #2]
 801d626:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d628:	3701      	adds	r7, #1
 801d62a:	4415      	add	r5, r2
 801d62c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d62e:	4414      	add	r4, r2
 801d630:	e75a      	b.n	801d4e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d632:	4438      	add	r0, r7
 801d634:	f806 c000 	strb.w	ip, [r6, r0]
 801d638:	4430      	add	r0, r6
 801d63a:	f880 a001 	strb.w	sl, [r0, #1]
 801d63e:	f880 b002 	strb.w	fp, [r0, #2]
 801d642:	e7f0      	b.n	801d626 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d644:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d648:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d64c:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d650:	e741      	b.n	801d4d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d652:	b007      	add	sp, #28
 801d654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d658:	2000bbb8 	.word	0x2000bbb8

0801d65c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d65c:	4770      	bx	lr

0801d65e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d65e:	4770      	bx	lr

0801d660 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d660:	4770      	bx	lr

0801d662 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d662:	4770      	bx	lr

0801d664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d664:	4770      	bx	lr

0801d666 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d666:	4770      	bx	lr

0801d668 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d668:	4770      	bx	lr

0801d66a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d66a:	4770      	bx	lr

0801d66c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d66c:	4770      	bx	lr

0801d66e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d66e:	4770      	bx	lr

0801d670 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d670:	4770      	bx	lr

0801d672 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d672:	4770      	bx	lr

0801d674 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d674:	4770      	bx	lr

0801d676 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d676:	4770      	bx	lr

0801d678 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d678:	4770      	bx	lr

0801d67a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d67a:	4770      	bx	lr

0801d67c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d67c:	4770      	bx	lr

0801d67e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d67e:	4770      	bx	lr

0801d680 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d680:	4770      	bx	lr

0801d682 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d682:	4770      	bx	lr

0801d684 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d684:	2bff      	cmp	r3, #255	; 0xff
 801d686:	b508      	push	{r3, lr}
 801d688:	d04f      	beq.n	801d72a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d68a:	2a2c      	cmp	r2, #44	; 0x2c
 801d68c:	d032      	beq.n	801d6f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801d68e:	d80f      	bhi.n	801d6b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801d690:	2a08      	cmp	r2, #8
 801d692:	d046      	beq.n	801d722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d694:	d805      	bhi.n	801d6a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d696:	2a04      	cmp	r2, #4
 801d698:	d041      	beq.n	801d71e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d69a:	2a05      	cmp	r2, #5
 801d69c:	d03d      	beq.n	801d71a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d69e:	2000      	movs	r0, #0
 801d6a0:	e027      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6a2:	2a0a      	cmp	r2, #10
 801d6a4:	d03d      	beq.n	801d722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d6a6:	d301      	bcc.n	801d6ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d6a8:	2a0b      	cmp	r2, #11
 801d6aa:	d1f8      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d6ac:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d6ae:	e020      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6b0:	2a30      	cmp	r2, #48	; 0x30
 801d6b2:	d038      	beq.n	801d726 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d6b4:	d808      	bhi.n	801d6c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d6b6:	2a2e      	cmp	r2, #46	; 0x2e
 801d6b8:	684b      	ldr	r3, [r1, #4]
 801d6ba:	d029      	beq.n	801d710 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d6bc:	d90b      	bls.n	801d6d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d6be:	781b      	ldrb	r3, [r3, #0]
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d1ec      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d6c4:	6a00      	ldr	r0, [r0, #32]
 801d6c6:	e014      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6c8:	2a32      	cmp	r2, #50	; 0x32
 801d6ca:	d02c      	beq.n	801d726 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d6cc:	d301      	bcc.n	801d6d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d6ce:	2a33      	cmp	r2, #51	; 0x33
 801d6d0:	d1e5      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d6d2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d6d4:	e00d      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d6d6:	781b      	ldrb	r3, [r3, #0]
 801d6d8:	2b01      	cmp	r3, #1
 801d6da:	d009      	beq.n	801d6f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d6dc:	d3f2      	bcc.n	801d6c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d6de:	2b02      	cmp	r3, #2
 801d6e0:	d1dd      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d6e2:	4b39      	ldr	r3, [pc, #228]	; (801d7c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d6e4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801d6e8:	4a38      	ldr	r2, [pc, #224]	; (801d7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d6ea:	4839      	ldr	r0, [pc, #228]	; (801d7d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d6ec:	f007 ff3e 	bl	802556c <__assert_func>
 801d6f0:	6900      	ldr	r0, [r0, #16]
 801d6f2:	bd08      	pop	{r3, pc}
 801d6f4:	684b      	ldr	r3, [r1, #4]
 801d6f6:	781b      	ldrb	r3, [r3, #0]
 801d6f8:	2b01      	cmp	r3, #1
 801d6fa:	d007      	beq.n	801d70c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d6fc:	d30b      	bcc.n	801d716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d6fe:	2b02      	cmp	r3, #2
 801d700:	d1cd      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d702:	4b31      	ldr	r3, [pc, #196]	; (801d7c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d704:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801d708:	4a30      	ldr	r2, [pc, #192]	; (801d7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d70a:	e7ee      	b.n	801d6ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d70c:	6880      	ldr	r0, [r0, #8]
 801d70e:	e7f0      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d710:	781b      	ldrb	r3, [r3, #0]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d1c3      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d716:	6980      	ldr	r0, [r0, #24]
 801d718:	e7eb      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d71a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d71c:	e7e9      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d71e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d720:	e7e7      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d722:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d724:	e7e5      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d726:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d728:	e7e3      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d72a:	2a2c      	cmp	r2, #44	; 0x2c
 801d72c:	d030      	beq.n	801d790 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d72e:	d80f      	bhi.n	801d750 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d730:	2a08      	cmp	r2, #8
 801d732:	d044      	beq.n	801d7be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d734:	d805      	bhi.n	801d742 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d736:	2a04      	cmp	r2, #4
 801d738:	d03f      	beq.n	801d7ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d73a:	2a05      	cmp	r2, #5
 801d73c:	d1af      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d73e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d740:	e7d7      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d742:	2a0a      	cmp	r2, #10
 801d744:	d03b      	beq.n	801d7be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d746:	d301      	bcc.n	801d74c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d748:	2a0b      	cmp	r2, #11
 801d74a:	d1a8      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d74c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d74e:	e7d0      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d750:	2a30      	cmp	r2, #48	; 0x30
 801d752:	d036      	beq.n	801d7c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d754:	d808      	bhi.n	801d768 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801d756:	2a2e      	cmp	r2, #46	; 0x2e
 801d758:	684b      	ldr	r3, [r1, #4]
 801d75a:	d028      	beq.n	801d7ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801d75c:	d90b      	bls.n	801d776 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801d75e:	781b      	ldrb	r3, [r3, #0]
 801d760:	2b00      	cmp	r3, #0
 801d762:	d19c      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d764:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d766:	e7c4      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d768:	2a32      	cmp	r2, #50	; 0x32
 801d76a:	d02a      	beq.n	801d7c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d76c:	d301      	bcc.n	801d772 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801d76e:	2a33      	cmp	r2, #51	; 0x33
 801d770:	d195      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d772:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d774:	e7bd      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d776:	781b      	ldrb	r3, [r3, #0]
 801d778:	2b01      	cmp	r3, #1
 801d77a:	d007      	beq.n	801d78c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801d77c:	d3f2      	bcc.n	801d764 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801d77e:	2b02      	cmp	r3, #2
 801d780:	d18d      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d782:	4b11      	ldr	r3, [pc, #68]	; (801d7c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d784:	f240 31e1 	movw	r1, #993	; 0x3e1
 801d788:	4a10      	ldr	r2, [pc, #64]	; (801d7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d78a:	e7ae      	b.n	801d6ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d78c:	6940      	ldr	r0, [r0, #20]
 801d78e:	e7b0      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d790:	684b      	ldr	r3, [r1, #4]
 801d792:	781b      	ldrb	r3, [r3, #0]
 801d794:	2b01      	cmp	r3, #1
 801d796:	d008      	beq.n	801d7aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801d798:	d30d      	bcc.n	801d7b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d79a:	2b02      	cmp	r3, #2
 801d79c:	f47f af7f 	bne.w	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d7a0:	4b09      	ldr	r3, [pc, #36]	; (801d7c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d7a2:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801d7a6:	4a09      	ldr	r2, [pc, #36]	; (801d7cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d7a8:	e79f      	b.n	801d6ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d7aa:	68c0      	ldr	r0, [r0, #12]
 801d7ac:	e7a1      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d7ae:	781b      	ldrb	r3, [r3, #0]
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	f47f af74 	bne.w	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d7b6:	69c0      	ldr	r0, [r0, #28]
 801d7b8:	e79b      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d7ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d7bc:	e799      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d7be:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d7c0:	e797      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d7c2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d7c4:	e795      	b.n	801d6f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d7c6:	bf00      	nop
 801d7c8:	0802aac9 	.word	0x0802aac9
 801d7cc:	0802b27f 	.word	0x0802b27f
 801d7d0:	0802ab15 	.word	0x0802ab15

0801d7d4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d7d4:	b508      	push	{r3, lr}
 801d7d6:	4b06      	ldr	r3, [pc, #24]	; (801d7f0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801d7d8:	8818      	ldrh	r0, [r3, #0]
 801d7da:	b928      	cbnz	r0, 801d7e8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801d7dc:	4b05      	ldr	r3, [pc, #20]	; (801d7f4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801d7de:	21d7      	movs	r1, #215	; 0xd7
 801d7e0:	4a05      	ldr	r2, [pc, #20]	; (801d7f8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801d7e2:	4806      	ldr	r0, [pc, #24]	; (801d7fc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801d7e4:	f007 fec2 	bl	802556c <__assert_func>
 801d7e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d7ec:	b280      	uxth	r0, r0
 801d7ee:	bd08      	pop	{r3, pc}
 801d7f0:	2000bb8a 	.word	0x2000bb8a
 801d7f4:	0802ad64 	.word	0x0802ad64
 801d7f8:	0802b244 	.word	0x0802b244
 801d7fc:	0802ada6 	.word	0x0802ada6

0801d800 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d804:	4616      	mov	r6, r2
 801d806:	b087      	sub	sp, #28
 801d808:	461f      	mov	r7, r3
 801d80a:	b33b      	cbz	r3, 801d85c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d80c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d810:	b323      	cbz	r3, 801d85c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d812:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d816:	b30b      	cbz	r3, 801d85c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d818:	6808      	ldr	r0, [r1, #0]
 801d81a:	ab04      	add	r3, sp, #16
 801d81c:	6849      	ldr	r1, [r1, #4]
 801d81e:	4c5a      	ldr	r4, [pc, #360]	; (801d988 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d820:	c303      	stmia	r3!, {r0, r1}
 801d822:	a804      	add	r0, sp, #16
 801d824:	f7fb faa2 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d828:	6820      	ldr	r0, [r4, #0]
 801d82a:	6803      	ldr	r3, [r0, #0]
 801d82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d82e:	4798      	blx	r3
 801d830:	2fff      	cmp	r7, #255	; 0xff
 801d832:	4623      	mov	r3, r4
 801d834:	d015      	beq.n	801d862 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d836:	f010 0f08 	tst.w	r0, #8
 801d83a:	d015      	beq.n	801d868 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801d83c:	6818      	ldr	r0, [r3, #0]
 801d83e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d842:	6801      	ldr	r1, [r0, #0]
 801d844:	9401      	str	r4, [sp, #4]
 801d846:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d84a:	9702      	str	r7, [sp, #8]
 801d84c:	9400      	str	r4, [sp, #0]
 801d84e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d852:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801d854:	4631      	mov	r1, r6
 801d856:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d85a:	47a0      	blx	r4
 801d85c:	b007      	add	sp, #28
 801d85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d862:	f010 0f02 	tst.w	r0, #2
 801d866:	e7e8      	b.n	801d83a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801d868:	6818      	ldr	r0, [r3, #0]
 801d86a:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801d86e:	6803      	ldr	r3, [r0, #0]
 801d870:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d874:	6a1b      	ldr	r3, [r3, #32]
 801d876:	4798      	blx	r3
 801d878:	4944      	ldr	r1, [pc, #272]	; (801d98c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801d87a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d87e:	2fff      	cmp	r7, #255	; 0xff
 801d880:	f8b1 c000 	ldrh.w	ip, [r1]
 801d884:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801d888:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d88c:	4688      	mov	r8, r1
 801d88e:	fb0c 2303 	mla	r3, ip, r3, r2
 801d892:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801d896:	b2f2      	uxtb	r2, r6
 801d898:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801d89c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8a0:	4418      	add	r0, r3
 801d8a2:	d112      	bne.n	801d8ca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801d8a4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d8a8:	2100      	movs	r1, #0
 801d8aa:	42a9      	cmp	r1, r5
 801d8ac:	da66      	bge.n	801d97c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801d8ae:	4603      	mov	r3, r0
 801d8b0:	2700      	movs	r7, #0
 801d8b2:	42a7      	cmp	r7, r4
 801d8b4:	f103 0303 	add.w	r3, r3, #3
 801d8b8:	da57      	bge.n	801d96a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801d8ba:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d8be:	3701      	adds	r7, #1
 801d8c0:	f803 ec02 	strb.w	lr, [r3, #-2]
 801d8c4:	f803 cc01 	strb.w	ip, [r3, #-1]
 801d8c8:	e7f3      	b.n	801d8b2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801d8ca:	b2bb      	uxth	r3, r7
 801d8cc:	f04f 0800 	mov.w	r8, #0
 801d8d0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d8d4:	fb0c fc03 	mul.w	ip, ip, r3
 801d8d8:	fb0e fe03 	mul.w	lr, lr, r3
 801d8dc:	435a      	muls	r2, r3
 801d8de:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801d8e2:	460f      	mov	r7, r1
 801d8e4:	b29b      	uxth	r3, r3
 801d8e6:	45a8      	cmp	r8, r5
 801d8e8:	da48      	bge.n	801d97c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801d8ea:	4601      	mov	r1, r0
 801d8ec:	f04f 0a00 	mov.w	sl, #0
 801d8f0:	45a2      	cmp	sl, r4
 801d8f2:	f101 0103 	add.w	r1, r1, #3
 801d8f6:	da2f      	bge.n	801d958 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801d8f8:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801d8fc:	f10a 0a01 	add.w	sl, sl, #1
 801d900:	fb19 f903 	smulbb	r9, r9, r3
 801d904:	4491      	add	r9, r2
 801d906:	fa1f f989 	uxth.w	r9, r9
 801d90a:	f109 0b01 	add.w	fp, r9, #1
 801d90e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d912:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d916:	f801 9c03 	strb.w	r9, [r1, #-3]
 801d91a:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801d91e:	fb19 f903 	smulbb	r9, r9, r3
 801d922:	44f1      	add	r9, lr
 801d924:	fa1f f989 	uxth.w	r9, r9
 801d928:	f109 0b01 	add.w	fp, r9, #1
 801d92c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d930:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d934:	f801 9c02 	strb.w	r9, [r1, #-2]
 801d938:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801d93c:	fb19 f903 	smulbb	r9, r9, r3
 801d940:	44e1      	add	r9, ip
 801d942:	fa1f f989 	uxth.w	r9, r9
 801d946:	f109 0b01 	add.w	fp, r9, #1
 801d94a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d94e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d952:	f801 9c01 	strb.w	r9, [r1, #-1]
 801d956:	e7cb      	b.n	801d8f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801d958:	8839      	ldrh	r1, [r7, #0]
 801d95a:	f108 0801 	add.w	r8, r8, #1
 801d95e:	1b09      	subs	r1, r1, r4
 801d960:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d964:	4431      	add	r1, r6
 801d966:	4408      	add	r0, r1
 801d968:	e7bd      	b.n	801d8e6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801d96a:	f8b8 3000 	ldrh.w	r3, [r8]
 801d96e:	3101      	adds	r1, #1
 801d970:	1b1b      	subs	r3, r3, r4
 801d972:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d976:	4433      	add	r3, r6
 801d978:	4418      	add	r0, r3
 801d97a:	e796      	b.n	801d8aa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801d97c:	4b02      	ldr	r3, [pc, #8]	; (801d988 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d97e:	6818      	ldr	r0, [r3, #0]
 801d980:	6803      	ldr	r3, [r0, #0]
 801d982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d984:	4798      	blx	r3
 801d986:	e769      	b.n	801d85c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d988:	2000bb90 	.word	0x2000bb90
 801d98c:	2000bb8a 	.word	0x2000bb8a

0801d990 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d994:	b08d      	sub	sp, #52	; 0x34
 801d996:	460c      	mov	r4, r1
 801d998:	4617      	mov	r7, r2
 801d99a:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d99e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d9a2:	2e00      	cmp	r6, #0
 801d9a4:	d04a      	beq.n	801da3c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d9a6:	6810      	ldr	r0, [r2, #0]
 801d9a8:	ad08      	add	r5, sp, #32
 801d9aa:	6851      	ldr	r1, [r2, #4]
 801d9ac:	c503      	stmia	r5!, {r0, r1}
 801d9ae:	6818      	ldr	r0, [r3, #0]
 801d9b0:	ad0a      	add	r5, sp, #40	; 0x28
 801d9b2:	6859      	ldr	r1, [r3, #4]
 801d9b4:	c503      	stmia	r5!, {r0, r1}
 801d9b6:	a808      	add	r0, sp, #32
 801d9b8:	f7fb f9d8 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d9bc:	4639      	mov	r1, r7
 801d9be:	a80a      	add	r0, sp, #40	; 0x28
 801d9c0:	4f59      	ldr	r7, [pc, #356]	; (801db28 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801d9c2:	f7fb f9bb 	bl	8018d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d9c6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d9ca:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d9ce:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d9d2:	6838      	ldr	r0, [r7, #0]
 801d9d4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d9d8:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801d9dc:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801d9e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d9e4:	440c      	add	r4, r1
 801d9e6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d9ea:	440a      	add	r2, r1
 801d9ec:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d9f0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d9f4:	4413      	add	r3, r2
 801d9f6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d9fa:	6803      	ldr	r3, [r0, #0]
 801d9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9fe:	4798      	blx	r3
 801da00:	2eff      	cmp	r6, #255	; 0xff
 801da02:	f000 8089 	beq.w	801db18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801da06:	0743      	lsls	r3, r0, #29
 801da08:	d405      	bmi.n	801da16 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801da0a:	f1b9 0f00 	cmp.w	r9, #0
 801da0e:	d018      	beq.n	801da42 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801da10:	f010 0f10 	tst.w	r0, #16
 801da14:	d015      	beq.n	801da42 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801da16:	6838      	ldr	r0, [r7, #0]
 801da18:	b2ad      	uxth	r5, r5
 801da1a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801da1e:	6801      	ldr	r1, [r0, #0]
 801da20:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801da24:	9500      	str	r5, [sp, #0]
 801da26:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801da2a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801da2e:	9602      	str	r6, [sp, #8]
 801da30:	fa1f f688 	uxth.w	r6, r8
 801da34:	9601      	str	r6, [sp, #4]
 801da36:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801da38:	4621      	mov	r1, r4
 801da3a:	47a8      	blx	r5
 801da3c:	b00d      	add	sp, #52	; 0x34
 801da3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da42:	6838      	ldr	r0, [r7, #0]
 801da44:	6803      	ldr	r3, [r0, #0]
 801da46:	6a1b      	ldr	r3, [r3, #32]
 801da48:	4798      	blx	r3
 801da4a:	4a38      	ldr	r2, [pc, #224]	; (801db2c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801da4c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801da50:	2eff      	cmp	r6, #255	; 0xff
 801da52:	8813      	ldrh	r3, [r2, #0]
 801da54:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801da58:	fb0c 1303 	mla	r3, ip, r3, r1
 801da5c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801da60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da64:	4418      	add	r0, r3
 801da66:	d032      	beq.n	801dace <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801da68:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801da6c:	f04f 0c00 	mov.w	ip, #0
 801da70:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801da74:	9306      	str	r3, [sp, #24]
 801da76:	45c4      	cmp	ip, r8
 801da78:	da49      	bge.n	801db0e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801da7a:	4686      	mov	lr, r0
 801da7c:	46a1      	mov	r9, r4
 801da7e:	eba9 0304 	sub.w	r3, r9, r4
 801da82:	428b      	cmp	r3, r1
 801da84:	da13      	bge.n	801daae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801da86:	f819 3b01 	ldrb.w	r3, [r9], #1
 801da8a:	f89e b000 	ldrb.w	fp, [lr]
 801da8e:	9307      	str	r3, [sp, #28]
 801da90:	9b06      	ldr	r3, [sp, #24]
 801da92:	fb1b fb03 	smulbb	fp, fp, r3
 801da96:	9b07      	ldr	r3, [sp, #28]
 801da98:	fb03 b306 	mla	r3, r3, r6, fp
 801da9c:	b29b      	uxth	r3, r3
 801da9e:	f103 0b01 	add.w	fp, r3, #1
 801daa2:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801daa6:	121b      	asrs	r3, r3, #8
 801daa8:	f80e 3b01 	strb.w	r3, [lr], #1
 801daac:	e7e7      	b.n	801da7e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801daae:	8813      	ldrh	r3, [r2, #0]
 801dab0:	f10c 0c01 	add.w	ip, ip, #1
 801dab4:	1b5b      	subs	r3, r3, r5
 801dab6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801daba:	4453      	add	r3, sl
 801dabc:	4418      	add	r0, r3
 801dabe:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801dac2:	1b5b      	subs	r3, r3, r5
 801dac4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dac8:	4453      	add	r3, sl
 801daca:	441c      	add	r4, r3
 801dacc:	e7d3      	b.n	801da76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801dace:	2600      	movs	r6, #0
 801dad0:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801dad4:	4546      	cmp	r6, r8
 801dad6:	da1a      	bge.n	801db0e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801dad8:	f100 3eff 	add.w	lr, r0, #4294967295
 801dadc:	4623      	mov	r3, r4
 801dade:	eba3 0904 	sub.w	r9, r3, r4
 801dae2:	4589      	cmp	r9, r1
 801dae4:	da04      	bge.n	801daf0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801dae6:	f813 9b01 	ldrb.w	r9, [r3], #1
 801daea:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801daee:	e7f6      	b.n	801dade <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801daf0:	8813      	ldrh	r3, [r2, #0]
 801daf2:	3601      	adds	r6, #1
 801daf4:	1b5b      	subs	r3, r3, r5
 801daf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dafa:	4463      	add	r3, ip
 801dafc:	4418      	add	r0, r3
 801dafe:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801db02:	1b5b      	subs	r3, r3, r5
 801db04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db08:	4463      	add	r3, ip
 801db0a:	441c      	add	r4, r3
 801db0c:	e7e2      	b.n	801dad4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801db0e:	6838      	ldr	r0, [r7, #0]
 801db10:	6803      	ldr	r3, [r0, #0]
 801db12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db14:	4798      	blx	r3
 801db16:	e791      	b.n	801da3c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801db18:	f1b9 0f00 	cmp.w	r9, #0
 801db1c:	f47f af78 	bne.w	801da10 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801db20:	f010 0f01 	tst.w	r0, #1
 801db24:	e776      	b.n	801da14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801db26:	bf00      	nop
 801db28:	2000bb90 	.word	0x2000bb90
 801db2c:	2000bb8a 	.word	0x2000bb8a

0801db30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801db30:	b510      	push	{r4, lr}
 801db32:	4604      	mov	r4, r0
 801db34:	2104      	movs	r1, #4
 801db36:	f007 fcee 	bl	8025516 <_ZdlPvj>
 801db3a:	4620      	mov	r0, r4
 801db3c:	bd10      	pop	{r4, pc}

0801db3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801db3e:	b510      	push	{r4, lr}
 801db40:	4604      	mov	r4, r0
 801db42:	2104      	movs	r1, #4
 801db44:	f007 fce7 	bl	8025516 <_ZdlPvj>
 801db48:	4620      	mov	r0, r4
 801db4a:	bd10      	pop	{r4, pc}

0801db4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801db4c:	b510      	push	{r4, lr}
 801db4e:	4604      	mov	r4, r0
 801db50:	2104      	movs	r1, #4
 801db52:	f007 fce0 	bl	8025516 <_ZdlPvj>
 801db56:	4620      	mov	r0, r4
 801db58:	bd10      	pop	{r4, pc}

0801db5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801db5a:	b510      	push	{r4, lr}
 801db5c:	4604      	mov	r4, r0
 801db5e:	2104      	movs	r1, #4
 801db60:	f007 fcd9 	bl	8025516 <_ZdlPvj>
 801db64:	4620      	mov	r0, r4
 801db66:	bd10      	pop	{r4, pc}

0801db68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801db68:	b510      	push	{r4, lr}
 801db6a:	4604      	mov	r4, r0
 801db6c:	2104      	movs	r1, #4
 801db6e:	f007 fcd2 	bl	8025516 <_ZdlPvj>
 801db72:	4620      	mov	r0, r4
 801db74:	bd10      	pop	{r4, pc}

0801db76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801db76:	b510      	push	{r4, lr}
 801db78:	4604      	mov	r4, r0
 801db7a:	2104      	movs	r1, #4
 801db7c:	f007 fccb 	bl	8025516 <_ZdlPvj>
 801db80:	4620      	mov	r0, r4
 801db82:	bd10      	pop	{r4, pc}

0801db84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801db84:	b510      	push	{r4, lr}
 801db86:	4604      	mov	r4, r0
 801db88:	2104      	movs	r1, #4
 801db8a:	f007 fcc4 	bl	8025516 <_ZdlPvj>
 801db8e:	4620      	mov	r0, r4
 801db90:	bd10      	pop	{r4, pc}

0801db92 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801db92:	b510      	push	{r4, lr}
 801db94:	4604      	mov	r4, r0
 801db96:	2104      	movs	r1, #4
 801db98:	f007 fcbd 	bl	8025516 <_ZdlPvj>
 801db9c:	4620      	mov	r0, r4
 801db9e:	bd10      	pop	{r4, pc}

0801dba0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dba0:	b510      	push	{r4, lr}
 801dba2:	4604      	mov	r4, r0
 801dba4:	2104      	movs	r1, #4
 801dba6:	f007 fcb6 	bl	8025516 <_ZdlPvj>
 801dbaa:	4620      	mov	r0, r4
 801dbac:	bd10      	pop	{r4, pc}

0801dbae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dbae:	b510      	push	{r4, lr}
 801dbb0:	4604      	mov	r4, r0
 801dbb2:	2104      	movs	r1, #4
 801dbb4:	f007 fcaf 	bl	8025516 <_ZdlPvj>
 801dbb8:	4620      	mov	r0, r4
 801dbba:	bd10      	pop	{r4, pc}

0801dbbc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dbbc:	b510      	push	{r4, lr}
 801dbbe:	4604      	mov	r4, r0
 801dbc0:	2104      	movs	r1, #4
 801dbc2:	f007 fca8 	bl	8025516 <_ZdlPvj>
 801dbc6:	4620      	mov	r0, r4
 801dbc8:	bd10      	pop	{r4, pc}

0801dbca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dbca:	b510      	push	{r4, lr}
 801dbcc:	4604      	mov	r4, r0
 801dbce:	2104      	movs	r1, #4
 801dbd0:	f007 fca1 	bl	8025516 <_ZdlPvj>
 801dbd4:	4620      	mov	r0, r4
 801dbd6:	bd10      	pop	{r4, pc}

0801dbd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dbd8:	b510      	push	{r4, lr}
 801dbda:	4604      	mov	r4, r0
 801dbdc:	2104      	movs	r1, #4
 801dbde:	f007 fc9a 	bl	8025516 <_ZdlPvj>
 801dbe2:	4620      	mov	r0, r4
 801dbe4:	bd10      	pop	{r4, pc}

0801dbe6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dbe6:	b510      	push	{r4, lr}
 801dbe8:	4604      	mov	r4, r0
 801dbea:	2104      	movs	r1, #4
 801dbec:	f007 fc93 	bl	8025516 <_ZdlPvj>
 801dbf0:	4620      	mov	r0, r4
 801dbf2:	bd10      	pop	{r4, pc}

0801dbf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dbf4:	b510      	push	{r4, lr}
 801dbf6:	4604      	mov	r4, r0
 801dbf8:	2104      	movs	r1, #4
 801dbfa:	f007 fc8c 	bl	8025516 <_ZdlPvj>
 801dbfe:	4620      	mov	r0, r4
 801dc00:	bd10      	pop	{r4, pc}

0801dc02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dc02:	b510      	push	{r4, lr}
 801dc04:	4604      	mov	r4, r0
 801dc06:	2104      	movs	r1, #4
 801dc08:	f007 fc85 	bl	8025516 <_ZdlPvj>
 801dc0c:	4620      	mov	r0, r4
 801dc0e:	bd10      	pop	{r4, pc}

0801dc10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801dc10:	b510      	push	{r4, lr}
 801dc12:	4604      	mov	r4, r0
 801dc14:	2104      	movs	r1, #4
 801dc16:	f007 fc7e 	bl	8025516 <_ZdlPvj>
 801dc1a:	4620      	mov	r0, r4
 801dc1c:	bd10      	pop	{r4, pc}

0801dc1e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801dc1e:	b510      	push	{r4, lr}
 801dc20:	4604      	mov	r4, r0
 801dc22:	2104      	movs	r1, #4
 801dc24:	f007 fc77 	bl	8025516 <_ZdlPvj>
 801dc28:	4620      	mov	r0, r4
 801dc2a:	bd10      	pop	{r4, pc}

0801dc2c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801dc2c:	b510      	push	{r4, lr}
 801dc2e:	4604      	mov	r4, r0
 801dc30:	2104      	movs	r1, #4
 801dc32:	f007 fc70 	bl	8025516 <_ZdlPvj>
 801dc36:	4620      	mov	r0, r4
 801dc38:	bd10      	pop	{r4, pc}

0801dc3a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801dc3a:	b510      	push	{r4, lr}
 801dc3c:	4604      	mov	r4, r0
 801dc3e:	2104      	movs	r1, #4
 801dc40:	f007 fc69 	bl	8025516 <_ZdlPvj>
 801dc44:	4620      	mov	r0, r4
 801dc46:	bd10      	pop	{r4, pc}

0801dc48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801dc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc4c:	4d9e      	ldr	r5, [pc, #632]	; (801dec8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801dc4e:	4690      	mov	r8, r2
 801dc50:	b08f      	sub	sp, #60	; 0x3c
 801dc52:	4604      	mov	r4, r0
 801dc54:	682a      	ldr	r2, [r5, #0]
 801dc56:	4689      	mov	r9, r1
 801dc58:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801dc5c:	2a02      	cmp	r2, #2
 801dc5e:	d106      	bne.n	801dc6e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801dc60:	4b9a      	ldr	r3, [pc, #616]	; (801decc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801dc62:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801dc66:	4a9a      	ldr	r2, [pc, #616]	; (801ded0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dc68:	489a      	ldr	r0, [pc, #616]	; (801ded4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801dc6a:	f007 fc7f 	bl	802556c <__assert_func>
 801dc6e:	ae0e      	add	r6, sp, #56	; 0x38
 801dc70:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801dc74:	4630      	mov	r0, r6
 801dc76:	f7fe f8b3 	bl	801bde0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc7a:	6823      	ldr	r3, [r4, #0]
 801dc7c:	4607      	mov	r7, r0
 801dc7e:	4620      	mov	r0, r4
 801dc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc82:	4798      	blx	r3
 801dc84:	4287      	cmp	r7, r0
 801dc86:	d004      	beq.n	801dc92 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801dc88:	4b93      	ldr	r3, [pc, #588]	; (801ded8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801dc8a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801dc8e:	4a90      	ldr	r2, [pc, #576]	; (801ded0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dc90:	e7ea      	b.n	801dc68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dc92:	4630      	mov	r0, r6
 801dc94:	f7fe f820 	bl	801bcd8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc98:	4607      	mov	r7, r0
 801dc9a:	b920      	cbnz	r0, 801dca6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801dc9c:	4b8f      	ldr	r3, [pc, #572]	; (801dedc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801dc9e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801dca2:	4a8b      	ldr	r2, [pc, #556]	; (801ded0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dca4:	e7e0      	b.n	801dc68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dca6:	f8d8 0000 	ldr.w	r0, [r8]
 801dcaa:	ab06      	add	r3, sp, #24
 801dcac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dcb0:	f9b8 a000 	ldrsh.w	sl, [r8]
 801dcb4:	c303      	stmia	r3!, {r0, r1}
 801dcb6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801dcba:	ab08      	add	r3, sp, #32
 801dcbc:	f8d9 0000 	ldr.w	r0, [r9]
 801dcc0:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801dcc4:	c303      	stmia	r3!, {r0, r1}
 801dcc6:	4630      	mov	r0, r6
 801dcc8:	f7fd fefe 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dccc:	4680      	mov	r8, r0
 801dcce:	4630      	mov	r0, r6
 801dcd0:	4e83      	ldr	r6, [pc, #524]	; (801dee0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801dcd2:	f7fd ff33 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dcd6:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801dcda:	f10d 0920 	add.w	r9, sp, #32
 801dcde:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801dce2:	a806      	add	r0, sp, #24
 801dce4:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801dce8:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801dcec:	f7fb f83e 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dcf0:	4648      	mov	r0, r9
 801dcf2:	f7fb f83b 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dcf6:	a80a      	add	r0, sp, #40	; 0x28
 801dcf8:	f7fb f838 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dcfc:	4b79      	ldr	r3, [pc, #484]	; (801dee4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801dcfe:	2100      	movs	r1, #0
 801dd00:	f9b6 2000 	ldrsh.w	r2, [r6]
 801dd04:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dd08:	4648      	mov	r0, r9
 801dd0a:	910c      	str	r1, [sp, #48]	; 0x30
 801dd0c:	a90c      	add	r1, sp, #48	; 0x30
 801dd0e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801dd12:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801dd16:	f7f7 fb93 	bl	8015440 <_ZN8touchgfx4RectaNERKS0_>
 801dd1a:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801dd1e:	9602      	str	r6, [sp, #8]
 801dd20:	f1bc 0f00 	cmp.w	ip, #0
 801dd24:	f000 80a4 	beq.w	801de70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dd28:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801dd2c:	2e00      	cmp	r6, #0
 801dd2e:	f000 809f 	beq.w	801de70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dd32:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801dd36:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801dd3a:	4288      	cmp	r0, r1
 801dd3c:	db36      	blt.n	801ddac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dd3e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801dd42:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801dd46:	429a      	cmp	r2, r3
 801dd48:	db30      	blt.n	801ddac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dd4a:	4460      	add	r0, ip
 801dd4c:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801dd50:	4461      	add	r1, ip
 801dd52:	b200      	sxth	r0, r0
 801dd54:	b209      	sxth	r1, r1
 801dd56:	4288      	cmp	r0, r1
 801dd58:	dc28      	bgt.n	801ddac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dd5a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801dd5e:	4432      	add	r2, r6
 801dd60:	440b      	add	r3, r1
 801dd62:	b212      	sxth	r2, r2
 801dd64:	b21b      	sxth	r3, r3
 801dd66:	429a      	cmp	r2, r3
 801dd68:	dc20      	bgt.n	801ddac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dd6a:	6823      	ldr	r3, [r4, #0]
 801dd6c:	4620      	mov	r0, r4
 801dd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd70:	4798      	blx	r3
 801dd72:	4682      	mov	sl, r0
 801dd74:	6828      	ldr	r0, [r5, #0]
 801dd76:	6803      	ldr	r3, [r0, #0]
 801dd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd7a:	4798      	blx	r3
 801dd7c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801dd80:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dd84:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801dd88:	9303      	str	r3, [sp, #12]
 801dd8a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801dd8e:	1a9b      	subs	r3, r3, r2
 801dd90:	b29b      	uxth	r3, r3
 801dd92:	b21c      	sxth	r4, r3
 801dd94:	2c00      	cmp	r4, #0
 801dd96:	dc0e      	bgt.n	801ddb6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801dd98:	b134      	cbz	r4, 801dda8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801dd9a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dd9e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801dda2:	4413      	add	r3, r2
 801dda4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801dda8:	463c      	mov	r4, r7
 801ddaa:	e00b      	b.n	801ddc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801ddac:	4b4e      	ldr	r3, [pc, #312]	; (801dee8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801ddae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ddb2:	4a47      	ldr	r2, [pc, #284]	; (801ded0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ddb4:	e758      	b.n	801dc68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ddb6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ddba:	ebab 0303 	sub.w	r3, fp, r3
 801ddbe:	443c      	add	r4, r7
 801ddc0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ddc4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ddc8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ddcc:	1a9b      	subs	r3, r3, r2
 801ddce:	b29b      	uxth	r3, r3
 801ddd0:	b219      	sxth	r1, r3
 801ddd2:	2900      	cmp	r1, #0
 801ddd4:	dd50      	ble.n	801de78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801ddd6:	9a03      	ldr	r2, [sp, #12]
 801ddd8:	fb02 4401 	mla	r4, r2, r1, r4
 801dddc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801dde0:	1ad3      	subs	r3, r2, r3
 801dde2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801dde6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ddea:	f1bc 0f00 	cmp.w	ip, #0
 801ddee:	dd3f      	ble.n	801de70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ddf0:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ddf4:	2e00      	cmp	r6, #0
 801ddf6:	dd3b      	ble.n	801de70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ddf8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ddfc:	2203      	movs	r2, #3
 801ddfe:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801de02:	fb0a f801 	mul.w	r8, sl, r1
 801de06:	fb13 8802 	smlabb	r8, r3, r2, r8
 801de0a:	9a02      	ldr	r2, [sp, #8]
 801de0c:	4480      	add	r8, r0
 801de0e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801de12:	8812      	ldrh	r2, [r2, #0]
 801de14:	4584      	cmp	ip, r0
 801de16:	eba2 0303 	sub.w	r3, r2, r3
 801de1a:	bfa8      	it	ge
 801de1c:	4684      	movge	ip, r0
 801de1e:	459c      	cmp	ip, r3
 801de20:	bfa8      	it	ge
 801de22:	469c      	movge	ip, r3
 801de24:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801de28:	429e      	cmp	r6, r3
 801de2a:	bfa8      	it	ge
 801de2c:	461e      	movge	r6, r3
 801de2e:	4b2d      	ldr	r3, [pc, #180]	; (801dee4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801de30:	881b      	ldrh	r3, [r3, #0]
 801de32:	1a59      	subs	r1, r3, r1
 801de34:	4633      	mov	r3, r6
 801de36:	428e      	cmp	r6, r1
 801de38:	bfa8      	it	ge
 801de3a:	460b      	movge	r3, r1
 801de3c:	4562      	cmp	r2, ip
 801de3e:	9302      	str	r3, [sp, #8]
 801de40:	d12d      	bne.n	801de9e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801de42:	455a      	cmp	r2, fp
 801de44:	d12b      	bne.n	801de9e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801de46:	6828      	ldr	r0, [r5, #0]
 801de48:	6803      	ldr	r3, [r0, #0]
 801de4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801de4c:	4798      	blx	r3
 801de4e:	07c3      	lsls	r3, r0, #31
 801de50:	d51b      	bpl.n	801de8a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801de52:	6828      	ldr	r0, [r5, #0]
 801de54:	9b02      	ldr	r3, [sp, #8]
 801de56:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801de5a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801de5e:	6803      	ldr	r3, [r0, #0]
 801de60:	f8cd b000 	str.w	fp, [sp]
 801de64:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801de66:	4623      	mov	r3, r4
 801de68:	e899 0006 	ldmia.w	r9, {r1, r2}
 801de6c:	47a8      	blx	r5
 801de6e:	4607      	mov	r7, r0
 801de70:	4638      	mov	r0, r7
 801de72:	b00f      	add	sp, #60	; 0x3c
 801de74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de78:	bf1f      	itttt	ne
 801de7a:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801de7e:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801de82:	189b      	addne	r3, r3, r2
 801de84:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801de88:	e7ad      	b.n	801dde6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801de8a:	6828      	ldr	r0, [r5, #0]
 801de8c:	4642      	mov	r2, r8
 801de8e:	4621      	mov	r1, r4
 801de90:	6803      	ldr	r3, [r0, #0]
 801de92:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801de94:	9b02      	ldr	r3, [sp, #8]
 801de96:	fb03 f30a 	mul.w	r3, r3, sl
 801de9a:	47a8      	blx	r5
 801de9c:	e7e8      	b.n	801de70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801de9e:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801dea2:	f04f 0900 	mov.w	r9, #0
 801dea6:	9b02      	ldr	r3, [sp, #8]
 801dea8:	454b      	cmp	r3, r9
 801deaa:	dde1      	ble.n	801de70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801deac:	6828      	ldr	r0, [r5, #0]
 801deae:	4642      	mov	r2, r8
 801deb0:	4621      	mov	r1, r4
 801deb2:	44d0      	add	r8, sl
 801deb4:	6803      	ldr	r3, [r0, #0]
 801deb6:	f109 0901 	add.w	r9, r9, #1
 801deba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801debc:	461e      	mov	r6, r3
 801debe:	465b      	mov	r3, fp
 801dec0:	47b0      	blx	r6
 801dec2:	9b03      	ldr	r3, [sp, #12]
 801dec4:	441c      	add	r4, r3
 801dec6:	e7ee      	b.n	801dea6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801dec8:	2000bb90 	.word	0x2000bb90
 801decc:	0802ab47 	.word	0x0802ab47
 801ded0:	0802b329 	.word	0x0802b329
 801ded4:	0802ab15 	.word	0x0802ab15
 801ded8:	0802abfb 	.word	0x0802abfb
 801dedc:	0802ac50 	.word	0x0802ac50
 801dee0:	2000bb8a 	.word	0x2000bb8a
 801dee4:	2000bb8c 	.word	0x2000bb8c
 801dee8:	0802ac8e 	.word	0x0802ac8e

0801deec <_ZN8touchgfx8LCD24bppC1Ev>:
 801deec:	4a0b      	ldr	r2, [pc, #44]	; (801df1c <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801deee:	6002      	str	r2, [r0, #0]
 801def0:	2200      	movs	r2, #0
 801def2:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801def6:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801defa:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801defe:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801df02:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801df06:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801df0a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801df0e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801df12:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801df16:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801df1a:	4770      	bx	lr
 801df1c:	0802af74 	.word	0x0802af74

0801df20 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df24:	b093      	sub	sp, #76	; 0x4c
 801df26:	880c      	ldrh	r4, [r1, #0]
 801df28:	4605      	mov	r5, r0
 801df2a:	460f      	mov	r7, r1
 801df2c:	4691      	mov	r9, r2
 801df2e:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801df32:	b12c      	cbz	r4, 801df40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801df34:	4b71      	ldr	r3, [pc, #452]	; (801e0fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801df36:	2167      	movs	r1, #103	; 0x67
 801df38:	4a71      	ldr	r2, [pc, #452]	; (801e100 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801df3a:	4872      	ldr	r0, [pc, #456]	; (801e104 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801df3c:	f007 fb16 	bl	802556c <__assert_func>
 801df40:	6810      	ldr	r0, [r2, #0]
 801df42:	ae0e      	add	r6, sp, #56	; 0x38
 801df44:	6851      	ldr	r1, [r2, #4]
 801df46:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801e10c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801df4a:	c603      	stmia	r6!, {r0, r1}
 801df4c:	6818      	ldr	r0, [r3, #0]
 801df4e:	ae10      	add	r6, sp, #64	; 0x40
 801df50:	6859      	ldr	r1, [r3, #4]
 801df52:	c603      	stmia	r6!, {r0, r1}
 801df54:	a80e      	add	r0, sp, #56	; 0x38
 801df56:	f7fa ff09 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df5a:	4649      	mov	r1, r9
 801df5c:	a810      	add	r0, sp, #64	; 0x40
 801df5e:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801e108 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801df62:	f7fa feeb 	bl	8018d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df66:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801df6a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801df6e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801df72:	f8d9 0000 	ldr.w	r0, [r9]
 801df76:	fb11 2103 	smlabb	r1, r1, r3, r2
 801df7a:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801df7e:	440d      	add	r5, r1
 801df80:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801df84:	440a      	add	r2, r1
 801df86:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801df8a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801df8e:	4413      	add	r3, r2
 801df90:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801df94:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801df98:	930b      	str	r3, [sp, #44]	; 0x2c
 801df9a:	6803      	ldr	r3, [r0, #0]
 801df9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dfa0:	4798      	blx	r3
 801dfa2:	2801      	cmp	r0, #1
 801dfa4:	d11e      	bne.n	801dfe4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801dfa6:	220b      	movs	r2, #11
 801dfa8:	9008      	str	r0, [sp, #32]
 801dfaa:	b2b6      	uxth	r6, r6
 801dfac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801dfb0:	9207      	str	r2, [sp, #28]
 801dfb2:	4629      	mov	r1, r5
 801dfb4:	f8ba 2000 	ldrh.w	r2, [sl]
 801dfb8:	f8cd 8010 	str.w	r8, [sp, #16]
 801dfbc:	9601      	str	r6, [sp, #4]
 801dfbe:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801dfc2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801dfc6:	9203      	str	r2, [sp, #12]
 801dfc8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801dfcc:	9202      	str	r2, [sp, #8]
 801dfce:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801dfd2:	9200      	str	r2, [sp, #0]
 801dfd4:	463a      	mov	r2, r7
 801dfd6:	f8d9 0000 	ldr.w	r0, [r9]
 801dfda:	f7f7 fe7f 	bl	8015cdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801dfde:	b013      	add	sp, #76	; 0x4c
 801dfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfe4:	f8d9 0000 	ldr.w	r0, [r9]
 801dfe8:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801dfec:	6803      	ldr	r3, [r0, #0]
 801dfee:	6a1b      	ldr	r3, [r3, #32]
 801dff0:	4798      	blx	r3
 801dff2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801dff6:	f8ba 3000 	ldrh.w	r3, [sl]
 801dffa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801dffe:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e002:	fb01 2303 	mla	r3, r1, r3, r2
 801e006:	4621      	mov	r1, r4
 801e008:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e00c:	4418      	add	r0, r3
 801e00e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801e012:	930c      	str	r3, [sp, #48]	; 0x30
 801e014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e016:	4299      	cmp	r1, r3
 801e018:	da6a      	bge.n	801e0f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801e01a:	1cc2      	adds	r2, r0, #3
 801e01c:	46aa      	mov	sl, r5
 801e01e:	ebaa 0305 	sub.w	r3, sl, r5
 801e022:	429e      	cmp	r6, r3
 801e024:	dd55      	ble.n	801e0d2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801e026:	2404      	movs	r4, #4
 801e028:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801e02c:	fb14 4303 	smlabb	r3, r4, r3, r4
 801e030:	eb07 0e03 	add.w	lr, r7, r3
 801e034:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801e038:	b184      	cbz	r4, 801e05c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e03a:	2cff      	cmp	r4, #255	; 0xff
 801e03c:	f817 b003 	ldrb.w	fp, [r7, r3]
 801e040:	d10e      	bne.n	801e060 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e042:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e046:	d10b      	bne.n	801e060 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e048:	f802 bc03 	strb.w	fp, [r2, #-3]
 801e04c:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801e050:	f802 3c02 	strb.w	r3, [r2, #-2]
 801e054:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801e058:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e05c:	3203      	adds	r2, #3
 801e05e:	e7de      	b.n	801e01e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801e060:	fb08 f404 	mul.w	r4, r8, r4
 801e064:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801e068:	1c63      	adds	r3, r4, #1
 801e06a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801e06e:	121b      	asrs	r3, r3, #8
 801e070:	b29c      	uxth	r4, r3
 801e072:	43db      	mvns	r3, r3
 801e074:	fb1b fb04 	smulbb	fp, fp, r4
 801e078:	b2db      	uxtb	r3, r3
 801e07a:	fb0c bc03 	mla	ip, ip, r3, fp
 801e07e:	fa1f fc8c 	uxth.w	ip, ip
 801e082:	f10c 0b01 	add.w	fp, ip, #1
 801e086:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e08a:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801e08e:	fb1b fb03 	smulbb	fp, fp, r3
 801e092:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e096:	f802 cc03 	strb.w	ip, [r2, #-3]
 801e09a:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e09e:	fb0c bc04 	mla	ip, ip, r4, fp
 801e0a2:	fa1f fc8c 	uxth.w	ip, ip
 801e0a6:	f10c 0b01 	add.w	fp, ip, #1
 801e0aa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e0ae:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e0b2:	f802 cc02 	strb.w	ip, [r2, #-2]
 801e0b6:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801e0ba:	f89e e002 	ldrb.w	lr, [lr, #2]
 801e0be:	fb1c f303 	smulbb	r3, ip, r3
 801e0c2:	fb0e 3304 	mla	r3, lr, r4, r3
 801e0c6:	b29b      	uxth	r3, r3
 801e0c8:	1c5c      	adds	r4, r3, #1
 801e0ca:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e0ce:	121b      	asrs	r3, r3, #8
 801e0d0:	e7c2      	b.n	801e058 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e0d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0d4:	3101      	adds	r1, #1
 801e0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e0d8:	881b      	ldrh	r3, [r3, #0]
 801e0da:	1b9b      	subs	r3, r3, r6
 801e0dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0e0:	4413      	add	r3, r2
 801e0e2:	4418      	add	r0, r3
 801e0e4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801e0e8:	1b9b      	subs	r3, r3, r6
 801e0ea:	444b      	add	r3, r9
 801e0ec:	441d      	add	r5, r3
 801e0ee:	e791      	b.n	801e014 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801e0f0:	4b05      	ldr	r3, [pc, #20]	; (801e108 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801e0f2:	6818      	ldr	r0, [r3, #0]
 801e0f4:	6803      	ldr	r3, [r0, #0]
 801e0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0f8:	4798      	blx	r3
 801e0fa:	e770      	b.n	801dfde <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e0fc:	0802aa79 	.word	0x0802aa79
 801e100:	0802b14b 	.word	0x0802b14b
 801e104:	0802ab15 	.word	0x0802ab15
 801e108:	2000bb90 	.word	0x2000bb90
 801e10c:	2000bb8a 	.word	0x2000bb8a

0801e110 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e114:	4614      	mov	r4, r2
 801e116:	880a      	ldrh	r2, [r1, #0]
 801e118:	b091      	sub	sp, #68	; 0x44
 801e11a:	4680      	mov	r8, r0
 801e11c:	2a01      	cmp	r2, #1
 801e11e:	460e      	mov	r6, r1
 801e120:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e124:	d005      	beq.n	801e132 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801e126:	4b6d      	ldr	r3, [pc, #436]	; (801e2dc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801e128:	21b5      	movs	r1, #181	; 0xb5
 801e12a:	4a6d      	ldr	r2, [pc, #436]	; (801e2e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801e12c:	486d      	ldr	r0, [pc, #436]	; (801e2e4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801e12e:	f007 fa1d 	bl	802556c <__assert_func>
 801e132:	6820      	ldr	r0, [r4, #0]
 801e134:	ad0c      	add	r5, sp, #48	; 0x30
 801e136:	6861      	ldr	r1, [r4, #4]
 801e138:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e2e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801e13c:	c503      	stmia	r5!, {r0, r1}
 801e13e:	6818      	ldr	r0, [r3, #0]
 801e140:	ad0e      	add	r5, sp, #56	; 0x38
 801e142:	6859      	ldr	r1, [r3, #4]
 801e144:	c503      	stmia	r5!, {r0, r1}
 801e146:	a80c      	add	r0, sp, #48	; 0x30
 801e148:	f7fa fe10 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e14c:	4621      	mov	r1, r4
 801e14e:	a80e      	add	r0, sp, #56	; 0x38
 801e150:	f7fa fdf4 	bl	8018d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e154:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e158:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e15c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e160:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801e164:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e168:	eb08 0401 	add.w	r4, r8, r1
 801e16c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e170:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801e2ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801e174:	440a      	add	r2, r1
 801e176:	f8d8 0000 	ldr.w	r0, [r8]
 801e17a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e17e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e182:	4413      	add	r3, r2
 801e184:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e188:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e18c:	930a      	str	r3, [sp, #40]	; 0x28
 801e18e:	6803      	ldr	r3, [r0, #0]
 801e190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e194:	4798      	blx	r3
 801e196:	2801      	cmp	r0, #1
 801e198:	d11e      	bne.n	801e1d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801e19a:	220b      	movs	r2, #11
 801e19c:	9008      	str	r0, [sp, #32]
 801e19e:	b2ad      	uxth	r5, r5
 801e1a0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e1a4:	9207      	str	r2, [sp, #28]
 801e1a6:	4621      	mov	r1, r4
 801e1a8:	f8b9 2000 	ldrh.w	r2, [r9]
 801e1ac:	9501      	str	r5, [sp, #4]
 801e1ae:	9206      	str	r2, [sp, #24]
 801e1b0:	2200      	movs	r2, #0
 801e1b2:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801e1b6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e1ba:	9203      	str	r2, [sp, #12]
 801e1bc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e1c0:	9202      	str	r2, [sp, #8]
 801e1c2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e1c6:	9200      	str	r2, [sp, #0]
 801e1c8:	4632      	mov	r2, r6
 801e1ca:	f8d8 0000 	ldr.w	r0, [r8]
 801e1ce:	f7f7 fd85 	bl	8015cdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e1d2:	b011      	add	sp, #68	; 0x44
 801e1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1d8:	f8d8 0000 	ldr.w	r0, [r8]
 801e1dc:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801e1e0:	6803      	ldr	r3, [r0, #0]
 801e1e2:	6a1b      	ldr	r3, [r3, #32]
 801e1e4:	4798      	blx	r3
 801e1e6:	f8b9 3000 	ldrh.w	r3, [r9]
 801e1ea:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e1ee:	f04f 0e00 	mov.w	lr, #0
 801e1f2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e1f6:	fa1f f987 	uxth.w	r9, r7
 801e1fa:	fb01 2303 	mla	r3, r1, r3, r2
 801e1fe:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801e202:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e206:	b289      	uxth	r1, r1
 801e208:	4418      	add	r0, r3
 801e20a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e20e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e212:	459e      	cmp	lr, r3
 801e214:	da5c      	bge.n	801e2d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801e216:	1cc3      	adds	r3, r0, #3
 801e218:	46a2      	mov	sl, r4
 801e21a:	ebaa 0204 	sub.w	r2, sl, r4
 801e21e:	4295      	cmp	r5, r2
 801e220:	dd46      	ble.n	801e2b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801e222:	f04f 0c03 	mov.w	ip, #3
 801e226:	f04f 0b04 	mov.w	fp, #4
 801e22a:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801e22e:	2fff      	cmp	r7, #255	; 0xff
 801e230:	fb1c b202 	smlabb	r2, ip, r2, fp
 801e234:	eb06 0c02 	add.w	ip, r6, r2
 801e238:	f816 b002 	ldrb.w	fp, [r6, r2]
 801e23c:	d02f      	beq.n	801e29e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801e23e:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801e242:	fb12 f201 	smulbb	r2, r2, r1
 801e246:	fb0b 2209 	mla	r2, fp, r9, r2
 801e24a:	b292      	uxth	r2, r2
 801e24c:	f102 0b01 	add.w	fp, r2, #1
 801e250:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e254:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801e258:	fb1b fb01 	smulbb	fp, fp, r1
 801e25c:	1212      	asrs	r2, r2, #8
 801e25e:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e262:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e266:	fb02 b209 	mla	r2, r2, r9, fp
 801e26a:	b292      	uxth	r2, r2
 801e26c:	f102 0b01 	add.w	fp, r2, #1
 801e270:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e274:	1212      	asrs	r2, r2, #8
 801e276:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e27a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e27e:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801e282:	fb1c fc01 	smulbb	ip, ip, r1
 801e286:	fb02 c209 	mla	r2, r2, r9, ip
 801e28a:	b292      	uxth	r2, r2
 801e28c:	f102 0c01 	add.w	ip, r2, #1
 801e290:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e294:	1212      	asrs	r2, r2, #8
 801e296:	f803 2c01 	strb.w	r2, [r3, #-1]
 801e29a:	3303      	adds	r3, #3
 801e29c:	e7bd      	b.n	801e21a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801e29e:	f803 bc03 	strb.w	fp, [r3, #-3]
 801e2a2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e2a6:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e2aa:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e2ae:	e7f2      	b.n	801e296 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801e2b0:	4b0d      	ldr	r3, [pc, #52]	; (801e2e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e2b2:	f10e 0e01 	add.w	lr, lr, #1
 801e2b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e2b8:	881b      	ldrh	r3, [r3, #0]
 801e2ba:	1b5b      	subs	r3, r3, r5
 801e2bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2c0:	4413      	add	r3, r2
 801e2c2:	4418      	add	r0, r3
 801e2c4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e2c8:	1b5b      	subs	r3, r3, r5
 801e2ca:	4443      	add	r3, r8
 801e2cc:	441c      	add	r4, r3
 801e2ce:	e79f      	b.n	801e210 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801e2d0:	4b06      	ldr	r3, [pc, #24]	; (801e2ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e2d2:	6818      	ldr	r0, [r3, #0]
 801e2d4:	6803      	ldr	r3, [r0, #0]
 801e2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2d8:	4798      	blx	r3
 801e2da:	e77a      	b.n	801e1d2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801e2dc:	0802a985 	.word	0x0802a985
 801e2e0:	0802b03e 	.word	0x0802b03e
 801e2e4:	0802ab15 	.word	0x0802ab15
 801e2e8:	2000bb8a 	.word	0x2000bb8a
 801e2ec:	2000bb90 	.word	0x2000bb90

0801e2f0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e2f0:	b570      	push	{r4, r5, r6, lr}
 801e2f2:	780d      	ldrb	r5, [r1, #0]
 801e2f4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e2f8:	2d01      	cmp	r5, #1
 801e2fa:	d00d      	beq.n	801e318 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e2fc:	d307      	bcc.n	801e30e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e2fe:	2d02      	cmp	r5, #2
 801e300:	d10f      	bne.n	801e322 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e302:	4b08      	ldr	r3, [pc, #32]	; (801e324 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e304:	215a      	movs	r1, #90	; 0x5a
 801e306:	4a08      	ldr	r2, [pc, #32]	; (801e328 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e308:	4808      	ldr	r0, [pc, #32]	; (801e32c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e30a:	f007 f92f 	bl	802556c <__assert_func>
 801e30e:	9404      	str	r4, [sp, #16]
 801e310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e314:	f7ff be04 	b.w	801df20 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e318:	9404      	str	r4, [sp, #16]
 801e31a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e31e:	f7ff bef7 	b.w	801e110 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e322:	bd70      	pop	{r4, r5, r6, pc}
 801e324:	0802a93a 	.word	0x0802a93a
 801e328:	0802afbc 	.word	0x0802afbc
 801e32c:	0802ab15 	.word	0x0802ab15

0801e330 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e334:	b08b      	sub	sp, #44	; 0x2c
 801e336:	460c      	mov	r4, r1
 801e338:	4680      	mov	r8, r0
 801e33a:	469a      	mov	sl, r3
 801e33c:	6808      	ldr	r0, [r1, #0]
 801e33e:	ab06      	add	r3, sp, #24
 801e340:	6849      	ldr	r1, [r1, #4]
 801e342:	c303      	stmia	r3!, {r0, r1}
 801e344:	6810      	ldr	r0, [r2, #0]
 801e346:	ab08      	add	r3, sp, #32
 801e348:	6851      	ldr	r1, [r2, #4]
 801e34a:	c303      	stmia	r3!, {r0, r1}
 801e34c:	a806      	add	r0, sp, #24
 801e34e:	f7fa fd0d 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e352:	4621      	mov	r1, r4
 801e354:	a808      	add	r0, sp, #32
 801e356:	4c61      	ldr	r4, [pc, #388]	; (801e4dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e358:	f7fa fcf0 	bl	8018d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e35c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e360:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e364:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e368:	6820      	ldr	r0, [r4, #0]
 801e36a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e36e:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801e372:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801e376:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801e37a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e37e:	440a      	add	r2, r1
 801e380:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e384:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e388:	4413      	add	r3, r2
 801e38a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e38e:	6803      	ldr	r3, [r0, #0]
 801e390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e392:	4798      	blx	r3
 801e394:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e398:	d118      	bne.n	801e3cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e39a:	f010 0f20 	tst.w	r0, #32
 801e39e:	6820      	ldr	r0, [r4, #0]
 801e3a0:	d017      	beq.n	801e3d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e3a2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e3a6:	b2bf      	uxth	r7, r7
 801e3a8:	6801      	ldr	r1, [r0, #0]
 801e3aa:	9402      	str	r4, [sp, #8]
 801e3ac:	fa1f f489 	uxth.w	r4, r9
 801e3b0:	f8cd a00c 	str.w	sl, [sp, #12]
 801e3b4:	9401      	str	r4, [sp, #4]
 801e3b6:	9700      	str	r7, [sp, #0]
 801e3b8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e3bc:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e3be:	4641      	mov	r1, r8
 801e3c0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e3c4:	47a0      	blx	r4
 801e3c6:	b00b      	add	sp, #44	; 0x2c
 801e3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e3d0:	e7e5      	b.n	801e39e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e3d2:	6803      	ldr	r3, [r0, #0]
 801e3d4:	6a1b      	ldr	r3, [r3, #32]
 801e3d6:	4798      	blx	r3
 801e3d8:	4b41      	ldr	r3, [pc, #260]	; (801e4e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801e3da:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e3de:	f04f 0c00 	mov.w	ip, #0
 801e3e2:	881a      	ldrh	r2, [r3, #0]
 801e3e4:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e3e8:	fb04 1202 	mla	r2, r4, r2, r1
 801e3ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e3f0:	4410      	add	r0, r2
 801e3f2:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801e3f6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801e3fa:	0092      	lsls	r2, r2, #2
 801e3fc:	9105      	str	r1, [sp, #20]
 801e3fe:	9204      	str	r2, [sp, #16]
 801e400:	45cc      	cmp	ip, r9
 801e402:	da65      	bge.n	801e4d0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801e404:	1cc4      	adds	r4, r0, #3
 801e406:	f108 0504 	add.w	r5, r8, #4
 801e40a:	f04f 0e00 	mov.w	lr, #0
 801e40e:	45be      	cmp	lr, r7
 801e410:	da4d      	bge.n	801e4ae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801e412:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e416:	b181      	cbz	r1, 801e43a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e418:	29ff      	cmp	r1, #255	; 0xff
 801e41a:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801e41e:	d111      	bne.n	801e444 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e420:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e424:	d10e      	bne.n	801e444 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e426:	f804 bc03 	strb.w	fp, [r4, #-3]
 801e42a:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801e42e:	f804 2c02 	strb.w	r2, [r4, #-2]
 801e432:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801e436:	f804 2c01 	strb.w	r2, [r4, #-1]
 801e43a:	f10e 0e01 	add.w	lr, lr, #1
 801e43e:	3403      	adds	r4, #3
 801e440:	3504      	adds	r5, #4
 801e442:	e7e4      	b.n	801e40e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801e444:	fb0a f101 	mul.w	r1, sl, r1
 801e448:	1c4a      	adds	r2, r1, #1
 801e44a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e44e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e452:	1212      	asrs	r2, r2, #8
 801e454:	b296      	uxth	r6, r2
 801e456:	43d2      	mvns	r2, r2
 801e458:	fb1b fb06 	smulbb	fp, fp, r6
 801e45c:	b2d2      	uxtb	r2, r2
 801e45e:	fb01 b102 	mla	r1, r1, r2, fp
 801e462:	b289      	uxth	r1, r1
 801e464:	f101 0b01 	add.w	fp, r1, #1
 801e468:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e46c:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801e470:	fb1b fb02 	smulbb	fp, fp, r2
 801e474:	1209      	asrs	r1, r1, #8
 801e476:	f804 1c03 	strb.w	r1, [r4, #-3]
 801e47a:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801e47e:	fb01 b106 	mla	r1, r1, r6, fp
 801e482:	b289      	uxth	r1, r1
 801e484:	f101 0b01 	add.w	fp, r1, #1
 801e488:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e48c:	1209      	asrs	r1, r1, #8
 801e48e:	f804 1c02 	strb.w	r1, [r4, #-2]
 801e492:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e496:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e49a:	fb11 f202 	smulbb	r2, r1, r2
 801e49e:	fb0b 2206 	mla	r2, fp, r6, r2
 801e4a2:	b292      	uxth	r2, r2
 801e4a4:	1c56      	adds	r6, r2, #1
 801e4a6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e4aa:	1212      	asrs	r2, r2, #8
 801e4ac:	e7c3      	b.n	801e436 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e4ae:	881a      	ldrh	r2, [r3, #0]
 801e4b0:	f10c 0c01 	add.w	ip, ip, #1
 801e4b4:	9905      	ldr	r1, [sp, #20]
 801e4b6:	1bd2      	subs	r2, r2, r7
 801e4b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e4bc:	440a      	add	r2, r1
 801e4be:	9904      	ldr	r1, [sp, #16]
 801e4c0:	4410      	add	r0, r2
 801e4c2:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e4c6:	1bd2      	subs	r2, r2, r7
 801e4c8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e4cc:	4490      	add	r8, r2
 801e4ce:	e797      	b.n	801e400 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801e4d0:	4b02      	ldr	r3, [pc, #8]	; (801e4dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e4d2:	6818      	ldr	r0, [r3, #0]
 801e4d4:	6803      	ldr	r3, [r0, #0]
 801e4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4d8:	4798      	blx	r3
 801e4da:	e774      	b.n	801e3c6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e4dc:	2000bb90 	.word	0x2000bb90
 801e4e0:	2000bb8a 	.word	0x2000bb8a

0801e4e4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e4e8:	b085      	sub	sp, #20
 801e4ea:	4606      	mov	r6, r0
 801e4ec:	460c      	mov	r4, r1
 801e4ee:	4691      	mov	r9, r2
 801e4f0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e4f4:	4698      	mov	r8, r3
 801e4f6:	b385      	cbz	r5, 801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e4f8:	4608      	mov	r0, r1
 801e4fa:	f7fd fae5 	bl	801bac8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e4fe:	4607      	mov	r7, r0
 801e500:	4620      	mov	r0, r4
 801e502:	f7fd fb1b 	bl	801bb3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e506:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e50a:	4620      	mov	r0, r4
 801e50c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e510:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e514:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e518:	f7fd fc62 	bl	801bde0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e51c:	2801      	cmp	r0, #1
 801e51e:	d00f      	beq.n	801e540 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e520:	4620      	mov	r0, r4
 801e522:	f7fd fc5d 	bl	801bde0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e526:	2802      	cmp	r0, #2
 801e528:	d00a      	beq.n	801e540 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e52a:	4620      	mov	r0, r4
 801e52c:	f7fd fc58 	bl	801bde0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e530:	280b      	cmp	r0, #11
 801e532:	d005      	beq.n	801e540 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e534:	4b1b      	ldr	r3, [pc, #108]	; (801e5a4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801e536:	2142      	movs	r1, #66	; 0x42
 801e538:	4a1b      	ldr	r2, [pc, #108]	; (801e5a8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801e53a:	481c      	ldr	r0, [pc, #112]	; (801e5ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801e53c:	f007 f816 	bl	802556c <__assert_func>
 801e540:	4620      	mov	r0, r4
 801e542:	f7fd fc4d 	bl	801bde0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e546:	2802      	cmp	r0, #2
 801e548:	4620      	mov	r0, r4
 801e54a:	d109      	bne.n	801e560 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801e54c:	f7fd fbc4 	bl	801bcd8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e550:	462b      	mov	r3, r5
 801e552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e554:	a902      	add	r1, sp, #8
 801e556:	f7ff feeb 	bl	801e330 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e55a:	b005      	add	sp, #20
 801e55c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e560:	f7fd fc3e 	bl	801bde0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e564:	280b      	cmp	r0, #11
 801e566:	d10e      	bne.n	801e586 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801e568:	4620      	mov	r0, r4
 801e56a:	f7fd fbb5 	bl	801bcd8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e56e:	4606      	mov	r6, r0
 801e570:	4620      	mov	r0, r4
 801e572:	f7fd fbe3 	bl	801bd3c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e576:	9500      	str	r5, [sp, #0]
 801e578:	4601      	mov	r1, r0
 801e57a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e57c:	aa02      	add	r2, sp, #8
 801e57e:	4630      	mov	r0, r6
 801e580:	f7ff feb6 	bl	801e2f0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e584:	e7e9      	b.n	801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e586:	6833      	ldr	r3, [r6, #0]
 801e588:	4620      	mov	r0, r4
 801e58a:	691f      	ldr	r7, [r3, #16]
 801e58c:	f7fd fba4 	bl	801bcd8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e590:	2300      	movs	r3, #0
 801e592:	4601      	mov	r1, r0
 801e594:	aa02      	add	r2, sp, #8
 801e596:	4630      	mov	r0, r6
 801e598:	e9cd 5300 	strd	r5, r3, [sp]
 801e59c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e59e:	47b8      	blx	r7
 801e5a0:	e7db      	b.n	801e55a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e5a2:	bf00      	nop
 801e5a4:	0802a9d3 	.word	0x0802a9d3
 801e5a8:	0802b0c7 	.word	0x0802b0c7
 801e5ac:	0802ab15 	.word	0x0802ab15

0801e5b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e5b0:	b570      	push	{r4, r5, r6, lr}
 801e5b2:	9d04      	ldr	r5, [sp, #16]
 801e5b4:	460c      	mov	r4, r1
 801e5b6:	4619      	mov	r1, r3
 801e5b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e5bc:	2a0c      	cmp	r2, #12
 801e5be:	d826      	bhi.n	801e60e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801e5c0:	e8df f002 	tbb	[pc, r2]
 801e5c4:	200e1407 	.word	0x200e1407
 801e5c8:	20202020 	.word	0x20202020
 801e5cc:	20202020 	.word	0x20202020
 801e5d0:	20          	.byte	0x20
 801e5d1:	00          	.byte	0x00
 801e5d2:	4b0f      	ldr	r3, [pc, #60]	; (801e610 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e5d4:	f240 117f 	movw	r1, #383	; 0x17f
 801e5d8:	4a0e      	ldr	r2, [pc, #56]	; (801e614 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e5da:	480f      	ldr	r0, [pc, #60]	; (801e618 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801e5dc:	f006 ffc6 	bl	802556c <__assert_func>
 801e5e0:	462a      	mov	r2, r5
 801e5e2:	4620      	mov	r0, r4
 801e5e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e5e8:	f7ff bea2 	b.w	801e330 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e5ec:	6802      	ldr	r2, [r0, #0]
 801e5ee:	2600      	movs	r6, #0
 801e5f0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e5f4:	6916      	ldr	r6, [r2, #16]
 801e5f6:	462b      	mov	r3, r5
 801e5f8:	460a      	mov	r2, r1
 801e5fa:	4621      	mov	r1, r4
 801e5fc:	46b4      	mov	ip, r6
 801e5fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e602:	4760      	bx	ip
 801e604:	4b05      	ldr	r3, [pc, #20]	; (801e61c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801e606:	f240 1191 	movw	r1, #401	; 0x191
 801e60a:	4a02      	ldr	r2, [pc, #8]	; (801e614 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e60c:	e7e5      	b.n	801e5da <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801e60e:	bd70      	pop	{r4, r5, r6, pc}
 801e610:	0802acee 	.word	0x0802acee
 801e614:	0802b3af 	.word	0x0802b3af
 801e618:	0802ab15 	.word	0x0802ab15
 801e61c:	0802ad2f 	.word	0x0802ad2f

0801e620 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e620:	b158      	cbz	r0, 801e63a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801e622:	2902      	cmp	r1, #2
 801e624:	d00f      	beq.n	801e646 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801e626:	2903      	cmp	r1, #3
 801e628:	d010      	beq.n	801e64c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e62a:	2901      	cmp	r1, #1
 801e62c:	d101      	bne.n	801e632 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e62e:	2001      	movs	r0, #1
 801e630:	4770      	bx	lr
 801e632:	4b08      	ldr	r3, [pc, #32]	; (801e654 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e634:	8819      	ldrh	r1, [r3, #0]
 801e636:	4248      	negs	r0, r1
 801e638:	4770      	bx	lr
 801e63a:	2902      	cmp	r1, #2
 801e63c:	d006      	beq.n	801e64c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e63e:	2903      	cmp	r1, #3
 801e640:	d0f7      	beq.n	801e632 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e642:	2901      	cmp	r1, #1
 801e644:	d1f3      	bne.n	801e62e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801e646:	4b03      	ldr	r3, [pc, #12]	; (801e654 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e648:	8818      	ldrh	r0, [r3, #0]
 801e64a:	4770      	bx	lr
 801e64c:	f04f 30ff 	mov.w	r0, #4294967295
 801e650:	4770      	bx	lr
 801e652:	bf00      	nop
 801e654:	2000bb8a 	.word	0x2000bb8a

0801e658 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e658:	b170      	cbz	r0, 801e678 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801e65a:	2902      	cmp	r1, #2
 801e65c:	d012      	beq.n	801e684 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801e65e:	2903      	cmp	r1, #3
 801e660:	d006      	beq.n	801e670 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e662:	2901      	cmp	r1, #1
 801e664:	d001      	beq.n	801e66a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e666:	2001      	movs	r0, #1
 801e668:	4770      	bx	lr
 801e66a:	4b08      	ldr	r3, [pc, #32]	; (801e68c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e66c:	8818      	ldrh	r0, [r3, #0]
 801e66e:	4770      	bx	lr
 801e670:	4b06      	ldr	r3, [pc, #24]	; (801e68c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e672:	8818      	ldrh	r0, [r3, #0]
 801e674:	4240      	negs	r0, r0
 801e676:	4770      	bx	lr
 801e678:	2902      	cmp	r1, #2
 801e67a:	d0f9      	beq.n	801e670 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e67c:	2903      	cmp	r1, #3
 801e67e:	d0f2      	beq.n	801e666 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801e680:	2901      	cmp	r1, #1
 801e682:	d1f2      	bne.n	801e66a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e684:	f04f 30ff 	mov.w	r0, #4294967295
 801e688:	4770      	bx	lr
 801e68a:	bf00      	nop
 801e68c:	2000bb8a 	.word	0x2000bb8a

0801e690 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e694:	b095      	sub	sp, #84	; 0x54
 801e696:	9109      	str	r1, [sp, #36]	; 0x24
 801e698:	a910      	add	r1, sp, #64	; 0x40
 801e69a:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801e69e:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801e6a2:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801e6a6:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801e6aa:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801e6ae:	e881 000c 	stmia.w	r1, {r2, r3}
 801e6b2:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801e6b6:	9306      	str	r3, [sp, #24]
 801e6b8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801e6bc:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801e6c0:	930e      	str	r3, [sp, #56]	; 0x38
 801e6c2:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801e6c6:	798f      	ldrb	r7, [r1, #6]
 801e6c8:	930a      	str	r3, [sp, #40]	; 0x28
 801e6ca:	7b4b      	ldrb	r3, [r1, #13]
 801e6cc:	0158      	lsls	r0, r3, #5
 801e6ce:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e6d2:	4338      	orrs	r0, r7
 801e6d4:	9008      	str	r0, [sp, #32]
 801e6d6:	f000 8174 	beq.w	801e9c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e6da:	011b      	lsls	r3, r3, #4
 801e6dc:	79c8      	ldrb	r0, [r1, #7]
 801e6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e6e2:	4303      	orrs	r3, r0
 801e6e4:	9307      	str	r3, [sp, #28]
 801e6e6:	f000 816c 	beq.w	801e9c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e6ea:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e6ee:	b29b      	uxth	r3, r3
 801e6f0:	2e00      	cmp	r6, #0
 801e6f2:	f000 8112 	beq.w	801e91a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801e6f6:	1af6      	subs	r6, r6, r3
 801e6f8:	b2b6      	uxth	r6, r6
 801e6fa:	0433      	lsls	r3, r6, #16
 801e6fc:	d502      	bpl.n	801e704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e6fe:	1bad      	subs	r5, r5, r6
 801e700:	2600      	movs	r6, #0
 801e702:	b22d      	sxth	r5, r5
 801e704:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e708:	a810      	add	r0, sp, #64	; 0x40
 801e70a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e70e:	428d      	cmp	r5, r1
 801e710:	b28b      	uxth	r3, r1
 801e712:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801e716:	bfbf      	itttt	lt
 801e718:	18f6      	addlt	r6, r6, r3
 801e71a:	1b75      	sublt	r5, r6, r5
 801e71c:	b2ae      	uxthlt	r6, r5
 801e71e:	460d      	movlt	r5, r1
 801e720:	8891      	ldrh	r1, [r2, #4]
 801e722:	440b      	add	r3, r1
 801e724:	4629      	mov	r1, r5
 801e726:	b21b      	sxth	r3, r3
 801e728:	930d      	str	r3, [sp, #52]	; 0x34
 801e72a:	88d3      	ldrh	r3, [r2, #6]
 801e72c:	9a06      	ldr	r2, [sp, #24]
 801e72e:	449a      	add	sl, r3
 801e730:	fa0f f38a 	sxth.w	r3, sl
 801e734:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801e738:	930c      	str	r3, [sp, #48]	; 0x30
 801e73a:	4bb8      	ldr	r3, [pc, #736]	; (801ea1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801e73c:	f893 b000 	ldrb.w	fp, [r3]
 801e740:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e744:	f1dc 0300 	rsbs	r3, ip, #0
 801e748:	eb43 030c 	adc.w	r3, r3, ip
 801e74c:	930b      	str	r3, [sp, #44]	; 0x2c
 801e74e:	464b      	mov	r3, r9
 801e750:	f7fa f9e6 	bl	8018b20 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e754:	4629      	mov	r1, r5
 801e756:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801e75a:	464b      	mov	r3, r9
 801e75c:	9a06      	ldr	r2, [sp, #24]
 801e75e:	a810      	add	r0, sp, #64	; 0x40
 801e760:	f7fa f9f6 	bl	8018b50 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e764:	a914      	add	r1, sp, #80	; 0x50
 801e766:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e76a:	a813      	add	r0, sp, #76	; 0x4c
 801e76c:	f7fa fad0 	bl	8018d10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e770:	f1b9 0f00 	cmp.w	r9, #0
 801e774:	f040 80d4 	bne.w	801e920 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801e778:	f1bb 0f01 	cmp.w	fp, #1
 801e77c:	f040 80d8 	bne.w	801e930 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801e780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e782:	2b00      	cmp	r3, #0
 801e784:	f040 8122 	bne.w	801e9cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801e788:	4ba5      	ldr	r3, [pc, #660]	; (801ea20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e78a:	6818      	ldr	r0, [r3, #0]
 801e78c:	6803      	ldr	r3, [r0, #0]
 801e78e:	6a1b      	ldr	r3, [r3, #32]
 801e790:	4798      	blx	r3
 801e792:	4aa4      	ldr	r2, [pc, #656]	; (801ea24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801e794:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801e798:	8811      	ldrh	r1, [r2, #0]
 801e79a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e79e:	fb01 2303 	mla	r3, r1, r3, r2
 801e7a2:	2201      	movs	r2, #1
 801e7a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e7a8:	4590      	cmp	r8, r2
 801e7aa:	4403      	add	r3, r0
 801e7ac:	9307      	str	r3, [sp, #28]
 801e7ae:	fa02 f308 	lsl.w	r3, r2, r8
 801e7b2:	f103 33ff 	add.w	r3, r3, #4294967295
 801e7b6:	b2db      	uxtb	r3, r3
 801e7b8:	930f      	str	r3, [sp, #60]	; 0x3c
 801e7ba:	f000 8109 	beq.w	801e9d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801e7be:	f1b8 0f02 	cmp.w	r8, #2
 801e7c2:	f000 813e 	beq.w	801ea42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801e7c6:	f1b8 0f04 	cmp.w	r8, #4
 801e7ca:	f000 8132 	beq.w	801ea32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801e7ce:	b906      	cbnz	r6, 801e7d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801e7d0:	b174      	cbz	r4, 801e7f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801e7d2:	fb17 6304 	smlabb	r3, r7, r4, r6
 801e7d6:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e7d8:	ebaa 0a04 	sub.w	sl, sl, r4
 801e7dc:	fb13 f308 	smulbb	r3, r3, r8
 801e7e0:	fa1f fa8a 	uxth.w	sl, sl
 801e7e4:	b29b      	uxth	r3, r3
 801e7e6:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801e7ea:	f003 0407 	and.w	r4, r3, #7
 801e7ee:	9124      	str	r1, [sp, #144]	; 0x90
 801e7f0:	4649      	mov	r1, r9
 801e7f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e7f4:	f7ff ff14 	bl	801e620 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e7f8:	4649      	mov	r1, r9
 801e7fa:	4683      	mov	fp, r0
 801e7fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e7fe:	f7ff ff2b 	bl	801e658 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e802:	9906      	ldr	r1, [sp, #24]
 801e804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e806:	1bad      	subs	r5, r5, r6
 801e808:	1a5b      	subs	r3, r3, r1
 801e80a:	459a      	cmp	sl, r3
 801e80c:	bfa8      	it	ge
 801e80e:	469a      	movge	sl, r3
 801e810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e812:	1b5d      	subs	r5, r3, r5
 801e814:	9b08      	ldr	r3, [sp, #32]
 801e816:	429d      	cmp	r5, r3
 801e818:	bfd4      	ite	le
 801e81a:	ebc6 0605 	rsble	r6, r6, r5
 801e81e:	ebc6 0603 	rsbgt	r6, r6, r3
 801e822:	1bbf      	subs	r7, r7, r6
 801e824:	fb0b 0016 	mls	r0, fp, r6, r0
 801e828:	fb08 f307 	mul.w	r3, r8, r7
 801e82c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e830:	9308      	str	r3, [sp, #32]
 801e832:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e834:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e838:	930b      	str	r3, [sp, #44]	; 0x2c
 801e83a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e83c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e840:	930c      	str	r3, [sp, #48]	; 0x30
 801e842:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e844:	b2db      	uxtb	r3, r3
 801e846:	930d      	str	r3, [sp, #52]	; 0x34
 801e848:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e84a:	7819      	ldrb	r1, [r3, #0]
 801e84c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e850:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801e854:	4121      	asrs	r1, r4
 801e856:	9306      	str	r3, [sp, #24]
 801e858:	fb03 0b0b 	mla	fp, r3, fp, r0
 801e85c:	b2c9      	uxtb	r1, r1
 801e85e:	f1ba 0f00 	cmp.w	sl, #0
 801e862:	f340 80d1 	ble.w	801ea08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801e866:	46b6      	mov	lr, r6
 801e868:	9807      	ldr	r0, [sp, #28]
 801e86a:	f1be 0f00 	cmp.w	lr, #0
 801e86e:	f340 80b8 	ble.w	801e9e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801e872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e874:	400b      	ands	r3, r1
 801e876:	d03e      	beq.n	801e8f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e878:	fb13 f302 	smulbb	r3, r3, r2
 801e87c:	2bfe      	cmp	r3, #254	; 0xfe
 801e87e:	dd03      	ble.n	801e888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801e880:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e882:	2dff      	cmp	r5, #255	; 0xff
 801e884:	f000 80a6 	beq.w	801e9d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801e888:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e88a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e88c:	fb15 f303 	smulbb	r3, r5, r3
 801e890:	b29b      	uxth	r3, r3
 801e892:	1c5d      	adds	r5, r3, #1
 801e894:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e898:	7805      	ldrb	r5, [r0, #0]
 801e89a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e89e:	fa1f fc83 	uxth.w	ip, r3
 801e8a2:	43db      	mvns	r3, r3
 801e8a4:	fb17 f90c 	smulbb	r9, r7, ip
 801e8a8:	b2db      	uxtb	r3, r3
 801e8aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e8ac:	fb05 9503 	mla	r5, r5, r3, r9
 801e8b0:	b2ad      	uxth	r5, r5
 801e8b2:	f105 0901 	add.w	r9, r5, #1
 801e8b6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e8ba:	fb17 f90c 	smulbb	r9, r7, ip
 801e8be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e8c0:	122d      	asrs	r5, r5, #8
 801e8c2:	fb17 fc0c 	smulbb	ip, r7, ip
 801e8c6:	7005      	strb	r5, [r0, #0]
 801e8c8:	7845      	ldrb	r5, [r0, #1]
 801e8ca:	fb05 9503 	mla	r5, r5, r3, r9
 801e8ce:	b2ad      	uxth	r5, r5
 801e8d0:	f105 0901 	add.w	r9, r5, #1
 801e8d4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e8d8:	122d      	asrs	r5, r5, #8
 801e8da:	7045      	strb	r5, [r0, #1]
 801e8dc:	7885      	ldrb	r5, [r0, #2]
 801e8de:	fb05 cc03 	mla	ip, r5, r3, ip
 801e8e2:	fa1f fc8c 	uxth.w	ip, ip
 801e8e6:	f10c 0301 	add.w	r3, ip, #1
 801e8ea:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e8ee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e8f2:	f880 c002 	strb.w	ip, [r0, #2]
 801e8f6:	4444      	add	r4, r8
 801e8f8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e8fc:	b2a4      	uxth	r4, r4
 801e8fe:	2c07      	cmp	r4, #7
 801e900:	bf89      	itett	hi
 801e902:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801e904:	fa41 f108 	asrls.w	r1, r1, r8
 801e908:	2400      	movhi	r4, #0
 801e90a:	7859      	ldrbhi	r1, [r3, #1]
 801e90c:	bf8a      	itet	hi
 801e90e:	3301      	addhi	r3, #1
 801e910:	b2c9      	uxtbls	r1, r1
 801e912:	9324      	strhi	r3, [sp, #144]	; 0x90
 801e914:	9b06      	ldr	r3, [sp, #24]
 801e916:	4418      	add	r0, r3
 801e918:	e7a7      	b.n	801e86a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801e91a:	441d      	add	r5, r3
 801e91c:	b22d      	sxth	r5, r5
 801e91e:	e6f1      	b.n	801e704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e920:	f1b9 0f01 	cmp.w	r9, #1
 801e924:	f47f af2c 	bne.w	801e780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e928:	f1bb 0f01 	cmp.w	fp, #1
 801e92c:	f47f af28 	bne.w	801e780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e930:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801ea20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e934:	f8db 0000 	ldr.w	r0, [fp]
 801e938:	6803      	ldr	r3, [r0, #0]
 801e93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e93c:	4798      	blx	r3
 801e93e:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801e942:	465a      	mov	r2, fp
 801e944:	d006      	beq.n	801e954 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e946:	f1b8 0f04 	cmp.w	r8, #4
 801e94a:	d13d      	bne.n	801e9c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801e94c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e94e:	3300      	adds	r3, #0
 801e950:	bf18      	it	ne
 801e952:	2301      	movne	r3, #1
 801e954:	05c0      	lsls	r0, r0, #23
 801e956:	d567      	bpl.n	801ea28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e958:	f1b8 0f08 	cmp.w	r8, #8
 801e95c:	d164      	bne.n	801ea28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e95e:	2b00      	cmp	r3, #0
 801e960:	bf0c      	ite	eq
 801e962:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801e966:	2180      	movne	r1, #128	; 0x80
 801e968:	2e00      	cmp	r6, #0
 801e96a:	f47f af09 	bne.w	801e780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e96e:	2c00      	cmp	r4, #0
 801e970:	f47f af06 	bne.w	801e780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e974:	9b08      	ldr	r3, [sp, #32]
 801e976:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e978:	442b      	add	r3, r5
 801e97a:	4283      	cmp	r3, r0
 801e97c:	f73f af00 	bgt.w	801e780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e980:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801e984:	4403      	add	r3, r0
 801e986:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e988:	4283      	cmp	r3, r0
 801e98a:	f73f aef9 	bgt.w	801e780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e98e:	f1b8 0f08 	cmp.w	r8, #8
 801e992:	6810      	ldr	r0, [r2, #0]
 801e994:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801e998:	bf18      	it	ne
 801e99a:	3701      	addne	r7, #1
 801e99c:	6804      	ldr	r4, [r0, #0]
 801e99e:	9105      	str	r1, [sp, #20]
 801e9a0:	bf18      	it	ne
 801e9a2:	f027 0701 	bicne.w	r7, r7, #1
 801e9a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e9a8:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801e9ac:	bf18      	it	ne
 801e9ae:	b2bf      	uxthne	r7, r7
 801e9b0:	9104      	str	r1, [sp, #16]
 801e9b2:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e9b4:	e9cd 7a00 	strd	r7, sl, [sp]
 801e9b8:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e9bc:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e9be:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801e9c0:	47a0      	blx	r4
 801e9c2:	b015      	add	sp, #84	; 0x54
 801e9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9c8:	2300      	movs	r3, #0
 801e9ca:	e7c3      	b.n	801e954 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e9ce:	e6e0      	b.n	801e792 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e9d0:	22ff      	movs	r2, #255	; 0xff
 801e9d2:	e6fc      	b.n	801e7ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e9d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e9d6:	7003      	strb	r3, [r0, #0]
 801e9d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e9da:	7043      	strb	r3, [r0, #1]
 801e9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e9de:	7083      	strb	r3, [r0, #2]
 801e9e0:	e789      	b.n	801e8f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e9e2:	9b08      	ldr	r3, [sp, #32]
 801e9e4:	b153      	cbz	r3, 801e9fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801e9e6:	441c      	add	r4, r3
 801e9e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e9ea:	b2a4      	uxth	r4, r4
 801e9ec:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e9f0:	f004 0407 	and.w	r4, r4, #7
 801e9f4:	7819      	ldrb	r1, [r3, #0]
 801e9f6:	9324      	str	r3, [sp, #144]	; 0x90
 801e9f8:	4121      	asrs	r1, r4
 801e9fa:	b2c9      	uxtb	r1, r1
 801e9fc:	9b07      	ldr	r3, [sp, #28]
 801e9fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ea02:	445b      	add	r3, fp
 801ea04:	9307      	str	r3, [sp, #28]
 801ea06:	e72a      	b.n	801e85e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	d1d9      	bne.n	801e9c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ea0e:	4b04      	ldr	r3, [pc, #16]	; (801ea20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801ea10:	6818      	ldr	r0, [r3, #0]
 801ea12:	6803      	ldr	r3, [r0, #0]
 801ea14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea16:	4798      	blx	r3
 801ea18:	e7d3      	b.n	801e9c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ea1a:	bf00      	nop
 801ea1c:	2000bb88 	.word	0x2000bb88
 801ea20:	2000bb90 	.word	0x2000bb90
 801ea24:	2000bb8a 	.word	0x2000bb8a
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	f43f aea9 	beq.w	801e780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ea2e:	2180      	movs	r1, #128	; 0x80
 801ea30:	e79a      	b.n	801e968 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801ea32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea34:	b11b      	cbz	r3, 801ea3e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801ea36:	07fb      	lsls	r3, r7, #31
 801ea38:	d501      	bpl.n	801ea3e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801ea3a:	3701      	adds	r7, #1
 801ea3c:	b2bf      	uxth	r7, r7
 801ea3e:	2211      	movs	r2, #17
 801ea40:	e6c5      	b.n	801e7ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ea42:	2255      	movs	r2, #85	; 0x55
 801ea44:	e6c3      	b.n	801e7ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ea46:	bf00      	nop

0801ea48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ea48:	b538      	push	{r3, r4, r5, lr}
 801ea4a:	4c15      	ldr	r4, [pc, #84]	; (801eaa0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ea4c:	4605      	mov	r5, r0
 801ea4e:	7823      	ldrb	r3, [r4, #0]
 801ea50:	f3bf 8f5b 	dmb	ish
 801ea54:	07da      	lsls	r2, r3, #31
 801ea56:	d40b      	bmi.n	801ea70 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ea58:	4620      	mov	r0, r4
 801ea5a:	f006 fd5e 	bl	802551a <__cxa_guard_acquire>
 801ea5e:	b138      	cbz	r0, 801ea70 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ea60:	4620      	mov	r0, r4
 801ea62:	f006 fd66 	bl	8025532 <__cxa_guard_release>
 801ea66:	4a0f      	ldr	r2, [pc, #60]	; (801eaa4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ea68:	490f      	ldr	r1, [pc, #60]	; (801eaa8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ea6a:	4810      	ldr	r0, [pc, #64]	; (801eaac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ea6c:	f006 fd4b 	bl	8025506 <__aeabi_atexit>
 801ea70:	4c0f      	ldr	r4, [pc, #60]	; (801eab0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ea72:	7823      	ldrb	r3, [r4, #0]
 801ea74:	f3bf 8f5b 	dmb	ish
 801ea78:	07db      	lsls	r3, r3, #31
 801ea7a:	d40b      	bmi.n	801ea94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ea7c:	4620      	mov	r0, r4
 801ea7e:	f006 fd4c 	bl	802551a <__cxa_guard_acquire>
 801ea82:	b138      	cbz	r0, 801ea94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ea84:	4620      	mov	r0, r4
 801ea86:	f006 fd54 	bl	8025532 <__cxa_guard_release>
 801ea8a:	4a06      	ldr	r2, [pc, #24]	; (801eaa4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ea8c:	4909      	ldr	r1, [pc, #36]	; (801eab4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ea8e:	480a      	ldr	r0, [pc, #40]	; (801eab8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ea90:	f006 fd39 	bl	8025506 <__aeabi_atexit>
 801ea94:	4b05      	ldr	r3, [pc, #20]	; (801eaac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ea96:	612b      	str	r3, [r5, #16]
 801ea98:	4b07      	ldr	r3, [pc, #28]	; (801eab8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ea9a:	616b      	str	r3, [r5, #20]
 801ea9c:	bd38      	pop	{r3, r4, r5, pc}
 801ea9e:	bf00      	nop
 801eaa0:	2000bc9c 	.word	0x2000bc9c
 801eaa4:	20000000 	.word	0x20000000
 801eaa8:	0801d67f 	.word	0x0801d67f
 801eaac:	20000098 	.word	0x20000098
 801eab0:	2000bca0 	.word	0x2000bca0
 801eab4:	0801d67d 	.word	0x0801d67d
 801eab8:	2000009c 	.word	0x2000009c

0801eabc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801eabc:	b538      	push	{r3, r4, r5, lr}
 801eabe:	4c15      	ldr	r4, [pc, #84]	; (801eb14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801eac0:	4605      	mov	r5, r0
 801eac2:	7823      	ldrb	r3, [r4, #0]
 801eac4:	f3bf 8f5b 	dmb	ish
 801eac8:	07da      	lsls	r2, r3, #31
 801eaca:	d40b      	bmi.n	801eae4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801eacc:	4620      	mov	r0, r4
 801eace:	f006 fd24 	bl	802551a <__cxa_guard_acquire>
 801ead2:	b138      	cbz	r0, 801eae4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ead4:	4620      	mov	r0, r4
 801ead6:	f006 fd2c 	bl	8025532 <__cxa_guard_release>
 801eada:	4a0f      	ldr	r2, [pc, #60]	; (801eb18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801eadc:	490f      	ldr	r1, [pc, #60]	; (801eb1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801eade:	4810      	ldr	r0, [pc, #64]	; (801eb20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801eae0:	f006 fd11 	bl	8025506 <__aeabi_atexit>
 801eae4:	4c0f      	ldr	r4, [pc, #60]	; (801eb24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801eae6:	7823      	ldrb	r3, [r4, #0]
 801eae8:	f3bf 8f5b 	dmb	ish
 801eaec:	07db      	lsls	r3, r3, #31
 801eaee:	d40b      	bmi.n	801eb08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801eaf0:	4620      	mov	r0, r4
 801eaf2:	f006 fd12 	bl	802551a <__cxa_guard_acquire>
 801eaf6:	b138      	cbz	r0, 801eb08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801eaf8:	4620      	mov	r0, r4
 801eafa:	f006 fd1a 	bl	8025532 <__cxa_guard_release>
 801eafe:	4a06      	ldr	r2, [pc, #24]	; (801eb18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801eb00:	4909      	ldr	r1, [pc, #36]	; (801eb28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801eb02:	480a      	ldr	r0, [pc, #40]	; (801eb2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801eb04:	f006 fcff 	bl	8025506 <__aeabi_atexit>
 801eb08:	4b05      	ldr	r3, [pc, #20]	; (801eb20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801eb0a:	60ab      	str	r3, [r5, #8]
 801eb0c:	4b07      	ldr	r3, [pc, #28]	; (801eb2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801eb0e:	60eb      	str	r3, [r5, #12]
 801eb10:	bd38      	pop	{r3, r4, r5, pc}
 801eb12:	bf00      	nop
 801eb14:	2000bc7c 	.word	0x2000bc7c
 801eb18:	20000000 	.word	0x20000000
 801eb1c:	0801d683 	.word	0x0801d683
 801eb20:	20000078 	.word	0x20000078
 801eb24:	2000bc80 	.word	0x2000bc80
 801eb28:	0801d681 	.word	0x0801d681
 801eb2c:	2000007c 	.word	0x2000007c

0801eb30 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801eb30:	b510      	push	{r4, lr}
 801eb32:	4604      	mov	r4, r0
 801eb34:	f7ff ff88 	bl	801ea48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801eb38:	4620      	mov	r0, r4
 801eb3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb3e:	f7ff bfbd 	b.w	801eabc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801eb44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801eb44:	b538      	push	{r3, r4, r5, lr}
 801eb46:	4c15      	ldr	r4, [pc, #84]	; (801eb9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801eb48:	4605      	mov	r5, r0
 801eb4a:	7823      	ldrb	r3, [r4, #0]
 801eb4c:	f3bf 8f5b 	dmb	ish
 801eb50:	07da      	lsls	r2, r3, #31
 801eb52:	d40b      	bmi.n	801eb6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801eb54:	4620      	mov	r0, r4
 801eb56:	f006 fce0 	bl	802551a <__cxa_guard_acquire>
 801eb5a:	b138      	cbz	r0, 801eb6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801eb5c:	4620      	mov	r0, r4
 801eb5e:	f006 fce8 	bl	8025532 <__cxa_guard_release>
 801eb62:	4a0f      	ldr	r2, [pc, #60]	; (801eba0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801eb64:	490f      	ldr	r1, [pc, #60]	; (801eba4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801eb66:	4810      	ldr	r0, [pc, #64]	; (801eba8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801eb68:	f006 fccd 	bl	8025506 <__aeabi_atexit>
 801eb6c:	4c0f      	ldr	r4, [pc, #60]	; (801ebac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801eb6e:	7823      	ldrb	r3, [r4, #0]
 801eb70:	f3bf 8f5b 	dmb	ish
 801eb74:	07db      	lsls	r3, r3, #31
 801eb76:	d40b      	bmi.n	801eb90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801eb78:	4620      	mov	r0, r4
 801eb7a:	f006 fcce 	bl	802551a <__cxa_guard_acquire>
 801eb7e:	b138      	cbz	r0, 801eb90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801eb80:	4620      	mov	r0, r4
 801eb82:	f006 fcd6 	bl	8025532 <__cxa_guard_release>
 801eb86:	4a06      	ldr	r2, [pc, #24]	; (801eba0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801eb88:	4909      	ldr	r1, [pc, #36]	; (801ebb0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801eb8a:	480a      	ldr	r0, [pc, #40]	; (801ebb4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801eb8c:	f006 fcbb 	bl	8025506 <__aeabi_atexit>
 801eb90:	4b05      	ldr	r3, [pc, #20]	; (801eba8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801eb92:	622b      	str	r3, [r5, #32]
 801eb94:	4b07      	ldr	r3, [pc, #28]	; (801ebb4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801eb96:	626b      	str	r3, [r5, #36]	; 0x24
 801eb98:	bd38      	pop	{r3, r4, r5, pc}
 801eb9a:	bf00      	nop
 801eb9c:	2000bca4 	.word	0x2000bca4
 801eba0:	20000000 	.word	0x20000000
 801eba4:	0801d677 	.word	0x0801d677
 801eba8:	200000a0 	.word	0x200000a0
 801ebac:	2000bca8 	.word	0x2000bca8
 801ebb0:	0801d675 	.word	0x0801d675
 801ebb4:	200000a4 	.word	0x200000a4

0801ebb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ebb8:	b538      	push	{r3, r4, r5, lr}
 801ebba:	4c15      	ldr	r4, [pc, #84]	; (801ec10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ebbc:	4605      	mov	r5, r0
 801ebbe:	7823      	ldrb	r3, [r4, #0]
 801ebc0:	f3bf 8f5b 	dmb	ish
 801ebc4:	07da      	lsls	r2, r3, #31
 801ebc6:	d40b      	bmi.n	801ebe0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ebc8:	4620      	mov	r0, r4
 801ebca:	f006 fca6 	bl	802551a <__cxa_guard_acquire>
 801ebce:	b138      	cbz	r0, 801ebe0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ebd0:	4620      	mov	r0, r4
 801ebd2:	f006 fcae 	bl	8025532 <__cxa_guard_release>
 801ebd6:	4a0f      	ldr	r2, [pc, #60]	; (801ec14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ebd8:	490f      	ldr	r1, [pc, #60]	; (801ec18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ebda:	4810      	ldr	r0, [pc, #64]	; (801ec1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ebdc:	f006 fc93 	bl	8025506 <__aeabi_atexit>
 801ebe0:	4c0f      	ldr	r4, [pc, #60]	; (801ec20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ebe2:	7823      	ldrb	r3, [r4, #0]
 801ebe4:	f3bf 8f5b 	dmb	ish
 801ebe8:	07db      	lsls	r3, r3, #31
 801ebea:	d40b      	bmi.n	801ec04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ebec:	4620      	mov	r0, r4
 801ebee:	f006 fc94 	bl	802551a <__cxa_guard_acquire>
 801ebf2:	b138      	cbz	r0, 801ec04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ebf4:	4620      	mov	r0, r4
 801ebf6:	f006 fc9c 	bl	8025532 <__cxa_guard_release>
 801ebfa:	4a06      	ldr	r2, [pc, #24]	; (801ec14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ebfc:	4909      	ldr	r1, [pc, #36]	; (801ec24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ebfe:	480a      	ldr	r0, [pc, #40]	; (801ec28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ec00:	f006 fc81 	bl	8025506 <__aeabi_atexit>
 801ec04:	4b05      	ldr	r3, [pc, #20]	; (801ec1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ec06:	61ab      	str	r3, [r5, #24]
 801ec08:	4b07      	ldr	r3, [pc, #28]	; (801ec28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ec0a:	61eb      	str	r3, [r5, #28]
 801ec0c:	bd38      	pop	{r3, r4, r5, pc}
 801ec0e:	bf00      	nop
 801ec10:	2000bc84 	.word	0x2000bc84
 801ec14:	20000000 	.word	0x20000000
 801ec18:	0801d67b 	.word	0x0801d67b
 801ec1c:	20000080 	.word	0x20000080
 801ec20:	2000bc88 	.word	0x2000bc88
 801ec24:	0801d679 	.word	0x0801d679
 801ec28:	20000084 	.word	0x20000084

0801ec2c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801ec2c:	b510      	push	{r4, lr}
 801ec2e:	4604      	mov	r4, r0
 801ec30:	f7ff ff88 	bl	801eb44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801ec34:	4620      	mov	r0, r4
 801ec36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec3a:	f7ff bfbd 	b.w	801ebb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801ec40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801ec40:	b538      	push	{r3, r4, r5, lr}
 801ec42:	4c15      	ldr	r4, [pc, #84]	; (801ec98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801ec44:	4605      	mov	r5, r0
 801ec46:	7823      	ldrb	r3, [r4, #0]
 801ec48:	f3bf 8f5b 	dmb	ish
 801ec4c:	07da      	lsls	r2, r3, #31
 801ec4e:	d40b      	bmi.n	801ec68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801ec50:	4620      	mov	r0, r4
 801ec52:	f006 fc62 	bl	802551a <__cxa_guard_acquire>
 801ec56:	b138      	cbz	r0, 801ec68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801ec58:	4620      	mov	r0, r4
 801ec5a:	f006 fc6a 	bl	8025532 <__cxa_guard_release>
 801ec5e:	4a0f      	ldr	r2, [pc, #60]	; (801ec9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801ec60:	490f      	ldr	r1, [pc, #60]	; (801eca0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801ec62:	4810      	ldr	r0, [pc, #64]	; (801eca4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801ec64:	f006 fc4f 	bl	8025506 <__aeabi_atexit>
 801ec68:	4c0f      	ldr	r4, [pc, #60]	; (801eca8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801ec6a:	7823      	ldrb	r3, [r4, #0]
 801ec6c:	f3bf 8f5b 	dmb	ish
 801ec70:	07db      	lsls	r3, r3, #31
 801ec72:	d40b      	bmi.n	801ec8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801ec74:	4620      	mov	r0, r4
 801ec76:	f006 fc50 	bl	802551a <__cxa_guard_acquire>
 801ec7a:	b138      	cbz	r0, 801ec8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801ec7c:	4620      	mov	r0, r4
 801ec7e:	f006 fc58 	bl	8025532 <__cxa_guard_release>
 801ec82:	4a06      	ldr	r2, [pc, #24]	; (801ec9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801ec84:	4909      	ldr	r1, [pc, #36]	; (801ecac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801ec86:	480a      	ldr	r0, [pc, #40]	; (801ecb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ec88:	f006 fc3d 	bl	8025506 <__aeabi_atexit>
 801ec8c:	4b05      	ldr	r3, [pc, #20]	; (801eca4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801ec8e:	632b      	str	r3, [r5, #48]	; 0x30
 801ec90:	4b07      	ldr	r3, [pc, #28]	; (801ecb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801ec92:	636b      	str	r3, [r5, #52]	; 0x34
 801ec94:	bd38      	pop	{r3, r4, r5, pc}
 801ec96:	bf00      	nop
 801ec98:	2000bc8c 	.word	0x2000bc8c
 801ec9c:	20000000 	.word	0x20000000
 801eca0:	0801d66f 	.word	0x0801d66f
 801eca4:	20000088 	.word	0x20000088
 801eca8:	2000bc90 	.word	0x2000bc90
 801ecac:	0801d66d 	.word	0x0801d66d
 801ecb0:	2000008c 	.word	0x2000008c

0801ecb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801ecb4:	b538      	push	{r3, r4, r5, lr}
 801ecb6:	4c15      	ldr	r4, [pc, #84]	; (801ed0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801ecb8:	4605      	mov	r5, r0
 801ecba:	7823      	ldrb	r3, [r4, #0]
 801ecbc:	f3bf 8f5b 	dmb	ish
 801ecc0:	07da      	lsls	r2, r3, #31
 801ecc2:	d40b      	bmi.n	801ecdc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801ecc4:	4620      	mov	r0, r4
 801ecc6:	f006 fc28 	bl	802551a <__cxa_guard_acquire>
 801ecca:	b138      	cbz	r0, 801ecdc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801eccc:	4620      	mov	r0, r4
 801ecce:	f006 fc30 	bl	8025532 <__cxa_guard_release>
 801ecd2:	4a0f      	ldr	r2, [pc, #60]	; (801ed10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ecd4:	490f      	ldr	r1, [pc, #60]	; (801ed14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801ecd6:	4810      	ldr	r0, [pc, #64]	; (801ed18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ecd8:	f006 fc15 	bl	8025506 <__aeabi_atexit>
 801ecdc:	4c0f      	ldr	r4, [pc, #60]	; (801ed1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801ecde:	7823      	ldrb	r3, [r4, #0]
 801ece0:	f3bf 8f5b 	dmb	ish
 801ece4:	07db      	lsls	r3, r3, #31
 801ece6:	d40b      	bmi.n	801ed00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ece8:	4620      	mov	r0, r4
 801ecea:	f006 fc16 	bl	802551a <__cxa_guard_acquire>
 801ecee:	b138      	cbz	r0, 801ed00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801ecf0:	4620      	mov	r0, r4
 801ecf2:	f006 fc1e 	bl	8025532 <__cxa_guard_release>
 801ecf6:	4a06      	ldr	r2, [pc, #24]	; (801ed10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ecf8:	4909      	ldr	r1, [pc, #36]	; (801ed20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801ecfa:	480a      	ldr	r0, [pc, #40]	; (801ed24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ecfc:	f006 fc03 	bl	8025506 <__aeabi_atexit>
 801ed00:	4b05      	ldr	r3, [pc, #20]	; (801ed18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ed02:	62ab      	str	r3, [r5, #40]	; 0x28
 801ed04:	4b07      	ldr	r3, [pc, #28]	; (801ed24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801ed06:	62eb      	str	r3, [r5, #44]	; 0x2c
 801ed08:	bd38      	pop	{r3, r4, r5, pc}
 801ed0a:	bf00      	nop
 801ed0c:	2000bc64 	.word	0x2000bc64
 801ed10:	20000000 	.word	0x20000000
 801ed14:	0801d673 	.word	0x0801d673
 801ed18:	20000060 	.word	0x20000060
 801ed1c:	2000bc68 	.word	0x2000bc68
 801ed20:	0801d671 	.word	0x0801d671
 801ed24:	20000064 	.word	0x20000064

0801ed28 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ed28:	b510      	push	{r4, lr}
 801ed2a:	4604      	mov	r4, r0
 801ed2c:	f7ff ff88 	bl	801ec40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801ed30:	4620      	mov	r0, r4
 801ed32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed36:	f7ff bfbd 	b.w	801ecb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801ed3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ed3c:	b538      	push	{r3, r4, r5, lr}
 801ed3e:	4c15      	ldr	r4, [pc, #84]	; (801ed94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ed40:	4605      	mov	r5, r0
 801ed42:	7823      	ldrb	r3, [r4, #0]
 801ed44:	f3bf 8f5b 	dmb	ish
 801ed48:	07da      	lsls	r2, r3, #31
 801ed4a:	d40b      	bmi.n	801ed64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	f006 fbe4 	bl	802551a <__cxa_guard_acquire>
 801ed52:	b138      	cbz	r0, 801ed64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ed54:	4620      	mov	r0, r4
 801ed56:	f006 fbec 	bl	8025532 <__cxa_guard_release>
 801ed5a:	4a0f      	ldr	r2, [pc, #60]	; (801ed98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ed5c:	490f      	ldr	r1, [pc, #60]	; (801ed9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ed5e:	4810      	ldr	r0, [pc, #64]	; (801eda0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ed60:	f006 fbd1 	bl	8025506 <__aeabi_atexit>
 801ed64:	4c0f      	ldr	r4, [pc, #60]	; (801eda4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801ed66:	7823      	ldrb	r3, [r4, #0]
 801ed68:	f3bf 8f5b 	dmb	ish
 801ed6c:	07db      	lsls	r3, r3, #31
 801ed6e:	d40b      	bmi.n	801ed88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ed70:	4620      	mov	r0, r4
 801ed72:	f006 fbd2 	bl	802551a <__cxa_guard_acquire>
 801ed76:	b138      	cbz	r0, 801ed88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ed78:	4620      	mov	r0, r4
 801ed7a:	f006 fbda 	bl	8025532 <__cxa_guard_release>
 801ed7e:	4a06      	ldr	r2, [pc, #24]	; (801ed98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ed80:	4909      	ldr	r1, [pc, #36]	; (801eda8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801ed82:	480a      	ldr	r0, [pc, #40]	; (801edac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ed84:	f006 fbbf 	bl	8025506 <__aeabi_atexit>
 801ed88:	4b05      	ldr	r3, [pc, #20]	; (801eda0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ed8a:	642b      	str	r3, [r5, #64]	; 0x40
 801ed8c:	4b07      	ldr	r3, [pc, #28]	; (801edac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ed8e:	646b      	str	r3, [r5, #68]	; 0x44
 801ed90:	bd38      	pop	{r3, r4, r5, pc}
 801ed92:	bf00      	nop
 801ed94:	2000bc94 	.word	0x2000bc94
 801ed98:	20000000 	.word	0x20000000
 801ed9c:	0801d667 	.word	0x0801d667
 801eda0:	20000090 	.word	0x20000090
 801eda4:	2000bc98 	.word	0x2000bc98
 801eda8:	0801d665 	.word	0x0801d665
 801edac:	20000094 	.word	0x20000094

0801edb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801edb0:	b538      	push	{r3, r4, r5, lr}
 801edb2:	4c15      	ldr	r4, [pc, #84]	; (801ee08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801edb4:	4605      	mov	r5, r0
 801edb6:	7823      	ldrb	r3, [r4, #0]
 801edb8:	f3bf 8f5b 	dmb	ish
 801edbc:	07da      	lsls	r2, r3, #31
 801edbe:	d40b      	bmi.n	801edd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801edc0:	4620      	mov	r0, r4
 801edc2:	f006 fbaa 	bl	802551a <__cxa_guard_acquire>
 801edc6:	b138      	cbz	r0, 801edd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801edc8:	4620      	mov	r0, r4
 801edca:	f006 fbb2 	bl	8025532 <__cxa_guard_release>
 801edce:	4a0f      	ldr	r2, [pc, #60]	; (801ee0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801edd0:	490f      	ldr	r1, [pc, #60]	; (801ee10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801edd2:	4810      	ldr	r0, [pc, #64]	; (801ee14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801edd4:	f006 fb97 	bl	8025506 <__aeabi_atexit>
 801edd8:	4c0f      	ldr	r4, [pc, #60]	; (801ee18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801edda:	7823      	ldrb	r3, [r4, #0]
 801eddc:	f3bf 8f5b 	dmb	ish
 801ede0:	07db      	lsls	r3, r3, #31
 801ede2:	d40b      	bmi.n	801edfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ede4:	4620      	mov	r0, r4
 801ede6:	f006 fb98 	bl	802551a <__cxa_guard_acquire>
 801edea:	b138      	cbz	r0, 801edfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801edec:	4620      	mov	r0, r4
 801edee:	f006 fba0 	bl	8025532 <__cxa_guard_release>
 801edf2:	4a06      	ldr	r2, [pc, #24]	; (801ee0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801edf4:	4909      	ldr	r1, [pc, #36]	; (801ee1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801edf6:	480a      	ldr	r0, [pc, #40]	; (801ee20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801edf8:	f006 fb85 	bl	8025506 <__aeabi_atexit>
 801edfc:	4b05      	ldr	r3, [pc, #20]	; (801ee14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801edfe:	63ab      	str	r3, [r5, #56]	; 0x38
 801ee00:	4b07      	ldr	r3, [pc, #28]	; (801ee20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ee02:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ee04:	bd38      	pop	{r3, r4, r5, pc}
 801ee06:	bf00      	nop
 801ee08:	2000bc74 	.word	0x2000bc74
 801ee0c:	20000000 	.word	0x20000000
 801ee10:	0801d66b 	.word	0x0801d66b
 801ee14:	20000070 	.word	0x20000070
 801ee18:	2000bc78 	.word	0x2000bc78
 801ee1c:	0801d669 	.word	0x0801d669
 801ee20:	20000074 	.word	0x20000074

0801ee24 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ee24:	b510      	push	{r4, lr}
 801ee26:	4604      	mov	r4, r0
 801ee28:	f7ff ff88 	bl	801ed3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ee2c:	4620      	mov	r0, r4
 801ee2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee32:	f7ff bfbd 	b.w	801edb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ee38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ee38:	b538      	push	{r3, r4, r5, lr}
 801ee3a:	4c15      	ldr	r4, [pc, #84]	; (801ee90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ee3c:	4605      	mov	r5, r0
 801ee3e:	7823      	ldrb	r3, [r4, #0]
 801ee40:	f3bf 8f5b 	dmb	ish
 801ee44:	07da      	lsls	r2, r3, #31
 801ee46:	d40b      	bmi.n	801ee60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ee48:	4620      	mov	r0, r4
 801ee4a:	f006 fb66 	bl	802551a <__cxa_guard_acquire>
 801ee4e:	b138      	cbz	r0, 801ee60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ee50:	4620      	mov	r0, r4
 801ee52:	f006 fb6e 	bl	8025532 <__cxa_guard_release>
 801ee56:	4a0f      	ldr	r2, [pc, #60]	; (801ee94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ee58:	490f      	ldr	r1, [pc, #60]	; (801ee98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ee5a:	4810      	ldr	r0, [pc, #64]	; (801ee9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ee5c:	f006 fb53 	bl	8025506 <__aeabi_atexit>
 801ee60:	4c0f      	ldr	r4, [pc, #60]	; (801eea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ee62:	7823      	ldrb	r3, [r4, #0]
 801ee64:	f3bf 8f5b 	dmb	ish
 801ee68:	07db      	lsls	r3, r3, #31
 801ee6a:	d40b      	bmi.n	801ee84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	f006 fb54 	bl	802551a <__cxa_guard_acquire>
 801ee72:	b138      	cbz	r0, 801ee84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ee74:	4620      	mov	r0, r4
 801ee76:	f006 fb5c 	bl	8025532 <__cxa_guard_release>
 801ee7a:	4a06      	ldr	r2, [pc, #24]	; (801ee94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ee7c:	4909      	ldr	r1, [pc, #36]	; (801eea4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ee7e:	480a      	ldr	r0, [pc, #40]	; (801eea8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ee80:	f006 fb41 	bl	8025506 <__aeabi_atexit>
 801ee84:	4b05      	ldr	r3, [pc, #20]	; (801ee9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ee86:	652b      	str	r3, [r5, #80]	; 0x50
 801ee88:	4b07      	ldr	r3, [pc, #28]	; (801eea8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ee8a:	656b      	str	r3, [r5, #84]	; 0x54
 801ee8c:	bd38      	pop	{r3, r4, r5, pc}
 801ee8e:	bf00      	nop
 801ee90:	2000bc6c 	.word	0x2000bc6c
 801ee94:	20000000 	.word	0x20000000
 801ee98:	0801d65f 	.word	0x0801d65f
 801ee9c:	20000068 	.word	0x20000068
 801eea0:	2000bc70 	.word	0x2000bc70
 801eea4:	0801d65d 	.word	0x0801d65d
 801eea8:	2000006c 	.word	0x2000006c

0801eeac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801eeac:	b538      	push	{r3, r4, r5, lr}
 801eeae:	4c15      	ldr	r4, [pc, #84]	; (801ef04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801eeb0:	4605      	mov	r5, r0
 801eeb2:	7823      	ldrb	r3, [r4, #0]
 801eeb4:	f3bf 8f5b 	dmb	ish
 801eeb8:	07da      	lsls	r2, r3, #31
 801eeba:	d40b      	bmi.n	801eed4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801eebc:	4620      	mov	r0, r4
 801eebe:	f006 fb2c 	bl	802551a <__cxa_guard_acquire>
 801eec2:	b138      	cbz	r0, 801eed4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801eec4:	4620      	mov	r0, r4
 801eec6:	f006 fb34 	bl	8025532 <__cxa_guard_release>
 801eeca:	4a0f      	ldr	r2, [pc, #60]	; (801ef08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801eecc:	490f      	ldr	r1, [pc, #60]	; (801ef0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801eece:	4810      	ldr	r0, [pc, #64]	; (801ef10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801eed0:	f006 fb19 	bl	8025506 <__aeabi_atexit>
 801eed4:	4c0f      	ldr	r4, [pc, #60]	; (801ef14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801eed6:	7823      	ldrb	r3, [r4, #0]
 801eed8:	f3bf 8f5b 	dmb	ish
 801eedc:	07db      	lsls	r3, r3, #31
 801eede:	d40b      	bmi.n	801eef8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801eee0:	4620      	mov	r0, r4
 801eee2:	f006 fb1a 	bl	802551a <__cxa_guard_acquire>
 801eee6:	b138      	cbz	r0, 801eef8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801eee8:	4620      	mov	r0, r4
 801eeea:	f006 fb22 	bl	8025532 <__cxa_guard_release>
 801eeee:	4a06      	ldr	r2, [pc, #24]	; (801ef08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801eef0:	4909      	ldr	r1, [pc, #36]	; (801ef18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801eef2:	480a      	ldr	r0, [pc, #40]	; (801ef1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801eef4:	f006 fb07 	bl	8025506 <__aeabi_atexit>
 801eef8:	4b05      	ldr	r3, [pc, #20]	; (801ef10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801eefa:	64ab      	str	r3, [r5, #72]	; 0x48
 801eefc:	4b07      	ldr	r3, [pc, #28]	; (801ef1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801eefe:	64eb      	str	r3, [r5, #76]	; 0x4c
 801ef00:	bd38      	pop	{r3, r4, r5, pc}
 801ef02:	bf00      	nop
 801ef04:	2000bc5c 	.word	0x2000bc5c
 801ef08:	20000000 	.word	0x20000000
 801ef0c:	0801d663 	.word	0x0801d663
 801ef10:	20000058 	.word	0x20000058
 801ef14:	2000bc60 	.word	0x2000bc60
 801ef18:	0801d661 	.word	0x0801d661
 801ef1c:	2000005c 	.word	0x2000005c

0801ef20 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801ef20:	b510      	push	{r4, lr}
 801ef22:	4604      	mov	r4, r0
 801ef24:	f7ff ff88 	bl	801ee38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ef28:	4620      	mov	r0, r4
 801ef2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef2e:	f7ff bfbd 	b.w	801eeac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801ef32 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801ef32:	b510      	push	{r4, lr}
 801ef34:	4604      	mov	r4, r0
 801ef36:	f7ff fff3 	bl	801ef20 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801ef3a:	4620      	mov	r0, r4
 801ef3c:	f7ff ff72 	bl	801ee24 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801ef40:	4620      	mov	r0, r4
 801ef42:	f7ff fe73 	bl	801ec2c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801ef46:	4620      	mov	r0, r4
 801ef48:	f7ff fdf2 	bl	801eb30 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef52:	f7ff bee9 	b.w	801ed28 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801ef58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef5c:	b087      	sub	sp, #28
 801ef5e:	7888      	ldrb	r0, [r1, #2]
 801ef60:	4616      	mov	r6, r2
 801ef62:	9001      	str	r0, [sp, #4]
 801ef64:	7848      	ldrb	r0, [r1, #1]
 801ef66:	9100      	str	r1, [sp, #0]
 801ef68:	9002      	str	r0, [sp, #8]
 801ef6a:	7808      	ldrb	r0, [r1, #0]
 801ef6c:	9901      	ldr	r1, [sp, #4]
 801ef6e:	9003      	str	r0, [sp, #12]
 801ef70:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ef74:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801ef78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801ef7c:	9902      	ldr	r1, [sp, #8]
 801ef7e:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801ef82:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801ef86:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801ef8a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801ef8e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801ef92:	9005      	str	r0, [sp, #20]
 801ef94:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801ef98:	fb05 ca0e 	mla	sl, r5, lr, ip
 801ef9c:	2d00      	cmp	r5, #0
 801ef9e:	eb06 080a 	add.w	r8, r6, sl
 801efa2:	db4a      	blt.n	801f03a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801efa4:	45a9      	cmp	r9, r5
 801efa6:	dd48      	ble.n	801f03a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801efa8:	f1bc 0f00 	cmp.w	ip, #0
 801efac:	db43      	blt.n	801f036 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801efae:	45e6      	cmp	lr, ip
 801efb0:	dd41      	ble.n	801f036 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801efb2:	f816 600a 	ldrb.w	r6, [r6, sl]
 801efb6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801efba:	441e      	add	r6, r3
 801efbc:	f11c 0001 	adds.w	r0, ip, #1
 801efc0:	d43e      	bmi.n	801f040 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801efc2:	4586      	cmp	lr, r0
 801efc4:	dd3c      	ble.n	801f040 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801efc6:	2a00      	cmp	r2, #0
 801efc8:	d03a      	beq.n	801f040 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801efca:	f898 0001 	ldrb.w	r0, [r8, #1]
 801efce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801efd2:	4418      	add	r0, r3
 801efd4:	3501      	adds	r5, #1
 801efd6:	d437      	bmi.n	801f048 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801efd8:	45a9      	cmp	r9, r5
 801efda:	dd35      	ble.n	801f048 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801efdc:	b3a4      	cbz	r4, 801f048 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801efde:	f1bc 0f00 	cmp.w	ip, #0
 801efe2:	db2f      	blt.n	801f044 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801efe4:	45e6      	cmp	lr, ip
 801efe6:	dd2d      	ble.n	801f044 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801efe8:	f818 500e 	ldrb.w	r5, [r8, lr]
 801efec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eff0:	441d      	add	r5, r3
 801eff2:	f11c 0c01 	adds.w	ip, ip, #1
 801eff6:	d42a      	bmi.n	801f04e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801eff8:	45e6      	cmp	lr, ip
 801effa:	dd28      	ble.n	801f04e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801effc:	b33a      	cbz	r2, 801f04e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801effe:	44c6      	add	lr, r8
 801f000:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f004:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f008:	4463      	add	r3, ip
 801f00a:	ea6f 0c07 	mvn.w	ip, r7
 801f00e:	2a0f      	cmp	r2, #15
 801f010:	f896 a000 	ldrb.w	sl, [r6]
 801f014:	fa5f fc8c 	uxtb.w	ip, ip
 801f018:	f890 b000 	ldrb.w	fp, [r0]
 801f01c:	f895 9000 	ldrb.w	r9, [r5]
 801f020:	7819      	ldrb	r1, [r3, #0]
 801f022:	d801      	bhi.n	801f028 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801f024:	2c0f      	cmp	r4, #15
 801f026:	d914      	bls.n	801f052 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801f028:	4b40      	ldr	r3, [pc, #256]	; (801f12c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801f02a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f02e:	4a40      	ldr	r2, [pc, #256]	; (801f130 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801f030:	4840      	ldr	r0, [pc, #256]	; (801f134 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801f032:	f006 fa9b 	bl	802556c <__assert_func>
 801f036:	ae05      	add	r6, sp, #20
 801f038:	e7c0      	b.n	801efbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801f03a:	a805      	add	r0, sp, #20
 801f03c:	4606      	mov	r6, r0
 801f03e:	e7c9      	b.n	801efd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f040:	a805      	add	r0, sp, #20
 801f042:	e7c7      	b.n	801efd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801f044:	ad05      	add	r5, sp, #20
 801f046:	e7d4      	b.n	801eff2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801f048:	ab05      	add	r3, sp, #20
 801f04a:	461d      	mov	r5, r3
 801f04c:	e7dd      	b.n	801f00a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f04e:	ab05      	add	r3, sp, #20
 801f050:	e7db      	b.n	801f00a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801f052:	b292      	uxth	r2, r2
 801f054:	b2a4      	uxth	r4, r4
 801f056:	fa1f fc8c 	uxth.w	ip, ip
 801f05a:	fb02 f804 	mul.w	r8, r2, r4
 801f05e:	0112      	lsls	r2, r2, #4
 801f060:	b2bf      	uxth	r7, r7
 801f062:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f066:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f06a:	eba2 0208 	sub.w	r2, r2, r8
 801f06e:	b2a4      	uxth	r4, r4
 801f070:	b292      	uxth	r2, r2
 801f072:	ebae 0e04 	sub.w	lr, lr, r4
 801f076:	fb02 fb0b 	mul.w	fp, r2, fp
 801f07a:	fa1f fe8e 	uxth.w	lr, lr
 801f07e:	fb0e ba0a 	mla	sl, lr, sl, fp
 801f082:	fb04 aa09 	mla	sl, r4, r9, sl
 801f086:	fb08 aa01 	mla	sl, r8, r1, sl
 801f08a:	9903      	ldr	r1, [sp, #12]
 801f08c:	fb11 f90c 	smulbb	r9, r1, ip
 801f090:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f094:	9900      	ldr	r1, [sp, #0]
 801f096:	fb0a 9a07 	mla	sl, sl, r7, r9
 801f09a:	fa1f fa8a 	uxth.w	sl, sl
 801f09e:	f10a 0901 	add.w	r9, sl, #1
 801f0a2:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801f0a6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f0aa:	f881 a000 	strb.w	sl, [r1]
 801f0ae:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f0b2:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f0b6:	fb02 fa0a 	mul.w	sl, r2, sl
 801f0ba:	9902      	ldr	r1, [sp, #8]
 801f0bc:	fb0e aa09 	mla	sl, lr, r9, sl
 801f0c0:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f0c4:	fb04 aa09 	mla	sl, r4, r9, sl
 801f0c8:	f893 9001 	ldrb.w	r9, [r3, #1]
 801f0cc:	fb08 a909 	mla	r9, r8, r9, sl
 801f0d0:	fb11 fa0c 	smulbb	sl, r1, ip
 801f0d4:	9900      	ldr	r1, [sp, #0]
 801f0d6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f0da:	fb09 a907 	mla	r9, r9, r7, sl
 801f0de:	fa1f f989 	uxth.w	r9, r9
 801f0e2:	f109 0a01 	add.w	sl, r9, #1
 801f0e6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f0ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f0ee:	f881 9001 	strb.w	r9, [r1, #1]
 801f0f2:	7880      	ldrb	r0, [r0, #2]
 801f0f4:	78b6      	ldrb	r6, [r6, #2]
 801f0f6:	4342      	muls	r2, r0
 801f0f8:	78a8      	ldrb	r0, [r5, #2]
 801f0fa:	789b      	ldrb	r3, [r3, #2]
 801f0fc:	fb0e 2206 	mla	r2, lr, r6, r2
 801f100:	fb04 2400 	mla	r4, r4, r0, r2
 801f104:	fb08 4803 	mla	r8, r8, r3, r4
 801f108:	9b01      	ldr	r3, [sp, #4]
 801f10a:	fb13 fc0c 	smulbb	ip, r3, ip
 801f10e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f112:	fb08 c707 	mla	r7, r8, r7, ip
 801f116:	b2bf      	uxth	r7, r7
 801f118:	f107 0c01 	add.w	ip, r7, #1
 801f11c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f120:	123f      	asrs	r7, r7, #8
 801f122:	708f      	strb	r7, [r1, #2]
 801f124:	b007      	add	sp, #28
 801f126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f12a:	bf00      	nop
 801f12c:	0802acdd 	.word	0x0802acdd
 801f130:	0802b1d6 	.word	0x0802b1d6
 801f134:	0802ada6 	.word	0x0802ada6

0801f138 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f13c:	ed2d 8b08 	vpush	{d8-d11}
 801f140:	b095      	sub	sp, #84	; 0x54
 801f142:	eeb0 aa40 	vmov.f32	s20, s0
 801f146:	eef0 9a60 	vmov.f32	s19, s1
 801f14a:	930a      	str	r3, [sp, #40]	; 0x28
 801f14c:	eeb0 9a41 	vmov.f32	s18, s2
 801f150:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801f154:	eeb0 8a62 	vmov.f32	s16, s5
 801f158:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801f15a:	eef0 8a43 	vmov.f32	s17, s6
 801f15e:	930c      	str	r3, [sp, #48]	; 0x30
 801f160:	eef0 ba44 	vmov.f32	s23, s8
 801f164:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f168:	eeb0 ba64 	vmov.f32	s22, s9
 801f16c:	9013      	str	r0, [sp, #76]	; 0x4c
 801f16e:	eef0 aa45 	vmov.f32	s21, s10
 801f172:	9310      	str	r3, [sp, #64]	; 0x40
 801f174:	6860      	ldr	r0, [r4, #4]
 801f176:	910f      	str	r1, [sp, #60]	; 0x3c
 801f178:	9212      	str	r2, [sp, #72]	; 0x48
 801f17a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f17c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801f180:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f184:	fb00 1303 	mla	r3, r0, r3, r1
 801f188:	6821      	ldr	r1, [r4, #0]
 801f18a:	6854      	ldr	r4, [r2, #4]
 801f18c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f190:	18cb      	adds	r3, r1, r3
 801f192:	930b      	str	r3, [sp, #44]	; 0x2c
 801f194:	6813      	ldr	r3, [r2, #0]
 801f196:	930e      	str	r3, [sp, #56]	; 0x38
 801f198:	1d23      	adds	r3, r4, #4
 801f19a:	9309      	str	r3, [sp, #36]	; 0x24
 801f19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f19e:	43db      	mvns	r3, r3
 801f1a0:	b2db      	uxtb	r3, r3
 801f1a2:	930d      	str	r3, [sp, #52]	; 0x34
 801f1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	dc03      	bgt.n	801f1b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f1aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	f340 823c 	ble.w	801f62a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	f340 8115 	ble.w	801f3e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801f1ba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f1bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f1be:	1412      	asrs	r2, r2, #16
 801f1c0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f1c4:	d431      	bmi.n	801f22a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f1c6:	1c51      	adds	r1, r2, #1
 801f1c8:	428d      	cmp	r5, r1
 801f1ca:	dd31      	ble.n	801f230 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	db2f      	blt.n	801f230 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f1d0:	1c59      	adds	r1, r3, #1
 801f1d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f1d4:	4288      	cmp	r0, r1
 801f1d6:	dd2b      	ble.n	801f230 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f1da:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f1dc:	3b01      	subs	r3, #1
 801f1de:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801f1e0:	fb02 1203 	mla	r2, r2, r3, r1
 801f1e4:	1412      	asrs	r2, r2, #16
 801f1e6:	d42d      	bmi.n	801f244 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f1e8:	3201      	adds	r2, #1
 801f1ea:	4295      	cmp	r5, r2
 801f1ec:	dd2a      	ble.n	801f244 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f1ee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f1f0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f1f2:	fb02 1303 	mla	r3, r2, r3, r1
 801f1f6:	141b      	asrs	r3, r3, #16
 801f1f8:	d424      	bmi.n	801f244 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f1fa:	3301      	adds	r3, #1
 801f1fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f1fe:	429a      	cmp	r2, r3
 801f200:	dd20      	ble.n	801f244 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f204:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801f208:	f103 0c03 	add.w	ip, r3, #3
 801f20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f20e:	9311      	str	r3, [sp, #68]	; 0x44
 801f210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f212:	2b00      	cmp	r3, #0
 801f214:	f300 814f 	bgt.w	801f4b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801f218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f21a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f21c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f224:	441a      	add	r2, r3
 801f226:	920b      	str	r2, [sp, #44]	; 0x2c
 801f228:	e0de      	b.n	801f3e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f22a:	1c51      	adds	r1, r2, #1
 801f22c:	f040 80cb 	bne.w	801f3c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f230:	42aa      	cmp	r2, r5
 801f232:	f280 80c8 	bge.w	801f3c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f236:	1c5f      	adds	r7, r3, #1
 801f238:	f2c0 80c5 	blt.w	801f3c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f23c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f23e:	4293      	cmp	r3, r2
 801f240:	f280 80c1 	bge.w	801f3c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f246:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f248:	9311      	str	r3, [sp, #68]	; 0x44
 801f24a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	dde3      	ble.n	801f218 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801f250:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f252:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f254:	141a      	asrs	r2, r3, #16
 801f256:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f258:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f25a:	1400      	asrs	r0, r0, #16
 801f25c:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f260:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f264:	f100 810e 	bmi.w	801f484 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f268:	1c46      	adds	r6, r0, #1
 801f26a:	42b5      	cmp	r5, r6
 801f26c:	f340 810c 	ble.w	801f488 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f270:	2a00      	cmp	r2, #0
 801f272:	f2c0 8109 	blt.w	801f488 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f276:	1c56      	adds	r6, r2, #1
 801f278:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f27a:	42b4      	cmp	r4, r6
 801f27c:	f340 8104 	ble.w	801f488 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f280:	fb02 0005 	mla	r0, r2, r5, r0
 801f284:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f288:	f814 e000 	ldrb.w	lr, [r4, r0]
 801f28c:	4402      	add	r2, r0
 801f28e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f290:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f294:	eb00 080e 	add.w	r8, r0, lr
 801f298:	2b00      	cmp	r3, #0
 801f29a:	f000 80e4 	beq.w	801f466 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801f29e:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f2a2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f2a6:	4484      	add	ip, r0
 801f2a8:	2900      	cmp	r1, #0
 801f2aa:	f000 80e5 	beq.w	801f478 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801f2ae:	1950      	adds	r0, r2, r5
 801f2b0:	5d52      	ldrb	r2, [r2, r5]
 801f2b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f2b4:	7840      	ldrb	r0, [r0, #1]
 801f2b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f2ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f2be:	4422      	add	r2, r4
 801f2c0:	4420      	add	r0, r4
 801f2c2:	b29b      	uxth	r3, r3
 801f2c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f2c6:	b289      	uxth	r1, r1
 801f2c8:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801f2cc:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f2d0:	fb03 fa01 	mul.w	sl, r3, r1
 801f2d4:	011b      	lsls	r3, r3, #4
 801f2d6:	f89c e000 	ldrb.w	lr, [ip]
 801f2da:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f2de:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801f2e2:	eba3 030a 	sub.w	r3, r3, sl
 801f2e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f2e8:	b289      	uxth	r1, r1
 801f2ea:	b29b      	uxth	r3, r3
 801f2ec:	eba9 0901 	sub.w	r9, r9, r1
 801f2f0:	fb03 fe0e 	mul.w	lr, r3, lr
 801f2f4:	fa1f f989 	uxth.w	r9, r9
 801f2f8:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f2fc:	f892 b000 	ldrb.w	fp, [r2]
 801f300:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f304:	f890 b000 	ldrb.w	fp, [r0]
 801f308:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f30c:	f897 b000 	ldrb.w	fp, [r7]
 801f310:	fb1b fb04 	smulbb	fp, fp, r4
 801f314:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f318:	fb0e be06 	mla	lr, lr, r6, fp
 801f31c:	fa1f fe8e 	uxth.w	lr, lr
 801f320:	f10e 0b01 	add.w	fp, lr, #1
 801f324:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801f328:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801f32c:	f887 b000 	strb.w	fp, [r7]
 801f330:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f334:	f898 b001 	ldrb.w	fp, [r8, #1]
 801f338:	fb03 fe0e 	mul.w	lr, r3, lr
 801f33c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f340:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f344:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f348:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f34c:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f350:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f354:	fb1b fb04 	smulbb	fp, fp, r4
 801f358:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f35c:	fb0e be06 	mla	lr, lr, r6, fp
 801f360:	fa1f fe8e 	uxth.w	lr, lr
 801f364:	f10e 0b01 	add.w	fp, lr, #1
 801f368:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f36c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f370:	f887 e001 	strb.w	lr, [r7, #1]
 801f374:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f378:	f898 e002 	ldrb.w	lr, [r8, #2]
 801f37c:	fb03 f30c 	mul.w	r3, r3, ip
 801f380:	fb09 330e 	mla	r3, r9, lr, r3
 801f384:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f388:	7882      	ldrb	r2, [r0, #2]
 801f38a:	fb01 310e 	mla	r1, r1, lr, r3
 801f38e:	fb0a 1a02 	mla	sl, sl, r2, r1
 801f392:	78b9      	ldrb	r1, [r7, #2]
 801f394:	fb11 f104 	smulbb	r1, r1, r4
 801f398:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f39c:	fb0a 1606 	mla	r6, sl, r6, r1
 801f3a0:	b2b6      	uxth	r6, r6
 801f3a2:	1c73      	adds	r3, r6, #1
 801f3a4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f3a8:	1236      	asrs	r6, r6, #8
 801f3aa:	70be      	strb	r6, [r7, #2]
 801f3ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f3ae:	3703      	adds	r7, #3
 801f3b0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f3b2:	4413      	add	r3, r2
 801f3b4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f3b6:	9327      	str	r3, [sp, #156]	; 0x9c
 801f3b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f3ba:	4413      	add	r3, r2
 801f3bc:	9328      	str	r3, [sp, #160]	; 0xa0
 801f3be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f3c0:	3b01      	subs	r3, #1
 801f3c2:	9311      	str	r3, [sp, #68]	; 0x44
 801f3c4:	e741      	b.n	801f24a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801f3c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f3c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f3ca:	4413      	add	r3, r2
 801f3cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f3ce:	9327      	str	r3, [sp, #156]	; 0x9c
 801f3d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f3d2:	4413      	add	r3, r2
 801f3d4:	9328      	str	r3, [sp, #160]	; 0xa0
 801f3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3d8:	3b01      	subs	r3, #1
 801f3da:	930a      	str	r3, [sp, #40]	; 0x28
 801f3dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f3de:	3303      	adds	r3, #3
 801f3e0:	930b      	str	r3, [sp, #44]	; 0x2c
 801f3e2:	e6e6      	b.n	801f1b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f3e4:	f47f aef8 	bne.w	801f1d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f3e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	f340 811d 	ble.w	801f62a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f3f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f3f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f3f6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f3fa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f3fe:	eef0 6a48 	vmov.f32	s13, s16
 801f402:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f406:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f40a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f40e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801f412:	eef0 6a68 	vmov.f32	s13, s17
 801f416:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f41a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801f41e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f422:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f426:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f42a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f42e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f432:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f436:	ee18 2a10 	vmov	r2, s16
 801f43a:	eeb0 8a47 	vmov.f32	s16, s14
 801f43e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f442:	ee18 2a90 	vmov	r2, s17
 801f446:	9329      	str	r3, [sp, #164]	; 0xa4
 801f448:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f44a:	eef0 8a67 	vmov.f32	s17, s15
 801f44e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f452:	932a      	str	r3, [sp, #168]	; 0xa8
 801f454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f456:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f458:	3b01      	subs	r3, #1
 801f45a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f45c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f45e:	bf08      	it	eq
 801f460:	4613      	moveq	r3, r2
 801f462:	930a      	str	r3, [sp, #40]	; 0x28
 801f464:	e69e      	b.n	801f1a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f466:	b151      	cbz	r1, 801f47e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801f468:	5d52      	ldrb	r2, [r2, r5]
 801f46a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f46c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f470:	4402      	add	r2, r0
 801f472:	4640      	mov	r0, r8
 801f474:	46c4      	mov	ip, r8
 801f476:	e724      	b.n	801f2c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f478:	4640      	mov	r0, r8
 801f47a:	4642      	mov	r2, r8
 801f47c:	e721      	b.n	801f2c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f47e:	4640      	mov	r0, r8
 801f480:	4642      	mov	r2, r8
 801f482:	e7f7      	b.n	801f474 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801f484:	1c46      	adds	r6, r0, #1
 801f486:	d191      	bne.n	801f3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f488:	4285      	cmp	r5, r0
 801f48a:	dd8f      	ble.n	801f3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f48c:	1c54      	adds	r4, r2, #1
 801f48e:	db8d      	blt.n	801f3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f490:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f492:	4294      	cmp	r4, r2
 801f494:	dd8a      	ble.n	801f3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f496:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f498:	9002      	str	r0, [sp, #8]
 801f49a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f49c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801f4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f4a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f4a4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f4a8:	e9cd 5300 	strd	r5, r3, [sp]
 801f4ac:	4639      	mov	r1, r7
 801f4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4b0:	f7ff fd52 	bl	801ef58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f4b4:	e77a      	b.n	801f3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f4b6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f4b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f4ba:	1410      	asrs	r0, r2, #16
 801f4bc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f4c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f4c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f4c4:	1412      	asrs	r2, r2, #16
 801f4c6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f4ca:	fb05 2000 	mla	r0, r5, r0, r2
 801f4ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f4d0:	f814 8000 	ldrb.w	r8, [r4, r0]
 801f4d4:	4402      	add	r2, r0
 801f4d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f4d8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f4dc:	eb00 0708 	add.w	r7, r0, r8
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	f000 8093 	beq.w	801f60c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801f4e6:	7856      	ldrb	r6, [r2, #1]
 801f4e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f4ec:	4406      	add	r6, r0
 801f4ee:	2900      	cmp	r1, #0
 801f4f0:	f000 8095 	beq.w	801f61e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801f4f4:	1950      	adds	r0, r2, r5
 801f4f6:	5d52      	ldrb	r2, [r2, r5]
 801f4f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f4fa:	7840      	ldrb	r0, [r0, #1]
 801f4fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f500:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f504:	4422      	add	r2, r4
 801f506:	4420      	add	r0, r4
 801f508:	b29b      	uxth	r3, r3
 801f50a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f50c:	b289      	uxth	r1, r1
 801f50e:	f10c 0c03 	add.w	ip, ip, #3
 801f512:	f814 b008 	ldrb.w	fp, [r4, r8]
 801f516:	fb03 f901 	mul.w	r9, r3, r1
 801f51a:	011b      	lsls	r3, r3, #4
 801f51c:	f896 8000 	ldrb.w	r8, [r6]
 801f520:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f524:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f528:	eba3 0309 	sub.w	r3, r3, r9
 801f52c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f52e:	b289      	uxth	r1, r1
 801f530:	b29b      	uxth	r3, r3
 801f532:	ebae 0e01 	sub.w	lr, lr, r1
 801f536:	fb03 f808 	mul.w	r8, r3, r8
 801f53a:	fa1f fe8e 	uxth.w	lr, lr
 801f53e:	fb0e 880b 	mla	r8, lr, fp, r8
 801f542:	f892 b000 	ldrb.w	fp, [r2]
 801f546:	fb01 880b 	mla	r8, r1, fp, r8
 801f54a:	f890 b000 	ldrb.w	fp, [r0]
 801f54e:	fb09 880b 	mla	r8, r9, fp, r8
 801f552:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801f556:	fb1b fb04 	smulbb	fp, fp, r4
 801f55a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f55e:	fb08 b80a 	mla	r8, r8, sl, fp
 801f562:	fa1f f888 	uxth.w	r8, r8
 801f566:	f108 0b01 	add.w	fp, r8, #1
 801f56a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f56e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f572:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801f576:	f896 8001 	ldrb.w	r8, [r6, #1]
 801f57a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f57e:	fb03 f808 	mul.w	r8, r3, r8
 801f582:	fb0e 880b 	mla	r8, lr, fp, r8
 801f586:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f58a:	fb01 880b 	mla	r8, r1, fp, r8
 801f58e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f592:	fb09 880b 	mla	r8, r9, fp, r8
 801f596:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801f59a:	fb1b fb04 	smulbb	fp, fp, r4
 801f59e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f5a2:	fb08 b80a 	mla	r8, r8, sl, fp
 801f5a6:	fa1f f888 	uxth.w	r8, r8
 801f5aa:	f108 0b01 	add.w	fp, r8, #1
 801f5ae:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f5b2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f5b6:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801f5ba:	78b6      	ldrb	r6, [r6, #2]
 801f5bc:	78bf      	ldrb	r7, [r7, #2]
 801f5be:	4373      	muls	r3, r6
 801f5c0:	7896      	ldrb	r6, [r2, #2]
 801f5c2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f5c4:	fb0e 3307 	mla	r3, lr, r7, r3
 801f5c8:	fb01 3306 	mla	r3, r1, r6, r3
 801f5cc:	7886      	ldrb	r6, [r0, #2]
 801f5ce:	fb09 3906 	mla	r9, r9, r6, r3
 801f5d2:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801f5d6:	fb13 f304 	smulbb	r3, r3, r4
 801f5da:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f5de:	fb09 390a 	mla	r9, r9, sl, r3
 801f5e2:	fa1f f989 	uxth.w	r9, r9
 801f5e6:	f109 0301 	add.w	r3, r9, #1
 801f5ea:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f5ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f5f0:	4413      	add	r3, r2
 801f5f2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f5f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f5f8:	9327      	str	r3, [sp, #156]	; 0x9c
 801f5fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f5fc:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801f600:	4413      	add	r3, r2
 801f602:	9328      	str	r3, [sp, #160]	; 0xa0
 801f604:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f606:	3b01      	subs	r3, #1
 801f608:	9311      	str	r3, [sp, #68]	; 0x44
 801f60a:	e601      	b.n	801f210 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f60c:	b151      	cbz	r1, 801f624 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801f60e:	5d52      	ldrb	r2, [r2, r5]
 801f610:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f612:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f616:	4402      	add	r2, r0
 801f618:	4638      	mov	r0, r7
 801f61a:	463e      	mov	r6, r7
 801f61c:	e774      	b.n	801f508 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f61e:	4638      	mov	r0, r7
 801f620:	463a      	mov	r2, r7
 801f622:	e771      	b.n	801f508 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f624:	4638      	mov	r0, r7
 801f626:	463a      	mov	r2, r7
 801f628:	e7f7      	b.n	801f61a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801f62a:	b015      	add	sp, #84	; 0x54
 801f62c:	ecbd 8b08 	vpop	{d8-d11}
 801f630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f634 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f638:	780d      	ldrb	r5, [r1, #0]
 801f63a:	f891 9002 	ldrb.w	r9, [r1, #2]
 801f63e:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801f642:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f646:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801f64a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801f64e:	f891 9001 	ldrb.w	r9, [r1, #1]
 801f652:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801f656:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f65a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f65e:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801f662:	9501      	str	r5, [sp, #4]
 801f664:	fb06 470c 	mla	r7, r6, ip, r4
 801f668:	2e00      	cmp	r6, #0
 801f66a:	eb02 0e07 	add.w	lr, r2, r7
 801f66e:	db46      	blt.n	801f6fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f670:	45b0      	cmp	r8, r6
 801f672:	dd44      	ble.n	801f6fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f674:	2c00      	cmp	r4, #0
 801f676:	db40      	blt.n	801f6fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f678:	45a4      	cmp	ip, r4
 801f67a:	dd3e      	ble.n	801f6fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f67c:	5dd7      	ldrb	r7, [r2, r7]
 801f67e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f682:	441f      	add	r7, r3
 801f684:	1c62      	adds	r2, r4, #1
 801f686:	d43d      	bmi.n	801f704 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f688:	4594      	cmp	ip, r2
 801f68a:	dd3b      	ble.n	801f704 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f68c:	f1ba 0f00 	cmp.w	sl, #0
 801f690:	d038      	beq.n	801f704 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f692:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f69a:	441d      	add	r5, r3
 801f69c:	3601      	adds	r6, #1
 801f69e:	d435      	bmi.n	801f70c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f6a0:	45b0      	cmp	r8, r6
 801f6a2:	dd33      	ble.n	801f70c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f6a4:	b390      	cbz	r0, 801f70c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f6a6:	2c00      	cmp	r4, #0
 801f6a8:	db2e      	blt.n	801f708 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f6aa:	45a4      	cmp	ip, r4
 801f6ac:	dd2c      	ble.n	801f708 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f6ae:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801f6b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f6b6:	441e      	add	r6, r3
 801f6b8:	1c62      	adds	r2, r4, #1
 801f6ba:	d42a      	bmi.n	801f712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f6bc:	4594      	cmp	ip, r2
 801f6be:	dd28      	ble.n	801f712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f6c0:	f1ba 0f00 	cmp.w	sl, #0
 801f6c4:	d025      	beq.n	801f712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f6c6:	44f4      	add	ip, lr
 801f6c8:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f6cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6d0:	4413      	add	r3, r2
 801f6d2:	f1ba 0f0f 	cmp.w	sl, #15
 801f6d6:	f897 8000 	ldrb.w	r8, [r7]
 801f6da:	f895 9000 	ldrb.w	r9, [r5]
 801f6de:	f896 e000 	ldrb.w	lr, [r6]
 801f6e2:	f893 c000 	ldrb.w	ip, [r3]
 801f6e6:	d801      	bhi.n	801f6ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801f6e8:	280f      	cmp	r0, #15
 801f6ea:	d914      	bls.n	801f716 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801f6ec:	4b29      	ldr	r3, [pc, #164]	; (801f794 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801f6ee:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f6f2:	4a29      	ldr	r2, [pc, #164]	; (801f798 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801f6f4:	4829      	ldr	r0, [pc, #164]	; (801f79c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801f6f6:	f005 ff39 	bl	802556c <__assert_func>
 801f6fa:	af01      	add	r7, sp, #4
 801f6fc:	e7c2      	b.n	801f684 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f6fe:	ad01      	add	r5, sp, #4
 801f700:	462f      	mov	r7, r5
 801f702:	e7cb      	b.n	801f69c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f704:	ad01      	add	r5, sp, #4
 801f706:	e7c9      	b.n	801f69c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f708:	ae01      	add	r6, sp, #4
 801f70a:	e7d5      	b.n	801f6b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801f70c:	ab01      	add	r3, sp, #4
 801f70e:	461e      	mov	r6, r3
 801f710:	e7df      	b.n	801f6d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f712:	ab01      	add	r3, sp, #4
 801f714:	e7dd      	b.n	801f6d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f716:	fa1f f48a 	uxth.w	r4, sl
 801f71a:	b280      	uxth	r0, r0
 801f71c:	fb04 fa00 	mul.w	sl, r4, r0
 801f720:	0124      	lsls	r4, r4, #4
 801f722:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f726:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801f72a:	b282      	uxth	r2, r0
 801f72c:	eba4 000a 	sub.w	r0, r4, sl
 801f730:	ebab 0b02 	sub.w	fp, fp, r2
 801f734:	b280      	uxth	r0, r0
 801f736:	fa1f fb8b 	uxth.w	fp, fp
 801f73a:	fb00 f909 	mul.w	r9, r0, r9
 801f73e:	fb0b 9808 	mla	r8, fp, r8, r9
 801f742:	fb02 8e0e 	mla	lr, r2, lr, r8
 801f746:	fb0a ec0c 	mla	ip, sl, ip, lr
 801f74a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f74e:	f881 c000 	strb.w	ip, [r1]
 801f752:	786c      	ldrb	r4, [r5, #1]
 801f754:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f758:	4344      	muls	r4, r0
 801f75a:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f75e:	7874      	ldrb	r4, [r6, #1]
 801f760:	fb02 cc04 	mla	ip, r2, r4, ip
 801f764:	785c      	ldrb	r4, [r3, #1]
 801f766:	fb0a c404 	mla	r4, sl, r4, ip
 801f76a:	1224      	asrs	r4, r4, #8
 801f76c:	704c      	strb	r4, [r1, #1]
 801f76e:	78ad      	ldrb	r5, [r5, #2]
 801f770:	78bc      	ldrb	r4, [r7, #2]
 801f772:	4368      	muls	r0, r5
 801f774:	fb0b 0b04 	mla	fp, fp, r4, r0
 801f778:	78b0      	ldrb	r0, [r6, #2]
 801f77a:	fb02 b000 	mla	r0, r2, r0, fp
 801f77e:	789a      	ldrb	r2, [r3, #2]
 801f780:	fb0a 0a02 	mla	sl, sl, r2, r0
 801f784:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f788:	f881 a002 	strb.w	sl, [r1, #2]
 801f78c:	b003      	add	sp, #12
 801f78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f792:	bf00      	nop
 801f794:	0802acdd 	.word	0x0802acdd
 801f798:	0802b1d6 	.word	0x0802b1d6
 801f79c:	0802ada6 	.word	0x0802ada6

0801f7a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7a4:	ed2d 8b0a 	vpush	{d8-d12}
 801f7a8:	b08f      	sub	sp, #60	; 0x3c
 801f7aa:	eeb0 aa40 	vmov.f32	s20, s0
 801f7ae:	eef0 9a60 	vmov.f32	s19, s1
 801f7b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801f7b4:	eeb0 9a41 	vmov.f32	s18, s2
 801f7b8:	9307      	str	r3, [sp, #28]
 801f7ba:	eeb0 8a62 	vmov.f32	s16, s5
 801f7be:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801f7c2:	eef0 8a43 	vmov.f32	s17, s6
 801f7c6:	900d      	str	r0, [sp, #52]	; 0x34
 801f7c8:	eeb0 ca44 	vmov.f32	s24, s8
 801f7cc:	6860      	ldr	r0, [r4, #4]
 801f7ce:	eef0 ba64 	vmov.f32	s23, s9
 801f7d2:	9309      	str	r3, [sp, #36]	; 0x24
 801f7d4:	eeb0 ba45 	vmov.f32	s22, s10
 801f7d8:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f7dc:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801f7e0:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801f7e4:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f7e8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f7ea:	fb00 1303 	mla	r3, r0, r3, r1
 801f7ee:	6821      	ldr	r1, [r4, #0]
 801f7f0:	6854      	ldr	r4, [r2, #4]
 801f7f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f7f6:	3404      	adds	r4, #4
 801f7f8:	18cb      	adds	r3, r1, r3
 801f7fa:	9308      	str	r3, [sp, #32]
 801f7fc:	6813      	ldr	r3, [r2, #0]
 801f7fe:	930a      	str	r3, [sp, #40]	; 0x28
 801f800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f802:	2b00      	cmp	r3, #0
 801f804:	dc03      	bgt.n	801f80e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f808:	2b00      	cmp	r3, #0
 801f80a:	f340 81d2 	ble.w	801fbb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f80e:	9b07      	ldr	r3, [sp, #28]
 801f810:	2b00      	cmp	r3, #0
 801f812:	f340 80e3 	ble.w	801f9dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801f816:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f818:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f81a:	1412      	asrs	r2, r2, #16
 801f81c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f820:	d42f      	bmi.n	801f882 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f822:	1c51      	adds	r1, r2, #1
 801f824:	428d      	cmp	r5, r1
 801f826:	dd2f      	ble.n	801f888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f828:	2b00      	cmp	r3, #0
 801f82a:	db2d      	blt.n	801f888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f82c:	1c59      	adds	r1, r3, #1
 801f82e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f830:	4288      	cmp	r0, r1
 801f832:	dd29      	ble.n	801f888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f834:	9b07      	ldr	r3, [sp, #28]
 801f836:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f838:	3b01      	subs	r3, #1
 801f83a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f83c:	fb02 1203 	mla	r2, r2, r3, r1
 801f840:	1412      	asrs	r2, r2, #16
 801f842:	d42b      	bmi.n	801f89c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f844:	3201      	adds	r2, #1
 801f846:	4295      	cmp	r5, r2
 801f848:	dd28      	ble.n	801f89c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f84a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f84c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f84e:	fb02 1303 	mla	r3, r2, r3, r1
 801f852:	141b      	asrs	r3, r3, #16
 801f854:	d422      	bmi.n	801f89c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f856:	3301      	adds	r3, #1
 801f858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f85a:	429a      	cmp	r2, r3
 801f85c:	dd1e      	ble.n	801f89c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f85e:	9b08      	ldr	r3, [sp, #32]
 801f860:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f864:	f103 0803 	add.w	r8, r3, #3
 801f868:	f1ba 0f00 	cmp.w	sl, #0
 801f86c:	f300 8119 	bgt.w	801faa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801f870:	9b07      	ldr	r3, [sp, #28]
 801f872:	9a08      	ldr	r2, [sp, #32]
 801f874:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f87c:	441a      	add	r2, r3
 801f87e:	9208      	str	r2, [sp, #32]
 801f880:	e0ae      	b.n	801f9e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801f882:	1c51      	adds	r1, r2, #1
 801f884:	f040 809b 	bne.w	801f9be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f888:	42aa      	cmp	r2, r5
 801f88a:	f280 8098 	bge.w	801f9be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f88e:	1c5a      	adds	r2, r3, #1
 801f890:	f2c0 8095 	blt.w	801f9be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f896:	4293      	cmp	r3, r2
 801f898:	f280 8091 	bge.w	801f9be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f89c:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801f8a0:	f1bb 0f00 	cmp.w	fp, #0
 801f8a4:	dde4      	ble.n	801f870 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801f8a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f8a8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f8aa:	141a      	asrs	r2, r3, #16
 801f8ac:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f8ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f8b0:	1400      	asrs	r0, r0, #16
 801f8b2:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f8b6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f8ba:	f100 80dc 	bmi.w	801fa76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801f8be:	1c47      	adds	r7, r0, #1
 801f8c0:	42bd      	cmp	r5, r7
 801f8c2:	f340 80da 	ble.w	801fa7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f8c6:	2a00      	cmp	r2, #0
 801f8c8:	f2c0 80d7 	blt.w	801fa7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f8cc:	f102 0c01 	add.w	ip, r2, #1
 801f8d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f8d2:	4567      	cmp	r7, ip
 801f8d4:	f340 80d1 	ble.w	801fa7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f8d8:	fb02 0005 	mla	r0, r2, r5, r0
 801f8dc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f8de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f8e0:	f817 8000 	ldrb.w	r8, [r7, r0]
 801f8e4:	4402      	add	r2, r0
 801f8e6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f8ea:	eb04 0c08 	add.w	ip, r4, r8
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	f000 80b3 	beq.w	801fa5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801f8f4:	7857      	ldrb	r7, [r2, #1]
 801f8f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f8fa:	4427      	add	r7, r4
 801f8fc:	2900      	cmp	r1, #0
 801f8fe:	f000 80b4 	beq.w	801fa6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801f902:	1950      	adds	r0, r2, r5
 801f904:	5d52      	ldrb	r2, [r2, r5]
 801f906:	7840      	ldrb	r0, [r0, #1]
 801f908:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f90c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f910:	4422      	add	r2, r4
 801f912:	4420      	add	r0, r4
 801f914:	b29b      	uxth	r3, r3
 801f916:	f814 a008 	ldrb.w	sl, [r4, r8]
 801f91a:	b289      	uxth	r1, r1
 801f91c:	f897 8000 	ldrb.w	r8, [r7]
 801f920:	fb03 f901 	mul.w	r9, r3, r1
 801f924:	011b      	lsls	r3, r3, #4
 801f926:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f92a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f92e:	eba3 0309 	sub.w	r3, r3, r9
 801f932:	b289      	uxth	r1, r1
 801f934:	b29b      	uxth	r3, r3
 801f936:	ebae 0e01 	sub.w	lr, lr, r1
 801f93a:	fb03 f808 	mul.w	r8, r3, r8
 801f93e:	fa1f fe8e 	uxth.w	lr, lr
 801f942:	fb0e 880a 	mla	r8, lr, sl, r8
 801f946:	f892 a000 	ldrb.w	sl, [r2]
 801f94a:	fb01 880a 	mla	r8, r1, sl, r8
 801f94e:	f890 a000 	ldrb.w	sl, [r0]
 801f952:	fb09 880a 	mla	r8, r9, sl, r8
 801f956:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f95a:	f886 8000 	strb.w	r8, [r6]
 801f95e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f962:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f966:	fb03 f808 	mul.w	r8, r3, r8
 801f96a:	fb0e 880a 	mla	r8, lr, sl, r8
 801f96e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f972:	fb01 880a 	mla	r8, r1, sl, r8
 801f976:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f97a:	fb09 880a 	mla	r8, r9, sl, r8
 801f97e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f982:	f886 8001 	strb.w	r8, [r6, #1]
 801f986:	78bf      	ldrb	r7, [r7, #2]
 801f988:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f98c:	437b      	muls	r3, r7
 801f98e:	7892      	ldrb	r2, [r2, #2]
 801f990:	fb0e 330c 	mla	r3, lr, ip, r3
 801f994:	fb01 3102 	mla	r1, r1, r2, r3
 801f998:	7882      	ldrb	r2, [r0, #2]
 801f99a:	fb09 1902 	mla	r9, r9, r2, r1
 801f99e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f9a2:	f886 9002 	strb.w	r9, [r6, #2]
 801f9a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f9a8:	3603      	adds	r6, #3
 801f9aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f9ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f9b0:	4413      	add	r3, r2
 801f9b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f9b4:	9323      	str	r3, [sp, #140]	; 0x8c
 801f9b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f9b8:	4413      	add	r3, r2
 801f9ba:	9324      	str	r3, [sp, #144]	; 0x90
 801f9bc:	e770      	b.n	801f8a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801f9be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f9c0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f9c2:	4413      	add	r3, r2
 801f9c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f9c6:	9323      	str	r3, [sp, #140]	; 0x8c
 801f9c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f9ca:	4413      	add	r3, r2
 801f9cc:	9324      	str	r3, [sp, #144]	; 0x90
 801f9ce:	9b07      	ldr	r3, [sp, #28]
 801f9d0:	3b01      	subs	r3, #1
 801f9d2:	9307      	str	r3, [sp, #28]
 801f9d4:	9b08      	ldr	r3, [sp, #32]
 801f9d6:	3303      	adds	r3, #3
 801f9d8:	9308      	str	r3, [sp, #32]
 801f9da:	e718      	b.n	801f80e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f9dc:	f47f af2a 	bne.w	801f834 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801f9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9e2:	2b00      	cmp	r3, #0
 801f9e4:	f340 80e5 	ble.w	801fbb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f9e8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f9ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f9ee:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f9f2:	eef0 6a48 	vmov.f32	s13, s16
 801f9f6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f9fa:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f9fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa02:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801fa06:	eef0 6a68 	vmov.f32	s13, s17
 801fa0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa0e:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801fa12:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fa16:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fa1a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fa1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fa22:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fa26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fa2a:	ee18 2a10 	vmov	r2, s16
 801fa2e:	eeb0 8a47 	vmov.f32	s16, s14
 801fa32:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa36:	ee18 2a90 	vmov	r2, s17
 801fa3a:	9325      	str	r3, [sp, #148]	; 0x94
 801fa3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fa3e:	eef0 8a67 	vmov.f32	s17, s15
 801fa42:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa46:	9326      	str	r3, [sp, #152]	; 0x98
 801fa48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fa4c:	3b01      	subs	r3, #1
 801fa4e:	930b      	str	r3, [sp, #44]	; 0x2c
 801fa50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fa52:	bf08      	it	eq
 801fa54:	4613      	moveq	r3, r2
 801fa56:	9307      	str	r3, [sp, #28]
 801fa58:	e6d2      	b.n	801f800 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801fa5a:	b149      	cbz	r1, 801fa70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801fa5c:	5d52      	ldrb	r2, [r2, r5]
 801fa5e:	4660      	mov	r0, ip
 801fa60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa64:	4422      	add	r2, r4
 801fa66:	4667      	mov	r7, ip
 801fa68:	e754      	b.n	801f914 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fa6a:	4660      	mov	r0, ip
 801fa6c:	4662      	mov	r2, ip
 801fa6e:	e751      	b.n	801f914 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801fa70:	4660      	mov	r0, ip
 801fa72:	4662      	mov	r2, ip
 801fa74:	e7f7      	b.n	801fa66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801fa76:	1c47      	adds	r7, r0, #1
 801fa78:	d195      	bne.n	801f9a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fa7a:	4285      	cmp	r5, r0
 801fa7c:	dd93      	ble.n	801f9a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fa7e:	1c57      	adds	r7, r2, #1
 801fa80:	db91      	blt.n	801f9a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fa82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fa84:	4297      	cmp	r7, r2
 801fa86:	dd8e      	ble.n	801f9a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fa88:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fa8c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801fa90:	e9cd 5700 	strd	r5, r7, [sp]
 801fa94:	4623      	mov	r3, r4
 801fa96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa98:	4631      	mov	r1, r6
 801fa9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fa9c:	f7ff fdca 	bl	801f634 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801faa0:	e781      	b.n	801f9a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801faa2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801faa4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801faa6:	1410      	asrs	r0, r2, #16
 801faa8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801faac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801faae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fab0:	1412      	asrs	r2, r2, #16
 801fab2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fab6:	fb05 2000 	mla	r0, r5, r0, r2
 801faba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fabc:	f816 e000 	ldrb.w	lr, [r6, r0]
 801fac0:	4402      	add	r2, r0
 801fac2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fac6:	eb04 070e 	add.w	r7, r4, lr
 801faca:	2b00      	cmp	r3, #0
 801facc:	d063      	beq.n	801fb96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801face:	7856      	ldrb	r6, [r2, #1]
 801fad0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fad4:	4426      	add	r6, r4
 801fad6:	2900      	cmp	r1, #0
 801fad8:	d065      	beq.n	801fba6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801fada:	1950      	adds	r0, r2, r5
 801fadc:	5d52      	ldrb	r2, [r2, r5]
 801fade:	7840      	ldrb	r0, [r0, #1]
 801fae0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fae4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fae8:	4422      	add	r2, r4
 801faea:	4420      	add	r0, r4
 801faec:	b29b      	uxth	r3, r3
 801faee:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801faf2:	b289      	uxth	r1, r1
 801faf4:	f896 e000 	ldrb.w	lr, [r6]
 801faf8:	f108 0803 	add.w	r8, r8, #3
 801fafc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fb00:	fb03 f901 	mul.w	r9, r3, r1
 801fb04:	011b      	lsls	r3, r3, #4
 801fb06:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fb0a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801fb0e:	eba3 0309 	sub.w	r3, r3, r9
 801fb12:	b289      	uxth	r1, r1
 801fb14:	b29b      	uxth	r3, r3
 801fb16:	ebac 0c01 	sub.w	ip, ip, r1
 801fb1a:	fb03 fe0e 	mul.w	lr, r3, lr
 801fb1e:	fa1f fc8c 	uxth.w	ip, ip
 801fb22:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fb26:	f892 b000 	ldrb.w	fp, [r2]
 801fb2a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fb2e:	f890 b000 	ldrb.w	fp, [r0]
 801fb32:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fb36:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fb3a:	f808 ec06 	strb.w	lr, [r8, #-6]
 801fb3e:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fb42:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fb46:	fb03 fe0e 	mul.w	lr, r3, lr
 801fb4a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fb4e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fb52:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fb56:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fb5a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fb5e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fb62:	f808 ec05 	strb.w	lr, [r8, #-5]
 801fb66:	78b6      	ldrb	r6, [r6, #2]
 801fb68:	78bf      	ldrb	r7, [r7, #2]
 801fb6a:	4373      	muls	r3, r6
 801fb6c:	7896      	ldrb	r6, [r2, #2]
 801fb6e:	7882      	ldrb	r2, [r0, #2]
 801fb70:	fb0c 3307 	mla	r3, ip, r7, r3
 801fb74:	fb01 3306 	mla	r3, r1, r6, r3
 801fb78:	fb09 3902 	mla	r9, r9, r2, r3
 801fb7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fb7e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fb80:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb84:	4413      	add	r3, r2
 801fb86:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fb88:	f808 9c04 	strb.w	r9, [r8, #-4]
 801fb8c:	9323      	str	r3, [sp, #140]	; 0x8c
 801fb8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb90:	4413      	add	r3, r2
 801fb92:	9324      	str	r3, [sp, #144]	; 0x90
 801fb94:	e668      	b.n	801f868 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fb96:	b149      	cbz	r1, 801fbac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801fb98:	5d52      	ldrb	r2, [r2, r5]
 801fb9a:	4638      	mov	r0, r7
 801fb9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fba0:	4422      	add	r2, r4
 801fba2:	463e      	mov	r6, r7
 801fba4:	e7a2      	b.n	801faec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fba6:	4638      	mov	r0, r7
 801fba8:	463a      	mov	r2, r7
 801fbaa:	e79f      	b.n	801faec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fbac:	4638      	mov	r0, r7
 801fbae:	463a      	mov	r2, r7
 801fbb0:	e7f7      	b.n	801fba2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801fbb2:	b00f      	add	sp, #60	; 0x3c
 801fbb4:	ecbd 8b0a 	vpop	{d8-d12}
 801fbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fbbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801fbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbc0:	b087      	sub	sp, #28
 801fbc2:	7888      	ldrb	r0, [r1, #2]
 801fbc4:	9002      	str	r0, [sp, #8]
 801fbc6:	7848      	ldrb	r0, [r1, #1]
 801fbc8:	9e02      	ldr	r6, [sp, #8]
 801fbca:	9003      	str	r0, [sp, #12]
 801fbcc:	7808      	ldrb	r0, [r1, #0]
 801fbce:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801fbd2:	9004      	str	r0, [sp, #16]
 801fbd4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fbd8:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801fbdc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801fbe0:	9e03      	ldr	r6, [sp, #12]
 801fbe2:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801fbe6:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801fbea:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801fbee:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801fbf2:	fb04 7508 	mla	r5, r4, r8, r7
 801fbf6:	2c00      	cmp	r4, #0
 801fbf8:	eb02 0905 	add.w	r9, r2, r5
 801fbfc:	db45      	blt.n	801fc8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fbfe:	45a2      	cmp	sl, r4
 801fc00:	dd43      	ble.n	801fc8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fc02:	2f00      	cmp	r7, #0
 801fc04:	db3f      	blt.n	801fc86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fc06:	45b8      	cmp	r8, r7
 801fc08:	dd3d      	ble.n	801fc86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fc0a:	5d52      	ldrb	r2, [r2, r5]
 801fc0c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fc10:	1c7a      	adds	r2, r7, #1
 801fc12:	d43d      	bmi.n	801fc90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fc14:	4590      	cmp	r8, r2
 801fc16:	dd3b      	ble.n	801fc90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fc18:	f1bc 0f00 	cmp.w	ip, #0
 801fc1c:	d038      	beq.n	801fc90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801fc1e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fc22:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fc26:	3401      	adds	r4, #1
 801fc28:	d436      	bmi.n	801fc98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fc2a:	45a2      	cmp	sl, r4
 801fc2c:	dd34      	ble.n	801fc98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fc2e:	f1be 0f00 	cmp.w	lr, #0
 801fc32:	d031      	beq.n	801fc98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fc34:	2f00      	cmp	r7, #0
 801fc36:	db2d      	blt.n	801fc94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fc38:	45b8      	cmp	r8, r7
 801fc3a:	dd2b      	ble.n	801fc94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fc3c:	f819 2008 	ldrb.w	r2, [r9, r8]
 801fc40:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fc44:	3701      	adds	r7, #1
 801fc46:	d409      	bmi.n	801fc5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fc48:	45b8      	cmp	r8, r7
 801fc4a:	dd07      	ble.n	801fc5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fc4c:	f1bc 0f00 	cmp.w	ip, #0
 801fc50:	d004      	beq.n	801fc5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fc52:	44c8      	add	r8, r9
 801fc54:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fc58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801fc5c:	f1bc 0f0f 	cmp.w	ip, #15
 801fc60:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801fc64:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801fc68:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fc6c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fc70:	d802      	bhi.n	801fc78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801fc72:	f1be 0f0f 	cmp.w	lr, #15
 801fc76:	d911      	bls.n	801fc9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801fc78:	4b77      	ldr	r3, [pc, #476]	; (801fe58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801fc7a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fc7e:	4a77      	ldr	r2, [pc, #476]	; (801fe5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801fc80:	4877      	ldr	r0, [pc, #476]	; (801fe60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801fc82:	f005 fc73 	bl	802556c <__assert_func>
 801fc86:	4606      	mov	r6, r0
 801fc88:	e7c2      	b.n	801fc10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801fc8a:	4605      	mov	r5, r0
 801fc8c:	4606      	mov	r6, r0
 801fc8e:	e7ca      	b.n	801fc26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801fc90:	4605      	mov	r5, r0
 801fc92:	e7c8      	b.n	801fc26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801fc94:	4604      	mov	r4, r0
 801fc96:	e7d5      	b.n	801fc44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801fc98:	4604      	mov	r4, r0
 801fc9a:	e7df      	b.n	801fc5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fc9c:	fa1f fc8c 	uxth.w	ip, ip
 801fca0:	fa1f f28e 	uxth.w	r2, lr
 801fca4:	fb02 fe0c 	mul.w	lr, r2, ip
 801fca8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fcac:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801fcb0:	ebac 070e 	sub.w	r7, ip, lr
 801fcb4:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801fcb8:	b292      	uxth	r2, r2
 801fcba:	b2bf      	uxth	r7, r7
 801fcbc:	1a9b      	subs	r3, r3, r2
 801fcbe:	fb07 fc0a 	mul.w	ip, r7, sl
 801fcc2:	b29b      	uxth	r3, r3
 801fcc4:	fb03 cc0b 	mla	ip, r3, fp, ip
 801fcc8:	9301      	str	r3, [sp, #4]
 801fcca:	fb02 cc09 	mla	ip, r2, r9, ip
 801fcce:	fb0e cc08 	mla	ip, lr, r8, ip
 801fcd2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fcd6:	9305      	str	r3, [sp, #20]
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	f000 80b9 	beq.w	801fe50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801fcde:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fce2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fce6:	fb0b fc0c 	mul.w	ip, fp, ip
 801fcea:	fb0b f606 	mul.w	r6, fp, r6
 801fcee:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fcf2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fcf6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801fcfa:	44dc      	add	ip, fp
 801fcfc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fd00:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fd04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd08:	fb0a fb0b 	mul.w	fp, sl, fp
 801fd0c:	fb0a fa05 	mul.w	sl, sl, r5
 801fd10:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801fd14:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801fd18:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801fd1c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fd20:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fd24:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fd28:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801fd2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd30:	0a36      	lsrs	r6, r6, #8
 801fd32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd36:	44dc      	add	ip, fp
 801fd38:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fd3c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fd40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fd44:	fb09 fb0b 	mul.w	fp, r9, fp
 801fd48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd4c:	fb09 f904 	mul.w	r9, r9, r4
 801fd50:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fd54:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801fd58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd5c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801fd60:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fd64:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fd68:	fb0c fc07 	mul.w	ip, ip, r7
 801fd6c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fd70:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801fd74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fd78:	445d      	add	r5, fp
 801fd7a:	fb08 f404 	mul.w	r4, r8, r4
 801fd7e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fd82:	fb08 f800 	mul.w	r8, r8, r0
 801fd86:	0a2d      	lsrs	r5, r5, #8
 801fd88:	0a20      	lsrs	r0, r4, #8
 801fd8a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801fd8e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fd92:	fb07 f70a 	mul.w	r7, r7, sl
 801fd96:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fd9a:	4404      	add	r4, r0
 801fd9c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801fda0:	0a24      	lsrs	r4, r4, #8
 801fda2:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801fda6:	9801      	ldr	r0, [sp, #4]
 801fda8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fdac:	fb03 cc00 	mla	ip, r3, r0, ip
 801fdb0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fdb4:	fb00 7606 	mla	r6, r0, r6, r7
 801fdb8:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801fdbc:	fb04 cc0e 	mla	ip, r4, lr, ip
 801fdc0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fdc4:	b280      	uxth	r0, r0
 801fdc6:	9c04      	ldr	r4, [sp, #16]
 801fdc8:	fb05 cc02 	mla	ip, r5, r2, ip
 801fdcc:	fb0e 6e08 	mla	lr, lr, r8, r6
 801fdd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fdd4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801fdd8:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801fddc:	fb02 ec0c 	mla	ip, r2, ip, lr
 801fde0:	9a05      	ldr	r2, [sp, #20]
 801fde2:	4342      	muls	r2, r0
 801fde4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fde8:	1c53      	adds	r3, r2, #1
 801fdea:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fdee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fdf2:	ea45 0c0c 	orr.w	ip, r5, ip
 801fdf6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801fdfa:	fa5f f28c 	uxtb.w	r2, ip
 801fdfe:	b2db      	uxtb	r3, r3
 801fe00:	fb14 f403 	smulbb	r4, r4, r3
 801fe04:	fb02 4200 	mla	r2, r2, r0, r4
 801fe08:	b292      	uxth	r2, r2
 801fe0a:	1c54      	adds	r4, r2, #1
 801fe0c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801fe10:	9c03      	ldr	r4, [sp, #12]
 801fe12:	fb14 f403 	smulbb	r4, r4, r3
 801fe16:	1212      	asrs	r2, r2, #8
 801fe18:	700a      	strb	r2, [r1, #0]
 801fe1a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801fe1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fe22:	fb02 4200 	mla	r2, r2, r0, r4
 801fe26:	b292      	uxth	r2, r2
 801fe28:	1c54      	adds	r4, r2, #1
 801fe2a:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801fe2e:	1212      	asrs	r2, r2, #8
 801fe30:	704a      	strb	r2, [r1, #1]
 801fe32:	9a02      	ldr	r2, [sp, #8]
 801fe34:	fb12 f303 	smulbb	r3, r2, r3
 801fe38:	fb0c 3c00 	mla	ip, ip, r0, r3
 801fe3c:	fa1f fc8c 	uxth.w	ip, ip
 801fe40:	f10c 0301 	add.w	r3, ip, #1
 801fe44:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fe48:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fe4c:	f881 c002 	strb.w	ip, [r1, #2]
 801fe50:	b007      	add	sp, #28
 801fe52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe56:	bf00      	nop
 801fe58:	0802acdd 	.word	0x0802acdd
 801fe5c:	0802b1d6 	.word	0x0802b1d6
 801fe60:	0802ada6 	.word	0x0802ada6

0801fe64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fe64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe68:	ed2d 8b08 	vpush	{d8-d11}
 801fe6c:	b09b      	sub	sp, #108	; 0x6c
 801fe6e:	eeb0 aa40 	vmov.f32	s20, s0
 801fe72:	eef0 9a60 	vmov.f32	s19, s1
 801fe76:	930a      	str	r3, [sp, #40]	; 0x28
 801fe78:	eeb0 9a41 	vmov.f32	s18, s2
 801fe7c:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801fe80:	eeb0 8a62 	vmov.f32	s16, s5
 801fe84:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801fe86:	eef0 8a43 	vmov.f32	s17, s6
 801fe8a:	9312      	str	r3, [sp, #72]	; 0x48
 801fe8c:	eef0 ba44 	vmov.f32	s23, s8
 801fe90:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801fe94:	eeb0 ba64 	vmov.f32	s22, s9
 801fe98:	9019      	str	r0, [sp, #100]	; 0x64
 801fe9a:	eef0 aa45 	vmov.f32	s21, s10
 801fe9e:	9114      	str	r1, [sp, #80]	; 0x50
 801fea0:	9317      	str	r3, [sp, #92]	; 0x5c
 801fea2:	6868      	ldr	r0, [r5, #4]
 801fea4:	9218      	str	r2, [sp, #96]	; 0x60
 801fea6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801fea8:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801feac:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801feb0:	fb00 1303 	mla	r3, r0, r3, r1
 801feb4:	6829      	ldr	r1, [r5, #0]
 801feb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801feba:	18cb      	adds	r3, r1, r3
 801febc:	930d      	str	r3, [sp, #52]	; 0x34
 801febe:	6813      	ldr	r3, [r2, #0]
 801fec0:	9313      	str	r3, [sp, #76]	; 0x4c
 801fec2:	6853      	ldr	r3, [r2, #4]
 801fec4:	3304      	adds	r3, #4
 801fec6:	9309      	str	r3, [sp, #36]	; 0x24
 801fec8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801feca:	2b00      	cmp	r3, #0
 801fecc:	dc03      	bgt.n	801fed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801fece:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fed0:	2b00      	cmp	r3, #0
 801fed2:	f340 8352 	ble.w	802057a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801fed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fed8:	2b00      	cmp	r3, #0
 801feda:	f340 81a2 	ble.w	8020222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801fede:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fee0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fee2:	1412      	asrs	r2, r2, #16
 801fee4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fee8:	d431      	bmi.n	801ff4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801feea:	1c51      	adds	r1, r2, #1
 801feec:	428c      	cmp	r4, r1
 801feee:	dd31      	ble.n	801ff54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	db2f      	blt.n	801ff54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801fef4:	1c59      	adds	r1, r3, #1
 801fef6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fef8:	4288      	cmp	r0, r1
 801fefa:	dd2b      	ble.n	801ff54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801fefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fefe:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ff00:	3b01      	subs	r3, #1
 801ff02:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801ff04:	fb02 1203 	mla	r2, r2, r3, r1
 801ff08:	1412      	asrs	r2, r2, #16
 801ff0a:	d42d      	bmi.n	801ff68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ff0c:	3201      	adds	r2, #1
 801ff0e:	4294      	cmp	r4, r2
 801ff10:	dd2a      	ble.n	801ff68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ff12:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ff14:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801ff16:	fb02 1303 	mla	r3, r2, r3, r1
 801ff1a:	141b      	asrs	r3, r3, #16
 801ff1c:	d424      	bmi.n	801ff68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ff1e:	3301      	adds	r3, #1
 801ff20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ff22:	429a      	cmp	r2, r3
 801ff24:	dd20      	ble.n	801ff68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ff26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff28:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801ff2c:	f103 0e03 	add.w	lr, r3, #3
 801ff30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff32:	9315      	str	r3, [sp, #84]	; 0x54
 801ff34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	f300 81de 	bgt.w	80202f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801ff3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ff40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff48:	441a      	add	r2, r3
 801ff4a:	920d      	str	r2, [sp, #52]	; 0x34
 801ff4c:	e16b      	b.n	8020226 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801ff4e:	1c51      	adds	r1, r2, #1
 801ff50:	f040 8158 	bne.w	8020204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801ff54:	42a2      	cmp	r2, r4
 801ff56:	f280 8155 	bge.w	8020204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801ff5a:	1c5a      	adds	r2, r3, #1
 801ff5c:	f2c0 8152 	blt.w	8020204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801ff60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ff62:	4293      	cmp	r3, r2
 801ff64:	f280 814e 	bge.w	8020204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801ff68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff6a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801ff6c:	9316      	str	r3, [sp, #88]	; 0x58
 801ff6e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801ff72:	9315      	str	r3, [sp, #84]	; 0x54
 801ff74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	dde0      	ble.n	801ff3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ff7a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ff7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ff7e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801ff82:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801ff84:	141b      	asrs	r3, r3, #16
 801ff86:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ff8a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ff8c:	1412      	asrs	r2, r2, #16
 801ff8e:	f100 819a 	bmi.w	80202c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801ff92:	1c55      	adds	r5, r2, #1
 801ff94:	42ac      	cmp	r4, r5
 801ff96:	f340 8198 	ble.w	80202ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801ff9a:	2b00      	cmp	r3, #0
 801ff9c:	f2c0 8195 	blt.w	80202ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801ffa0:	1c5d      	adds	r5, r3, #1
 801ffa2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801ffa4:	42af      	cmp	r7, r5
 801ffa6:	f340 8190 	ble.w	80202ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801ffaa:	fb03 2304 	mla	r3, r3, r4, r2
 801ffae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ffb0:	18d5      	adds	r5, r2, r3
 801ffb2:	5cd3      	ldrb	r3, [r2, r3]
 801ffb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ffb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ffba:	0e1f      	lsrs	r7, r3, #24
 801ffbc:	2800      	cmp	r0, #0
 801ffbe:	f000 8171 	beq.w	80202a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801ffc2:	f895 c001 	ldrb.w	ip, [r5, #1]
 801ffc6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801ffca:	920e      	str	r2, [sp, #56]	; 0x38
 801ffcc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ffd0:	2900      	cmp	r1, #0
 801ffd2:	f000 8172 	beq.w	80202ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801ffd6:	eb05 0c04 	add.w	ip, r5, r4
 801ffda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ffdc:	5d2d      	ldrb	r5, [r5, r4]
 801ffde:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801ffe2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ffe6:	950b      	str	r5, [sp, #44]	; 0x2c
 801ffe8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801ffec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ffee:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fff2:	0e15      	lsrs	r5, r2, #24
 801fff4:	920f      	str	r2, [sp, #60]	; 0x3c
 801fff6:	b280      	uxth	r0, r0
 801fff8:	b289      	uxth	r1, r1
 801fffa:	fb00 fa01 	mul.w	sl, r0, r1
 801fffe:	0100      	lsls	r0, r0, #4
 8020000:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8020004:	eba0 080a 	sub.w	r8, r0, sl
 8020008:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802000c:	b289      	uxth	r1, r1
 802000e:	fa1f f888 	uxth.w	r8, r8
 8020012:	1a52      	subs	r2, r2, r1
 8020014:	fb08 f00e 	mul.w	r0, r8, lr
 8020018:	b292      	uxth	r2, r2
 802001a:	fb02 0007 	mla	r0, r2, r7, r0
 802001e:	fb01 0009 	mla	r0, r1, r9, r0
 8020022:	fb0a 0005 	mla	r0, sl, r5, r0
 8020026:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802002a:	2800      	cmp	r0, #0
 802002c:	f000 80dd 	beq.w	80201ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020030:	2fff      	cmp	r7, #255	; 0xff
 8020032:	d01a      	beq.n	802006a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8020034:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020038:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802003c:	fb07 fc0c 	mul.w	ip, r7, ip
 8020040:	435f      	muls	r7, r3
 8020042:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020046:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802004a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802004e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020052:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8020056:	4463      	add	r3, ip
 8020058:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802005c:	0a1b      	lsrs	r3, r3, #8
 802005e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020062:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020066:	ea43 030b 	orr.w	r3, r3, fp
 802006a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802006e:	d01e      	beq.n	80200ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8020070:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020072:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8020076:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802007a:	fb0e fb0b 	mul.w	fp, lr, fp
 802007e:	fb0e fe07 	mul.w	lr, lr, r7
 8020082:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020086:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802008a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802008e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020092:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020096:	44dc      	add	ip, fp
 8020098:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802009c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80200a0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80200a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80200a8:	ea4c 070e 	orr.w	r7, ip, lr
 80200ac:	970e      	str	r7, [sp, #56]	; 0x38
 80200ae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80200b2:	d01e      	beq.n	80200f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80200b4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80200b6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80200ba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80200be:	fb09 fe0e 	mul.w	lr, r9, lr
 80200c2:	fb09 f907 	mul.w	r9, r9, r7
 80200c6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80200ca:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80200ce:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80200d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80200d6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80200da:	44f4      	add	ip, lr
 80200dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80200e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80200e4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80200e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80200ec:	ea4c 0709 	orr.w	r7, ip, r9
 80200f0:	970b      	str	r7, [sp, #44]	; 0x2c
 80200f2:	2dff      	cmp	r5, #255	; 0xff
 80200f4:	d01c      	beq.n	8020130 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 80200f6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80200f8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80200fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020100:	fb05 fe0e 	mul.w	lr, r5, lr
 8020104:	437d      	muls	r5, r7
 8020106:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802010a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802010e:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8020112:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020116:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802011a:	44f4      	add	ip, lr
 802011c:	0a2d      	lsrs	r5, r5, #8
 802011e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020122:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020126:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802012a:	ea4c 0505 	orr.w	r5, ip, r5
 802012e:	950f      	str	r5, [sp, #60]	; 0x3c
 8020130:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020132:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020136:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802013a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802013e:	fb08 f505 	mul.w	r5, r8, r5
 8020142:	fb02 5507 	mla	r5, r2, r7, r5
 8020146:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020148:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802014c:	fb01 5507 	mla	r5, r1, r7, r5
 8020150:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020152:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020156:	fb0a 5507 	mla	r5, sl, r7, r5
 802015a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802015c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020160:	0a2d      	lsrs	r5, r5, #8
 8020162:	fb08 f807 	mul.w	r8, r8, r7
 8020166:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802016a:	fb02 8303 	mla	r3, r2, r3, r8
 802016e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020170:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020174:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020176:	fb01 330c 	mla	r3, r1, ip, r3
 802017a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802017e:	fb0a 3a01 	mla	sl, sl, r1, r3
 8020182:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020184:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020186:	4343      	muls	r3, r0
 8020188:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802018c:	1c58      	adds	r0, r3, #1
 802018e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020192:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020196:	ea45 050a 	orr.w	r5, r5, sl
 802019a:	7833      	ldrb	r3, [r6, #0]
 802019c:	b2ea      	uxtb	r2, r5
 802019e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80201a2:	fb12 f201 	smulbb	r2, r2, r1
 80201a6:	b2c0      	uxtb	r0, r0
 80201a8:	fb03 2300 	mla	r3, r3, r0, r2
 80201ac:	b29b      	uxth	r3, r3
 80201ae:	1c5a      	adds	r2, r3, #1
 80201b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80201b4:	7872      	ldrb	r2, [r6, #1]
 80201b6:	fb12 f200 	smulbb	r2, r2, r0
 80201ba:	121b      	asrs	r3, r3, #8
 80201bc:	7033      	strb	r3, [r6, #0]
 80201be:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80201c2:	0c2d      	lsrs	r5, r5, #16
 80201c4:	fb03 2301 	mla	r3, r3, r1, r2
 80201c8:	b29b      	uxth	r3, r3
 80201ca:	1c5a      	adds	r2, r3, #1
 80201cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80201d0:	121b      	asrs	r3, r3, #8
 80201d2:	7073      	strb	r3, [r6, #1]
 80201d4:	78b3      	ldrb	r3, [r6, #2]
 80201d6:	fb13 f000 	smulbb	r0, r3, r0
 80201da:	fb05 0501 	mla	r5, r5, r1, r0
 80201de:	b2ad      	uxth	r5, r5
 80201e0:	1c6b      	adds	r3, r5, #1
 80201e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80201e6:	122d      	asrs	r5, r5, #8
 80201e8:	70b5      	strb	r5, [r6, #2]
 80201ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80201ec:	3603      	adds	r6, #3
 80201ee:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80201f0:	4413      	add	r3, r2
 80201f2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80201f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80201f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80201f8:	4413      	add	r3, r2
 80201fa:	932e      	str	r3, [sp, #184]	; 0xb8
 80201fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80201fe:	3b01      	subs	r3, #1
 8020200:	9316      	str	r3, [sp, #88]	; 0x58
 8020202:	e6b7      	b.n	801ff74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020204:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020206:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020208:	4413      	add	r3, r2
 802020a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802020c:	932d      	str	r3, [sp, #180]	; 0xb4
 802020e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020210:	4413      	add	r3, r2
 8020212:	932e      	str	r3, [sp, #184]	; 0xb8
 8020214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020216:	3b01      	subs	r3, #1
 8020218:	930a      	str	r3, [sp, #40]	; 0x28
 802021a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802021c:	3303      	adds	r3, #3
 802021e:	930d      	str	r3, [sp, #52]	; 0x34
 8020220:	e659      	b.n	801fed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020222:	f47f ae6b 	bne.w	801fefc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8020226:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020228:	2b00      	cmp	r3, #0
 802022a:	f340 81a6 	ble.w	802057a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 802022e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020232:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020234:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020238:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802023c:	eef0 6a48 	vmov.f32	s13, s16
 8020240:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020244:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020248:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802024c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8020250:	eef0 6a68 	vmov.f32	s13, s17
 8020254:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020258:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 802025c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020260:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020264:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020268:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802026c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020270:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020274:	ee18 2a10 	vmov	r2, s16
 8020278:	eeb0 8a47 	vmov.f32	s16, s14
 802027c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020280:	ee18 2a90 	vmov	r2, s17
 8020284:	932f      	str	r3, [sp, #188]	; 0xbc
 8020286:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020288:	eef0 8a67 	vmov.f32	s17, s15
 802028c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020290:	9330      	str	r3, [sp, #192]	; 0xc0
 8020292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020294:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020296:	3b01      	subs	r3, #1
 8020298:	9314      	str	r3, [sp, #80]	; 0x50
 802029a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802029c:	bf08      	it	eq
 802029e:	4613      	moveq	r3, r2
 80202a0:	930a      	str	r3, [sp, #40]	; 0x28
 80202a2:	e611      	b.n	801fec8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80202a4:	b161      	cbz	r1, 80202c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 80202a6:	5d2a      	ldrb	r2, [r5, r4]
 80202a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80202aa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80202ae:	25ff      	movs	r5, #255	; 0xff
 80202b0:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80202b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80202b6:	46ae      	mov	lr, r5
 80202b8:	e69d      	b.n	801fff6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80202ba:	25ff      	movs	r5, #255	; 0xff
 80202bc:	46a9      	mov	r9, r5
 80202be:	e69a      	b.n	801fff6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80202c0:	25ff      	movs	r5, #255	; 0xff
 80202c2:	46a9      	mov	r9, r5
 80202c4:	e7f7      	b.n	80202b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 80202c6:	1c57      	adds	r7, r2, #1
 80202c8:	d18f      	bne.n	80201ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80202ca:	4294      	cmp	r4, r2
 80202cc:	dd8d      	ble.n	80201ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80202ce:	1c5d      	adds	r5, r3, #1
 80202d0:	db8b      	blt.n	80201ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80202d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80202d4:	429d      	cmp	r5, r3
 80202d6:	dd88      	ble.n	80201ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80202d8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80202da:	9202      	str	r2, [sp, #8]
 80202dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80202de:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80202e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80202e4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80202e6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80202ea:	e9cd 4300 	strd	r4, r3, [sp]
 80202ee:	4631      	mov	r1, r6
 80202f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202f2:	f7ff fc63 	bl	801fbbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80202f6:	e778      	b.n	80201ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80202f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80202fa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80202fc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020300:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020302:	1412      	asrs	r2, r2, #16
 8020304:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020308:	141b      	asrs	r3, r3, #16
 802030a:	fb04 2303 	mla	r3, r4, r3, r2
 802030e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020310:	18d5      	adds	r5, r2, r3
 8020312:	5cd3      	ldrb	r3, [r2, r3]
 8020314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802031a:	0e1e      	lsrs	r6, r3, #24
 802031c:	2900      	cmp	r1, #0
 802031e:	f000 811b 	beq.w	8020558 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 8020322:	786a      	ldrb	r2, [r5, #1]
 8020324:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020326:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802032a:	9210      	str	r2, [sp, #64]	; 0x40
 802032c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8020330:	2800      	cmp	r0, #0
 8020332:	f000 811c 	beq.w	802056e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 8020336:	192a      	adds	r2, r5, r4
 8020338:	5d2d      	ldrb	r5, [r5, r4]
 802033a:	7852      	ldrb	r2, [r2, #1]
 802033c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8020340:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8020344:	950c      	str	r5, [sp, #48]	; 0x30
 8020346:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802034a:	0e15      	lsrs	r5, r2, #24
 802034c:	9211      	str	r2, [sp, #68]	; 0x44
 802034e:	b289      	uxth	r1, r1
 8020350:	b280      	uxth	r0, r0
 8020352:	fb01 fa00 	mul.w	sl, r1, r0
 8020356:	0109      	lsls	r1, r1, #4
 8020358:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802035c:	eba1 080a 	sub.w	r8, r1, sl
 8020360:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020364:	b280      	uxth	r0, r0
 8020366:	fa1f f888 	uxth.w	r8, r8
 802036a:	1a12      	subs	r2, r2, r0
 802036c:	fb08 f10c 	mul.w	r1, r8, ip
 8020370:	b292      	uxth	r2, r2
 8020372:	fb02 1106 	mla	r1, r2, r6, r1
 8020376:	fb00 1109 	mla	r1, r0, r9, r1
 802037a:	fb0a 1105 	mla	r1, sl, r5, r1
 802037e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020382:	2900      	cmp	r1, #0
 8020384:	f000 80da 	beq.w	802053c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8020388:	2eff      	cmp	r6, #255	; 0xff
 802038a:	d016      	beq.n	80203ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 802038c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020390:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020394:	4377      	muls	r7, r6
 8020396:	435e      	muls	r6, r3
 8020398:	0a3b      	lsrs	r3, r7, #8
 802039a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802039e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80203a2:	443b      	add	r3, r7
 80203a4:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80203a8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80203ac:	0a1b      	lsrs	r3, r3, #8
 80203ae:	0a3f      	lsrs	r7, r7, #8
 80203b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80203b4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80203b8:	433b      	orrs	r3, r7
 80203ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80203be:	d01d      	beq.n	80203fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 80203c0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80203c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80203c4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80203c8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80203cc:	fb0c f606 	mul.w	r6, ip, r6
 80203d0:	fb0c fc07 	mul.w	ip, ip, r7
 80203d4:	0a37      	lsrs	r7, r6, #8
 80203d6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80203da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80203de:	4437      	add	r7, r6
 80203e0:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80203e4:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80203e8:	0a3f      	lsrs	r7, r7, #8
 80203ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80203f2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80203f6:	ea47 060c 	orr.w	r6, r7, ip
 80203fa:	9610      	str	r6, [sp, #64]	; 0x40
 80203fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020400:	d01d      	beq.n	802043e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8020402:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020404:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020408:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802040c:	fb09 fc0c 	mul.w	ip, r9, ip
 8020410:	fb09 f906 	mul.w	r9, r9, r6
 8020414:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020418:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802041c:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8020420:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020424:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020428:	4467      	add	r7, ip
 802042a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802042e:	0a3f      	lsrs	r7, r7, #8
 8020430:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020434:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020438:	ea47 0609 	orr.w	r6, r7, r9
 802043c:	960c      	str	r6, [sp, #48]	; 0x30
 802043e:	2dff      	cmp	r5, #255	; 0xff
 8020440:	d01a      	beq.n	8020478 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 8020442:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8020444:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020448:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802044c:	fb05 fc0c 	mul.w	ip, r5, ip
 8020450:	4375      	muls	r5, r6
 8020452:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020456:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802045a:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802045e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020462:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8020466:	4467      	add	r7, ip
 8020468:	0a2d      	lsrs	r5, r5, #8
 802046a:	0a3f      	lsrs	r7, r7, #8
 802046c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020470:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020474:	433d      	orrs	r5, r7
 8020476:	9511      	str	r5, [sp, #68]	; 0x44
 8020478:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802047a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802047e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020482:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020486:	fb08 f505 	mul.w	r5, r8, r5
 802048a:	fb02 5506 	mla	r5, r2, r6, r5
 802048e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020490:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020494:	fb00 5506 	mla	r5, r0, r6, r5
 8020498:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802049a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802049e:	fb0a 5506 	mla	r5, sl, r6, r5
 80204a2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80204a4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80204a8:	0a2d      	lsrs	r5, r5, #8
 80204aa:	fb08 f806 	mul.w	r8, r8, r6
 80204ae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80204b2:	fb02 8303 	mla	r3, r2, r3, r8
 80204b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80204b8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80204bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80204be:	fb00 3307 	mla	r3, r0, r7, r3
 80204c2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80204c6:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80204ca:	fb01 f30b 	mul.w	r3, r1, fp
 80204ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204d2:	1c59      	adds	r1, r3, #1
 80204d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80204d8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80204dc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80204e0:	ea45 050c 	orr.w	r5, r5, ip
 80204e4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80204e8:	b2ea      	uxtb	r2, r5
 80204ea:	b2c9      	uxtb	r1, r1
 80204ec:	fb12 f20b 	smulbb	r2, r2, fp
 80204f0:	fb03 2301 	mla	r3, r3, r1, r2
 80204f4:	b29b      	uxth	r3, r3
 80204f6:	1c5a      	adds	r2, r3, #1
 80204f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80204fc:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020500:	fb12 f201 	smulbb	r2, r2, r1
 8020504:	121b      	asrs	r3, r3, #8
 8020506:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802050a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802050e:	0c2d      	lsrs	r5, r5, #16
 8020510:	fb03 230b 	mla	r3, r3, fp, r2
 8020514:	b29b      	uxth	r3, r3
 8020516:	1c5a      	adds	r2, r3, #1
 8020518:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802051c:	121b      	asrs	r3, r3, #8
 802051e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020522:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020526:	fb13 f101 	smulbb	r1, r3, r1
 802052a:	fb05 150b 	mla	r5, r5, fp, r1
 802052e:	b2ad      	uxth	r5, r5
 8020530:	1c69      	adds	r1, r5, #1
 8020532:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8020536:	122d      	asrs	r5, r5, #8
 8020538:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802053c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802053e:	f10e 0e03 	add.w	lr, lr, #3
 8020542:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020544:	4413      	add	r3, r2
 8020546:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020548:	932d      	str	r3, [sp, #180]	; 0xb4
 802054a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802054c:	4413      	add	r3, r2
 802054e:	932e      	str	r3, [sp, #184]	; 0xb8
 8020550:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020552:	3b01      	subs	r3, #1
 8020554:	9315      	str	r3, [sp, #84]	; 0x54
 8020556:	e4ed      	b.n	801ff34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8020558:	b160      	cbz	r0, 8020574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 802055a:	5d2a      	ldrb	r2, [r5, r4]
 802055c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802055e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020562:	25ff      	movs	r5, #255	; 0xff
 8020564:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020568:	920c      	str	r2, [sp, #48]	; 0x30
 802056a:	46ac      	mov	ip, r5
 802056c:	e6ef      	b.n	802034e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 802056e:	25ff      	movs	r5, #255	; 0xff
 8020570:	46a9      	mov	r9, r5
 8020572:	e6ec      	b.n	802034e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8020574:	25ff      	movs	r5, #255	; 0xff
 8020576:	46a9      	mov	r9, r5
 8020578:	e7f7      	b.n	802056a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 802057a:	b01b      	add	sp, #108	; 0x6c
 802057c:	ecbd 8b08 	vpop	{d8-d11}
 8020580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020584 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020588:	b085      	sub	sp, #20
 802058a:	7888      	ldrb	r0, [r1, #2]
 802058c:	4692      	mov	sl, r2
 802058e:	4698      	mov	r8, r3
 8020590:	9000      	str	r0, [sp, #0]
 8020592:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020596:	7848      	ldrb	r0, [r1, #1]
 8020598:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802059c:	9001      	str	r0, [sp, #4]
 802059e:	7808      	ldrb	r0, [r1, #0]
 80205a0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80205a4:	9002      	str	r0, [sp, #8]
 80205a6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80205aa:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80205ae:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80205b2:	fb04 560c 	mla	r6, r4, ip, r5
 80205b6:	2c00      	cmp	r4, #0
 80205b8:	eb02 0e06 	add.w	lr, r2, r6
 80205bc:	9a00      	ldr	r2, [sp, #0]
 80205be:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80205c2:	9a01      	ldr	r2, [sp, #4]
 80205c4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80205c8:	db3e      	blt.n	8020648 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 80205ca:	45a1      	cmp	r9, r4
 80205cc:	dd3c      	ble.n	8020648 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 80205ce:	2d00      	cmp	r5, #0
 80205d0:	db38      	blt.n	8020644 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 80205d2:	45ac      	cmp	ip, r5
 80205d4:	dd36      	ble.n	8020644 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 80205d6:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80205da:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80205de:	1c6e      	adds	r6, r5, #1
 80205e0:	d435      	bmi.n	802064e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80205e2:	45b4      	cmp	ip, r6
 80205e4:	dd33      	ble.n	802064e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80205e6:	b393      	cbz	r3, 802064e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80205e8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80205ec:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 80205f0:	3401      	adds	r4, #1
 80205f2:	d430      	bmi.n	8020656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80205f4:	45a1      	cmp	r9, r4
 80205f6:	dd2e      	ble.n	8020656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80205f8:	b36f      	cbz	r7, 8020656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80205fa:	2d00      	cmp	r5, #0
 80205fc:	db29      	blt.n	8020652 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 80205fe:	45ac      	cmp	ip, r5
 8020600:	dd27      	ble.n	8020652 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8020602:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020606:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802060a:	3501      	adds	r5, #1
 802060c:	d407      	bmi.n	802061e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802060e:	45ac      	cmp	ip, r5
 8020610:	dd05      	ble.n	802061e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020612:	b123      	cbz	r3, 802061e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8020614:	44f4      	add	ip, lr
 8020616:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802061a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 802061e:	2b0f      	cmp	r3, #15
 8020620:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020624:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020628:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802062c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020630:	d801      	bhi.n	8020636 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8020632:	2f0f      	cmp	r7, #15
 8020634:	d911      	bls.n	802065a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8020636:	4b76      	ldr	r3, [pc, #472]	; (8020810 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8020638:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802063c:	4a75      	ldr	r2, [pc, #468]	; (8020814 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 802063e:	4876      	ldr	r0, [pc, #472]	; (8020818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8020640:	f004 ff94 	bl	802556c <__assert_func>
 8020644:	4602      	mov	r2, r0
 8020646:	e7ca      	b.n	80205de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8020648:	4606      	mov	r6, r0
 802064a:	4602      	mov	r2, r0
 802064c:	e7d0      	b.n	80205f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 802064e:	4606      	mov	r6, r0
 8020650:	e7ce      	b.n	80205f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8020652:	4604      	mov	r4, r0
 8020654:	e7d9      	b.n	802060a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 8020656:	4604      	mov	r4, r0
 8020658:	e7e1      	b.n	802061e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802065a:	b29b      	uxth	r3, r3
 802065c:	b2bf      	uxth	r7, r7
 802065e:	fb07 fe03 	mul.w	lr, r7, r3
 8020662:	011b      	lsls	r3, r3, #4
 8020664:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020668:	eba3 0c0e 	sub.w	ip, r3, lr
 802066c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8020670:	b2bf      	uxth	r7, r7
 8020672:	fa1f fc8c 	uxth.w	ip, ip
 8020676:	1bed      	subs	r5, r5, r7
 8020678:	fb0c f30a 	mul.w	r3, ip, sl
 802067c:	b2ad      	uxth	r5, r5
 802067e:	fb05 330b 	mla	r3, r5, fp, r3
 8020682:	fb07 3309 	mla	r3, r7, r9, r3
 8020686:	fb0e 3308 	mla	r3, lr, r8, r3
 802068a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802068e:	9303      	str	r3, [sp, #12]
 8020690:	2b00      	cmp	r3, #0
 8020692:	f000 80b9 	beq.w	8020808 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8020696:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802069a:	d018      	beq.n	80206ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 802069c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80206a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80206a4:	fb0b f303 	mul.w	r3, fp, r3
 80206a8:	fb0b fb02 	mul.w	fp, fp, r2
 80206ac:	0a1a      	lsrs	r2, r3, #8
 80206ae:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80206b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80206b6:	441a      	add	r2, r3
 80206b8:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80206bc:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80206c0:	0a12      	lsrs	r2, r2, #8
 80206c2:	0a1b      	lsrs	r3, r3, #8
 80206c4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80206c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80206cc:	431a      	orrs	r2, r3
 80206ce:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80206d2:	d019      	beq.n	8020708 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 80206d4:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80206d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80206dc:	fb0a fb0b 	mul.w	fp, sl, fp
 80206e0:	fb0a fa06 	mul.w	sl, sl, r6
 80206e4:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80206e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80206ec:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80206f0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80206f4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80206f8:	445e      	add	r6, fp
 80206fa:	0a1b      	lsrs	r3, r3, #8
 80206fc:	0a36      	lsrs	r6, r6, #8
 80206fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020702:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020706:	431e      	orrs	r6, r3
 8020708:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802070c:	d019      	beq.n	8020742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 802070e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020712:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020716:	fb09 fa0a 	mul.w	sl, r9, sl
 802071a:	fb09 f904 	mul.w	r9, r9, r4
 802071e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020722:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020726:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802072a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802072e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8020732:	4454      	add	r4, sl
 8020734:	0a1b      	lsrs	r3, r3, #8
 8020736:	0a24      	lsrs	r4, r4, #8
 8020738:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802073c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020740:	431c      	orrs	r4, r3
 8020742:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020746:	d019      	beq.n	802077c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8020748:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 802074c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020750:	fb08 f909 	mul.w	r9, r8, r9
 8020754:	fb08 f800 	mul.w	r8, r8, r0
 8020758:	ea4f 2019 	mov.w	r0, r9, lsr #8
 802075c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020760:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8020764:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020768:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 802076c:	4448      	add	r0, r9
 802076e:	0a1b      	lsrs	r3, r3, #8
 8020770:	0a00      	lsrs	r0, r0, #8
 8020772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020776:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802077a:	4318      	orrs	r0, r3
 802077c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020780:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020784:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020788:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802078c:	fb0c f808 	mul.w	r8, ip, r8
 8020790:	fb0c f606 	mul.w	r6, ip, r6
 8020794:	fb05 8803 	mla	r8, r5, r3, r8
 8020798:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802079c:	fb05 6202 	mla	r2, r5, r2, r6
 80207a0:	fb07 8803 	mla	r8, r7, r3, r8
 80207a4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80207a8:	fb0e 8303 	mla	r3, lr, r3, r8
 80207ac:	0a1b      	lsrs	r3, r3, #8
 80207ae:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80207b2:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80207b6:	9c02      	ldr	r4, [sp, #8]
 80207b8:	fb07 2703 	mla	r7, r7, r3, r2
 80207bc:	9a03      	ldr	r2, [sp, #12]
 80207be:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80207c2:	43d2      	mvns	r2, r2
 80207c4:	fb0e 7303 	mla	r3, lr, r3, r7
 80207c8:	b2d2      	uxtb	r2, r2
 80207ca:	0a1b      	lsrs	r3, r3, #8
 80207cc:	4354      	muls	r4, r2
 80207ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80207d2:	1c60      	adds	r0, r4, #1
 80207d4:	ea48 0303 	orr.w	r3, r8, r3
 80207d8:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80207dc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80207e0:	7008      	strb	r0, [r1, #0]
 80207e2:	9801      	ldr	r0, [sp, #4]
 80207e4:	4350      	muls	r0, r2
 80207e6:	1c44      	adds	r4, r0, #1
 80207e8:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 80207ec:	0a18      	lsrs	r0, r3, #8
 80207ee:	0c1b      	lsrs	r3, r3, #16
 80207f0:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80207f4:	7048      	strb	r0, [r1, #1]
 80207f6:	9800      	ldr	r0, [sp, #0]
 80207f8:	4350      	muls	r0, r2
 80207fa:	4602      	mov	r2, r0
 80207fc:	3001      	adds	r0, #1
 80207fe:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020802:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020806:	708b      	strb	r3, [r1, #2]
 8020808:	b005      	add	sp, #20
 802080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802080e:	bf00      	nop
 8020810:	0802acdd 	.word	0x0802acdd
 8020814:	0802b1d6 	.word	0x0802b1d6
 8020818:	0802ada6 	.word	0x0802ada6

0802081c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802081c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020820:	ed2d 8b08 	vpush	{d8-d11}
 8020824:	b097      	sub	sp, #92	; 0x5c
 8020826:	eeb0 aa40 	vmov.f32	s20, s0
 802082a:	eef0 9a60 	vmov.f32	s19, s1
 802082e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8020830:	eeb0 9a41 	vmov.f32	s18, s2
 8020834:	9308      	str	r3, [sp, #32]
 8020836:	eeb0 8a62 	vmov.f32	s16, s5
 802083a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802083e:	eef0 8a43 	vmov.f32	s17, s6
 8020842:	9015      	str	r0, [sp, #84]	; 0x54
 8020844:	eef0 ba44 	vmov.f32	s23, s8
 8020848:	6868      	ldr	r0, [r5, #4]
 802084a:	eeb0 ba64 	vmov.f32	s22, s9
 802084e:	9112      	str	r1, [sp, #72]	; 0x48
 8020850:	eef0 aa45 	vmov.f32	s21, s10
 8020854:	9310      	str	r3, [sp, #64]	; 0x40
 8020856:	9214      	str	r2, [sp, #80]	; 0x50
 8020858:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 802085a:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 802085e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020862:	fb00 1303 	mla	r3, r0, r3, r1
 8020866:	6829      	ldr	r1, [r5, #0]
 8020868:	6855      	ldr	r5, [r2, #4]
 802086a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802086e:	3504      	adds	r5, #4
 8020870:	18cb      	adds	r3, r1, r3
 8020872:	930b      	str	r3, [sp, #44]	; 0x2c
 8020874:	6813      	ldr	r3, [r2, #0]
 8020876:	9311      	str	r3, [sp, #68]	; 0x44
 8020878:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802087a:	2b00      	cmp	r3, #0
 802087c:	dc03      	bgt.n	8020886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802087e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020880:	2b00      	cmp	r3, #0
 8020882:	f340 8333 	ble.w	8020eec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020886:	9b08      	ldr	r3, [sp, #32]
 8020888:	2b00      	cmp	r3, #0
 802088a:	f340 8190 	ble.w	8020bae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802088e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020890:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020892:	1412      	asrs	r2, r2, #16
 8020894:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020898:	d42f      	bmi.n	80208fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802089a:	1c51      	adds	r1, r2, #1
 802089c:	428c      	cmp	r4, r1
 802089e:	dd2f      	ble.n	8020900 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80208a0:	2b00      	cmp	r3, #0
 80208a2:	db2d      	blt.n	8020900 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80208a4:	1c59      	adds	r1, r3, #1
 80208a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80208a8:	4288      	cmp	r0, r1
 80208aa:	dd29      	ble.n	8020900 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80208ac:	9b08      	ldr	r3, [sp, #32]
 80208ae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80208b0:	3b01      	subs	r3, #1
 80208b2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80208b4:	fb02 1203 	mla	r2, r2, r3, r1
 80208b8:	1412      	asrs	r2, r2, #16
 80208ba:	d42b      	bmi.n	8020914 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80208bc:	3201      	adds	r2, #1
 80208be:	4294      	cmp	r4, r2
 80208c0:	dd28      	ble.n	8020914 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80208c2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80208c4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80208c6:	fb02 1303 	mla	r3, r2, r3, r1
 80208ca:	141b      	asrs	r3, r3, #16
 80208cc:	d422      	bmi.n	8020914 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80208ce:	3301      	adds	r3, #1
 80208d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80208d2:	429a      	cmp	r2, r3
 80208d4:	dd1e      	ble.n	8020914 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80208d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80208d8:	f103 0803 	add.w	r8, r3, #3
 80208dc:	9b08      	ldr	r3, [sp, #32]
 80208de:	9307      	str	r3, [sp, #28]
 80208e0:	9b07      	ldr	r3, [sp, #28]
 80208e2:	2b00      	cmp	r3, #0
 80208e4:	f300 81ca 	bgt.w	8020c7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 80208e8:	9b08      	ldr	r3, [sp, #32]
 80208ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80208ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80208f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208f4:	441a      	add	r2, r3
 80208f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80208f8:	e15b      	b.n	8020bb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 80208fa:	1c51      	adds	r1, r2, #1
 80208fc:	f040 8148 	bne.w	8020b90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020900:	42a2      	cmp	r2, r4
 8020902:	f280 8145 	bge.w	8020b90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020906:	1c5a      	adds	r2, r3, #1
 8020908:	f2c0 8142 	blt.w	8020b90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802090c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802090e:	4293      	cmp	r3, r2
 8020910:	f280 813e 	bge.w	8020b90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020914:	9b08      	ldr	r3, [sp, #32]
 8020916:	9313      	str	r3, [sp, #76]	; 0x4c
 8020918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802091a:	9307      	str	r3, [sp, #28]
 802091c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802091e:	2b00      	cmp	r3, #0
 8020920:	dde2      	ble.n	80208e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8020922:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020924:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020926:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802092a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802092c:	141b      	asrs	r3, r3, #16
 802092e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020932:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020934:	1412      	asrs	r2, r2, #16
 8020936:	f100 818b 	bmi.w	8020c50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 802093a:	1c56      	adds	r6, r2, #1
 802093c:	42b4      	cmp	r4, r6
 802093e:	f340 8189 	ble.w	8020c54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020942:	2b00      	cmp	r3, #0
 8020944:	f2c0 8186 	blt.w	8020c54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020948:	1c5e      	adds	r6, r3, #1
 802094a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802094c:	42b7      	cmp	r7, r6
 802094e:	f340 8181 	ble.w	8020c54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020952:	fb03 2304 	mla	r3, r3, r4, r2
 8020956:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020958:	18d6      	adds	r6, r2, r3
 802095a:	5cd3      	ldrb	r3, [r2, r3]
 802095c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020960:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020964:	2900      	cmp	r1, #0
 8020966:	f000 8163 	beq.w	8020c30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802096a:	7872      	ldrb	r2, [r6, #1]
 802096c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020970:	920c      	str	r2, [sp, #48]	; 0x30
 8020972:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020976:	2800      	cmp	r0, #0
 8020978:	f000 8164 	beq.w	8020c44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 802097c:	1932      	adds	r2, r6, r4
 802097e:	5d36      	ldrb	r6, [r6, r4]
 8020980:	7852      	ldrb	r2, [r2, #1]
 8020982:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020986:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802098a:	9609      	str	r6, [sp, #36]	; 0x24
 802098c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020990:	0e16      	lsrs	r6, r2, #24
 8020992:	920d      	str	r2, [sp, #52]	; 0x34
 8020994:	b289      	uxth	r1, r1
 8020996:	b280      	uxth	r0, r0
 8020998:	fb01 fb00 	mul.w	fp, r1, r0
 802099c:	0109      	lsls	r1, r1, #4
 802099e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80209a2:	eba1 090b 	sub.w	r9, r1, fp
 80209a6:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80209aa:	b280      	uxth	r0, r0
 80209ac:	fa1f f989 	uxth.w	r9, r9
 80209b0:	1a12      	subs	r2, r2, r0
 80209b2:	fb09 f108 	mul.w	r1, r9, r8
 80209b6:	b292      	uxth	r2, r2
 80209b8:	fb02 110c 	mla	r1, r2, ip, r1
 80209bc:	fb00 110a 	mla	r1, r0, sl, r1
 80209c0:	fb0b 1106 	mla	r1, fp, r6, r1
 80209c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80209c8:	2900      	cmp	r1, #0
 80209ca:	f000 80d2 	beq.w	8020b72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80209ce:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80209d2:	d01b      	beq.n	8020a0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 80209d4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80209d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80209dc:	fb0c fe0e 	mul.w	lr, ip, lr
 80209e0:	fb0c fc03 	mul.w	ip, ip, r3
 80209e4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80209e8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80209ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80209f0:	4473      	add	r3, lr
 80209f2:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80209f6:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80209fa:	0a1b      	lsrs	r3, r3, #8
 80209fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020a04:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020a08:	ea43 030e 	orr.w	r3, r3, lr
 8020a0c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020a10:	d01e      	beq.n	8020a50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8020a12:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020a14:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020a18:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020a1c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020a20:	fb08 f80e 	mul.w	r8, r8, lr
 8020a24:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020a28:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020a2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a30:	44e6      	add	lr, ip
 8020a32:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020a36:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020a3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a3e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020a42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a46:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020a4a:	ea4e 0708 	orr.w	r7, lr, r8
 8020a4e:	970c      	str	r7, [sp, #48]	; 0x30
 8020a50:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020a54:	d01e      	beq.n	8020a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020a56:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020a58:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020a5c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020a60:	fb0a f808 	mul.w	r8, sl, r8
 8020a64:	fb0a fa0c 	mul.w	sl, sl, ip
 8020a68:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020a6c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020a70:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020a74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a78:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a7c:	44c6      	add	lr, r8
 8020a7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a8e:	ea4e 070a 	orr.w	r7, lr, sl
 8020a92:	9709      	str	r7, [sp, #36]	; 0x24
 8020a94:	2eff      	cmp	r6, #255	; 0xff
 8020a96:	d01d      	beq.n	8020ad4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020a98:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020a9a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020a9e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020aa2:	fb06 f808 	mul.w	r8, r6, r8
 8020aa6:	fb06 f60c 	mul.w	r6, r6, ip
 8020aaa:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020aae:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020ab2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020ab6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020aba:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020abe:	44c6      	add	lr, r8
 8020ac0:	0a36      	lsrs	r6, r6, #8
 8020ac2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ac6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020aca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ace:	ea4e 0606 	orr.w	r6, lr, r6
 8020ad2:	960d      	str	r6, [sp, #52]	; 0x34
 8020ad4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020ad6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020ada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020adc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ae0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020ae4:	43c9      	mvns	r1, r1
 8020ae6:	fb09 f606 	mul.w	r6, r9, r6
 8020aea:	b2c9      	uxtb	r1, r1
 8020aec:	fb02 660c 	mla	r6, r2, ip, r6
 8020af0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020af4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020af6:	fb00 660c 	mla	r6, r0, ip, r6
 8020afa:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020afe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020b00:	fb0b 660c 	mla	r6, fp, ip, r6
 8020b04:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020b08:	fb09 f90c 	mul.w	r9, r9, ip
 8020b0c:	0a36      	lsrs	r6, r6, #8
 8020b0e:	fb02 9303 	mla	r3, r2, r3, r9
 8020b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b14:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020b18:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020b1e:	fb00 330e 	mla	r3, r0, lr, r3
 8020b22:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020b26:	fb0b 3b00 	mla	fp, fp, r0, r3
 8020b2a:	9b07      	ldr	r3, [sp, #28]
 8020b2c:	781b      	ldrb	r3, [r3, #0]
 8020b2e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020b32:	fb03 f201 	mul.w	r2, r3, r1
 8020b36:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020b3a:	1c53      	adds	r3, r2, #1
 8020b3c:	ea46 060b 	orr.w	r6, r6, fp
 8020b40:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020b44:	9a07      	ldr	r2, [sp, #28]
 8020b46:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020b4a:	7013      	strb	r3, [r2, #0]
 8020b4c:	7853      	ldrb	r3, [r2, #1]
 8020b4e:	434b      	muls	r3, r1
 8020b50:	1c5a      	adds	r2, r3, #1
 8020b52:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020b56:	0a33      	lsrs	r3, r6, #8
 8020b58:	0c36      	lsrs	r6, r6, #16
 8020b5a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020b5e:	9a07      	ldr	r2, [sp, #28]
 8020b60:	7053      	strb	r3, [r2, #1]
 8020b62:	7893      	ldrb	r3, [r2, #2]
 8020b64:	4359      	muls	r1, r3
 8020b66:	1c4b      	adds	r3, r1, #1
 8020b68:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020b6c:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8020b70:	7096      	strb	r6, [r2, #2]
 8020b72:	9b07      	ldr	r3, [sp, #28]
 8020b74:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020b76:	3303      	adds	r3, #3
 8020b78:	9307      	str	r3, [sp, #28]
 8020b7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020b7c:	4413      	add	r3, r2
 8020b7e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020b80:	9329      	str	r3, [sp, #164]	; 0xa4
 8020b82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020b84:	4413      	add	r3, r2
 8020b86:	932a      	str	r3, [sp, #168]	; 0xa8
 8020b88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020b8a:	3b01      	subs	r3, #1
 8020b8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8020b8e:	e6c5      	b.n	802091c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020b90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020b92:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020b94:	4413      	add	r3, r2
 8020b96:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020b98:	9329      	str	r3, [sp, #164]	; 0xa4
 8020b9a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020b9c:	4413      	add	r3, r2
 8020b9e:	932a      	str	r3, [sp, #168]	; 0xa8
 8020ba0:	9b08      	ldr	r3, [sp, #32]
 8020ba2:	3b01      	subs	r3, #1
 8020ba4:	9308      	str	r3, [sp, #32]
 8020ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ba8:	3303      	adds	r3, #3
 8020baa:	930b      	str	r3, [sp, #44]	; 0x2c
 8020bac:	e66b      	b.n	8020886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020bae:	f47f ae7d 	bne.w	80208ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8020bb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	f340 8199 	ble.w	8020eec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020bbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020bc0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020bc4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020bc8:	eef0 6a48 	vmov.f32	s13, s16
 8020bcc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020bd0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020bd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020bd8:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020bdc:	eef0 6a68 	vmov.f32	s13, s17
 8020be0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020be4:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020be8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020bec:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020bf0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020bf4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020bf8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020bfc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020c00:	ee18 2a10 	vmov	r2, s16
 8020c04:	eeb0 8a47 	vmov.f32	s16, s14
 8020c08:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c0c:	ee18 2a90 	vmov	r2, s17
 8020c10:	932b      	str	r3, [sp, #172]	; 0xac
 8020c12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c14:	eef0 8a67 	vmov.f32	s17, s15
 8020c18:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c1c:	932c      	str	r3, [sp, #176]	; 0xb0
 8020c1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020c20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020c22:	3b01      	subs	r3, #1
 8020c24:	9312      	str	r3, [sp, #72]	; 0x48
 8020c26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c28:	bf08      	it	eq
 8020c2a:	4613      	moveq	r3, r2
 8020c2c:	9308      	str	r3, [sp, #32]
 8020c2e:	e623      	b.n	8020878 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020c30:	b158      	cbz	r0, 8020c4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020c32:	5d32      	ldrb	r2, [r6, r4]
 8020c34:	26ff      	movs	r6, #255	; 0xff
 8020c36:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020c3a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8020c40:	46b0      	mov	r8, r6
 8020c42:	e6a7      	b.n	8020994 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020c44:	26ff      	movs	r6, #255	; 0xff
 8020c46:	46b2      	mov	sl, r6
 8020c48:	e6a4      	b.n	8020994 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020c4a:	26ff      	movs	r6, #255	; 0xff
 8020c4c:	46b2      	mov	sl, r6
 8020c4e:	e7f7      	b.n	8020c40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8020c50:	1c57      	adds	r7, r2, #1
 8020c52:	d18e      	bne.n	8020b72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020c54:	4294      	cmp	r4, r2
 8020c56:	dd8c      	ble.n	8020b72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020c58:	1c5e      	adds	r6, r3, #1
 8020c5a:	db8a      	blt.n	8020b72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020c5c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020c5e:	429e      	cmp	r6, r3
 8020c60:	dd87      	ble.n	8020b72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020c62:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8020c66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020c6a:	e9cd 4600 	strd	r4, r6, [sp]
 8020c6e:	462b      	mov	r3, r5
 8020c70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020c72:	9907      	ldr	r1, [sp, #28]
 8020c74:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020c76:	f7ff fc85 	bl	8020584 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020c7a:	e77a      	b.n	8020b72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020c7c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020c7e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020c80:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020c84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c86:	1409      	asrs	r1, r1, #16
 8020c88:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020c8c:	141b      	asrs	r3, r3, #16
 8020c8e:	fb04 1303 	mla	r3, r4, r3, r1
 8020c92:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020c94:	18ce      	adds	r6, r1, r3
 8020c96:	5ccb      	ldrb	r3, [r1, r3]
 8020c98:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020c9c:	0e1f      	lsrs	r7, r3, #24
 8020c9e:	2a00      	cmp	r2, #0
 8020ca0:	f000 8114 	beq.w	8020ecc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020ca4:	7871      	ldrb	r1, [r6, #1]
 8020ca6:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020caa:	910e      	str	r1, [sp, #56]	; 0x38
 8020cac:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020cb0:	2800      	cmp	r0, #0
 8020cb2:	f000 8115 	beq.w	8020ee0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8020cb6:	1931      	adds	r1, r6, r4
 8020cb8:	5d36      	ldrb	r6, [r6, r4]
 8020cba:	7849      	ldrb	r1, [r1, #1]
 8020cbc:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020cc0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020cc4:	960a      	str	r6, [sp, #40]	; 0x28
 8020cc6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020cca:	0e0e      	lsrs	r6, r1, #24
 8020ccc:	910f      	str	r1, [sp, #60]	; 0x3c
 8020cce:	b292      	uxth	r2, r2
 8020cd0:	b280      	uxth	r0, r0
 8020cd2:	fb02 fb00 	mul.w	fp, r2, r0
 8020cd6:	0112      	lsls	r2, r2, #4
 8020cd8:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020cdc:	eba2 090b 	sub.w	r9, r2, fp
 8020ce0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020ce4:	b280      	uxth	r0, r0
 8020ce6:	fa1f f989 	uxth.w	r9, r9
 8020cea:	1a09      	subs	r1, r1, r0
 8020cec:	fb09 f20e 	mul.w	r2, r9, lr
 8020cf0:	b289      	uxth	r1, r1
 8020cf2:	fb01 2207 	mla	r2, r1, r7, r2
 8020cf6:	fb00 220a 	mla	r2, r0, sl, r2
 8020cfa:	fb0b 2206 	mla	r2, fp, r6, r2
 8020cfe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020d02:	9213      	str	r2, [sp, #76]	; 0x4c
 8020d04:	2a00      	cmp	r2, #0
 8020d06:	f000 80d4 	beq.w	8020eb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8020d0a:	2fff      	cmp	r7, #255	; 0xff
 8020d0c:	d01a      	beq.n	8020d44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8020d0e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020d12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d16:	fb07 fc0c 	mul.w	ip, r7, ip
 8020d1a:	435f      	muls	r7, r3
 8020d1c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020d20:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020d24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d28:	4463      	add	r3, ip
 8020d2a:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8020d2e:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8020d32:	0a1b      	lsrs	r3, r3, #8
 8020d34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d3c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020d40:	ea43 030c 	orr.w	r3, r3, ip
 8020d44:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020d48:	d01f      	beq.n	8020d8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8020d4a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020d4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020d4e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020d52:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020d56:	fb0e f707 	mul.w	r7, lr, r7
 8020d5a:	fb0e fe0c 	mul.w	lr, lr, ip
 8020d5e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d62:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d6a:	44bc      	add	ip, r7
 8020d6c:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8020d70:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020d74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d78:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020d7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d80:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020d84:	ea4c 020e 	orr.w	r2, ip, lr
 8020d88:	920e      	str	r2, [sp, #56]	; 0x38
 8020d8a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020d8e:	d01e      	beq.n	8020dce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8020d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020d92:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020d96:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020d9a:	fb0a fe0e 	mul.w	lr, sl, lr
 8020d9e:	fb0a fa07 	mul.w	sl, sl, r7
 8020da2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020da6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020daa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020dae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020db2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020db6:	44f4      	add	ip, lr
 8020db8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020dbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020dc0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020dc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dc8:	ea4c 020a 	orr.w	r2, ip, sl
 8020dcc:	920a      	str	r2, [sp, #40]	; 0x28
 8020dce:	2eff      	cmp	r6, #255	; 0xff
 8020dd0:	d01c      	beq.n	8020e0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8020dd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020dd4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020dd8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020ddc:	fb06 fe0e 	mul.w	lr, r6, lr
 8020de0:	437e      	muls	r6, r7
 8020de2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020de6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020dea:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020dee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020df2:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020df6:	44f4      	add	ip, lr
 8020df8:	0a36      	lsrs	r6, r6, #8
 8020dfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020dfe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020e02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e06:	ea4c 0206 	orr.w	r2, ip, r6
 8020e0a:	920f      	str	r2, [sp, #60]	; 0x3c
 8020e0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020e0e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020e12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e16:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020e1c:	fb09 f606 	mul.w	r6, r9, r6
 8020e20:	fb01 6607 	mla	r6, r1, r7, r6
 8020e24:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e2a:	fb00 6607 	mla	r6, r0, r7, r6
 8020e2e:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020e34:	fb0b 6607 	mla	r6, fp, r7, r6
 8020e38:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020e3e:	fb09 f907 	mul.w	r9, r9, r7
 8020e42:	0a36      	lsrs	r6, r6, #8
 8020e44:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e4a:	fb01 9303 	mla	r3, r1, r3, r9
 8020e4e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020e52:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020e56:	fb00 330c 	mla	r3, r0, ip, r3
 8020e5a:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8020e5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020e60:	43da      	mvns	r2, r3
 8020e62:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8020e66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020e6a:	b2d2      	uxtb	r2, r2
 8020e6c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020e70:	fb03 f102 	mul.w	r1, r3, r2
 8020e74:	ea46 060e 	orr.w	r6, r6, lr
 8020e78:	1c4b      	adds	r3, r1, #1
 8020e7a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020e7e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020e82:	f808 3c03 	strb.w	r3, [r8, #-3]
 8020e86:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8020e8a:	4353      	muls	r3, r2
 8020e8c:	1c59      	adds	r1, r3, #1
 8020e8e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020e92:	0a33      	lsrs	r3, r6, #8
 8020e94:	0c36      	lsrs	r6, r6, #16
 8020e96:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020e9a:	f808 3c02 	strb.w	r3, [r8, #-2]
 8020e9e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8020ea2:	435a      	muls	r2, r3
 8020ea4:	1c53      	adds	r3, r2, #1
 8020ea6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020eaa:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8020eae:	f808 6c01 	strb.w	r6, [r8, #-1]
 8020eb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020eb4:	f108 0803 	add.w	r8, r8, #3
 8020eb8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020eba:	4413      	add	r3, r2
 8020ebc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020ebe:	9329      	str	r3, [sp, #164]	; 0xa4
 8020ec0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ec2:	4413      	add	r3, r2
 8020ec4:	932a      	str	r3, [sp, #168]	; 0xa8
 8020ec6:	9b07      	ldr	r3, [sp, #28]
 8020ec8:	3b01      	subs	r3, #1
 8020eca:	e508      	b.n	80208de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8020ecc:	b158      	cbz	r0, 8020ee6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8020ece:	5d31      	ldrb	r1, [r6, r4]
 8020ed0:	26ff      	movs	r6, #255	; 0xff
 8020ed2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020ed6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020eda:	910a      	str	r1, [sp, #40]	; 0x28
 8020edc:	46b6      	mov	lr, r6
 8020ede:	e6f6      	b.n	8020cce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8020ee0:	26ff      	movs	r6, #255	; 0xff
 8020ee2:	46b2      	mov	sl, r6
 8020ee4:	e6f3      	b.n	8020cce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8020ee6:	26ff      	movs	r6, #255	; 0xff
 8020ee8:	46b2      	mov	sl, r6
 8020eea:	e7f7      	b.n	8020edc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8020eec:	b017      	add	sp, #92	; 0x5c
 8020eee:	ecbd 8b08 	vpop	{d8-d11}
 8020ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020ef8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020efc:	b08d      	sub	sp, #52	; 0x34
 8020efe:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8020f02:	9103      	str	r1, [sp, #12]
 8020f04:	fb07 5803 	mla	r8, r7, r3, r5
 8020f08:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8020f0c:	9803      	ldr	r0, [sp, #12]
 8020f0e:	2f00      	cmp	r7, #0
 8020f10:	910b      	str	r1, [sp, #44]	; 0x2c
 8020f12:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020f16:	9903      	ldr	r1, [sp, #12]
 8020f18:	9c03      	ldr	r4, [sp, #12]
 8020f1a:	eb02 0608 	add.w	r6, r2, r8
 8020f1e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8020f22:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8020f26:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8020f2a:	7809      	ldrb	r1, [r1, #0]
 8020f2c:	7840      	ldrb	r0, [r0, #1]
 8020f2e:	78a4      	ldrb	r4, [r4, #2]
 8020f30:	db51      	blt.n	8020fd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8020f32:	45be      	cmp	lr, r7
 8020f34:	dd4f      	ble.n	8020fd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8020f36:	2d00      	cmp	r5, #0
 8020f38:	db49      	blt.n	8020fce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020f3a:	42ab      	cmp	r3, r5
 8020f3c:	dd47      	ble.n	8020fce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020f3e:	f812 2008 	ldrb.w	r2, [r2, r8]
 8020f42:	9204      	str	r2, [sp, #16]
 8020f44:	7872      	ldrb	r2, [r6, #1]
 8020f46:	9205      	str	r2, [sp, #20]
 8020f48:	78b2      	ldrb	r2, [r6, #2]
 8020f4a:	9206      	str	r2, [sp, #24]
 8020f4c:	1c6a      	adds	r2, r5, #1
 8020f4e:	d449      	bmi.n	8020fe4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020f50:	4293      	cmp	r3, r2
 8020f52:	dd47      	ble.n	8020fe4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020f54:	f1bc 0f00 	cmp.w	ip, #0
 8020f58:	d044      	beq.n	8020fe4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020f5a:	7972      	ldrb	r2, [r6, #5]
 8020f5c:	f896 b003 	ldrb.w	fp, [r6, #3]
 8020f60:	f896 a004 	ldrb.w	sl, [r6, #4]
 8020f64:	9201      	str	r2, [sp, #4]
 8020f66:	3701      	adds	r7, #1
 8020f68:	d444      	bmi.n	8020ff4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8020f6a:	45be      	cmp	lr, r7
 8020f6c:	dd42      	ble.n	8020ff4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8020f6e:	f1b9 0f00 	cmp.w	r9, #0
 8020f72:	f000 80c1 	beq.w	80210f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8020f76:	2d00      	cmp	r5, #0
 8020f78:	db38      	blt.n	8020fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020f7a:	42ab      	cmp	r3, r5
 8020f7c:	dd36      	ble.n	8020fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020f7e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020f82:	f816 8002 	ldrb.w	r8, [r6, r2]
 8020f86:	2203      	movs	r2, #3
 8020f88:	fb03 6702 	mla	r7, r3, r2, r6
 8020f8c:	fb03 6202 	mla	r2, r3, r2, r6
 8020f90:	787f      	ldrb	r7, [r7, #1]
 8020f92:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020f96:	9702      	str	r7, [sp, #8]
 8020f98:	3501      	adds	r5, #1
 8020f9a:	d432      	bmi.n	8021002 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020f9c:	42ab      	cmp	r3, r5
 8020f9e:	dd30      	ble.n	8021002 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020fa0:	f1bc 0f00 	cmp.w	ip, #0
 8020fa4:	d031      	beq.n	802100a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8020fa6:	2703      	movs	r7, #3
 8020fa8:	fb13 7207 	smlabb	r2, r3, r7, r7
 8020fac:	5cb5      	ldrb	r5, [r6, r2]
 8020fae:	fb03 6207 	mla	r2, r3, r7, r6
 8020fb2:	fb03 6307 	mla	r3, r3, r7, r6
 8020fb6:	7912      	ldrb	r2, [r2, #4]
 8020fb8:	795e      	ldrb	r6, [r3, #5]
 8020fba:	f1bc 0f0f 	cmp.w	ip, #15
 8020fbe:	d927      	bls.n	8021010 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8020fc0:	4b53      	ldr	r3, [pc, #332]	; (8021110 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8020fc2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020fc6:	4a53      	ldr	r2, [pc, #332]	; (8021114 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8020fc8:	4853      	ldr	r0, [pc, #332]	; (8021118 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8020fca:	f004 facf 	bl	802556c <__assert_func>
 8020fce:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020fd2:	9104      	str	r1, [sp, #16]
 8020fd4:	e7ba      	b.n	8020f4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8020fd6:	9401      	str	r4, [sp, #4]
 8020fd8:	4682      	mov	sl, r0
 8020fda:	468b      	mov	fp, r1
 8020fdc:	9104      	str	r1, [sp, #16]
 8020fde:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020fe2:	e7c0      	b.n	8020f66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020fe4:	9401      	str	r4, [sp, #4]
 8020fe6:	4682      	mov	sl, r0
 8020fe8:	468b      	mov	fp, r1
 8020fea:	e7bc      	b.n	8020f66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020fec:	46a6      	mov	lr, r4
 8020fee:	9002      	str	r0, [sp, #8]
 8020ff0:	4688      	mov	r8, r1
 8020ff2:	e7d1      	b.n	8020f98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8020ff4:	4626      	mov	r6, r4
 8020ff6:	4602      	mov	r2, r0
 8020ff8:	460d      	mov	r5, r1
 8020ffa:	46a6      	mov	lr, r4
 8020ffc:	9002      	str	r0, [sp, #8]
 8020ffe:	4688      	mov	r8, r1
 8021000:	e7db      	b.n	8020fba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8021002:	4626      	mov	r6, r4
 8021004:	4602      	mov	r2, r0
 8021006:	460d      	mov	r5, r1
 8021008:	e7d7      	b.n	8020fba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802100a:	4626      	mov	r6, r4
 802100c:	4602      	mov	r2, r0
 802100e:	460d      	mov	r5, r1
 8021010:	f1b9 0f0f 	cmp.w	r9, #15
 8021014:	d8d4      	bhi.n	8020fc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021016:	fa1f f38c 	uxth.w	r3, ip
 802101a:	fa1f fc89 	uxth.w	ip, r9
 802101e:	fb03 f70c 	mul.w	r7, r3, ip
 8021022:	011b      	lsls	r3, r3, #4
 8021024:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8021028:	9707      	str	r7, [sp, #28]
 802102a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802102e:	fa1f fc8c 	uxth.w	ip, ip
 8021032:	eba7 070c 	sub.w	r7, r7, ip
 8021036:	b2bf      	uxth	r7, r7
 8021038:	9709      	str	r7, [sp, #36]	; 0x24
 802103a:	9f07      	ldr	r7, [sp, #28]
 802103c:	1bdb      	subs	r3, r3, r7
 802103e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8021042:	b29b      	uxth	r3, r3
 8021044:	9708      	str	r7, [sp, #32]
 8021046:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021048:	930a      	str	r3, [sp, #40]	; 0x28
 802104a:	ea6f 0907 	mvn.w	r9, r7
 802104e:	fb03 fb0b 	mul.w	fp, r3, fp
 8021052:	9f04      	ldr	r7, [sp, #16]
 8021054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021056:	fa5f f989 	uxtb.w	r9, r9
 802105a:	fb03 bb07 	mla	fp, r3, r7, fp
 802105e:	9f07      	ldr	r7, [sp, #28]
 8021060:	fb11 f109 	smulbb	r1, r1, r9
 8021064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021066:	fb0c b808 	mla	r8, ip, r8, fp
 802106a:	fb10 f009 	smulbb	r0, r0, r9
 802106e:	fb14 f409 	smulbb	r4, r4, r9
 8021072:	fb07 8805 	mla	r8, r7, r5, r8
 8021076:	9d08      	ldr	r5, [sp, #32]
 8021078:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802107a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802107e:	fb08 1805 	mla	r8, r8, r5, r1
 8021082:	9d05      	ldr	r5, [sp, #20]
 8021084:	fa1f f888 	uxth.w	r8, r8
 8021088:	f108 0101 	add.w	r1, r8, #1
 802108c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021090:	9903      	ldr	r1, [sp, #12]
 8021092:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021096:	f881 8000 	strb.w	r8, [r1]
 802109a:	fb03 f10a 	mul.w	r1, r3, sl
 802109e:	fb07 1105 	mla	r1, r7, r5, r1
 80210a2:	9d02      	ldr	r5, [sp, #8]
 80210a4:	fb0c 1105 	mla	r1, ip, r5, r1
 80210a8:	9d07      	ldr	r5, [sp, #28]
 80210aa:	fb05 1102 	mla	r1, r5, r2, r1
 80210ae:	9a08      	ldr	r2, [sp, #32]
 80210b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80210b4:	fb01 0102 	mla	r1, r1, r2, r0
 80210b8:	9a03      	ldr	r2, [sp, #12]
 80210ba:	b289      	uxth	r1, r1
 80210bc:	1c48      	adds	r0, r1, #1
 80210be:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80210c2:	1209      	asrs	r1, r1, #8
 80210c4:	7051      	strb	r1, [r2, #1]
 80210c6:	9a01      	ldr	r2, [sp, #4]
 80210c8:	4353      	muls	r3, r2
 80210ca:	9a06      	ldr	r2, [sp, #24]
 80210cc:	fb07 3702 	mla	r7, r7, r2, r3
 80210d0:	9b08      	ldr	r3, [sp, #32]
 80210d2:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80210d6:	fb05 c606 	mla	r6, r5, r6, ip
 80210da:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80210de:	fb06 4603 	mla	r6, r6, r3, r4
 80210e2:	9b03      	ldr	r3, [sp, #12]
 80210e4:	b2b6      	uxth	r6, r6
 80210e6:	f106 0e01 	add.w	lr, r6, #1
 80210ea:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80210ee:	1236      	asrs	r6, r6, #8
 80210f0:	709e      	strb	r6, [r3, #2]
 80210f2:	b00d      	add	sp, #52	; 0x34
 80210f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210f8:	f1bc 0f0f 	cmp.w	ip, #15
 80210fc:	f63f af60 	bhi.w	8020fc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021100:	4626      	mov	r6, r4
 8021102:	4602      	mov	r2, r0
 8021104:	460d      	mov	r5, r1
 8021106:	46a6      	mov	lr, r4
 8021108:	9002      	str	r0, [sp, #8]
 802110a:	4688      	mov	r8, r1
 802110c:	e783      	b.n	8021016 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802110e:	bf00      	nop
 8021110:	0802acdd 	.word	0x0802acdd
 8021114:	0802b1d6 	.word	0x0802b1d6
 8021118:	0802ada6 	.word	0x0802ada6

0802111c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802111c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021120:	ed2d 8b08 	vpush	{d8-d11}
 8021124:	b0a1      	sub	sp, #132	; 0x84
 8021126:	eeb0 aa40 	vmov.f32	s20, s0
 802112a:	eef0 9a60 	vmov.f32	s19, s1
 802112e:	9307      	str	r3, [sp, #28]
 8021130:	eeb0 9a41 	vmov.f32	s18, s2
 8021134:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8021138:	eeb0 8a62 	vmov.f32	s16, s5
 802113c:	9210      	str	r2, [sp, #64]	; 0x40
 802113e:	eef0 8a43 	vmov.f32	s17, s6
 8021142:	9308      	str	r3, [sp, #32]
 8021144:	eef0 ba44 	vmov.f32	s23, s8
 8021148:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 802114c:	eeb0 ba64 	vmov.f32	s22, s9
 8021150:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8021152:	eef0 aa45 	vmov.f32	s21, s10
 8021156:	930a      	str	r3, [sp, #40]	; 0x28
 8021158:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 802115c:	901f      	str	r0, [sp, #124]	; 0x7c
 802115e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021160:	6850      	ldr	r0, [r2, #4]
 8021162:	910e      	str	r1, [sp, #56]	; 0x38
 8021164:	6812      	ldr	r2, [r2, #0]
 8021166:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 802116a:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 802116e:	fb00 1303 	mla	r3, r0, r3, r1
 8021172:	9908      	ldr	r1, [sp, #32]
 8021174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021178:	18d3      	adds	r3, r2, r3
 802117a:	2203      	movs	r2, #3
 802117c:	9309      	str	r3, [sp, #36]	; 0x24
 802117e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8021180:	681b      	ldr	r3, [r3, #0]
 8021182:	930c      	str	r3, [sp, #48]	; 0x30
 8021184:	f06f 0304 	mvn.w	r3, #4
 8021188:	fb11 3302 	smlabb	r3, r1, r2, r3
 802118c:	930d      	str	r3, [sp, #52]	; 0x34
 802118e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021190:	43db      	mvns	r3, r3
 8021192:	b2db      	uxtb	r3, r3
 8021194:	930b      	str	r3, [sp, #44]	; 0x2c
 8021196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021198:	2b00      	cmp	r3, #0
 802119a:	dc03      	bgt.n	80211a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802119c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802119e:	2b00      	cmp	r3, #0
 80211a0:	f340 81df 	ble.w	8021562 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80211a4:	9b07      	ldr	r3, [sp, #28]
 80211a6:	2b00      	cmp	r3, #0
 80211a8:	f340 80f2 	ble.w	8021390 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80211ac:	ea5f 4228 	movs.w	r2, r8, asr #16
 80211b0:	ea4f 432b 	mov.w	r3, fp, asr #16
 80211b4:	d430      	bmi.n	8021218 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80211b6:	1c51      	adds	r1, r2, #1
 80211b8:	9808      	ldr	r0, [sp, #32]
 80211ba:	4281      	cmp	r1, r0
 80211bc:	da2f      	bge.n	802121e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80211be:	2b00      	cmp	r3, #0
 80211c0:	db2d      	blt.n	802121e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80211c2:	1c59      	adds	r1, r3, #1
 80211c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80211c6:	4288      	cmp	r0, r1
 80211c8:	dd29      	ble.n	802121e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80211ca:	9b07      	ldr	r3, [sp, #28]
 80211cc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80211ce:	3b01      	subs	r3, #1
 80211d0:	fb02 8203 	mla	r2, r2, r3, r8
 80211d4:	1412      	asrs	r2, r2, #16
 80211d6:	d42d      	bmi.n	8021234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80211d8:	3201      	adds	r2, #1
 80211da:	9908      	ldr	r1, [sp, #32]
 80211dc:	4291      	cmp	r1, r2
 80211de:	dd29      	ble.n	8021234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80211e0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80211e2:	fb02 b303 	mla	r3, r2, r3, fp
 80211e6:	141b      	asrs	r3, r3, #16
 80211e8:	d424      	bmi.n	8021234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80211ea:	3301      	adds	r3, #1
 80211ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80211ee:	429a      	cmp	r2, r3
 80211f0:	dd20      	ble.n	8021234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80211f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211f4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80211f8:	1cde      	adds	r6, r3, #3
 80211fa:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 80211fe:	f1bc 0f00 	cmp.w	ip, #0
 8021202:	f300 811f 	bgt.w	8021444 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8021206:	9b07      	ldr	r3, [sp, #28]
 8021208:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802120c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802120e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021212:	4423      	add	r3, r4
 8021214:	9309      	str	r3, [sp, #36]	; 0x24
 8021216:	e0bd      	b.n	8021394 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021218:	1c57      	adds	r7, r2, #1
 802121a:	f040 80ae 	bne.w	802137a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802121e:	9908      	ldr	r1, [sp, #32]
 8021220:	428a      	cmp	r2, r1
 8021222:	f280 80aa 	bge.w	802137a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021226:	1c5e      	adds	r6, r3, #1
 8021228:	f2c0 80a7 	blt.w	802137a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802122c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802122e:	4293      	cmp	r3, r2
 8021230:	f280 80a3 	bge.w	802137a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8021234:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021238:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802123a:	f1ba 0f00 	cmp.w	sl, #0
 802123e:	dde2      	ble.n	8021206 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8021240:	ea5f 4028 	movs.w	r0, r8, asr #16
 8021244:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8021248:	ea4f 412b 	mov.w	r1, fp, asr #16
 802124c:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021250:	f100 80df 	bmi.w	8021412 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8021254:	1c45      	adds	r5, r0, #1
 8021256:	9f08      	ldr	r7, [sp, #32]
 8021258:	42af      	cmp	r7, r5
 802125a:	f340 80dc 	ble.w	8021416 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802125e:	2900      	cmp	r1, #0
 8021260:	f2c0 80d9 	blt.w	8021416 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8021264:	1c4d      	adds	r5, r1, #1
 8021266:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021268:	42af      	cmp	r7, r5
 802126a:	f340 80d4 	ble.w	8021416 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802126e:	9d08      	ldr	r5, [sp, #32]
 8021270:	fb05 0101 	mla	r1, r5, r1, r0
 8021274:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021276:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802127a:	1845      	adds	r5, r0, r1
 802127c:	5c40      	ldrb	r0, [r0, r1]
 802127e:	792f      	ldrb	r7, [r5, #4]
 8021280:	7869      	ldrb	r1, [r5, #1]
 8021282:	9711      	str	r7, [sp, #68]	; 0x44
 8021284:	796f      	ldrb	r7, [r5, #5]
 8021286:	f895 e002 	ldrb.w	lr, [r5, #2]
 802128a:	f895 9003 	ldrb.w	r9, [r5, #3]
 802128e:	9712      	str	r7, [sp, #72]	; 0x48
 8021290:	b17a      	cbz	r2, 80212b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8021292:	3505      	adds	r5, #5
 8021294:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021296:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021298:	19ef      	adds	r7, r5, r7
 802129a:	5d2d      	ldrb	r5, [r5, r4]
 802129c:	787c      	ldrb	r4, [r7, #1]
 802129e:	9513      	str	r5, [sp, #76]	; 0x4c
 80212a0:	9415      	str	r4, [sp, #84]	; 0x54
 80212a2:	78bc      	ldrb	r4, [r7, #2]
 80212a4:	9417      	str	r4, [sp, #92]	; 0x5c
 80212a6:	78fc      	ldrb	r4, [r7, #3]
 80212a8:	9414      	str	r4, [sp, #80]	; 0x50
 80212aa:	793c      	ldrb	r4, [r7, #4]
 80212ac:	9416      	str	r4, [sp, #88]	; 0x58
 80212ae:	797c      	ldrb	r4, [r7, #5]
 80212b0:	9418      	str	r4, [sp, #96]	; 0x60
 80212b2:	b29b      	uxth	r3, r3
 80212b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80212b6:	b292      	uxth	r2, r2
 80212b8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80212bc:	fb03 f702 	mul.w	r7, r3, r2
 80212c0:	011b      	lsls	r3, r3, #4
 80212c2:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80212c6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80212ca:	1bdb      	subs	r3, r3, r7
 80212cc:	b292      	uxth	r2, r2
 80212ce:	b29b      	uxth	r3, r3
 80212d0:	ebac 0c02 	sub.w	ip, ip, r2
 80212d4:	fb03 f909 	mul.w	r9, r3, r9
 80212d8:	fa1f fc8c 	uxth.w	ip, ip
 80212dc:	fb0c 9000 	mla	r0, ip, r0, r9
 80212e0:	f896 9000 	ldrb.w	r9, [r6]
 80212e4:	fb02 0004 	mla	r0, r2, r4, r0
 80212e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80212ea:	fb07 0004 	mla	r0, r7, r4, r0
 80212ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80212f0:	fb19 f904 	smulbb	r9, r9, r4
 80212f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80212f8:	fb00 9005 	mla	r0, r0, r5, r9
 80212fc:	b280      	uxth	r0, r0
 80212fe:	f100 0901 	add.w	r9, r0, #1
 8021302:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021306:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021308:	4358      	muls	r0, r3
 802130a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802130e:	fb0c 0101 	mla	r1, ip, r1, r0
 8021312:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021314:	f886 9000 	strb.w	r9, [r6]
 8021318:	fb02 1100 	mla	r1, r2, r0, r1
 802131c:	9816      	ldr	r0, [sp, #88]	; 0x58
 802131e:	fb07 1100 	mla	r1, r7, r0, r1
 8021322:	7870      	ldrb	r0, [r6, #1]
 8021324:	fb10 f004 	smulbb	r0, r0, r4
 8021328:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802132c:	fb01 0105 	mla	r1, r1, r5, r0
 8021330:	b289      	uxth	r1, r1
 8021332:	1c48      	adds	r0, r1, #1
 8021334:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021338:	1209      	asrs	r1, r1, #8
 802133a:	7071      	strb	r1, [r6, #1]
 802133c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802133e:	434b      	muls	r3, r1
 8021340:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021342:	fb0c 330e 	mla	r3, ip, lr, r3
 8021346:	fb02 3201 	mla	r2, r2, r1, r3
 802134a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802134c:	fb07 2703 	mla	r7, r7, r3, r2
 8021350:	78b2      	ldrb	r2, [r6, #2]
 8021352:	fb12 f204 	smulbb	r2, r2, r4
 8021356:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802135a:	fb07 2505 	mla	r5, r7, r5, r2
 802135e:	b2ad      	uxth	r5, r5
 8021360:	1c6f      	adds	r7, r5, #1
 8021362:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8021366:	122d      	asrs	r5, r5, #8
 8021368:	70b5      	strb	r5, [r6, #2]
 802136a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802136c:	3603      	adds	r6, #3
 802136e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021372:	4498      	add	r8, r3
 8021374:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021376:	449b      	add	fp, r3
 8021378:	e75f      	b.n	802123a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 802137a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802137c:	4498      	add	r8, r3
 802137e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021380:	449b      	add	fp, r3
 8021382:	9b07      	ldr	r3, [sp, #28]
 8021384:	3b01      	subs	r3, #1
 8021386:	9307      	str	r3, [sp, #28]
 8021388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802138a:	3303      	adds	r3, #3
 802138c:	9309      	str	r3, [sp, #36]	; 0x24
 802138e:	e709      	b.n	80211a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8021390:	f47f af1b 	bne.w	80211ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8021394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021396:	2b00      	cmp	r3, #0
 8021398:	f340 80e3 	ble.w	8021562 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802139c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80213a0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80213a2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80213a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80213aa:	eef0 6a48 	vmov.f32	s13, s16
 80213ae:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80213b2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80213b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80213ba:	ee16 8a90 	vmov	r8, s13
 80213be:	eef0 6a68 	vmov.f32	s13, s17
 80213c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80213c6:	ee16 ba90 	vmov	fp, s13
 80213ca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80213ce:	ee69 7a27 	vmul.f32	s15, s18, s15
 80213d2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80213d6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80213da:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80213de:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80213e2:	ee18 2a10 	vmov	r2, s16
 80213e6:	eeb0 8a47 	vmov.f32	s16, s14
 80213ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80213ee:	ee18 2a90 	vmov	r2, s17
 80213f2:	9335      	str	r3, [sp, #212]	; 0xd4
 80213f4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80213f6:	eef0 8a67 	vmov.f32	s17, s15
 80213fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80213fe:	9336      	str	r3, [sp, #216]	; 0xd8
 8021400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021402:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021404:	3b01      	subs	r3, #1
 8021406:	930e      	str	r3, [sp, #56]	; 0x38
 8021408:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802140a:	bf08      	it	eq
 802140c:	4613      	moveq	r3, r2
 802140e:	9307      	str	r3, [sp, #28]
 8021410:	e6c1      	b.n	8021196 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021412:	1c45      	adds	r5, r0, #1
 8021414:	d1a9      	bne.n	802136a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021416:	9c08      	ldr	r4, [sp, #32]
 8021418:	42a0      	cmp	r0, r4
 802141a:	daa6      	bge.n	802136a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802141c:	1c4c      	adds	r4, r1, #1
 802141e:	dba4      	blt.n	802136a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021420:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021422:	428c      	cmp	r4, r1
 8021424:	dda1      	ble.n	802136a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021426:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021428:	9001      	str	r0, [sp, #4]
 802142a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802142c:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8021430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021432:	4631      	mov	r1, r6
 8021434:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8021438:	9300      	str	r3, [sp, #0]
 802143a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802143c:	9b08      	ldr	r3, [sp, #32]
 802143e:	f7ff fd5b 	bl	8020ef8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8021442:	e792      	b.n	802136a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8021444:	ea4f 4228 	mov.w	r2, r8, asr #16
 8021448:	9c08      	ldr	r4, [sp, #32]
 802144a:	ea4f 402b 	mov.w	r0, fp, asr #16
 802144e:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8021452:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8021456:	fb04 2000 	mla	r0, r4, r0, r2
 802145a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802145c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802145e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021462:	4402      	add	r2, r0
 8021464:	5c25      	ldrb	r5, [r4, r0]
 8021466:	7894      	ldrb	r4, [r2, #2]
 8021468:	7850      	ldrb	r0, [r2, #1]
 802146a:	9411      	str	r4, [sp, #68]	; 0x44
 802146c:	7954      	ldrb	r4, [r2, #5]
 802146e:	f892 a003 	ldrb.w	sl, [r2, #3]
 8021472:	f892 9004 	ldrb.w	r9, [r2, #4]
 8021476:	9412      	str	r4, [sp, #72]	; 0x48
 8021478:	b171      	cbz	r1, 8021498 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802147a:	3205      	adds	r2, #5
 802147c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802147e:	1917      	adds	r7, r2, r4
 8021480:	5d12      	ldrb	r2, [r2, r4]
 8021482:	9219      	str	r2, [sp, #100]	; 0x64
 8021484:	787a      	ldrb	r2, [r7, #1]
 8021486:	921b      	str	r2, [sp, #108]	; 0x6c
 8021488:	78ba      	ldrb	r2, [r7, #2]
 802148a:	921d      	str	r2, [sp, #116]	; 0x74
 802148c:	78fa      	ldrb	r2, [r7, #3]
 802148e:	921a      	str	r2, [sp, #104]	; 0x68
 8021490:	793a      	ldrb	r2, [r7, #4]
 8021492:	921c      	str	r2, [sp, #112]	; 0x70
 8021494:	797a      	ldrb	r2, [r7, #5]
 8021496:	921e      	str	r2, [sp, #120]	; 0x78
 8021498:	b29b      	uxth	r3, r3
 802149a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 802149c:	b289      	uxth	r1, r1
 802149e:	3603      	adds	r6, #3
 80214a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80214a4:	fb03 f201 	mul.w	r2, r3, r1
 80214a8:	011b      	lsls	r3, r3, #4
 80214aa:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80214ae:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80214b2:	1a9b      	subs	r3, r3, r2
 80214b4:	b289      	uxth	r1, r1
 80214b6:	b29b      	uxth	r3, r3
 80214b8:	1a7f      	subs	r7, r7, r1
 80214ba:	fb03 fa0a 	mul.w	sl, r3, sl
 80214be:	b2bf      	uxth	r7, r7
 80214c0:	fb03 f909 	mul.w	r9, r3, r9
 80214c4:	fb07 a505 	mla	r5, r7, r5, sl
 80214c8:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 80214cc:	fb07 9000 	mla	r0, r7, r0, r9
 80214d0:	fb01 5504 	mla	r5, r1, r4, r5
 80214d4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80214d6:	fb02 5504 	mla	r5, r2, r4, r5
 80214da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80214dc:	fb1a fa04 	smulbb	sl, sl, r4
 80214e0:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80214e4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80214e6:	fb05 a50e 	mla	r5, r5, lr, sl
 80214ea:	fb01 0004 	mla	r0, r1, r4, r0
 80214ee:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80214f0:	b2ad      	uxth	r5, r5
 80214f2:	fb02 0004 	mla	r0, r2, r4, r0
 80214f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80214f8:	f105 0a01 	add.w	sl, r5, #1
 80214fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021500:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021504:	122d      	asrs	r5, r5, #8
 8021506:	f806 5c06 	strb.w	r5, [r6, #-6]
 802150a:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 802150e:	fb15 f504 	smulbb	r5, r5, r4
 8021512:	fb00 500e 	mla	r0, r0, lr, r5
 8021516:	b280      	uxth	r0, r0
 8021518:	1c45      	adds	r5, r0, #1
 802151a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802151e:	1200      	asrs	r0, r0, #8
 8021520:	f806 0c05 	strb.w	r0, [r6, #-5]
 8021524:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021526:	4343      	muls	r3, r0
 8021528:	9811      	ldr	r0, [sp, #68]	; 0x44
 802152a:	fb07 3300 	mla	r3, r7, r0, r3
 802152e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021530:	fb01 3100 	mla	r1, r1, r0, r3
 8021534:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021536:	fb02 1203 	mla	r2, r2, r3, r1
 802153a:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 802153e:	fb11 f104 	smulbb	r1, r1, r4
 8021542:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021546:	fb02 120e 	mla	r2, r2, lr, r1
 802154a:	b292      	uxth	r2, r2
 802154c:	1c53      	adds	r3, r2, #1
 802154e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021552:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8021554:	1212      	asrs	r2, r2, #8
 8021556:	4498      	add	r8, r3
 8021558:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802155a:	f806 2c04 	strb.w	r2, [r6, #-4]
 802155e:	449b      	add	fp, r3
 8021560:	e64d      	b.n	80211fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8021562:	b021      	add	sp, #132	; 0x84
 8021564:	ecbd 8b08 	vpop	{d8-d11}
 8021568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802156c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 802156c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021570:	b085      	sub	sp, #20
 8021572:	784d      	ldrb	r5, [r1, #1]
 8021574:	788e      	ldrb	r6, [r1, #2]
 8021576:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802157a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 802157e:	9403      	str	r4, [sp, #12]
 8021580:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021584:	780c      	ldrb	r4, [r1, #0]
 8021586:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802158a:	fb07 ce03 	mla	lr, r7, r3, ip
 802158e:	2f00      	cmp	r7, #0
 8021590:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021594:	eb02 0b0e 	add.w	fp, r2, lr
 8021598:	db56      	blt.n	8021648 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802159a:	45b9      	cmp	r9, r7
 802159c:	dd54      	ble.n	8021648 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802159e:	f1bc 0f00 	cmp.w	ip, #0
 80215a2:	db4d      	blt.n	8021640 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80215a4:	4563      	cmp	r3, ip
 80215a6:	dd4b      	ble.n	8021640 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80215a8:	f812 200e 	ldrb.w	r2, [r2, lr]
 80215ac:	9200      	str	r2, [sp, #0]
 80215ae:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80215b2:	9201      	str	r2, [sp, #4]
 80215b4:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80215b8:	9202      	str	r2, [sp, #8]
 80215ba:	f11c 0201 	adds.w	r2, ip, #1
 80215be:	d44a      	bmi.n	8021656 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80215c0:	4293      	cmp	r3, r2
 80215c2:	dd48      	ble.n	8021656 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80215c4:	2800      	cmp	r0, #0
 80215c6:	d046      	beq.n	8021656 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80215c8:	f89b e003 	ldrb.w	lr, [fp, #3]
 80215cc:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80215d0:	f89b a005 	ldrb.w	sl, [fp, #5]
 80215d4:	3701      	adds	r7, #1
 80215d6:	d446      	bmi.n	8021666 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80215d8:	45b9      	cmp	r9, r7
 80215da:	dd44      	ble.n	8021666 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80215dc:	9a03      	ldr	r2, [sp, #12]
 80215de:	2a00      	cmp	r2, #0
 80215e0:	d045      	beq.n	802166e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 80215e2:	f1bc 0f00 	cmp.w	ip, #0
 80215e6:	db3a      	blt.n	802165e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80215e8:	4563      	cmp	r3, ip
 80215ea:	dd38      	ble.n	802165e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80215ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80215f0:	f04f 0903 	mov.w	r9, #3
 80215f4:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80215f8:	fb03 b209 	mla	r2, r3, r9, fp
 80215fc:	fb03 b909 	mla	r9, r3, r9, fp
 8021600:	7852      	ldrb	r2, [r2, #1]
 8021602:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021606:	f11c 0c01 	adds.w	ip, ip, #1
 802160a:	d40d      	bmi.n	8021628 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802160c:	4563      	cmp	r3, ip
 802160e:	dd0b      	ble.n	8021628 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021610:	b160      	cbz	r0, 802162c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8021612:	2603      	movs	r6, #3
 8021614:	fb13 6406 	smlabb	r4, r3, r6, r6
 8021618:	fb03 b506 	mla	r5, r3, r6, fp
 802161c:	fb03 b306 	mla	r3, r3, r6, fp
 8021620:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8021624:	792d      	ldrb	r5, [r5, #4]
 8021626:	795e      	ldrb	r6, [r3, #5]
 8021628:	280f      	cmp	r0, #15
 802162a:	d802      	bhi.n	8021632 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 802162c:	9b03      	ldr	r3, [sp, #12]
 802162e:	2b0f      	cmp	r3, #15
 8021630:	d922      	bls.n	8021678 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8021632:	4b2f      	ldr	r3, [pc, #188]	; (80216f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8021634:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021638:	4a2e      	ldr	r2, [pc, #184]	; (80216f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 802163a:	482f      	ldr	r0, [pc, #188]	; (80216f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 802163c:	f003 ff96 	bl	802556c <__assert_func>
 8021640:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021644:	9400      	str	r4, [sp, #0]
 8021646:	e7b8      	b.n	80215ba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8021648:	46b2      	mov	sl, r6
 802164a:	46a8      	mov	r8, r5
 802164c:	46a6      	mov	lr, r4
 802164e:	9400      	str	r4, [sp, #0]
 8021650:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021654:	e7be      	b.n	80215d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8021656:	46b2      	mov	sl, r6
 8021658:	46a8      	mov	r8, r5
 802165a:	46a6      	mov	lr, r4
 802165c:	e7ba      	b.n	80215d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802165e:	46b1      	mov	r9, r6
 8021660:	462a      	mov	r2, r5
 8021662:	4627      	mov	r7, r4
 8021664:	e7cf      	b.n	8021606 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8021666:	46b1      	mov	r9, r6
 8021668:	462a      	mov	r2, r5
 802166a:	4627      	mov	r7, r4
 802166c:	e7dc      	b.n	8021628 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802166e:	280f      	cmp	r0, #15
 8021670:	d8df      	bhi.n	8021632 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021672:	46b1      	mov	r9, r6
 8021674:	462a      	mov	r2, r5
 8021676:	4627      	mov	r7, r4
 8021678:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 802167c:	b280      	uxth	r0, r0
 802167e:	fb00 f30b 	mul.w	r3, r0, fp
 8021682:	0100      	lsls	r0, r0, #4
 8021684:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8021688:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 802168c:	1ac0      	subs	r0, r0, r3
 802168e:	fa1f fb8b 	uxth.w	fp, fp
 8021692:	b280      	uxth	r0, r0
 8021694:	ebac 0c0b 	sub.w	ip, ip, fp
 8021698:	9003      	str	r0, [sp, #12]
 802169a:	fa1f fc8c 	uxth.w	ip, ip
 802169e:	fb00 fe0e 	mul.w	lr, r0, lr
 80216a2:	9800      	ldr	r0, [sp, #0]
 80216a4:	fb0c ee00 	mla	lr, ip, r0, lr
 80216a8:	9803      	ldr	r0, [sp, #12]
 80216aa:	fb00 f808 	mul.w	r8, r0, r8
 80216ae:	9801      	ldr	r0, [sp, #4]
 80216b0:	fb0b ee07 	mla	lr, fp, r7, lr
 80216b4:	fb0c 8800 	mla	r8, ip, r0, r8
 80216b8:	fb03 ee04 	mla	lr, r3, r4, lr
 80216bc:	fb0b 8202 	mla	r2, fp, r2, r8
 80216c0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80216c4:	fb03 2505 	mla	r5, r3, r5, r2
 80216c8:	9a03      	ldr	r2, [sp, #12]
 80216ca:	f881 e000 	strb.w	lr, [r1]
 80216ce:	fb02 f00a 	mul.w	r0, r2, sl
 80216d2:	9a02      	ldr	r2, [sp, #8]
 80216d4:	122d      	asrs	r5, r5, #8
 80216d6:	fb0c 0c02 	mla	ip, ip, r2, r0
 80216da:	704d      	strb	r5, [r1, #1]
 80216dc:	fb0b c909 	mla	r9, fp, r9, ip
 80216e0:	fb03 9606 	mla	r6, r3, r6, r9
 80216e4:	1236      	asrs	r6, r6, #8
 80216e6:	708e      	strb	r6, [r1, #2]
 80216e8:	b005      	add	sp, #20
 80216ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216ee:	bf00      	nop
 80216f0:	0802acdd 	.word	0x0802acdd
 80216f4:	0802b1d6 	.word	0x0802b1d6
 80216f8:	0802ada6 	.word	0x0802ada6

080216fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80216fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021700:	ed2d 8b0a 	vpush	{d8-d12}
 8021704:	b09d      	sub	sp, #116	; 0x74
 8021706:	eeb0 aa40 	vmov.f32	s20, s0
 802170a:	eef0 9a60 	vmov.f32	s19, s1
 802170e:	9306      	str	r3, [sp, #24]
 8021710:	eeb0 9a41 	vmov.f32	s18, s2
 8021714:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8021718:	eeb0 8a62 	vmov.f32	s16, s5
 802171c:	901b      	str	r0, [sp, #108]	; 0x6c
 802171e:	eef0 8a43 	vmov.f32	s17, s6
 8021722:	9307      	str	r3, [sp, #28]
 8021724:	eeb0 ca44 	vmov.f32	s24, s8
 8021728:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 802172c:	eef0 ba64 	vmov.f32	s23, s9
 8021730:	eeb0 ba45 	vmov.f32	s22, s10
 8021734:	9309      	str	r3, [sp, #36]	; 0x24
 8021736:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802173a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 802173e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8021740:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8021744:	6850      	ldr	r0, [r2, #4]
 8021746:	6812      	ldr	r2, [r2, #0]
 8021748:	fb00 1303 	mla	r3, r0, r3, r1
 802174c:	9907      	ldr	r1, [sp, #28]
 802174e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021752:	18d3      	adds	r3, r2, r3
 8021754:	2203      	movs	r2, #3
 8021756:	9308      	str	r3, [sp, #32]
 8021758:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802175a:	681b      	ldr	r3, [r3, #0]
 802175c:	930a      	str	r3, [sp, #40]	; 0x28
 802175e:	f06f 0304 	mvn.w	r3, #4
 8021762:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8021766:	fb11 3302 	smlabb	r3, r1, r2, r3
 802176a:	930b      	str	r3, [sp, #44]	; 0x2c
 802176c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802176e:	2b00      	cmp	r3, #0
 8021770:	dc03      	bgt.n	802177a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021774:	2b00      	cmp	r3, #0
 8021776:	f340 8193 	ble.w	8021aa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802177a:	9b06      	ldr	r3, [sp, #24]
 802177c:	2b00      	cmp	r3, #0
 802177e:	f340 80d0 	ble.w	8021922 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8021782:	1432      	asrs	r2, r6, #16
 8021784:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021788:	d42f      	bmi.n	80217ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802178a:	1c51      	adds	r1, r2, #1
 802178c:	9807      	ldr	r0, [sp, #28]
 802178e:	4281      	cmp	r1, r0
 8021790:	da2e      	bge.n	80217f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021792:	2b00      	cmp	r3, #0
 8021794:	db2c      	blt.n	80217f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021796:	1c59      	adds	r1, r3, #1
 8021798:	9809      	ldr	r0, [sp, #36]	; 0x24
 802179a:	4288      	cmp	r0, r1
 802179c:	dd28      	ble.n	80217f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802179e:	9b06      	ldr	r3, [sp, #24]
 80217a0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80217a2:	3b01      	subs	r3, #1
 80217a4:	fb02 6203 	mla	r2, r2, r3, r6
 80217a8:	1412      	asrs	r2, r2, #16
 80217aa:	d42c      	bmi.n	8021806 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80217ac:	3201      	adds	r2, #1
 80217ae:	9907      	ldr	r1, [sp, #28]
 80217b0:	4291      	cmp	r1, r2
 80217b2:	dd28      	ble.n	8021806 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80217b4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80217b6:	fb02 5303 	mla	r3, r2, r3, r5
 80217ba:	141b      	asrs	r3, r3, #16
 80217bc:	d423      	bmi.n	8021806 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80217be:	3301      	adds	r3, #1
 80217c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80217c2:	429a      	cmp	r2, r3
 80217c4:	dd1f      	ble.n	8021806 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80217c6:	9b08      	ldr	r3, [sp, #32]
 80217c8:	f8dd e018 	ldr.w	lr, [sp, #24]
 80217cc:	f103 0c03 	add.w	ip, r3, #3
 80217d0:	f1be 0f00 	cmp.w	lr, #0
 80217d4:	f300 80fa 	bgt.w	80219cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80217d8:	9b06      	ldr	r3, [sp, #24]
 80217da:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80217de:	9b08      	ldr	r3, [sp, #32]
 80217e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80217e4:	4423      	add	r3, r4
 80217e6:	9308      	str	r3, [sp, #32]
 80217e8:	e09d      	b.n	8021926 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80217ea:	1c51      	adds	r1, r2, #1
 80217ec:	f040 808e 	bne.w	802190c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80217f0:	9907      	ldr	r1, [sp, #28]
 80217f2:	428a      	cmp	r2, r1
 80217f4:	f280 808a 	bge.w	802190c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80217f8:	1c5f      	adds	r7, r3, #1
 80217fa:	f2c0 8087 	blt.w	802190c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80217fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021800:	4293      	cmp	r3, r2
 8021802:	f280 8083 	bge.w	802190c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021806:	9f06      	ldr	r7, [sp, #24]
 8021808:	f8dd a020 	ldr.w	sl, [sp, #32]
 802180c:	2f00      	cmp	r7, #0
 802180e:	dde3      	ble.n	80217d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8021810:	1432      	asrs	r2, r6, #16
 8021812:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021816:	ea4f 4325 	mov.w	r3, r5, asr #16
 802181a:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 802181e:	f100 80bf 	bmi.w	80219a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8021822:	1c50      	adds	r0, r2, #1
 8021824:	9c07      	ldr	r4, [sp, #28]
 8021826:	4284      	cmp	r4, r0
 8021828:	f340 80bc 	ble.w	80219a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802182c:	2b00      	cmp	r3, #0
 802182e:	f2c0 80b9 	blt.w	80219a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8021832:	1c58      	adds	r0, r3, #1
 8021834:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021836:	4284      	cmp	r4, r0
 8021838:	f340 80b4 	ble.w	80219a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802183c:	9807      	ldr	r0, [sp, #28]
 802183e:	fb00 2303 	mla	r3, r0, r3, r2
 8021842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021844:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021846:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802184a:	441a      	add	r2, r3
 802184c:	f810 c003 	ldrb.w	ip, [r0, r3]
 8021850:	7953      	ldrb	r3, [r2, #5]
 8021852:	7850      	ldrb	r0, [r2, #1]
 8021854:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021858:	f892 9003 	ldrb.w	r9, [r2, #3]
 802185c:	f892 8004 	ldrb.w	r8, [r2, #4]
 8021860:	930e      	str	r3, [sp, #56]	; 0x38
 8021862:	f1bb 0f00 	cmp.w	fp, #0
 8021866:	d00f      	beq.n	8021888 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8021868:	3205      	adds	r2, #5
 802186a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802186c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802186e:	18d3      	adds	r3, r2, r3
 8021870:	5d12      	ldrb	r2, [r2, r4]
 8021872:	920f      	str	r2, [sp, #60]	; 0x3c
 8021874:	785a      	ldrb	r2, [r3, #1]
 8021876:	9211      	str	r2, [sp, #68]	; 0x44
 8021878:	789a      	ldrb	r2, [r3, #2]
 802187a:	9213      	str	r2, [sp, #76]	; 0x4c
 802187c:	78da      	ldrb	r2, [r3, #3]
 802187e:	9210      	str	r2, [sp, #64]	; 0x40
 8021880:	791a      	ldrb	r2, [r3, #4]
 8021882:	795b      	ldrb	r3, [r3, #5]
 8021884:	9212      	str	r2, [sp, #72]	; 0x48
 8021886:	9314      	str	r3, [sp, #80]	; 0x50
 8021888:	b28b      	uxth	r3, r1
 802188a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802188c:	fa1f f28b 	uxth.w	r2, fp
 8021890:	fb03 fb02 	mul.w	fp, r3, r2
 8021894:	011b      	lsls	r3, r3, #4
 8021896:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802189a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 802189e:	eba3 030b 	sub.w	r3, r3, fp
 80218a2:	b292      	uxth	r2, r2
 80218a4:	b29b      	uxth	r3, r3
 80218a6:	1a89      	subs	r1, r1, r2
 80218a8:	fb03 f808 	mul.w	r8, r3, r8
 80218ac:	b289      	uxth	r1, r1
 80218ae:	fb03 f909 	mul.w	r9, r3, r9
 80218b2:	fb01 8800 	mla	r8, r1, r0, r8
 80218b6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80218b8:	fb01 990c 	mla	r9, r1, ip, r9
 80218bc:	fb02 8800 	mla	r8, r2, r0, r8
 80218c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80218c2:	fb02 9904 	mla	r9, r2, r4, r9
 80218c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80218c8:	fb0b 8800 	mla	r8, fp, r0, r8
 80218cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80218ce:	fb0b 9904 	mla	r9, fp, r4, r9
 80218d2:	4343      	muls	r3, r0
 80218d4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80218d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80218dc:	fb01 330e 	mla	r3, r1, lr, r3
 80218e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80218e2:	f88a 9000 	strb.w	r9, [sl]
 80218e6:	fb02 3201 	mla	r2, r2, r1, r3
 80218ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80218ec:	f88a 8001 	strb.w	r8, [sl, #1]
 80218f0:	fb0b 2b03 	mla	fp, fp, r3, r2
 80218f4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80218f8:	f88a b002 	strb.w	fp, [sl, #2]
 80218fc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80218fe:	f10a 0a03 	add.w	sl, sl, #3
 8021902:	3f01      	subs	r7, #1
 8021904:	441e      	add	r6, r3
 8021906:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021908:	441d      	add	r5, r3
 802190a:	e77f      	b.n	802180c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 802190c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802190e:	441e      	add	r6, r3
 8021910:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021912:	441d      	add	r5, r3
 8021914:	9b06      	ldr	r3, [sp, #24]
 8021916:	3b01      	subs	r3, #1
 8021918:	9306      	str	r3, [sp, #24]
 802191a:	9b08      	ldr	r3, [sp, #32]
 802191c:	3303      	adds	r3, #3
 802191e:	9308      	str	r3, [sp, #32]
 8021920:	e72b      	b.n	802177a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021922:	f47f af3c 	bne.w	802179e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021928:	2b00      	cmp	r3, #0
 802192a:	f340 80b9 	ble.w	8021aa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802192e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021932:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021934:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021938:	eef0 6a48 	vmov.f32	s13, s16
 802193c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021940:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021944:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021948:	ee16 6a90 	vmov	r6, s13
 802194c:	eef0 6a68 	vmov.f32	s13, s17
 8021950:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021954:	ee16 5a90 	vmov	r5, s13
 8021958:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802195c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021960:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021964:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021968:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802196c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021970:	ee18 2a10 	vmov	r2, s16
 8021974:	eeb0 8a47 	vmov.f32	s16, s14
 8021978:	fb92 f3f3 	sdiv	r3, r2, r3
 802197c:	ee18 2a90 	vmov	r2, s17
 8021980:	9333      	str	r3, [sp, #204]	; 0xcc
 8021982:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021984:	eef0 8a67 	vmov.f32	s17, s15
 8021988:	fb92 f3f3 	sdiv	r3, r2, r3
 802198c:	9334      	str	r3, [sp, #208]	; 0xd0
 802198e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021992:	3b01      	subs	r3, #1
 8021994:	930c      	str	r3, [sp, #48]	; 0x30
 8021996:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021998:	bf08      	it	eq
 802199a:	4613      	moveq	r3, r2
 802199c:	9306      	str	r3, [sp, #24]
 802199e:	e6e5      	b.n	802176c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80219a0:	1c54      	adds	r4, r2, #1
 80219a2:	d1ab      	bne.n	80218fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80219a4:	9807      	ldr	r0, [sp, #28]
 80219a6:	4282      	cmp	r2, r0
 80219a8:	daa8      	bge.n	80218fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80219aa:	1c58      	adds	r0, r3, #1
 80219ac:	dba6      	blt.n	80218fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80219ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80219b0:	4298      	cmp	r0, r3
 80219b2:	dda3      	ble.n	80218fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80219b4:	9000      	str	r0, [sp, #0]
 80219b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80219b8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80219bc:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 80219c0:	9b07      	ldr	r3, [sp, #28]
 80219c2:	4651      	mov	r1, sl
 80219c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80219c6:	f7ff fdd1 	bl	802156c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80219ca:	e797      	b.n	80218fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80219cc:	1431      	asrs	r1, r6, #16
 80219ce:	9c07      	ldr	r4, [sp, #28]
 80219d0:	1428      	asrs	r0, r5, #16
 80219d2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80219d6:	f3c6 3303 	ubfx	r3, r6, #12, #4
 80219da:	fb04 1000 	mla	r0, r4, r0, r1
 80219de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80219e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80219e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80219e6:	4401      	add	r1, r0
 80219e8:	5c20      	ldrb	r0, [r4, r0]
 80219ea:	f891 8002 	ldrb.w	r8, [r1, #2]
 80219ee:	900e      	str	r0, [sp, #56]	; 0x38
 80219f0:	f891 a003 	ldrb.w	sl, [r1, #3]
 80219f4:	7848      	ldrb	r0, [r1, #1]
 80219f6:	f891 9004 	ldrb.w	r9, [r1, #4]
 80219fa:	f891 b005 	ldrb.w	fp, [r1, #5]
 80219fe:	b172      	cbz	r2, 8021a1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8021a00:	3105      	adds	r1, #5
 8021a02:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021a04:	190f      	adds	r7, r1, r4
 8021a06:	5d09      	ldrb	r1, [r1, r4]
 8021a08:	9115      	str	r1, [sp, #84]	; 0x54
 8021a0a:	7879      	ldrb	r1, [r7, #1]
 8021a0c:	9117      	str	r1, [sp, #92]	; 0x5c
 8021a0e:	78b9      	ldrb	r1, [r7, #2]
 8021a10:	9119      	str	r1, [sp, #100]	; 0x64
 8021a12:	78f9      	ldrb	r1, [r7, #3]
 8021a14:	9116      	str	r1, [sp, #88]	; 0x58
 8021a16:	7939      	ldrb	r1, [r7, #4]
 8021a18:	9118      	str	r1, [sp, #96]	; 0x60
 8021a1a:	7979      	ldrb	r1, [r7, #5]
 8021a1c:	911a      	str	r1, [sp, #104]	; 0x68
 8021a1e:	b29b      	uxth	r3, r3
 8021a20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021a22:	b292      	uxth	r2, r2
 8021a24:	f10c 0c03 	add.w	ip, ip, #3
 8021a28:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021a2c:	fb03 f102 	mul.w	r1, r3, r2
 8021a30:	011b      	lsls	r3, r3, #4
 8021a32:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8021a36:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021a3a:	1a5b      	subs	r3, r3, r1
 8021a3c:	b292      	uxth	r2, r2
 8021a3e:	b29b      	uxth	r3, r3
 8021a40:	1abf      	subs	r7, r7, r2
 8021a42:	fb03 f909 	mul.w	r9, r3, r9
 8021a46:	b2bf      	uxth	r7, r7
 8021a48:	fb03 fa0a 	mul.w	sl, r3, sl
 8021a4c:	fb03 f30b 	mul.w	r3, r3, fp
 8021a50:	fb07 9900 	mla	r9, r7, r0, r9
 8021a54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021a56:	fb07 aa04 	mla	sl, r7, r4, sl
 8021a5a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021a5c:	fb02 9900 	mla	r9, r2, r0, r9
 8021a60:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021a62:	fb07 3308 	mla	r3, r7, r8, r3
 8021a66:	fb01 9900 	mla	r9, r1, r0, r9
 8021a6a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021a6c:	fb02 aa04 	mla	sl, r2, r4, sl
 8021a70:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021a72:	fb02 3200 	mla	r2, r2, r0, r3
 8021a76:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021a78:	fb01 aa04 	mla	sl, r1, r4, sl
 8021a7c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021a80:	fb01 2103 	mla	r1, r1, r3, r2
 8021a84:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021a86:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021a8a:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8021a8e:	1209      	asrs	r1, r1, #8
 8021a90:	441e      	add	r6, r3
 8021a92:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021a94:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021a98:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021a9c:	441d      	add	r5, r3
 8021a9e:	e697      	b.n	80217d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8021aa0:	b01d      	add	sp, #116	; 0x74
 8021aa2:	ecbd 8b0a 	vpop	{d8-d12}
 8021aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021aac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ab0:	b085      	sub	sp, #20
 8021ab2:	7888      	ldrb	r0, [r1, #2]
 8021ab4:	4691      	mov	r9, r2
 8021ab6:	9000      	str	r0, [sp, #0]
 8021ab8:	7848      	ldrb	r0, [r1, #1]
 8021aba:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021abe:	9001      	str	r0, [sp, #4]
 8021ac0:	7808      	ldrb	r0, [r1, #0]
 8021ac2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021ac6:	9002      	str	r0, [sp, #8]
 8021ac8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021acc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021ad0:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021ad4:	fb04 c603 	mla	r6, r4, r3, ip
 8021ad8:	2c00      	cmp	r4, #0
 8021ada:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021ade:	9a00      	ldr	r2, [sp, #0]
 8021ae0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021ae4:	9a01      	ldr	r2, [sp, #4]
 8021ae6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021aea:	db3a      	blt.n	8021b62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021aec:	45a0      	cmp	r8, r4
 8021aee:	dd38      	ble.n	8021b62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021af0:	f1bc 0f00 	cmp.w	ip, #0
 8021af4:	db33      	blt.n	8021b5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021af6:	4563      	cmp	r3, ip
 8021af8:	dd31      	ble.n	8021b5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021afa:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021afe:	f11c 0601 	adds.w	r6, ip, #1
 8021b02:	d431      	bmi.n	8021b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021b04:	42b3      	cmp	r3, r6
 8021b06:	dd2f      	ble.n	8021b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021b08:	b375      	cbz	r5, 8021b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021b0a:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021b0e:	3401      	adds	r4, #1
 8021b10:	d42e      	bmi.n	8021b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021b12:	45a0      	cmp	r8, r4
 8021b14:	dd2c      	ble.n	8021b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021b16:	b35f      	cbz	r7, 8021b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021b18:	f1bc 0f00 	cmp.w	ip, #0
 8021b1c:	db26      	blt.n	8021b6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021b1e:	4563      	cmp	r3, ip
 8021b20:	dd24      	ble.n	8021b6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8021b22:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021b26:	f11c 0c01 	adds.w	ip, ip, #1
 8021b2a:	d405      	bmi.n	8021b38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021b2c:	4563      	cmp	r3, ip
 8021b2e:	dd03      	ble.n	8021b38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021b30:	b115      	cbz	r5, 8021b38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021b32:	3301      	adds	r3, #1
 8021b34:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021b38:	2d0f      	cmp	r5, #15
 8021b3a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021b3e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021b42:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021b46:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021b4a:	d801      	bhi.n	8021b50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8021b4c:	2f0f      	cmp	r7, #15
 8021b4e:	d911      	bls.n	8021b74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8021b50:	4b80      	ldr	r3, [pc, #512]	; (8021d54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8021b52:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021b56:	4a80      	ldr	r2, [pc, #512]	; (8021d58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8021b58:	4880      	ldr	r0, [pc, #512]	; (8021d5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8021b5a:	f003 fd07 	bl	802556c <__assert_func>
 8021b5e:	4602      	mov	r2, r0
 8021b60:	e7cd      	b.n	8021afe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8021b62:	4606      	mov	r6, r0
 8021b64:	4602      	mov	r2, r0
 8021b66:	e7d2      	b.n	8021b0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021b68:	4606      	mov	r6, r0
 8021b6a:	e7d0      	b.n	8021b0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021b6c:	4604      	mov	r4, r0
 8021b6e:	e7da      	b.n	8021b26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8021b70:	4604      	mov	r4, r0
 8021b72:	e7e1      	b.n	8021b38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021b74:	b2ab      	uxth	r3, r5
 8021b76:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021b7a:	b2bf      	uxth	r7, r7
 8021b7c:	fb03 fe07 	mul.w	lr, r3, r7
 8021b80:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021b84:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021b88:	eba3 0c0e 	sub.w	ip, r3, lr
 8021b8c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021b90:	b2bf      	uxth	r7, r7
 8021b92:	fa1f fc8c 	uxth.w	ip, ip
 8021b96:	eba5 0507 	sub.w	r5, r5, r7
 8021b9a:	fb0c f30a 	mul.w	r3, ip, sl
 8021b9e:	b2ad      	uxth	r5, r5
 8021ba0:	fb05 330b 	mla	r3, r5, fp, r3
 8021ba4:	fb07 3309 	mla	r3, r7, r9, r3
 8021ba8:	fb0e 3308 	mla	r3, lr, r8, r3
 8021bac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021bb0:	9303      	str	r3, [sp, #12]
 8021bb2:	d018      	beq.n	8021be6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021bb4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021bb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021bbc:	fb0b f303 	mul.w	r3, fp, r3
 8021bc0:	fb0b fb02 	mul.w	fp, fp, r2
 8021bc4:	0a1a      	lsrs	r2, r3, #8
 8021bc6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021bca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021bce:	441a      	add	r2, r3
 8021bd0:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021bd4:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021bd8:	0a12      	lsrs	r2, r2, #8
 8021bda:	0a1b      	lsrs	r3, r3, #8
 8021bdc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021be0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021be4:	431a      	orrs	r2, r3
 8021be6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021bea:	d019      	beq.n	8021c20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8021bec:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021bf0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021bf4:	fb0a fb0b 	mul.w	fp, sl, fp
 8021bf8:	fb0a fa06 	mul.w	sl, sl, r6
 8021bfc:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021c00:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021c04:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021c08:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021c0c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021c10:	445e      	add	r6, fp
 8021c12:	0a1b      	lsrs	r3, r3, #8
 8021c14:	0a36      	lsrs	r6, r6, #8
 8021c16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c1a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021c1e:	431e      	orrs	r6, r3
 8021c20:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021c24:	d019      	beq.n	8021c5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8021c26:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021c2a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021c2e:	fb09 fa0a 	mul.w	sl, r9, sl
 8021c32:	fb09 f904 	mul.w	r9, r9, r4
 8021c36:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021c3a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021c3e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021c42:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021c46:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021c4a:	4454      	add	r4, sl
 8021c4c:	0a1b      	lsrs	r3, r3, #8
 8021c4e:	0a24      	lsrs	r4, r4, #8
 8021c50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c54:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021c58:	431c      	orrs	r4, r3
 8021c5a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021c5e:	d019      	beq.n	8021c94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8021c60:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021c64:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021c68:	fb08 f909 	mul.w	r9, r8, r9
 8021c6c:	fb08 f800 	mul.w	r8, r8, r0
 8021c70:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021c74:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021c78:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021c7c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021c80:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021c84:	4448      	add	r0, r9
 8021c86:	0a1b      	lsrs	r3, r3, #8
 8021c88:	0a00      	lsrs	r0, r0, #8
 8021c8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c8e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021c92:	4318      	orrs	r0, r3
 8021c94:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021c98:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021c9c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021ca0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021ca4:	fb0c f808 	mul.w	r8, ip, r8
 8021ca8:	fb0c f606 	mul.w	r6, ip, r6
 8021cac:	fb05 8803 	mla	r8, r5, r3, r8
 8021cb0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021cb4:	fb05 6202 	mla	r2, r5, r2, r6
 8021cb8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021cbc:	fb07 8803 	mla	r8, r7, r3, r8
 8021cc0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021cc4:	fb07 2704 	mla	r7, r7, r4, r2
 8021cc8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021ccc:	fb0e 8303 	mla	r3, lr, r3, r8
 8021cd0:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021cd4:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021cd8:	9803      	ldr	r0, [sp, #12]
 8021cda:	b292      	uxth	r2, r2
 8021cdc:	9c02      	ldr	r4, [sp, #8]
 8021cde:	0a1b      	lsrs	r3, r3, #8
 8021ce0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ce4:	4350      	muls	r0, r2
 8021ce6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021cea:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021cee:	ea43 0e0e 	orr.w	lr, r3, lr
 8021cf2:	1c43      	adds	r3, r0, #1
 8021cf4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021cf8:	fa5f f08e 	uxtb.w	r0, lr
 8021cfc:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021d00:	b2db      	uxtb	r3, r3
 8021d02:	fb14 f403 	smulbb	r4, r4, r3
 8021d06:	fb00 4002 	mla	r0, r0, r2, r4
 8021d0a:	b280      	uxth	r0, r0
 8021d0c:	1c44      	adds	r4, r0, #1
 8021d0e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021d12:	9c01      	ldr	r4, [sp, #4]
 8021d14:	fb14 f403 	smulbb	r4, r4, r3
 8021d18:	1200      	asrs	r0, r0, #8
 8021d1a:	7008      	strb	r0, [r1, #0]
 8021d1c:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8021d20:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021d24:	fb00 4002 	mla	r0, r0, r2, r4
 8021d28:	b280      	uxth	r0, r0
 8021d2a:	1c44      	adds	r4, r0, #1
 8021d2c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021d30:	1200      	asrs	r0, r0, #8
 8021d32:	7048      	strb	r0, [r1, #1]
 8021d34:	9800      	ldr	r0, [sp, #0]
 8021d36:	fb10 f303 	smulbb	r3, r0, r3
 8021d3a:	fb0e 3202 	mla	r2, lr, r2, r3
 8021d3e:	b292      	uxth	r2, r2
 8021d40:	f102 0e01 	add.w	lr, r2, #1
 8021d44:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021d48:	1212      	asrs	r2, r2, #8
 8021d4a:	708a      	strb	r2, [r1, #2]
 8021d4c:	b005      	add	sp, #20
 8021d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d52:	bf00      	nop
 8021d54:	0802acdd 	.word	0x0802acdd
 8021d58:	0802b1d6 	.word	0x0802b1d6
 8021d5c:	0802ada6 	.word	0x0802ada6

08021d60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d64:	ed2d 8b08 	vpush	{d8-d11}
 8021d68:	b099      	sub	sp, #100	; 0x64
 8021d6a:	eeb0 aa40 	vmov.f32	s20, s0
 8021d6e:	eef0 9a60 	vmov.f32	s19, s1
 8021d72:	9306      	str	r3, [sp, #24]
 8021d74:	eeb0 9a41 	vmov.f32	s18, s2
 8021d78:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8021d7c:	eeb0 8a62 	vmov.f32	s16, s5
 8021d80:	9216      	str	r2, [sp, #88]	; 0x58
 8021d82:	eef0 8a43 	vmov.f32	s17, s6
 8021d86:	9307      	str	r3, [sp, #28]
 8021d88:	eef0 ba44 	vmov.f32	s23, s8
 8021d8c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8021d90:	eeb0 ba64 	vmov.f32	s22, s9
 8021d94:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021d96:	eef0 aa45 	vmov.f32	s21, s10
 8021d9a:	9310      	str	r3, [sp, #64]	; 0x40
 8021d9c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8021da0:	9017      	str	r0, [sp, #92]	; 0x5c
 8021da2:	9112      	str	r1, [sp, #72]	; 0x48
 8021da4:	6850      	ldr	r0, [r2, #4]
 8021da6:	9315      	str	r3, [sp, #84]	; 0x54
 8021da8:	6812      	ldr	r2, [r2, #0]
 8021daa:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8021dac:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8021db0:	fb00 1303 	mla	r3, r0, r3, r1
 8021db4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021db8:	18d3      	adds	r3, r2, r3
 8021dba:	930a      	str	r3, [sp, #40]	; 0x28
 8021dbc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	9311      	str	r3, [sp, #68]	; 0x44
 8021dc2:	9b07      	ldr	r3, [sp, #28]
 8021dc4:	009b      	lsls	r3, r3, #2
 8021dc6:	930e      	str	r3, [sp, #56]	; 0x38
 8021dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021dca:	2b00      	cmp	r3, #0
 8021dcc:	dc03      	bgt.n	8021dd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021dce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021dd0:	2b00      	cmp	r3, #0
 8021dd2:	f340 833b 	ble.w	802244c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021dd6:	9b06      	ldr	r3, [sp, #24]
 8021dd8:	2b00      	cmp	r3, #0
 8021dda:	f340 8197 	ble.w	802210c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8021dde:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021de0:	1423      	asrs	r3, r4, #16
 8021de2:	1412      	asrs	r2, r2, #16
 8021de4:	d432      	bmi.n	8021e4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8021de6:	1c51      	adds	r1, r2, #1
 8021de8:	9807      	ldr	r0, [sp, #28]
 8021dea:	4288      	cmp	r0, r1
 8021dec:	dd31      	ble.n	8021e52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	db2f      	blt.n	8021e52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021df2:	1c59      	adds	r1, r3, #1
 8021df4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021df6:	4288      	cmp	r0, r1
 8021df8:	dd2b      	ble.n	8021e52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021dfa:	9b06      	ldr	r3, [sp, #24]
 8021dfc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021dfe:	3b01      	subs	r3, #1
 8021e00:	992b      	ldr	r1, [sp, #172]	; 0xac
 8021e02:	fb02 1203 	mla	r2, r2, r3, r1
 8021e06:	1412      	asrs	r2, r2, #16
 8021e08:	d42e      	bmi.n	8021e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021e0a:	3201      	adds	r2, #1
 8021e0c:	9907      	ldr	r1, [sp, #28]
 8021e0e:	4291      	cmp	r1, r2
 8021e10:	dd2a      	ble.n	8021e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021e12:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021e14:	fb02 4303 	mla	r3, r2, r3, r4
 8021e18:	141b      	asrs	r3, r3, #16
 8021e1a:	d425      	bmi.n	8021e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021e1c:	3301      	adds	r3, #1
 8021e1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e20:	429a      	cmp	r2, r3
 8021e22:	dd21      	ble.n	8021e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e26:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8021e2a:	f103 0e03 	add.w	lr, r3, #3
 8021e2e:	9b06      	ldr	r3, [sp, #24]
 8021e30:	9313      	str	r3, [sp, #76]	; 0x4c
 8021e32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	f300 81d2 	bgt.w	80221de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8021e3a:	9b06      	ldr	r3, [sp, #24]
 8021e3c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e42:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021e46:	4423      	add	r3, r4
 8021e48:	930a      	str	r3, [sp, #40]	; 0x28
 8021e4a:	e161      	b.n	8022110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8021e4c:	1c51      	adds	r1, r2, #1
 8021e4e:	f040 8150 	bne.w	80220f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021e52:	9907      	ldr	r1, [sp, #28]
 8021e54:	428a      	cmp	r2, r1
 8021e56:	f280 814c 	bge.w	80220f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021e5a:	1c5a      	adds	r2, r3, #1
 8021e5c:	f2c0 8149 	blt.w	80220f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021e60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e62:	4293      	cmp	r3, r2
 8021e64:	f280 8145 	bge.w	80220f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021e68:	9b06      	ldr	r3, [sp, #24]
 8021e6a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021e6c:	9314      	str	r3, [sp, #80]	; 0x50
 8021e6e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8021e72:	9313      	str	r3, [sp, #76]	; 0x4c
 8021e74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021e76:	2b00      	cmp	r3, #0
 8021e78:	dddf      	ble.n	8021e3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8021e7a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021e7c:	1423      	asrs	r3, r4, #16
 8021e7e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021e82:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8021e86:	1412      	asrs	r2, r2, #16
 8021e88:	f100 8190 	bmi.w	80221ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8021e8c:	1c55      	adds	r5, r2, #1
 8021e8e:	9f07      	ldr	r7, [sp, #28]
 8021e90:	42af      	cmp	r7, r5
 8021e92:	f340 818d 	ble.w	80221b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	f2c0 818a 	blt.w	80221b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021e9c:	1c5d      	adds	r5, r3, #1
 8021e9e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021ea0:	42af      	cmp	r7, r5
 8021ea2:	f340 8185 	ble.w	80221b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021ea6:	9d07      	ldr	r5, [sp, #28]
 8021ea8:	fb03 2305 	mla	r3, r3, r5, r2
 8021eac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021eae:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021eb6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021eba:	2800      	cmp	r0, #0
 8021ebc:	f000 8167 	beq.w	802218e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021ec0:	686a      	ldr	r2, [r5, #4]
 8021ec2:	920b      	str	r2, [sp, #44]	; 0x2c
 8021ec4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021ec8:	2900      	cmp	r1, #0
 8021eca:	f000 8169 	beq.w	80221a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8021ece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021ed0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021ed2:	18aa      	adds	r2, r5, r2
 8021ed4:	59ed      	ldr	r5, [r5, r7]
 8021ed6:	6852      	ldr	r2, [r2, #4]
 8021ed8:	9508      	str	r5, [sp, #32]
 8021eda:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8021ede:	0e15      	lsrs	r5, r2, #24
 8021ee0:	920c      	str	r2, [sp, #48]	; 0x30
 8021ee2:	b280      	uxth	r0, r0
 8021ee4:	b289      	uxth	r1, r1
 8021ee6:	fb00 fb01 	mul.w	fp, r0, r1
 8021eea:	0100      	lsls	r0, r0, #4
 8021eec:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8021ef0:	eba0 090b 	sub.w	r9, r0, fp
 8021ef4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8021ef8:	b289      	uxth	r1, r1
 8021efa:	fa1f f989 	uxth.w	r9, r9
 8021efe:	1a52      	subs	r2, r2, r1
 8021f00:	fb09 f008 	mul.w	r0, r9, r8
 8021f04:	b292      	uxth	r2, r2
 8021f06:	fb02 000c 	mla	r0, r2, ip, r0
 8021f0a:	fb01 000a 	mla	r0, r1, sl, r0
 8021f0e:	fb0b 0005 	mla	r0, fp, r5, r0
 8021f12:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021f16:	2800      	cmp	r0, #0
 8021f18:	f000 80e0 	beq.w	80220dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021f1c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021f20:	d01b      	beq.n	8021f5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8021f22:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021f26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f2a:	fb0c fe0e 	mul.w	lr, ip, lr
 8021f2e:	fb0c fc03 	mul.w	ip, ip, r3
 8021f32:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021f36:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021f3a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f3e:	4473      	add	r3, lr
 8021f40:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8021f44:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021f48:	0a1b      	lsrs	r3, r3, #8
 8021f4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f52:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021f56:	ea43 030e 	orr.w	r3, r3, lr
 8021f5a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021f5e:	d01e      	beq.n	8021f9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8021f60:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021f62:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021f66:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8021f6a:	fb08 fc0c 	mul.w	ip, r8, ip
 8021f6e:	fb08 f80e 	mul.w	r8, r8, lr
 8021f72:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021f76:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021f7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f7e:	44e6      	add	lr, ip
 8021f80:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021f84:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021f88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f8c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021f90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f94:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021f98:	ea4e 0708 	orr.w	r7, lr, r8
 8021f9c:	970b      	str	r7, [sp, #44]	; 0x2c
 8021f9e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021fa2:	d01e      	beq.n	8021fe2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021fa4:	9f08      	ldr	r7, [sp, #32]
 8021fa6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021faa:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021fae:	fb0a f808 	mul.w	r8, sl, r8
 8021fb2:	fb0a fa0c 	mul.w	sl, sl, ip
 8021fb6:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021fba:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021fbe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021fc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021fc6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021fca:	44c6      	add	lr, r8
 8021fcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021fd0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021fd4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021fd8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021fdc:	ea4e 070a 	orr.w	r7, lr, sl
 8021fe0:	9708      	str	r7, [sp, #32]
 8021fe2:	2dff      	cmp	r5, #255	; 0xff
 8021fe4:	d01d      	beq.n	8022022 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8021fe6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021fe8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021fec:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021ff0:	fb05 f808 	mul.w	r8, r5, r8
 8021ff4:	fb05 f50c 	mul.w	r5, r5, ip
 8021ff8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021ffc:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8022000:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022004:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022008:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802200c:	44c6      	add	lr, r8
 802200e:	0a2d      	lsrs	r5, r5, #8
 8022010:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022014:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022018:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802201c:	ea4e 0505 	orr.w	r5, lr, r5
 8022020:	950c      	str	r5, [sp, #48]	; 0x30
 8022022:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022024:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022028:	9f08      	ldr	r7, [sp, #32]
 802202a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802202e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022032:	fb09 f505 	mul.w	r5, r9, r5
 8022036:	fb02 550c 	mla	r5, r2, ip, r5
 802203a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802203e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022040:	fb01 550c 	mla	r5, r1, ip, r5
 8022044:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022048:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802204a:	fb0b 550c 	mla	r5, fp, ip, r5
 802204e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022052:	fb09 f90c 	mul.w	r9, r9, ip
 8022056:	0a2d      	lsrs	r5, r5, #8
 8022058:	fb02 9303 	mla	r3, r2, r3, r9
 802205c:	9a08      	ldr	r2, [sp, #32]
 802205e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022062:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022068:	fb01 330e 	mla	r3, r1, lr, r3
 802206c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022070:	fb0b 3b01 	mla	fp, fp, r1, r3
 8022074:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022076:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022078:	4343      	muls	r3, r0
 802207a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802207e:	1c58      	adds	r0, r3, #1
 8022080:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022084:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022088:	ea45 050b 	orr.w	r5, r5, fp
 802208c:	7833      	ldrb	r3, [r6, #0]
 802208e:	b2ea      	uxtb	r2, r5
 8022090:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022094:	fb12 f201 	smulbb	r2, r2, r1
 8022098:	b2c0      	uxtb	r0, r0
 802209a:	fb03 2300 	mla	r3, r3, r0, r2
 802209e:	b29b      	uxth	r3, r3
 80220a0:	1c5a      	adds	r2, r3, #1
 80220a2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80220a6:	7872      	ldrb	r2, [r6, #1]
 80220a8:	fb12 f200 	smulbb	r2, r2, r0
 80220ac:	121b      	asrs	r3, r3, #8
 80220ae:	7033      	strb	r3, [r6, #0]
 80220b0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80220b4:	0c2d      	lsrs	r5, r5, #16
 80220b6:	fb03 2301 	mla	r3, r3, r1, r2
 80220ba:	b29b      	uxth	r3, r3
 80220bc:	1c5a      	adds	r2, r3, #1
 80220be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80220c2:	121b      	asrs	r3, r3, #8
 80220c4:	7073      	strb	r3, [r6, #1]
 80220c6:	78b3      	ldrb	r3, [r6, #2]
 80220c8:	fb13 f000 	smulbb	r0, r3, r0
 80220cc:	fb05 0501 	mla	r5, r5, r1, r0
 80220d0:	b2ad      	uxth	r5, r5
 80220d2:	1c6b      	adds	r3, r5, #1
 80220d4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80220d8:	122d      	asrs	r5, r5, #8
 80220da:	70b5      	strb	r5, [r6, #2]
 80220dc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80220de:	3603      	adds	r6, #3
 80220e0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80220e2:	4413      	add	r3, r2
 80220e4:	932b      	str	r3, [sp, #172]	; 0xac
 80220e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80220e8:	441c      	add	r4, r3
 80220ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80220ec:	3b01      	subs	r3, #1
 80220ee:	9314      	str	r3, [sp, #80]	; 0x50
 80220f0:	e6c0      	b.n	8021e74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80220f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80220f4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80220f6:	4413      	add	r3, r2
 80220f8:	932b      	str	r3, [sp, #172]	; 0xac
 80220fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80220fc:	441c      	add	r4, r3
 80220fe:	9b06      	ldr	r3, [sp, #24]
 8022100:	3b01      	subs	r3, #1
 8022102:	9306      	str	r3, [sp, #24]
 8022104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022106:	3303      	adds	r3, #3
 8022108:	930a      	str	r3, [sp, #40]	; 0x28
 802210a:	e664      	b.n	8021dd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802210c:	f47f ae75 	bne.w	8021dfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8022110:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022112:	2b00      	cmp	r3, #0
 8022114:	f340 819a 	ble.w	802244c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8022118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802211c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802211e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022122:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022126:	eef0 6a48 	vmov.f32	s13, s16
 802212a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802212e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022132:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022136:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802213a:	eef0 6a68 	vmov.f32	s13, s17
 802213e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022142:	ee16 4a90 	vmov	r4, s13
 8022146:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802214a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802214e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022152:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022156:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802215a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802215e:	ee18 2a10 	vmov	r2, s16
 8022162:	eeb0 8a47 	vmov.f32	s16, s14
 8022166:	fb92 f3f3 	sdiv	r3, r2, r3
 802216a:	ee18 2a90 	vmov	r2, s17
 802216e:	932d      	str	r3, [sp, #180]	; 0xb4
 8022170:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022172:	eef0 8a67 	vmov.f32	s17, s15
 8022176:	fb92 f3f3 	sdiv	r3, r2, r3
 802217a:	932e      	str	r3, [sp, #184]	; 0xb8
 802217c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802217e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022180:	3b01      	subs	r3, #1
 8022182:	9312      	str	r3, [sp, #72]	; 0x48
 8022184:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022186:	bf08      	it	eq
 8022188:	4613      	moveq	r3, r2
 802218a:	9306      	str	r3, [sp, #24]
 802218c:	e61c      	b.n	8021dc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802218e:	b151      	cbz	r1, 80221a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022192:	58aa      	ldr	r2, [r5, r2]
 8022194:	25ff      	movs	r5, #255	; 0xff
 8022196:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802219a:	9208      	str	r2, [sp, #32]
 802219c:	46a8      	mov	r8, r5
 802219e:	e6a0      	b.n	8021ee2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80221a0:	25ff      	movs	r5, #255	; 0xff
 80221a2:	46aa      	mov	sl, r5
 80221a4:	e69d      	b.n	8021ee2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80221a6:	25ff      	movs	r5, #255	; 0xff
 80221a8:	46aa      	mov	sl, r5
 80221aa:	e7f7      	b.n	802219c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 80221ac:	1c57      	adds	r7, r2, #1
 80221ae:	d195      	bne.n	80220dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80221b0:	9d07      	ldr	r5, [sp, #28]
 80221b2:	4295      	cmp	r5, r2
 80221b4:	dd92      	ble.n	80220dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80221b6:	1c5d      	adds	r5, r3, #1
 80221b8:	db90      	blt.n	80220dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80221ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80221bc:	429d      	cmp	r5, r3
 80221be:	dd8d      	ble.n	80220dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80221c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80221c2:	9201      	str	r2, [sp, #4]
 80221c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80221c6:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80221ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80221cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80221ce:	9300      	str	r3, [sp, #0]
 80221d0:	9b07      	ldr	r3, [sp, #28]
 80221d2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80221d6:	4631      	mov	r1, r6
 80221d8:	f7ff fc68 	bl	8021aac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80221dc:	e77e      	b.n	80220dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80221de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80221e0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80221e4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80221e6:	9d07      	ldr	r5, [sp, #28]
 80221e8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80221ec:	1412      	asrs	r2, r2, #16
 80221ee:	1423      	asrs	r3, r4, #16
 80221f0:	fb05 2303 	mla	r3, r5, r3, r2
 80221f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80221f6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80221fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80221fe:	0e1e      	lsrs	r6, r3, #24
 8022200:	2900      	cmp	r1, #0
 8022202:	f000 8114 	beq.w	802242e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8022206:	686a      	ldr	r2, [r5, #4]
 8022208:	920d      	str	r2, [sp, #52]	; 0x34
 802220a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802220e:	2800      	cmp	r0, #0
 8022210:	f000 8116 	beq.w	8022440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8022214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022216:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022218:	18aa      	adds	r2, r5, r2
 802221a:	59ed      	ldr	r5, [r5, r7]
 802221c:	6852      	ldr	r2, [r2, #4]
 802221e:	9509      	str	r5, [sp, #36]	; 0x24
 8022220:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022224:	0e15      	lsrs	r5, r2, #24
 8022226:	920f      	str	r2, [sp, #60]	; 0x3c
 8022228:	b289      	uxth	r1, r1
 802222a:	b280      	uxth	r0, r0
 802222c:	fb01 fa00 	mul.w	sl, r1, r0
 8022230:	0109      	lsls	r1, r1, #4
 8022232:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022236:	eba1 080a 	sub.w	r8, r1, sl
 802223a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802223e:	b280      	uxth	r0, r0
 8022240:	fa1f f888 	uxth.w	r8, r8
 8022244:	1a12      	subs	r2, r2, r0
 8022246:	fb08 f10c 	mul.w	r1, r8, ip
 802224a:	b292      	uxth	r2, r2
 802224c:	fb02 1106 	mla	r1, r2, r6, r1
 8022250:	fb00 1109 	mla	r1, r0, r9, r1
 8022254:	fb0a 1105 	mla	r1, sl, r5, r1
 8022258:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802225c:	2900      	cmp	r1, #0
 802225e:	f000 80da 	beq.w	8022416 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022262:	2eff      	cmp	r6, #255	; 0xff
 8022264:	d016      	beq.n	8022294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8022266:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802226a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802226e:	4377      	muls	r7, r6
 8022270:	435e      	muls	r6, r3
 8022272:	0a3b      	lsrs	r3, r7, #8
 8022274:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022278:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802227c:	443b      	add	r3, r7
 802227e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022282:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022286:	0a1b      	lsrs	r3, r3, #8
 8022288:	0a3f      	lsrs	r7, r7, #8
 802228a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802228e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022292:	433b      	orrs	r3, r7
 8022294:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022298:	d01d      	beq.n	80222d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802229a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802229c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802229e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80222a2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80222a6:	fb0c f606 	mul.w	r6, ip, r6
 80222aa:	fb0c fc07 	mul.w	ip, ip, r7
 80222ae:	0a37      	lsrs	r7, r6, #8
 80222b0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80222b4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80222b8:	4437      	add	r7, r6
 80222ba:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80222be:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80222c2:	0a3f      	lsrs	r7, r7, #8
 80222c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80222cc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80222d0:	ea47 060c 	orr.w	r6, r7, ip
 80222d4:	960d      	str	r6, [sp, #52]	; 0x34
 80222d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80222da:	d01d      	beq.n	8022318 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 80222dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80222de:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80222e2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80222e6:	fb09 fc0c 	mul.w	ip, r9, ip
 80222ea:	fb09 f906 	mul.w	r9, r9, r6
 80222ee:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80222f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80222f6:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80222fa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80222fe:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022302:	4467      	add	r7, ip
 8022304:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022308:	0a3f      	lsrs	r7, r7, #8
 802230a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802230e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022312:	ea47 0609 	orr.w	r6, r7, r9
 8022316:	9609      	str	r6, [sp, #36]	; 0x24
 8022318:	2dff      	cmp	r5, #255	; 0xff
 802231a:	d01a      	beq.n	8022352 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 802231c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802231e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022322:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022326:	fb05 fc0c 	mul.w	ip, r5, ip
 802232a:	4375      	muls	r5, r6
 802232c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022330:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022334:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8022338:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802233c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022340:	4467      	add	r7, ip
 8022342:	0a2d      	lsrs	r5, r5, #8
 8022344:	0a3f      	lsrs	r7, r7, #8
 8022346:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802234a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802234e:	433d      	orrs	r5, r7
 8022350:	950f      	str	r5, [sp, #60]	; 0x3c
 8022352:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022354:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8022358:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802235c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022360:	fb08 f505 	mul.w	r5, r8, r5
 8022364:	fb02 5506 	mla	r5, r2, r6, r5
 8022368:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802236a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802236e:	fb00 5506 	mla	r5, r0, r6, r5
 8022372:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022374:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022378:	fb0a 5506 	mla	r5, sl, r6, r5
 802237c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802237e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022382:	0a2d      	lsrs	r5, r5, #8
 8022384:	fb08 f806 	mul.w	r8, r8, r6
 8022388:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802238c:	fb02 8303 	mla	r3, r2, r3, r8
 8022390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022392:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022396:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022398:	fb00 3307 	mla	r3, r0, r7, r3
 802239c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80223a0:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80223a4:	fb01 f30b 	mul.w	r3, r1, fp
 80223a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223ac:	1c59      	adds	r1, r3, #1
 80223ae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80223b2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80223b6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80223ba:	ea45 050c 	orr.w	r5, r5, ip
 80223be:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80223c2:	b2ea      	uxtb	r2, r5
 80223c4:	b2c9      	uxtb	r1, r1
 80223c6:	fb12 f20b 	smulbb	r2, r2, fp
 80223ca:	fb03 2301 	mla	r3, r3, r1, r2
 80223ce:	b29b      	uxth	r3, r3
 80223d0:	1c5a      	adds	r2, r3, #1
 80223d2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80223d6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80223da:	fb12 f201 	smulbb	r2, r2, r1
 80223de:	121b      	asrs	r3, r3, #8
 80223e0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80223e4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80223e8:	0c2d      	lsrs	r5, r5, #16
 80223ea:	fb03 230b 	mla	r3, r3, fp, r2
 80223ee:	b29b      	uxth	r3, r3
 80223f0:	1c5a      	adds	r2, r3, #1
 80223f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80223f6:	121b      	asrs	r3, r3, #8
 80223f8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80223fc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022400:	fb13 f101 	smulbb	r1, r3, r1
 8022404:	fb05 150b 	mla	r5, r5, fp, r1
 8022408:	b2ad      	uxth	r5, r5
 802240a:	1c69      	adds	r1, r5, #1
 802240c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022410:	122d      	asrs	r5, r5, #8
 8022412:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022416:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022418:	f10e 0e03 	add.w	lr, lr, #3
 802241c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802241e:	4413      	add	r3, r2
 8022420:	932b      	str	r3, [sp, #172]	; 0xac
 8022422:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022424:	441c      	add	r4, r3
 8022426:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022428:	3b01      	subs	r3, #1
 802242a:	9313      	str	r3, [sp, #76]	; 0x4c
 802242c:	e501      	b.n	8021e32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802242e:	b150      	cbz	r0, 8022446 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8022430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022432:	58aa      	ldr	r2, [r5, r2]
 8022434:	25ff      	movs	r5, #255	; 0xff
 8022436:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802243a:	9209      	str	r2, [sp, #36]	; 0x24
 802243c:	46ac      	mov	ip, r5
 802243e:	e6f3      	b.n	8022228 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8022440:	25ff      	movs	r5, #255	; 0xff
 8022442:	46a9      	mov	r9, r5
 8022444:	e6f0      	b.n	8022228 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8022446:	25ff      	movs	r5, #255	; 0xff
 8022448:	46a9      	mov	r9, r5
 802244a:	e7f7      	b.n	802243c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 802244c:	b019      	add	sp, #100	; 0x64
 802244e:	ecbd 8b08 	vpop	{d8-d11}
 8022452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022458 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8022458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802245c:	b085      	sub	sp, #20
 802245e:	7888      	ldrb	r0, [r1, #2]
 8022460:	4691      	mov	r9, r2
 8022462:	9000      	str	r0, [sp, #0]
 8022464:	7848      	ldrb	r0, [r1, #1]
 8022466:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802246a:	9001      	str	r0, [sp, #4]
 802246c:	7808      	ldrb	r0, [r1, #0]
 802246e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8022472:	9002      	str	r0, [sp, #8]
 8022474:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022478:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802247c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8022480:	fb04 c603 	mla	r6, r4, r3, ip
 8022484:	2c00      	cmp	r4, #0
 8022486:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802248a:	9a00      	ldr	r2, [sp, #0]
 802248c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022490:	9a01      	ldr	r2, [sp, #4]
 8022492:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8022496:	db3a      	blt.n	802250e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8022498:	45a0      	cmp	r8, r4
 802249a:	dd38      	ble.n	802250e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802249c:	f1bc 0f00 	cmp.w	ip, #0
 80224a0:	db33      	blt.n	802250a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80224a2:	4563      	cmp	r3, ip
 80224a4:	dd31      	ble.n	802250a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80224a6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80224aa:	f11c 0601 	adds.w	r6, ip, #1
 80224ae:	d431      	bmi.n	8022514 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80224b0:	42b3      	cmp	r3, r6
 80224b2:	dd2f      	ble.n	8022514 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80224b4:	b375      	cbz	r5, 8022514 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80224b6:	f8de 6004 	ldr.w	r6, [lr, #4]
 80224ba:	3401      	adds	r4, #1
 80224bc:	d42e      	bmi.n	802251c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80224be:	45a0      	cmp	r8, r4
 80224c0:	dd2c      	ble.n	802251c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80224c2:	b35f      	cbz	r7, 802251c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80224c4:	f1bc 0f00 	cmp.w	ip, #0
 80224c8:	db26      	blt.n	8022518 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80224ca:	4563      	cmp	r3, ip
 80224cc:	dd24      	ble.n	8022518 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80224ce:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80224d2:	f11c 0c01 	adds.w	ip, ip, #1
 80224d6:	d405      	bmi.n	80224e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80224d8:	4563      	cmp	r3, ip
 80224da:	dd03      	ble.n	80224e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80224dc:	b115      	cbz	r5, 80224e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80224de:	3301      	adds	r3, #1
 80224e0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80224e4:	2d0f      	cmp	r5, #15
 80224e6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80224ea:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80224ee:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80224f2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80224f6:	d801      	bhi.n	80224fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 80224f8:	2f0f      	cmp	r7, #15
 80224fa:	d911      	bls.n	8022520 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 80224fc:	4b77      	ldr	r3, [pc, #476]	; (80226dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 80224fe:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022502:	4a77      	ldr	r2, [pc, #476]	; (80226e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8022504:	4877      	ldr	r0, [pc, #476]	; (80226e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8022506:	f003 f831 	bl	802556c <__assert_func>
 802250a:	4602      	mov	r2, r0
 802250c:	e7cd      	b.n	80224aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 802250e:	4606      	mov	r6, r0
 8022510:	4602      	mov	r2, r0
 8022512:	e7d2      	b.n	80224ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022514:	4606      	mov	r6, r0
 8022516:	e7d0      	b.n	80224ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8022518:	4604      	mov	r4, r0
 802251a:	e7da      	b.n	80224d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 802251c:	4604      	mov	r4, r0
 802251e:	e7e1      	b.n	80224e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022520:	b2ab      	uxth	r3, r5
 8022522:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022526:	b2bf      	uxth	r7, r7
 8022528:	fb03 fe07 	mul.w	lr, r3, r7
 802252c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022530:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022534:	eba3 0c0e 	sub.w	ip, r3, lr
 8022538:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802253c:	b2bf      	uxth	r7, r7
 802253e:	fa1f fc8c 	uxth.w	ip, ip
 8022542:	eba5 0507 	sub.w	r5, r5, r7
 8022546:	fb0c f30a 	mul.w	r3, ip, sl
 802254a:	b2ad      	uxth	r5, r5
 802254c:	fb05 330b 	mla	r3, r5, fp, r3
 8022550:	fb07 3309 	mla	r3, r7, r9, r3
 8022554:	fb0e 3308 	mla	r3, lr, r8, r3
 8022558:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802255c:	9303      	str	r3, [sp, #12]
 802255e:	d018      	beq.n	8022592 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8022560:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022564:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022568:	fb0b f303 	mul.w	r3, fp, r3
 802256c:	fb0b fb02 	mul.w	fp, fp, r2
 8022570:	0a1a      	lsrs	r2, r3, #8
 8022572:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8022576:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802257a:	441a      	add	r2, r3
 802257c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022580:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022584:	0a12      	lsrs	r2, r2, #8
 8022586:	0a1b      	lsrs	r3, r3, #8
 8022588:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802258c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022590:	431a      	orrs	r2, r3
 8022592:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022596:	d019      	beq.n	80225cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8022598:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802259c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80225a0:	fb0a fb0b 	mul.w	fp, sl, fp
 80225a4:	fb0a fa06 	mul.w	sl, sl, r6
 80225a8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80225ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80225b0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80225b4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80225b8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80225bc:	445e      	add	r6, fp
 80225be:	0a1b      	lsrs	r3, r3, #8
 80225c0:	0a36      	lsrs	r6, r6, #8
 80225c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80225c6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80225ca:	431e      	orrs	r6, r3
 80225cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80225d0:	d019      	beq.n	8022606 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 80225d2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80225d6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80225da:	fb09 fa0a 	mul.w	sl, r9, sl
 80225de:	fb09 f904 	mul.w	r9, r9, r4
 80225e2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80225e6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80225ea:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80225ee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80225f2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80225f6:	4454      	add	r4, sl
 80225f8:	0a1b      	lsrs	r3, r3, #8
 80225fa:	0a24      	lsrs	r4, r4, #8
 80225fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022600:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022604:	431c      	orrs	r4, r3
 8022606:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802260a:	d019      	beq.n	8022640 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 802260c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022610:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022614:	fb08 f909 	mul.w	r9, r8, r9
 8022618:	fb08 f800 	mul.w	r8, r8, r0
 802261c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022620:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022624:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022628:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802262c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022630:	4448      	add	r0, r9
 8022632:	0a1b      	lsrs	r3, r3, #8
 8022634:	0a00      	lsrs	r0, r0, #8
 8022636:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802263a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802263e:	4318      	orrs	r0, r3
 8022640:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022644:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022648:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802264c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022650:	fb0c f808 	mul.w	r8, ip, r8
 8022654:	fb0c f606 	mul.w	r6, ip, r6
 8022658:	fb05 8803 	mla	r8, r5, r3, r8
 802265c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8022660:	fb05 6202 	mla	r2, r5, r2, r6
 8022664:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022668:	fb07 8803 	mla	r8, r7, r3, r8
 802266c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022670:	fb07 2704 	mla	r7, r7, r4, r2
 8022674:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022678:	fb0e 8303 	mla	r3, lr, r3, r8
 802267c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8022680:	9802      	ldr	r0, [sp, #8]
 8022682:	0a1b      	lsrs	r3, r3, #8
 8022684:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022688:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802268c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022690:	ea43 0e0e 	orr.w	lr, r3, lr
 8022694:	9b03      	ldr	r3, [sp, #12]
 8022696:	43db      	mvns	r3, r3
 8022698:	b2db      	uxtb	r3, r3
 802269a:	4358      	muls	r0, r3
 802269c:	1c42      	adds	r2, r0, #1
 802269e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80226a2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80226a6:	700a      	strb	r2, [r1, #0]
 80226a8:	9a01      	ldr	r2, [sp, #4]
 80226aa:	435a      	muls	r2, r3
 80226ac:	1c50      	adds	r0, r2, #1
 80226ae:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80226b2:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80226b6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80226ba:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80226be:	704a      	strb	r2, [r1, #1]
 80226c0:	9a00      	ldr	r2, [sp, #0]
 80226c2:	435a      	muls	r2, r3
 80226c4:	4613      	mov	r3, r2
 80226c6:	3201      	adds	r2, #1
 80226c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80226cc:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80226d0:	f881 e002 	strb.w	lr, [r1, #2]
 80226d4:	b005      	add	sp, #20
 80226d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226da:	bf00      	nop
 80226dc:	0802acdd 	.word	0x0802acdd
 80226e0:	0802b1d6 	.word	0x0802b1d6
 80226e4:	0802ada6 	.word	0x0802ada6

080226e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80226e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226ec:	ed2d 8b08 	vpush	{d8-d11}
 80226f0:	b097      	sub	sp, #92	; 0x5c
 80226f2:	eeb0 aa40 	vmov.f32	s20, s0
 80226f6:	eef0 9a60 	vmov.f32	s19, s1
 80226fa:	9306      	str	r3, [sp, #24]
 80226fc:	eeb0 9a41 	vmov.f32	s18, s2
 8022700:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8022704:	eeb0 8a62 	vmov.f32	s16, s5
 8022708:	9214      	str	r2, [sp, #80]	; 0x50
 802270a:	eef0 8a43 	vmov.f32	s17, s6
 802270e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022710:	eef0 ba44 	vmov.f32	s23, s8
 8022714:	9307      	str	r3, [sp, #28]
 8022716:	eeb0 ba64 	vmov.f32	s22, s9
 802271a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802271e:	eef0 aa45 	vmov.f32	s21, s10
 8022722:	9015      	str	r0, [sp, #84]	; 0x54
 8022724:	9112      	str	r1, [sp, #72]	; 0x48
 8022726:	6850      	ldr	r0, [r2, #4]
 8022728:	9310      	str	r3, [sp, #64]	; 0x40
 802272a:	6812      	ldr	r2, [r2, #0]
 802272c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802272e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022732:	fb00 1303 	mla	r3, r0, r3, r1
 8022736:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802273a:	18d3      	adds	r3, r2, r3
 802273c:	930a      	str	r3, [sp, #40]	; 0x28
 802273e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022740:	681b      	ldr	r3, [r3, #0]
 8022742:	9311      	str	r3, [sp, #68]	; 0x44
 8022744:	9b07      	ldr	r3, [sp, #28]
 8022746:	009b      	lsls	r3, r3, #2
 8022748:	930e      	str	r3, [sp, #56]	; 0x38
 802274a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802274c:	2b00      	cmp	r3, #0
 802274e:	dc03      	bgt.n	8022758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022752:	2b00      	cmp	r3, #0
 8022754:	f340 832e 	ble.w	8022db4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022758:	9b06      	ldr	r3, [sp, #24]
 802275a:	2b00      	cmp	r3, #0
 802275c:	f340 8186 	ble.w	8022a6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8022760:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022762:	1423      	asrs	r3, r4, #16
 8022764:	1412      	asrs	r2, r2, #16
 8022766:	d42f      	bmi.n	80227c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022768:	1c51      	adds	r1, r2, #1
 802276a:	9807      	ldr	r0, [sp, #28]
 802276c:	4288      	cmp	r0, r1
 802276e:	dd2e      	ble.n	80227ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022770:	2b00      	cmp	r3, #0
 8022772:	db2c      	blt.n	80227ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022774:	1c59      	adds	r1, r3, #1
 8022776:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022778:	4288      	cmp	r0, r1
 802277a:	dd28      	ble.n	80227ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802277c:	9b06      	ldr	r3, [sp, #24]
 802277e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022780:	3b01      	subs	r3, #1
 8022782:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022784:	fb02 1203 	mla	r2, r2, r3, r1
 8022788:	1412      	asrs	r2, r2, #16
 802278a:	d42b      	bmi.n	80227e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802278c:	3201      	adds	r2, #1
 802278e:	9907      	ldr	r1, [sp, #28]
 8022790:	4291      	cmp	r1, r2
 8022792:	dd27      	ble.n	80227e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022794:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022796:	fb02 4303 	mla	r3, r2, r3, r4
 802279a:	141b      	asrs	r3, r3, #16
 802279c:	d422      	bmi.n	80227e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802279e:	3301      	adds	r3, #1
 80227a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80227a2:	429a      	cmp	r2, r3
 80227a4:	dd1e      	ble.n	80227e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80227a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227a8:	f8dd b018 	ldr.w	fp, [sp, #24]
 80227ac:	1cdd      	adds	r5, r3, #3
 80227ae:	f1bb 0f00 	cmp.w	fp, #0
 80227b2:	f300 81c4 	bgt.w	8022b3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80227b6:	9b06      	ldr	r3, [sp, #24]
 80227b8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80227bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80227c2:	4423      	add	r3, r4
 80227c4:	930a      	str	r3, [sp, #40]	; 0x28
 80227c6:	e153      	b.n	8022a70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 80227c8:	1c51      	adds	r1, r2, #1
 80227ca:	f040 8142 	bne.w	8022a52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80227ce:	9907      	ldr	r1, [sp, #28]
 80227d0:	428a      	cmp	r2, r1
 80227d2:	f280 813e 	bge.w	8022a52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80227d6:	1c5a      	adds	r2, r3, #1
 80227d8:	f2c0 813b 	blt.w	8022a52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80227dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80227de:	4293      	cmp	r3, r2
 80227e0:	f280 8137 	bge.w	8022a52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80227e4:	9b06      	ldr	r3, [sp, #24]
 80227e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80227e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80227ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80227ec:	2b00      	cmp	r3, #0
 80227ee:	dde2      	ble.n	80227b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 80227f0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80227f2:	1423      	asrs	r3, r4, #16
 80227f4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80227f6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80227fa:	1409      	asrs	r1, r1, #16
 80227fc:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8022800:	f100 8187 	bmi.w	8022b12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8022804:	1c4e      	adds	r6, r1, #1
 8022806:	9f07      	ldr	r7, [sp, #28]
 8022808:	42b7      	cmp	r7, r6
 802280a:	f340 8184 	ble.w	8022b16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802280e:	2b00      	cmp	r3, #0
 8022810:	f2c0 8181 	blt.w	8022b16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8022814:	1c5e      	adds	r6, r3, #1
 8022816:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022818:	42b7      	cmp	r7, r6
 802281a:	f340 817c 	ble.w	8022b16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802281e:	9e07      	ldr	r6, [sp, #28]
 8022820:	fb03 1306 	mla	r3, r3, r6, r1
 8022824:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022826:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802282a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802282e:	0e1f      	lsrs	r7, r3, #24
 8022830:	2a00      	cmp	r2, #0
 8022832:	f000 815c 	beq.w	8022aee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8022836:	6871      	ldr	r1, [r6, #4]
 8022838:	910b      	str	r1, [sp, #44]	; 0x2c
 802283a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802283e:	2800      	cmp	r0, #0
 8022840:	f000 815e 	beq.w	8022b00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8022844:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022846:	eb06 0c01 	add.w	ip, r6, r1
 802284a:	5876      	ldr	r6, [r6, r1]
 802284c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022850:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022854:	9608      	str	r6, [sp, #32]
 8022856:	0e0e      	lsrs	r6, r1, #24
 8022858:	910c      	str	r1, [sp, #48]	; 0x30
 802285a:	b292      	uxth	r2, r2
 802285c:	b280      	uxth	r0, r0
 802285e:	fb02 fa00 	mul.w	sl, r2, r0
 8022862:	0112      	lsls	r2, r2, #4
 8022864:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022868:	eba2 080a 	sub.w	r8, r2, sl
 802286c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022870:	b280      	uxth	r0, r0
 8022872:	fa1f f888 	uxth.w	r8, r8
 8022876:	1a09      	subs	r1, r1, r0
 8022878:	fb08 f20e 	mul.w	r2, r8, lr
 802287c:	b289      	uxth	r1, r1
 802287e:	fb01 2207 	mla	r2, r1, r7, r2
 8022882:	fb00 2209 	mla	r2, r0, r9, r2
 8022886:	fb0a 2206 	mla	r2, sl, r6, r2
 802288a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802288e:	2a00      	cmp	r2, #0
 8022890:	f000 80d4 	beq.w	8022a3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022894:	2fff      	cmp	r7, #255	; 0xff
 8022896:	d01a      	beq.n	80228ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8022898:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802289c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228a0:	fb07 fc0c 	mul.w	ip, r7, ip
 80228a4:	435f      	muls	r7, r3
 80228a6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80228aa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80228ae:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80228b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80228b6:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80228ba:	4463      	add	r3, ip
 80228bc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80228c0:	0a1b      	lsrs	r3, r3, #8
 80228c2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80228c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80228ca:	ea43 030b 	orr.w	r3, r3, fp
 80228ce:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80228d2:	d01e      	beq.n	8022912 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80228d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80228d6:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80228da:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80228de:	fb0e fb0b 	mul.w	fp, lr, fp
 80228e2:	fb0e fe07 	mul.w	lr, lr, r7
 80228e6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80228ea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80228ee:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80228f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80228f6:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80228fa:	44dc      	add	ip, fp
 80228fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022900:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022904:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022908:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802290c:	ea4c 070e 	orr.w	r7, ip, lr
 8022910:	970b      	str	r7, [sp, #44]	; 0x2c
 8022912:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022916:	d01e      	beq.n	8022956 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022918:	9f08      	ldr	r7, [sp, #32]
 802291a:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802291e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022922:	fb09 fe0e 	mul.w	lr, r9, lr
 8022926:	fb09 f907 	mul.w	r9, r9, r7
 802292a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802292e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022932:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022936:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802293a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802293e:	44f4      	add	ip, lr
 8022940:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022944:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022948:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802294c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022950:	ea4c 0709 	orr.w	r7, ip, r9
 8022954:	9708      	str	r7, [sp, #32]
 8022956:	2eff      	cmp	r6, #255	; 0xff
 8022958:	d01c      	beq.n	8022994 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 802295a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802295c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022960:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022964:	fb06 fe0e 	mul.w	lr, r6, lr
 8022968:	437e      	muls	r6, r7
 802296a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802296e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022972:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022976:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802297a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802297e:	44f4      	add	ip, lr
 8022980:	0a36      	lsrs	r6, r6, #8
 8022982:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022986:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802298a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802298e:	ea4c 0606 	orr.w	r6, ip, r6
 8022992:	960c      	str	r6, [sp, #48]	; 0x30
 8022994:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022996:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802299a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802299e:	2aff      	cmp	r2, #255	; 0xff
 80229a0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80229a4:	fb08 f606 	mul.w	r6, r8, r6
 80229a8:	fb01 6607 	mla	r6, r1, r7, r6
 80229ac:	9f08      	ldr	r7, [sp, #32]
 80229ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80229b2:	fb00 6607 	mla	r6, r0, r7, r6
 80229b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80229b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80229bc:	fb0a 6607 	mla	r6, sl, r7, r6
 80229c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80229c2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80229c6:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80229ca:	fb08 f807 	mul.w	r8, r8, r7
 80229ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80229d2:	fb01 8303 	mla	r3, r1, r3, r8
 80229d6:	9908      	ldr	r1, [sp, #32]
 80229d8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80229dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80229de:	fb00 330c 	mla	r3, r0, ip, r3
 80229e2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80229e6:	fb0a 3a00 	mla	sl, sl, r0, r3
 80229ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80229ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80229f2:	ea46 060a 	orr.w	r6, r6, sl
 80229f6:	b2f0      	uxtb	r0, r6
 80229f8:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80229fc:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022a00:	f000 8084 	beq.w	8022b0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022a04:	43d2      	mvns	r2, r2
 8022a06:	782b      	ldrb	r3, [r5, #0]
 8022a08:	b2d2      	uxtb	r2, r2
 8022a0a:	fb03 f702 	mul.w	r7, r3, r2
 8022a0e:	1c7b      	adds	r3, r7, #1
 8022a10:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022a14:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022a18:	702b      	strb	r3, [r5, #0]
 8022a1a:	786b      	ldrb	r3, [r5, #1]
 8022a1c:	fb03 f002 	mul.w	r0, r3, r2
 8022a20:	1c43      	adds	r3, r0, #1
 8022a22:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022a26:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022a2a:	706b      	strb	r3, [r5, #1]
 8022a2c:	78ab      	ldrb	r3, [r5, #2]
 8022a2e:	4353      	muls	r3, r2
 8022a30:	1c5a      	adds	r2, r3, #1
 8022a32:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022a36:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022a3a:	70ae      	strb	r6, [r5, #2]
 8022a3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022a3e:	3503      	adds	r5, #3
 8022a40:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022a42:	4413      	add	r3, r2
 8022a44:	9329      	str	r3, [sp, #164]	; 0xa4
 8022a46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a48:	441c      	add	r4, r3
 8022a4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022a4c:	3b01      	subs	r3, #1
 8022a4e:	9313      	str	r3, [sp, #76]	; 0x4c
 8022a50:	e6cb      	b.n	80227ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022a52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022a54:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022a56:	4413      	add	r3, r2
 8022a58:	9329      	str	r3, [sp, #164]	; 0xa4
 8022a5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a5c:	441c      	add	r4, r3
 8022a5e:	9b06      	ldr	r3, [sp, #24]
 8022a60:	3b01      	subs	r3, #1
 8022a62:	9306      	str	r3, [sp, #24]
 8022a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a66:	3303      	adds	r3, #3
 8022a68:	930a      	str	r3, [sp, #40]	; 0x28
 8022a6a:	e675      	b.n	8022758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022a6c:	f47f ae86 	bne.w	802277c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	f340 819e 	ble.w	8022db4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022a78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022a7e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022a82:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022a86:	eef0 6a48 	vmov.f32	s13, s16
 8022a8a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022a8e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022a92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a96:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022a9a:	eef0 6a68 	vmov.f32	s13, s17
 8022a9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022aa2:	ee16 4a90 	vmov	r4, s13
 8022aa6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022aaa:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022aae:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022ab2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022ab6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022aba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022abe:	ee18 2a10 	vmov	r2, s16
 8022ac2:	eeb0 8a47 	vmov.f32	s16, s14
 8022ac6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022aca:	ee18 2a90 	vmov	r2, s17
 8022ace:	932b      	str	r3, [sp, #172]	; 0xac
 8022ad0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022ad2:	eef0 8a67 	vmov.f32	s17, s15
 8022ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ada:	932c      	str	r3, [sp, #176]	; 0xb0
 8022adc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022ade:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022ae0:	3b01      	subs	r3, #1
 8022ae2:	9312      	str	r3, [sp, #72]	; 0x48
 8022ae4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022ae6:	bf08      	it	eq
 8022ae8:	4613      	moveq	r3, r2
 8022aea:	9306      	str	r3, [sp, #24]
 8022aec:	e62d      	b.n	802274a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8022aee:	b150      	cbz	r0, 8022b06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022af0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022af2:	5871      	ldr	r1, [r6, r1]
 8022af4:	26ff      	movs	r6, #255	; 0xff
 8022af6:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022afa:	9108      	str	r1, [sp, #32]
 8022afc:	46b6      	mov	lr, r6
 8022afe:	e6ac      	b.n	802285a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022b00:	26ff      	movs	r6, #255	; 0xff
 8022b02:	46b1      	mov	r9, r6
 8022b04:	e6a9      	b.n	802285a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022b06:	26ff      	movs	r6, #255	; 0xff
 8022b08:	46b1      	mov	r9, r6
 8022b0a:	e7f7      	b.n	8022afc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022b0c:	7028      	strb	r0, [r5, #0]
 8022b0e:	7069      	strb	r1, [r5, #1]
 8022b10:	e793      	b.n	8022a3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8022b12:	1c4f      	adds	r7, r1, #1
 8022b14:	d192      	bne.n	8022a3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022b16:	9e07      	ldr	r6, [sp, #28]
 8022b18:	428e      	cmp	r6, r1
 8022b1a:	dd8f      	ble.n	8022a3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022b1c:	1c5e      	adds	r6, r3, #1
 8022b1e:	db8d      	blt.n	8022a3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022b20:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022b22:	429e      	cmp	r6, r3
 8022b24:	dd8a      	ble.n	8022a3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022b26:	9600      	str	r6, [sp, #0]
 8022b28:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8022b2c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8022b30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022b32:	4629      	mov	r1, r5
 8022b34:	9b07      	ldr	r3, [sp, #28]
 8022b36:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022b38:	f7ff fc8e 	bl	8022458 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022b3c:	e77e      	b.n	8022a3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022b3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022b40:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022b44:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022b46:	9e07      	ldr	r6, [sp, #28]
 8022b48:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022b4c:	1409      	asrs	r1, r1, #16
 8022b4e:	1423      	asrs	r3, r4, #16
 8022b50:	fb06 1303 	mla	r3, r6, r3, r1
 8022b54:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022b56:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022b5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8022b5e:	0e1f      	lsrs	r7, r3, #24
 8022b60:	2a00      	cmp	r2, #0
 8022b62:	f000 8113 	beq.w	8022d8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8022b66:	6871      	ldr	r1, [r6, #4]
 8022b68:	910d      	str	r1, [sp, #52]	; 0x34
 8022b6a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8022b6e:	2800      	cmp	r0, #0
 8022b70:	f000 8115 	beq.w	8022d9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022b74:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022b76:	eb06 0c01 	add.w	ip, r6, r1
 8022b7a:	5876      	ldr	r6, [r6, r1]
 8022b7c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022b80:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022b84:	9609      	str	r6, [sp, #36]	; 0x24
 8022b86:	0e0e      	lsrs	r6, r1, #24
 8022b88:	910f      	str	r1, [sp, #60]	; 0x3c
 8022b8a:	b292      	uxth	r2, r2
 8022b8c:	b280      	uxth	r0, r0
 8022b8e:	fb02 fa00 	mul.w	sl, r2, r0
 8022b92:	0112      	lsls	r2, r2, #4
 8022b94:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022b98:	eba2 080a 	sub.w	r8, r2, sl
 8022b9c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022ba0:	b280      	uxth	r0, r0
 8022ba2:	fa1f f888 	uxth.w	r8, r8
 8022ba6:	1a09      	subs	r1, r1, r0
 8022ba8:	fb08 f20e 	mul.w	r2, r8, lr
 8022bac:	b289      	uxth	r1, r1
 8022bae:	fb01 2207 	mla	r2, r1, r7, r2
 8022bb2:	fb00 2209 	mla	r2, r0, r9, r2
 8022bb6:	fb0a 2206 	mla	r2, sl, r6, r2
 8022bba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022bbe:	2a00      	cmp	r2, #0
 8022bc0:	f000 80da 	beq.w	8022d78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022bc4:	2fff      	cmp	r7, #255	; 0xff
 8022bc6:	d01a      	beq.n	8022bfe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022bc8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022bcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022bd0:	fb07 fc0c 	mul.w	ip, r7, ip
 8022bd4:	435f      	muls	r7, r3
 8022bd6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022bda:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022bde:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022be2:	4463      	add	r3, ip
 8022be4:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022be8:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022bec:	0a1b      	lsrs	r3, r3, #8
 8022bee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022bf2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022bf6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022bfa:	ea43 030c 	orr.w	r3, r3, ip
 8022bfe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022c02:	d021      	beq.n	8022c48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8022c04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022c06:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022c0a:	fb0e f707 	mul.w	r7, lr, r7
 8022c0e:	9713      	str	r7, [sp, #76]	; 0x4c
 8022c10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022c12:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022c16:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022c18:	fb0e fe0c 	mul.w	lr, lr, ip
 8022c1c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022c20:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022c24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c28:	44bc      	add	ip, r7
 8022c2a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022c2e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022c32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c3e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022c42:	ea4c 070e 	orr.w	r7, ip, lr
 8022c46:	970d      	str	r7, [sp, #52]	; 0x34
 8022c48:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022c4c:	d01e      	beq.n	8022c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8022c4e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022c50:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022c54:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022c58:	fb09 fe0e 	mul.w	lr, r9, lr
 8022c5c:	fb09 f907 	mul.w	r9, r9, r7
 8022c60:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022c64:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022c68:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022c6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c70:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022c74:	44f4      	add	ip, lr
 8022c76:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022c7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c7e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022c82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c86:	ea4c 0709 	orr.w	r7, ip, r9
 8022c8a:	9709      	str	r7, [sp, #36]	; 0x24
 8022c8c:	2eff      	cmp	r6, #255	; 0xff
 8022c8e:	d01c      	beq.n	8022cca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8022c90:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022c92:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022c96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022c9a:	fb06 fe0e 	mul.w	lr, r6, lr
 8022c9e:	437e      	muls	r6, r7
 8022ca0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022ca4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022ca8:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022cac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022cb0:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022cb4:	44f4      	add	ip, lr
 8022cb6:	0a36      	lsrs	r6, r6, #8
 8022cb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022cbc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022cc0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022cc4:	ea4c 0606 	orr.w	r6, ip, r6
 8022cc8:	960f      	str	r6, [sp, #60]	; 0x3c
 8022cca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022ccc:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022cd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022cd4:	2aff      	cmp	r2, #255	; 0xff
 8022cd6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022cda:	fb08 f606 	mul.w	r6, r8, r6
 8022cde:	fb01 6607 	mla	r6, r1, r7, r6
 8022ce2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022ce4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022ce8:	fb00 6607 	mla	r6, r0, r7, r6
 8022cec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022cee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022cf2:	fb0a 6607 	mla	r6, sl, r7, r6
 8022cf6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022cf8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022cfc:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022d00:	fb08 f807 	mul.w	r8, r8, r7
 8022d04:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022d08:	fb01 8303 	mla	r3, r1, r3, r8
 8022d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022d0e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022d12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022d14:	fb00 330c 	mla	r3, r0, ip, r3
 8022d18:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022d1c:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8022d20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d24:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022d28:	ea46 060e 	orr.w	r6, r6, lr
 8022d2c:	b2f0      	uxtb	r0, r6
 8022d2e:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022d32:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022d36:	d038      	beq.n	8022daa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8022d38:	43d2      	mvns	r2, r2
 8022d3a:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8022d3e:	b2d2      	uxtb	r2, r2
 8022d40:	4357      	muls	r7, r2
 8022d42:	1c7b      	adds	r3, r7, #1
 8022d44:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022d48:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022d4c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8022d50:	4350      	muls	r0, r2
 8022d52:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022d56:	1c43      	adds	r3, r0, #1
 8022d58:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022d5c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022d60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022d64:	4353      	muls	r3, r2
 8022d66:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022d6a:	1c5a      	adds	r2, r3, #1
 8022d6c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022d70:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022d74:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022d78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022d7a:	3503      	adds	r5, #3
 8022d7c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022d7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022d82:	4413      	add	r3, r2
 8022d84:	9329      	str	r3, [sp, #164]	; 0xa4
 8022d86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022d88:	441c      	add	r4, r3
 8022d8a:	e510      	b.n	80227ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8022d8c:	b150      	cbz	r0, 8022da4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8022d8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022d90:	5871      	ldr	r1, [r6, r1]
 8022d92:	26ff      	movs	r6, #255	; 0xff
 8022d94:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022d98:	9109      	str	r1, [sp, #36]	; 0x24
 8022d9a:	46b6      	mov	lr, r6
 8022d9c:	e6f5      	b.n	8022b8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022d9e:	26ff      	movs	r6, #255	; 0xff
 8022da0:	46b1      	mov	r9, r6
 8022da2:	e6f2      	b.n	8022b8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022da4:	26ff      	movs	r6, #255	; 0xff
 8022da6:	46b1      	mov	r9, r6
 8022da8:	e7f7      	b.n	8022d9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8022daa:	f805 0c03 	strb.w	r0, [r5, #-3]
 8022dae:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022db2:	e7df      	b.n	8022d74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8022db4:	b017      	add	sp, #92	; 0x5c
 8022db6:	ecbd 8b08 	vpop	{d8-d11}
 8022dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022dc0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dc4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022dc8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022dcc:	2800      	cmp	r0, #0
 8022dce:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022dd2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022dd6:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022dda:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022dde:	db6b      	blt.n	8022eb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022de0:	4580      	cmp	r8, r0
 8022de2:	dd69      	ble.n	8022eb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022de4:	f1bc 0f00 	cmp.w	ip, #0
 8022de8:	db66      	blt.n	8022eb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022dea:	45e1      	cmp	r9, ip
 8022dec:	dd64      	ble.n	8022eb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022dee:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022df2:	f01e 0f01 	tst.w	lr, #1
 8022df6:	5d16      	ldrb	r6, [r2, r4]
 8022df8:	bf0c      	ite	eq
 8022dfa:	f006 060f 	andeq.w	r6, r6, #15
 8022dfe:	1136      	asrne	r6, r6, #4
 8022e00:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022e04:	b2f6      	uxtb	r6, r6
 8022e06:	f110 0a01 	adds.w	sl, r0, #1
 8022e0a:	d457      	bmi.n	8022ebc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022e0c:	45d0      	cmp	r8, sl
 8022e0e:	dd55      	ble.n	8022ebc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022e10:	f1bc 0f00 	cmp.w	ip, #0
 8022e14:	db52      	blt.n	8022ebc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022e16:	45e1      	cmp	r9, ip
 8022e18:	dd50      	ble.n	8022ebc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022e1a:	2f00      	cmp	r7, #0
 8022e1c:	f000 80ac 	beq.w	8022f78 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8022e20:	f10e 0b01 	add.w	fp, lr, #1
 8022e24:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022e28:	f01b 0f01 	tst.w	fp, #1
 8022e2c:	5d14      	ldrb	r4, [r2, r4]
 8022e2e:	bf0c      	ite	eq
 8022e30:	f004 040f 	andeq.w	r4, r4, #15
 8022e34:	1124      	asrne	r4, r4, #4
 8022e36:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022e3a:	b2e4      	uxtb	r4, r4
 8022e3c:	2d00      	cmp	r5, #0
 8022e3e:	f000 8096 	beq.w	8022f6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8022e42:	2800      	cmp	r0, #0
 8022e44:	f10c 0c01 	add.w	ip, ip, #1
 8022e48:	db3c      	blt.n	8022ec4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022e4a:	4580      	cmp	r8, r0
 8022e4c:	dd3a      	ble.n	8022ec4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022e4e:	f1bc 0f00 	cmp.w	ip, #0
 8022e52:	db37      	blt.n	8022ec4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022e54:	45e1      	cmp	r9, ip
 8022e56:	dd35      	ble.n	8022ec4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022e58:	eb03 0b0e 	add.w	fp, r3, lr
 8022e5c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022e60:	f01b 0f01 	tst.w	fp, #1
 8022e64:	5c10      	ldrb	r0, [r2, r0]
 8022e66:	bf0c      	ite	eq
 8022e68:	f000 000f 	andeq.w	r0, r0, #15
 8022e6c:	1100      	asrne	r0, r0, #4
 8022e6e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022e72:	b2c0      	uxtb	r0, r0
 8022e74:	f1ba 0f00 	cmp.w	sl, #0
 8022e78:	db26      	blt.n	8022ec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022e7a:	45d0      	cmp	r8, sl
 8022e7c:	dd24      	ble.n	8022ec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022e7e:	f1bc 0f00 	cmp.w	ip, #0
 8022e82:	db21      	blt.n	8022ec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022e84:	45e1      	cmp	r9, ip
 8022e86:	dd1f      	ble.n	8022ec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022e88:	b307      	cbz	r7, 8022ecc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8022e8a:	3301      	adds	r3, #1
 8022e8c:	449e      	add	lr, r3
 8022e8e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022e92:	f01e 0f01 	tst.w	lr, #1
 8022e96:	5cd3      	ldrb	r3, [r2, r3]
 8022e98:	bf0c      	ite	eq
 8022e9a:	f003 030f 	andeq.w	r3, r3, #15
 8022e9e:	111b      	asrne	r3, r3, #4
 8022ea0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ea4:	b2db      	uxtb	r3, r3
 8022ea6:	2f0f      	cmp	r7, #15
 8022ea8:	d911      	bls.n	8022ece <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8022eaa:	4b35      	ldr	r3, [pc, #212]	; (8022f80 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8022eac:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022eb0:	4a34      	ldr	r2, [pc, #208]	; (8022f84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8022eb2:	4835      	ldr	r0, [pc, #212]	; (8022f88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8022eb4:	f002 fb5a 	bl	802556c <__assert_func>
 8022eb8:	2600      	movs	r6, #0
 8022eba:	e7a4      	b.n	8022e06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8022ebc:	2400      	movs	r4, #0
 8022ebe:	e7bd      	b.n	8022e3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8022ec0:	463c      	mov	r4, r7
 8022ec2:	e7be      	b.n	8022e42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8022ec4:	2000      	movs	r0, #0
 8022ec6:	e7d5      	b.n	8022e74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8022ec8:	2300      	movs	r3, #0
 8022eca:	e7ec      	b.n	8022ea6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8022ecc:	463b      	mov	r3, r7
 8022ece:	2d0f      	cmp	r5, #15
 8022ed0:	d8eb      	bhi.n	8022eaa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022ed2:	b2bf      	uxth	r7, r7
 8022ed4:	b2ad      	uxth	r5, r5
 8022ed6:	fb07 f205 	mul.w	r2, r7, r5
 8022eda:	013f      	lsls	r7, r7, #4
 8022edc:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022ee0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022ee4:	1abf      	subs	r7, r7, r2
 8022ee6:	b2ad      	uxth	r5, r5
 8022ee8:	b2bf      	uxth	r7, r7
 8022eea:	ebac 0c05 	sub.w	ip, ip, r5
 8022eee:	437c      	muls	r4, r7
 8022ef0:	fa1f fc8c 	uxth.w	ip, ip
 8022ef4:	fb06 440c 	mla	r4, r6, ip, r4
 8022ef8:	fb05 4400 	mla	r4, r5, r0, r4
 8022efc:	fb02 4203 	mla	r2, r2, r3, r4
 8022f00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022f04:	b38a      	cbz	r2, 8022f6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8022f06:	4b21      	ldr	r3, [pc, #132]	; (8022f8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8022f08:	681c      	ldr	r4, [r3, #0]
 8022f0a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8022f0e:	b2e5      	uxtb	r5, r4
 8022f10:	4353      	muls	r3, r2
 8022f12:	1c5a      	adds	r2, r3, #1
 8022f14:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022f18:	1212      	asrs	r2, r2, #8
 8022f1a:	b290      	uxth	r0, r2
 8022f1c:	43d2      	mvns	r2, r2
 8022f1e:	fb15 f500 	smulbb	r5, r5, r0
 8022f22:	b2d3      	uxtb	r3, r2
 8022f24:	780a      	ldrb	r2, [r1, #0]
 8022f26:	fb02 5203 	mla	r2, r2, r3, r5
 8022f2a:	b292      	uxth	r2, r2
 8022f2c:	1c55      	adds	r5, r2, #1
 8022f2e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022f32:	784d      	ldrb	r5, [r1, #1]
 8022f34:	fb15 f503 	smulbb	r5, r5, r3
 8022f38:	1212      	asrs	r2, r2, #8
 8022f3a:	700a      	strb	r2, [r1, #0]
 8022f3c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022f40:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022f44:	fb02 5200 	mla	r2, r2, r0, r5
 8022f48:	b292      	uxth	r2, r2
 8022f4a:	1c55      	adds	r5, r2, #1
 8022f4c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022f50:	1212      	asrs	r2, r2, #8
 8022f52:	704a      	strb	r2, [r1, #1]
 8022f54:	788a      	ldrb	r2, [r1, #2]
 8022f56:	fb12 f303 	smulbb	r3, r2, r3
 8022f5a:	fb04 3300 	mla	r3, r4, r0, r3
 8022f5e:	b29b      	uxth	r3, r3
 8022f60:	1c5a      	adds	r2, r3, #1
 8022f62:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022f66:	121b      	asrs	r3, r3, #8
 8022f68:	708b      	strb	r3, [r1, #2]
 8022f6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f6e:	2f0f      	cmp	r7, #15
 8022f70:	d89b      	bhi.n	8022eaa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022f72:	462b      	mov	r3, r5
 8022f74:	4628      	mov	r0, r5
 8022f76:	e7ac      	b.n	8022ed2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8022f78:	2d00      	cmp	r5, #0
 8022f7a:	d1a1      	bne.n	8022ec0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8022f7c:	462c      	mov	r4, r5
 8022f7e:	e7f8      	b.n	8022f72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8022f80:	0802acdd 	.word	0x0802acdd
 8022f84:	0802b1d6 	.word	0x0802b1d6
 8022f88:	0802ada6 	.word	0x0802ada6
 8022f8c:	2000bbb8 	.word	0x2000bbb8

08022f90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f94:	ed2d 8b08 	vpush	{d8-d11}
 8022f98:	b097      	sub	sp, #92	; 0x5c
 8022f9a:	eeb0 aa40 	vmov.f32	s20, s0
 8022f9e:	eef0 9a60 	vmov.f32	s19, s1
 8022fa2:	9308      	str	r3, [sp, #32]
 8022fa4:	eeb0 9a41 	vmov.f32	s18, s2
 8022fa8:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8022fac:	eeb0 8a62 	vmov.f32	s16, s5
 8022fb0:	9214      	str	r2, [sp, #80]	; 0x50
 8022fb2:	eef0 8a43 	vmov.f32	s17, s6
 8022fb6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022fb8:	eef0 ba44 	vmov.f32	s23, s8
 8022fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8022fbe:	eeb0 ba64 	vmov.f32	s22, s9
 8022fc2:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022fc6:	eef0 aa45 	vmov.f32	s21, s10
 8022fca:	9015      	str	r0, [sp, #84]	; 0x54
 8022fcc:	910c      	str	r1, [sp, #48]	; 0x30
 8022fce:	930e      	str	r3, [sp, #56]	; 0x38
 8022fd0:	6850      	ldr	r0, [r2, #4]
 8022fd2:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8022fd6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022fda:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8022fde:	fb00 1803 	mla	r8, r0, r3, r1
 8022fe2:	6813      	ldr	r3, [r2, #0]
 8022fe4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022fe8:	4498      	add	r8, r3
 8022fea:	f10b 0301 	add.w	r3, fp, #1
 8022fee:	f023 0301 	bic.w	r3, r3, #1
 8022ff2:	930f      	str	r3, [sp, #60]	; 0x3c
 8022ff4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022ff6:	681f      	ldr	r7, [r3, #0]
 8022ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ffa:	2b00      	cmp	r3, #0
 8022ffc:	dc03      	bgt.n	8023006 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022ffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023000:	2b00      	cmp	r3, #0
 8023002:	f340 8238 	ble.w	8023476 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023006:	9b08      	ldr	r3, [sp, #32]
 8023008:	2b00      	cmp	r3, #0
 802300a:	f340 810c 	ble.w	8023226 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802300e:	142a      	asrs	r2, r5, #16
 8023010:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023014:	d42c      	bmi.n	8023070 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8023016:	1c51      	adds	r1, r2, #1
 8023018:	458b      	cmp	fp, r1
 802301a:	dd2c      	ble.n	8023076 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802301c:	2b00      	cmp	r3, #0
 802301e:	db2a      	blt.n	8023076 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023020:	1c59      	adds	r1, r3, #1
 8023022:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023024:	4288      	cmp	r0, r1
 8023026:	dd26      	ble.n	8023076 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023028:	9b08      	ldr	r3, [sp, #32]
 802302a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802302c:	3b01      	subs	r3, #1
 802302e:	fb02 5203 	mla	r2, r2, r3, r5
 8023032:	1412      	asrs	r2, r2, #16
 8023034:	d429      	bmi.n	802308a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023036:	3201      	adds	r2, #1
 8023038:	4593      	cmp	fp, r2
 802303a:	dd26      	ble.n	802308a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802303c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802303e:	fb02 6303 	mla	r3, r2, r3, r6
 8023042:	141b      	asrs	r3, r3, #16
 8023044:	d421      	bmi.n	802308a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8023046:	3301      	adds	r3, #1
 8023048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802304a:	429a      	cmp	r2, r3
 802304c:	dd1d      	ble.n	802308a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802304e:	f108 0e03 	add.w	lr, r8, #3
 8023052:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023056:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802305a:	f1b9 0f00 	cmp.w	r9, #0
 802305e:	f300 814f 	bgt.w	8023300 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8023062:	9b08      	ldr	r3, [sp, #32]
 8023064:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023068:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802306c:	44a0      	add	r8, r4
 802306e:	e0dc      	b.n	802322a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8023070:	1c51      	adds	r1, r2, #1
 8023072:	f040 80ce 	bne.w	8023212 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023076:	4593      	cmp	fp, r2
 8023078:	f340 80cb 	ble.w	8023212 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802307c:	1c5a      	adds	r2, r3, #1
 802307e:	f2c0 80c8 	blt.w	8023212 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023084:	4293      	cmp	r3, r2
 8023086:	f280 80c4 	bge.w	8023212 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802308a:	9b08      	ldr	r3, [sp, #32]
 802308c:	46c1      	mov	r9, r8
 802308e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8023092:	930d      	str	r3, [sp, #52]	; 0x34
 8023094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023096:	2b00      	cmp	r3, #0
 8023098:	dde3      	ble.n	8023062 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802309a:	1428      	asrs	r0, r5, #16
 802309c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80230a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80230a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80230a8:	f100 8111 	bmi.w	80232ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80230ac:	f100 0c01 	add.w	ip, r0, #1
 80230b0:	45e3      	cmp	fp, ip
 80230b2:	f340 810e 	ble.w	80232d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80230b6:	2b00      	cmp	r3, #0
 80230b8:	f2c0 810b 	blt.w	80232d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80230bc:	f103 0c01 	add.w	ip, r3, #1
 80230c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80230c2:	4564      	cmp	r4, ip
 80230c4:	f340 8105 	ble.w	80232d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80230c8:	fb03 030a 	mla	r3, r3, sl, r0
 80230cc:	0858      	lsrs	r0, r3, #1
 80230ce:	07dc      	lsls	r4, r3, #31
 80230d0:	5c38      	ldrb	r0, [r7, r0]
 80230d2:	bf54      	ite	pl
 80230d4:	f000 000f 	andpl.w	r0, r0, #15
 80230d8:	1100      	asrmi	r0, r0, #4
 80230da:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80230de:	b2c0      	uxtb	r0, r0
 80230e0:	2a00      	cmp	r2, #0
 80230e2:	f000 80e1 	beq.w	80232a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 80230e6:	f103 0e01 	add.w	lr, r3, #1
 80230ea:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80230ee:	f01e 0f01 	tst.w	lr, #1
 80230f2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80230f6:	bf0c      	ite	eq
 80230f8:	f00c 0c0f 	andeq.w	ip, ip, #15
 80230fc:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023100:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023104:	fa5f f48c 	uxtb.w	r4, ip
 8023108:	9410      	str	r4, [sp, #64]	; 0x40
 802310a:	b1f9      	cbz	r1, 802314c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802310c:	4453      	add	r3, sl
 802310e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023112:	07dc      	lsls	r4, r3, #31
 8023114:	f103 0301 	add.w	r3, r3, #1
 8023118:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802311c:	bf54      	ite	pl
 802311e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023122:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023126:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802312a:	fa5f f48c 	uxtb.w	r4, ip
 802312e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023132:	940a      	str	r4, [sp, #40]	; 0x28
 8023134:	07dc      	lsls	r4, r3, #31
 8023136:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802313a:	bf54      	ite	pl
 802313c:	f00c 030f 	andpl.w	r3, ip, #15
 8023140:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023144:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023148:	b2db      	uxtb	r3, r3
 802314a:	9311      	str	r3, [sp, #68]	; 0x44
 802314c:	b292      	uxth	r2, r2
 802314e:	b289      	uxth	r1, r1
 8023150:	0113      	lsls	r3, r2, #4
 8023152:	fb02 fc01 	mul.w	ip, r2, r1
 8023156:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023158:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802315c:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8023160:	eba3 030c 	sub.w	r3, r3, ip
 8023164:	b289      	uxth	r1, r1
 8023166:	b29b      	uxth	r3, r3
 8023168:	ebae 0e01 	sub.w	lr, lr, r1
 802316c:	4353      	muls	r3, r2
 802316e:	fa1f fe8e 	uxth.w	lr, lr
 8023172:	fb00 320e 	mla	r2, r0, lr, r3
 8023176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023178:	fb01 2203 	mla	r2, r1, r3, r2
 802317c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802317e:	fb0c 2203 	mla	r2, ip, r3, r2
 8023182:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023186:	2a00      	cmp	r2, #0
 8023188:	d039      	beq.n	80231fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802318a:	4bbd      	ldr	r3, [pc, #756]	; (8023480 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802318c:	6819      	ldr	r1, [r3, #0]
 802318e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023190:	fa5f fc81 	uxtb.w	ip, r1
 8023194:	435a      	muls	r2, r3
 8023196:	1c53      	adds	r3, r2, #1
 8023198:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802319c:	1212      	asrs	r2, r2, #8
 802319e:	b290      	uxth	r0, r2
 80231a0:	43d2      	mvns	r2, r2
 80231a2:	fb1c fc00 	smulbb	ip, ip, r0
 80231a6:	b2d3      	uxtb	r3, r2
 80231a8:	f899 2000 	ldrb.w	r2, [r9]
 80231ac:	fb02 c203 	mla	r2, r2, r3, ip
 80231b0:	b292      	uxth	r2, r2
 80231b2:	f102 0c01 	add.w	ip, r2, #1
 80231b6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80231ba:	f899 c001 	ldrb.w	ip, [r9, #1]
 80231be:	fb1c fc03 	smulbb	ip, ip, r3
 80231c2:	1212      	asrs	r2, r2, #8
 80231c4:	f889 2000 	strb.w	r2, [r9]
 80231c8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80231cc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80231d0:	fb02 c200 	mla	r2, r2, r0, ip
 80231d4:	b292      	uxth	r2, r2
 80231d6:	f102 0c01 	add.w	ip, r2, #1
 80231da:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80231de:	1212      	asrs	r2, r2, #8
 80231e0:	f889 2001 	strb.w	r2, [r9, #1]
 80231e4:	f899 2002 	ldrb.w	r2, [r9, #2]
 80231e8:	fb12 f303 	smulbb	r3, r2, r3
 80231ec:	fb01 3300 	mla	r3, r1, r0, r3
 80231f0:	b29b      	uxth	r3, r3
 80231f2:	1c5a      	adds	r2, r3, #1
 80231f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80231f8:	121b      	asrs	r3, r3, #8
 80231fa:	f889 3002 	strb.w	r3, [r9, #2]
 80231fe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023200:	f109 0903 	add.w	r9, r9, #3
 8023204:	441d      	add	r5, r3
 8023206:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023208:	441e      	add	r6, r3
 802320a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802320c:	3b01      	subs	r3, #1
 802320e:	930d      	str	r3, [sp, #52]	; 0x34
 8023210:	e740      	b.n	8023094 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8023212:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023214:	f108 0803 	add.w	r8, r8, #3
 8023218:	441d      	add	r5, r3
 802321a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802321c:	441e      	add	r6, r3
 802321e:	9b08      	ldr	r3, [sp, #32]
 8023220:	3b01      	subs	r3, #1
 8023222:	9308      	str	r3, [sp, #32]
 8023224:	e6ef      	b.n	8023006 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8023226:	f47f aeff 	bne.w	8023028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802322a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802322c:	2b00      	cmp	r3, #0
 802322e:	f340 8122 	ble.w	8023476 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023236:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023238:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802323c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023240:	eef0 6a48 	vmov.f32	s13, s16
 8023244:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023248:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802324c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023250:	ee16 5a90 	vmov	r5, s13
 8023254:	eef0 6a68 	vmov.f32	s13, s17
 8023258:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802325c:	ee16 6a90 	vmov	r6, s13
 8023260:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023264:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023268:	ee37 8a48 	vsub.f32	s16, s14, s16
 802326c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023270:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023274:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023278:	ee18 2a10 	vmov	r2, s16
 802327c:	eeb0 8a47 	vmov.f32	s16, s14
 8023280:	fb92 f3f3 	sdiv	r3, r2, r3
 8023284:	ee18 2a90 	vmov	r2, s17
 8023288:	932b      	str	r3, [sp, #172]	; 0xac
 802328a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802328c:	eef0 8a67 	vmov.f32	s17, s15
 8023290:	fb92 f3f3 	sdiv	r3, r2, r3
 8023294:	932c      	str	r3, [sp, #176]	; 0xb0
 8023296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023298:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802329a:	3b01      	subs	r3, #1
 802329c:	930c      	str	r3, [sp, #48]	; 0x30
 802329e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80232a0:	bf08      	it	eq
 80232a2:	4613      	moveq	r3, r2
 80232a4:	9308      	str	r3, [sp, #32]
 80232a6:	e6a7      	b.n	8022ff8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80232a8:	2900      	cmp	r1, #0
 80232aa:	f43f af4f 	beq.w	802314c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80232ae:	4453      	add	r3, sl
 80232b0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80232b4:	07db      	lsls	r3, r3, #31
 80232b6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80232ba:	bf54      	ite	pl
 80232bc:	f00c 030f 	andpl.w	r3, ip, #15
 80232c0:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80232c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80232c8:	b2db      	uxtb	r3, r3
 80232ca:	930a      	str	r3, [sp, #40]	; 0x28
 80232cc:	e73e      	b.n	802314c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80232ce:	1c44      	adds	r4, r0, #1
 80232d0:	d195      	bne.n	80231fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80232d2:	4583      	cmp	fp, r0
 80232d4:	dd93      	ble.n	80231fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80232d6:	1c5c      	adds	r4, r3, #1
 80232d8:	db91      	blt.n	80231fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80232da:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80232dc:	429c      	cmp	r4, r3
 80232de:	dd8e      	ble.n	80231fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80232e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80232e2:	9002      	str	r0, [sp, #8]
 80232e4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80232e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80232ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232ec:	463a      	mov	r2, r7
 80232ee:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80232f2:	e9cd b300 	strd	fp, r3, [sp]
 80232f6:	4649      	mov	r1, r9
 80232f8:	4653      	mov	r3, sl
 80232fa:	f7ff fd61 	bl	8022dc0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80232fe:	e77e      	b.n	80231fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023300:	142a      	asrs	r2, r5, #16
 8023302:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023306:	1433      	asrs	r3, r6, #16
 8023308:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802330c:	fb0a 2303 	mla	r3, sl, r3, r2
 8023310:	085a      	lsrs	r2, r3, #1
 8023312:	07dc      	lsls	r4, r3, #31
 8023314:	5cba      	ldrb	r2, [r7, r2]
 8023316:	bf54      	ite	pl
 8023318:	f002 020f 	andpl.w	r2, r2, #15
 802331c:	1112      	asrmi	r2, r2, #4
 802331e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023322:	b2d2      	uxtb	r2, r2
 8023324:	2900      	cmp	r1, #0
 8023326:	f000 8093 	beq.w	8023450 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 802332a:	1c5c      	adds	r4, r3, #1
 802332c:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8023330:	07e4      	lsls	r4, r4, #31
 8023332:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023336:	bf54      	ite	pl
 8023338:	f00c 0c0f 	andpl.w	ip, ip, #15
 802333c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023340:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023344:	fa5f f48c 	uxtb.w	r4, ip
 8023348:	9412      	str	r4, [sp, #72]	; 0x48
 802334a:	b300      	cbz	r0, 802338e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 802334c:	4453      	add	r3, sl
 802334e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023352:	07dc      	lsls	r4, r3, #31
 8023354:	f103 0301 	add.w	r3, r3, #1
 8023358:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802335c:	bf54      	ite	pl
 802335e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023362:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023366:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802336a:	fa5f f48c 	uxtb.w	r4, ip
 802336e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023372:	940b      	str	r4, [sp, #44]	; 0x2c
 8023374:	07dc      	lsls	r4, r3, #31
 8023376:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802337a:	bf54      	ite	pl
 802337c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023380:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023384:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023388:	fa5f f38c 	uxtb.w	r3, ip
 802338c:	9313      	str	r3, [sp, #76]	; 0x4c
 802338e:	b289      	uxth	r1, r1
 8023390:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023392:	b280      	uxth	r0, r0
 8023394:	fb01 f300 	mul.w	r3, r1, r0
 8023398:	0109      	lsls	r1, r1, #4
 802339a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802339e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80233a2:	1ac9      	subs	r1, r1, r3
 80233a4:	b280      	uxth	r0, r0
 80233a6:	b289      	uxth	r1, r1
 80233a8:	ebac 0c00 	sub.w	ip, ip, r0
 80233ac:	4361      	muls	r1, r4
 80233ae:	fa1f fc8c 	uxth.w	ip, ip
 80233b2:	fb02 120c 	mla	r2, r2, ip, r1
 80233b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80233b8:	fb00 2001 	mla	r0, r0, r1, r2
 80233bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80233be:	fb03 0302 	mla	r3, r3, r2, r0
 80233c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80233c6:	2b00      	cmp	r3, #0
 80233c8:	d039      	beq.n	802343e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 80233ca:	4a2d      	ldr	r2, [pc, #180]	; (8023480 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80233cc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80233d0:	6810      	ldr	r0, [r2, #0]
 80233d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80233d4:	fa5f fc80 	uxtb.w	ip, r0
 80233d8:	4353      	muls	r3, r2
 80233da:	1c5a      	adds	r2, r3, #1
 80233dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80233e0:	121b      	asrs	r3, r3, #8
 80233e2:	b29a      	uxth	r2, r3
 80233e4:	43db      	mvns	r3, r3
 80233e6:	fb1c fc02 	smulbb	ip, ip, r2
 80233ea:	b2db      	uxtb	r3, r3
 80233ec:	fb01 c103 	mla	r1, r1, r3, ip
 80233f0:	b289      	uxth	r1, r1
 80233f2:	f101 0c01 	add.w	ip, r1, #1
 80233f6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80233fa:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80233fe:	fb1c fc03 	smulbb	ip, ip, r3
 8023402:	1209      	asrs	r1, r1, #8
 8023404:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023408:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802340c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023410:	fb01 c102 	mla	r1, r1, r2, ip
 8023414:	b289      	uxth	r1, r1
 8023416:	f101 0c01 	add.w	ip, r1, #1
 802341a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802341e:	1209      	asrs	r1, r1, #8
 8023420:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023424:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023428:	fb11 f303 	smulbb	r3, r1, r3
 802342c:	fb00 3002 	mla	r0, r0, r2, r3
 8023430:	b280      	uxth	r0, r0
 8023432:	1c42      	adds	r2, r0, #1
 8023434:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023438:	1200      	asrs	r0, r0, #8
 802343a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802343e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023440:	f10e 0e03 	add.w	lr, lr, #3
 8023444:	f109 39ff 	add.w	r9, r9, #4294967295
 8023448:	441d      	add	r5, r3
 802344a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802344c:	441e      	add	r6, r3
 802344e:	e604      	b.n	802305a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8023450:	2800      	cmp	r0, #0
 8023452:	d09c      	beq.n	802338e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8023454:	4453      	add	r3, sl
 8023456:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802345a:	07db      	lsls	r3, r3, #31
 802345c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023460:	bf54      	ite	pl
 8023462:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023466:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802346a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802346e:	fa5f f38c 	uxtb.w	r3, ip
 8023472:	930b      	str	r3, [sp, #44]	; 0x2c
 8023474:	e78b      	b.n	802338e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8023476:	b017      	add	sp, #92	; 0x5c
 8023478:	ecbd 8b08 	vpop	{d8-d11}
 802347c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023480:	2000bbb8 	.word	0x2000bbb8

08023484 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023488:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802348c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023490:	2800      	cmp	r0, #0
 8023492:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023496:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802349a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802349e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80234a2:	db6b      	blt.n	802357c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80234a4:	4580      	cmp	r8, r0
 80234a6:	dd69      	ble.n	802357c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80234a8:	f1bc 0f00 	cmp.w	ip, #0
 80234ac:	db66      	blt.n	802357c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80234ae:	45e1      	cmp	r9, ip
 80234b0:	dd64      	ble.n	802357c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80234b2:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80234b6:	f01e 0f01 	tst.w	lr, #1
 80234ba:	5d16      	ldrb	r6, [r2, r4]
 80234bc:	bf0c      	ite	eq
 80234be:	f006 060f 	andeq.w	r6, r6, #15
 80234c2:	1136      	asrne	r6, r6, #4
 80234c4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80234c8:	b2f6      	uxtb	r6, r6
 80234ca:	f110 0a01 	adds.w	sl, r0, #1
 80234ce:	d457      	bmi.n	8023580 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80234d0:	45d0      	cmp	r8, sl
 80234d2:	dd55      	ble.n	8023580 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80234d4:	f1bc 0f00 	cmp.w	ip, #0
 80234d8:	db52      	blt.n	8023580 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80234da:	45e1      	cmp	r9, ip
 80234dc:	dd50      	ble.n	8023580 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80234de:	2f00      	cmp	r7, #0
 80234e0:	f000 80a5 	beq.w	802362e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80234e4:	f10e 0b01 	add.w	fp, lr, #1
 80234e8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80234ec:	f01b 0f01 	tst.w	fp, #1
 80234f0:	5d14      	ldrb	r4, [r2, r4]
 80234f2:	bf0c      	ite	eq
 80234f4:	f004 040f 	andeq.w	r4, r4, #15
 80234f8:	1124      	asrne	r4, r4, #4
 80234fa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80234fe:	b2e4      	uxtb	r4, r4
 8023500:	2d00      	cmp	r5, #0
 8023502:	f000 808f 	beq.w	8023624 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8023506:	2800      	cmp	r0, #0
 8023508:	f10c 0c01 	add.w	ip, ip, #1
 802350c:	db3c      	blt.n	8023588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802350e:	4580      	cmp	r8, r0
 8023510:	dd3a      	ble.n	8023588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023512:	f1bc 0f00 	cmp.w	ip, #0
 8023516:	db37      	blt.n	8023588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023518:	45e1      	cmp	r9, ip
 802351a:	dd35      	ble.n	8023588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802351c:	eb03 0b0e 	add.w	fp, r3, lr
 8023520:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023524:	f01b 0f01 	tst.w	fp, #1
 8023528:	5c10      	ldrb	r0, [r2, r0]
 802352a:	bf0c      	ite	eq
 802352c:	f000 000f 	andeq.w	r0, r0, #15
 8023530:	1100      	asrne	r0, r0, #4
 8023532:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023536:	b2c0      	uxtb	r0, r0
 8023538:	f1ba 0f00 	cmp.w	sl, #0
 802353c:	db26      	blt.n	802358c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802353e:	45d0      	cmp	r8, sl
 8023540:	dd24      	ble.n	802358c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023542:	f1bc 0f00 	cmp.w	ip, #0
 8023546:	db21      	blt.n	802358c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023548:	45e1      	cmp	r9, ip
 802354a:	dd1f      	ble.n	802358c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802354c:	b307      	cbz	r7, 8023590 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 802354e:	3301      	adds	r3, #1
 8023550:	449e      	add	lr, r3
 8023552:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023556:	f01e 0f01 	tst.w	lr, #1
 802355a:	5cd3      	ldrb	r3, [r2, r3]
 802355c:	bf0c      	ite	eq
 802355e:	f003 030f 	andeq.w	r3, r3, #15
 8023562:	111b      	asrne	r3, r3, #4
 8023564:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023568:	b2db      	uxtb	r3, r3
 802356a:	2f0f      	cmp	r7, #15
 802356c:	d911      	bls.n	8023592 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 802356e:	4b32      	ldr	r3, [pc, #200]	; (8023638 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8023570:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023574:	4a31      	ldr	r2, [pc, #196]	; (802363c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8023576:	4832      	ldr	r0, [pc, #200]	; (8023640 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8023578:	f001 fff8 	bl	802556c <__assert_func>
 802357c:	2600      	movs	r6, #0
 802357e:	e7a4      	b.n	80234ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8023580:	2400      	movs	r4, #0
 8023582:	e7bd      	b.n	8023500 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8023584:	463c      	mov	r4, r7
 8023586:	e7be      	b.n	8023506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8023588:	2000      	movs	r0, #0
 802358a:	e7d5      	b.n	8023538 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 802358c:	2300      	movs	r3, #0
 802358e:	e7ec      	b.n	802356a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8023590:	463b      	mov	r3, r7
 8023592:	2d0f      	cmp	r5, #15
 8023594:	d8eb      	bhi.n	802356e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023596:	b2bf      	uxth	r7, r7
 8023598:	b2ad      	uxth	r5, r5
 802359a:	fb07 f205 	mul.w	r2, r7, r5
 802359e:	013f      	lsls	r7, r7, #4
 80235a0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80235a4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80235a8:	1abf      	subs	r7, r7, r2
 80235aa:	b2ad      	uxth	r5, r5
 80235ac:	b2bf      	uxth	r7, r7
 80235ae:	ebac 0c05 	sub.w	ip, ip, r5
 80235b2:	437c      	muls	r4, r7
 80235b4:	fa1f fc8c 	uxth.w	ip, ip
 80235b8:	fb06 440c 	mla	r4, r6, ip, r4
 80235bc:	fb05 4400 	mla	r4, r5, r0, r4
 80235c0:	fb02 4303 	mla	r3, r2, r3, r4
 80235c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80235c8:	b353      	cbz	r3, 8023620 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80235ca:	4a1e      	ldr	r2, [pc, #120]	; (8023644 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80235cc:	7808      	ldrb	r0, [r1, #0]
 80235ce:	6814      	ldr	r4, [r2, #0]
 80235d0:	b29a      	uxth	r2, r3
 80235d2:	43db      	mvns	r3, r3
 80235d4:	b2e5      	uxtb	r5, r4
 80235d6:	b2db      	uxtb	r3, r3
 80235d8:	fb15 f502 	smulbb	r5, r5, r2
 80235dc:	fb00 5003 	mla	r0, r0, r3, r5
 80235e0:	b280      	uxth	r0, r0
 80235e2:	1c45      	adds	r5, r0, #1
 80235e4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80235e8:	784d      	ldrb	r5, [r1, #1]
 80235ea:	fb15 f503 	smulbb	r5, r5, r3
 80235ee:	1200      	asrs	r0, r0, #8
 80235f0:	7008      	strb	r0, [r1, #0]
 80235f2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80235f6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80235fa:	fb00 5002 	mla	r0, r0, r2, r5
 80235fe:	b280      	uxth	r0, r0
 8023600:	1c45      	adds	r5, r0, #1
 8023602:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023606:	1200      	asrs	r0, r0, #8
 8023608:	7048      	strb	r0, [r1, #1]
 802360a:	7888      	ldrb	r0, [r1, #2]
 802360c:	fb10 f303 	smulbb	r3, r0, r3
 8023610:	fb04 3202 	mla	r2, r4, r2, r3
 8023614:	b292      	uxth	r2, r2
 8023616:	1c53      	adds	r3, r2, #1
 8023618:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802361c:	1212      	asrs	r2, r2, #8
 802361e:	708a      	strb	r2, [r1, #2]
 8023620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023624:	2f0f      	cmp	r7, #15
 8023626:	d8a2      	bhi.n	802356e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023628:	462b      	mov	r3, r5
 802362a:	4628      	mov	r0, r5
 802362c:	e7b3      	b.n	8023596 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 802362e:	2d00      	cmp	r5, #0
 8023630:	d1a8      	bne.n	8023584 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8023632:	462c      	mov	r4, r5
 8023634:	e7f8      	b.n	8023628 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8023636:	bf00      	nop
 8023638:	0802acdd 	.word	0x0802acdd
 802363c:	0802b1d6 	.word	0x0802b1d6
 8023640:	0802ada6 	.word	0x0802ada6
 8023644:	2000bbb8 	.word	0x2000bbb8

08023648 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802364c:	ed2d 8b08 	vpush	{d8-d11}
 8023650:	b095      	sub	sp, #84	; 0x54
 8023652:	461c      	mov	r4, r3
 8023654:	eeb0 aa40 	vmov.f32	s20, s0
 8023658:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 802365c:	eef0 9a60 	vmov.f32	s19, s1
 8023660:	920e      	str	r2, [sp, #56]	; 0x38
 8023662:	eeb0 9a41 	vmov.f32	s18, s2
 8023666:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023668:	eeb0 8a62 	vmov.f32	s16, s5
 802366c:	9307      	str	r3, [sp, #28]
 802366e:	eef0 8a43 	vmov.f32	s17, s6
 8023672:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8023676:	eef0 ba44 	vmov.f32	s23, s8
 802367a:	9013      	str	r0, [sp, #76]	; 0x4c
 802367c:	eeb0 ba64 	vmov.f32	s22, s9
 8023680:	9109      	str	r1, [sp, #36]	; 0x24
 8023682:	eef0 aa45 	vmov.f32	s21, s10
 8023686:	9308      	str	r3, [sp, #32]
 8023688:	6850      	ldr	r0, [r2, #4]
 802368a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802368e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8023692:	fb00 1803 	mla	r8, r0, r3, r1
 8023696:	6813      	ldr	r3, [r2, #0]
 8023698:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802369c:	4498      	add	r8, r3
 802369e:	9b07      	ldr	r3, [sp, #28]
 80236a0:	3301      	adds	r3, #1
 80236a2:	f023 0301 	bic.w	r3, r3, #1
 80236a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80236a8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80236aa:	681f      	ldr	r7, [r3, #0]
 80236ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236ae:	2b00      	cmp	r3, #0
 80236b0:	dc03      	bgt.n	80236ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80236b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80236b4:	2b00      	cmp	r3, #0
 80236b6:	f340 8238 	ble.w	8023b2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80236ba:	2c00      	cmp	r4, #0
 80236bc:	f340 8109 	ble.w	80238d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 80236c0:	142a      	asrs	r2, r5, #16
 80236c2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80236c6:	d42b      	bmi.n	8023720 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80236c8:	1c51      	adds	r1, r2, #1
 80236ca:	9807      	ldr	r0, [sp, #28]
 80236cc:	4288      	cmp	r0, r1
 80236ce:	dd2a      	ble.n	8023726 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80236d0:	2b00      	cmp	r3, #0
 80236d2:	db28      	blt.n	8023726 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80236d4:	1c59      	adds	r1, r3, #1
 80236d6:	9808      	ldr	r0, [sp, #32]
 80236d8:	4288      	cmp	r0, r1
 80236da:	dd24      	ble.n	8023726 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80236dc:	1e63      	subs	r3, r4, #1
 80236de:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80236e0:	fb02 5203 	mla	r2, r2, r3, r5
 80236e4:	1412      	asrs	r2, r2, #16
 80236e6:	d429      	bmi.n	802373c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80236e8:	3201      	adds	r2, #1
 80236ea:	9907      	ldr	r1, [sp, #28]
 80236ec:	4291      	cmp	r1, r2
 80236ee:	dd25      	ble.n	802373c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80236f0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80236f2:	fb02 6303 	mla	r3, r2, r3, r6
 80236f6:	141b      	asrs	r3, r3, #16
 80236f8:	d420      	bmi.n	802373c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80236fa:	3301      	adds	r3, #1
 80236fc:	9a08      	ldr	r2, [sp, #32]
 80236fe:	429a      	cmp	r2, r3
 8023700:	dd1c      	ble.n	802373c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023702:	f108 0e03 	add.w	lr, r8, #3
 8023706:	46a1      	mov	r9, r4
 8023708:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802370c:	f1b9 0f00 	cmp.w	r9, #0
 8023710:	f300 8155 	bgt.w	80239be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8023714:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023718:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802371c:	44a0      	add	r8, r4
 802371e:	e0da      	b.n	80238d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8023720:	1c50      	adds	r0, r2, #1
 8023722:	f040 80ce 	bne.w	80238c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023726:	9907      	ldr	r1, [sp, #28]
 8023728:	4291      	cmp	r1, r2
 802372a:	f340 80ca 	ble.w	80238c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802372e:	1c59      	adds	r1, r3, #1
 8023730:	f2c0 80c7 	blt.w	80238c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8023734:	9a08      	ldr	r2, [sp, #32]
 8023736:	4293      	cmp	r3, r2
 8023738:	f280 80c3 	bge.w	80238c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802373c:	46a3      	mov	fp, r4
 802373e:	46c1      	mov	r9, r8
 8023740:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8023744:	f1bb 0f00 	cmp.w	fp, #0
 8023748:	dde4      	ble.n	8023714 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802374a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802374e:	1428      	asrs	r0, r5, #16
 8023750:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023754:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023758:	920a      	str	r2, [sp, #40]	; 0x28
 802375a:	f100 8116 	bmi.w	802398a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802375e:	f100 0c01 	add.w	ip, r0, #1
 8023762:	9a07      	ldr	r2, [sp, #28]
 8023764:	4562      	cmp	r2, ip
 8023766:	f340 8112 	ble.w	802398e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802376a:	2b00      	cmp	r3, #0
 802376c:	f2c0 810f 	blt.w	802398e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8023770:	f103 0c01 	add.w	ip, r3, #1
 8023774:	9a08      	ldr	r2, [sp, #32]
 8023776:	4562      	cmp	r2, ip
 8023778:	f340 8109 	ble.w	802398e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802377c:	fb03 030a 	mla	r3, r3, sl, r0
 8023780:	0858      	lsrs	r0, r3, #1
 8023782:	07da      	lsls	r2, r3, #31
 8023784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023786:	5c38      	ldrb	r0, [r7, r0]
 8023788:	bf54      	ite	pl
 802378a:	f000 000f 	andpl.w	r0, r0, #15
 802378e:	1100      	asrmi	r0, r0, #4
 8023790:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023794:	b2c0      	uxtb	r0, r0
 8023796:	2a00      	cmp	r2, #0
 8023798:	f000 80dd 	beq.w	8023956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 802379c:	f103 0e01 	add.w	lr, r3, #1
 80237a0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80237a4:	f01e 0f01 	tst.w	lr, #1
 80237a8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80237ac:	bf0c      	ite	eq
 80237ae:	f00c 0c0f 	andeq.w	ip, ip, #15
 80237b2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80237b6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80237ba:	fa5f fc8c 	uxtb.w	ip, ip
 80237be:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80237c2:	b301      	cbz	r1, 8023806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80237c4:	4453      	add	r3, sl
 80237c6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80237ca:	07da      	lsls	r2, r3, #31
 80237cc:	f103 0301 	add.w	r3, r3, #1
 80237d0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80237d4:	bf54      	ite	pl
 80237d6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80237da:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80237de:	07da      	lsls	r2, r3, #31
 80237e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80237e4:	fa5f fc8c 	uxtb.w	ip, ip
 80237e8:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80237ec:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80237f0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80237f4:	bf54      	ite	pl
 80237f6:	f00c 030f 	andpl.w	r3, ip, #15
 80237fa:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80237fe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023802:	b2db      	uxtb	r3, r3
 8023804:	9310      	str	r3, [sp, #64]	; 0x40
 8023806:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802380a:	b289      	uxth	r1, r1
 802380c:	fb02 f301 	mul.w	r3, r2, r1
 8023810:	0112      	lsls	r2, r2, #4
 8023812:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023816:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802381a:	1ad2      	subs	r2, r2, r3
 802381c:	fa1f fe81 	uxth.w	lr, r1
 8023820:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023822:	b292      	uxth	r2, r2
 8023824:	ebac 0c0e 	sub.w	ip, ip, lr
 8023828:	434a      	muls	r2, r1
 802382a:	fa1f fc8c 	uxth.w	ip, ip
 802382e:	fb00 200c 	mla	r0, r0, ip, r2
 8023832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023834:	fb0e 0002 	mla	r0, lr, r2, r0
 8023838:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802383a:	fb03 0002 	mla	r0, r3, r2, r0
 802383e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023842:	b3a8      	cbz	r0, 80238b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023844:	4bbb      	ldr	r3, [pc, #748]	; (8023b34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023846:	28ff      	cmp	r0, #255	; 0xff
 8023848:	681b      	ldr	r3, [r3, #0]
 802384a:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 802384e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8023852:	b2db      	uxtb	r3, r3
 8023854:	f000 8092 	beq.w	802397c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8023858:	b282      	uxth	r2, r0
 802385a:	43c0      	mvns	r0, r0
 802385c:	f899 e000 	ldrb.w	lr, [r9]
 8023860:	fb13 f302 	smulbb	r3, r3, r2
 8023864:	b2c0      	uxtb	r0, r0
 8023866:	fb11 f102 	smulbb	r1, r1, r2
 802386a:	fb0e 3300 	mla	r3, lr, r0, r3
 802386e:	fb1c f202 	smulbb	r2, ip, r2
 8023872:	b29b      	uxth	r3, r3
 8023874:	f103 0e01 	add.w	lr, r3, #1
 8023878:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802387c:	121b      	asrs	r3, r3, #8
 802387e:	f889 3000 	strb.w	r3, [r9]
 8023882:	f899 3001 	ldrb.w	r3, [r9, #1]
 8023886:	fb03 1100 	mla	r1, r3, r0, r1
 802388a:	b289      	uxth	r1, r1
 802388c:	1c4b      	adds	r3, r1, #1
 802388e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023892:	f899 3002 	ldrb.w	r3, [r9, #2]
 8023896:	fb03 2000 	mla	r0, r3, r0, r2
 802389a:	1209      	asrs	r1, r1, #8
 802389c:	b280      	uxth	r0, r0
 802389e:	f889 1001 	strb.w	r1, [r9, #1]
 80238a2:	f100 0c01 	add.w	ip, r0, #1
 80238a6:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80238aa:	1200      	asrs	r0, r0, #8
 80238ac:	f889 0002 	strb.w	r0, [r9, #2]
 80238b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80238b2:	f109 0903 	add.w	r9, r9, #3
 80238b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80238ba:	441d      	add	r5, r3
 80238bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80238be:	441e      	add	r6, r3
 80238c0:	e740      	b.n	8023744 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80238c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80238c4:	3c01      	subs	r4, #1
 80238c6:	f108 0803 	add.w	r8, r8, #3
 80238ca:	441d      	add	r5, r3
 80238cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80238ce:	441e      	add	r6, r3
 80238d0:	e6f3      	b.n	80236ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80238d2:	f47f af03 	bne.w	80236dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80238d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238d8:	2b00      	cmp	r3, #0
 80238da:	f340 8126 	ble.w	8023b2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80238de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80238e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80238e4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80238e8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80238ec:	eef0 6a48 	vmov.f32	s13, s16
 80238f0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80238f4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80238f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80238fc:	ee16 5a90 	vmov	r5, s13
 8023900:	eef0 6a68 	vmov.f32	s13, s17
 8023904:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023908:	ee16 6a90 	vmov	r6, s13
 802390c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023910:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023914:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023918:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802391c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023920:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023924:	ee18 2a10 	vmov	r2, s16
 8023928:	eeb0 8a47 	vmov.f32	s16, s14
 802392c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023930:	ee18 2a90 	vmov	r2, s17
 8023934:	9329      	str	r3, [sp, #164]	; 0xa4
 8023936:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023938:	eef0 8a67 	vmov.f32	s17, s15
 802393c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023940:	932a      	str	r3, [sp, #168]	; 0xa8
 8023942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023946:	3b01      	subs	r3, #1
 8023948:	9309      	str	r3, [sp, #36]	; 0x24
 802394a:	bf08      	it	eq
 802394c:	4614      	moveq	r4, r2
 802394e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023950:	bf18      	it	ne
 8023952:	461c      	movne	r4, r3
 8023954:	e6aa      	b.n	80236ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8023956:	2900      	cmp	r1, #0
 8023958:	f43f af55 	beq.w	8023806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 802395c:	4453      	add	r3, sl
 802395e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023962:	07db      	lsls	r3, r3, #31
 8023964:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023968:	bf54      	ite	pl
 802396a:	f00c 030f 	andpl.w	r3, ip, #15
 802396e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023972:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023976:	b2db      	uxtb	r3, r3
 8023978:	930c      	str	r3, [sp, #48]	; 0x30
 802397a:	e744      	b.n	8023806 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 802397c:	f889 3000 	strb.w	r3, [r9]
 8023980:	f889 1001 	strb.w	r1, [r9, #1]
 8023984:	f889 c002 	strb.w	ip, [r9, #2]
 8023988:	e792      	b.n	80238b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802398a:	1c42      	adds	r2, r0, #1
 802398c:	d190      	bne.n	80238b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802398e:	9a07      	ldr	r2, [sp, #28]
 8023990:	4282      	cmp	r2, r0
 8023992:	dd8d      	ble.n	80238b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023994:	1c5a      	adds	r2, r3, #1
 8023996:	db8b      	blt.n	80238b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023998:	9a08      	ldr	r2, [sp, #32]
 802399a:	429a      	cmp	r2, r3
 802399c:	dd88      	ble.n	80238b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802399e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80239a0:	9105      	str	r1, [sp, #20]
 80239a2:	4649      	mov	r1, r9
 80239a4:	9002      	str	r0, [sp, #8]
 80239a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80239a8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80239ac:	9b08      	ldr	r3, [sp, #32]
 80239ae:	463a      	mov	r2, r7
 80239b0:	9301      	str	r3, [sp, #4]
 80239b2:	9b07      	ldr	r3, [sp, #28]
 80239b4:	9300      	str	r3, [sp, #0]
 80239b6:	4653      	mov	r3, sl
 80239b8:	f7ff fd64 	bl	8023484 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80239bc:	e778      	b.n	80238b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80239be:	142a      	asrs	r2, r5, #16
 80239c0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80239c4:	1433      	asrs	r3, r6, #16
 80239c6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80239ca:	fb0a 2303 	mla	r3, sl, r3, r2
 80239ce:	085a      	lsrs	r2, r3, #1
 80239d0:	07d9      	lsls	r1, r3, #31
 80239d2:	5cba      	ldrb	r2, [r7, r2]
 80239d4:	bf54      	ite	pl
 80239d6:	f002 020f 	andpl.w	r2, r2, #15
 80239da:	1112      	asrmi	r2, r2, #4
 80239dc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80239e0:	b2d2      	uxtb	r2, r2
 80239e2:	2800      	cmp	r0, #0
 80239e4:	f000 808a 	beq.w	8023afc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 80239e8:	f103 0b01 	add.w	fp, r3, #1
 80239ec:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80239f0:	f01b 0f01 	tst.w	fp, #1
 80239f4:	5c79      	ldrb	r1, [r7, r1]
 80239f6:	bf0c      	ite	eq
 80239f8:	f001 010f 	andeq.w	r1, r1, #15
 80239fc:	1109      	asrne	r1, r1, #4
 80239fe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023a02:	b2c9      	uxtb	r1, r1
 8023a04:	9111      	str	r1, [sp, #68]	; 0x44
 8023a06:	f1bc 0f00 	cmp.w	ip, #0
 8023a0a:	d019      	beq.n	8023a40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023a0c:	4453      	add	r3, sl
 8023a0e:	0859      	lsrs	r1, r3, #1
 8023a10:	f013 0f01 	tst.w	r3, #1
 8023a14:	f103 0301 	add.w	r3, r3, #1
 8023a18:	5c79      	ldrb	r1, [r7, r1]
 8023a1a:	bf0c      	ite	eq
 8023a1c:	f001 010f 	andeq.w	r1, r1, #15
 8023a20:	1109      	asrne	r1, r1, #4
 8023a22:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023a26:	b2c9      	uxtb	r1, r1
 8023a28:	910d      	str	r1, [sp, #52]	; 0x34
 8023a2a:	0859      	lsrs	r1, r3, #1
 8023a2c:	07db      	lsls	r3, r3, #31
 8023a2e:	5c79      	ldrb	r1, [r7, r1]
 8023a30:	bf54      	ite	pl
 8023a32:	f001 010f 	andpl.w	r1, r1, #15
 8023a36:	1109      	asrmi	r1, r1, #4
 8023a38:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023a3c:	b2c9      	uxtb	r1, r1
 8023a3e:	9112      	str	r1, [sp, #72]	; 0x48
 8023a40:	b280      	uxth	r0, r0
 8023a42:	fa1f fc8c 	uxth.w	ip, ip
 8023a46:	fb00 f30c 	mul.w	r3, r0, ip
 8023a4a:	0100      	lsls	r0, r0, #4
 8023a4c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023a50:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023a54:	1ac0      	subs	r0, r0, r3
 8023a56:	fa1f fc8c 	uxth.w	ip, ip
 8023a5a:	b280      	uxth	r0, r0
 8023a5c:	eba1 010c 	sub.w	r1, r1, ip
 8023a60:	fa1f fb81 	uxth.w	fp, r1
 8023a64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023a66:	4348      	muls	r0, r1
 8023a68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023a6a:	fb02 020b 	mla	r2, r2, fp, r0
 8023a6e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8023a72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023a74:	fb03 c302 	mla	r3, r3, r2, ip
 8023a78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023a7c:	b3ab      	cbz	r3, 8023aea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023a7e:	4a2d      	ldr	r2, [pc, #180]	; (8023b34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023a80:	2bff      	cmp	r3, #255	; 0xff
 8023a82:	6811      	ldr	r1, [r2, #0]
 8023a84:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8023a88:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023a8c:	b2c9      	uxtb	r1, r1
 8023a8e:	d045      	beq.n	8023b1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8023a90:	b298      	uxth	r0, r3
 8023a92:	43db      	mvns	r3, r3
 8023a94:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023a98:	fb11 f100 	smulbb	r1, r1, r0
 8023a9c:	b2db      	uxtb	r3, r3
 8023a9e:	fb1c fc00 	smulbb	ip, ip, r0
 8023aa2:	fb02 1103 	mla	r1, r2, r3, r1
 8023aa6:	fb1b f000 	smulbb	r0, fp, r0
 8023aaa:	b289      	uxth	r1, r1
 8023aac:	1c4a      	adds	r2, r1, #1
 8023aae:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023ab2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023ab6:	fb02 cc03 	mla	ip, r2, r3, ip
 8023aba:	1209      	asrs	r1, r1, #8
 8023abc:	fa1f fc8c 	uxth.w	ip, ip
 8023ac0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023ac4:	f10c 0201 	add.w	r2, ip, #1
 8023ac8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023acc:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023ad0:	fb02 0303 	mla	r3, r2, r3, r0
 8023ad4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023ad8:	b29b      	uxth	r3, r3
 8023ada:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023ade:	1c5a      	adds	r2, r3, #1
 8023ae0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023ae4:	121b      	asrs	r3, r3, #8
 8023ae6:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8023aea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023aec:	f10e 0e03 	add.w	lr, lr, #3
 8023af0:	f109 39ff 	add.w	r9, r9, #4294967295
 8023af4:	441d      	add	r5, r3
 8023af6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023af8:	441e      	add	r6, r3
 8023afa:	e607      	b.n	802370c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8023afc:	f1bc 0f00 	cmp.w	ip, #0
 8023b00:	d09e      	beq.n	8023a40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023b02:	4453      	add	r3, sl
 8023b04:	0859      	lsrs	r1, r3, #1
 8023b06:	07db      	lsls	r3, r3, #31
 8023b08:	5c79      	ldrb	r1, [r7, r1]
 8023b0a:	bf54      	ite	pl
 8023b0c:	f001 010f 	andpl.w	r1, r1, #15
 8023b10:	1109      	asrmi	r1, r1, #4
 8023b12:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023b16:	b2c9      	uxtb	r1, r1
 8023b18:	910d      	str	r1, [sp, #52]	; 0x34
 8023b1a:	e791      	b.n	8023a40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023b1c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023b20:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023b24:	f80e bc01 	strb.w	fp, [lr, #-1]
 8023b28:	e7df      	b.n	8023aea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023b2a:	b015      	add	sp, #84	; 0x54
 8023b2c:	ecbd 8b08 	vpop	{d8-d11}
 8023b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b34:	2000bbb8 	.word	0x2000bbb8

08023b38 <CRC_Lock>:
 8023b38:	4a1d      	ldr	r2, [pc, #116]	; (8023bb0 <CRC_Lock+0x78>)
 8023b3a:	b530      	push	{r4, r5, lr}
 8023b3c:	6813      	ldr	r3, [r2, #0]
 8023b3e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023b42:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023b46:	f023 0301 	bic.w	r3, r3, #1
 8023b4a:	6013      	str	r3, [r2, #0]
 8023b4c:	4b19      	ldr	r3, [pc, #100]	; (8023bb4 <CRC_Lock+0x7c>)
 8023b4e:	681a      	ldr	r2, [r3, #0]
 8023b50:	4022      	ands	r2, r4
 8023b52:	42aa      	cmp	r2, r5
 8023b54:	d005      	beq.n	8023b62 <CRC_Lock+0x2a>
 8023b56:	681b      	ldr	r3, [r3, #0]
 8023b58:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023b5c:	4023      	ands	r3, r4
 8023b5e:	4293      	cmp	r3, r2
 8023b60:	d11d      	bne.n	8023b9e <CRC_Lock+0x66>
 8023b62:	4b15      	ldr	r3, [pc, #84]	; (8023bb8 <CRC_Lock+0x80>)
 8023b64:	681b      	ldr	r3, [r3, #0]
 8023b66:	b9d3      	cbnz	r3, 8023b9e <CRC_Lock+0x66>
 8023b68:	4a14      	ldr	r2, [pc, #80]	; (8023bbc <CRC_Lock+0x84>)
 8023b6a:	6813      	ldr	r3, [r2, #0]
 8023b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023b70:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8023b74:	d006      	beq.n	8023b84 <CRC_Lock+0x4c>
 8023b76:	6813      	ldr	r3, [r2, #0]
 8023b78:	f240 4283 	movw	r2, #1155	; 0x483
 8023b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023b80:	4293      	cmp	r3, r2
 8023b82:	d10c      	bne.n	8023b9e <CRC_Lock+0x66>
 8023b84:	4b0e      	ldr	r3, [pc, #56]	; (8023bc0 <CRC_Lock+0x88>)
 8023b86:	2201      	movs	r2, #1
 8023b88:	601a      	str	r2, [r3, #0]
 8023b8a:	681a      	ldr	r2, [r3, #0]
 8023b8c:	2a00      	cmp	r2, #0
 8023b8e:	d1fc      	bne.n	8023b8a <CRC_Lock+0x52>
 8023b90:	4b0c      	ldr	r3, [pc, #48]	; (8023bc4 <CRC_Lock+0x8c>)
 8023b92:	6018      	str	r0, [r3, #0]
 8023b94:	6818      	ldr	r0, [r3, #0]
 8023b96:	1a43      	subs	r3, r0, r1
 8023b98:	4258      	negs	r0, r3
 8023b9a:	4158      	adcs	r0, r3
 8023b9c:	bd30      	pop	{r4, r5, pc}
 8023b9e:	4b0a      	ldr	r3, [pc, #40]	; (8023bc8 <CRC_Lock+0x90>)
 8023ba0:	2201      	movs	r2, #1
 8023ba2:	601a      	str	r2, [r3, #0]
 8023ba4:	681a      	ldr	r2, [r3, #0]
 8023ba6:	2a00      	cmp	r2, #0
 8023ba8:	d1fc      	bne.n	8023ba4 <CRC_Lock+0x6c>
 8023baa:	4b08      	ldr	r3, [pc, #32]	; (8023bcc <CRC_Lock+0x94>)
 8023bac:	e7f1      	b.n	8023b92 <CRC_Lock+0x5a>
 8023bae:	bf00      	nop
 8023bb0:	e0002000 	.word	0xe0002000
 8023bb4:	e000ed00 	.word	0xe000ed00
 8023bb8:	e0042000 	.word	0xe0042000
 8023bbc:	5c001000 	.word	0x5c001000
 8023bc0:	58024c08 	.word	0x58024c08
 8023bc4:	58024c00 	.word	0x58024c00
 8023bc8:	40023008 	.word	0x40023008
 8023bcc:	40023000 	.word	0x40023000

08023bd0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023bd0:	6101      	str	r1, [r0, #16]
 8023bd2:	4770      	bx	lr

08023bd4 <_ZN8touchgfx8Gestures4tickEv>:
 8023bd4:	7b83      	ldrb	r3, [r0, #14]
 8023bd6:	b14b      	cbz	r3, 8023bec <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023bd8:	8903      	ldrh	r3, [r0, #8]
 8023bda:	3301      	adds	r3, #1
 8023bdc:	b29b      	uxth	r3, r3
 8023bde:	2b07      	cmp	r3, #7
 8023be0:	8103      	strh	r3, [r0, #8]
 8023be2:	bf81      	itttt	hi
 8023be4:	2300      	movhi	r3, #0
 8023be6:	8143      	strhhi	r3, [r0, #10]
 8023be8:	8183      	strhhi	r3, [r0, #12]
 8023bea:	7383      	strbhi	r3, [r0, #14]
 8023bec:	4770      	bx	lr
	...

08023bf0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023bf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023bf4:	4604      	mov	r4, r0
 8023bf6:	4698      	mov	r8, r3
 8023bf8:	8880      	ldrh	r0, [r0, #4]
 8023bfa:	4617      	mov	r7, r2
 8023bfc:	4b1d      	ldr	r3, [pc, #116]	; (8023c74 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8023bfe:	460e      	mov	r6, r1
 8023c00:	f8ad 0006 	strh.w	r0, [sp, #6]
 8023c04:	eba8 0000 	sub.w	r0, r8, r0
 8023c08:	9300      	str	r3, [sp, #0]
 8023c0a:	2300      	movs	r3, #0
 8023c0c:	b280      	uxth	r0, r0
 8023c0e:	8aa2      	ldrh	r2, [r4, #20]
 8023c10:	f88d 3004 	strb.w	r3, [sp, #4]
 8023c14:	b203      	sxth	r3, r0
 8023c16:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023c1a:	88e1      	ldrh	r1, [r4, #6]
 8023c1c:	2b00      	cmp	r3, #0
 8023c1e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023c22:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023c26:	bfb8      	it	lt
 8023c28:	4240      	neglt	r0, r0
 8023c2a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023c2e:	bfb8      	it	lt
 8023c30:	b203      	sxthlt	r3, r0
 8023c32:	4293      	cmp	r3, r2
 8023c34:	dc08      	bgt.n	8023c48 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8023c36:	1a69      	subs	r1, r5, r1
 8023c38:	b289      	uxth	r1, r1
 8023c3a:	b20b      	sxth	r3, r1
 8023c3c:	2b00      	cmp	r3, #0
 8023c3e:	bfbc      	itt	lt
 8023c40:	4249      	neglt	r1, r1
 8023c42:	b20b      	sxthlt	r3, r1
 8023c44:	429a      	cmp	r2, r3
 8023c46:	da13      	bge.n	8023c70 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023c48:	6920      	ldr	r0, [r4, #16]
 8023c4a:	4669      	mov	r1, sp
 8023c4c:	eba8 0606 	sub.w	r6, r8, r6
 8023c50:	1bef      	subs	r7, r5, r7
 8023c52:	6803      	ldr	r3, [r0, #0]
 8023c54:	685b      	ldr	r3, [r3, #4]
 8023c56:	4798      	blx	r3
 8023c58:	2300      	movs	r3, #0
 8023c5a:	2001      	movs	r0, #1
 8023c5c:	8166      	strh	r6, [r4, #10]
 8023c5e:	8123      	strh	r3, [r4, #8]
 8023c60:	81a7      	strh	r7, [r4, #12]
 8023c62:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023c66:	80e5      	strh	r5, [r4, #6]
 8023c68:	73a0      	strb	r0, [r4, #14]
 8023c6a:	b004      	add	sp, #16
 8023c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023c70:	2000      	movs	r0, #0
 8023c72:	e7fa      	b.n	8023c6a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023c74:	080290f8 	.word	0x080290f8

08023c78 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c7a:	461e      	mov	r6, r3
 8023c7c:	1e4b      	subs	r3, r1, #1
 8023c7e:	b085      	sub	sp, #20
 8023c80:	4604      	mov	r4, r0
 8023c82:	2b01      	cmp	r3, #1
 8023c84:	460d      	mov	r5, r1
 8023c86:	4617      	mov	r7, r2
 8023c88:	d84b      	bhi.n	8023d22 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023c8a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023c8e:	1cd3      	adds	r3, r2, #3
 8023c90:	b29b      	uxth	r3, r3
 8023c92:	2b06      	cmp	r3, #6
 8023c94:	d916      	bls.n	8023cc4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023c96:	f8df c098 	ldr.w	ip, [pc, #152]	; 8023d30 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023c9a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023c9e:	f8cd c004 	str.w	ip, [sp, #4]
 8023ca2:	f04f 0c00 	mov.w	ip, #0
 8023ca6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023caa:	6900      	ldr	r0, [r0, #16]
 8023cac:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023cb0:	a901      	add	r1, sp, #4
 8023cb2:	f88d c008 	strb.w	ip, [sp, #8]
 8023cb6:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023cba:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023cbe:	6803      	ldr	r3, [r0, #0]
 8023cc0:	689b      	ldr	r3, [r3, #8]
 8023cc2:	4798      	blx	r3
 8023cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023cc8:	1cd3      	adds	r3, r2, #3
 8023cca:	b29b      	uxth	r3, r3
 8023ccc:	2b06      	cmp	r3, #6
 8023cce:	d916      	bls.n	8023cfe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023cd0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023d30 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023cd4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023cd8:	f8cd c004 	str.w	ip, [sp, #4]
 8023cdc:	f04f 0c01 	mov.w	ip, #1
 8023ce0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023ce4:	6920      	ldr	r0, [r4, #16]
 8023ce6:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023cea:	a901      	add	r1, sp, #4
 8023cec:	f88d c008 	strb.w	ip, [sp, #8]
 8023cf0:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023cf4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023cf8:	6803      	ldr	r3, [r0, #0]
 8023cfa:	689b      	ldr	r3, [r3, #8]
 8023cfc:	4798      	blx	r3
 8023cfe:	4b0b      	ldr	r3, [pc, #44]	; (8023d2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8023d00:	a901      	add	r1, sp, #4
 8023d02:	6920      	ldr	r0, [r4, #16]
 8023d04:	9301      	str	r3, [sp, #4]
 8023d06:	2300      	movs	r3, #0
 8023d08:	f88d 5008 	strb.w	r5, [sp, #8]
 8023d0c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023d10:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023d14:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023d18:	6803      	ldr	r3, [r0, #0]
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	4798      	blx	r3
 8023d1e:	b005      	add	sp, #20
 8023d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d22:	2900      	cmp	r1, #0
 8023d24:	d1eb      	bne.n	8023cfe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023d26:	80a2      	strh	r2, [r4, #4]
 8023d28:	80c6      	strh	r6, [r0, #6]
 8023d2a:	e7e8      	b.n	8023cfe <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023d2c:	080290e4 	.word	0x080290e4
 8023d30:	0802910c 	.word	0x0802910c

08023d34 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8023d34:	10c9      	asrs	r1, r1, #3
 8023d36:	2900      	cmp	r1, #0
 8023d38:	bfb8      	it	lt
 8023d3a:	4249      	neglt	r1, r1
 8023d3c:	2801      	cmp	r0, #1
 8023d3e:	d108      	bne.n	8023d52 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023d40:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023d44:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023d48:	4601      	mov	r1, r0
 8023d4a:	dd02      	ble.n	8023d52 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023d4c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8023d50:	4770      	bx	lr
 8023d52:	29ff      	cmp	r1, #255	; 0xff
 8023d54:	bfa8      	it	ge
 8023d56:	21ff      	movge	r1, #255	; 0xff
 8023d58:	4608      	mov	r0, r1
 8023d5a:	4770      	bx	lr

08023d5c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d60:	688c      	ldr	r4, [r1, #8]
 8023d62:	b087      	sub	sp, #28
 8023d64:	4607      	mov	r7, r0
 8023d66:	2c00      	cmp	r4, #0
 8023d68:	db2b      	blt.n	8023dc2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023d6a:	6803      	ldr	r3, [r0, #0]
 8023d6c:	68da      	ldr	r2, [r3, #12]
 8023d6e:	42a2      	cmp	r2, r4
 8023d70:	dd27      	ble.n	8023dc2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023d72:	681a      	ldr	r2, [r3, #0]
 8023d74:	691e      	ldr	r6, [r3, #16]
 8023d76:	68cd      	ldr	r5, [r1, #12]
 8023d78:	fb06 2604 	mla	r6, r6, r4, r2
 8023d7c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8023d80:	698a      	ldr	r2, [r1, #24]
 8023d82:	f893 a004 	ldrb.w	sl, [r3, #4]
 8023d86:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8023d8a:	9205      	str	r2, [sp, #20]
 8023d8c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8023d90:	9b05      	ldr	r3, [sp, #20]
 8023d92:	6839      	ldr	r1, [r7, #0]
 8023d94:	eb03 0c02 	add.w	ip, r3, r2
 8023d98:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023d9c:	6889      	ldr	r1, [r1, #8]
 8023d9e:	1898      	adds	r0, r3, r2
 8023da0:	4288      	cmp	r0, r1
 8023da2:	db02      	blt.n	8023daa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8023da4:	1a8b      	subs	r3, r1, r2
 8023da6:	2b00      	cmp	r3, #0
 8023da8:	dd09      	ble.n	8023dbe <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023daa:	6878      	ldr	r0, [r7, #4]
 8023dac:	6801      	ldr	r1, [r0, #0]
 8023dae:	9400      	str	r4, [sp, #0]
 8023db0:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8023db4:	4653      	mov	r3, sl
 8023db6:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8023dba:	4631      	mov	r1, r6
 8023dbc:	47d8      	blx	fp
 8023dbe:	3d01      	subs	r5, #1
 8023dc0:	d1e4      	bne.n	8023d8c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8023dc2:	b007      	add	sp, #28
 8023dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023dc8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023dc8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8023dcc:	b90b      	cbnz	r3, 8023dd2 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8023dce:	f001 b974 	b.w	80250ba <_ZN8touchgfx7Outline6lineToEii>
 8023dd2:	4770      	bx	lr

08023dd4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8023dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023dd8:	4604      	mov	r4, r0
 8023dda:	2600      	movs	r6, #0
 8023ddc:	4b8e      	ldr	r3, [pc, #568]	; (8024018 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8023dde:	f100 0518 	add.w	r5, r0, #24
 8023de2:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8023de6:	b086      	sub	sp, #24
 8023de8:	4690      	mov	r8, r2
 8023dea:	e9c0 3100 	strd	r3, r1, [r0]
 8023dee:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8023df2:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8023df6:	4628      	mov	r0, r5
 8023df8:	f001 fb75 	bl	80254e6 <_ZN8touchgfx15RenderingBufferC1Ev>
 8023dfc:	4638      	mov	r0, r7
 8023dfe:	f000 fb45 	bl	802448c <_ZN8touchgfx7OutlineC1Ev>
 8023e02:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8023e06:	f001 fb23 	bl	8025450 <_ZN8touchgfx8ScanlineC1Ev>
 8023e0a:	2301      	movs	r3, #1
 8023e0c:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8023e10:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8023e14:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023e18:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8023e1c:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8023e20:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8023e24:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8023e28:	f7f3 fcb0 	bl	801778c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8023e2c:	b928      	cbnz	r0, 8023e3a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8023e2e:	4b7b      	ldr	r3, [pc, #492]	; (802401c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8023e30:	2118      	movs	r1, #24
 8023e32:	4a7b      	ldr	r2, [pc, #492]	; (8024020 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023e34:	487b      	ldr	r0, [pc, #492]	; (8024024 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8023e36:	f001 fb99 	bl	802556c <__assert_func>
 8023e3a:	f9b8 2000 	ldrsh.w	r2, [r8]
 8023e3e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8023e42:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8023e46:	4410      	add	r0, r2
 8023e48:	9602      	str	r6, [sp, #8]
 8023e4a:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8023e4e:	b280      	uxth	r0, r0
 8023e50:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8023e54:	fa0f fa80 	sxth.w	sl, r0
 8023e58:	f1ba 0f00 	cmp.w	sl, #0
 8023e5c:	dd70      	ble.n	8023f40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023e5e:	4591      	cmp	r9, r2
 8023e60:	dd6e      	ble.n	8023f40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023e62:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8023e66:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8023e6a:	440b      	add	r3, r1
 8023e6c:	b29b      	uxth	r3, r3
 8023e6e:	b21e      	sxth	r6, r3
 8023e70:	2e00      	cmp	r6, #0
 8023e72:	dd65      	ble.n	8023f40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023e74:	458e      	cmp	lr, r1
 8023e76:	dd63      	ble.n	8023f40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023e78:	45d1      	cmp	r9, sl
 8023e7a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8023e7e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8023e82:	bfb8      	it	lt
 8023e84:	fa1f f089 	uxthlt.w	r0, r9
 8023e88:	45b6      	cmp	lr, r6
 8023e8a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8023e8e:	bfb8      	it	lt
 8023e90:	fa1f f38e 	uxthlt.w	r3, lr
 8023e94:	1a80      	subs	r0, r0, r2
 8023e96:	f8ad 100a 	strh.w	r1, [sp, #10]
 8023e9a:	1a5b      	subs	r3, r3, r1
 8023e9c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8023ea0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023ea4:	f10d 0808 	add.w	r8, sp, #8
 8023ea8:	ae04      	add	r6, sp, #16
 8023eaa:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023eae:	e886 0003 	stmia.w	r6, {r0, r1}
 8023eb2:	f8dc 3000 	ldr.w	r3, [ip]
 8023eb6:	4660      	mov	r0, ip
 8023eb8:	4631      	mov	r1, r6
 8023eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ebc:	4798      	blx	r3
 8023ebe:	6861      	ldr	r1, [r4, #4]
 8023ec0:	4640      	mov	r0, r8
 8023ec2:	3104      	adds	r1, #4
 8023ec4:	f7f4 ff3a 	bl	8018d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023ec8:	4630      	mov	r0, r6
 8023eca:	f7f4 ff4f 	bl	8018d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023ece:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8023ed2:	f7f3 fbeb 	bl	80176ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8023ed6:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8023eda:	4638      	mov	r0, r7
 8023edc:	f000 fab2 	bl	8024444 <_ZN8touchgfx7Outline5resetEv>
 8023ee0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023ee4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8023ee8:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8023eec:	015b      	lsls	r3, r3, #5
 8023eee:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8023ef2:	0152      	lsls	r2, r2, #5
 8023ef4:	60e3      	str	r3, [r4, #12]
 8023ef6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023efa:	60a2      	str	r2, [r4, #8]
 8023efc:	015b      	lsls	r3, r3, #5
 8023efe:	6123      	str	r3, [r4, #16]
 8023f00:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8023f04:	015b      	lsls	r3, r3, #5
 8023f06:	6163      	str	r3, [r4, #20]
 8023f08:	4b47      	ldr	r3, [pc, #284]	; (8024028 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8023f0a:	6818      	ldr	r0, [r3, #0]
 8023f0c:	6803      	ldr	r3, [r0, #0]
 8023f0e:	6a1b      	ldr	r3, [r3, #32]
 8023f10:	4798      	blx	r3
 8023f12:	4606      	mov	r6, r0
 8023f14:	f7eb fc68 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8023f18:	6803      	ldr	r3, [r0, #0]
 8023f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023f1c:	4798      	blx	r3
 8023f1e:	4607      	mov	r7, r0
 8023f20:	f7eb fc62 	bl	800f7e8 <_ZN8touchgfx3HAL3lcdEv>
 8023f24:	6803      	ldr	r3, [r0, #0]
 8023f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f28:	4798      	blx	r3
 8023f2a:	280c      	cmp	r0, #12
 8023f2c:	d854      	bhi.n	8023fd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8023f2e:	e8df f000 	tbb	[pc, r0]
 8023f32:	554b      	.short	0x554b
 8023f34:	2b6e0a66 	.word	0x2b6e0a66
 8023f38:	5f5f5f3b 	.word	0x5f5f5f3b
 8023f3c:	5f5f      	.short	0x5f5f
 8023f3e:	6e          	.byte	0x6e
 8023f3f:	00          	.byte	0x00
 8023f40:	2300      	movs	r3, #0
 8023f42:	9303      	str	r3, [sp, #12]
 8023f44:	e7ae      	b.n	8023ea4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8023f46:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023f4a:	2108      	movs	r1, #8
 8023f4c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023f50:	fb92 f1f1 	sdiv	r1, r2, r1
 8023f54:	fb07 1303 	mla	r3, r7, r3, r1
 8023f58:	441e      	add	r6, r3
 8023f5a:	4253      	negs	r3, r2
 8023f5c:	f002 0207 	and.w	r2, r2, #7
 8023f60:	f003 0307 	and.w	r3, r3, #7
 8023f64:	bf58      	it	pl
 8023f66:	425a      	negpl	r2, r3
 8023f68:	b2d2      	uxtb	r2, r2
 8023f6a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023f6e:	4628      	mov	r0, r5
 8023f70:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023f74:	66e1      	str	r1, [r4, #108]	; 0x6c
 8023f76:	e9cd 1700 	strd	r1, r7, [sp]
 8023f7a:	4631      	mov	r1, r6
 8023f7c:	f001 fabb 	bl	80254f6 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8023f80:	4620      	mov	r0, r4
 8023f82:	b006      	add	sp, #24
 8023f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023f88:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023f8c:	2104      	movs	r1, #4
 8023f8e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023f92:	fb92 f1f1 	sdiv	r1, r2, r1
 8023f96:	fb07 1303 	mla	r3, r7, r3, r1
 8023f9a:	441e      	add	r6, r3
 8023f9c:	4253      	negs	r3, r2
 8023f9e:	f002 0203 	and.w	r2, r2, #3
 8023fa2:	f003 0303 	and.w	r3, r3, #3
 8023fa6:	e7dd      	b.n	8023f64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8023fa8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023fac:	2102      	movs	r1, #2
 8023fae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023fb2:	2a00      	cmp	r2, #0
 8023fb4:	fb92 f1f1 	sdiv	r1, r2, r1
 8023fb8:	f002 0201 	and.w	r2, r2, #1
 8023fbc:	fb07 1303 	mla	r3, r7, r3, r1
 8023fc0:	bfb8      	it	lt
 8023fc2:	4252      	neglt	r2, r2
 8023fc4:	441e      	add	r6, r3
 8023fc6:	e7cf      	b.n	8023f68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8023fc8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023fcc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023fd0:	437b      	muls	r3, r7
 8023fd2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023fd6:	441e      	add	r6, r3
 8023fd8:	2200      	movs	r2, #0
 8023fda:	e7c6      	b.n	8023f6a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8023fdc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023fe0:	2103      	movs	r1, #3
 8023fe2:	fb07 f203 	mul.w	r2, r7, r3
 8023fe6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8023fea:	fb13 2301 	smlabb	r3, r3, r1, r2
 8023fee:	e7f2      	b.n	8023fd6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023ff0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023ff4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023ff8:	fb07 2303 	mla	r3, r7, r3, r2
 8023ffc:	e7eb      	b.n	8023fd6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023ffe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024002:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024006:	437b      	muls	r3, r7
 8024008:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802400c:	e7e3      	b.n	8023fd6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802400e:	4b07      	ldr	r3, [pc, #28]	; (802402c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8024010:	2156      	movs	r1, #86	; 0x56
 8024012:	4a03      	ldr	r2, [pc, #12]	; (8024020 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8024014:	e70e      	b.n	8023e34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8024016:	bf00      	nop
 8024018:	0802b4fc 	.word	0x0802b4fc
 802401c:	0802b446 	.word	0x0802b446
 8024020:	0802b504 	.word	0x0802b504
 8024024:	0802b4a2 	.word	0x0802b4a2
 8024028:	2000bb90 	.word	0x2000bb90
 802402c:	0802b4d6 	.word	0x0802b4d6

08024030 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8024030:	6812      	ldr	r2, [r2, #0]
 8024032:	2a00      	cmp	r2, #0
 8024034:	db0b      	blt.n	802404e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8024036:	9800      	ldr	r0, [sp, #0]
 8024038:	6800      	ldr	r0, [r0, #0]
 802403a:	4290      	cmp	r0, r2
 802403c:	bfd4      	ite	le
 802403e:	2002      	movle	r0, #2
 8024040:	2000      	movgt	r0, #0
 8024042:	680a      	ldr	r2, [r1, #0]
 8024044:	2a00      	cmp	r2, #0
 8024046:	da04      	bge.n	8024052 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8024048:	f040 0004 	orr.w	r0, r0, #4
 802404c:	4770      	bx	lr
 802404e:	2001      	movs	r0, #1
 8024050:	e7f7      	b.n	8024042 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8024052:	681b      	ldr	r3, [r3, #0]
 8024054:	4293      	cmp	r3, r2
 8024056:	bfd8      	it	le
 8024058:	f040 0008 	orrle.w	r0, r0, #8
 802405c:	4770      	bx	lr
	...

08024060 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8024060:	4b07      	ldr	r3, [pc, #28]	; (8024080 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8024062:	b510      	push	{r4, lr}
 8024064:	781b      	ldrb	r3, [r3, #0]
 8024066:	2b01      	cmp	r3, #1
 8024068:	d108      	bne.n	802407c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802406a:	6843      	ldr	r3, [r0, #4]
 802406c:	6814      	ldr	r4, [r2, #0]
 802406e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8024072:	680b      	ldr	r3, [r1, #0]
 8024074:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8024078:	6013      	str	r3, [r2, #0]
 802407a:	600c      	str	r4, [r1, #0]
 802407c:	bd10      	pop	{r4, pc}
 802407e:	bf00      	nop
 8024080:	2000bb88 	.word	0x2000bb88

08024084 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024086:	b085      	sub	sp, #20
 8024088:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802408c:	4604      	mov	r4, r0
 802408e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024092:	b33b      	cbz	r3, 80240e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8024094:	aa02      	add	r2, sp, #8
 8024096:	a903      	add	r1, sp, #12
 8024098:	f7ff ffe2 	bl	8024060 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802409c:	68a3      	ldr	r3, [r4, #8]
 802409e:	9e03      	ldr	r6, [sp, #12]
 80240a0:	aa02      	add	r2, sp, #8
 80240a2:	9f02      	ldr	r7, [sp, #8]
 80240a4:	a903      	add	r1, sp, #12
 80240a6:	1af6      	subs	r6, r6, r3
 80240a8:	68e3      	ldr	r3, [r4, #12]
 80240aa:	4620      	mov	r0, r4
 80240ac:	1aff      	subs	r7, r7, r3
 80240ae:	f104 0314 	add.w	r3, r4, #20
 80240b2:	9603      	str	r6, [sp, #12]
 80240b4:	9300      	str	r3, [sp, #0]
 80240b6:	f104 0310 	add.w	r3, r4, #16
 80240ba:	9702      	str	r7, [sp, #8]
 80240bc:	f7ff ffb8 	bl	8024030 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80240c0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80240c4:	4605      	mov	r5, r0
 80240c6:	b97b      	cbnz	r3, 80240e8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80240c8:	463a      	mov	r2, r7
 80240ca:	4631      	mov	r1, r6
 80240cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80240d0:	f7ff fe7a 	bl	8023dc8 <_ZN8touchgfx10Rasterizer6lineToEii>
 80240d4:	9b03      	ldr	r3, [sp, #12]
 80240d6:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80240da:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 80240de:	9b02      	ldr	r3, [sp, #8]
 80240e0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80240e4:	b005      	add	sp, #20
 80240e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80240e8:	b110      	cbz	r0, 80240f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80240ea:	ea13 0200 	ands.w	r2, r3, r0
 80240ee:	d11c      	bne.n	802412a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80240f0:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 80240f4:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80240f8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 80240fc:	b188      	cbz	r0, 8024122 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80240fe:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8024102:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8024106:	b913      	cbnz	r3, 802410e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8024108:	4630      	mov	r0, r6
 802410a:	f001 f806 	bl	802511a <_ZN8touchgfx7Outline6moveToEii>
 802410e:	2300      	movs	r3, #0
 8024110:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024114:	2301      	movs	r3, #1
 8024116:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802411a:	4630      	mov	r0, r6
 802411c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8024120:	e7d6      	b.n	80240d0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8024122:	4630      	mov	r0, r6
 8024124:	f7ff fe50 	bl	8023dc8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024128:	e7f7      	b.n	802411a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802412a:	4615      	mov	r5, r2
 802412c:	e7d2      	b.n	80240d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802412e <_ZN8touchgfx6Canvas5closeEv>:
 802412e:	b538      	push	{r3, r4, r5, lr}
 8024130:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8024134:	4604      	mov	r4, r0
 8024136:	b993      	cbnz	r3, 802415e <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024138:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 802413c:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8024140:	4213      	tst	r3, r2
 8024142:	d10c      	bne.n	802415e <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024144:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8024148:	b123      	cbz	r3, 8024154 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802414a:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 802414e:	4628      	mov	r0, r5
 8024150:	f7ff fe3a 	bl	8023dc8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024154:	4628      	mov	r0, r5
 8024156:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 802415a:	f7ff fe35 	bl	8023dc8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802415e:	2300      	movs	r3, #0
 8024160:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024164:	bd38      	pop	{r3, r4, r5, pc}

08024166 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8024166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024168:	b085      	sub	sp, #20
 802416a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802416e:	4604      	mov	r4, r0
 8024170:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024174:	b353      	cbz	r3, 80241cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8024176:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 802417a:	b90b      	cbnz	r3, 8024180 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802417c:	f7ff ffd7 	bl	802412e <_ZN8touchgfx6Canvas5closeEv>
 8024180:	aa02      	add	r2, sp, #8
 8024182:	a903      	add	r1, sp, #12
 8024184:	4620      	mov	r0, r4
 8024186:	f7ff ff6b 	bl	8024060 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802418a:	68a3      	ldr	r3, [r4, #8]
 802418c:	9d03      	ldr	r5, [sp, #12]
 802418e:	aa02      	add	r2, sp, #8
 8024190:	9e02      	ldr	r6, [sp, #8]
 8024192:	a903      	add	r1, sp, #12
 8024194:	1aed      	subs	r5, r5, r3
 8024196:	68e3      	ldr	r3, [r4, #12]
 8024198:	4620      	mov	r0, r4
 802419a:	1af6      	subs	r6, r6, r3
 802419c:	f104 0314 	add.w	r3, r4, #20
 80241a0:	9503      	str	r5, [sp, #12]
 80241a2:	9300      	str	r3, [sp, #0]
 80241a4:	f104 0310 	add.w	r3, r4, #16
 80241a8:	9602      	str	r6, [sp, #8]
 80241aa:	f7ff ff41 	bl	8024030 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80241ae:	4607      	mov	r7, r0
 80241b0:	b170      	cbz	r0, 80241d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80241b2:	2301      	movs	r3, #1
 80241b4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80241b8:	9a03      	ldr	r2, [sp, #12]
 80241ba:	9b02      	ldr	r3, [sp, #8]
 80241bc:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80241c0:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 80241c4:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 80241c8:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 80241cc:	b005      	add	sp, #20
 80241ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80241d0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80241d4:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 80241d8:	b92b      	cbnz	r3, 80241e6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80241da:	4632      	mov	r2, r6
 80241dc:	4629      	mov	r1, r5
 80241de:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80241e2:	f000 ff9a 	bl	802511a <_ZN8touchgfx7Outline6moveToEii>
 80241e6:	2300      	movs	r3, #0
 80241e8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80241ec:	2301      	movs	r3, #1
 80241ee:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80241f2:	e7e1      	b.n	80241b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080241f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80241f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241f8:	4604      	mov	r4, r0
 80241fa:	b087      	sub	sp, #28
 80241fc:	9105      	str	r1, [sp, #20]
 80241fe:	f001 f8d0 	bl	80253a2 <_ZN8touchgfx7Outline8getCellsEv>
 8024202:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8024206:	4605      	mov	r5, r0
 8024208:	f1b9 0f00 	cmp.w	r9, #0
 802420c:	d103      	bne.n	8024216 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802420e:	2001      	movs	r0, #1
 8024210:	b007      	add	sp, #28
 8024212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024216:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802421a:	2e00      	cmp	r6, #0
 802421c:	d139      	bne.n	8024292 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802421e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8024222:	f105 0708 	add.w	r7, r5, #8
 8024226:	4640      	mov	r0, r8
 8024228:	f001 f8fd 	bl	8025426 <_ZN8touchgfx8Scanline5resetEv>
 802422c:	f109 33ff 	add.w	r3, r9, #4294967295
 8024230:	9303      	str	r3, [sp, #12]
 8024232:	f9b5 b000 	ldrsh.w	fp, [r5]
 8024236:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802423a:	46da      	mov	sl, fp
 802423c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8024240:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8024244:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8024248:	9b03      	ldr	r3, [sp, #12]
 802424a:	4416      	add	r6, r2
 802424c:	9504      	str	r5, [sp, #16]
 802424e:	463d      	mov	r5, r7
 8024250:	3b01      	subs	r3, #1
 8024252:	9303      	str	r3, [sp, #12]
 8024254:	3301      	adds	r3, #1
 8024256:	d01e      	beq.n	8024296 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8024258:	3708      	adds	r7, #8
 802425a:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802425e:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8024262:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8024266:	4290      	cmp	r0, r2
 8024268:	d11e      	bne.n	80242a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802426a:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802426e:	4411      	add	r1, r2
 8024270:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8024274:	e7e8      	b.n	8024248 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8024276:	1c91      	adds	r1, r2, #2
 8024278:	f04f 0301 	mov.w	r3, #1
 802427c:	65e1      	str	r1, [r4, #92]	; 0x5c
 802427e:	8053      	strh	r3, [r2, #2]
 8024280:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8024282:	1c91      	adds	r1, r2, #2
 8024284:	65a1      	str	r1, [r4, #88]	; 0x58
 8024286:	f8a2 b002 	strh.w	fp, [r2, #2]
 802428a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802428c:	3201      	adds	r2, #1
 802428e:	6562      	str	r2, [r4, #84]	; 0x54
 8024290:	e03a      	b.n	8024308 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8024292:	2000      	movs	r0, #0
 8024294:	e7bc      	b.n	8024210 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024296:	b951      	cbnz	r1, 80242ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024298:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802429a:	2b00      	cmp	r3, #0
 802429c:	d0b7      	beq.n	802420e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802429e:	4641      	mov	r1, r8
 80242a0:	9805      	ldr	r0, [sp, #20]
 80242a2:	f7ff fd5b 	bl	8023d5c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80242a6:	e7b2      	b.n	802420e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80242a8:	2900      	cmp	r1, #0
 80242aa:	d035      	beq.n	8024318 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80242ac:	9504      	str	r5, [sp, #16]
 80242ae:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80242b2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80242b6:	f7ff fd3d 	bl	8023d34 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80242ba:	4605      	mov	r5, r0
 80242bc:	b330      	cbz	r0, 802430c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80242be:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80242c0:	b182      	cbz	r2, 80242e4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80242c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80242c4:	454a      	cmp	r2, r9
 80242c6:	d00d      	beq.n	80242e4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80242c8:	4641      	mov	r1, r8
 80242ca:	9805      	ldr	r0, [sp, #20]
 80242cc:	f7ff fd46 	bl	8023d5c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80242d0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80242d4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80242d6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80242da:	65e2      	str	r2, [r4, #92]	; 0x5c
 80242dc:	2300      	movs	r3, #0
 80242de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80242e0:	6563      	str	r3, [r4, #84]	; 0x54
 80242e2:	65a2      	str	r2, [r4, #88]	; 0x58
 80242e4:	f1bb 0f00 	cmp.w	fp, #0
 80242e8:	db10      	blt.n	802430c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80242ea:	f7f3 fa5d 	bl	80177a8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80242ee:	4583      	cmp	fp, r0
 80242f0:	d20c      	bcs.n	802430c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80242f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80242f4:	f802 500b 	strb.w	r5, [r2, fp]
 80242f8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80242fa:	3201      	adds	r2, #1
 80242fc:	455a      	cmp	r2, fp
 80242fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8024300:	d1b9      	bne.n	8024276 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8024302:	8811      	ldrh	r1, [r2, #0]
 8024304:	3101      	adds	r1, #1
 8024306:	8011      	strh	r1, [r2, #0]
 8024308:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802430c:	9b03      	ldr	r3, [sp, #12]
 802430e:	3301      	adds	r3, #1
 8024310:	d0c2      	beq.n	8024298 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8024312:	f10b 0a01 	add.w	sl, fp, #1
 8024316:	9d04      	ldr	r5, [sp, #16]
 8024318:	f9b5 3000 	ldrsh.w	r3, [r5]
 802431c:	4553      	cmp	r3, sl
 802431e:	dd88      	ble.n	8024232 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024320:	01b1      	lsls	r1, r6, #6
 8024322:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024326:	f7ff fd05 	bl	8023d34 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802432a:	4683      	mov	fp, r0
 802432c:	2800      	cmp	r0, #0
 802432e:	d080      	beq.n	8024232 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8024330:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8024332:	b183      	cbz	r3, 8024356 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8024334:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8024336:	454b      	cmp	r3, r9
 8024338:	d00d      	beq.n	8024356 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802433a:	4641      	mov	r1, r8
 802433c:	9805      	ldr	r0, [sp, #20]
 802433e:	f7ff fd0d 	bl	8023d5c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024342:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024346:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802434a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802434c:	65e3      	str	r3, [r4, #92]	; 0x5c
 802434e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024350:	65a3      	str	r3, [r4, #88]	; 0x58
 8024352:	2300      	movs	r3, #0
 8024354:	6563      	str	r3, [r4, #84]	; 0x54
 8024356:	f9b5 3000 	ldrsh.w	r3, [r5]
 802435a:	464a      	mov	r2, r9
 802435c:	f8cd b000 	str.w	fp, [sp]
 8024360:	4651      	mov	r1, sl
 8024362:	eba3 030a 	sub.w	r3, r3, sl
 8024366:	4640      	mov	r0, r8
 8024368:	f001 f884 	bl	8025474 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802436c:	e761      	b.n	8024232 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802436e <_ZN8touchgfx6Canvas6renderEv>:
 802436e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024370:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8024374:	4604      	mov	r4, r0
 8024376:	b913      	cbnz	r3, 802437e <_ZN8touchgfx6Canvas6renderEv+0x10>
 8024378:	2001      	movs	r0, #1
 802437a:	b003      	add	sp, #12
 802437c:	bd30      	pop	{r4, r5, pc}
 802437e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8024382:	2b00      	cmp	r3, #0
 8024384:	d131      	bne.n	80243ea <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8024386:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 802438a:	2b00      	cmp	r3, #0
 802438c:	d0f4      	beq.n	8024378 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802438e:	6840      	ldr	r0, [r0, #4]
 8024390:	6803      	ldr	r3, [r0, #0]
 8024392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024394:	4798      	blx	r3
 8024396:	2800      	cmp	r0, #0
 8024398:	d0ee      	beq.n	8024378 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802439a:	4620      	mov	r0, r4
 802439c:	f7ff fec7 	bl	802412e <_ZN8touchgfx6Canvas5closeEv>
 80243a0:	6860      	ldr	r0, [r4, #4]
 80243a2:	6803      	ldr	r3, [r0, #0]
 80243a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80243a6:	4798      	blx	r3
 80243a8:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80243ac:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80243b0:	f7f2 f993 	bl	80166da <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 80243b4:	6860      	ldr	r0, [r4, #4]
 80243b6:	6803      	ldr	r3, [r0, #0]
 80243b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80243ba:	4798      	blx	r3
 80243bc:	4605      	mov	r5, r0
 80243be:	6860      	ldr	r0, [r4, #4]
 80243c0:	6803      	ldr	r3, [r0, #0]
 80243c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80243c4:	4798      	blx	r3
 80243c6:	4601      	mov	r1, r0
 80243c8:	4628      	mov	r0, r5
 80243ca:	f7f2 f989 	bl	80166e0 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 80243ce:	6860      	ldr	r0, [r4, #4]
 80243d0:	6803      	ldr	r3, [r0, #0]
 80243d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80243d4:	4798      	blx	r3
 80243d6:	f104 0318 	add.w	r3, r4, #24
 80243da:	4669      	mov	r1, sp
 80243dc:	e9cd 3000 	strd	r3, r0, [sp]
 80243e0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80243e4:	f7ff ff06 	bl	80241f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 80243e8:	e7c7      	b.n	802437a <_ZN8touchgfx6Canvas6renderEv+0xc>
 80243ea:	2000      	movs	r0, #0
 80243ec:	e7c5      	b.n	802437a <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

080243f0 <_ZN8touchgfx6CanvasD1Ev>:
 80243f0:	b538      	push	{r3, r4, r5, lr}
 80243f2:	4605      	mov	r5, r0
 80243f4:	4b08      	ldr	r3, [pc, #32]	; (8024418 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 80243f6:	4604      	mov	r4, r0
 80243f8:	f845 3b2c 	str.w	r3, [r5], #44
 80243fc:	4b07      	ldr	r3, [pc, #28]	; (802441c <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80243fe:	6818      	ldr	r0, [r3, #0]
 8024400:	6803      	ldr	r3, [r0, #0]
 8024402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024404:	4798      	blx	r3
 8024406:	4628      	mov	r0, r5
 8024408:	f000 f814 	bl	8024434 <_ZN8touchgfx7OutlineD1Ev>
 802440c:	f104 0018 	add.w	r0, r4, #24
 8024410:	f001 f870 	bl	80254f4 <_ZN8touchgfx15RenderingBufferD1Ev>
 8024414:	4620      	mov	r0, r4
 8024416:	bd38      	pop	{r3, r4, r5, pc}
 8024418:	0802b4fc 	.word	0x0802b4fc
 802441c:	2000bb90 	.word	0x2000bb90

08024420 <_ZN8touchgfx6CanvasD0Ev>:
 8024420:	b510      	push	{r4, lr}
 8024422:	4604      	mov	r4, r0
 8024424:	f7ff ffe4 	bl	80243f0 <_ZN8touchgfx6CanvasD1Ev>
 8024428:	21b8      	movs	r1, #184	; 0xb8
 802442a:	4620      	mov	r0, r4
 802442c:	f001 f873 	bl	8025516 <_ZdlPvj>
 8024430:	4620      	mov	r0, r4
 8024432:	bd10      	pop	{r4, pc}

08024434 <_ZN8touchgfx7OutlineD1Ev>:
 8024434:	4770      	bx	lr

08024436 <_ZN8touchgfx7OutlineD0Ev>:
 8024436:	b510      	push	{r4, lr}
 8024438:	4604      	mov	r4, r0
 802443a:	2148      	movs	r1, #72	; 0x48
 802443c:	f001 f86b 	bl	8025516 <_ZdlPvj>
 8024440:	4620      	mov	r0, r4
 8024442:	bd10      	pop	{r4, pc}

08024444 <_ZN8touchgfx7Outline5resetEv>:
 8024444:	b510      	push	{r4, lr}
 8024446:	4604      	mov	r4, r0
 8024448:	f7f3 f9c6 	bl	80177d8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802444c:	60e0      	str	r0, [r4, #12]
 802444e:	f7f3 f9c9 	bl	80177e4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8024452:	68e3      	ldr	r3, [r4, #12]
 8024454:	2200      	movs	r2, #0
 8024456:	08c0      	lsrs	r0, r0, #3
 8024458:	6123      	str	r3, [r4, #16]
 802445a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802445e:	6060      	str	r0, [r4, #4]
 8024460:	82a3      	strh	r3, [r4, #20]
 8024462:	82e3      	strh	r3, [r4, #22]
 8024464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024466:	60a2      	str	r2, [r4, #8]
 8024468:	f023 0301 	bic.w	r3, r3, #1
 802446c:	8322      	strh	r2, [r4, #24]
 802446e:	8362      	strh	r2, [r4, #26]
 8024470:	f043 0302 	orr.w	r3, r3, #2
 8024474:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024478:	63e3      	str	r3, [r4, #60]	; 0x3c
 802447a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802447e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8024482:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024486:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802448a:	bd10      	pop	{r4, pc}

0802448c <_ZN8touchgfx7OutlineC1Ev>:
 802448c:	4b0f      	ldr	r3, [pc, #60]	; (80244cc <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802448e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024492:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8024496:	b510      	push	{r4, lr}
 8024498:	6003      	str	r3, [r0, #0]
 802449a:	2300      	movs	r3, #0
 802449c:	4604      	mov	r4, r0
 802449e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80244a2:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80244a6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80244aa:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80244ae:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80244b2:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80244b6:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80244ba:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80244be:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80244c2:	f7ff ffbf 	bl	8024444 <_ZN8touchgfx7Outline5resetEv>
 80244c6:	4620      	mov	r0, r4
 80244c8:	bd10      	pop	{r4, pc}
 80244ca:	bf00      	nop
 80244cc:	0802b55c 	.word	0x0802b55c

080244d0 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80244d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244d4:	b093      	sub	sp, #76	; 0x4c
 80244d6:	4604      	mov	r4, r0
 80244d8:	1156      	asrs	r6, r2, #5
 80244da:	f002 0e1f 	and.w	lr, r2, #31
 80244de:	981c      	ldr	r0, [sp, #112]	; 0x70
 80244e0:	9305      	str	r3, [sp, #20]
 80244e2:	1143      	asrs	r3, r0, #5
 80244e4:	1145      	asrs	r5, r0, #5
 80244e6:	930c      	str	r3, [sp, #48]	; 0x30
 80244e8:	f000 031f 	and.w	r3, r0, #31
 80244ec:	9303      	str	r3, [sp, #12]
 80244ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80244f0:	42b3      	cmp	r3, r6
 80244f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80244f4:	bfc8      	it	gt
 80244f6:	6326      	strgt	r6, [r4, #48]	; 0x30
 80244f8:	42b3      	cmp	r3, r6
 80244fa:	bfdc      	itt	le
 80244fc:	1c73      	addle	r3, r6, #1
 80244fe:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024500:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024502:	42ab      	cmp	r3, r5
 8024504:	bfc8      	it	gt
 8024506:	462b      	movgt	r3, r5
 8024508:	ea4f 1560 	mov.w	r5, r0, asr #5
 802450c:	bfc8      	it	gt
 802450e:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024512:	42ab      	cmp	r3, r5
 8024514:	bfd8      	it	le
 8024516:	462b      	movle	r3, r5
 8024518:	ea4f 1561 	mov.w	r5, r1, asr #5
 802451c:	bfdc      	itt	le
 802451e:	3301      	addle	r3, #1
 8024520:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024522:	9b05      	ldr	r3, [sp, #20]
 8024524:	eba3 0a01 	sub.w	sl, r3, r1
 8024528:	1143      	asrs	r3, r0, #5
 802452a:	429e      	cmp	r6, r3
 802452c:	f040 8119 	bne.w	8024762 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8024530:	9b05      	ldr	r3, [sp, #20]
 8024532:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8024536:	9b03      	ldr	r3, [sp, #12]
 8024538:	459e      	cmp	lr, r3
 802453a:	d12c      	bne.n	8024596 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 802453c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024540:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8024544:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8024548:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802454c:	4291      	cmp	r1, r2
 802454e:	d037      	beq.n	80245c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024550:	8b61      	ldrh	r1, [r4, #26]
 8024552:	8b22      	ldrh	r2, [r4, #24]
 8024554:	430a      	orrs	r2, r1
 8024556:	d00b      	beq.n	8024570 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8024558:	2b00      	cmp	r3, #0
 802455a:	db09      	blt.n	8024570 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802455c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802455e:	429a      	cmp	r2, r3
 8024560:	dd06      	ble.n	8024570 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8024562:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024566:	429a      	cmp	r2, r3
 8024568:	d308      	bcc.n	802457c <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 802456a:	2301      	movs	r3, #1
 802456c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024570:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024574:	82e6      	strh	r6, [r4, #22]
 8024576:	2300      	movs	r3, #0
 8024578:	8323      	strh	r3, [r4, #24]
 802457a:	e0c6      	b.n	802470a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802457c:	f104 0314 	add.w	r3, r4, #20
 8024580:	6922      	ldr	r2, [r4, #16]
 8024582:	cb03      	ldmia	r3!, {r0, r1}
 8024584:	6010      	str	r0, [r2, #0]
 8024586:	6051      	str	r1, [r2, #4]
 8024588:	6923      	ldr	r3, [r4, #16]
 802458a:	3308      	adds	r3, #8
 802458c:	6123      	str	r3, [r4, #16]
 802458e:	68a3      	ldr	r3, [r4, #8]
 8024590:	3301      	adds	r3, #1
 8024592:	60a3      	str	r3, [r4, #8]
 8024594:	e7ec      	b.n	8024570 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8024596:	9b05      	ldr	r3, [sp, #20]
 8024598:	45ac      	cmp	ip, r5
 802459a:	f001 011f 	and.w	r1, r1, #31
 802459e:	8b20      	ldrh	r0, [r4, #24]
 80245a0:	f003 031f 	and.w	r3, r3, #31
 80245a4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80245a8:	9304      	str	r3, [sp, #16]
 80245aa:	9b03      	ldr	r3, [sp, #12]
 80245ac:	eba3 020e 	sub.w	r2, r3, lr
 80245b0:	d109      	bne.n	80245c6 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 80245b2:	9b04      	ldr	r3, [sp, #16]
 80245b4:	4410      	add	r0, r2
 80245b6:	4419      	add	r1, r3
 80245b8:	8320      	strh	r0, [r4, #24]
 80245ba:	fb02 8201 	mla	r2, r2, r1, r8
 80245be:	8362      	strh	r2, [r4, #26]
 80245c0:	b013      	add	sp, #76	; 0x4c
 80245c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245c6:	f1ba 0f00 	cmp.w	sl, #0
 80245ca:	f2c0 80a0 	blt.w	802470e <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 80245ce:	f1c1 0320 	rsb	r3, r1, #32
 80245d2:	f04f 0b20 	mov.w	fp, #32
 80245d6:	435a      	muls	r2, r3
 80245d8:	2301      	movs	r3, #1
 80245da:	9302      	str	r3, [sp, #8]
 80245dc:	4459      	add	r1, fp
 80245de:	fb92 f7fa 	sdiv	r7, r2, sl
 80245e2:	fb0a 2217 	mls	r2, sl, r7, r2
 80245e6:	2a00      	cmp	r2, #0
 80245e8:	bfbc      	itt	lt
 80245ea:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80245ee:	4452      	addlt	r2, sl
 80245f0:	fb07 8101 	mla	r1, r7, r1, r8
 80245f4:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80245f8:	4438      	add	r0, r7
 80245fa:	b20b      	sxth	r3, r1
 80245fc:	9902      	ldr	r1, [sp, #8]
 80245fe:	b200      	sxth	r0, r0
 8024600:	9301      	str	r3, [sp, #4]
 8024602:	8363      	strh	r3, [r4, #26]
 8024604:	186b      	adds	r3, r5, r1
 8024606:	0435      	lsls	r5, r6, #16
 8024608:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802460c:	8320      	strh	r0, [r4, #24]
 802460e:	eb03 0905 	add.w	r9, r3, r5
 8024612:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8024616:	9300      	str	r3, [sp, #0]
 8024618:	45c1      	cmp	r9, r8
 802461a:	9505      	str	r5, [sp, #20]
 802461c:	d014      	beq.n	8024648 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 802461e:	9b01      	ldr	r3, [sp, #4]
 8024620:	4303      	orrs	r3, r0
 8024622:	d00b      	beq.n	802463c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024624:	2900      	cmp	r1, #0
 8024626:	db09      	blt.n	802463c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802462a:	428b      	cmp	r3, r1
 802462c:	dd06      	ble.n	802463c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802462e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024632:	4299      	cmp	r1, r3
 8024634:	d374      	bcc.n	8024720 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8024636:	2301      	movs	r3, #1
 8024638:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802463c:	9b00      	ldr	r3, [sp, #0]
 802463e:	82e6      	strh	r6, [r4, #22]
 8024640:	82a3      	strh	r3, [r4, #20]
 8024642:	2300      	movs	r3, #0
 8024644:	8323      	strh	r3, [r4, #24]
 8024646:	8363      	strh	r3, [r4, #26]
 8024648:	9900      	ldr	r1, [sp, #0]
 802464a:	eb0e 0307 	add.w	r3, lr, r7
 802464e:	458c      	cmp	ip, r1
 8024650:	d04e      	beq.n	80246f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8024652:	9903      	ldr	r1, [sp, #12]
 8024654:	eba2 020a 	sub.w	r2, r2, sl
 8024658:	1ac9      	subs	r1, r1, r3
 802465a:	9201      	str	r2, [sp, #4]
 802465c:	440f      	add	r7, r1
 802465e:	017f      	lsls	r7, r7, #5
 8024660:	fb97 fefa 	sdiv	lr, r7, sl
 8024664:	fb0a 771e 	mls	r7, sl, lr, r7
 8024668:	2f00      	cmp	r7, #0
 802466a:	bfbc      	itt	lt
 802466c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024670:	4457      	addlt	r7, sl
 8024672:	f10e 0101 	add.w	r1, lr, #1
 8024676:	9106      	str	r1, [sp, #24]
 8024678:	9a01      	ldr	r2, [sp, #4]
 802467a:	8b20      	ldrh	r0, [r4, #24]
 802467c:	19d2      	adds	r2, r2, r7
 802467e:	8b61      	ldrh	r1, [r4, #26]
 8024680:	9d02      	ldr	r5, [sp, #8]
 8024682:	9201      	str	r2, [sp, #4]
 8024684:	bf5b      	ittet	pl
 8024686:	eba2 020a 	subpl.w	r2, r2, sl
 802468a:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802468e:	46f0      	movmi	r8, lr
 8024690:	9201      	strpl	r2, [sp, #4]
 8024692:	9a00      	ldr	r2, [sp, #0]
 8024694:	4440      	add	r0, r8
 8024696:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802469a:	4443      	add	r3, r8
 802469c:	442a      	add	r2, r5
 802469e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80246a2:	9d05      	ldr	r5, [sp, #20]
 80246a4:	b200      	sxth	r0, r0
 80246a6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80246aa:	b209      	sxth	r1, r1
 80246ac:	4415      	add	r5, r2
 80246ae:	8320      	strh	r0, [r4, #24]
 80246b0:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80246b4:	8361      	strh	r1, [r4, #26]
 80246b6:	9200      	str	r2, [sp, #0]
 80246b8:	454d      	cmp	r5, r9
 80246ba:	d016      	beq.n	80246ea <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 80246bc:	4301      	orrs	r1, r0
 80246be:	d00d      	beq.n	80246dc <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80246c0:	f1b8 0f00 	cmp.w	r8, #0
 80246c4:	db0a      	blt.n	80246dc <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80246c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80246c8:	4541      	cmp	r1, r8
 80246ca:	dd07      	ble.n	80246dc <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80246cc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80246d0:	4288      	cmp	r0, r1
 80246d2:	d335      	bcc.n	8024740 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 80246d4:	f04f 0101 	mov.w	r1, #1
 80246d8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80246dc:	9900      	ldr	r1, [sp, #0]
 80246de:	82e6      	strh	r6, [r4, #22]
 80246e0:	82a1      	strh	r1, [r4, #20]
 80246e2:	f04f 0100 	mov.w	r1, #0
 80246e6:	8321      	strh	r1, [r4, #24]
 80246e8:	8361      	strh	r1, [r4, #26]
 80246ea:	9a00      	ldr	r2, [sp, #0]
 80246ec:	4594      	cmp	ip, r2
 80246ee:	d1c3      	bne.n	8024678 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 80246f0:	9a03      	ldr	r2, [sp, #12]
 80246f2:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 80246f6:	1ad3      	subs	r3, r2, r3
 80246f8:	8b22      	ldrh	r2, [r4, #24]
 80246fa:	441a      	add	r2, r3
 80246fc:	8322      	strh	r2, [r4, #24]
 80246fe:	9a04      	ldr	r2, [sp, #16]
 8024700:	3220      	adds	r2, #32
 8024702:	eba2 020b 	sub.w	r2, r2, fp
 8024706:	fb03 c302 	mla	r3, r3, r2, ip
 802470a:	8363      	strh	r3, [r4, #26]
 802470c:	e758      	b.n	80245c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802470e:	f04f 33ff 	mov.w	r3, #4294967295
 8024712:	434a      	muls	r2, r1
 8024714:	f1ca 0a00 	rsb	sl, sl, #0
 8024718:	f04f 0b00 	mov.w	fp, #0
 802471c:	9302      	str	r3, [sp, #8]
 802471e:	e75d      	b.n	80245dc <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8024720:	f104 0314 	add.w	r3, r4, #20
 8024724:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024728:	cb03      	ldmia	r3!, {r0, r1}
 802472a:	f8c8 0000 	str.w	r0, [r8]
 802472e:	f8c8 1004 	str.w	r1, [r8, #4]
 8024732:	6923      	ldr	r3, [r4, #16]
 8024734:	3308      	adds	r3, #8
 8024736:	6123      	str	r3, [r4, #16]
 8024738:	68a3      	ldr	r3, [r4, #8]
 802473a:	3301      	adds	r3, #1
 802473c:	60a3      	str	r3, [r4, #8]
 802473e:	e77d      	b.n	802463c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8024740:	f104 0814 	add.w	r8, r4, #20
 8024744:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024748:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802474c:	f8c9 0000 	str.w	r0, [r9]
 8024750:	f8c9 1004 	str.w	r1, [r9, #4]
 8024754:	6921      	ldr	r1, [r4, #16]
 8024756:	3108      	adds	r1, #8
 8024758:	6121      	str	r1, [r4, #16]
 802475a:	68a1      	ldr	r1, [r4, #8]
 802475c:	3101      	adds	r1, #1
 802475e:	60a1      	str	r1, [r4, #8]
 8024760:	e7bc      	b.n	80246dc <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024762:	1a83      	subs	r3, r0, r2
 8024764:	9301      	str	r3, [sp, #4]
 8024766:	f1ba 0f00 	cmp.w	sl, #0
 802476a:	f040 8094 	bne.w	8024896 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 802476e:	9a01      	ldr	r2, [sp, #4]
 8024770:	0049      	lsls	r1, r1, #1
 8024772:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8024776:	2a00      	cmp	r2, #0
 8024778:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802477c:	8b62      	ldrh	r2, [r4, #26]
 802477e:	bfaa      	itet	ge
 8024780:	f04f 0a20 	movge.w	sl, #32
 8024784:	f04f 38ff 	movlt.w	r8, #4294967295
 8024788:	f04f 0801 	movge.w	r8, #1
 802478c:	8b21      	ldrh	r1, [r4, #24]
 802478e:	ebaa 0e0e 	sub.w	lr, sl, lr
 8024792:	4471      	add	r1, lr
 8024794:	fb0e 2e03 	mla	lr, lr, r3, r2
 8024798:	eb08 0206 	add.w	r2, r8, r6
 802479c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80247a0:	b209      	sxth	r1, r1
 80247a2:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80247a6:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 80247aa:	8321      	strh	r1, [r4, #24]
 80247ac:	fa0f fe8e 	sxth.w	lr, lr
 80247b0:	42b7      	cmp	r7, r6
 80247b2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80247b6:	d013      	beq.n	80247e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 80247b8:	ea51 010e 	orrs.w	r1, r1, lr
 80247bc:	d00b      	beq.n	80247d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80247be:	2800      	cmp	r0, #0
 80247c0:	db09      	blt.n	80247d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80247c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80247c4:	4281      	cmp	r1, r0
 80247c6:	dd06      	ble.n	80247d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80247c8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80247cc:	4288      	cmp	r0, r1
 80247ce:	d339      	bcc.n	8024844 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 80247d0:	2101      	movs	r1, #1
 80247d2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80247d6:	2100      	movs	r1, #0
 80247d8:	82a5      	strh	r5, [r4, #20]
 80247da:	82e2      	strh	r2, [r4, #22]
 80247dc:	8321      	strh	r1, [r4, #24]
 80247de:	8361      	strh	r1, [r4, #26]
 80247e0:	f1aa 0610 	sub.w	r6, sl, #16
 80247e4:	f04f 0e00 	mov.w	lr, #0
 80247e8:	f04f 0b01 	mov.w	fp, #1
 80247ec:	0076      	lsls	r6, r6, #1
 80247ee:	fb06 f703 	mul.w	r7, r6, r3
 80247f2:	b236      	sxth	r6, r6
 80247f4:	b23f      	sxth	r7, r7
 80247f6:	ea46 0107 	orr.w	r1, r6, r7
 80247fa:	9100      	str	r1, [sp, #0]
 80247fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80247fe:	428a      	cmp	r2, r1
 8024800:	d03e      	beq.n	8024880 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8024802:	4442      	add	r2, r8
 8024804:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024808:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802480c:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8024810:	8326      	strh	r6, [r4, #24]
 8024812:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8024816:	8367      	strh	r7, [r4, #26]
 8024818:	4584      	cmp	ip, r0
 802481a:	d0ef      	beq.n	80247fc <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 802481c:	9800      	ldr	r0, [sp, #0]
 802481e:	b150      	cbz	r0, 8024836 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024820:	2900      	cmp	r1, #0
 8024822:	db08      	blt.n	8024836 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024824:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024826:	4288      	cmp	r0, r1
 8024828:	dd05      	ble.n	8024836 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802482a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802482e:	4288      	cmp	r0, r1
 8024830:	d315      	bcc.n	802485e <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024832:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8024836:	82a5      	strh	r5, [r4, #20]
 8024838:	82e2      	strh	r2, [r4, #22]
 802483a:	f8a4 e018 	strh.w	lr, [r4, #24]
 802483e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024842:	e7db      	b.n	80247fc <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8024844:	f104 0614 	add.w	r6, r4, #20
 8024848:	6927      	ldr	r7, [r4, #16]
 802484a:	ce03      	ldmia	r6!, {r0, r1}
 802484c:	6038      	str	r0, [r7, #0]
 802484e:	6079      	str	r1, [r7, #4]
 8024850:	6921      	ldr	r1, [r4, #16]
 8024852:	3108      	adds	r1, #8
 8024854:	6121      	str	r1, [r4, #16]
 8024856:	68a1      	ldr	r1, [r4, #8]
 8024858:	3101      	adds	r1, #1
 802485a:	60a1      	str	r1, [r4, #8]
 802485c:	e7bb      	b.n	80247d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802485e:	f104 0c14 	add.w	ip, r4, #20
 8024862:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024866:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 802486a:	f8c9 0000 	str.w	r0, [r9]
 802486e:	f8c9 1004 	str.w	r1, [r9, #4]
 8024872:	6921      	ldr	r1, [r4, #16]
 8024874:	3108      	adds	r1, #8
 8024876:	6121      	str	r1, [r4, #16]
 8024878:	68a1      	ldr	r1, [r4, #8]
 802487a:	3101      	adds	r1, #1
 802487c:	60a1      	str	r1, [r4, #8]
 802487e:	e7da      	b.n	8024836 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024880:	9a03      	ldr	r2, [sp, #12]
 8024882:	8b61      	ldrh	r1, [r4, #26]
 8024884:	f1a2 0c20 	sub.w	ip, r2, #32
 8024888:	8b22      	ldrh	r2, [r4, #24]
 802488a:	44d4      	add	ip, sl
 802488c:	4462      	add	r2, ip
 802488e:	fb0c 1303 	mla	r3, ip, r3, r1
 8024892:	8322      	strh	r2, [r4, #24]
 8024894:	e739      	b.n	802470a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8024896:	9b01      	ldr	r3, [sp, #4]
 8024898:	2b00      	cmp	r3, #0
 802489a:	db3f      	blt.n	802491c <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 802489c:	2201      	movs	r2, #1
 802489e:	f1ce 0320 	rsb	r3, lr, #32
 80248a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80248a4:	2220      	movs	r2, #32
 80248a6:	fb0a f303 	mul.w	r3, sl, r3
 80248aa:	9202      	str	r2, [sp, #8]
 80248ac:	9a01      	ldr	r2, [sp, #4]
 80248ae:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80248b2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80248b6:	fb93 f7f2 	sdiv	r7, r3, r2
 80248ba:	fb02 3317 	mls	r3, r2, r7, r3
 80248be:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80248c2:	2b00      	cmp	r3, #0
 80248c4:	9308      	str	r3, [sp, #32]
 80248c6:	bfbc      	itt	lt
 80248c8:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80248cc:	189b      	addlt	r3, r3, r2
 80248ce:	eb07 0b01 	add.w	fp, r7, r1
 80248d2:	bfb8      	it	lt
 80248d4:	9308      	strlt	r3, [sp, #32]
 80248d6:	ea4f 136b 	mov.w	r3, fp, asr #5
 80248da:	9304      	str	r3, [sp, #16]
 80248dc:	9b02      	ldr	r3, [sp, #8]
 80248de:	4573      	cmp	r3, lr
 80248e0:	d133      	bne.n	802494a <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 80248e2:	9b04      	ldr	r3, [sp, #16]
 80248e4:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80248e8:	454b      	cmp	r3, r9
 80248ea:	d045      	beq.n	8024978 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80248ec:	8b62      	ldrh	r2, [r4, #26]
 80248ee:	8b23      	ldrh	r3, [r4, #24]
 80248f0:	4313      	orrs	r3, r2
 80248f2:	d00c      	beq.n	802490e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80248f4:	f1b8 0f00 	cmp.w	r8, #0
 80248f8:	db09      	blt.n	802490e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80248fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80248fc:	4543      	cmp	r3, r8
 80248fe:	dd06      	ble.n	802490e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024900:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024904:	429a      	cmp	r2, r3
 8024906:	d313      	bcc.n	8024930 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8024908:	2301      	movs	r3, #1
 802490a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802490e:	9b04      	ldr	r3, [sp, #16]
 8024910:	82e6      	strh	r6, [r4, #22]
 8024912:	82a3      	strh	r3, [r4, #20]
 8024914:	2300      	movs	r3, #0
 8024916:	8323      	strh	r3, [r4, #24]
 8024918:	8363      	strh	r3, [r4, #26]
 802491a:	e02d      	b.n	8024978 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 802491c:	9a01      	ldr	r2, [sp, #4]
 802491e:	fb0a f30e 	mul.w	r3, sl, lr
 8024922:	4252      	negs	r2, r2
 8024924:	9201      	str	r2, [sp, #4]
 8024926:	f04f 32ff 	mov.w	r2, #4294967295
 802492a:	920b      	str	r2, [sp, #44]	; 0x2c
 802492c:	2200      	movs	r2, #0
 802492e:	e7bc      	b.n	80248aa <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8024930:	f104 0314 	add.w	r3, r4, #20
 8024934:	6922      	ldr	r2, [r4, #16]
 8024936:	cb03      	ldmia	r3!, {r0, r1}
 8024938:	6010      	str	r0, [r2, #0]
 802493a:	6051      	str	r1, [r2, #4]
 802493c:	6923      	ldr	r3, [r4, #16]
 802493e:	3308      	adds	r3, #8
 8024940:	6123      	str	r3, [r4, #16]
 8024942:	68a3      	ldr	r3, [r4, #8]
 8024944:	3301      	adds	r3, #1
 8024946:	60a3      	str	r3, [r4, #8]
 8024948:	e7e1      	b.n	802490e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802494a:	f00b 031f 	and.w	r3, fp, #31
 802494e:	f001 011f 	and.w	r1, r1, #31
 8024952:	8b20      	ldrh	r0, [r4, #24]
 8024954:	9309      	str	r3, [sp, #36]	; 0x24
 8024956:	9b02      	ldr	r3, [sp, #8]
 8024958:	eba3 020e 	sub.w	r2, r3, lr
 802495c:	8b63      	ldrh	r3, [r4, #26]
 802495e:	9300      	str	r3, [sp, #0]
 8024960:	9b04      	ldr	r3, [sp, #16]
 8024962:	42ab      	cmp	r3, r5
 8024964:	f040 80ef 	bne.w	8024b46 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8024968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802496a:	4410      	add	r0, r2
 802496c:	4419      	add	r1, r3
 802496e:	9b00      	ldr	r3, [sp, #0]
 8024970:	8320      	strh	r0, [r4, #24]
 8024972:	fb02 3101 	mla	r1, r2, r1, r3
 8024976:	8361      	strh	r1, [r4, #26]
 8024978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802497a:	9904      	ldr	r1, [sp, #16]
 802497c:	4433      	add	r3, r6
 802497e:	9300      	str	r3, [sp, #0]
 8024980:	9a00      	ldr	r2, [sp, #0]
 8024982:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024986:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 802498a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802498e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024992:	4288      	cmp	r0, r1
 8024994:	d018      	beq.n	80249c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024996:	8b60      	ldrh	r0, [r4, #26]
 8024998:	8b21      	ldrh	r1, [r4, #24]
 802499a:	ea50 0201 	orrs.w	r2, r0, r1
 802499e:	d00c      	beq.n	80249ba <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80249a0:	2b00      	cmp	r3, #0
 80249a2:	db0a      	blt.n	80249ba <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80249a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80249a6:	4299      	cmp	r1, r3
 80249a8:	dd07      	ble.n	80249ba <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80249aa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80249ae:	4299      	cmp	r1, r3
 80249b0:	f0c0 818b 	bcc.w	8024cca <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 80249b4:	2301      	movs	r3, #1
 80249b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80249ba:	9b04      	ldr	r3, [sp, #16]
 80249bc:	82a3      	strh	r3, [r4, #20]
 80249be:	9b00      	ldr	r3, [sp, #0]
 80249c0:	82e3      	strh	r3, [r4, #22]
 80249c2:	2300      	movs	r3, #0
 80249c4:	8323      	strh	r3, [r4, #24]
 80249c6:	8363      	strh	r3, [r4, #26]
 80249c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80249ca:	9a00      	ldr	r2, [sp, #0]
 80249cc:	4293      	cmp	r3, r2
 80249ce:	f000 808d 	beq.w	8024aec <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 80249d2:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80249d6:	9901      	ldr	r1, [sp, #4]
 80249d8:	9801      	ldr	r0, [sp, #4]
 80249da:	fb93 f1f1 	sdiv	r1, r3, r1
 80249de:	fb00 3311 	mls	r3, r0, r1, r3
 80249e2:	9106      	str	r1, [sp, #24]
 80249e4:	2b00      	cmp	r3, #0
 80249e6:	9307      	str	r3, [sp, #28]
 80249e8:	da04      	bge.n	80249f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 80249ea:	1e4b      	subs	r3, r1, #1
 80249ec:	9306      	str	r3, [sp, #24]
 80249ee:	9b07      	ldr	r3, [sp, #28]
 80249f0:	4403      	add	r3, r0
 80249f2:	9307      	str	r3, [sp, #28]
 80249f4:	9b08      	ldr	r3, [sp, #32]
 80249f6:	f04f 0c00 	mov.w	ip, #0
 80249fa:	9901      	ldr	r1, [sp, #4]
 80249fc:	1a5b      	subs	r3, r3, r1
 80249fe:	4659      	mov	r1, fp
 8024a00:	9308      	str	r3, [sp, #32]
 8024a02:	9b02      	ldr	r3, [sp, #8]
 8024a04:	f1c3 0320 	rsb	r3, r3, #32
 8024a08:	930a      	str	r3, [sp, #40]	; 0x28
 8024a0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024a0c:	9b02      	ldr	r3, [sp, #8]
 8024a0e:	1a1b      	subs	r3, r3, r0
 8024a10:	9309      	str	r3, [sp, #36]	; 0x24
 8024a12:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8024a16:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024a1a:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8024a1e:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8024a22:	181b      	adds	r3, r3, r0
 8024a24:	bf58      	it	pl
 8024a26:	9801      	ldrpl	r0, [sp, #4]
 8024a28:	9308      	str	r3, [sp, #32]
 8024a2a:	bf54      	ite	pl
 8024a2c:	1a1b      	subpl	r3, r3, r0
 8024a2e:	9d06      	ldrmi	r5, [sp, #24]
 8024a30:	9802      	ldr	r0, [sp, #8]
 8024a32:	bf5e      	ittt	pl
 8024a34:	9308      	strpl	r3, [sp, #32]
 8024a36:	9b06      	ldrpl	r3, [sp, #24]
 8024a38:	1c5d      	addpl	r5, r3, #1
 8024a3a:	44ab      	add	fp, r5
 8024a3c:	ea4f 136b 	mov.w	r3, fp, asr #5
 8024a40:	9304      	str	r3, [sp, #16]
 8024a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a44:	4283      	cmp	r3, r0
 8024a46:	f040 815a 	bne.w	8024cfe <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8024a4a:	9b04      	ldr	r3, [sp, #16]
 8024a4c:	9a00      	ldr	r2, [sp, #0]
 8024a4e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8024a52:	4543      	cmp	r3, r8
 8024a54:	d01a      	beq.n	8024a8c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024a56:	8b61      	ldrh	r1, [r4, #26]
 8024a58:	8b23      	ldrh	r3, [r4, #24]
 8024a5a:	430b      	orrs	r3, r1
 8024a5c:	d00e      	beq.n	8024a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024a5e:	f1be 0f00 	cmp.w	lr, #0
 8024a62:	db0b      	blt.n	8024a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024a66:	4573      	cmp	r3, lr
 8024a68:	dd08      	ble.n	8024a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024a6a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024a6e:	4299      	cmp	r1, r3
 8024a70:	f0c0 8138 	bcc.w	8024ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8024a74:	f04f 0301 	mov.w	r3, #1
 8024a78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024a7c:	9b04      	ldr	r3, [sp, #16]
 8024a7e:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024a82:	82a3      	strh	r3, [r4, #20]
 8024a84:	9b00      	ldr	r3, [sp, #0]
 8024a86:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024a8a:	82e3      	strh	r3, [r4, #22]
 8024a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024a8e:	9a00      	ldr	r2, [sp, #0]
 8024a90:	441a      	add	r2, r3
 8024a92:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024a96:	9200      	str	r2, [sp, #0]
 8024a98:	9900      	ldr	r1, [sp, #0]
 8024a9a:	9a04      	ldr	r2, [sp, #16]
 8024a9c:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8024aa0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024aa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024aa8:	4288      	cmp	r0, r1
 8024aaa:	d01a      	beq.n	8024ae2 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024aac:	8b60      	ldrh	r0, [r4, #26]
 8024aae:	8b21      	ldrh	r1, [r4, #24]
 8024ab0:	ea50 0201 	orrs.w	r2, r0, r1
 8024ab4:	d00d      	beq.n	8024ad2 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024ab6:	2b00      	cmp	r3, #0
 8024ab8:	db0b      	blt.n	8024ad2 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024aba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024abc:	4299      	cmp	r1, r3
 8024abe:	dd08      	ble.n	8024ad2 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024ac0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024ac4:	4299      	cmp	r1, r3
 8024ac6:	f0c0 81f9 	bcc.w	8024ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024aca:	f04f 0301 	mov.w	r3, #1
 8024ace:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024ad2:	9b04      	ldr	r3, [sp, #16]
 8024ad4:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024ad8:	82a3      	strh	r3, [r4, #20]
 8024ada:	9b00      	ldr	r3, [sp, #0]
 8024adc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024ae0:	82e3      	strh	r3, [r4, #22]
 8024ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024ae4:	4659      	mov	r1, fp
 8024ae6:	9a00      	ldr	r2, [sp, #0]
 8024ae8:	4293      	cmp	r3, r2
 8024aea:	d192      	bne.n	8024a12 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8024aec:	9b02      	ldr	r3, [sp, #8]
 8024aee:	f1c3 0c20 	rsb	ip, r3, #32
 8024af2:	9b05      	ldr	r3, [sp, #20]
 8024af4:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024af8:	9b03      	ldr	r3, [sp, #12]
 8024afa:	459c      	cmp	ip, r3
 8024afc:	f040 81f8 	bne.w	8024ef0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024b00:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024b04:	9a00      	ldr	r2, [sp, #0]
 8024b06:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024b0a:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8024b0e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024b12:	4288      	cmp	r0, r1
 8024b14:	f43f ad54 	beq.w	80245c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024b18:	8b60      	ldrh	r0, [r4, #26]
 8024b1a:	8b21      	ldrh	r1, [r4, #24]
 8024b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8024b20:	d00c      	beq.n	8024b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024b22:	2b00      	cmp	r3, #0
 8024b24:	db0a      	blt.n	8024b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024b26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024b28:	4299      	cmp	r1, r3
 8024b2a:	dd07      	ble.n	8024b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024b2c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024b30:	4299      	cmp	r1, r3
 8024b32:	f0c0 81d0 	bcc.w	8024ed6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8024b36:	2301      	movs	r3, #1
 8024b38:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024b3c:	9b00      	ldr	r3, [sp, #0]
 8024b3e:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024b42:	82e3      	strh	r3, [r4, #22]
 8024b44:	e517      	b.n	8024576 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8024b46:	2f00      	cmp	r7, #0
 8024b48:	f2c0 8097 	blt.w	8024c7a <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8024b4c:	2301      	movs	r3, #1
 8024b4e:	f1c1 0c20 	rsb	ip, r1, #32
 8024b52:	9307      	str	r3, [sp, #28]
 8024b54:	2320      	movs	r3, #32
 8024b56:	fb02 f20c 	mul.w	r2, r2, ip
 8024b5a:	9306      	str	r3, [sp, #24]
 8024b5c:	9b06      	ldr	r3, [sp, #24]
 8024b5e:	fb92 fcf7 	sdiv	ip, r2, r7
 8024b62:	fb07 221c 	mls	r2, r7, ip, r2
 8024b66:	4419      	add	r1, r3
 8024b68:	9b00      	ldr	r3, [sp, #0]
 8024b6a:	2a00      	cmp	r2, #0
 8024b6c:	bfbc      	itt	lt
 8024b6e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024b72:	19d2      	addlt	r2, r2, r7
 8024b74:	fb0c 3101 	mla	r1, ip, r1, r3
 8024b78:	9b07      	ldr	r3, [sp, #28]
 8024b7a:	4460      	add	r0, ip
 8024b7c:	441d      	add	r5, r3
 8024b7e:	0433      	lsls	r3, r6, #16
 8024b80:	b200      	sxth	r0, r0
 8024b82:	930a      	str	r3, [sp, #40]	; 0x28
 8024b84:	18eb      	adds	r3, r5, r3
 8024b86:	b209      	sxth	r1, r1
 8024b88:	8320      	strh	r0, [r4, #24]
 8024b8a:	454b      	cmp	r3, r9
 8024b8c:	8361      	strh	r1, [r4, #26]
 8024b8e:	d014      	beq.n	8024bba <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8024b90:	ea50 0301 	orrs.w	r3, r0, r1
 8024b94:	d00c      	beq.n	8024bb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024b96:	f1b8 0f00 	cmp.w	r8, #0
 8024b9a:	db09      	blt.n	8024bb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024b9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024b9e:	4543      	cmp	r3, r8
 8024ba0:	dd06      	ble.n	8024bb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024ba2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024ba6:	4299      	cmp	r1, r3
 8024ba8:	d36e      	bcc.n	8024c88 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8024baa:	2301      	movs	r3, #1
 8024bac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024bb0:	2300      	movs	r3, #0
 8024bb2:	82a5      	strh	r5, [r4, #20]
 8024bb4:	82e6      	strh	r6, [r4, #22]
 8024bb6:	8323      	strh	r3, [r4, #24]
 8024bb8:	8363      	strh	r3, [r4, #26]
 8024bba:	9904      	ldr	r1, [sp, #16]
 8024bbc:	eb0e 030c 	add.w	r3, lr, ip
 8024bc0:	42a9      	cmp	r1, r5
 8024bc2:	d04d      	beq.n	8024c60 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024bc4:	9902      	ldr	r1, [sp, #8]
 8024bc6:	1bd2      	subs	r2, r2, r7
 8024bc8:	1ac9      	subs	r1, r1, r3
 8024bca:	9200      	str	r2, [sp, #0]
 8024bcc:	448c      	add	ip, r1
 8024bce:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024bd2:	fb9c fef7 	sdiv	lr, ip, r7
 8024bd6:	fb07 cc1e 	mls	ip, r7, lr, ip
 8024bda:	f1bc 0f00 	cmp.w	ip, #0
 8024bde:	bfbc      	itt	lt
 8024be0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024be4:	44bc      	addlt	ip, r7
 8024be6:	f10e 0101 	add.w	r1, lr, #1
 8024bea:	910d      	str	r1, [sp, #52]	; 0x34
 8024bec:	9a00      	ldr	r2, [sp, #0]
 8024bee:	8b20      	ldrh	r0, [r4, #24]
 8024bf0:	eb12 020c 	adds.w	r2, r2, ip
 8024bf4:	8b61      	ldrh	r1, [r4, #26]
 8024bf6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024bfa:	9200      	str	r2, [sp, #0]
 8024bfc:	bf5b      	ittet	pl
 8024bfe:	1bd2      	subpl	r2, r2, r7
 8024c00:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8024c04:	46f0      	movmi	r8, lr
 8024c06:	9200      	strpl	r2, [sp, #0]
 8024c08:	9a07      	ldr	r2, [sp, #28]
 8024c0a:	4440      	add	r0, r8
 8024c0c:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024c10:	4443      	add	r3, r8
 8024c12:	4415      	add	r5, r2
 8024c14:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024c1a:	b200      	sxth	r0, r0
 8024c1c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024c20:	442a      	add	r2, r5
 8024c22:	b209      	sxth	r1, r1
 8024c24:	8320      	strh	r0, [r4, #24]
 8024c26:	454a      	cmp	r2, r9
 8024c28:	8361      	strh	r1, [r4, #26]
 8024c2a:	d016      	beq.n	8024c5a <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8024c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8024c30:	d00d      	beq.n	8024c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024c32:	f1b8 0f00 	cmp.w	r8, #0
 8024c36:	db0a      	blt.n	8024c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024c38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024c3a:	4541      	cmp	r1, r8
 8024c3c:	dd07      	ble.n	8024c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024c3e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024c42:	4288      	cmp	r0, r1
 8024c44:	d330      	bcc.n	8024ca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8024c46:	f04f 0201 	mov.w	r2, #1
 8024c4a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024c4e:	f04f 0200 	mov.w	r2, #0
 8024c52:	82a5      	strh	r5, [r4, #20]
 8024c54:	82e6      	strh	r6, [r4, #22]
 8024c56:	8322      	strh	r2, [r4, #24]
 8024c58:	8362      	strh	r2, [r4, #26]
 8024c5a:	9904      	ldr	r1, [sp, #16]
 8024c5c:	42a9      	cmp	r1, r5
 8024c5e:	d1c5      	bne.n	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8024c60:	9a02      	ldr	r2, [sp, #8]
 8024c62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024c64:	1ad3      	subs	r3, r2, r3
 8024c66:	8b22      	ldrh	r2, [r4, #24]
 8024c68:	3120      	adds	r1, #32
 8024c6a:	441a      	add	r2, r3
 8024c6c:	8322      	strh	r2, [r4, #24]
 8024c6e:	9a06      	ldr	r2, [sp, #24]
 8024c70:	1a89      	subs	r1, r1, r2
 8024c72:	8b62      	ldrh	r2, [r4, #26]
 8024c74:	fb03 2301 	mla	r3, r3, r1, r2
 8024c78:	e64e      	b.n	8024918 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8024c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8024c7e:	434a      	muls	r2, r1
 8024c80:	427f      	negs	r7, r7
 8024c82:	9307      	str	r3, [sp, #28]
 8024c84:	2300      	movs	r3, #0
 8024c86:	e768      	b.n	8024b5a <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8024c88:	f104 0314 	add.w	r3, r4, #20
 8024c8c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024c90:	cb03      	ldmia	r3!, {r0, r1}
 8024c92:	f8c8 0000 	str.w	r0, [r8]
 8024c96:	f8c8 1004 	str.w	r1, [r8, #4]
 8024c9a:	6923      	ldr	r3, [r4, #16]
 8024c9c:	3308      	adds	r3, #8
 8024c9e:	6123      	str	r3, [r4, #16]
 8024ca0:	68a3      	ldr	r3, [r4, #8]
 8024ca2:	3301      	adds	r3, #1
 8024ca4:	60a3      	str	r3, [r4, #8]
 8024ca6:	e783      	b.n	8024bb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024ca8:	f104 0814 	add.w	r8, r4, #20
 8024cac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024cb0:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024cb4:	f8c9 0000 	str.w	r0, [r9]
 8024cb8:	f8c9 1004 	str.w	r1, [r9, #4]
 8024cbc:	6921      	ldr	r1, [r4, #16]
 8024cbe:	3108      	adds	r1, #8
 8024cc0:	6121      	str	r1, [r4, #16]
 8024cc2:	68a1      	ldr	r1, [r4, #8]
 8024cc4:	3101      	adds	r1, #1
 8024cc6:	60a1      	str	r1, [r4, #8]
 8024cc8:	e7c1      	b.n	8024c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024cca:	f104 0314 	add.w	r3, r4, #20
 8024cce:	6925      	ldr	r5, [r4, #16]
 8024cd0:	cb03      	ldmia	r3!, {r0, r1}
 8024cd2:	6028      	str	r0, [r5, #0]
 8024cd4:	6069      	str	r1, [r5, #4]
 8024cd6:	6923      	ldr	r3, [r4, #16]
 8024cd8:	3308      	adds	r3, #8
 8024cda:	6123      	str	r3, [r4, #16]
 8024cdc:	68a3      	ldr	r3, [r4, #8]
 8024cde:	3301      	adds	r3, #1
 8024ce0:	60a3      	str	r3, [r4, #8]
 8024ce2:	e66a      	b.n	80249ba <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024ce4:	f104 0314 	add.w	r3, r4, #20
 8024ce8:	6925      	ldr	r5, [r4, #16]
 8024cea:	cb03      	ldmia	r3!, {r0, r1}
 8024cec:	6028      	str	r0, [r5, #0]
 8024cee:	6069      	str	r1, [r5, #4]
 8024cf0:	6923      	ldr	r3, [r4, #16]
 8024cf2:	3308      	adds	r3, #8
 8024cf4:	6123      	str	r3, [r4, #16]
 8024cf6:	68a3      	ldr	r3, [r4, #8]
 8024cf8:	3301      	adds	r3, #1
 8024cfa:	60a3      	str	r3, [r4, #8]
 8024cfc:	e6be      	b.n	8024a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024cfe:	f00b 031f 	and.w	r3, fp, #31
 8024d02:	114f      	asrs	r7, r1, #5
 8024d04:	8b20      	ldrh	r0, [r4, #24]
 8024d06:	f001 011f 	and.w	r1, r1, #31
 8024d0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8024d0c:	9b04      	ldr	r3, [sp, #16]
 8024d0e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024d12:	429f      	cmp	r7, r3
 8024d14:	d10a      	bne.n	8024d2c <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d18:	4418      	add	r0, r3
 8024d1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024d1c:	4419      	add	r1, r3
 8024d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d20:	8320      	strh	r0, [r4, #24]
 8024d22:	fb03 9901 	mla	r9, r3, r1, r9
 8024d26:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024d2a:	e6af      	b.n	8024a8c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024d2c:	2d00      	cmp	r5, #0
 8024d2e:	f2c0 809b 	blt.w	8024e68 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8024d32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024d34:	f1c1 0320 	rsb	r3, r1, #32
 8024d38:	4373      	muls	r3, r6
 8024d3a:	2601      	movs	r6, #1
 8024d3c:	960e      	str	r6, [sp, #56]	; 0x38
 8024d3e:	2620      	movs	r6, #32
 8024d40:	960d      	str	r6, [sp, #52]	; 0x34
 8024d42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024d44:	fb93 f6f5 	sdiv	r6, r3, r5
 8024d48:	4411      	add	r1, r2
 8024d4a:	fb05 3316 	mls	r3, r5, r6, r3
 8024d4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024d50:	2b00      	cmp	r3, #0
 8024d52:	4417      	add	r7, r2
 8024d54:	9a00      	ldr	r2, [sp, #0]
 8024d56:	bfbc      	itt	lt
 8024d58:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024d5c:	195b      	addlt	r3, r3, r5
 8024d5e:	0412      	lsls	r2, r2, #16
 8024d60:	fb06 9101 	mla	r1, r6, r1, r9
 8024d64:	4430      	add	r0, r6
 8024d66:	eb07 0902 	add.w	r9, r7, r2
 8024d6a:	9210      	str	r2, [sp, #64]	; 0x40
 8024d6c:	b200      	sxth	r0, r0
 8024d6e:	b209      	sxth	r1, r1
 8024d70:	45c1      	cmp	r9, r8
 8024d72:	8320      	strh	r0, [r4, #24]
 8024d74:	8361      	strh	r1, [r4, #26]
 8024d76:	d017      	beq.n	8024da8 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8024d78:	ea50 0201 	orrs.w	r2, r0, r1
 8024d7c:	d00d      	beq.n	8024d9a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024d7e:	f1be 0f00 	cmp.w	lr, #0
 8024d82:	db0a      	blt.n	8024d9a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024d84:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024d86:	4571      	cmp	r1, lr
 8024d88:	dd07      	ble.n	8024d9a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024d8a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024d8e:	4288      	cmp	r0, r1
 8024d90:	d372      	bcc.n	8024e78 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8024d92:	f04f 0201 	mov.w	r2, #1
 8024d96:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024d9a:	9a00      	ldr	r2, [sp, #0]
 8024d9c:	82a7      	strh	r7, [r4, #20]
 8024d9e:	82e2      	strh	r2, [r4, #22]
 8024da0:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024da4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024daa:	eb02 0e06 	add.w	lr, r2, r6
 8024dae:	9a04      	ldr	r2, [sp, #16]
 8024db0:	42ba      	cmp	r2, r7
 8024db2:	d049      	beq.n	8024e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8024db4:	9a02      	ldr	r2, [sp, #8]
 8024db6:	1b5b      	subs	r3, r3, r5
 8024db8:	eba2 010e 	sub.w	r1, r2, lr
 8024dbc:	440e      	add	r6, r1
 8024dbe:	0176      	lsls	r6, r6, #5
 8024dc0:	fb96 f8f5 	sdiv	r8, r6, r5
 8024dc4:	fb05 6618 	mls	r6, r5, r8, r6
 8024dc8:	2e00      	cmp	r6, #0
 8024dca:	bfbc      	itt	lt
 8024dcc:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024dd0:	1976      	addlt	r6, r6, r5
 8024dd2:	f108 0201 	add.w	r2, r8, #1
 8024dd6:	9211      	str	r2, [sp, #68]	; 0x44
 8024dd8:	199b      	adds	r3, r3, r6
 8024dda:	8b20      	ldrh	r0, [r4, #24]
 8024ddc:	8b61      	ldrh	r1, [r4, #26]
 8024dde:	bf54      	ite	pl
 8024de0:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8024de4:	46c1      	movmi	r9, r8
 8024de6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024de8:	bf58      	it	pl
 8024dea:	1b5b      	subpl	r3, r3, r5
 8024dec:	4448      	add	r0, r9
 8024dee:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024df2:	4417      	add	r7, r2
 8024df4:	44ce      	add	lr, r9
 8024df6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024df8:	b200      	sxth	r0, r0
 8024dfa:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8024dfe:	b209      	sxth	r1, r1
 8024e00:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024e04:	443a      	add	r2, r7
 8024e06:	8320      	strh	r0, [r4, #24]
 8024e08:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024e0c:	8361      	strh	r1, [r4, #26]
 8024e0e:	4552      	cmp	r2, sl
 8024e10:	d017      	beq.n	8024e42 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8024e12:	ea50 0201 	orrs.w	r2, r0, r1
 8024e16:	d00d      	beq.n	8024e34 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024e18:	f1b9 0f00 	cmp.w	r9, #0
 8024e1c:	db0a      	blt.n	8024e34 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024e1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024e20:	4549      	cmp	r1, r9
 8024e22:	dd07      	ble.n	8024e34 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024e24:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024e28:	4288      	cmp	r0, r1
 8024e2a:	d336      	bcc.n	8024e9a <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8024e2c:	f04f 0201 	mov.w	r2, #1
 8024e30:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024e34:	9a00      	ldr	r2, [sp, #0]
 8024e36:	82a7      	strh	r7, [r4, #20]
 8024e38:	82e2      	strh	r2, [r4, #22]
 8024e3a:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024e3e:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024e42:	9a04      	ldr	r2, [sp, #16]
 8024e44:	42ba      	cmp	r2, r7
 8024e46:	d1c7      	bne.n	8024dd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024e48:	9b02      	ldr	r3, [sp, #8]
 8024e4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024e4c:	eba3 0e0e 	sub.w	lr, r3, lr
 8024e50:	8b23      	ldrh	r3, [r4, #24]
 8024e52:	3120      	adds	r1, #32
 8024e54:	4473      	add	r3, lr
 8024e56:	8323      	strh	r3, [r4, #24]
 8024e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024e5a:	1ac9      	subs	r1, r1, r3
 8024e5c:	8b63      	ldrh	r3, [r4, #26]
 8024e5e:	fb0e 3e01 	mla	lr, lr, r1, r3
 8024e62:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024e66:	e611      	b.n	8024a8c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024e68:	f04f 36ff 	mov.w	r6, #4294967295
 8024e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e6e:	426d      	negs	r5, r5
 8024e70:	960e      	str	r6, [sp, #56]	; 0x38
 8024e72:	2600      	movs	r6, #0
 8024e74:	434b      	muls	r3, r1
 8024e76:	e763      	b.n	8024d40 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8024e78:	f104 0e14 	add.w	lr, r4, #20
 8024e7c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024e80:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024e84:	f8c8 0000 	str.w	r0, [r8]
 8024e88:	f8c8 1004 	str.w	r1, [r8, #4]
 8024e8c:	6921      	ldr	r1, [r4, #16]
 8024e8e:	3108      	adds	r1, #8
 8024e90:	6121      	str	r1, [r4, #16]
 8024e92:	68a1      	ldr	r1, [r4, #8]
 8024e94:	3101      	adds	r1, #1
 8024e96:	60a1      	str	r1, [r4, #8]
 8024e98:	e77f      	b.n	8024d9a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024e9a:	f104 0914 	add.w	r9, r4, #20
 8024e9e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024ea2:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024ea6:	f8ca 0000 	str.w	r0, [sl]
 8024eaa:	f8ca 1004 	str.w	r1, [sl, #4]
 8024eae:	6921      	ldr	r1, [r4, #16]
 8024eb0:	3108      	adds	r1, #8
 8024eb2:	6121      	str	r1, [r4, #16]
 8024eb4:	68a1      	ldr	r1, [r4, #8]
 8024eb6:	3101      	adds	r1, #1
 8024eb8:	60a1      	str	r1, [r4, #8]
 8024eba:	e7bb      	b.n	8024e34 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024ebc:	f104 0314 	add.w	r3, r4, #20
 8024ec0:	6925      	ldr	r5, [r4, #16]
 8024ec2:	cb03      	ldmia	r3!, {r0, r1}
 8024ec4:	6028      	str	r0, [r5, #0]
 8024ec6:	6069      	str	r1, [r5, #4]
 8024ec8:	6923      	ldr	r3, [r4, #16]
 8024eca:	3308      	adds	r3, #8
 8024ecc:	6123      	str	r3, [r4, #16]
 8024ece:	68a3      	ldr	r3, [r4, #8]
 8024ed0:	3301      	adds	r3, #1
 8024ed2:	60a3      	str	r3, [r4, #8]
 8024ed4:	e5fd      	b.n	8024ad2 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024ed6:	f104 0314 	add.w	r3, r4, #20
 8024eda:	6925      	ldr	r5, [r4, #16]
 8024edc:	cb03      	ldmia	r3!, {r0, r1}
 8024ede:	6028      	str	r0, [r5, #0]
 8024ee0:	6069      	str	r1, [r5, #4]
 8024ee2:	6923      	ldr	r3, [r4, #16]
 8024ee4:	3308      	adds	r3, #8
 8024ee6:	6123      	str	r3, [r4, #16]
 8024ee8:	68a3      	ldr	r3, [r4, #8]
 8024eea:	3301      	adds	r3, #1
 8024eec:	60a3      	str	r3, [r4, #8]
 8024eee:	e625      	b.n	8024b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024ef0:	9b05      	ldr	r3, [sp, #20]
 8024ef2:	ea4f 176b 	mov.w	r7, fp, asr #5
 8024ef6:	f00b 081f 	and.w	r8, fp, #31
 8024efa:	8b20      	ldrh	r0, [r4, #24]
 8024efc:	f003 031f 	and.w	r3, r3, #31
 8024f00:	4577      	cmp	r7, lr
 8024f02:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024f06:	9302      	str	r3, [sp, #8]
 8024f08:	9b03      	ldr	r3, [sp, #12]
 8024f0a:	eba3 050c 	sub.w	r5, r3, ip
 8024f0e:	d108      	bne.n	8024f22 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8024f10:	9b02      	ldr	r3, [sp, #8]
 8024f12:	4428      	add	r0, r5
 8024f14:	4498      	add	r8, r3
 8024f16:	8320      	strh	r0, [r4, #24]
 8024f18:	fb05 9508 	mla	r5, r5, r8, r9
 8024f1c:	8365      	strh	r5, [r4, #26]
 8024f1e:	f7ff bb4f 	b.w	80245c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024f22:	9b05      	ldr	r3, [sp, #20]
 8024f24:	ebb3 030b 	subs.w	r3, r3, fp
 8024f28:	f100 809c 	bmi.w	8025064 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8024f2c:	f1c8 0120 	rsb	r1, r8, #32
 8024f30:	2201      	movs	r2, #1
 8024f32:	f04f 0b20 	mov.w	fp, #32
 8024f36:	434d      	muls	r5, r1
 8024f38:	9201      	str	r2, [sp, #4]
 8024f3a:	9a01      	ldr	r2, [sp, #4]
 8024f3c:	44d8      	add	r8, fp
 8024f3e:	fb95 f6f3 	sdiv	r6, r5, r3
 8024f42:	fb03 5516 	mls	r5, r3, r6, r5
 8024f46:	4417      	add	r7, r2
 8024f48:	9a00      	ldr	r2, [sp, #0]
 8024f4a:	2d00      	cmp	r5, #0
 8024f4c:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8024f50:	bfbc      	itt	lt
 8024f52:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024f56:	18ed      	addlt	r5, r5, r3
 8024f58:	eb07 0a02 	add.w	sl, r7, r2
 8024f5c:	9204      	str	r2, [sp, #16]
 8024f5e:	fb06 9808 	mla	r8, r6, r8, r9
 8024f62:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024f66:	4430      	add	r0, r6
 8024f68:	fa0f f188 	sxth.w	r1, r8
 8024f6c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024f70:	b200      	sxth	r0, r0
 8024f72:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024f76:	8361      	strh	r1, [r4, #26]
 8024f78:	8320      	strh	r0, [r4, #24]
 8024f7a:	45ca      	cmp	sl, r9
 8024f7c:	d015      	beq.n	8024faa <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8024f7e:	ea50 0201 	orrs.w	r2, r0, r1
 8024f82:	d00c      	beq.n	8024f9e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024f84:	f1b8 0f00 	cmp.w	r8, #0
 8024f88:	db09      	blt.n	8024f9e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024f8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024f8c:	4541      	cmp	r1, r8
 8024f8e:	dd06      	ble.n	8024f9e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024f90:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024f94:	4288      	cmp	r0, r1
 8024f96:	d36e      	bcc.n	8025076 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8024f98:	2101      	movs	r1, #1
 8024f9a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024f9e:	2100      	movs	r1, #0
 8024fa0:	9a00      	ldr	r2, [sp, #0]
 8024fa2:	82a7      	strh	r7, [r4, #20]
 8024fa4:	82e2      	strh	r2, [r4, #22]
 8024fa6:	8321      	strh	r1, [r4, #24]
 8024fa8:	8361      	strh	r1, [r4, #26]
 8024faa:	45be      	cmp	lr, r7
 8024fac:	44b4      	add	ip, r6
 8024fae:	d048      	beq.n	8025042 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8024fb0:	9a03      	ldr	r2, [sp, #12]
 8024fb2:	1aed      	subs	r5, r5, r3
 8024fb4:	eba2 010c 	sub.w	r1, r2, ip
 8024fb8:	440e      	add	r6, r1
 8024fba:	0176      	lsls	r6, r6, #5
 8024fbc:	fb96 f8f3 	sdiv	r8, r6, r3
 8024fc0:	fb03 6618 	mls	r6, r3, r8, r6
 8024fc4:	2e00      	cmp	r6, #0
 8024fc6:	bfbc      	itt	lt
 8024fc8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024fcc:	18f6      	addlt	r6, r6, r3
 8024fce:	f108 0201 	add.w	r2, r8, #1
 8024fd2:	9205      	str	r2, [sp, #20]
 8024fd4:	19ad      	adds	r5, r5, r6
 8024fd6:	8b20      	ldrh	r0, [r4, #24]
 8024fd8:	8b61      	ldrh	r1, [r4, #26]
 8024fda:	bf54      	ite	pl
 8024fdc:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8024fe0:	46c1      	movmi	r9, r8
 8024fe2:	9a01      	ldr	r2, [sp, #4]
 8024fe4:	bf58      	it	pl
 8024fe6:	1aed      	subpl	r5, r5, r3
 8024fe8:	4448      	add	r0, r9
 8024fea:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024fee:	4417      	add	r7, r2
 8024ff0:	44cc      	add	ip, r9
 8024ff2:	9a04      	ldr	r2, [sp, #16]
 8024ff4:	b200      	sxth	r0, r0
 8024ff6:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8024ffa:	b209      	sxth	r1, r1
 8024ffc:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8025000:	443a      	add	r2, r7
 8025002:	8320      	strh	r0, [r4, #24]
 8025004:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8025008:	8361      	strh	r1, [r4, #26]
 802500a:	4552      	cmp	r2, sl
 802500c:	d017      	beq.n	802503e <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802500e:	ea50 0201 	orrs.w	r2, r0, r1
 8025012:	d00d      	beq.n	8025030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025014:	f1b9 0f00 	cmp.w	r9, #0
 8025018:	db0a      	blt.n	8025030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802501a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802501c:	4549      	cmp	r1, r9
 802501e:	dd07      	ble.n	8025030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8025020:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025024:	4288      	cmp	r0, r1
 8025026:	d337      	bcc.n	8025098 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8025028:	f04f 0201 	mov.w	r2, #1
 802502c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025030:	9a00      	ldr	r2, [sp, #0]
 8025032:	82a7      	strh	r7, [r4, #20]
 8025034:	82e2      	strh	r2, [r4, #22]
 8025036:	f04f 0200 	mov.w	r2, #0
 802503a:	8322      	strh	r2, [r4, #24]
 802503c:	8362      	strh	r2, [r4, #26]
 802503e:	45be      	cmp	lr, r7
 8025040:	d1c8      	bne.n	8024fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8025042:	9b03      	ldr	r3, [sp, #12]
 8025044:	8b62      	ldrh	r2, [r4, #26]
 8025046:	eba3 0c0c 	sub.w	ip, r3, ip
 802504a:	8b23      	ldrh	r3, [r4, #24]
 802504c:	4463      	add	r3, ip
 802504e:	8323      	strh	r3, [r4, #24]
 8025050:	9b02      	ldr	r3, [sp, #8]
 8025052:	3320      	adds	r3, #32
 8025054:	eba3 030b 	sub.w	r3, r3, fp
 8025058:	fb0c 2c03 	mla	ip, ip, r3, r2
 802505c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025060:	f7ff baae 	b.w	80245c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025064:	f04f 32ff 	mov.w	r2, #4294967295
 8025068:	fb05 f508 	mul.w	r5, r5, r8
 802506c:	425b      	negs	r3, r3
 802506e:	f04f 0b00 	mov.w	fp, #0
 8025072:	9201      	str	r2, [sp, #4]
 8025074:	e761      	b.n	8024f3a <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8025076:	f104 0814 	add.w	r8, r4, #20
 802507a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802507e:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025082:	f8c9 0000 	str.w	r0, [r9]
 8025086:	f8c9 1004 	str.w	r1, [r9, #4]
 802508a:	6921      	ldr	r1, [r4, #16]
 802508c:	3108      	adds	r1, #8
 802508e:	6121      	str	r1, [r4, #16]
 8025090:	68a1      	ldr	r1, [r4, #8]
 8025092:	3101      	adds	r1, #1
 8025094:	60a1      	str	r1, [r4, #8]
 8025096:	e782      	b.n	8024f9e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8025098:	f104 0914 	add.w	r9, r4, #20
 802509c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80250a0:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80250a4:	f8ca 0000 	str.w	r0, [sl]
 80250a8:	f8ca 1004 	str.w	r1, [sl, #4]
 80250ac:	6921      	ldr	r1, [r4, #16]
 80250ae:	3108      	adds	r1, #8
 80250b0:	6121      	str	r1, [r4, #16]
 80250b2:	68a1      	ldr	r1, [r4, #8]
 80250b4:	3101      	adds	r1, #1
 80250b6:	60a1      	str	r1, [r4, #8]
 80250b8:	e7ba      	b.n	8025030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

080250ba <_ZN8touchgfx7Outline6lineToEii>:
 80250ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80250bc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80250be:	4604      	mov	r4, r0
 80250c0:	460d      	mov	r5, r1
 80250c2:	4616      	mov	r6, r2
 80250c4:	079b      	lsls	r3, r3, #30
 80250c6:	d526      	bpl.n	8025116 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80250c8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80250cc:	ea85 0001 	eor.w	r0, r5, r1
 80250d0:	ea86 0302 	eor.w	r3, r6, r2
 80250d4:	4303      	orrs	r3, r0
 80250d6:	d01e      	beq.n	8025116 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80250d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80250da:	114b      	asrs	r3, r1, #5
 80250dc:	9600      	str	r6, [sp, #0]
 80250de:	4283      	cmp	r3, r0
 80250e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80250e2:	bfb8      	it	lt
 80250e4:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80250e6:	3301      	adds	r3, #1
 80250e8:	4283      	cmp	r3, r0
 80250ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80250ec:	bfc8      	it	gt
 80250ee:	6363      	strgt	r3, [r4, #52]	; 0x34
 80250f0:	116b      	asrs	r3, r5, #5
 80250f2:	4283      	cmp	r3, r0
 80250f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80250f6:	bfb8      	it	lt
 80250f8:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80250fa:	3301      	adds	r3, #1
 80250fc:	4283      	cmp	r3, r0
 80250fe:	4620      	mov	r0, r4
 8025100:	bfc8      	it	gt
 8025102:	6363      	strgt	r3, [r4, #52]	; 0x34
 8025104:	462b      	mov	r3, r5
 8025106:	f7ff f9e3 	bl	80244d0 <_ZN8touchgfx7Outline10renderLineEiiii>
 802510a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802510c:	f043 0301 	orr.w	r3, r3, #1
 8025110:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8025114:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025116:	b002      	add	sp, #8
 8025118:	bd70      	pop	{r4, r5, r6, pc}

0802511a <_ZN8touchgfx7Outline6moveToEii>:
 802511a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802511c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802511e:	4615      	mov	r5, r2
 8025120:	4604      	mov	r4, r0
 8025122:	460e      	mov	r6, r1
 8025124:	079a      	lsls	r2, r3, #30
 8025126:	d401      	bmi.n	802512c <_ZN8touchgfx7Outline6moveToEii+0x12>
 8025128:	f7ff f98c 	bl	8024444 <_ZN8touchgfx7Outline5resetEv>
 802512c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802512e:	07db      	lsls	r3, r3, #31
 8025130:	d504      	bpl.n	802513c <_ZN8touchgfx7Outline6moveToEii+0x22>
 8025132:	4620      	mov	r0, r4
 8025134:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8025138:	f7ff ffbf 	bl	80250ba <_ZN8touchgfx7Outline6lineToEii>
 802513c:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8025140:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025144:	116f      	asrs	r7, r5, #5
 8025146:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802514a:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802514e:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8025152:	4291      	cmp	r1, r2
 8025154:	d015      	beq.n	8025182 <_ZN8touchgfx7Outline6moveToEii+0x68>
 8025156:	8b61      	ldrh	r1, [r4, #26]
 8025158:	8b22      	ldrh	r2, [r4, #24]
 802515a:	430a      	orrs	r2, r1
 802515c:	d00b      	beq.n	8025176 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802515e:	2b00      	cmp	r3, #0
 8025160:	db09      	blt.n	8025176 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8025162:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025164:	429a      	cmp	r2, r3
 8025166:	dd06      	ble.n	8025176 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8025168:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802516c:	429a      	cmp	r2, r3
 802516e:	d30d      	bcc.n	802518c <_ZN8touchgfx7Outline6moveToEii+0x72>
 8025170:	2301      	movs	r3, #1
 8025172:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025176:	2300      	movs	r3, #0
 8025178:	f8a4 c014 	strh.w	ip, [r4, #20]
 802517c:	82e7      	strh	r7, [r4, #22]
 802517e:	8323      	strh	r3, [r4, #24]
 8025180:	8363      	strh	r3, [r4, #26]
 8025182:	61e6      	str	r6, [r4, #28]
 8025184:	62a5      	str	r5, [r4, #40]	; 0x28
 8025186:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802518a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802518c:	f104 0314 	add.w	r3, r4, #20
 8025190:	6922      	ldr	r2, [r4, #16]
 8025192:	cb03      	ldmia	r3!, {r0, r1}
 8025194:	6010      	str	r0, [r2, #0]
 8025196:	6051      	str	r1, [r2, #4]
 8025198:	6923      	ldr	r3, [r4, #16]
 802519a:	3308      	adds	r3, #8
 802519c:	6123      	str	r3, [r4, #16]
 802519e:	68a3      	ldr	r3, [r4, #8]
 80251a0:	3301      	adds	r3, #1
 80251a2:	60a3      	str	r3, [r4, #8]
 80251a4:	e7e7      	b.n	8025176 <_ZN8touchgfx7Outline6moveToEii+0x5c>

080251a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80251a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251aa:	b0d1      	sub	sp, #324	; 0x144
 80251ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80251b0:	466c      	mov	r4, sp
 80251b2:	1a0d      	subs	r5, r1, r0
 80251b4:	f100 0208 	add.w	r2, r0, #8
 80251b8:	2d48      	cmp	r5, #72	; 0x48
 80251ba:	f340 80ba 	ble.w	8025332 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80251be:	112d      	asrs	r5, r5, #4
 80251c0:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80251c4:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80251c8:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80251cc:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80251d0:	f9b0 8000 	ldrsh.w	r8, [r0]
 80251d4:	681e      	ldr	r6, [r3, #0]
 80251d6:	6006      	str	r6, [r0, #0]
 80251d8:	685e      	ldr	r6, [r3, #4]
 80251da:	6046      	str	r6, [r0, #4]
 80251dc:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 80251e0:	f8a3 c004 	strh.w	ip, [r3, #4]
 80251e4:	f8a3 e002 	strh.w	lr, [r3, #2]
 80251e8:	80df      	strh	r7, [r3, #6]
 80251ea:	f1a1 0308 	sub.w	r3, r1, #8
 80251ee:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80251f2:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 80251f6:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80251fa:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80251fe:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025202:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025206:	45ac      	cmp	ip, r5
 8025208:	dd0f      	ble.n	802522a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802520a:	681d      	ldr	r5, [r3, #0]
 802520c:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8025210:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8025214:	6015      	str	r5, [r2, #0]
 8025216:	685d      	ldr	r5, [r3, #4]
 8025218:	6055      	str	r5, [r2, #4]
 802521a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802521e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025222:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025226:	f821 cc02 	strh.w	ip, [r1, #-2]
 802522a:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 802522e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025232:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025236:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802523a:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802523e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025242:	4565      	cmp	r5, ip
 8025244:	dd0d      	ble.n	8025262 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8025246:	6815      	ldr	r5, [r2, #0]
 8025248:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802524c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025250:	6005      	str	r5, [r0, #0]
 8025252:	6855      	ldr	r5, [r2, #4]
 8025254:	8107      	strh	r7, [r0, #8]
 8025256:	6045      	str	r5, [r0, #4]
 8025258:	8146      	strh	r6, [r0, #10]
 802525a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802525e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8025262:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025266:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802526a:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802526e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025272:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025276:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802527a:	45ac      	cmp	ip, r5
 802527c:	dd0f      	ble.n	802529e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802527e:	681d      	ldr	r5, [r3, #0]
 8025280:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025284:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025288:	6005      	str	r5, [r0, #0]
 802528a:	685d      	ldr	r5, [r3, #4]
 802528c:	6045      	str	r5, [r0, #4]
 802528e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025292:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025296:	f821 ec04 	strh.w	lr, [r1, #-4]
 802529a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802529e:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80252a2:	f102 0508 	add.w	r5, r2, #8
 80252a6:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80252aa:	f9b0 e000 	ldrsh.w	lr, [r0]
 80252ae:	462f      	mov	r7, r5
 80252b0:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80252b4:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80252b8:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80252bc:	45b2      	cmp	sl, r6
 80252be:	dc18      	bgt.n	80252f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80252c0:	3b08      	subs	r3, #8
 80252c2:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80252c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80252ca:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 80252ce:	45b2      	cmp	sl, r6
 80252d0:	dbf6      	blt.n	80252c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 80252d2:	42ab      	cmp	r3, r5
 80252d4:	681e      	ldr	r6, [r3, #0]
 80252d6:	d30e      	bcc.n	80252f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 80252d8:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 80252dc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80252e0:	602e      	str	r6, [r5, #0]
 80252e2:	685e      	ldr	r6, [r3, #4]
 80252e4:	606e      	str	r6, [r5, #4]
 80252e6:	f8a3 9000 	strh.w	r9, [r3]
 80252ea:	f8a3 8002 	strh.w	r8, [r3, #2]
 80252ee:	809f      	strh	r7, [r3, #4]
 80252f0:	80da      	strh	r2, [r3, #6]
 80252f2:	462a      	mov	r2, r5
 80252f4:	e7d3      	b.n	802529e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80252f6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80252fa:	6006      	str	r6, [r0, #0]
 80252fc:	685e      	ldr	r6, [r3, #4]
 80252fe:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8025302:	6046      	str	r6, [r0, #4]
 8025304:	1a1e      	subs	r6, r3, r0
 8025306:	80da      	strh	r2, [r3, #6]
 8025308:	1b4a      	subs	r2, r1, r5
 802530a:	f8a3 e000 	strh.w	lr, [r3]
 802530e:	10d2      	asrs	r2, r2, #3
 8025310:	f8a3 c002 	strh.w	ip, [r3, #2]
 8025314:	f8a3 8004 	strh.w	r8, [r3, #4]
 8025318:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802531c:	bfb5      	itete	lt
 802531e:	e9c4 0300 	strdlt	r0, r3, [r4]
 8025322:	4607      	movge	r7, r0
 8025324:	460b      	movlt	r3, r1
 8025326:	e9c4 5100 	strdge	r5, r1, [r4]
 802532a:	4638      	mov	r0, r7
 802532c:	3408      	adds	r4, #8
 802532e:	4619      	mov	r1, r3
 8025330:	e73f      	b.n	80251b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025332:	4291      	cmp	r1, r2
 8025334:	d925      	bls.n	8025382 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8025336:	f1a2 0310 	sub.w	r3, r2, #16
 802533a:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 802533e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8025342:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8025346:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802534a:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 802534e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8025352:	42b5      	cmp	r5, r6
 8025354:	dd13      	ble.n	802537e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8025356:	461d      	mov	r5, r3
 8025358:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802535c:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8025360:	3b08      	subs	r3, #8
 8025362:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8025366:	619e      	str	r6, [r3, #24]
 8025368:	42a8      	cmp	r0, r5
 802536a:	686e      	ldr	r6, [r5, #4]
 802536c:	f8a3 c010 	strh.w	ip, [r3, #16]
 8025370:	61de      	str	r6, [r3, #28]
 8025372:	825f      	strh	r7, [r3, #18]
 8025374:	f8a3 8014 	strh.w	r8, [r3, #20]
 8025378:	f8a3 e016 	strh.w	lr, [r3, #22]
 802537c:	d1dd      	bne.n	802533a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802537e:	3208      	adds	r2, #8
 8025380:	e7d7      	b.n	8025332 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025382:	466b      	mov	r3, sp
 8025384:	429c      	cmp	r4, r3
 8025386:	d903      	bls.n	8025390 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8025388:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802538c:	3c08      	subs	r4, #8
 802538e:	e710      	b.n	80251b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025390:	b051      	add	sp, #324	; 0x144
 8025392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025396 <_ZN8touchgfx7Outline9sortCellsEv>:
 8025396:	6881      	ldr	r1, [r0, #8]
 8025398:	b111      	cbz	r1, 80253a0 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802539a:	68c0      	ldr	r0, [r0, #12]
 802539c:	f7ff bf03 	b.w	80251a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80253a0:	4770      	bx	lr

080253a2 <_ZN8touchgfx7Outline8getCellsEv>:
 80253a2:	b510      	push	{r4, lr}
 80253a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80253a6:	4604      	mov	r4, r0
 80253a8:	07da      	lsls	r2, r3, #31
 80253aa:	d507      	bpl.n	80253bc <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80253ac:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80253b0:	f7ff fe83 	bl	80250ba <_ZN8touchgfx7Outline6lineToEii>
 80253b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80253b6:	f023 0301 	bic.w	r3, r3, #1
 80253ba:	63e3      	str	r3, [r4, #60]	; 0x3c
 80253bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80253be:	079b      	lsls	r3, r3, #30
 80253c0:	d51a      	bpl.n	80253f8 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80253c2:	8b62      	ldrh	r2, [r4, #26]
 80253c4:	8b23      	ldrh	r3, [r4, #24]
 80253c6:	4313      	orrs	r3, r2
 80253c8:	d00d      	beq.n	80253e6 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80253ca:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80253ce:	2b00      	cmp	r3, #0
 80253d0:	db09      	blt.n	80253e6 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80253d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80253d4:	4293      	cmp	r3, r2
 80253d6:	da06      	bge.n	80253e6 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80253d8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80253dc:	429a      	cmp	r2, r3
 80253de:	d80d      	bhi.n	80253fc <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 80253e0:	2301      	movs	r3, #1
 80253e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80253e6:	68a0      	ldr	r0, [r4, #8]
 80253e8:	b138      	cbz	r0, 80253fa <_ZN8touchgfx7Outline8getCellsEv+0x58>
 80253ea:	4620      	mov	r0, r4
 80253ec:	f7ff ffd3 	bl	8025396 <_ZN8touchgfx7Outline9sortCellsEv>
 80253f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80253f2:	f023 0302 	bic.w	r3, r3, #2
 80253f6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80253f8:	68e0      	ldr	r0, [r4, #12]
 80253fa:	bd10      	pop	{r4, pc}
 80253fc:	f104 0314 	add.w	r3, r4, #20
 8025400:	6922      	ldr	r2, [r4, #16]
 8025402:	cb03      	ldmia	r3!, {r0, r1}
 8025404:	6010      	str	r0, [r2, #0]
 8025406:	6051      	str	r1, [r2, #4]
 8025408:	6923      	ldr	r3, [r4, #16]
 802540a:	3308      	adds	r3, #8
 802540c:	6123      	str	r3, [r4, #16]
 802540e:	68a3      	ldr	r3, [r4, #8]
 8025410:	3301      	adds	r3, #1
 8025412:	60a3      	str	r3, [r4, #8]
 8025414:	e7e7      	b.n	80253e6 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08025416 <_ZN8touchgfx8ScanlineD1Ev>:
 8025416:	4770      	bx	lr

08025418 <_ZN8touchgfx8ScanlineD0Ev>:
 8025418:	b510      	push	{r4, lr}
 802541a:	4604      	mov	r4, r0
 802541c:	2124      	movs	r1, #36	; 0x24
 802541e:	f000 f87a 	bl	8025516 <_ZdlPvj>
 8025422:	4620      	mov	r0, r4
 8025424:	bd10      	pop	{r4, pc}

08025426 <_ZN8touchgfx8Scanline5resetEv>:
 8025426:	b510      	push	{r4, lr}
 8025428:	4604      	mov	r4, r0
 802542a:	f7f2 f9c3 	bl	80177b4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802542e:	61a0      	str	r0, [r4, #24]
 8025430:	f7f2 f9c6 	bl	80177c0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8025434:	61e0      	str	r0, [r4, #28]
 8025436:	f7f2 f9c9 	bl	80177cc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802543a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802543e:	6220      	str	r0, [r4, #32]
 8025440:	6160      	str	r0, [r4, #20]
 8025442:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8025446:	69e3      	ldr	r3, [r4, #28]
 8025448:	6123      	str	r3, [r4, #16]
 802544a:	2300      	movs	r3, #0
 802544c:	60e3      	str	r3, [r4, #12]
 802544e:	bd10      	pop	{r4, pc}

08025450 <_ZN8touchgfx8ScanlineC1Ev>:
 8025450:	4b07      	ldr	r3, [pc, #28]	; (8025470 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8025452:	b510      	push	{r4, lr}
 8025454:	6003      	str	r3, [r0, #0]
 8025456:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802545a:	4604      	mov	r4, r0
 802545c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8025460:	2300      	movs	r3, #0
 8025462:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025466:	6143      	str	r3, [r0, #20]
 8025468:	f7ff ffdd 	bl	8025426 <_ZN8touchgfx8Scanline5resetEv>
 802546c:	4620      	mov	r0, r4
 802546e:	bd10      	pop	{r4, pc}
 8025470:	0802b56c 	.word	0x0802b56c

08025474 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8025474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025478:	1e0c      	subs	r4, r1, #0
 802547a:	4605      	mov	r5, r0
 802547c:	4617      	mov	r7, r2
 802547e:	461e      	mov	r6, r3
 8025480:	da03      	bge.n	802548a <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8025482:	4426      	add	r6, r4
 8025484:	2e01      	cmp	r6, #1
 8025486:	d421      	bmi.n	80254cc <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025488:	2400      	movs	r4, #0
 802548a:	f7f2 f98d 	bl	80177a8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802548e:	42a0      	cmp	r0, r4
 8025490:	d91c      	bls.n	80254cc <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025492:	eb04 0806 	add.w	r8, r4, r6
 8025496:	f7f2 f987 	bl	80177a8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802549a:	4580      	cmp	r8, r0
 802549c:	d902      	bls.n	80254a4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802549e:	f7f2 f983 	bl	80177a8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80254a2:	1b06      	subs	r6, r0, r4
 80254a4:	69a8      	ldr	r0, [r5, #24]
 80254a6:	4632      	mov	r2, r6
 80254a8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80254ac:	4420      	add	r0, r4
 80254ae:	f7f4 fb0c 	bl	8019aca <_ZN8touchgfx6memsetEPvhm>
 80254b2:	686b      	ldr	r3, [r5, #4]
 80254b4:	b2b2      	uxth	r2, r6
 80254b6:	3301      	adds	r3, #1
 80254b8:	42a3      	cmp	r3, r4
 80254ba:	696b      	ldr	r3, [r5, #20]
 80254bc:	d108      	bne.n	80254d0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 80254be:	8819      	ldrh	r1, [r3, #0]
 80254c0:	440a      	add	r2, r1
 80254c2:	801a      	strh	r2, [r3, #0]
 80254c4:	3c01      	subs	r4, #1
 80254c6:	4434      	add	r4, r6
 80254c8:	e9c5 4701 	strd	r4, r7, [r5, #4]
 80254cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80254d0:	1c99      	adds	r1, r3, #2
 80254d2:	6169      	str	r1, [r5, #20]
 80254d4:	805a      	strh	r2, [r3, #2]
 80254d6:	692b      	ldr	r3, [r5, #16]
 80254d8:	1c9a      	adds	r2, r3, #2
 80254da:	612a      	str	r2, [r5, #16]
 80254dc:	805c      	strh	r4, [r3, #2]
 80254de:	68eb      	ldr	r3, [r5, #12]
 80254e0:	3301      	adds	r3, #1
 80254e2:	60eb      	str	r3, [r5, #12]
 80254e4:	e7ee      	b.n	80254c4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

080254e6 <_ZN8touchgfx15RenderingBufferC1Ev>:
 80254e6:	2200      	movs	r2, #0
 80254e8:	6002      	str	r2, [r0, #0]
 80254ea:	7102      	strb	r2, [r0, #4]
 80254ec:	6102      	str	r2, [r0, #16]
 80254ee:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80254f2:	4770      	bx	lr

080254f4 <_ZN8touchgfx15RenderingBufferD1Ev>:
 80254f4:	4770      	bx	lr

080254f6 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 80254f6:	6083      	str	r3, [r0, #8]
 80254f8:	9b00      	ldr	r3, [sp, #0]
 80254fa:	6001      	str	r1, [r0, #0]
 80254fc:	60c3      	str	r3, [r0, #12]
 80254fe:	9b01      	ldr	r3, [sp, #4]
 8025500:	7102      	strb	r2, [r0, #4]
 8025502:	6103      	str	r3, [r0, #16]
 8025504:	4770      	bx	lr

08025506 <__aeabi_atexit>:
 8025506:	460b      	mov	r3, r1
 8025508:	4601      	mov	r1, r0
 802550a:	4618      	mov	r0, r3
 802550c:	f000 b852 	b.w	80255b4 <__cxa_atexit>

08025510 <__cxa_pure_virtual>:
 8025510:	b508      	push	{r3, lr}
 8025512:	f000 f81f 	bl	8025554 <_ZSt9terminatev>

08025516 <_ZdlPvj>:
 8025516:	f000 b80f 	b.w	8025538 <_ZdlPv>

0802551a <__cxa_guard_acquire>:
 802551a:	6803      	ldr	r3, [r0, #0]
 802551c:	07db      	lsls	r3, r3, #31
 802551e:	d406      	bmi.n	802552e <__cxa_guard_acquire+0x14>
 8025520:	7843      	ldrb	r3, [r0, #1]
 8025522:	b103      	cbz	r3, 8025526 <__cxa_guard_acquire+0xc>
 8025524:	deff      	udf	#255	; 0xff
 8025526:	2301      	movs	r3, #1
 8025528:	7043      	strb	r3, [r0, #1]
 802552a:	4618      	mov	r0, r3
 802552c:	4770      	bx	lr
 802552e:	2000      	movs	r0, #0
 8025530:	4770      	bx	lr

08025532 <__cxa_guard_release>:
 8025532:	2301      	movs	r3, #1
 8025534:	6003      	str	r3, [r0, #0]
 8025536:	4770      	bx	lr

08025538 <_ZdlPv>:
 8025538:	f000 b88e 	b.w	8025658 <free>

0802553c <_ZN10__cxxabiv111__terminateEPFvvE>:
 802553c:	b508      	push	{r3, lr}
 802553e:	4780      	blx	r0
 8025540:	f000 f80d 	bl	802555e <abort>

08025544 <_ZSt13get_terminatev>:
 8025544:	4b02      	ldr	r3, [pc, #8]	; (8025550 <_ZSt13get_terminatev+0xc>)
 8025546:	6818      	ldr	r0, [r3, #0]
 8025548:	f3bf 8f5b 	dmb	ish
 802554c:	4770      	bx	lr
 802554e:	bf00      	nop
 8025550:	200000a8 	.word	0x200000a8

08025554 <_ZSt9terminatev>:
 8025554:	b508      	push	{r3, lr}
 8025556:	f7ff fff5 	bl	8025544 <_ZSt13get_terminatev>
 802555a:	f7ff ffef 	bl	802553c <_ZN10__cxxabiv111__terminateEPFvvE>

0802555e <abort>:
 802555e:	b508      	push	{r3, lr}
 8025560:	2006      	movs	r0, #6
 8025562:	f000 fc3d 	bl	8025de0 <raise>
 8025566:	2001      	movs	r0, #1
 8025568:	f7de f87e 	bl	8003668 <_exit>

0802556c <__assert_func>:
 802556c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802556e:	461c      	mov	r4, r3
 8025570:	4b09      	ldr	r3, [pc, #36]	; (8025598 <__assert_func+0x2c>)
 8025572:	681b      	ldr	r3, [r3, #0]
 8025574:	4605      	mov	r5, r0
 8025576:	68d8      	ldr	r0, [r3, #12]
 8025578:	b152      	cbz	r2, 8025590 <__assert_func+0x24>
 802557a:	4b08      	ldr	r3, [pc, #32]	; (802559c <__assert_func+0x30>)
 802557c:	9100      	str	r1, [sp, #0]
 802557e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8025582:	4907      	ldr	r1, [pc, #28]	; (80255a0 <__assert_func+0x34>)
 8025584:	462b      	mov	r3, r5
 8025586:	4622      	mov	r2, r4
 8025588:	f000 f828 	bl	80255dc <fiprintf>
 802558c:	f7ff ffe7 	bl	802555e <abort>
 8025590:	4b04      	ldr	r3, [pc, #16]	; (80255a4 <__assert_func+0x38>)
 8025592:	461a      	mov	r2, r3
 8025594:	e7f2      	b.n	802557c <__assert_func+0x10>
 8025596:	bf00      	nop
 8025598:	200000ac 	.word	0x200000ac
 802559c:	0802b574 	.word	0x0802b574
 80255a0:	0802b581 	.word	0x0802b581
 80255a4:	0802b5af 	.word	0x0802b5af

080255a8 <atexit>:
 80255a8:	2300      	movs	r3, #0
 80255aa:	4601      	mov	r1, r0
 80255ac:	461a      	mov	r2, r3
 80255ae:	4618      	mov	r0, r3
 80255b0:	f000 bcf2 	b.w	8025f98 <__register_exitproc>

080255b4 <__cxa_atexit>:
 80255b4:	b510      	push	{r4, lr}
 80255b6:	4c05      	ldr	r4, [pc, #20]	; (80255cc <__cxa_atexit+0x18>)
 80255b8:	4613      	mov	r3, r2
 80255ba:	b12c      	cbz	r4, 80255c8 <__cxa_atexit+0x14>
 80255bc:	460a      	mov	r2, r1
 80255be:	4601      	mov	r1, r0
 80255c0:	2002      	movs	r0, #2
 80255c2:	f000 fce9 	bl	8025f98 <__register_exitproc>
 80255c6:	bd10      	pop	{r4, pc}
 80255c8:	4620      	mov	r0, r4
 80255ca:	e7fc      	b.n	80255c6 <__cxa_atexit+0x12>
 80255cc:	08025f99 	.word	0x08025f99

080255d0 <__errno>:
 80255d0:	4b01      	ldr	r3, [pc, #4]	; (80255d8 <__errno+0x8>)
 80255d2:	6818      	ldr	r0, [r3, #0]
 80255d4:	4770      	bx	lr
 80255d6:	bf00      	nop
 80255d8:	200000ac 	.word	0x200000ac

080255dc <fiprintf>:
 80255dc:	b40e      	push	{r1, r2, r3}
 80255de:	b503      	push	{r0, r1, lr}
 80255e0:	4601      	mov	r1, r0
 80255e2:	ab03      	add	r3, sp, #12
 80255e4:	4805      	ldr	r0, [pc, #20]	; (80255fc <fiprintf+0x20>)
 80255e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80255ea:	6800      	ldr	r0, [r0, #0]
 80255ec:	9301      	str	r3, [sp, #4]
 80255ee:	f000 f921 	bl	8025834 <_vfiprintf_r>
 80255f2:	b002      	add	sp, #8
 80255f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80255f8:	b003      	add	sp, #12
 80255fa:	4770      	bx	lr
 80255fc:	200000ac 	.word	0x200000ac

08025600 <__libc_init_array>:
 8025600:	b570      	push	{r4, r5, r6, lr}
 8025602:	4e0d      	ldr	r6, [pc, #52]	; (8025638 <__libc_init_array+0x38>)
 8025604:	4c0d      	ldr	r4, [pc, #52]	; (802563c <__libc_init_array+0x3c>)
 8025606:	1ba4      	subs	r4, r4, r6
 8025608:	10a4      	asrs	r4, r4, #2
 802560a:	2500      	movs	r5, #0
 802560c:	42a5      	cmp	r5, r4
 802560e:	d109      	bne.n	8025624 <__libc_init_array+0x24>
 8025610:	4e0b      	ldr	r6, [pc, #44]	; (8025640 <__libc_init_array+0x40>)
 8025612:	4c0c      	ldr	r4, [pc, #48]	; (8025644 <__libc_init_array+0x44>)
 8025614:	f000 ffb0 	bl	8026578 <_init>
 8025618:	1ba4      	subs	r4, r4, r6
 802561a:	10a4      	asrs	r4, r4, #2
 802561c:	2500      	movs	r5, #0
 802561e:	42a5      	cmp	r5, r4
 8025620:	d105      	bne.n	802562e <__libc_init_array+0x2e>
 8025622:	bd70      	pop	{r4, r5, r6, pc}
 8025624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025628:	4798      	blx	r3
 802562a:	3501      	adds	r5, #1
 802562c:	e7ee      	b.n	802560c <__libc_init_array+0xc>
 802562e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025632:	4798      	blx	r3
 8025634:	3501      	adds	r5, #1
 8025636:	e7f2      	b.n	802561e <__libc_init_array+0x1e>
 8025638:	08062a64 	.word	0x08062a64
 802563c:	08062a64 	.word	0x08062a64
 8025640:	08062a64 	.word	0x08062a64
 8025644:	08062a78 	.word	0x08062a78

08025648 <malloc>:
 8025648:	4b02      	ldr	r3, [pc, #8]	; (8025654 <malloc+0xc>)
 802564a:	4601      	mov	r1, r0
 802564c:	6818      	ldr	r0, [r3, #0]
 802564e:	f000 b86d 	b.w	802572c <_malloc_r>
 8025652:	bf00      	nop
 8025654:	200000ac 	.word	0x200000ac

08025658 <free>:
 8025658:	4b02      	ldr	r3, [pc, #8]	; (8025664 <free+0xc>)
 802565a:	4601      	mov	r1, r0
 802565c:	6818      	ldr	r0, [r3, #0]
 802565e:	f000 b817 	b.w	8025690 <_free_r>
 8025662:	bf00      	nop
 8025664:	200000ac 	.word	0x200000ac

08025668 <memcpy>:
 8025668:	b510      	push	{r4, lr}
 802566a:	1e43      	subs	r3, r0, #1
 802566c:	440a      	add	r2, r1
 802566e:	4291      	cmp	r1, r2
 8025670:	d100      	bne.n	8025674 <memcpy+0xc>
 8025672:	bd10      	pop	{r4, pc}
 8025674:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025678:	f803 4f01 	strb.w	r4, [r3, #1]!
 802567c:	e7f7      	b.n	802566e <memcpy+0x6>

0802567e <memset>:
 802567e:	4402      	add	r2, r0
 8025680:	4603      	mov	r3, r0
 8025682:	4293      	cmp	r3, r2
 8025684:	d100      	bne.n	8025688 <memset+0xa>
 8025686:	4770      	bx	lr
 8025688:	f803 1b01 	strb.w	r1, [r3], #1
 802568c:	e7f9      	b.n	8025682 <memset+0x4>
	...

08025690 <_free_r>:
 8025690:	b538      	push	{r3, r4, r5, lr}
 8025692:	4605      	mov	r5, r0
 8025694:	2900      	cmp	r1, #0
 8025696:	d045      	beq.n	8025724 <_free_r+0x94>
 8025698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802569c:	1f0c      	subs	r4, r1, #4
 802569e:	2b00      	cmp	r3, #0
 80256a0:	bfb8      	it	lt
 80256a2:	18e4      	addlt	r4, r4, r3
 80256a4:	f000 feba 	bl	802641c <__malloc_lock>
 80256a8:	4a1f      	ldr	r2, [pc, #124]	; (8025728 <_free_r+0x98>)
 80256aa:	6813      	ldr	r3, [r2, #0]
 80256ac:	4610      	mov	r0, r2
 80256ae:	b933      	cbnz	r3, 80256be <_free_r+0x2e>
 80256b0:	6063      	str	r3, [r4, #4]
 80256b2:	6014      	str	r4, [r2, #0]
 80256b4:	4628      	mov	r0, r5
 80256b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80256ba:	f000 beb0 	b.w	802641e <__malloc_unlock>
 80256be:	42a3      	cmp	r3, r4
 80256c0:	d90c      	bls.n	80256dc <_free_r+0x4c>
 80256c2:	6821      	ldr	r1, [r4, #0]
 80256c4:	1862      	adds	r2, r4, r1
 80256c6:	4293      	cmp	r3, r2
 80256c8:	bf04      	itt	eq
 80256ca:	681a      	ldreq	r2, [r3, #0]
 80256cc:	685b      	ldreq	r3, [r3, #4]
 80256ce:	6063      	str	r3, [r4, #4]
 80256d0:	bf04      	itt	eq
 80256d2:	1852      	addeq	r2, r2, r1
 80256d4:	6022      	streq	r2, [r4, #0]
 80256d6:	6004      	str	r4, [r0, #0]
 80256d8:	e7ec      	b.n	80256b4 <_free_r+0x24>
 80256da:	4613      	mov	r3, r2
 80256dc:	685a      	ldr	r2, [r3, #4]
 80256de:	b10a      	cbz	r2, 80256e4 <_free_r+0x54>
 80256e0:	42a2      	cmp	r2, r4
 80256e2:	d9fa      	bls.n	80256da <_free_r+0x4a>
 80256e4:	6819      	ldr	r1, [r3, #0]
 80256e6:	1858      	adds	r0, r3, r1
 80256e8:	42a0      	cmp	r0, r4
 80256ea:	d10b      	bne.n	8025704 <_free_r+0x74>
 80256ec:	6820      	ldr	r0, [r4, #0]
 80256ee:	4401      	add	r1, r0
 80256f0:	1858      	adds	r0, r3, r1
 80256f2:	4282      	cmp	r2, r0
 80256f4:	6019      	str	r1, [r3, #0]
 80256f6:	d1dd      	bne.n	80256b4 <_free_r+0x24>
 80256f8:	6810      	ldr	r0, [r2, #0]
 80256fa:	6852      	ldr	r2, [r2, #4]
 80256fc:	605a      	str	r2, [r3, #4]
 80256fe:	4401      	add	r1, r0
 8025700:	6019      	str	r1, [r3, #0]
 8025702:	e7d7      	b.n	80256b4 <_free_r+0x24>
 8025704:	d902      	bls.n	802570c <_free_r+0x7c>
 8025706:	230c      	movs	r3, #12
 8025708:	602b      	str	r3, [r5, #0]
 802570a:	e7d3      	b.n	80256b4 <_free_r+0x24>
 802570c:	6820      	ldr	r0, [r4, #0]
 802570e:	1821      	adds	r1, r4, r0
 8025710:	428a      	cmp	r2, r1
 8025712:	bf04      	itt	eq
 8025714:	6811      	ldreq	r1, [r2, #0]
 8025716:	6852      	ldreq	r2, [r2, #4]
 8025718:	6062      	str	r2, [r4, #4]
 802571a:	bf04      	itt	eq
 802571c:	1809      	addeq	r1, r1, r0
 802571e:	6021      	streq	r1, [r4, #0]
 8025720:	605c      	str	r4, [r3, #4]
 8025722:	e7c7      	b.n	80256b4 <_free_r+0x24>
 8025724:	bd38      	pop	{r3, r4, r5, pc}
 8025726:	bf00      	nop
 8025728:	2000bcac 	.word	0x2000bcac

0802572c <_malloc_r>:
 802572c:	b570      	push	{r4, r5, r6, lr}
 802572e:	1ccd      	adds	r5, r1, #3
 8025730:	f025 0503 	bic.w	r5, r5, #3
 8025734:	3508      	adds	r5, #8
 8025736:	2d0c      	cmp	r5, #12
 8025738:	bf38      	it	cc
 802573a:	250c      	movcc	r5, #12
 802573c:	2d00      	cmp	r5, #0
 802573e:	4606      	mov	r6, r0
 8025740:	db01      	blt.n	8025746 <_malloc_r+0x1a>
 8025742:	42a9      	cmp	r1, r5
 8025744:	d903      	bls.n	802574e <_malloc_r+0x22>
 8025746:	230c      	movs	r3, #12
 8025748:	6033      	str	r3, [r6, #0]
 802574a:	2000      	movs	r0, #0
 802574c:	bd70      	pop	{r4, r5, r6, pc}
 802574e:	f000 fe65 	bl	802641c <__malloc_lock>
 8025752:	4a21      	ldr	r2, [pc, #132]	; (80257d8 <_malloc_r+0xac>)
 8025754:	6814      	ldr	r4, [r2, #0]
 8025756:	4621      	mov	r1, r4
 8025758:	b991      	cbnz	r1, 8025780 <_malloc_r+0x54>
 802575a:	4c20      	ldr	r4, [pc, #128]	; (80257dc <_malloc_r+0xb0>)
 802575c:	6823      	ldr	r3, [r4, #0]
 802575e:	b91b      	cbnz	r3, 8025768 <_malloc_r+0x3c>
 8025760:	4630      	mov	r0, r6
 8025762:	f000 fb05 	bl	8025d70 <_sbrk_r>
 8025766:	6020      	str	r0, [r4, #0]
 8025768:	4629      	mov	r1, r5
 802576a:	4630      	mov	r0, r6
 802576c:	f000 fb00 	bl	8025d70 <_sbrk_r>
 8025770:	1c43      	adds	r3, r0, #1
 8025772:	d124      	bne.n	80257be <_malloc_r+0x92>
 8025774:	230c      	movs	r3, #12
 8025776:	6033      	str	r3, [r6, #0]
 8025778:	4630      	mov	r0, r6
 802577a:	f000 fe50 	bl	802641e <__malloc_unlock>
 802577e:	e7e4      	b.n	802574a <_malloc_r+0x1e>
 8025780:	680b      	ldr	r3, [r1, #0]
 8025782:	1b5b      	subs	r3, r3, r5
 8025784:	d418      	bmi.n	80257b8 <_malloc_r+0x8c>
 8025786:	2b0b      	cmp	r3, #11
 8025788:	d90f      	bls.n	80257aa <_malloc_r+0x7e>
 802578a:	600b      	str	r3, [r1, #0]
 802578c:	50cd      	str	r5, [r1, r3]
 802578e:	18cc      	adds	r4, r1, r3
 8025790:	4630      	mov	r0, r6
 8025792:	f000 fe44 	bl	802641e <__malloc_unlock>
 8025796:	f104 000b 	add.w	r0, r4, #11
 802579a:	1d23      	adds	r3, r4, #4
 802579c:	f020 0007 	bic.w	r0, r0, #7
 80257a0:	1ac3      	subs	r3, r0, r3
 80257a2:	d0d3      	beq.n	802574c <_malloc_r+0x20>
 80257a4:	425a      	negs	r2, r3
 80257a6:	50e2      	str	r2, [r4, r3]
 80257a8:	e7d0      	b.n	802574c <_malloc_r+0x20>
 80257aa:	428c      	cmp	r4, r1
 80257ac:	684b      	ldr	r3, [r1, #4]
 80257ae:	bf16      	itet	ne
 80257b0:	6063      	strne	r3, [r4, #4]
 80257b2:	6013      	streq	r3, [r2, #0]
 80257b4:	460c      	movne	r4, r1
 80257b6:	e7eb      	b.n	8025790 <_malloc_r+0x64>
 80257b8:	460c      	mov	r4, r1
 80257ba:	6849      	ldr	r1, [r1, #4]
 80257bc:	e7cc      	b.n	8025758 <_malloc_r+0x2c>
 80257be:	1cc4      	adds	r4, r0, #3
 80257c0:	f024 0403 	bic.w	r4, r4, #3
 80257c4:	42a0      	cmp	r0, r4
 80257c6:	d005      	beq.n	80257d4 <_malloc_r+0xa8>
 80257c8:	1a21      	subs	r1, r4, r0
 80257ca:	4630      	mov	r0, r6
 80257cc:	f000 fad0 	bl	8025d70 <_sbrk_r>
 80257d0:	3001      	adds	r0, #1
 80257d2:	d0cf      	beq.n	8025774 <_malloc_r+0x48>
 80257d4:	6025      	str	r5, [r4, #0]
 80257d6:	e7db      	b.n	8025790 <_malloc_r+0x64>
 80257d8:	2000bcac 	.word	0x2000bcac
 80257dc:	2000bcb0 	.word	0x2000bcb0

080257e0 <__sfputc_r>:
 80257e0:	6893      	ldr	r3, [r2, #8]
 80257e2:	3b01      	subs	r3, #1
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	b410      	push	{r4}
 80257e8:	6093      	str	r3, [r2, #8]
 80257ea:	da08      	bge.n	80257fe <__sfputc_r+0x1e>
 80257ec:	6994      	ldr	r4, [r2, #24]
 80257ee:	42a3      	cmp	r3, r4
 80257f0:	db01      	blt.n	80257f6 <__sfputc_r+0x16>
 80257f2:	290a      	cmp	r1, #10
 80257f4:	d103      	bne.n	80257fe <__sfputc_r+0x1e>
 80257f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80257fa:	f000 bb0d 	b.w	8025e18 <__swbuf_r>
 80257fe:	6813      	ldr	r3, [r2, #0]
 8025800:	1c58      	adds	r0, r3, #1
 8025802:	6010      	str	r0, [r2, #0]
 8025804:	7019      	strb	r1, [r3, #0]
 8025806:	4608      	mov	r0, r1
 8025808:	f85d 4b04 	ldr.w	r4, [sp], #4
 802580c:	4770      	bx	lr

0802580e <__sfputs_r>:
 802580e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025810:	4606      	mov	r6, r0
 8025812:	460f      	mov	r7, r1
 8025814:	4614      	mov	r4, r2
 8025816:	18d5      	adds	r5, r2, r3
 8025818:	42ac      	cmp	r4, r5
 802581a:	d101      	bne.n	8025820 <__sfputs_r+0x12>
 802581c:	2000      	movs	r0, #0
 802581e:	e007      	b.n	8025830 <__sfputs_r+0x22>
 8025820:	463a      	mov	r2, r7
 8025822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025826:	4630      	mov	r0, r6
 8025828:	f7ff ffda 	bl	80257e0 <__sfputc_r>
 802582c:	1c43      	adds	r3, r0, #1
 802582e:	d1f3      	bne.n	8025818 <__sfputs_r+0xa>
 8025830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025834 <_vfiprintf_r>:
 8025834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025838:	460c      	mov	r4, r1
 802583a:	b09d      	sub	sp, #116	; 0x74
 802583c:	4617      	mov	r7, r2
 802583e:	461d      	mov	r5, r3
 8025840:	4606      	mov	r6, r0
 8025842:	b118      	cbz	r0, 802584c <_vfiprintf_r+0x18>
 8025844:	6983      	ldr	r3, [r0, #24]
 8025846:	b90b      	cbnz	r3, 802584c <_vfiprintf_r+0x18>
 8025848:	f000 fcfa 	bl	8026240 <__sinit>
 802584c:	4b7c      	ldr	r3, [pc, #496]	; (8025a40 <_vfiprintf_r+0x20c>)
 802584e:	429c      	cmp	r4, r3
 8025850:	d158      	bne.n	8025904 <_vfiprintf_r+0xd0>
 8025852:	6874      	ldr	r4, [r6, #4]
 8025854:	89a3      	ldrh	r3, [r4, #12]
 8025856:	0718      	lsls	r0, r3, #28
 8025858:	d55e      	bpl.n	8025918 <_vfiprintf_r+0xe4>
 802585a:	6923      	ldr	r3, [r4, #16]
 802585c:	2b00      	cmp	r3, #0
 802585e:	d05b      	beq.n	8025918 <_vfiprintf_r+0xe4>
 8025860:	2300      	movs	r3, #0
 8025862:	9309      	str	r3, [sp, #36]	; 0x24
 8025864:	2320      	movs	r3, #32
 8025866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802586a:	2330      	movs	r3, #48	; 0x30
 802586c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025870:	9503      	str	r5, [sp, #12]
 8025872:	f04f 0b01 	mov.w	fp, #1
 8025876:	46b8      	mov	r8, r7
 8025878:	4645      	mov	r5, r8
 802587a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802587e:	b10b      	cbz	r3, 8025884 <_vfiprintf_r+0x50>
 8025880:	2b25      	cmp	r3, #37	; 0x25
 8025882:	d154      	bne.n	802592e <_vfiprintf_r+0xfa>
 8025884:	ebb8 0a07 	subs.w	sl, r8, r7
 8025888:	d00b      	beq.n	80258a2 <_vfiprintf_r+0x6e>
 802588a:	4653      	mov	r3, sl
 802588c:	463a      	mov	r2, r7
 802588e:	4621      	mov	r1, r4
 8025890:	4630      	mov	r0, r6
 8025892:	f7ff ffbc 	bl	802580e <__sfputs_r>
 8025896:	3001      	adds	r0, #1
 8025898:	f000 80c2 	beq.w	8025a20 <_vfiprintf_r+0x1ec>
 802589c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802589e:	4453      	add	r3, sl
 80258a0:	9309      	str	r3, [sp, #36]	; 0x24
 80258a2:	f898 3000 	ldrb.w	r3, [r8]
 80258a6:	2b00      	cmp	r3, #0
 80258a8:	f000 80ba 	beq.w	8025a20 <_vfiprintf_r+0x1ec>
 80258ac:	2300      	movs	r3, #0
 80258ae:	f04f 32ff 	mov.w	r2, #4294967295
 80258b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80258b6:	9304      	str	r3, [sp, #16]
 80258b8:	9307      	str	r3, [sp, #28]
 80258ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80258be:	931a      	str	r3, [sp, #104]	; 0x68
 80258c0:	46a8      	mov	r8, r5
 80258c2:	2205      	movs	r2, #5
 80258c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80258c8:	485e      	ldr	r0, [pc, #376]	; (8025a44 <_vfiprintf_r+0x210>)
 80258ca:	f7da fca1 	bl	8000210 <memchr>
 80258ce:	9b04      	ldr	r3, [sp, #16]
 80258d0:	bb78      	cbnz	r0, 8025932 <_vfiprintf_r+0xfe>
 80258d2:	06d9      	lsls	r1, r3, #27
 80258d4:	bf44      	itt	mi
 80258d6:	2220      	movmi	r2, #32
 80258d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80258dc:	071a      	lsls	r2, r3, #28
 80258de:	bf44      	itt	mi
 80258e0:	222b      	movmi	r2, #43	; 0x2b
 80258e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80258e6:	782a      	ldrb	r2, [r5, #0]
 80258e8:	2a2a      	cmp	r2, #42	; 0x2a
 80258ea:	d02a      	beq.n	8025942 <_vfiprintf_r+0x10e>
 80258ec:	9a07      	ldr	r2, [sp, #28]
 80258ee:	46a8      	mov	r8, r5
 80258f0:	2000      	movs	r0, #0
 80258f2:	250a      	movs	r5, #10
 80258f4:	4641      	mov	r1, r8
 80258f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80258fa:	3b30      	subs	r3, #48	; 0x30
 80258fc:	2b09      	cmp	r3, #9
 80258fe:	d969      	bls.n	80259d4 <_vfiprintf_r+0x1a0>
 8025900:	b360      	cbz	r0, 802595c <_vfiprintf_r+0x128>
 8025902:	e024      	b.n	802594e <_vfiprintf_r+0x11a>
 8025904:	4b50      	ldr	r3, [pc, #320]	; (8025a48 <_vfiprintf_r+0x214>)
 8025906:	429c      	cmp	r4, r3
 8025908:	d101      	bne.n	802590e <_vfiprintf_r+0xda>
 802590a:	68b4      	ldr	r4, [r6, #8]
 802590c:	e7a2      	b.n	8025854 <_vfiprintf_r+0x20>
 802590e:	4b4f      	ldr	r3, [pc, #316]	; (8025a4c <_vfiprintf_r+0x218>)
 8025910:	429c      	cmp	r4, r3
 8025912:	bf08      	it	eq
 8025914:	68f4      	ldreq	r4, [r6, #12]
 8025916:	e79d      	b.n	8025854 <_vfiprintf_r+0x20>
 8025918:	4621      	mov	r1, r4
 802591a:	4630      	mov	r0, r6
 802591c:	f000 face 	bl	8025ebc <__swsetup_r>
 8025920:	2800      	cmp	r0, #0
 8025922:	d09d      	beq.n	8025860 <_vfiprintf_r+0x2c>
 8025924:	f04f 30ff 	mov.w	r0, #4294967295
 8025928:	b01d      	add	sp, #116	; 0x74
 802592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802592e:	46a8      	mov	r8, r5
 8025930:	e7a2      	b.n	8025878 <_vfiprintf_r+0x44>
 8025932:	4a44      	ldr	r2, [pc, #272]	; (8025a44 <_vfiprintf_r+0x210>)
 8025934:	1a80      	subs	r0, r0, r2
 8025936:	fa0b f000 	lsl.w	r0, fp, r0
 802593a:	4318      	orrs	r0, r3
 802593c:	9004      	str	r0, [sp, #16]
 802593e:	4645      	mov	r5, r8
 8025940:	e7be      	b.n	80258c0 <_vfiprintf_r+0x8c>
 8025942:	9a03      	ldr	r2, [sp, #12]
 8025944:	1d11      	adds	r1, r2, #4
 8025946:	6812      	ldr	r2, [r2, #0]
 8025948:	9103      	str	r1, [sp, #12]
 802594a:	2a00      	cmp	r2, #0
 802594c:	db01      	blt.n	8025952 <_vfiprintf_r+0x11e>
 802594e:	9207      	str	r2, [sp, #28]
 8025950:	e004      	b.n	802595c <_vfiprintf_r+0x128>
 8025952:	4252      	negs	r2, r2
 8025954:	f043 0302 	orr.w	r3, r3, #2
 8025958:	9207      	str	r2, [sp, #28]
 802595a:	9304      	str	r3, [sp, #16]
 802595c:	f898 3000 	ldrb.w	r3, [r8]
 8025960:	2b2e      	cmp	r3, #46	; 0x2e
 8025962:	d10e      	bne.n	8025982 <_vfiprintf_r+0x14e>
 8025964:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025968:	2b2a      	cmp	r3, #42	; 0x2a
 802596a:	d138      	bne.n	80259de <_vfiprintf_r+0x1aa>
 802596c:	9b03      	ldr	r3, [sp, #12]
 802596e:	1d1a      	adds	r2, r3, #4
 8025970:	681b      	ldr	r3, [r3, #0]
 8025972:	9203      	str	r2, [sp, #12]
 8025974:	2b00      	cmp	r3, #0
 8025976:	bfb8      	it	lt
 8025978:	f04f 33ff 	movlt.w	r3, #4294967295
 802597c:	f108 0802 	add.w	r8, r8, #2
 8025980:	9305      	str	r3, [sp, #20]
 8025982:	4d33      	ldr	r5, [pc, #204]	; (8025a50 <_vfiprintf_r+0x21c>)
 8025984:	f898 1000 	ldrb.w	r1, [r8]
 8025988:	2203      	movs	r2, #3
 802598a:	4628      	mov	r0, r5
 802598c:	f7da fc40 	bl	8000210 <memchr>
 8025990:	b140      	cbz	r0, 80259a4 <_vfiprintf_r+0x170>
 8025992:	2340      	movs	r3, #64	; 0x40
 8025994:	1b40      	subs	r0, r0, r5
 8025996:	fa03 f000 	lsl.w	r0, r3, r0
 802599a:	9b04      	ldr	r3, [sp, #16]
 802599c:	4303      	orrs	r3, r0
 802599e:	f108 0801 	add.w	r8, r8, #1
 80259a2:	9304      	str	r3, [sp, #16]
 80259a4:	f898 1000 	ldrb.w	r1, [r8]
 80259a8:	482a      	ldr	r0, [pc, #168]	; (8025a54 <_vfiprintf_r+0x220>)
 80259aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80259ae:	2206      	movs	r2, #6
 80259b0:	f108 0701 	add.w	r7, r8, #1
 80259b4:	f7da fc2c 	bl	8000210 <memchr>
 80259b8:	2800      	cmp	r0, #0
 80259ba:	d037      	beq.n	8025a2c <_vfiprintf_r+0x1f8>
 80259bc:	4b26      	ldr	r3, [pc, #152]	; (8025a58 <_vfiprintf_r+0x224>)
 80259be:	bb1b      	cbnz	r3, 8025a08 <_vfiprintf_r+0x1d4>
 80259c0:	9b03      	ldr	r3, [sp, #12]
 80259c2:	3307      	adds	r3, #7
 80259c4:	f023 0307 	bic.w	r3, r3, #7
 80259c8:	3308      	adds	r3, #8
 80259ca:	9303      	str	r3, [sp, #12]
 80259cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259ce:	444b      	add	r3, r9
 80259d0:	9309      	str	r3, [sp, #36]	; 0x24
 80259d2:	e750      	b.n	8025876 <_vfiprintf_r+0x42>
 80259d4:	fb05 3202 	mla	r2, r5, r2, r3
 80259d8:	2001      	movs	r0, #1
 80259da:	4688      	mov	r8, r1
 80259dc:	e78a      	b.n	80258f4 <_vfiprintf_r+0xc0>
 80259de:	2300      	movs	r3, #0
 80259e0:	f108 0801 	add.w	r8, r8, #1
 80259e4:	9305      	str	r3, [sp, #20]
 80259e6:	4619      	mov	r1, r3
 80259e8:	250a      	movs	r5, #10
 80259ea:	4640      	mov	r0, r8
 80259ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80259f0:	3a30      	subs	r2, #48	; 0x30
 80259f2:	2a09      	cmp	r2, #9
 80259f4:	d903      	bls.n	80259fe <_vfiprintf_r+0x1ca>
 80259f6:	2b00      	cmp	r3, #0
 80259f8:	d0c3      	beq.n	8025982 <_vfiprintf_r+0x14e>
 80259fa:	9105      	str	r1, [sp, #20]
 80259fc:	e7c1      	b.n	8025982 <_vfiprintf_r+0x14e>
 80259fe:	fb05 2101 	mla	r1, r5, r1, r2
 8025a02:	2301      	movs	r3, #1
 8025a04:	4680      	mov	r8, r0
 8025a06:	e7f0      	b.n	80259ea <_vfiprintf_r+0x1b6>
 8025a08:	ab03      	add	r3, sp, #12
 8025a0a:	9300      	str	r3, [sp, #0]
 8025a0c:	4622      	mov	r2, r4
 8025a0e:	4b13      	ldr	r3, [pc, #76]	; (8025a5c <_vfiprintf_r+0x228>)
 8025a10:	a904      	add	r1, sp, #16
 8025a12:	4630      	mov	r0, r6
 8025a14:	f3af 8000 	nop.w
 8025a18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025a1c:	4681      	mov	r9, r0
 8025a1e:	d1d5      	bne.n	80259cc <_vfiprintf_r+0x198>
 8025a20:	89a3      	ldrh	r3, [r4, #12]
 8025a22:	065b      	lsls	r3, r3, #25
 8025a24:	f53f af7e 	bmi.w	8025924 <_vfiprintf_r+0xf0>
 8025a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025a2a:	e77d      	b.n	8025928 <_vfiprintf_r+0xf4>
 8025a2c:	ab03      	add	r3, sp, #12
 8025a2e:	9300      	str	r3, [sp, #0]
 8025a30:	4622      	mov	r2, r4
 8025a32:	4b0a      	ldr	r3, [pc, #40]	; (8025a5c <_vfiprintf_r+0x228>)
 8025a34:	a904      	add	r1, sp, #16
 8025a36:	4630      	mov	r0, r6
 8025a38:	f000 f888 	bl	8025b4c <_printf_i>
 8025a3c:	e7ec      	b.n	8025a18 <_vfiprintf_r+0x1e4>
 8025a3e:	bf00      	nop
 8025a40:	0802b60c 	.word	0x0802b60c
 8025a44:	0802b5b4 	.word	0x0802b5b4
 8025a48:	0802b62c 	.word	0x0802b62c
 8025a4c:	0802b5ec 	.word	0x0802b5ec
 8025a50:	0802b5ba 	.word	0x0802b5ba
 8025a54:	0802b5be 	.word	0x0802b5be
 8025a58:	00000000 	.word	0x00000000
 8025a5c:	0802580f 	.word	0x0802580f

08025a60 <_printf_common>:
 8025a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025a64:	4691      	mov	r9, r2
 8025a66:	461f      	mov	r7, r3
 8025a68:	688a      	ldr	r2, [r1, #8]
 8025a6a:	690b      	ldr	r3, [r1, #16]
 8025a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025a70:	4293      	cmp	r3, r2
 8025a72:	bfb8      	it	lt
 8025a74:	4613      	movlt	r3, r2
 8025a76:	f8c9 3000 	str.w	r3, [r9]
 8025a7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025a7e:	4606      	mov	r6, r0
 8025a80:	460c      	mov	r4, r1
 8025a82:	b112      	cbz	r2, 8025a8a <_printf_common+0x2a>
 8025a84:	3301      	adds	r3, #1
 8025a86:	f8c9 3000 	str.w	r3, [r9]
 8025a8a:	6823      	ldr	r3, [r4, #0]
 8025a8c:	0699      	lsls	r1, r3, #26
 8025a8e:	bf42      	ittt	mi
 8025a90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025a94:	3302      	addmi	r3, #2
 8025a96:	f8c9 3000 	strmi.w	r3, [r9]
 8025a9a:	6825      	ldr	r5, [r4, #0]
 8025a9c:	f015 0506 	ands.w	r5, r5, #6
 8025aa0:	d107      	bne.n	8025ab2 <_printf_common+0x52>
 8025aa2:	f104 0a19 	add.w	sl, r4, #25
 8025aa6:	68e3      	ldr	r3, [r4, #12]
 8025aa8:	f8d9 2000 	ldr.w	r2, [r9]
 8025aac:	1a9b      	subs	r3, r3, r2
 8025aae:	42ab      	cmp	r3, r5
 8025ab0:	dc28      	bgt.n	8025b04 <_printf_common+0xa4>
 8025ab2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025ab6:	6822      	ldr	r2, [r4, #0]
 8025ab8:	3300      	adds	r3, #0
 8025aba:	bf18      	it	ne
 8025abc:	2301      	movne	r3, #1
 8025abe:	0692      	lsls	r2, r2, #26
 8025ac0:	d42d      	bmi.n	8025b1e <_printf_common+0xbe>
 8025ac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025ac6:	4639      	mov	r1, r7
 8025ac8:	4630      	mov	r0, r6
 8025aca:	47c0      	blx	r8
 8025acc:	3001      	adds	r0, #1
 8025ace:	d020      	beq.n	8025b12 <_printf_common+0xb2>
 8025ad0:	6823      	ldr	r3, [r4, #0]
 8025ad2:	68e5      	ldr	r5, [r4, #12]
 8025ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8025ad8:	f003 0306 	and.w	r3, r3, #6
 8025adc:	2b04      	cmp	r3, #4
 8025ade:	bf08      	it	eq
 8025ae0:	1aad      	subeq	r5, r5, r2
 8025ae2:	68a3      	ldr	r3, [r4, #8]
 8025ae4:	6922      	ldr	r2, [r4, #16]
 8025ae6:	bf0c      	ite	eq
 8025ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025aec:	2500      	movne	r5, #0
 8025aee:	4293      	cmp	r3, r2
 8025af0:	bfc4      	itt	gt
 8025af2:	1a9b      	subgt	r3, r3, r2
 8025af4:	18ed      	addgt	r5, r5, r3
 8025af6:	f04f 0900 	mov.w	r9, #0
 8025afa:	341a      	adds	r4, #26
 8025afc:	454d      	cmp	r5, r9
 8025afe:	d11a      	bne.n	8025b36 <_printf_common+0xd6>
 8025b00:	2000      	movs	r0, #0
 8025b02:	e008      	b.n	8025b16 <_printf_common+0xb6>
 8025b04:	2301      	movs	r3, #1
 8025b06:	4652      	mov	r2, sl
 8025b08:	4639      	mov	r1, r7
 8025b0a:	4630      	mov	r0, r6
 8025b0c:	47c0      	blx	r8
 8025b0e:	3001      	adds	r0, #1
 8025b10:	d103      	bne.n	8025b1a <_printf_common+0xba>
 8025b12:	f04f 30ff 	mov.w	r0, #4294967295
 8025b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025b1a:	3501      	adds	r5, #1
 8025b1c:	e7c3      	b.n	8025aa6 <_printf_common+0x46>
 8025b1e:	18e1      	adds	r1, r4, r3
 8025b20:	1c5a      	adds	r2, r3, #1
 8025b22:	2030      	movs	r0, #48	; 0x30
 8025b24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025b28:	4422      	add	r2, r4
 8025b2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025b32:	3302      	adds	r3, #2
 8025b34:	e7c5      	b.n	8025ac2 <_printf_common+0x62>
 8025b36:	2301      	movs	r3, #1
 8025b38:	4622      	mov	r2, r4
 8025b3a:	4639      	mov	r1, r7
 8025b3c:	4630      	mov	r0, r6
 8025b3e:	47c0      	blx	r8
 8025b40:	3001      	adds	r0, #1
 8025b42:	d0e6      	beq.n	8025b12 <_printf_common+0xb2>
 8025b44:	f109 0901 	add.w	r9, r9, #1
 8025b48:	e7d8      	b.n	8025afc <_printf_common+0x9c>
	...

08025b4c <_printf_i>:
 8025b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025b50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8025b54:	460c      	mov	r4, r1
 8025b56:	7e09      	ldrb	r1, [r1, #24]
 8025b58:	b085      	sub	sp, #20
 8025b5a:	296e      	cmp	r1, #110	; 0x6e
 8025b5c:	4617      	mov	r7, r2
 8025b5e:	4606      	mov	r6, r0
 8025b60:	4698      	mov	r8, r3
 8025b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025b64:	f000 80b3 	beq.w	8025cce <_printf_i+0x182>
 8025b68:	d822      	bhi.n	8025bb0 <_printf_i+0x64>
 8025b6a:	2963      	cmp	r1, #99	; 0x63
 8025b6c:	d036      	beq.n	8025bdc <_printf_i+0x90>
 8025b6e:	d80a      	bhi.n	8025b86 <_printf_i+0x3a>
 8025b70:	2900      	cmp	r1, #0
 8025b72:	f000 80b9 	beq.w	8025ce8 <_printf_i+0x19c>
 8025b76:	2958      	cmp	r1, #88	; 0x58
 8025b78:	f000 8083 	beq.w	8025c82 <_printf_i+0x136>
 8025b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025b80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025b84:	e032      	b.n	8025bec <_printf_i+0xa0>
 8025b86:	2964      	cmp	r1, #100	; 0x64
 8025b88:	d001      	beq.n	8025b8e <_printf_i+0x42>
 8025b8a:	2969      	cmp	r1, #105	; 0x69
 8025b8c:	d1f6      	bne.n	8025b7c <_printf_i+0x30>
 8025b8e:	6820      	ldr	r0, [r4, #0]
 8025b90:	6813      	ldr	r3, [r2, #0]
 8025b92:	0605      	lsls	r5, r0, #24
 8025b94:	f103 0104 	add.w	r1, r3, #4
 8025b98:	d52a      	bpl.n	8025bf0 <_printf_i+0xa4>
 8025b9a:	681b      	ldr	r3, [r3, #0]
 8025b9c:	6011      	str	r1, [r2, #0]
 8025b9e:	2b00      	cmp	r3, #0
 8025ba0:	da03      	bge.n	8025baa <_printf_i+0x5e>
 8025ba2:	222d      	movs	r2, #45	; 0x2d
 8025ba4:	425b      	negs	r3, r3
 8025ba6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025baa:	486f      	ldr	r0, [pc, #444]	; (8025d68 <_printf_i+0x21c>)
 8025bac:	220a      	movs	r2, #10
 8025bae:	e039      	b.n	8025c24 <_printf_i+0xd8>
 8025bb0:	2973      	cmp	r1, #115	; 0x73
 8025bb2:	f000 809d 	beq.w	8025cf0 <_printf_i+0x1a4>
 8025bb6:	d808      	bhi.n	8025bca <_printf_i+0x7e>
 8025bb8:	296f      	cmp	r1, #111	; 0x6f
 8025bba:	d020      	beq.n	8025bfe <_printf_i+0xb2>
 8025bbc:	2970      	cmp	r1, #112	; 0x70
 8025bbe:	d1dd      	bne.n	8025b7c <_printf_i+0x30>
 8025bc0:	6823      	ldr	r3, [r4, #0]
 8025bc2:	f043 0320 	orr.w	r3, r3, #32
 8025bc6:	6023      	str	r3, [r4, #0]
 8025bc8:	e003      	b.n	8025bd2 <_printf_i+0x86>
 8025bca:	2975      	cmp	r1, #117	; 0x75
 8025bcc:	d017      	beq.n	8025bfe <_printf_i+0xb2>
 8025bce:	2978      	cmp	r1, #120	; 0x78
 8025bd0:	d1d4      	bne.n	8025b7c <_printf_i+0x30>
 8025bd2:	2378      	movs	r3, #120	; 0x78
 8025bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025bd8:	4864      	ldr	r0, [pc, #400]	; (8025d6c <_printf_i+0x220>)
 8025bda:	e055      	b.n	8025c88 <_printf_i+0x13c>
 8025bdc:	6813      	ldr	r3, [r2, #0]
 8025bde:	1d19      	adds	r1, r3, #4
 8025be0:	681b      	ldr	r3, [r3, #0]
 8025be2:	6011      	str	r1, [r2, #0]
 8025be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025bec:	2301      	movs	r3, #1
 8025bee:	e08c      	b.n	8025d0a <_printf_i+0x1be>
 8025bf0:	681b      	ldr	r3, [r3, #0]
 8025bf2:	6011      	str	r1, [r2, #0]
 8025bf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8025bf8:	bf18      	it	ne
 8025bfa:	b21b      	sxthne	r3, r3
 8025bfc:	e7cf      	b.n	8025b9e <_printf_i+0x52>
 8025bfe:	6813      	ldr	r3, [r2, #0]
 8025c00:	6825      	ldr	r5, [r4, #0]
 8025c02:	1d18      	adds	r0, r3, #4
 8025c04:	6010      	str	r0, [r2, #0]
 8025c06:	0628      	lsls	r0, r5, #24
 8025c08:	d501      	bpl.n	8025c0e <_printf_i+0xc2>
 8025c0a:	681b      	ldr	r3, [r3, #0]
 8025c0c:	e002      	b.n	8025c14 <_printf_i+0xc8>
 8025c0e:	0668      	lsls	r0, r5, #25
 8025c10:	d5fb      	bpl.n	8025c0a <_printf_i+0xbe>
 8025c12:	881b      	ldrh	r3, [r3, #0]
 8025c14:	4854      	ldr	r0, [pc, #336]	; (8025d68 <_printf_i+0x21c>)
 8025c16:	296f      	cmp	r1, #111	; 0x6f
 8025c18:	bf14      	ite	ne
 8025c1a:	220a      	movne	r2, #10
 8025c1c:	2208      	moveq	r2, #8
 8025c1e:	2100      	movs	r1, #0
 8025c20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025c24:	6865      	ldr	r5, [r4, #4]
 8025c26:	60a5      	str	r5, [r4, #8]
 8025c28:	2d00      	cmp	r5, #0
 8025c2a:	f2c0 8095 	blt.w	8025d58 <_printf_i+0x20c>
 8025c2e:	6821      	ldr	r1, [r4, #0]
 8025c30:	f021 0104 	bic.w	r1, r1, #4
 8025c34:	6021      	str	r1, [r4, #0]
 8025c36:	2b00      	cmp	r3, #0
 8025c38:	d13d      	bne.n	8025cb6 <_printf_i+0x16a>
 8025c3a:	2d00      	cmp	r5, #0
 8025c3c:	f040 808e 	bne.w	8025d5c <_printf_i+0x210>
 8025c40:	4665      	mov	r5, ip
 8025c42:	2a08      	cmp	r2, #8
 8025c44:	d10b      	bne.n	8025c5e <_printf_i+0x112>
 8025c46:	6823      	ldr	r3, [r4, #0]
 8025c48:	07db      	lsls	r3, r3, #31
 8025c4a:	d508      	bpl.n	8025c5e <_printf_i+0x112>
 8025c4c:	6923      	ldr	r3, [r4, #16]
 8025c4e:	6862      	ldr	r2, [r4, #4]
 8025c50:	429a      	cmp	r2, r3
 8025c52:	bfde      	ittt	le
 8025c54:	2330      	movle	r3, #48	; 0x30
 8025c56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025c5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025c5e:	ebac 0305 	sub.w	r3, ip, r5
 8025c62:	6123      	str	r3, [r4, #16]
 8025c64:	f8cd 8000 	str.w	r8, [sp]
 8025c68:	463b      	mov	r3, r7
 8025c6a:	aa03      	add	r2, sp, #12
 8025c6c:	4621      	mov	r1, r4
 8025c6e:	4630      	mov	r0, r6
 8025c70:	f7ff fef6 	bl	8025a60 <_printf_common>
 8025c74:	3001      	adds	r0, #1
 8025c76:	d14d      	bne.n	8025d14 <_printf_i+0x1c8>
 8025c78:	f04f 30ff 	mov.w	r0, #4294967295
 8025c7c:	b005      	add	sp, #20
 8025c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025c82:	4839      	ldr	r0, [pc, #228]	; (8025d68 <_printf_i+0x21c>)
 8025c84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025c88:	6813      	ldr	r3, [r2, #0]
 8025c8a:	6821      	ldr	r1, [r4, #0]
 8025c8c:	1d1d      	adds	r5, r3, #4
 8025c8e:	681b      	ldr	r3, [r3, #0]
 8025c90:	6015      	str	r5, [r2, #0]
 8025c92:	060a      	lsls	r2, r1, #24
 8025c94:	d50b      	bpl.n	8025cae <_printf_i+0x162>
 8025c96:	07ca      	lsls	r2, r1, #31
 8025c98:	bf44      	itt	mi
 8025c9a:	f041 0120 	orrmi.w	r1, r1, #32
 8025c9e:	6021      	strmi	r1, [r4, #0]
 8025ca0:	b91b      	cbnz	r3, 8025caa <_printf_i+0x15e>
 8025ca2:	6822      	ldr	r2, [r4, #0]
 8025ca4:	f022 0220 	bic.w	r2, r2, #32
 8025ca8:	6022      	str	r2, [r4, #0]
 8025caa:	2210      	movs	r2, #16
 8025cac:	e7b7      	b.n	8025c1e <_printf_i+0xd2>
 8025cae:	064d      	lsls	r5, r1, #25
 8025cb0:	bf48      	it	mi
 8025cb2:	b29b      	uxthmi	r3, r3
 8025cb4:	e7ef      	b.n	8025c96 <_printf_i+0x14a>
 8025cb6:	4665      	mov	r5, ip
 8025cb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8025cbc:	fb02 3311 	mls	r3, r2, r1, r3
 8025cc0:	5cc3      	ldrb	r3, [r0, r3]
 8025cc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025cc6:	460b      	mov	r3, r1
 8025cc8:	2900      	cmp	r1, #0
 8025cca:	d1f5      	bne.n	8025cb8 <_printf_i+0x16c>
 8025ccc:	e7b9      	b.n	8025c42 <_printf_i+0xf6>
 8025cce:	6813      	ldr	r3, [r2, #0]
 8025cd0:	6825      	ldr	r5, [r4, #0]
 8025cd2:	6961      	ldr	r1, [r4, #20]
 8025cd4:	1d18      	adds	r0, r3, #4
 8025cd6:	6010      	str	r0, [r2, #0]
 8025cd8:	0628      	lsls	r0, r5, #24
 8025cda:	681b      	ldr	r3, [r3, #0]
 8025cdc:	d501      	bpl.n	8025ce2 <_printf_i+0x196>
 8025cde:	6019      	str	r1, [r3, #0]
 8025ce0:	e002      	b.n	8025ce8 <_printf_i+0x19c>
 8025ce2:	066a      	lsls	r2, r5, #25
 8025ce4:	d5fb      	bpl.n	8025cde <_printf_i+0x192>
 8025ce6:	8019      	strh	r1, [r3, #0]
 8025ce8:	2300      	movs	r3, #0
 8025cea:	6123      	str	r3, [r4, #16]
 8025cec:	4665      	mov	r5, ip
 8025cee:	e7b9      	b.n	8025c64 <_printf_i+0x118>
 8025cf0:	6813      	ldr	r3, [r2, #0]
 8025cf2:	1d19      	adds	r1, r3, #4
 8025cf4:	6011      	str	r1, [r2, #0]
 8025cf6:	681d      	ldr	r5, [r3, #0]
 8025cf8:	6862      	ldr	r2, [r4, #4]
 8025cfa:	2100      	movs	r1, #0
 8025cfc:	4628      	mov	r0, r5
 8025cfe:	f7da fa87 	bl	8000210 <memchr>
 8025d02:	b108      	cbz	r0, 8025d08 <_printf_i+0x1bc>
 8025d04:	1b40      	subs	r0, r0, r5
 8025d06:	6060      	str	r0, [r4, #4]
 8025d08:	6863      	ldr	r3, [r4, #4]
 8025d0a:	6123      	str	r3, [r4, #16]
 8025d0c:	2300      	movs	r3, #0
 8025d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025d12:	e7a7      	b.n	8025c64 <_printf_i+0x118>
 8025d14:	6923      	ldr	r3, [r4, #16]
 8025d16:	462a      	mov	r2, r5
 8025d18:	4639      	mov	r1, r7
 8025d1a:	4630      	mov	r0, r6
 8025d1c:	47c0      	blx	r8
 8025d1e:	3001      	adds	r0, #1
 8025d20:	d0aa      	beq.n	8025c78 <_printf_i+0x12c>
 8025d22:	6823      	ldr	r3, [r4, #0]
 8025d24:	079b      	lsls	r3, r3, #30
 8025d26:	d413      	bmi.n	8025d50 <_printf_i+0x204>
 8025d28:	68e0      	ldr	r0, [r4, #12]
 8025d2a:	9b03      	ldr	r3, [sp, #12]
 8025d2c:	4298      	cmp	r0, r3
 8025d2e:	bfb8      	it	lt
 8025d30:	4618      	movlt	r0, r3
 8025d32:	e7a3      	b.n	8025c7c <_printf_i+0x130>
 8025d34:	2301      	movs	r3, #1
 8025d36:	464a      	mov	r2, r9
 8025d38:	4639      	mov	r1, r7
 8025d3a:	4630      	mov	r0, r6
 8025d3c:	47c0      	blx	r8
 8025d3e:	3001      	adds	r0, #1
 8025d40:	d09a      	beq.n	8025c78 <_printf_i+0x12c>
 8025d42:	3501      	adds	r5, #1
 8025d44:	68e3      	ldr	r3, [r4, #12]
 8025d46:	9a03      	ldr	r2, [sp, #12]
 8025d48:	1a9b      	subs	r3, r3, r2
 8025d4a:	42ab      	cmp	r3, r5
 8025d4c:	dcf2      	bgt.n	8025d34 <_printf_i+0x1e8>
 8025d4e:	e7eb      	b.n	8025d28 <_printf_i+0x1dc>
 8025d50:	2500      	movs	r5, #0
 8025d52:	f104 0919 	add.w	r9, r4, #25
 8025d56:	e7f5      	b.n	8025d44 <_printf_i+0x1f8>
 8025d58:	2b00      	cmp	r3, #0
 8025d5a:	d1ac      	bne.n	8025cb6 <_printf_i+0x16a>
 8025d5c:	7803      	ldrb	r3, [r0, #0]
 8025d5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025d62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025d66:	e76c      	b.n	8025c42 <_printf_i+0xf6>
 8025d68:	0802b5c5 	.word	0x0802b5c5
 8025d6c:	0802b5d6 	.word	0x0802b5d6

08025d70 <_sbrk_r>:
 8025d70:	b538      	push	{r3, r4, r5, lr}
 8025d72:	4c06      	ldr	r4, [pc, #24]	; (8025d8c <_sbrk_r+0x1c>)
 8025d74:	2300      	movs	r3, #0
 8025d76:	4605      	mov	r5, r0
 8025d78:	4608      	mov	r0, r1
 8025d7a:	6023      	str	r3, [r4, #0]
 8025d7c:	f7dd fcec 	bl	8003758 <_sbrk>
 8025d80:	1c43      	adds	r3, r0, #1
 8025d82:	d102      	bne.n	8025d8a <_sbrk_r+0x1a>
 8025d84:	6823      	ldr	r3, [r4, #0]
 8025d86:	b103      	cbz	r3, 8025d8a <_sbrk_r+0x1a>
 8025d88:	602b      	str	r3, [r5, #0]
 8025d8a:	bd38      	pop	{r3, r4, r5, pc}
 8025d8c:	2000ca50 	.word	0x2000ca50

08025d90 <_raise_r>:
 8025d90:	291f      	cmp	r1, #31
 8025d92:	b538      	push	{r3, r4, r5, lr}
 8025d94:	4604      	mov	r4, r0
 8025d96:	460d      	mov	r5, r1
 8025d98:	d904      	bls.n	8025da4 <_raise_r+0x14>
 8025d9a:	2316      	movs	r3, #22
 8025d9c:	6003      	str	r3, [r0, #0]
 8025d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8025da2:	bd38      	pop	{r3, r4, r5, pc}
 8025da4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025da6:	b112      	cbz	r2, 8025dae <_raise_r+0x1e>
 8025da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025dac:	b94b      	cbnz	r3, 8025dc2 <_raise_r+0x32>
 8025dae:	4620      	mov	r0, r4
 8025db0:	f000 f830 	bl	8025e14 <_getpid_r>
 8025db4:	462a      	mov	r2, r5
 8025db6:	4601      	mov	r1, r0
 8025db8:	4620      	mov	r0, r4
 8025dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025dbe:	f000 b817 	b.w	8025df0 <_kill_r>
 8025dc2:	2b01      	cmp	r3, #1
 8025dc4:	d00a      	beq.n	8025ddc <_raise_r+0x4c>
 8025dc6:	1c59      	adds	r1, r3, #1
 8025dc8:	d103      	bne.n	8025dd2 <_raise_r+0x42>
 8025dca:	2316      	movs	r3, #22
 8025dcc:	6003      	str	r3, [r0, #0]
 8025dce:	2001      	movs	r0, #1
 8025dd0:	e7e7      	b.n	8025da2 <_raise_r+0x12>
 8025dd2:	2400      	movs	r4, #0
 8025dd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025dd8:	4628      	mov	r0, r5
 8025dda:	4798      	blx	r3
 8025ddc:	2000      	movs	r0, #0
 8025dde:	e7e0      	b.n	8025da2 <_raise_r+0x12>

08025de0 <raise>:
 8025de0:	4b02      	ldr	r3, [pc, #8]	; (8025dec <raise+0xc>)
 8025de2:	4601      	mov	r1, r0
 8025de4:	6818      	ldr	r0, [r3, #0]
 8025de6:	f7ff bfd3 	b.w	8025d90 <_raise_r>
 8025dea:	bf00      	nop
 8025dec:	200000ac 	.word	0x200000ac

08025df0 <_kill_r>:
 8025df0:	b538      	push	{r3, r4, r5, lr}
 8025df2:	4c07      	ldr	r4, [pc, #28]	; (8025e10 <_kill_r+0x20>)
 8025df4:	2300      	movs	r3, #0
 8025df6:	4605      	mov	r5, r0
 8025df8:	4608      	mov	r0, r1
 8025dfa:	4611      	mov	r1, r2
 8025dfc:	6023      	str	r3, [r4, #0]
 8025dfe:	f7dd fc23 	bl	8003648 <_kill>
 8025e02:	1c43      	adds	r3, r0, #1
 8025e04:	d102      	bne.n	8025e0c <_kill_r+0x1c>
 8025e06:	6823      	ldr	r3, [r4, #0]
 8025e08:	b103      	cbz	r3, 8025e0c <_kill_r+0x1c>
 8025e0a:	602b      	str	r3, [r5, #0]
 8025e0c:	bd38      	pop	{r3, r4, r5, pc}
 8025e0e:	bf00      	nop
 8025e10:	2000ca50 	.word	0x2000ca50

08025e14 <_getpid_r>:
 8025e14:	f7dd bc10 	b.w	8003638 <_getpid>

08025e18 <__swbuf_r>:
 8025e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e1a:	460e      	mov	r6, r1
 8025e1c:	4614      	mov	r4, r2
 8025e1e:	4605      	mov	r5, r0
 8025e20:	b118      	cbz	r0, 8025e2a <__swbuf_r+0x12>
 8025e22:	6983      	ldr	r3, [r0, #24]
 8025e24:	b90b      	cbnz	r3, 8025e2a <__swbuf_r+0x12>
 8025e26:	f000 fa0b 	bl	8026240 <__sinit>
 8025e2a:	4b21      	ldr	r3, [pc, #132]	; (8025eb0 <__swbuf_r+0x98>)
 8025e2c:	429c      	cmp	r4, r3
 8025e2e:	d12a      	bne.n	8025e86 <__swbuf_r+0x6e>
 8025e30:	686c      	ldr	r4, [r5, #4]
 8025e32:	69a3      	ldr	r3, [r4, #24]
 8025e34:	60a3      	str	r3, [r4, #8]
 8025e36:	89a3      	ldrh	r3, [r4, #12]
 8025e38:	071a      	lsls	r2, r3, #28
 8025e3a:	d52e      	bpl.n	8025e9a <__swbuf_r+0x82>
 8025e3c:	6923      	ldr	r3, [r4, #16]
 8025e3e:	b363      	cbz	r3, 8025e9a <__swbuf_r+0x82>
 8025e40:	6923      	ldr	r3, [r4, #16]
 8025e42:	6820      	ldr	r0, [r4, #0]
 8025e44:	1ac0      	subs	r0, r0, r3
 8025e46:	6963      	ldr	r3, [r4, #20]
 8025e48:	b2f6      	uxtb	r6, r6
 8025e4a:	4283      	cmp	r3, r0
 8025e4c:	4637      	mov	r7, r6
 8025e4e:	dc04      	bgt.n	8025e5a <__swbuf_r+0x42>
 8025e50:	4621      	mov	r1, r4
 8025e52:	4628      	mov	r0, r5
 8025e54:	f000 f98a 	bl	802616c <_fflush_r>
 8025e58:	bb28      	cbnz	r0, 8025ea6 <__swbuf_r+0x8e>
 8025e5a:	68a3      	ldr	r3, [r4, #8]
 8025e5c:	3b01      	subs	r3, #1
 8025e5e:	60a3      	str	r3, [r4, #8]
 8025e60:	6823      	ldr	r3, [r4, #0]
 8025e62:	1c5a      	adds	r2, r3, #1
 8025e64:	6022      	str	r2, [r4, #0]
 8025e66:	701e      	strb	r6, [r3, #0]
 8025e68:	6963      	ldr	r3, [r4, #20]
 8025e6a:	3001      	adds	r0, #1
 8025e6c:	4283      	cmp	r3, r0
 8025e6e:	d004      	beq.n	8025e7a <__swbuf_r+0x62>
 8025e70:	89a3      	ldrh	r3, [r4, #12]
 8025e72:	07db      	lsls	r3, r3, #31
 8025e74:	d519      	bpl.n	8025eaa <__swbuf_r+0x92>
 8025e76:	2e0a      	cmp	r6, #10
 8025e78:	d117      	bne.n	8025eaa <__swbuf_r+0x92>
 8025e7a:	4621      	mov	r1, r4
 8025e7c:	4628      	mov	r0, r5
 8025e7e:	f000 f975 	bl	802616c <_fflush_r>
 8025e82:	b190      	cbz	r0, 8025eaa <__swbuf_r+0x92>
 8025e84:	e00f      	b.n	8025ea6 <__swbuf_r+0x8e>
 8025e86:	4b0b      	ldr	r3, [pc, #44]	; (8025eb4 <__swbuf_r+0x9c>)
 8025e88:	429c      	cmp	r4, r3
 8025e8a:	d101      	bne.n	8025e90 <__swbuf_r+0x78>
 8025e8c:	68ac      	ldr	r4, [r5, #8]
 8025e8e:	e7d0      	b.n	8025e32 <__swbuf_r+0x1a>
 8025e90:	4b09      	ldr	r3, [pc, #36]	; (8025eb8 <__swbuf_r+0xa0>)
 8025e92:	429c      	cmp	r4, r3
 8025e94:	bf08      	it	eq
 8025e96:	68ec      	ldreq	r4, [r5, #12]
 8025e98:	e7cb      	b.n	8025e32 <__swbuf_r+0x1a>
 8025e9a:	4621      	mov	r1, r4
 8025e9c:	4628      	mov	r0, r5
 8025e9e:	f000 f80d 	bl	8025ebc <__swsetup_r>
 8025ea2:	2800      	cmp	r0, #0
 8025ea4:	d0cc      	beq.n	8025e40 <__swbuf_r+0x28>
 8025ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8025eaa:	4638      	mov	r0, r7
 8025eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025eae:	bf00      	nop
 8025eb0:	0802b60c 	.word	0x0802b60c
 8025eb4:	0802b62c 	.word	0x0802b62c
 8025eb8:	0802b5ec 	.word	0x0802b5ec

08025ebc <__swsetup_r>:
 8025ebc:	4b32      	ldr	r3, [pc, #200]	; (8025f88 <__swsetup_r+0xcc>)
 8025ebe:	b570      	push	{r4, r5, r6, lr}
 8025ec0:	681d      	ldr	r5, [r3, #0]
 8025ec2:	4606      	mov	r6, r0
 8025ec4:	460c      	mov	r4, r1
 8025ec6:	b125      	cbz	r5, 8025ed2 <__swsetup_r+0x16>
 8025ec8:	69ab      	ldr	r3, [r5, #24]
 8025eca:	b913      	cbnz	r3, 8025ed2 <__swsetup_r+0x16>
 8025ecc:	4628      	mov	r0, r5
 8025ece:	f000 f9b7 	bl	8026240 <__sinit>
 8025ed2:	4b2e      	ldr	r3, [pc, #184]	; (8025f8c <__swsetup_r+0xd0>)
 8025ed4:	429c      	cmp	r4, r3
 8025ed6:	d10f      	bne.n	8025ef8 <__swsetup_r+0x3c>
 8025ed8:	686c      	ldr	r4, [r5, #4]
 8025eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ede:	b29a      	uxth	r2, r3
 8025ee0:	0715      	lsls	r5, r2, #28
 8025ee2:	d42c      	bmi.n	8025f3e <__swsetup_r+0x82>
 8025ee4:	06d0      	lsls	r0, r2, #27
 8025ee6:	d411      	bmi.n	8025f0c <__swsetup_r+0x50>
 8025ee8:	2209      	movs	r2, #9
 8025eea:	6032      	str	r2, [r6, #0]
 8025eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025ef0:	81a3      	strh	r3, [r4, #12]
 8025ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8025ef6:	e03e      	b.n	8025f76 <__swsetup_r+0xba>
 8025ef8:	4b25      	ldr	r3, [pc, #148]	; (8025f90 <__swsetup_r+0xd4>)
 8025efa:	429c      	cmp	r4, r3
 8025efc:	d101      	bne.n	8025f02 <__swsetup_r+0x46>
 8025efe:	68ac      	ldr	r4, [r5, #8]
 8025f00:	e7eb      	b.n	8025eda <__swsetup_r+0x1e>
 8025f02:	4b24      	ldr	r3, [pc, #144]	; (8025f94 <__swsetup_r+0xd8>)
 8025f04:	429c      	cmp	r4, r3
 8025f06:	bf08      	it	eq
 8025f08:	68ec      	ldreq	r4, [r5, #12]
 8025f0a:	e7e6      	b.n	8025eda <__swsetup_r+0x1e>
 8025f0c:	0751      	lsls	r1, r2, #29
 8025f0e:	d512      	bpl.n	8025f36 <__swsetup_r+0x7a>
 8025f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025f12:	b141      	cbz	r1, 8025f26 <__swsetup_r+0x6a>
 8025f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025f18:	4299      	cmp	r1, r3
 8025f1a:	d002      	beq.n	8025f22 <__swsetup_r+0x66>
 8025f1c:	4630      	mov	r0, r6
 8025f1e:	f7ff fbb7 	bl	8025690 <_free_r>
 8025f22:	2300      	movs	r3, #0
 8025f24:	6363      	str	r3, [r4, #52]	; 0x34
 8025f26:	89a3      	ldrh	r3, [r4, #12]
 8025f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025f2c:	81a3      	strh	r3, [r4, #12]
 8025f2e:	2300      	movs	r3, #0
 8025f30:	6063      	str	r3, [r4, #4]
 8025f32:	6923      	ldr	r3, [r4, #16]
 8025f34:	6023      	str	r3, [r4, #0]
 8025f36:	89a3      	ldrh	r3, [r4, #12]
 8025f38:	f043 0308 	orr.w	r3, r3, #8
 8025f3c:	81a3      	strh	r3, [r4, #12]
 8025f3e:	6923      	ldr	r3, [r4, #16]
 8025f40:	b94b      	cbnz	r3, 8025f56 <__swsetup_r+0x9a>
 8025f42:	89a3      	ldrh	r3, [r4, #12]
 8025f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025f4c:	d003      	beq.n	8025f56 <__swsetup_r+0x9a>
 8025f4e:	4621      	mov	r1, r4
 8025f50:	4630      	mov	r0, r6
 8025f52:	f000 fa23 	bl	802639c <__smakebuf_r>
 8025f56:	89a2      	ldrh	r2, [r4, #12]
 8025f58:	f012 0301 	ands.w	r3, r2, #1
 8025f5c:	d00c      	beq.n	8025f78 <__swsetup_r+0xbc>
 8025f5e:	2300      	movs	r3, #0
 8025f60:	60a3      	str	r3, [r4, #8]
 8025f62:	6963      	ldr	r3, [r4, #20]
 8025f64:	425b      	negs	r3, r3
 8025f66:	61a3      	str	r3, [r4, #24]
 8025f68:	6923      	ldr	r3, [r4, #16]
 8025f6a:	b953      	cbnz	r3, 8025f82 <__swsetup_r+0xc6>
 8025f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025f70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8025f74:	d1ba      	bne.n	8025eec <__swsetup_r+0x30>
 8025f76:	bd70      	pop	{r4, r5, r6, pc}
 8025f78:	0792      	lsls	r2, r2, #30
 8025f7a:	bf58      	it	pl
 8025f7c:	6963      	ldrpl	r3, [r4, #20]
 8025f7e:	60a3      	str	r3, [r4, #8]
 8025f80:	e7f2      	b.n	8025f68 <__swsetup_r+0xac>
 8025f82:	2000      	movs	r0, #0
 8025f84:	e7f7      	b.n	8025f76 <__swsetup_r+0xba>
 8025f86:	bf00      	nop
 8025f88:	200000ac 	.word	0x200000ac
 8025f8c:	0802b60c 	.word	0x0802b60c
 8025f90:	0802b62c 	.word	0x0802b62c
 8025f94:	0802b5ec 	.word	0x0802b5ec

08025f98 <__register_exitproc>:
 8025f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025f9c:	4d2c      	ldr	r5, [pc, #176]	; (8026050 <__register_exitproc+0xb8>)
 8025f9e:	682c      	ldr	r4, [r5, #0]
 8025fa0:	4607      	mov	r7, r0
 8025fa2:	460e      	mov	r6, r1
 8025fa4:	4691      	mov	r9, r2
 8025fa6:	4698      	mov	r8, r3
 8025fa8:	b934      	cbnz	r4, 8025fb8 <__register_exitproc+0x20>
 8025faa:	4b2a      	ldr	r3, [pc, #168]	; (8026054 <__register_exitproc+0xbc>)
 8025fac:	4c2a      	ldr	r4, [pc, #168]	; (8026058 <__register_exitproc+0xc0>)
 8025fae:	602c      	str	r4, [r5, #0]
 8025fb0:	b113      	cbz	r3, 8025fb8 <__register_exitproc+0x20>
 8025fb2:	681b      	ldr	r3, [r3, #0]
 8025fb4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025fb8:	6863      	ldr	r3, [r4, #4]
 8025fba:	2b1f      	cmp	r3, #31
 8025fbc:	dd3d      	ble.n	802603a <__register_exitproc+0xa2>
 8025fbe:	4b27      	ldr	r3, [pc, #156]	; (802605c <__register_exitproc+0xc4>)
 8025fc0:	b91b      	cbnz	r3, 8025fca <__register_exitproc+0x32>
 8025fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8025fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025fca:	208c      	movs	r0, #140	; 0x8c
 8025fcc:	f7ff fb3c 	bl	8025648 <malloc>
 8025fd0:	4604      	mov	r4, r0
 8025fd2:	2800      	cmp	r0, #0
 8025fd4:	d0f5      	beq.n	8025fc2 <__register_exitproc+0x2a>
 8025fd6:	2300      	movs	r3, #0
 8025fd8:	682a      	ldr	r2, [r5, #0]
 8025fda:	6002      	str	r2, [r0, #0]
 8025fdc:	6043      	str	r3, [r0, #4]
 8025fde:	6028      	str	r0, [r5, #0]
 8025fe0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8025fe4:	b30f      	cbz	r7, 802602a <__register_exitproc+0x92>
 8025fe6:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025fea:	f7ff fb2d 	bl	8025648 <malloc>
 8025fee:	2800      	cmp	r0, #0
 8025ff0:	d0e7      	beq.n	8025fc2 <__register_exitproc+0x2a>
 8025ff2:	2300      	movs	r3, #0
 8025ff4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025ff8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8025ffc:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026000:	6862      	ldr	r2, [r4, #4]
 8026002:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8026006:	2301      	movs	r3, #1
 8026008:	4093      	lsls	r3, r2
 802600a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802600e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8026012:	431a      	orrs	r2, r3
 8026014:	2f02      	cmp	r7, #2
 8026016:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802601a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802601e:	bf02      	ittt	eq
 8026020:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8026024:	4313      	orreq	r3, r2
 8026026:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802602a:	6863      	ldr	r3, [r4, #4]
 802602c:	1c5a      	adds	r2, r3, #1
 802602e:	3302      	adds	r3, #2
 8026030:	6062      	str	r2, [r4, #4]
 8026032:	2000      	movs	r0, #0
 8026034:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8026038:	e7c5      	b.n	8025fc6 <__register_exitproc+0x2e>
 802603a:	2f00      	cmp	r7, #0
 802603c:	d0f5      	beq.n	802602a <__register_exitproc+0x92>
 802603e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026042:	2800      	cmp	r0, #0
 8026044:	d1dc      	bne.n	8026000 <__register_exitproc+0x68>
 8026046:	4b05      	ldr	r3, [pc, #20]	; (802605c <__register_exitproc+0xc4>)
 8026048:	2b00      	cmp	r3, #0
 802604a:	d0ba      	beq.n	8025fc2 <__register_exitproc+0x2a>
 802604c:	e7cb      	b.n	8025fe6 <__register_exitproc+0x4e>
 802604e:	bf00      	nop
 8026050:	2000be48 	.word	0x2000be48
 8026054:	0802b5e8 	.word	0x0802b5e8
 8026058:	2000bdbc 	.word	0x2000bdbc
 802605c:	08025649 	.word	0x08025649

08026060 <__sflush_r>:
 8026060:	898a      	ldrh	r2, [r1, #12]
 8026062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026066:	4605      	mov	r5, r0
 8026068:	0710      	lsls	r0, r2, #28
 802606a:	460c      	mov	r4, r1
 802606c:	d458      	bmi.n	8026120 <__sflush_r+0xc0>
 802606e:	684b      	ldr	r3, [r1, #4]
 8026070:	2b00      	cmp	r3, #0
 8026072:	dc05      	bgt.n	8026080 <__sflush_r+0x20>
 8026074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026076:	2b00      	cmp	r3, #0
 8026078:	dc02      	bgt.n	8026080 <__sflush_r+0x20>
 802607a:	2000      	movs	r0, #0
 802607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026082:	2e00      	cmp	r6, #0
 8026084:	d0f9      	beq.n	802607a <__sflush_r+0x1a>
 8026086:	2300      	movs	r3, #0
 8026088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802608c:	682f      	ldr	r7, [r5, #0]
 802608e:	6a21      	ldr	r1, [r4, #32]
 8026090:	602b      	str	r3, [r5, #0]
 8026092:	d032      	beq.n	80260fa <__sflush_r+0x9a>
 8026094:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026096:	89a3      	ldrh	r3, [r4, #12]
 8026098:	075a      	lsls	r2, r3, #29
 802609a:	d505      	bpl.n	80260a8 <__sflush_r+0x48>
 802609c:	6863      	ldr	r3, [r4, #4]
 802609e:	1ac0      	subs	r0, r0, r3
 80260a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80260a2:	b10b      	cbz	r3, 80260a8 <__sflush_r+0x48>
 80260a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80260a6:	1ac0      	subs	r0, r0, r3
 80260a8:	2300      	movs	r3, #0
 80260aa:	4602      	mov	r2, r0
 80260ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80260ae:	6a21      	ldr	r1, [r4, #32]
 80260b0:	4628      	mov	r0, r5
 80260b2:	47b0      	blx	r6
 80260b4:	1c43      	adds	r3, r0, #1
 80260b6:	89a3      	ldrh	r3, [r4, #12]
 80260b8:	d106      	bne.n	80260c8 <__sflush_r+0x68>
 80260ba:	6829      	ldr	r1, [r5, #0]
 80260bc:	291d      	cmp	r1, #29
 80260be:	d848      	bhi.n	8026152 <__sflush_r+0xf2>
 80260c0:	4a29      	ldr	r2, [pc, #164]	; (8026168 <__sflush_r+0x108>)
 80260c2:	40ca      	lsrs	r2, r1
 80260c4:	07d6      	lsls	r6, r2, #31
 80260c6:	d544      	bpl.n	8026152 <__sflush_r+0xf2>
 80260c8:	2200      	movs	r2, #0
 80260ca:	6062      	str	r2, [r4, #4]
 80260cc:	04d9      	lsls	r1, r3, #19
 80260ce:	6922      	ldr	r2, [r4, #16]
 80260d0:	6022      	str	r2, [r4, #0]
 80260d2:	d504      	bpl.n	80260de <__sflush_r+0x7e>
 80260d4:	1c42      	adds	r2, r0, #1
 80260d6:	d101      	bne.n	80260dc <__sflush_r+0x7c>
 80260d8:	682b      	ldr	r3, [r5, #0]
 80260da:	b903      	cbnz	r3, 80260de <__sflush_r+0x7e>
 80260dc:	6560      	str	r0, [r4, #84]	; 0x54
 80260de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80260e0:	602f      	str	r7, [r5, #0]
 80260e2:	2900      	cmp	r1, #0
 80260e4:	d0c9      	beq.n	802607a <__sflush_r+0x1a>
 80260e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80260ea:	4299      	cmp	r1, r3
 80260ec:	d002      	beq.n	80260f4 <__sflush_r+0x94>
 80260ee:	4628      	mov	r0, r5
 80260f0:	f7ff face 	bl	8025690 <_free_r>
 80260f4:	2000      	movs	r0, #0
 80260f6:	6360      	str	r0, [r4, #52]	; 0x34
 80260f8:	e7c0      	b.n	802607c <__sflush_r+0x1c>
 80260fa:	2301      	movs	r3, #1
 80260fc:	4628      	mov	r0, r5
 80260fe:	47b0      	blx	r6
 8026100:	1c41      	adds	r1, r0, #1
 8026102:	d1c8      	bne.n	8026096 <__sflush_r+0x36>
 8026104:	682b      	ldr	r3, [r5, #0]
 8026106:	2b00      	cmp	r3, #0
 8026108:	d0c5      	beq.n	8026096 <__sflush_r+0x36>
 802610a:	2b1d      	cmp	r3, #29
 802610c:	d001      	beq.n	8026112 <__sflush_r+0xb2>
 802610e:	2b16      	cmp	r3, #22
 8026110:	d101      	bne.n	8026116 <__sflush_r+0xb6>
 8026112:	602f      	str	r7, [r5, #0]
 8026114:	e7b1      	b.n	802607a <__sflush_r+0x1a>
 8026116:	89a3      	ldrh	r3, [r4, #12]
 8026118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802611c:	81a3      	strh	r3, [r4, #12]
 802611e:	e7ad      	b.n	802607c <__sflush_r+0x1c>
 8026120:	690f      	ldr	r7, [r1, #16]
 8026122:	2f00      	cmp	r7, #0
 8026124:	d0a9      	beq.n	802607a <__sflush_r+0x1a>
 8026126:	0793      	lsls	r3, r2, #30
 8026128:	680e      	ldr	r6, [r1, #0]
 802612a:	bf08      	it	eq
 802612c:	694b      	ldreq	r3, [r1, #20]
 802612e:	600f      	str	r7, [r1, #0]
 8026130:	bf18      	it	ne
 8026132:	2300      	movne	r3, #0
 8026134:	eba6 0807 	sub.w	r8, r6, r7
 8026138:	608b      	str	r3, [r1, #8]
 802613a:	f1b8 0f00 	cmp.w	r8, #0
 802613e:	dd9c      	ble.n	802607a <__sflush_r+0x1a>
 8026140:	4643      	mov	r3, r8
 8026142:	463a      	mov	r2, r7
 8026144:	6a21      	ldr	r1, [r4, #32]
 8026146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026148:	4628      	mov	r0, r5
 802614a:	47b0      	blx	r6
 802614c:	2800      	cmp	r0, #0
 802614e:	dc06      	bgt.n	802615e <__sflush_r+0xfe>
 8026150:	89a3      	ldrh	r3, [r4, #12]
 8026152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026156:	81a3      	strh	r3, [r4, #12]
 8026158:	f04f 30ff 	mov.w	r0, #4294967295
 802615c:	e78e      	b.n	802607c <__sflush_r+0x1c>
 802615e:	4407      	add	r7, r0
 8026160:	eba8 0800 	sub.w	r8, r8, r0
 8026164:	e7e9      	b.n	802613a <__sflush_r+0xda>
 8026166:	bf00      	nop
 8026168:	20400001 	.word	0x20400001

0802616c <_fflush_r>:
 802616c:	b538      	push	{r3, r4, r5, lr}
 802616e:	690b      	ldr	r3, [r1, #16]
 8026170:	4605      	mov	r5, r0
 8026172:	460c      	mov	r4, r1
 8026174:	b1db      	cbz	r3, 80261ae <_fflush_r+0x42>
 8026176:	b118      	cbz	r0, 8026180 <_fflush_r+0x14>
 8026178:	6983      	ldr	r3, [r0, #24]
 802617a:	b90b      	cbnz	r3, 8026180 <_fflush_r+0x14>
 802617c:	f000 f860 	bl	8026240 <__sinit>
 8026180:	4b0c      	ldr	r3, [pc, #48]	; (80261b4 <_fflush_r+0x48>)
 8026182:	429c      	cmp	r4, r3
 8026184:	d109      	bne.n	802619a <_fflush_r+0x2e>
 8026186:	686c      	ldr	r4, [r5, #4]
 8026188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802618c:	b17b      	cbz	r3, 80261ae <_fflush_r+0x42>
 802618e:	4621      	mov	r1, r4
 8026190:	4628      	mov	r0, r5
 8026192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026196:	f7ff bf63 	b.w	8026060 <__sflush_r>
 802619a:	4b07      	ldr	r3, [pc, #28]	; (80261b8 <_fflush_r+0x4c>)
 802619c:	429c      	cmp	r4, r3
 802619e:	d101      	bne.n	80261a4 <_fflush_r+0x38>
 80261a0:	68ac      	ldr	r4, [r5, #8]
 80261a2:	e7f1      	b.n	8026188 <_fflush_r+0x1c>
 80261a4:	4b05      	ldr	r3, [pc, #20]	; (80261bc <_fflush_r+0x50>)
 80261a6:	429c      	cmp	r4, r3
 80261a8:	bf08      	it	eq
 80261aa:	68ec      	ldreq	r4, [r5, #12]
 80261ac:	e7ec      	b.n	8026188 <_fflush_r+0x1c>
 80261ae:	2000      	movs	r0, #0
 80261b0:	bd38      	pop	{r3, r4, r5, pc}
 80261b2:	bf00      	nop
 80261b4:	0802b60c 	.word	0x0802b60c
 80261b8:	0802b62c 	.word	0x0802b62c
 80261bc:	0802b5ec 	.word	0x0802b5ec

080261c0 <std>:
 80261c0:	2300      	movs	r3, #0
 80261c2:	b510      	push	{r4, lr}
 80261c4:	4604      	mov	r4, r0
 80261c6:	e9c0 3300 	strd	r3, r3, [r0]
 80261ca:	6083      	str	r3, [r0, #8]
 80261cc:	8181      	strh	r1, [r0, #12]
 80261ce:	6643      	str	r3, [r0, #100]	; 0x64
 80261d0:	81c2      	strh	r2, [r0, #14]
 80261d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80261d6:	6183      	str	r3, [r0, #24]
 80261d8:	4619      	mov	r1, r3
 80261da:	2208      	movs	r2, #8
 80261dc:	305c      	adds	r0, #92	; 0x5c
 80261de:	f7ff fa4e 	bl	802567e <memset>
 80261e2:	4b05      	ldr	r3, [pc, #20]	; (80261f8 <std+0x38>)
 80261e4:	6263      	str	r3, [r4, #36]	; 0x24
 80261e6:	4b05      	ldr	r3, [pc, #20]	; (80261fc <std+0x3c>)
 80261e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80261ea:	4b05      	ldr	r3, [pc, #20]	; (8026200 <std+0x40>)
 80261ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80261ee:	4b05      	ldr	r3, [pc, #20]	; (8026204 <std+0x44>)
 80261f0:	6224      	str	r4, [r4, #32]
 80261f2:	6323      	str	r3, [r4, #48]	; 0x30
 80261f4:	bd10      	pop	{r4, pc}
 80261f6:	bf00      	nop
 80261f8:	08026421 	.word	0x08026421
 80261fc:	08026443 	.word	0x08026443
 8026200:	0802647b 	.word	0x0802647b
 8026204:	0802649f 	.word	0x0802649f

08026208 <_cleanup_r>:
 8026208:	4901      	ldr	r1, [pc, #4]	; (8026210 <_cleanup_r+0x8>)
 802620a:	f000 b885 	b.w	8026318 <_fwalk_reent>
 802620e:	bf00      	nop
 8026210:	0802616d 	.word	0x0802616d

08026214 <__sfmoreglue>:
 8026214:	b570      	push	{r4, r5, r6, lr}
 8026216:	1e4a      	subs	r2, r1, #1
 8026218:	2568      	movs	r5, #104	; 0x68
 802621a:	4355      	muls	r5, r2
 802621c:	460e      	mov	r6, r1
 802621e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026222:	f7ff fa83 	bl	802572c <_malloc_r>
 8026226:	4604      	mov	r4, r0
 8026228:	b140      	cbz	r0, 802623c <__sfmoreglue+0x28>
 802622a:	2100      	movs	r1, #0
 802622c:	e9c0 1600 	strd	r1, r6, [r0]
 8026230:	300c      	adds	r0, #12
 8026232:	60a0      	str	r0, [r4, #8]
 8026234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026238:	f7ff fa21 	bl	802567e <memset>
 802623c:	4620      	mov	r0, r4
 802623e:	bd70      	pop	{r4, r5, r6, pc}

08026240 <__sinit>:
 8026240:	6983      	ldr	r3, [r0, #24]
 8026242:	b510      	push	{r4, lr}
 8026244:	4604      	mov	r4, r0
 8026246:	bb33      	cbnz	r3, 8026296 <__sinit+0x56>
 8026248:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802624c:	6503      	str	r3, [r0, #80]	; 0x50
 802624e:	4b12      	ldr	r3, [pc, #72]	; (8026298 <__sinit+0x58>)
 8026250:	4a12      	ldr	r2, [pc, #72]	; (802629c <__sinit+0x5c>)
 8026252:	681b      	ldr	r3, [r3, #0]
 8026254:	6282      	str	r2, [r0, #40]	; 0x28
 8026256:	4298      	cmp	r0, r3
 8026258:	bf04      	itt	eq
 802625a:	2301      	moveq	r3, #1
 802625c:	6183      	streq	r3, [r0, #24]
 802625e:	f000 f81f 	bl	80262a0 <__sfp>
 8026262:	6060      	str	r0, [r4, #4]
 8026264:	4620      	mov	r0, r4
 8026266:	f000 f81b 	bl	80262a0 <__sfp>
 802626a:	60a0      	str	r0, [r4, #8]
 802626c:	4620      	mov	r0, r4
 802626e:	f000 f817 	bl	80262a0 <__sfp>
 8026272:	2200      	movs	r2, #0
 8026274:	60e0      	str	r0, [r4, #12]
 8026276:	2104      	movs	r1, #4
 8026278:	6860      	ldr	r0, [r4, #4]
 802627a:	f7ff ffa1 	bl	80261c0 <std>
 802627e:	2201      	movs	r2, #1
 8026280:	2109      	movs	r1, #9
 8026282:	68a0      	ldr	r0, [r4, #8]
 8026284:	f7ff ff9c 	bl	80261c0 <std>
 8026288:	2202      	movs	r2, #2
 802628a:	2112      	movs	r1, #18
 802628c:	68e0      	ldr	r0, [r4, #12]
 802628e:	f7ff ff97 	bl	80261c0 <std>
 8026292:	2301      	movs	r3, #1
 8026294:	61a3      	str	r3, [r4, #24]
 8026296:	bd10      	pop	{r4, pc}
 8026298:	0802b5b0 	.word	0x0802b5b0
 802629c:	08026209 	.word	0x08026209

080262a0 <__sfp>:
 80262a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80262a2:	4b1b      	ldr	r3, [pc, #108]	; (8026310 <__sfp+0x70>)
 80262a4:	681e      	ldr	r6, [r3, #0]
 80262a6:	69b3      	ldr	r3, [r6, #24]
 80262a8:	4607      	mov	r7, r0
 80262aa:	b913      	cbnz	r3, 80262b2 <__sfp+0x12>
 80262ac:	4630      	mov	r0, r6
 80262ae:	f7ff ffc7 	bl	8026240 <__sinit>
 80262b2:	3648      	adds	r6, #72	; 0x48
 80262b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80262b8:	3b01      	subs	r3, #1
 80262ba:	d503      	bpl.n	80262c4 <__sfp+0x24>
 80262bc:	6833      	ldr	r3, [r6, #0]
 80262be:	b133      	cbz	r3, 80262ce <__sfp+0x2e>
 80262c0:	6836      	ldr	r6, [r6, #0]
 80262c2:	e7f7      	b.n	80262b4 <__sfp+0x14>
 80262c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80262c8:	b16d      	cbz	r5, 80262e6 <__sfp+0x46>
 80262ca:	3468      	adds	r4, #104	; 0x68
 80262cc:	e7f4      	b.n	80262b8 <__sfp+0x18>
 80262ce:	2104      	movs	r1, #4
 80262d0:	4638      	mov	r0, r7
 80262d2:	f7ff ff9f 	bl	8026214 <__sfmoreglue>
 80262d6:	6030      	str	r0, [r6, #0]
 80262d8:	2800      	cmp	r0, #0
 80262da:	d1f1      	bne.n	80262c0 <__sfp+0x20>
 80262dc:	230c      	movs	r3, #12
 80262de:	603b      	str	r3, [r7, #0]
 80262e0:	4604      	mov	r4, r0
 80262e2:	4620      	mov	r0, r4
 80262e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80262e6:	4b0b      	ldr	r3, [pc, #44]	; (8026314 <__sfp+0x74>)
 80262e8:	6665      	str	r5, [r4, #100]	; 0x64
 80262ea:	e9c4 5500 	strd	r5, r5, [r4]
 80262ee:	60a5      	str	r5, [r4, #8]
 80262f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80262f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80262f8:	2208      	movs	r2, #8
 80262fa:	4629      	mov	r1, r5
 80262fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026300:	f7ff f9bd 	bl	802567e <memset>
 8026304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802630c:	e7e9      	b.n	80262e2 <__sfp+0x42>
 802630e:	bf00      	nop
 8026310:	0802b5b0 	.word	0x0802b5b0
 8026314:	ffff0001 	.word	0xffff0001

08026318 <_fwalk_reent>:
 8026318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802631c:	4680      	mov	r8, r0
 802631e:	4689      	mov	r9, r1
 8026320:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026324:	2600      	movs	r6, #0
 8026326:	b914      	cbnz	r4, 802632e <_fwalk_reent+0x16>
 8026328:	4630      	mov	r0, r6
 802632a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802632e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8026332:	3f01      	subs	r7, #1
 8026334:	d501      	bpl.n	802633a <_fwalk_reent+0x22>
 8026336:	6824      	ldr	r4, [r4, #0]
 8026338:	e7f5      	b.n	8026326 <_fwalk_reent+0xe>
 802633a:	89ab      	ldrh	r3, [r5, #12]
 802633c:	2b01      	cmp	r3, #1
 802633e:	d907      	bls.n	8026350 <_fwalk_reent+0x38>
 8026340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026344:	3301      	adds	r3, #1
 8026346:	d003      	beq.n	8026350 <_fwalk_reent+0x38>
 8026348:	4629      	mov	r1, r5
 802634a:	4640      	mov	r0, r8
 802634c:	47c8      	blx	r9
 802634e:	4306      	orrs	r6, r0
 8026350:	3568      	adds	r5, #104	; 0x68
 8026352:	e7ee      	b.n	8026332 <_fwalk_reent+0x1a>

08026354 <__swhatbuf_r>:
 8026354:	b570      	push	{r4, r5, r6, lr}
 8026356:	460e      	mov	r6, r1
 8026358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802635c:	2900      	cmp	r1, #0
 802635e:	b096      	sub	sp, #88	; 0x58
 8026360:	4614      	mov	r4, r2
 8026362:	461d      	mov	r5, r3
 8026364:	da07      	bge.n	8026376 <__swhatbuf_r+0x22>
 8026366:	2300      	movs	r3, #0
 8026368:	602b      	str	r3, [r5, #0]
 802636a:	89b3      	ldrh	r3, [r6, #12]
 802636c:	061a      	lsls	r2, r3, #24
 802636e:	d410      	bmi.n	8026392 <__swhatbuf_r+0x3e>
 8026370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026374:	e00e      	b.n	8026394 <__swhatbuf_r+0x40>
 8026376:	466a      	mov	r2, sp
 8026378:	f000 f8b8 	bl	80264ec <_fstat_r>
 802637c:	2800      	cmp	r0, #0
 802637e:	dbf2      	blt.n	8026366 <__swhatbuf_r+0x12>
 8026380:	9a01      	ldr	r2, [sp, #4]
 8026382:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026386:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802638a:	425a      	negs	r2, r3
 802638c:	415a      	adcs	r2, r3
 802638e:	602a      	str	r2, [r5, #0]
 8026390:	e7ee      	b.n	8026370 <__swhatbuf_r+0x1c>
 8026392:	2340      	movs	r3, #64	; 0x40
 8026394:	2000      	movs	r0, #0
 8026396:	6023      	str	r3, [r4, #0]
 8026398:	b016      	add	sp, #88	; 0x58
 802639a:	bd70      	pop	{r4, r5, r6, pc}

0802639c <__smakebuf_r>:
 802639c:	898b      	ldrh	r3, [r1, #12]
 802639e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80263a0:	079d      	lsls	r5, r3, #30
 80263a2:	4606      	mov	r6, r0
 80263a4:	460c      	mov	r4, r1
 80263a6:	d507      	bpl.n	80263b8 <__smakebuf_r+0x1c>
 80263a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80263ac:	6023      	str	r3, [r4, #0]
 80263ae:	6123      	str	r3, [r4, #16]
 80263b0:	2301      	movs	r3, #1
 80263b2:	6163      	str	r3, [r4, #20]
 80263b4:	b002      	add	sp, #8
 80263b6:	bd70      	pop	{r4, r5, r6, pc}
 80263b8:	ab01      	add	r3, sp, #4
 80263ba:	466a      	mov	r2, sp
 80263bc:	f7ff ffca 	bl	8026354 <__swhatbuf_r>
 80263c0:	9900      	ldr	r1, [sp, #0]
 80263c2:	4605      	mov	r5, r0
 80263c4:	4630      	mov	r0, r6
 80263c6:	f7ff f9b1 	bl	802572c <_malloc_r>
 80263ca:	b948      	cbnz	r0, 80263e0 <__smakebuf_r+0x44>
 80263cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80263d0:	059a      	lsls	r2, r3, #22
 80263d2:	d4ef      	bmi.n	80263b4 <__smakebuf_r+0x18>
 80263d4:	f023 0303 	bic.w	r3, r3, #3
 80263d8:	f043 0302 	orr.w	r3, r3, #2
 80263dc:	81a3      	strh	r3, [r4, #12]
 80263de:	e7e3      	b.n	80263a8 <__smakebuf_r+0xc>
 80263e0:	4b0d      	ldr	r3, [pc, #52]	; (8026418 <__smakebuf_r+0x7c>)
 80263e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80263e4:	89a3      	ldrh	r3, [r4, #12]
 80263e6:	6020      	str	r0, [r4, #0]
 80263e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80263ec:	81a3      	strh	r3, [r4, #12]
 80263ee:	9b00      	ldr	r3, [sp, #0]
 80263f0:	6163      	str	r3, [r4, #20]
 80263f2:	9b01      	ldr	r3, [sp, #4]
 80263f4:	6120      	str	r0, [r4, #16]
 80263f6:	b15b      	cbz	r3, 8026410 <__smakebuf_r+0x74>
 80263f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80263fc:	4630      	mov	r0, r6
 80263fe:	f000 f887 	bl	8026510 <_isatty_r>
 8026402:	b128      	cbz	r0, 8026410 <__smakebuf_r+0x74>
 8026404:	89a3      	ldrh	r3, [r4, #12]
 8026406:	f023 0303 	bic.w	r3, r3, #3
 802640a:	f043 0301 	orr.w	r3, r3, #1
 802640e:	81a3      	strh	r3, [r4, #12]
 8026410:	89a3      	ldrh	r3, [r4, #12]
 8026412:	431d      	orrs	r5, r3
 8026414:	81a5      	strh	r5, [r4, #12]
 8026416:	e7cd      	b.n	80263b4 <__smakebuf_r+0x18>
 8026418:	08026209 	.word	0x08026209

0802641c <__malloc_lock>:
 802641c:	4770      	bx	lr

0802641e <__malloc_unlock>:
 802641e:	4770      	bx	lr

08026420 <__sread>:
 8026420:	b510      	push	{r4, lr}
 8026422:	460c      	mov	r4, r1
 8026424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026428:	f000 f894 	bl	8026554 <_read_r>
 802642c:	2800      	cmp	r0, #0
 802642e:	bfab      	itete	ge
 8026430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026432:	89a3      	ldrhlt	r3, [r4, #12]
 8026434:	181b      	addge	r3, r3, r0
 8026436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802643a:	bfac      	ite	ge
 802643c:	6563      	strge	r3, [r4, #84]	; 0x54
 802643e:	81a3      	strhlt	r3, [r4, #12]
 8026440:	bd10      	pop	{r4, pc}

08026442 <__swrite>:
 8026442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026446:	461f      	mov	r7, r3
 8026448:	898b      	ldrh	r3, [r1, #12]
 802644a:	05db      	lsls	r3, r3, #23
 802644c:	4605      	mov	r5, r0
 802644e:	460c      	mov	r4, r1
 8026450:	4616      	mov	r6, r2
 8026452:	d505      	bpl.n	8026460 <__swrite+0x1e>
 8026454:	2302      	movs	r3, #2
 8026456:	2200      	movs	r2, #0
 8026458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802645c:	f000 f868 	bl	8026530 <_lseek_r>
 8026460:	89a3      	ldrh	r3, [r4, #12]
 8026462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802646a:	81a3      	strh	r3, [r4, #12]
 802646c:	4632      	mov	r2, r6
 802646e:	463b      	mov	r3, r7
 8026470:	4628      	mov	r0, r5
 8026472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026476:	f000 b817 	b.w	80264a8 <_write_r>

0802647a <__sseek>:
 802647a:	b510      	push	{r4, lr}
 802647c:	460c      	mov	r4, r1
 802647e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026482:	f000 f855 	bl	8026530 <_lseek_r>
 8026486:	1c43      	adds	r3, r0, #1
 8026488:	89a3      	ldrh	r3, [r4, #12]
 802648a:	bf15      	itete	ne
 802648c:	6560      	strne	r0, [r4, #84]	; 0x54
 802648e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026496:	81a3      	strheq	r3, [r4, #12]
 8026498:	bf18      	it	ne
 802649a:	81a3      	strhne	r3, [r4, #12]
 802649c:	bd10      	pop	{r4, pc}

0802649e <__sclose>:
 802649e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80264a2:	f000 b813 	b.w	80264cc <_close_r>
	...

080264a8 <_write_r>:
 80264a8:	b538      	push	{r3, r4, r5, lr}
 80264aa:	4c07      	ldr	r4, [pc, #28]	; (80264c8 <_write_r+0x20>)
 80264ac:	4605      	mov	r5, r0
 80264ae:	4608      	mov	r0, r1
 80264b0:	4611      	mov	r1, r2
 80264b2:	2200      	movs	r2, #0
 80264b4:	6022      	str	r2, [r4, #0]
 80264b6:	461a      	mov	r2, r3
 80264b8:	f7dd f8fd 	bl	80036b6 <_write>
 80264bc:	1c43      	adds	r3, r0, #1
 80264be:	d102      	bne.n	80264c6 <_write_r+0x1e>
 80264c0:	6823      	ldr	r3, [r4, #0]
 80264c2:	b103      	cbz	r3, 80264c6 <_write_r+0x1e>
 80264c4:	602b      	str	r3, [r5, #0]
 80264c6:	bd38      	pop	{r3, r4, r5, pc}
 80264c8:	2000ca50 	.word	0x2000ca50

080264cc <_close_r>:
 80264cc:	b538      	push	{r3, r4, r5, lr}
 80264ce:	4c06      	ldr	r4, [pc, #24]	; (80264e8 <_close_r+0x1c>)
 80264d0:	2300      	movs	r3, #0
 80264d2:	4605      	mov	r5, r0
 80264d4:	4608      	mov	r0, r1
 80264d6:	6023      	str	r3, [r4, #0]
 80264d8:	f7dd f909 	bl	80036ee <_close>
 80264dc:	1c43      	adds	r3, r0, #1
 80264de:	d102      	bne.n	80264e6 <_close_r+0x1a>
 80264e0:	6823      	ldr	r3, [r4, #0]
 80264e2:	b103      	cbz	r3, 80264e6 <_close_r+0x1a>
 80264e4:	602b      	str	r3, [r5, #0]
 80264e6:	bd38      	pop	{r3, r4, r5, pc}
 80264e8:	2000ca50 	.word	0x2000ca50

080264ec <_fstat_r>:
 80264ec:	b538      	push	{r3, r4, r5, lr}
 80264ee:	4c07      	ldr	r4, [pc, #28]	; (802650c <_fstat_r+0x20>)
 80264f0:	2300      	movs	r3, #0
 80264f2:	4605      	mov	r5, r0
 80264f4:	4608      	mov	r0, r1
 80264f6:	4611      	mov	r1, r2
 80264f8:	6023      	str	r3, [r4, #0]
 80264fa:	f7dd f904 	bl	8003706 <_fstat>
 80264fe:	1c43      	adds	r3, r0, #1
 8026500:	d102      	bne.n	8026508 <_fstat_r+0x1c>
 8026502:	6823      	ldr	r3, [r4, #0]
 8026504:	b103      	cbz	r3, 8026508 <_fstat_r+0x1c>
 8026506:	602b      	str	r3, [r5, #0]
 8026508:	bd38      	pop	{r3, r4, r5, pc}
 802650a:	bf00      	nop
 802650c:	2000ca50 	.word	0x2000ca50

08026510 <_isatty_r>:
 8026510:	b538      	push	{r3, r4, r5, lr}
 8026512:	4c06      	ldr	r4, [pc, #24]	; (802652c <_isatty_r+0x1c>)
 8026514:	2300      	movs	r3, #0
 8026516:	4605      	mov	r5, r0
 8026518:	4608      	mov	r0, r1
 802651a:	6023      	str	r3, [r4, #0]
 802651c:	f7dd f903 	bl	8003726 <_isatty>
 8026520:	1c43      	adds	r3, r0, #1
 8026522:	d102      	bne.n	802652a <_isatty_r+0x1a>
 8026524:	6823      	ldr	r3, [r4, #0]
 8026526:	b103      	cbz	r3, 802652a <_isatty_r+0x1a>
 8026528:	602b      	str	r3, [r5, #0]
 802652a:	bd38      	pop	{r3, r4, r5, pc}
 802652c:	2000ca50 	.word	0x2000ca50

08026530 <_lseek_r>:
 8026530:	b538      	push	{r3, r4, r5, lr}
 8026532:	4c07      	ldr	r4, [pc, #28]	; (8026550 <_lseek_r+0x20>)
 8026534:	4605      	mov	r5, r0
 8026536:	4608      	mov	r0, r1
 8026538:	4611      	mov	r1, r2
 802653a:	2200      	movs	r2, #0
 802653c:	6022      	str	r2, [r4, #0]
 802653e:	461a      	mov	r2, r3
 8026540:	f7dd f8fc 	bl	800373c <_lseek>
 8026544:	1c43      	adds	r3, r0, #1
 8026546:	d102      	bne.n	802654e <_lseek_r+0x1e>
 8026548:	6823      	ldr	r3, [r4, #0]
 802654a:	b103      	cbz	r3, 802654e <_lseek_r+0x1e>
 802654c:	602b      	str	r3, [r5, #0]
 802654e:	bd38      	pop	{r3, r4, r5, pc}
 8026550:	2000ca50 	.word	0x2000ca50

08026554 <_read_r>:
 8026554:	b538      	push	{r3, r4, r5, lr}
 8026556:	4c07      	ldr	r4, [pc, #28]	; (8026574 <_read_r+0x20>)
 8026558:	4605      	mov	r5, r0
 802655a:	4608      	mov	r0, r1
 802655c:	4611      	mov	r1, r2
 802655e:	2200      	movs	r2, #0
 8026560:	6022      	str	r2, [r4, #0]
 8026562:	461a      	mov	r2, r3
 8026564:	f7dd f88a 	bl	800367c <_read>
 8026568:	1c43      	adds	r3, r0, #1
 802656a:	d102      	bne.n	8026572 <_read_r+0x1e>
 802656c:	6823      	ldr	r3, [r4, #0]
 802656e:	b103      	cbz	r3, 8026572 <_read_r+0x1e>
 8026570:	602b      	str	r3, [r5, #0]
 8026572:	bd38      	pop	{r3, r4, r5, pc}
 8026574:	2000ca50 	.word	0x2000ca50

08026578 <_init>:
 8026578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802657a:	bf00      	nop
 802657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802657e:	bc08      	pop	{r3}
 8026580:	469e      	mov	lr, r3
 8026582:	4770      	bx	lr

08026584 <_fini>:
 8026584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026586:	bf00      	nop
 8026588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802658a:	bc08      	pop	{r3}
 802658c:	469e      	mov	lr, r3
 802658e:	4770      	bx	lr
