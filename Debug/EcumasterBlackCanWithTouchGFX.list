
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024cbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004260  08024e8c  08024e8c  00034e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003d0a  080290ec  080290ec  000390ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00016998  0802cdf8  0802cdf8  0003cdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000001f8  08043790  08043790  00053790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08043988  08043988  000600fc  2**0
                  CONTENTS
  7 .ARM          00000008  08043988  08043988  00053988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08043990  08043990  000600fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08043990  08043990  00053990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080439a4  080439a4  000539a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  080439ac  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ca30  200000fc  08043aa8  000600fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000cb2c  08043aa8  0006cb2c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000600fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005aa50  00000000  00000000  0006012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000ee9b  00000000  00000000  000bab7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000040d8  00000000  00000000  000c9a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003ad0  00000000  00000000  000cdaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003aec7  00000000  00000000  000d15c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00041449  00000000  00000000  0010c487  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012ee9c  00000000  00000000  0014d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0027c76c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00011538  00000000  00000000  0027c868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08024e74 	.word	0x08024e74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08024e74 	.word	0x08024e74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000118 	.word	0x20000118
 8000614:	20000170 	.word	0x20000170

08000618 <SecondTask>:
   int	  tps;
   float	  batt_v;
} display_values;

void SecondTask(void const* argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		display_values dispVals = {rpm, clt, map, lambda, lambda_targ,};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2230      	movs	r2, #48	; 0x30
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f023 fca6 	bl	8023f7a <memset>
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <SecondTask+0x4c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <SecondTask+0x50>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <SecondTask+0x54>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <SecondTask+0x58>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <SecondTask+0x5c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	61bb      	str	r3, [r7, #24]
	    xQueueSend(messageQ, &dispVals,0);
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <SecondTask+0x60>)
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	f107 0108 	add.w	r1, r7, #8
 8000654:	2300      	movs	r3, #0
 8000656:	2200      	movs	r2, #0
 8000658:	f00b fd5e 	bl	800c118 <xQueueGenericSend>
		osDelay(150);
 800065c:	2096      	movs	r0, #150	; 0x96
 800065e:	f00b fa6d 	bl	800bb3c <osDelay>
	{
 8000662:	e7dd      	b.n	8000620 <SecondTask+0x8>
 8000664:	20000004 	.word	0x20000004
 8000668:	2000000c 	.word	0x2000000c
 800066c:	20000008 	.word	0x20000008
 8000670:	20000010 	.word	0x20000010
 8000674:	20000014 	.word	0x20000014
 8000678:	20008688 	.word	0x20008688

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f002 fcf6 	bl	8003072 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f85f 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f001 f9c9 	bl	8001a20 <MX_GPIO_Init>
  MX_ADC3_Init();
 800068e:	f000 f917 	bl	80008c0 <MX_ADC3_Init>
  MX_CRC_Init();
 8000692:	f000 fb01 	bl	8000c98 <MX_CRC_Init>
  MX_DCMI_Init();
 8000696:	f000 fb21 	bl	8000cdc <MX_DCMI_Init>
  MX_DMA2D_Init();
 800069a:	f000 fb53 	bl	8000d44 <MX_DMA2D_Init>
  MX_FMC_Init();
 800069e:	f001 f913 	bl	80018c8 <MX_FMC_Init>
  MX_LTDC_Init();
 80006a2:	f000 fb81 	bl	8000da8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006a6:	f000 fc01 	bl	8000eac <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006aa:	f000 fc2b 	bl	8000f04 <MX_RTC_Init>
  MX_SAI2_Init();
 80006ae:	f000 fcd1 	bl	8001054 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80006b2:	f000 fd77 	bl	80011a4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80006b6:	f000 fd95 	bl	80011e4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80006ba:	f000 fdc3 	bl	8001244 <MX_SPI2_Init>
  MX_TIM1_Init();
 80006be:	f000 fdff 	bl	80012c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006c2:	f000 fea9 	bl	8001418 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006c6:	f000 ff1d 	bl	8001504 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006ca:	f000 ff91 	bl	80015f0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006ce:	f001 f805 	bl	80016dc <MX_TIM8_Init>
  MX_TIM12_Init();
 80006d2:	f001 f855 	bl	8001780 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80006d6:	f001 f897 	bl	8001808 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80006da:	f001 f8c5 	bl	8001868 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80006de:	f00a fee9 	bl	800b4b4 <MX_FATFS_Init>
  MX_CAN1_Init();
 80006e2:	f000 f93f 	bl	8000964 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 80006e6:	f00d ff5d 	bl	800e5a4 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <main+0xbc>)
 80006ec:	f107 041c 	add.w	r4, r7, #28
 80006f0:	461d      	mov	r5, r3
 80006f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f00b f9cd 	bl	800baa4 <osThreadCreate>
 800070a:	4602      	mov	r2, r0
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <main+0xc0>)
 800070e:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <main+0xc4>)
 8000712:	463c      	mov	r4, r7
 8000714:	461d      	mov	r5, r3
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800071e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000722:	463b      	mov	r3, r7
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f00b f9bc 	bl	800baa4 <osThreadCreate>
 800072c:	4602      	mov	r2, r0
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <main+0xc8>)
 8000730:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000732:	f00b f994 	bl	800ba5e <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0xba>
 8000738:	08024e98 	.word	0x08024e98
 800073c:	2000bfac 	.word	0x2000bfac
 8000740:	08024ebc 	.word	0x08024ebc
 8000744:	2000bfa8 	.word	0x2000bfa8

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0b4      	sub	sp, #208	; 0xd0
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000752:	2230      	movs	r2, #48	; 0x30
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f023 fc0f 	bl	8023f7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2284      	movs	r2, #132	; 0x84
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f023 fc00 	bl	8023f7a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800077a:	f005 f94f 	bl	8005a1c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <SystemClock_Config+0x16c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a4c      	ldr	r2, [pc, #304]	; (80008b4 <SystemClock_Config+0x16c>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <SystemClock_Config+0x16c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000796:	4b48      	ldr	r3, [pc, #288]	; (80008b8 <SystemClock_Config+0x170>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a47      	ldr	r2, [pc, #284]	; (80008b8 <SystemClock_Config+0x170>)
 800079c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	4b45      	ldr	r3, [pc, #276]	; (80008b8 <SystemClock_Config+0x170>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007ae:	2309      	movs	r3, #9
 80007b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007d0:	2319      	movs	r3, #25
 80007d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80007d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007e4:	2309      	movs	r3, #9
 80007e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 fa36 	bl	8005c60 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007fa:	f001 fb45 	bl	8001e88 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007fe:	f005 f91d 	bl	8005a3c <HAL_PWREx_EnableOverDrive>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000808:	f001 fb3e 	bl	8001e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000822:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800082e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000832:	2106      	movs	r1, #6
 8000834:	4618      	mov	r0, r3
 8000836:	f005 fcb7 	bl	80061a8 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000840:	f001 fb22 	bl	8001e88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <SystemClock_Config+0x174>)
 8000846:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000858:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800085c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800085e:	2305      	movs	r3, #5
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000866:	2303      	movs	r3, #3
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800087e:	2300      	movs	r3, #0
 8000880:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000882:	2300      	movs	r3, #0
 8000884:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000886:	2300      	movs	r3, #0
 8000888:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800088a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800088e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4618      	mov	r0, r3
 800089e:	f005 fe87 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x164>
  {
    Error_Handler();
 80008a8:	f001 faee 	bl	8001e88 <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	37d0      	adds	r7, #208	; 0xd0
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000
 80008bc:	01b00868 	.word	0x01b00868

080008c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_ADC3_Init+0x98>)
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <MX_ADC3_Init+0x9c>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_ADC3_Init+0x98>)
 80008da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008de:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_ADC3_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_ADC3_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_ADC3_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_ADC3_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_ADC3_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_ADC3_Init+0x98>)
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <MX_ADC3_Init+0xa0>)
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_ADC3_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_ADC3_Init+0x98>)
 800090e:	2201      	movs	r2, #1
 8000910:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_ADC3_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_ADC3_Init+0x98>)
 800091c:	2201      	movs	r2, #1
 800091e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_ADC3_Init+0x98>)
 8000922:	f002 fbf5 	bl	8003110 <HAL_ADC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800092c:	f001 faac 	bl	8001e88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000930:	2304      	movs	r3, #4
 8000932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000934:	2301      	movs	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_ADC3_Init+0x98>)
 8000942:	f002 fc29 	bl	8003198 <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800094c:	f001 fa9c 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000c2f4 	.word	0x2000c2f4
 800095c:	40012200 	.word	0x40012200
 8000960:	0f000001 	.word	0x0f000001

08000964 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800096a:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <MX_CAN1_Init+0xc8>)
 800096c:	4a30      	ldr	r2, [pc, #192]	; (8000a30 <MX_CAN1_Init+0xcc>)
 800096e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <MX_CAN1_Init+0xc8>)
 8000972:	2214      	movs	r2, #20
 8000974:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <MX_CAN1_Init+0xc8>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MX_CAN1_Init+0xc8>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <MX_CAN1_Init+0xc8>)
 8000984:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000988:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_CAN1_Init+0xc8>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_CAN1_Init+0xc8>)
 8000992:	2200      	movs	r2, #0
 8000994:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_CAN1_Init+0xc8>)
 8000998:	2200      	movs	r2, #0
 800099a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_CAN1_Init+0xc8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_CAN1_Init+0xc8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_CAN1_Init+0xc8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_CAN1_Init+0xc8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009b4:	481d      	ldr	r0, [pc, #116]	; (8000a2c <MX_CAN1_Init+0xc8>)
 80009b6:	f002 fe33 	bl	8003620 <HAL_CAN_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009c0:	f001 fa62 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80009e8:	230e      	movs	r3, #14
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <MX_CAN1_Init+0xc8>)
 80009f2:	f002 ff11 	bl	8003818 <HAL_CAN_ConfigFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80009fc:	f001 fa44 	bl	8001e88 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <MX_CAN1_Init+0xc8>)
 8000a02:	f002 ffe9 	bl	80039d8 <HAL_CAN_Start>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8000a0c:	f001 fa3c 	bl	8001e88 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000a10:	2102      	movs	r1, #2
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_CAN1_Init+0xc8>)
 8000a14:	f003 f936 	bl	8003c84 <HAL_CAN_ActivateNotification>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 8000a1e:	f001 fa33 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000c574 	.word	0x2000c574
 8000a30:	40006400 	.word	0x40006400

08000a34 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000a3c:	4b84      	ldr	r3, [pc, #528]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000a3e:	4a85      	ldr	r2, [pc, #532]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000a40:	2100      	movs	r1, #0
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f003 f80c 	bl	8003a60 <HAL_CAN_GetRxMessage>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8000a4e:	f001 fa1b 	bl	8001e88 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000a52:	4b80      	ldr	r3, [pc, #512]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000a5a:	d145      	bne.n	8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8000a5c:	4b7d      	ldr	r3, [pc, #500]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d141      	bne.n	8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8000a64:	4b7b      	ldr	r3, [pc, #492]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	2b08      	cmp	r3, #8
 8000a6a:	d13d      	bne.n	8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8000a6c:	4b78      	ldr	r3, [pc, #480]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	4b77      	ldr	r3, [pc, #476]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000a74:	785b      	ldrb	r3, [r3, #1]
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t tps_in = RxData[2];
 8000a80:	4b73      	ldr	r3, [pc, #460]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000a82:	789b      	ldrb	r3, [r3, #2]
 8000a84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t iat_in = RxData[3];
 8000a88:	4b71      	ldr	r3, [pc, #452]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000a8a:	78db      	ldrb	r3, [r3, #3]
 8000a8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 uint16_t map_in = (RxData[4] << 0) | (RxData[7] << 8);
 8000a90:	4b6f      	ldr	r3, [pc, #444]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	4b6e      	ldr	r3, [pc, #440]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000a98:	79db      	ldrb	r3, [r3, #7]
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	847b      	strh	r3, [r7, #34]	; 0x22

	 rpm = (int)rpm_in;
 8000aa4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000aa6:	4a6c      	ldr	r2, [pc, #432]	; (8000c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000aa8:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 8000aaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ab8:	ee17 2a90 	vmov	r2, s15
 8000abc:	4b67      	ldr	r3, [pc, #412]	; (8000c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8000abe:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 8000ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ac4:	4a66      	ldr	r2, [pc, #408]	; (8000c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000ac6:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 8000ac8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000acc:	ee07 3a90 	vmov	s15, r3
 8000ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae0:	ee17 2a90 	vmov	r2, s15
 8000ae4:	4b5f      	ldr	r3, [pc, #380]	; (8000c64 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8000ae6:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000ae8:	4b5a      	ldr	r3, [pc, #360]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f240 6202 	movw	r2, #1538	; 0x602
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d13c      	bne.n	8000b6e <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8000af4:	4b57      	ldr	r3, [pc, #348]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d138      	bne.n	8000b6e <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 8000afc:	4b55      	ldr	r3, [pc, #340]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d134      	bne.n	8000b6e <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
  {

	 uint16_t vehicle_spd_in = (RxData[1] << 0) | (RxData[2] << 8);
 8000b04:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b06:	785b      	ldrb	r3, [r3, #1]
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	4b51      	ldr	r3, [pc, #324]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b0c:	789b      	ldrb	r3, [r3, #2]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	4313      	orrs	r3, r2
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	843b      	strh	r3, [r7, #32]
	 uint8_t oil_tmp_in = RxData[3];
 8000b18:	4b4d      	ldr	r3, [pc, #308]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b1a:	78db      	ldrb	r3, [r3, #3]
 8000b1c:	77fb      	strb	r3, [r7, #31]
	 uint8_t oil_press_in = RxData[4];
 8000b1e:	4b4c      	ldr	r3, [pc, #304]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b20:	791b      	ldrb	r3, [r3, #4]
 8000b22:	77bb      	strb	r3, [r7, #30]
	 uint8_t fuel_press_in = RxData[5];
 8000b24:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	777b      	strb	r3, [r7, #29]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 8000b2a:	4b49      	ldr	r3, [pc, #292]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b2c:	799b      	ldrb	r3, [r3, #6]
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b32:	79db      	ldrb	r3, [r3, #7]
 8000b34:	021b      	lsls	r3, r3, #8
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	837b      	strh	r3, [r7, #26]

	 vehicle_spd = ((int)vehicle_spd_in)*1;
 8000b3e:	8c3b      	ldrh	r3, [r7, #32]
 8000b40:	4a49      	ldr	r2, [pc, #292]	; (8000c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8000b42:	6013      	str	r3, [r2, #0]
	 oil_tmp = ((int)oil_tmp_in) * 1;
 8000b44:	7ffb      	ldrb	r3, [r7, #31]
 8000b46:	4a49      	ldr	r2, [pc, #292]	; (8000c6c <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8000b48:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 8000b4a:	7fbb      	ldrb	r3, [r7, #30]
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b54:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000c70 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>
 8000b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b60:	ee17 2a90 	vmov	r2, s15
 8000b64:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8000b66:	601a      	str	r2, [r3, #0]
	 clt = ((int)clt_in) * 1;
 8000b68:	8b7b      	ldrh	r3, [r7, #26]
 8000b6a:	4a43      	ldr	r2, [pc, #268]	; (8000c78 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8000b6c:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000b6e:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f240 6203 	movw	r2, #1539	; 0x603
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d123      	bne.n	8000bc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d11f      	bne.n	8000bc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
 8000b82:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	2b08      	cmp	r3, #8
 8000b88:	d11b      	bne.n	8000bc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
  {
	 uint8_t lambda_in = RxData[2];
 8000b8a:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b8c:	789b      	ldrb	r3, [r3, #2]
 8000b8e:	767b      	strb	r3, [r7, #25]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 8000b90:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b92:	791b      	ldrb	r3, [r3, #4]
 8000b94:	b21a      	sxth	r2, r3
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b98:	795b      	ldrb	r3, [r3, #5]
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	82fb      	strh	r3, [r7, #22]
	 lambda = ((float)lambda_in)*0.0078125f;
 8000ba4:	7e7b      	ldrb	r3, [r7, #25]
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bae:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000c7c <HAL_CAN_RxFifo0MsgPendingCallback+0x248>
 8000bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8000bb8:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 8000bbc:	8afb      	ldrh	r3, [r7, #22]
 8000bbe:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8000bc0:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000bc2:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f240 6204 	movw	r2, #1540	; 0x604
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d11f      	bne.n	8000c0e <HAL_CAN_RxFifo0MsgPendingCallback+0x1da>
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d11b      	bne.n	8000c0e <HAL_CAN_RxFifo0MsgPendingCallback+0x1da>
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d117      	bne.n	8000c0e <HAL_CAN_RxFifo0MsgPendingCallback+0x1da>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000be0:	789b      	ldrb	r3, [r3, #2]
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000be6:	78db      	ldrb	r3, [r3, #3]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	82bb      	strh	r3, [r7, #20]
	 float battery_voltage = ((float)batt_in)*0.027f;
 8000bf2:	8abb      	ldrh	r3, [r7, #20]
 8000bf4:	ee07 3a90 	vmov	s15, r3
 8000bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bfc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000c88 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>
 8000c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c04:	edc7 7a04 	vstr	s15, [r7, #16]
	 batt_v = battery_voltage;
 8000c08:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c16:	d116      	bne.n	8000c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x212>
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d112      	bne.n	8000c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x212>
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	2b08      	cmp	r3, #8
 8000c26:	d10e      	bne.n	8000c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x212>
    {
  	 uint16_t lambda_targ_in = RxData[7];
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000c2a:	79db      	ldrb	r3, [r3, #7]
 8000c2c:	81fb      	strh	r3, [r7, #14]
  	 lambda_targ = lambda_targ_in / 100.0f;
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
 8000c30:	ee07 3a90 	vmov	s15, r3
 8000c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c38:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>
 8000c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8000c42:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000c52c 	.word	0x2000c52c
 8000c54:	2000c610 	.word	0x2000c610
 8000c58:	20000004 	.word	0x20000004
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	2000038c 	.word	0x2000038c
 8000c64:	20000394 	.word	0x20000394
 8000c68:	20000380 	.word	0x20000380
 8000c6c:	20000384 	.word	0x20000384
 8000c70:	3d800000 	.word	0x3d800000
 8000c74:	20000388 	.word	0x20000388
 8000c78:	2000000c 	.word	0x2000000c
 8000c7c:	3c000000 	.word	0x3c000000
 8000c80:	20000010 	.word	0x20000010
 8000c84:	20000390 	.word	0x20000390
 8000c88:	3cdd2f1b 	.word	0x3cdd2f1b
 8000c8c:	20000398 	.word	0x20000398
 8000c90:	42c80000 	.word	0x42c80000
 8000c94:	20000014 	.word	0x20000014

08000c98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <MX_CRC_Init+0x40>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cc2:	f003 fb41 	bl	8004348 <HAL_CRC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ccc:	f001 f8dc 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000c124 	.word	0x2000c124
 8000cd8:	40023000 	.word	0x40023000

08000cdc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <MX_DCMI_Init+0x64>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d2a:	f003 fbf7 	bl	800451c <HAL_DCMI_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f001 f8a8 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000c33c 	.word	0x2000c33c
 8000d40:	50050000 	.word	0x50050000

08000d44 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <MX_DMA2D_Init+0x60>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d7a:	f003 fce3 	bl	8004744 <HAL_DMA2D_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d84:	f001 f880 	bl	8001e88 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d8c:	f003 ffa4 	bl	8004cd8 <HAL_DMA2D_ConfigLayer>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d96:	f001 f877 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000c4ec 	.word	0x2000c4ec
 8000da4:	4002b000 	.word	0x4002b000

08000da8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2234      	movs	r2, #52	; 0x34
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f023 f8e0 	bl	8023f7a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000dbc:	4a3a      	ldr	r2, [pc, #232]	; (8000ea8 <MX_LTDC_Init+0x100>)
 8000dbe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000dc0:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000dc6:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000dcc:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000dda:	2228      	movs	r2, #40	; 0x28
 8000ddc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000de0:	2209      	movs	r2, #9
 8000de2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000de6:	2235      	movs	r2, #53	; 0x35
 8000de8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000dec:	220b      	movs	r2, #11
 8000dee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000df2:	f240 2215 	movw	r2, #533	; 0x215
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000dfa:	f240 121b 	movw	r2, #283	; 0x11b
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000e00:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000e02:	f240 2235 	movw	r2, #565	; 0x235
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000e0a:	f240 121d 	movw	r2, #285	; 0x11d
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e28:	481e      	ldr	r0, [pc, #120]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000e2a:	f004 fa5f 	bl	80052ec <HAL_LTDC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000e34:	f001 f828 	bl	8001e88 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000e3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e40:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000e46:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000e4a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e50:	23ff      	movs	r3, #255	; 0xff
 8000e52:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000e62:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000e68:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000e6e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000e8e:	f004 fbb5 	bl	80055fc <HAL_LTDC_ConfigLayer>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000e98:	f000 fff6 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000c24c 	.word	0x2000c24c
 8000ea8:	40016800 	.word	0x40016800

08000eac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <MX_QUADSPI_Init+0x54>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000eb8:	22ff      	movs	r2, #255	; 0xff
 8000eba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_QUADSPI_Init+0x50>)
 8000ee8:	f004 fdf8 	bl	8005adc <HAL_QSPI_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000ef2:	f000 ffc9 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000c62c 	.word	0x2000c62c
 8000f00:	a0001000 	.word	0xa0001000

08000f04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b092      	sub	sp, #72	; 0x48
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000f20:	463b      	mov	r3, r7
 8000f22:	222c      	movs	r2, #44	; 0x2c
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f023 f827 	bl	8023f7a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000f2c:	4b47      	ldr	r3, [pc, #284]	; (800104c <MX_RTC_Init+0x148>)
 8000f2e:	4a48      	ldr	r2, [pc, #288]	; (8001050 <MX_RTC_Init+0x14c>)
 8000f30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f32:	4b46      	ldr	r3, [pc, #280]	; (800104c <MX_RTC_Init+0x148>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f38:	4b44      	ldr	r3, [pc, #272]	; (800104c <MX_RTC_Init+0x148>)
 8000f3a:	227f      	movs	r2, #127	; 0x7f
 8000f3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f3e:	4b43      	ldr	r3, [pc, #268]	; (800104c <MX_RTC_Init+0x148>)
 8000f40:	22ff      	movs	r2, #255	; 0xff
 8000f42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f44:	4b41      	ldr	r3, [pc, #260]	; (800104c <MX_RTC_Init+0x148>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f4a:	4b40      	ldr	r3, [pc, #256]	; (800104c <MX_RTC_Init+0x148>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f50:	4b3e      	ldr	r3, [pc, #248]	; (800104c <MX_RTC_Init+0x148>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f56:	483d      	ldr	r0, [pc, #244]	; (800104c <MX_RTC_Init+0x148>)
 8000f58:	f006 f84c 	bl	8006ff4 <HAL_RTC_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000f62:	f000 ff91 	bl	8001e88 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f84:	2201      	movs	r2, #1
 8000f86:	4619      	mov	r1, r3
 8000f88:	4830      	ldr	r0, [pc, #192]	; (800104c <MX_RTC_Init+0x148>)
 8000f8a:	f006 f8af 	bl	80070ec <HAL_RTC_SetTime>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000f94:	f000 ff78 	bl	8001e88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4824      	ldr	r0, [pc, #144]	; (800104c <MX_RTC_Init+0x148>)
 8000fba:	f006 f955 	bl	8007268 <HAL_RTC_SetDate>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000fc4:	f000 ff60 	bl	8001e88 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4813      	ldr	r0, [pc, #76]	; (800104c <MX_RTC_Init+0x148>)
 8001000:	f006 f9da 	bl	80073b8 <HAL_RTC_SetAlarm>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800100a:	f000 ff3d 	bl	8001e88 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800100e:	2301      	movs	r3, #1
 8001010:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	480a      	ldr	r0, [pc, #40]	; (800104c <MX_RTC_Init+0x148>)
 8001022:	f006 f9c9 	bl	80073b8 <HAL_RTC_SetAlarm>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 800102c:	f000 ff2c 	bl	8001e88 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001030:	2202      	movs	r2, #2
 8001032:	2100      	movs	r1, #0
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_RTC_Init+0x148>)
 8001036:	f006 fb49 	bl	80076cc <HAL_RTCEx_SetTimeStamp>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001040:	f000 ff22 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3748      	adds	r7, #72	; 0x48
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000c40c 	.word	0x2000c40c
 8001050:	40002800 	.word	0x40002800

08001054 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001058:	4b4d      	ldr	r3, [pc, #308]	; (8001190 <MX_SAI2_Init+0x13c>)
 800105a:	4a4e      	ldr	r2, [pc, #312]	; (8001194 <MX_SAI2_Init+0x140>)
 800105c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800105e:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <MX_SAI2_Init+0x13c>)
 8001060:	2200      	movs	r2, #0
 8001062:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001064:	4b4a      	ldr	r3, [pc, #296]	; (8001190 <MX_SAI2_Init+0x13c>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800106a:	4b49      	ldr	r3, [pc, #292]	; (8001190 <MX_SAI2_Init+0x13c>)
 800106c:	2240      	movs	r2, #64	; 0x40
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001070:	4b47      	ldr	r3, [pc, #284]	; (8001190 <MX_SAI2_Init+0x13c>)
 8001072:	2200      	movs	r2, #0
 8001074:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001076:	4b46      	ldr	r3, [pc, #280]	; (8001190 <MX_SAI2_Init+0x13c>)
 8001078:	2200      	movs	r2, #0
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800107c:	4b44      	ldr	r3, [pc, #272]	; (8001190 <MX_SAI2_Init+0x13c>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001082:	4b43      	ldr	r3, [pc, #268]	; (8001190 <MX_SAI2_Init+0x13c>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001088:	4b41      	ldr	r3, [pc, #260]	; (8001190 <MX_SAI2_Init+0x13c>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800108e:	4b40      	ldr	r3, [pc, #256]	; (8001190 <MX_SAI2_Init+0x13c>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001094:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <MX_SAI2_Init+0x13c>)
 8001096:	4a40      	ldr	r2, [pc, #256]	; (8001198 <MX_SAI2_Init+0x144>)
 8001098:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <MX_SAI2_Init+0x13c>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010a0:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010a6:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010ac:	4b38      	ldr	r3, [pc, #224]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010b4:	2208      	movs	r2, #8
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80010be:	4b34      	ldr	r3, [pc, #208]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80010d6:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80010e8:	4829      	ldr	r0, [pc, #164]	; (8001190 <MX_SAI2_Init+0x13c>)
 80010ea:	f006 fb45 	bl	8007778 <HAL_SAI_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80010f4:	f000 fec8 	bl	8001e88 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <MX_SAI2_Init+0x148>)
 80010fa:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <MX_SAI2_Init+0x14c>)
 80010fc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <MX_SAI2_Init+0x148>)
 8001100:	2200      	movs	r2, #0
 8001102:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <MX_SAI2_Init+0x148>)
 8001106:	2203      	movs	r2, #3
 8001108:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <MX_SAI2_Init+0x148>)
 800110c:	2240      	movs	r2, #64	; 0x40
 800110e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <MX_SAI2_Init+0x148>)
 8001112:	2200      	movs	r2, #0
 8001114:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_SAI2_Init+0x148>)
 8001118:	2200      	movs	r2, #0
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_SAI2_Init+0x148>)
 800111e:	2201      	movs	r2, #1
 8001120:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_SAI2_Init+0x148>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_SAI2_Init+0x148>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_SAI2_Init+0x148>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_SAI2_Init+0x148>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_SAI2_Init+0x148>)
 800113c:	2200      	movs	r2, #0
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_SAI2_Init+0x148>)
 8001142:	2200      	movs	r2, #0
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_SAI2_Init+0x148>)
 8001148:	2208      	movs	r2, #8
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_SAI2_Init+0x148>)
 800114e:	2201      	movs	r2, #1
 8001150:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_SAI2_Init+0x148>)
 8001154:	2200      	movs	r2, #0
 8001156:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_SAI2_Init+0x148>)
 800115a:	2200      	movs	r2, #0
 800115c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_SAI2_Init+0x148>)
 8001160:	2200      	movs	r2, #0
 8001162:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <MX_SAI2_Init+0x148>)
 8001166:	2200      	movs	r2, #0
 8001168:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_SAI2_Init+0x148>)
 800116c:	2200      	movs	r2, #0
 800116e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <MX_SAI2_Init+0x148>)
 8001172:	2201      	movs	r2, #1
 8001174:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_SAI2_Init+0x148>)
 8001178:	2200      	movs	r2, #0
 800117a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800117c:	4807      	ldr	r0, [pc, #28]	; (800119c <MX_SAI2_Init+0x148>)
 800117e:	f006 fafb 	bl	8007778 <HAL_SAI_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001188:	f000 fe7e 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000c0a0 	.word	0x2000c0a0
 8001194:	40015c04 	.word	0x40015c04
 8001198:	0002ee00 	.word	0x0002ee00
 800119c:	2000bf24 	.word	0x2000bf24
 80011a0:	40015c24 	.word	0x40015c24

080011a4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SDMMC1_SD_Init+0x38>)
 80011aa:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <MX_SDMMC1_SD_Init+0x3c>)
 80011ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_SDMMC1_SD_Init+0x38>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SDMMC1_SD_Init+0x38>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_SDMMC1_SD_Init+0x38>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SDMMC1_SD_Init+0x38>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <MX_SDMMC1_SD_Init+0x38>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <MX_SDMMC1_SD_Init+0x38>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	2000c148 	.word	0x2000c148
 80011e0:	40012c00 	.word	0x40012c00

080011e4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 80011ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80011ee:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_SPDIFRX_Init+0x5c>)
 800122e:	f007 fd37 	bl	8008ca0 <HAL_SPDIFRX_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001238:	f000 fe26 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000c054 	.word	0x2000c054

08001244 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_SPI2_Init+0x74>)
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <MX_SPI2_Init+0x78>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_SPI2_Init+0x74>)
 8001250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001254:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_SPI2_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_SPI2_Init+0x74>)
 800125e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001262:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_SPI2_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_SPI2_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_SPI2_Init+0x74>)
 8001272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001276:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_SPI2_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_SPI2_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SPI2_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_SPI2_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SPI2_Init+0x74>)
 8001292:	2207      	movs	r2, #7
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_SPI2_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_SPI2_Init+0x74>)
 800129e:	2208      	movs	r2, #8
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_SPI2_Init+0x74>)
 80012a4:	f007 fd58 	bl	8008d58 <HAL_SPI_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012ae:	f000 fdeb 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000bfb0 	.word	0x2000bfb0
 80012bc:	40003800 	.word	0x40003800

080012c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b09a      	sub	sp, #104	; 0x68
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	615a      	str	r2, [r3, #20]
 80012f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	222c      	movs	r2, #44	; 0x2c
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f022 fe3d 	bl	8023f7a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001300:	4b43      	ldr	r3, [pc, #268]	; (8001410 <MX_TIM1_Init+0x150>)
 8001302:	4a44      	ldr	r2, [pc, #272]	; (8001414 <MX_TIM1_Init+0x154>)
 8001304:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <MX_TIM1_Init+0x150>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b40      	ldr	r3, [pc, #256]	; (8001410 <MX_TIM1_Init+0x150>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <MX_TIM1_Init+0x150>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <MX_TIM1_Init+0x150>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800131e:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <MX_TIM1_Init+0x150>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <MX_TIM1_Init+0x150>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800132a:	4839      	ldr	r0, [pc, #228]	; (8001410 <MX_TIM1_Init+0x150>)
 800132c:	f007 fda6 	bl	8008e7c <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001336:	f000 fda7 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001340:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001344:	4619      	mov	r1, r3
 8001346:	4832      	ldr	r0, [pc, #200]	; (8001410 <MX_TIM1_Init+0x150>)
 8001348:	f008 f850 	bl	80093ec <HAL_TIM_ConfigClockSource>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001352:	f000 fd99 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001356:	482e      	ldr	r0, [pc, #184]	; (8001410 <MX_TIM1_Init+0x150>)
 8001358:	f007 fde6 	bl	8008f28 <HAL_TIM_PWM_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001362:	f000 fd91 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001372:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001376:	4619      	mov	r1, r3
 8001378:	4825      	ldr	r0, [pc, #148]	; (8001410 <MX_TIM1_Init+0x150>)
 800137a:	f008 fcb1 	bl	8009ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001384:	f000 fd80 	bl	8001e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001388:	2360      	movs	r3, #96	; 0x60
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001394:	2300      	movs	r3, #0
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	4818      	ldr	r0, [pc, #96]	; (8001410 <MX_TIM1_Init+0x150>)
 80013ae:	f007 ff05 	bl	80091bc <HAL_TIM_PWM_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80013b8:	f000 fd66 	bl	8001e88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM1_Init+0x150>)
 80013f2:	f008 fd03 	bl	8009dfc <HAL_TIMEx_ConfigBreakDeadTime>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80013fc:	f000 fd44 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM1_Init+0x150>)
 8001402:	f001 fa3b 	bl	800287c <HAL_TIM_MspPostInit>

}
 8001406:	bf00      	nop
 8001408:	3768      	adds	r7, #104	; 0x68
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000c42c 	.word	0x2000c42c
 8001414:	40010000 	.word	0x40010000

08001418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <MX_TIM2_Init+0xe8>)
 800144c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001450:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <MX_TIM2_Init+0xe8>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <MX_TIM2_Init+0xe8>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <MX_TIM2_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <MX_TIM2_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <MX_TIM2_Init+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001470:	4823      	ldr	r0, [pc, #140]	; (8001500 <MX_TIM2_Init+0xe8>)
 8001472:	f007 fd03 	bl	8008e7c <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800147c:	f000 fd04 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148a:	4619      	mov	r1, r3
 800148c:	481c      	ldr	r0, [pc, #112]	; (8001500 <MX_TIM2_Init+0xe8>)
 800148e:	f007 ffad 	bl	80093ec <HAL_TIM_ConfigClockSource>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001498:	f000 fcf6 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800149c:	4818      	ldr	r0, [pc, #96]	; (8001500 <MX_TIM2_Init+0xe8>)
 800149e:	f007 fd43 	bl	8008f28 <HAL_TIM_PWM_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014a8:	f000 fcee 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	4811      	ldr	r0, [pc, #68]	; (8001500 <MX_TIM2_Init+0xe8>)
 80014bc:	f008 fc10 	bl	8009ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014c6:	f000 fcdf 	bl	8001e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ca:	2360      	movs	r3, #96	; 0x60
 80014cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	4807      	ldr	r0, [pc, #28]	; (8001500 <MX_TIM2_Init+0xe8>)
 80014e2:	f007 fe6b 	bl	80091bc <HAL_TIM_PWM_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014ec:	f000 fccc 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <MX_TIM2_Init+0xe8>)
 80014f2:	f001 f9c3 	bl	800287c <HAL_TIM_MspPostInit>

}
 80014f6:	bf00      	nop
 80014f8:	3738      	adds	r7, #56	; 0x38
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000c534 	.word	0x2000c534

08001504 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001524:	463b      	mov	r3, r7
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001536:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <MX_TIM3_Init+0xe4>)
 8001538:	4a2c      	ldr	r2, [pc, #176]	; (80015ec <MX_TIM3_Init+0xe8>)
 800153a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <MX_TIM3_Init+0xe4>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <MX_TIM3_Init+0xe4>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <MX_TIM3_Init+0xe4>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <MX_TIM3_Init+0xe4>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <MX_TIM3_Init+0xe4>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800155a:	4823      	ldr	r0, [pc, #140]	; (80015e8 <MX_TIM3_Init+0xe4>)
 800155c:	f007 fc8e 	bl	8008e7c <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001566:	f000 fc8f 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001574:	4619      	mov	r1, r3
 8001576:	481c      	ldr	r0, [pc, #112]	; (80015e8 <MX_TIM3_Init+0xe4>)
 8001578:	f007 ff38 	bl	80093ec <HAL_TIM_ConfigClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001582:	f000 fc81 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001586:	4818      	ldr	r0, [pc, #96]	; (80015e8 <MX_TIM3_Init+0xe4>)
 8001588:	f007 fcce 	bl	8008f28 <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001592:	f000 fc79 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <MX_TIM3_Init+0xe4>)
 80015a6:	f008 fb9b 	bl	8009ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015b0:	f000 fc6a 	bl	8001e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_TIM3_Init+0xe4>)
 80015cc:	f007 fdf6 	bl	80091bc <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015d6:	f000 fc57 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MX_TIM3_Init+0xe4>)
 80015dc:	f001 f94e 	bl	800287c <HAL_TIM_MspPostInit>

}
 80015e0:	bf00      	nop
 80015e2:	3738      	adds	r7, #56	; 0x38
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000c20c 	.word	0x2000c20c
 80015ec:	40000400 	.word	0x40000400

080015f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	; 0x38
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001622:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <MX_TIM5_Init+0xe4>)
 8001624:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <MX_TIM5_Init+0xe8>)
 8001626:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <MX_TIM5_Init+0xe4>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <MX_TIM5_Init+0xe4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <MX_TIM5_Init+0xe4>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <MX_TIM5_Init+0xe4>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <MX_TIM5_Init+0xe4>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001646:	4823      	ldr	r0, [pc, #140]	; (80016d4 <MX_TIM5_Init+0xe4>)
 8001648:	f007 fc18 	bl	8008e7c <HAL_TIM_Base_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001652:	f000 fc19 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800165c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001660:	4619      	mov	r1, r3
 8001662:	481c      	ldr	r0, [pc, #112]	; (80016d4 <MX_TIM5_Init+0xe4>)
 8001664:	f007 fec2 	bl	80093ec <HAL_TIM_ConfigClockSource>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800166e:	f000 fc0b 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001672:	4818      	ldr	r0, [pc, #96]	; (80016d4 <MX_TIM5_Init+0xe4>)
 8001674:	f007 fc58 	bl	8008f28 <HAL_TIM_PWM_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800167e:	f000 fc03 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	4810      	ldr	r0, [pc, #64]	; (80016d4 <MX_TIM5_Init+0xe4>)
 8001692:	f008 fb25 	bl	8009ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800169c:	f000 fbf4 	bl	8001e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a0:	2360      	movs	r3, #96	; 0x60
 80016a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016b0:	463b      	mov	r3, r7
 80016b2:	220c      	movs	r2, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <MX_TIM5_Init+0xe4>)
 80016b8:	f007 fd80 	bl	80091bc <HAL_TIM_PWM_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80016c2:	f000 fbe1 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <MX_TIM5_Init+0xe4>)
 80016c8:	f001 f8d8 	bl	800287c <HAL_TIM_MspPostInit>

}
 80016cc:	bf00      	nop
 80016ce:	3738      	adds	r7, #56	; 0x38
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2000c1cc 	.word	0x2000c1cc
 80016d8:	40000c00 	.word	0x40000c00

080016dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <MX_TIM8_Init+0x9c>)
 80016fc:	4a1f      	ldr	r2, [pc, #124]	; (800177c <MX_TIM8_Init+0xa0>)
 80016fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_TIM8_Init+0x9c>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_TIM8_Init+0x9c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_TIM8_Init+0x9c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_TIM8_Init+0x9c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_TIM8_Init+0x9c>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_TIM8_Init+0x9c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001724:	4814      	ldr	r0, [pc, #80]	; (8001778 <MX_TIM8_Init+0x9c>)
 8001726:	f007 fba9 	bl	8008e7c <HAL_TIM_Base_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001730:	f000 fbaa 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001738:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4619      	mov	r1, r3
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_TIM8_Init+0x9c>)
 8001742:	f007 fe53 	bl	80093ec <HAL_TIM_ConfigClockSource>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800174c:	f000 fb9c 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_TIM8_Init+0x9c>)
 8001762:	f008 fabd 	bl	8009ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800176c:	f000 fb8c 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000c014 	.word	0x2000c014
 800177c:	40010400 	.word	0x40010400

08001780 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_TIM12_Init+0x80>)
 800179a:	4a1a      	ldr	r2, [pc, #104]	; (8001804 <MX_TIM12_Init+0x84>)
 800179c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MX_TIM12_Init+0x80>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_TIM12_Init+0x80>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_TIM12_Init+0x80>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <MX_TIM12_Init+0x80>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_TIM12_Init+0x80>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017bc:	4810      	ldr	r0, [pc, #64]	; (8001800 <MX_TIM12_Init+0x80>)
 80017be:	f007 fbb3 	bl	8008f28 <HAL_TIM_PWM_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 80017c8:	f000 fb5e 	bl	8001e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017cc:	2360      	movs	r3, #96	; 0x60
 80017ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <MX_TIM12_Init+0x80>)
 80017e4:	f007 fcea 	bl	80091bc <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 80017ee:	f000 fb4b 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <MX_TIM12_Init+0x80>)
 80017f4:	f001 f842 	bl	800287c <HAL_TIM_MspPostInit>

}
 80017f8:	bf00      	nop
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000c59c 	.word	0x2000c59c
 8001804:	40001800 	.word	0x40001800

08001808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_USART1_UART_Init+0x58>)
 800180e:	4a15      	ldr	r2, [pc, #84]	; (8001864 <MX_USART1_UART_Init+0x5c>)
 8001810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART1_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART1_UART_Init+0x58>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART1_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USART1_UART_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USART1_UART_Init+0x58>)
 800184c:	f008 fb72 	bl	8009f34 <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001856:	f000 fb17 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000c38c 	.word	0x2000c38c
 8001864:	40011000 	.word	0x40011000

08001868 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <MX_USART6_UART_Init+0x5c>)
 8001870:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_USART6_UART_Init+0x58>)
 80018ac:	f008 fb42 	bl	8009f34 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80018b6:	f000 fae7 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000c46c 	.word	0x2000c46c
 80018c4:	40011400 	.word	0x40011400

080018c8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018e0:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <MX_FMC_Init+0x14c>)
 80018e2:	4a4d      	ldr	r2, [pc, #308]	; (8001a18 <MX_FMC_Init+0x150>)
 80018e4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80018e6:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <MX_FMC_Init+0x14c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80018ec:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <MX_FMC_Init+0x14c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80018f2:	4b48      	ldr	r3, [pc, #288]	; (8001a14 <MX_FMC_Init+0x14c>)
 80018f4:	2204      	movs	r2, #4
 80018f6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80018f8:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <MX_FMC_Init+0x14c>)
 80018fa:	2210      	movs	r2, #16
 80018fc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <MX_FMC_Init+0x14c>)
 8001900:	2240      	movs	r2, #64	; 0x40
 8001902:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001904:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <MX_FMC_Init+0x14c>)
 8001906:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800190a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800190c:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <MX_FMC_Init+0x14c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <MX_FMC_Init+0x14c>)
 8001914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001918:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <MX_FMC_Init+0x14c>)
 800191c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001922:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <MX_FMC_Init+0x14c>)
 8001924:	2200      	movs	r2, #0
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001928:	2302      	movs	r3, #2
 800192a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800192c:	2307      	movs	r3, #7
 800192e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001930:	2304      	movs	r3, #4
 8001932:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001934:	2307      	movs	r3, #7
 8001936:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001938:	2303      	movs	r3, #3
 800193a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800193c:	2302      	movs	r3, #2
 800193e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001940:	2302      	movs	r3, #2
 8001942:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	4619      	mov	r1, r3
 8001948:	4832      	ldr	r0, [pc, #200]	; (8001a14 <MX_FMC_Init+0x14c>)
 800194a:	f007 f929 	bl	8008ba0 <HAL_SDRAM_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001954:	f000 fa98 	bl	8001e88 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <MX_FMC_Init+0x154>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <MX_FMC_Init+0x154>)
 8001964:	2210      	movs	r2, #16
 8001966:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001968:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <MX_FMC_Init+0x154>)
 800196a:	2201      	movs	r2, #1
 800196c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <MX_FMC_Init+0x154>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001978:	4928      	ldr	r1, [pc, #160]	; (8001a1c <MX_FMC_Init+0x154>)
 800197a:	4826      	ldr	r0, [pc, #152]	; (8001a14 <MX_FMC_Init+0x14c>)
 800197c:	f007 f944 	bl	8008c08 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f001 fba3 	bl	80030cc <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <MX_FMC_Init+0x154>)
 8001988:	2202      	movs	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800198c:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <MX_FMC_Init+0x154>)
 800198e:	2210      	movs	r2, #16
 8001990:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <MX_FMC_Init+0x154>)
 8001994:	2201      	movs	r2, #1
 8001996:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001998:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <MX_FMC_Init+0x154>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800199e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a2:	491e      	ldr	r1, [pc, #120]	; (8001a1c <MX_FMC_Init+0x154>)
 80019a4:	481b      	ldr	r0, [pc, #108]	; (8001a14 <MX_FMC_Init+0x14c>)
 80019a6:	f007 f92f 	bl	8008c08 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_FMC_Init+0x154>)
 80019ac:	2203      	movs	r2, #3
 80019ae:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_FMC_Init+0x154>)
 80019b2:	2210      	movs	r2, #16
 80019b4:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_FMC_Init+0x154>)
 80019b8:	2208      	movs	r2, #8
 80019ba:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_FMC_Init+0x154>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80019c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c6:	4915      	ldr	r1, [pc, #84]	; (8001a1c <MX_FMC_Init+0x154>)
 80019c8:	4812      	ldr	r0, [pc, #72]	; (8001a14 <MX_FMC_Init+0x14c>)
 80019ca:	f007 f91d 	bl	8008c08 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 80019ce:	f44f 730c 	mov.w	r3, #560	; 0x230
 80019d2:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_FMC_Init+0x154>)
 80019d6:	2204      	movs	r2, #4
 80019d8:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_FMC_Init+0x154>)
 80019dc:	2210      	movs	r2, #16
 80019de:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_FMC_Init+0x154>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <MX_FMC_Init+0x154>)
 80019ea:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80019ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f0:	490a      	ldr	r1, [pc, #40]	; (8001a1c <MX_FMC_Init+0x154>)
 80019f2:	4808      	ldr	r0, [pc, #32]	; (8001a14 <MX_FMC_Init+0x14c>)
 80019f4:	f007 f908 	bl	8008c08 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80019f8:	f240 712b 	movw	r1, #1835	; 0x72b
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_FMC_Init+0x14c>)
 80019fe:	f007 f92e 	bl	8008c5e <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8001a02:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001a06:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a0a:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000c5dc 	.word	0x2000c5dc
 8001a18:	a0000140 	.word	0xa0000140
 8001a1c:	20000370 	.word	0x20000370

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b090      	sub	sp, #64	; 0x40
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a36:	4baf      	ldr	r3, [pc, #700]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4aae      	ldr	r2, [pc, #696]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4bac      	ldr	r3, [pc, #688]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a4e:	4ba9      	ldr	r3, [pc, #676]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4aa8      	ldr	r2, [pc, #672]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4ba6      	ldr	r3, [pc, #664]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4ba3      	ldr	r3, [pc, #652]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4aa2      	ldr	r2, [pc, #648]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4ba0      	ldr	r3, [pc, #640]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7e:	4b9d      	ldr	r3, [pc, #628]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a9c      	ldr	r2, [pc, #624]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b9a      	ldr	r3, [pc, #616]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	4b97      	ldr	r3, [pc, #604]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a96      	ldr	r2, [pc, #600]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b94      	ldr	r3, [pc, #592]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b91      	ldr	r3, [pc, #580]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a90      	ldr	r2, [pc, #576]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b8e      	ldr	r3, [pc, #568]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ac6:	4b8b      	ldr	r3, [pc, #556]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a8a      	ldr	r2, [pc, #552]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ade:	4b85      	ldr	r3, [pc, #532]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a84      	ldr	r2, [pc, #528]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b82      	ldr	r3, [pc, #520]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001af6:	4b7f      	ldr	r3, [pc, #508]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a7e      	ldr	r2, [pc, #504]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001afc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b7c      	ldr	r3, [pc, #496]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b0e:	4b79      	ldr	r3, [pc, #484]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a78      	ldr	r2, [pc, #480]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001b14:	f043 0320 	orr.w	r3, r3, #32
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b26:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a72      	ldr	r2, [pc, #456]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b70      	ldr	r3, [pc, #448]	; (8001cf4 <MX_GPIO_Init+0x2d4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2120      	movs	r1, #32
 8001b42:	486d      	ldr	r0, [pc, #436]	; (8001cf8 <MX_GPIO_Init+0x2d8>)
 8001b44:	f003 fbb8 	bl	80052b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	210c      	movs	r1, #12
 8001b4c:	486b      	ldr	r0, [pc, #428]	; (8001cfc <MX_GPIO_Init+0x2dc>)
 8001b4e:	f003 fbb3 	bl	80052b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	2108      	movs	r1, #8
 8001b56:	486a      	ldr	r0, [pc, #424]	; (8001d00 <MX_GPIO_Init+0x2e0>)
 8001b58:	f003 fbae 	bl	80052b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b62:	4866      	ldr	r0, [pc, #408]	; (8001cfc <MX_GPIO_Init+0x2dc>)
 8001b64:	f003 fba8 	bl	80052b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6e:	4865      	ldr	r0, [pc, #404]	; (8001d04 <MX_GPIO_Init+0x2e4>)
 8001b70:	f003 fba2 	bl	80052b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	21c8      	movs	r1, #200	; 0xc8
 8001b78:	4863      	ldr	r0, [pc, #396]	; (8001d08 <MX_GPIO_Init+0x2e8>)
 8001b7a:	f003 fb9d 	bl	80052b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001b7e:	2308      	movs	r3, #8
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b82:	2300      	movs	r3, #0
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8e:	4619      	mov	r1, r3
 8001b90:	485e      	ldr	r0, [pc, #376]	; (8001d0c <MX_GPIO_Init+0x2ec>)
 8001b92:	f003 f9cf 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001b96:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ba8:	230b      	movs	r3, #11
 8001baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4855      	ldr	r0, [pc, #340]	; (8001d08 <MX_GPIO_Init+0x2e8>)
 8001bb4:	f003 f9be 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001bb8:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bca:	230a      	movs	r3, #10
 8001bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	484e      	ldr	r0, [pc, #312]	; (8001d10 <MX_GPIO_Init+0x2f0>)
 8001bd6:	f003 f9ad 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be0:	2300      	movs	r3, #0
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bec:	4619      	mov	r1, r3
 8001bee:	4849      	ldr	r0, [pc, #292]	; (8001d14 <MX_GPIO_Init+0x2f4>)
 8001bf0:	f003 f9a0 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001bf4:	2340      	movs	r3, #64	; 0x40
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bf8:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <MX_GPIO_Init+0x2f8>)
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c04:	4619      	mov	r1, r3
 8001c06:	483c      	ldr	r0, [pc, #240]	; (8001cf8 <MX_GPIO_Init+0x2d8>)
 8001c08:	f003 f994 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001c0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c1e:	230a      	movs	r3, #10
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	483c      	ldr	r0, [pc, #240]	; (8001d1c <MX_GPIO_Init+0x2fc>)
 8001c2a:	f003 f983 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c42:	4619      	mov	r1, r3
 8001c44:	482c      	ldr	r0, [pc, #176]	; (8001cf8 <MX_GPIO_Init+0x2d8>)
 8001c46:	f003 f975 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001c4a:	f241 030c 	movw	r3, #4108	; 0x100c
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c60:	4619      	mov	r1, r3
 8001c62:	4826      	ldr	r0, [pc, #152]	; (8001cfc <MX_GPIO_Init+0x2dc>)
 8001c64:	f003 f966 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4828      	ldr	r0, [pc, #160]	; (8001d20 <MX_GPIO_Init+0x300>)
 8001c7e:	f003 f959 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001c82:	2308      	movs	r3, #8
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c96:	4619      	mov	r1, r3
 8001c98:	4819      	ldr	r0, [pc, #100]	; (8001d00 <MX_GPIO_Init+0x2e0>)
 8001c9a:	f003 f94b 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c9e:	2310      	movs	r3, #16
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4811      	ldr	r0, [pc, #68]	; (8001cf8 <MX_GPIO_Init+0x2d8>)
 8001cb2:	f003 f93f 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001cb6:	f248 0304 	movw	r3, #32772	; 0x8004
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480e      	ldr	r0, [pc, #56]	; (8001d04 <MX_GPIO_Init+0x2e4>)
 8001ccc:	f003 f932 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4806      	ldr	r0, [pc, #24]	; (8001d04 <MX_GPIO_Init+0x2e4>)
 8001cea:	f003 f923 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf2:	e017      	b.n	8001d24 <MX_GPIO_Init+0x304>
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	40022800 	.word	0x40022800
 8001d04:	40021c00 	.word	0x40021c00
 8001d08:	40021800 	.word	0x40021800
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40022400 	.word	0x40022400
 8001d18:	10120000 	.word	0x10120000
 8001d1c:	40020000 	.word	0x40020000
 8001d20:	40020800 	.word	0x40020800
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d26:	4b44      	ldr	r3, [pc, #272]	; (8001e38 <MX_GPIO_Init+0x418>)
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	4619      	mov	r1, r3
 8001d34:	4841      	ldr	r0, [pc, #260]	; (8001e3c <MX_GPIO_Init+0x41c>)
 8001d36:	f003 f8fd 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d3a:	2310      	movs	r3, #16
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d52:	4619      	mov	r1, r3
 8001d54:	483a      	ldr	r0, [pc, #232]	; (8001e40 <MX_GPIO_Init+0x420>)
 8001d56:	f003 f8ed 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001d5a:	23c8      	movs	r3, #200	; 0xc8
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4834      	ldr	r0, [pc, #208]	; (8001e44 <MX_GPIO_Init+0x424>)
 8001d72:	f003 f8df 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001d76:	2305      	movs	r3, #5
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d86:	230a      	movs	r3, #10
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	482d      	ldr	r0, [pc, #180]	; (8001e48 <MX_GPIO_Init+0x428>)
 8001d92:	f003 f8cf 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d96:	2332      	movs	r3, #50	; 0x32
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001da6:	230b      	movs	r3, #11
 8001da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dae:	4619      	mov	r1, r3
 8001db0:	4825      	ldr	r0, [pc, #148]	; (8001e48 <MX_GPIO_Init+0x428>)
 8001db2:	f003 f8bf 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001db6:	2304      	movs	r3, #4
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	481e      	ldr	r0, [pc, #120]	; (8001e44 <MX_GPIO_Init+0x424>)
 8001dca:	f003 f8b3 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001dce:	2386      	movs	r3, #134	; 0x86
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dde:	230b      	movs	r3, #11
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de6:	4619      	mov	r1, r3
 8001de8:	4818      	ldr	r0, [pc, #96]	; (8001e4c <MX_GPIO_Init+0x42c>)
 8001dea:	f003 f8a3 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001dee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df4:	2312      	movs	r3, #18
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e00:	2304      	movs	r3, #4
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <MX_GPIO_Init+0x420>)
 8001e0c:	f003 f892 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e10:	2328      	movs	r3, #40	; 0x28
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e20:	230a      	movs	r3, #10
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4808      	ldr	r0, [pc, #32]	; (8001e4c <MX_GPIO_Init+0x42c>)
 8001e2c:	f003 f882 	bl	8004f34 <HAL_GPIO_Init>

}
 8001e30:	bf00      	nop
 8001e32:	3740      	adds	r7, #64	; 0x40
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	10120000 	.word	0x10120000
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40021c00 	.word	0x40021c00
 8001e44:	40021800 	.word	0x40021800
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40020000 	.word	0x40020000

08001e50 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001e58:	f00c fbaa 	bl	800e5b0 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f009 fe6d 	bl	800bb3c <osDelay>
 8001e62:	e7fb      	b.n	8001e5c <StartDefaultTask+0xc>

08001e64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e76:	f001 f909 	bl	800308c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40001000 	.word	0x40001000

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	210f      	movs	r1, #15
 8001ed2:	f06f 0001 	mvn.w	r0, #1
 8001ed6:	f002 f9ff 	bl	80042d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <HAL_ADC_MspInit+0xa4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d13c      	bne.n	8001f84 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_ADC_MspInit+0xa8>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <HAL_ADC_MspInit+0xa8>)
 8001f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_ADC_MspInit+0xa8>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_ADC_MspInit+0xa8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a1a      	ldr	r2, [pc, #104]	; (8001f90 <HAL_ADC_MspInit+0xa8>)
 8001f28:	f043 0320 	orr.w	r3, r3, #32
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_ADC_MspInit+0xa8>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_ADC_MspInit+0xa8>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <HAL_ADC_MspInit+0xa8>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_ADC_MspInit+0xa8>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8001f52:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001f56:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	480b      	ldr	r0, [pc, #44]	; (8001f94 <HAL_ADC_MspInit+0xac>)
 8001f68:	f002 ffe4 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f70:	2303      	movs	r3, #3
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4806      	ldr	r0, [pc, #24]	; (8001f98 <HAL_ADC_MspInit+0xb0>)
 8001f80:	f002 ffd8 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40012200 	.word	0x40012200
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40021400 	.word	0x40021400
 8001f98:	40020000 	.word	0x40020000

08001f9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_CAN_MspInit+0x8c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d130      	bne.n	8002020 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_CAN_MspInit+0x90>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_CAN_MspInit+0x90>)
 8001fc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_CAN_MspInit+0x90>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_CAN_MspInit+0x90>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a14      	ldr	r2, [pc, #80]	; (800202c <HAL_CAN_MspInit+0x90>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_CAN_MspInit+0x90>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002000:	2309      	movs	r3, #9
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	4809      	ldr	r0, [pc, #36]	; (8002030 <HAL_CAN_MspInit+0x94>)
 800200c:	f002 ff92 	bl	8004f34 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2105      	movs	r1, #5
 8002014:	2014      	movs	r0, #20
 8002016:	f002 f95f 	bl	80042d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800201a:	2014      	movs	r0, #20
 800201c:	f002 f978 	bl	8004310 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40006400 	.word	0x40006400
 800202c:	40023800 	.word	0x40023800
 8002030:	40020400 	.word	0x40020400

08002034 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_CRC_MspInit+0x38>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10b      	bne.n	800205e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_CRC_MspInit+0x3c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_CRC_MspInit+0x3c>)
 800204c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_CRC_MspInit+0x3c>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023000 	.word	0x40023000
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a50      	ldr	r2, [pc, #320]	; (80021d4 <HAL_DCMI_MspInit+0x160>)
 8002092:	4293      	cmp	r3, r2
 8002094:	f040 809a 	bne.w	80021cc <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002098:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	4a4e      	ldr	r2, [pc, #312]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6353      	str	r3, [r2, #52]	; 0x34
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b0:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	4a48      	ldr	r2, [pc, #288]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	6313      	str	r3, [r2, #48]	; 0x30
 80020bc:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c8:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	4a42      	ldr	r2, [pc, #264]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6313      	str	r3, [r2, #48]	; 0x30
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020e0:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4a3c      	ldr	r2, [pc, #240]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ea:	6313      	str	r3, [r2, #48]	; 0x30
 80020ec:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f8:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4a36      	ldr	r2, [pc, #216]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 80020fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002102:	6313      	str	r3, [r2, #48]	; 0x30
 8002104:	4b34      	ldr	r3, [pc, #208]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	4a30      	ldr	r2, [pc, #192]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6313      	str	r3, [r2, #48]	; 0x30
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <HAL_DCMI_MspInit+0x164>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002128:	2360      	movs	r3, #96	; 0x60
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002138:	230d      	movs	r3, #13
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002140:	4619      	mov	r1, r3
 8002142:	4826      	ldr	r0, [pc, #152]	; (80021dc <HAL_DCMI_MspInit+0x168>)
 8002144:	f002 fef6 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002148:	2308      	movs	r3, #8
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002158:	230d      	movs	r3, #13
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	4619      	mov	r1, r3
 8002162:	481f      	ldr	r0, [pc, #124]	; (80021e0 <HAL_DCMI_MspInit+0x16c>)
 8002164:	f002 fee6 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800217a:	230d      	movs	r3, #13
 800217c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	4817      	ldr	r0, [pc, #92]	; (80021e4 <HAL_DCMI_MspInit+0x170>)
 8002186:	f002 fed5 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800218a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800219c:	230d      	movs	r3, #13
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	4619      	mov	r1, r3
 80021a6:	4810      	ldr	r0, [pc, #64]	; (80021e8 <HAL_DCMI_MspInit+0x174>)
 80021a8:	f002 fec4 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80021ac:	2350      	movs	r3, #80	; 0x50
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021bc:	230d      	movs	r3, #13
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	4619      	mov	r1, r3
 80021c6:	4809      	ldr	r0, [pc, #36]	; (80021ec <HAL_DCMI_MspInit+0x178>)
 80021c8:	f002 feb4 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3738      	adds	r7, #56	; 0x38
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	50050000 	.word	0x50050000
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40020c00 	.word	0x40020c00
 80021e4:	40021800 	.word	0x40021800
 80021e8:	40021c00 	.word	0x40021c00
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_DMA2D_MspInit+0x44>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d113      	bne.n	800222a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002202:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_DMA2D_MspInit+0x48>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <HAL_DMA2D_MspInit+0x48>)
 8002208:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_DMA2D_MspInit+0x48>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2105      	movs	r1, #5
 800221e:	205a      	movs	r0, #90	; 0x5a
 8002220:	f002 f85a 	bl	80042d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002224:	205a      	movs	r0, #90	; 0x5a
 8002226:	f002 f873 	bl	8004310 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	4002b000 	.word	0x4002b000
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_DMA2D_MspDeInit+0x2c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d108      	bne.n	8002260 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <HAL_DMA2D_MspDeInit+0x30>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a06      	ldr	r2, [pc, #24]	; (800226c <HAL_DMA2D_MspDeInit+0x30>)
 8002254:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002258:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 800225a:	205a      	movs	r0, #90	; 0x5a
 800225c:	f002 f866 	bl	800432c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	4002b000 	.word	0x4002b000
 800226c:	40023800 	.word	0x40023800

08002270 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a55      	ldr	r2, [pc, #340]	; (80023e4 <HAL_LTDC_MspInit+0x174>)
 800228e:	4293      	cmp	r3, r2
 8002290:	f040 80a3 	bne.w	80023da <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002294:	4b54      	ldr	r3, [pc, #336]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	4a53      	ldr	r2, [pc, #332]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 800229a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800229e:	6453      	str	r3, [r2, #68]	; 0x44
 80022a0:	4b51      	ldr	r3, [pc, #324]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022a8:	623b      	str	r3, [r7, #32]
 80022aa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ac:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	4a4d      	ldr	r2, [pc, #308]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022b2:	f043 0310 	orr.w	r3, r3, #16
 80022b6:	6313      	str	r3, [r2, #48]	; 0x30
 80022b8:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022c4:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ce:	6313      	str	r3, [r2, #48]	; 0x30
 80022d0:	4b45      	ldr	r3, [pc, #276]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4a41      	ldr	r2, [pc, #260]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	6313      	str	r3, [r2, #48]	; 0x30
 80022e8:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022f4:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	4a3b      	ldr	r2, [pc, #236]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 80022fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002300:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4a35      	ldr	r2, [pc, #212]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	6313      	str	r3, [r2, #48]	; 0x30
 8002318:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <HAL_LTDC_MspInit+0x178>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002324:	2310      	movs	r3, #16
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002334:	230e      	movs	r3, #14
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	4619      	mov	r1, r3
 800233e:	482b      	ldr	r0, [pc, #172]	; (80023ec <HAL_LTDC_MspInit+0x17c>)
 8002340:	f002 fdf8 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002344:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002356:	230e      	movs	r3, #14
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800235a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235e:	4619      	mov	r1, r3
 8002360:	4823      	ldr	r0, [pc, #140]	; (80023f0 <HAL_LTDC_MspInit+0x180>)
 8002362:	f002 fde7 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002366:	23f7      	movs	r3, #247	; 0xf7
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002376:	230e      	movs	r3, #14
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800237a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237e:	4619      	mov	r1, r3
 8002380:	481c      	ldr	r0, [pc, #112]	; (80023f4 <HAL_LTDC_MspInit+0x184>)
 8002382:	f002 fdd7 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002398:	2309      	movs	r3, #9
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	4619      	mov	r1, r3
 80023a2:	4815      	ldr	r0, [pc, #84]	; (80023f8 <HAL_LTDC_MspInit+0x188>)
 80023a4:	f002 fdc6 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80023a8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023ba:	230e      	movs	r3, #14
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c2:	4619      	mov	r1, r3
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <HAL_LTDC_MspInit+0x18c>)
 80023c6:	f002 fdb5 	bl	8004f34 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2105      	movs	r1, #5
 80023ce:	2058      	movs	r0, #88	; 0x58
 80023d0:	f001 ff82 	bl	80042d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80023d4:	2058      	movs	r0, #88	; 0x58
 80023d6:	f001 ff9b 	bl	8004310 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80023da:	bf00      	nop
 80023dc:	3738      	adds	r7, #56	; 0x38
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40016800 	.word	0x40016800
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40022400 	.word	0x40022400
 80023f4:	40022800 	.word	0x40022800
 80023f8:	40021800 	.word	0x40021800
 80023fc:	40022000 	.word	0x40022000

08002400 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a3b      	ldr	r2, [pc, #236]	; (800250c <HAL_QSPI_MspInit+0x10c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d170      	bne.n	8002504 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002422:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	4a3a      	ldr	r2, [pc, #232]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	6393      	str	r3, [r2, #56]	; 0x38
 800242e:	4b38      	ldr	r3, [pc, #224]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800243a:	4b35      	ldr	r3, [pc, #212]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a34      	ldr	r2, [pc, #208]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b32      	ldr	r3, [pc, #200]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a2e      	ldr	r2, [pc, #184]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800246a:	4b29      	ldr	r3, [pc, #164]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a28      	ldr	r2, [pc, #160]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 8002470:	f043 0308 	orr.w	r3, r3, #8
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b26      	ldr	r3, [pc, #152]	; (8002510 <HAL_QSPI_MspInit+0x110>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002482:	2304      	movs	r3, #4
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002492:	2309      	movs	r3, #9
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	481d      	ldr	r0, [pc, #116]	; (8002514 <HAL_QSPI_MspInit+0x114>)
 800249e:	f002 fd49 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80024a2:	2340      	movs	r3, #64	; 0x40
 80024a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80024b2:	230a      	movs	r3, #10
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	4619      	mov	r1, r3
 80024bc:	4816      	ldr	r0, [pc, #88]	; (8002518 <HAL_QSPI_MspInit+0x118>)
 80024be:	f002 fd39 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024c2:	2304      	movs	r3, #4
 80024c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80024d2:	2309      	movs	r3, #9
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d6:	f107 031c 	add.w	r3, r7, #28
 80024da:	4619      	mov	r1, r3
 80024dc:	480e      	ldr	r0, [pc, #56]	; (8002518 <HAL_QSPI_MspInit+0x118>)
 80024de:	f002 fd29 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80024e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80024f4:	2309      	movs	r3, #9
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	4619      	mov	r1, r3
 80024fe:	4807      	ldr	r0, [pc, #28]	; (800251c <HAL_QSPI_MspInit+0x11c>)
 8002500:	f002 fd18 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002504:	bf00      	nop
 8002506:	3730      	adds	r7, #48	; 0x30
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	a0001000 	.word	0xa0001000
 8002510:	40023800 	.word	0x40023800
 8002514:	40021000 	.word	0x40021000
 8002518:	40020400 	.word	0x40020400
 800251c:	40020c00 	.word	0x40020c00

08002520 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_RTC_MspInit+0x2c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d105      	bne.n	800253e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_RTC_MspInit+0x30>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	4a06      	ldr	r2, [pc, #24]	; (8002550 <HAL_RTC_MspInit+0x30>)
 8002538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40002800 	.word	0x40002800
 8002550:	40023800 	.word	0x40023800

08002554 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a25      	ldr	r2, [pc, #148]	; (8002608 <HAL_SD_MspInit+0xb4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d144      	bne.n	8002600 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <HAL_SD_MspInit+0xb8>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a24      	ldr	r2, [pc, #144]	; (800260c <HAL_SD_MspInit+0xb8>)
 800257c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b22      	ldr	r3, [pc, #136]	; (800260c <HAL_SD_MspInit+0xb8>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <HAL_SD_MspInit+0xb8>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a1e      	ldr	r2, [pc, #120]	; (800260c <HAL_SD_MspInit+0xb8>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <HAL_SD_MspInit+0xb8>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_SD_MspInit+0xb8>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_SD_MspInit+0xb8>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_SD_MspInit+0xb8>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80025be:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80025c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80025d0:	230c      	movs	r3, #12
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4619      	mov	r1, r3
 80025da:	480d      	ldr	r0, [pc, #52]	; (8002610 <HAL_SD_MspInit+0xbc>)
 80025dc:	f002 fcaa 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80025e0:	2304      	movs	r3, #4
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80025f0:	230c      	movs	r3, #12
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4619      	mov	r1, r3
 80025fa:	4806      	ldr	r0, [pc, #24]	; (8002614 <HAL_SD_MspInit+0xc0>)
 80025fc:	f002 fc9a 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002600:	bf00      	nop
 8002602:	3728      	adds	r7, #40	; 0x28
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40023800 	.word	0x40023800
 8002610:	40020800 	.word	0x40020800
 8002614:	40020c00 	.word	0x40020c00

08002618 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002638:	d127      	bne.n	800268a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_SPDIFRX_MspInit+0x7c>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a15      	ldr	r2, [pc, #84]	; (8002694 <HAL_SPDIFRX_MspInit+0x7c>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_SPDIFRX_MspInit+0x7c>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_SPDIFRX_MspInit+0x7c>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <HAL_SPDIFRX_MspInit+0x7c>)
 8002658:	f043 0308 	orr.w	r3, r3, #8
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <HAL_SPDIFRX_MspInit+0x7c>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800267a:	2308      	movs	r3, #8
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	4804      	ldr	r0, [pc, #16]	; (8002698 <HAL_SPDIFRX_MspInit+0x80>)
 8002686:	f002 fc55 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3728      	adds	r7, #40	; 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	40020c00 	.word	0x40020c00

0800269c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a25      	ldr	r2, [pc, #148]	; (8002750 <HAL_SPI_MspInit+0xb4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d144      	bne.n	8002748 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_SPI_MspInit+0xb8>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a24      	ldr	r2, [pc, #144]	; (8002754 <HAL_SPI_MspInit+0xb8>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_SPI_MspInit+0xb8>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_SPI_MspInit+0xb8>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <HAL_SPI_MspInit+0xb8>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_SPI_MspInit+0xb8>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_SPI_MspInit+0xb8>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a18      	ldr	r2, [pc, #96]	; (8002754 <HAL_SPI_MspInit+0xb8>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_SPI_MspInit+0xb8>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002706:	2302      	movs	r3, #2
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002716:	2305      	movs	r3, #5
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <HAL_SPI_MspInit+0xbc>)
 8002722:	f002 fc07 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002726:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002738:	2305      	movs	r3, #5
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4619      	mov	r1, r3
 8002742:	4806      	ldr	r0, [pc, #24]	; (800275c <HAL_SPI_MspInit+0xc0>)
 8002744:	f002 fbf6 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002748:	bf00      	nop
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40003800 	.word	0x40003800
 8002754:	40023800 	.word	0x40023800
 8002758:	40022000 	.word	0x40022000
 800275c:	40020400 	.word	0x40020400

08002760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a2e      	ldr	r2, [pc, #184]	; (8002828 <HAL_TIM_Base_MspInit+0xc8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d10c      	bne.n	800278c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002772:	4b2e      	ldr	r3, [pc, #184]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a2d      	ldr	r2, [pc, #180]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800278a:	e046      	b.n	800281a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d10c      	bne.n	80027b0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a24      	ldr	r2, [pc, #144]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	69bb      	ldr	r3, [r7, #24]
}
 80027ae:	e034      	b.n	800281a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_TIM_Base_MspInit+0xd0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d10c      	bne.n	80027d4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a1b      	ldr	r2, [pc, #108]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]
}
 80027d2:	e022      	b.n	800281a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a16      	ldr	r2, [pc, #88]	; (8002834 <HAL_TIM_Base_MspInit+0xd4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10c      	bne.n	80027f8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
}
 80027f6:	e010      	b.n	800281a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_TIM_Base_MspInit+0xd8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d10b      	bne.n	800281a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a09      	ldr	r2, [pc, #36]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_TIM_Base_MspInit+0xcc>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
}
 800281a:	bf00      	nop
 800281c:	3724      	adds	r7, #36	; 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40010000 	.word	0x40010000
 800282c:	40023800 	.word	0x40023800
 8002830:	40000400 	.word	0x40000400
 8002834:	40000c00 	.word	0x40000c00
 8002838:	40010400 	.word	0x40010400

0800283c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_TIM_PWM_MspInit+0x38>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10b      	bne.n	8002866 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_TIM_PWM_MspInit+0x3c>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a09      	ldr	r2, [pc, #36]	; (8002878 <HAL_TIM_PWM_MspInit+0x3c>)
 8002854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <HAL_TIM_PWM_MspInit+0x3c>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40001800 	.word	0x40001800
 8002878:	40023800 	.word	0x40023800

0800287c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	; 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a56      	ldr	r2, [pc, #344]	; (80029f4 <HAL_TIM_MspPostInit+0x178>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d11d      	bne.n	80028da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a55      	ldr	r2, [pc, #340]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80028b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80028cc:	f107 031c 	add.w	r3, r7, #28
 80028d0:	4619      	mov	r1, r3
 80028d2:	484a      	ldr	r0, [pc, #296]	; (80029fc <HAL_TIM_MspPostInit+0x180>)
 80028d4:	f002 fb2e 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80028d8:	e087      	b.n	80029ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d11d      	bne.n	8002920 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e4:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4a43      	ldr	r2, [pc, #268]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6313      	str	r3, [r2, #48]	; 0x30
 80028f0:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80028fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800290e:	2301      	movs	r3, #1
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 031c 	add.w	r3, r7, #28
 8002916:	4619      	mov	r1, r3
 8002918:	4838      	ldr	r0, [pc, #224]	; (80029fc <HAL_TIM_MspPostInit+0x180>)
 800291a:	f002 fb0b 	bl	8004f34 <HAL_GPIO_Init>
}
 800291e:	e064      	b.n	80029ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a36      	ldr	r2, [pc, #216]	; (8002a00 <HAL_TIM_MspPostInit+0x184>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d11c      	bne.n	8002964 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292a:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a32      	ldr	r2, [pc, #200]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002942:	2310      	movs	r3, #16
 8002944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002952:	2302      	movs	r3, #2
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	4619      	mov	r1, r3
 800295c:	4829      	ldr	r0, [pc, #164]	; (8002a04 <HAL_TIM_MspPostInit+0x188>)
 800295e:	f002 fae9 	bl	8004f34 <HAL_GPIO_Init>
}
 8002962:	e042      	b.n	80029ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <HAL_TIM_MspPostInit+0x18c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d11c      	bne.n	80029a8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800296e:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002996:	2302      	movs	r3, #2
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	481a      	ldr	r0, [pc, #104]	; (8002a0c <HAL_TIM_MspPostInit+0x190>)
 80029a2:	f002 fac7 	bl	8004f34 <HAL_GPIO_Init>
}
 80029a6:	e020      	b.n	80029ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a18      	ldr	r2, [pc, #96]	; (8002a10 <HAL_TIM_MspPostInit+0x194>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d11b      	bne.n	80029ea <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 80029b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_TIM_MspPostInit+0x17c>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80029ca:	2340      	movs	r3, #64	; 0x40
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80029da:	2309      	movs	r3, #9
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	4619      	mov	r1, r3
 80029e4:	480b      	ldr	r0, [pc, #44]	; (8002a14 <HAL_TIM_MspPostInit+0x198>)
 80029e6:	f002 faa5 	bl	8004f34 <HAL_GPIO_Init>
}
 80029ea:	bf00      	nop
 80029ec:	3730      	adds	r7, #48	; 0x30
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40010000 	.word	0x40010000
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40020400 	.word	0x40020400
 8002a08:	40000c00 	.word	0x40000c00
 8002a0c:	40022000 	.word	0x40022000
 8002a10:	40001800 	.word	0x40001800
 8002a14:	40021c00 	.word	0x40021c00

08002a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	; 0x30
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3c      	ldr	r2, [pc, #240]	; (8002b28 <HAL_UART_MspInit+0x110>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d145      	bne.n	8002ac6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a3a:	4b3c      	ldr	r3, [pc, #240]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	4a3b      	ldr	r2, [pc, #236]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002a40:	f043 0310 	orr.w	r3, r3, #16
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a35      	ldr	r2, [pc, #212]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6a:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a92:	2307      	movs	r3, #7
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4824      	ldr	r0, [pc, #144]	; (8002b30 <HAL_UART_MspInit+0x118>)
 8002a9e:	f002 fa49 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	4619      	mov	r1, r3
 8002abe:	481d      	ldr	r0, [pc, #116]	; (8002b34 <HAL_UART_MspInit+0x11c>)
 8002ac0:	f002 fa38 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ac4:	e02c      	b.n	8002b20 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1b      	ldr	r2, [pc, #108]	; (8002b38 <HAL_UART_MspInit+0x120>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d127      	bne.n	8002b20 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002ad6:	f043 0320 	orr.w	r3, r3, #32
 8002ada:	6453      	str	r3, [r2, #68]	; 0x44
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6313      	str	r3, [r2, #48]	; 0x30
 8002af4:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_UART_MspInit+0x114>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002b00:	23c0      	movs	r3, #192	; 0xc0
 8002b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b10:	2308      	movs	r3, #8
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4808      	ldr	r0, [pc, #32]	; (8002b3c <HAL_UART_MspInit+0x124>)
 8002b1c:	f002 fa0a 	bl	8004f34 <HAL_GPIO_Init>
}
 8002b20:	bf00      	nop
 8002b22:	3730      	adds	r7, #48	; 0x30
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40011000 	.word	0x40011000
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40020400 	.word	0x40020400
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40011400 	.word	0x40011400
 8002b3c:	40020800 	.word	0x40020800

08002b40 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <HAL_FMC_MspInit+0x100>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d16d      	bne.n	8002c38 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002b5c:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_FMC_MspInit+0x100>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b62:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <HAL_FMC_MspInit+0x104>)
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	4a37      	ldr	r2, [pc, #220]	; (8002c44 <HAL_FMC_MspInit+0x104>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6393      	str	r3, [r2, #56]	; 0x38
 8002b6e:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <HAL_FMC_MspInit+0x104>)
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8002b7a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b7e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b8c:	230c      	movs	r3, #12
 8002b8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	482c      	ldr	r0, [pc, #176]	; (8002c48 <HAL_FMC_MspInit+0x108>)
 8002b96:	f002 f9cd 	bl	8004f34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8002b9a:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b9e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bac:	230c      	movs	r3, #12
 8002bae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4825      	ldr	r0, [pc, #148]	; (8002c4c <HAL_FMC_MspInit+0x10c>)
 8002bb6:	f002 f9bd 	bl	8004f34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8002bba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002bbe:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bcc:	230c      	movs	r3, #12
 8002bce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	481e      	ldr	r0, [pc, #120]	; (8002c50 <HAL_FMC_MspInit+0x110>)
 8002bd6:	f002 f9ad 	bl	8004f34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8002bda:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002bde:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bec:	230c      	movs	r3, #12
 8002bee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4817      	ldr	r0, [pc, #92]	; (8002c54 <HAL_FMC_MspInit+0x114>)
 8002bf6:	f002 f99d 	bl	8004f34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002bfa:	2328      	movs	r3, #40	; 0x28
 8002bfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c0a:	230c      	movs	r3, #12
 8002c0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	4811      	ldr	r0, [pc, #68]	; (8002c58 <HAL_FMC_MspInit+0x118>)
 8002c14:	f002 f98e 	bl	8004f34 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002c18:	2308      	movs	r3, #8
 8002c1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c28:	230c      	movs	r3, #12
 8002c2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	4619      	mov	r1, r3
 8002c30:	480a      	ldr	r0, [pc, #40]	; (8002c5c <HAL_FMC_MspInit+0x11c>)
 8002c32:	f002 f97f 	bl	8004f34 <HAL_GPIO_Init>
 8002c36:	e000      	b.n	8002c3a <HAL_FMC_MspInit+0xfa>
    return;
 8002c38:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	2000039c 	.word	0x2000039c
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40021800 	.word	0x40021800
 8002c50:	40020c00 	.word	0x40020c00
 8002c54:	40021400 	.word	0x40021400
 8002c58:	40021c00 	.word	0x40021c00
 8002c5c:	40020800 	.word	0x40020800

08002c60 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c68:	f7ff ff6a 	bl	8002b40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2b      	ldr	r2, [pc, #172]	; (8002d30 <HAL_SAI_MspInit+0xbc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d124      	bne.n	8002cd0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002c86:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <HAL_SAI_MspInit+0xc0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <HAL_SAI_MspInit+0xc4>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4a29      	ldr	r2, [pc, #164]	; (8002d38 <HAL_SAI_MspInit+0xc4>)
 8002c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c98:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9a:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <HAL_SAI_MspInit+0xc4>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_SAI_MspInit+0xc0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3301      	adds	r3, #1
 8002cac:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <HAL_SAI_MspInit+0xc0>)
 8002cae:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002cb0:	23f0      	movs	r3, #240	; 0xf0
 8002cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002cc0:	230a      	movs	r3, #10
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	4619      	mov	r1, r3
 8002cca:	481c      	ldr	r0, [pc, #112]	; (8002d3c <HAL_SAI_MspInit+0xc8>)
 8002ccc:	f002 f932 	bl	8004f34 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <HAL_SAI_MspInit+0xcc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d125      	bne.n	8002d26 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_SAI_MspInit+0xc0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10b      	bne.n	8002cfa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_SAI_MspInit+0xc4>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <HAL_SAI_MspInit+0xc4>)
 8002ce8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_SAI_MspInit+0xc4>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <HAL_SAI_MspInit+0xc0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <HAL_SAI_MspInit+0xc0>)
 8002d02:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d16:	230a      	movs	r3, #10
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002d1a:	f107 0314 	add.w	r3, r7, #20
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4808      	ldr	r0, [pc, #32]	; (8002d44 <HAL_SAI_MspInit+0xd0>)
 8002d22:	f002 f907 	bl	8004f34 <HAL_GPIO_Init>

    }
}
 8002d26:	bf00      	nop
 8002d28:	3728      	adds	r7, #40	; 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40015c04 	.word	0x40015c04
 8002d34:	200003a0 	.word	0x200003a0
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40022000 	.word	0x40022000
 8002d40:	40015c24 	.word	0x40015c24
 8002d44:	40021800 	.word	0x40021800

08002d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08c      	sub	sp, #48	; 0x30
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002d58:	2200      	movs	r2, #0
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	2036      	movs	r0, #54	; 0x36
 8002d5e:	f001 fabb 	bl	80042d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002d62:	2036      	movs	r0, #54	; 0x36
 8002d64:	f001 fad4 	bl	8004310 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d68:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <HAL_InitTick+0xa0>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_InitTick+0xa0>)
 8002d6e:	f043 0310 	orr.w	r3, r3, #16
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_InitTick+0xa0>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d80:	f107 0210 	add.w	r2, r7, #16
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 fbde 	bl	800654c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002d90:	f003 fbb4 	bl	80064fc <HAL_RCC_GetPCLK1Freq>
 8002d94:	4603      	mov	r3, r0
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	4a13      	ldr	r2, [pc, #76]	; (8002dec <HAL_InitTick+0xa4>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	0c9b      	lsrs	r3, r3, #18
 8002da4:	3b01      	subs	r3, #1
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_InitTick+0xa8>)
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_InitTick+0xac>)
 8002dac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_InitTick+0xa8>)
 8002db0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002db4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002db6:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <HAL_InitTick+0xa8>)
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_InitTick+0xa8>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_InitTick+0xa8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002dc8:	4809      	ldr	r0, [pc, #36]	; (8002df0 <HAL_InitTick+0xa8>)
 8002dca:	f006 f857 	bl	8008e7c <HAL_TIM_Base_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d104      	bne.n	8002dde <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002dd4:	4806      	ldr	r0, [pc, #24]	; (8002df0 <HAL_InitTick+0xa8>)
 8002dd6:	f006 f87d 	bl	8008ed4 <HAL_TIM_Base_Start_IT>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	e000      	b.n	8002de0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3730      	adds	r7, #48	; 0x30
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	431bde83 	.word	0x431bde83
 8002df0:	2000c678 	.word	0x2000c678
 8002df4:	40001000 	.word	0x40001000

08002df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e0a:	e7fe      	b.n	8002e0a <HardFault_Handler+0x4>

08002e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e10:	e7fe      	b.n	8002e10 <MemManage_Handler+0x4>

08002e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e16:	e7fe      	b.n	8002e16 <BusFault_Handler+0x4>

08002e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e1c:	e7fe      	b.n	8002e1c <UsageFault_Handler+0x4>

08002e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e30:	4802      	ldr	r0, [pc, #8]	; (8002e3c <CAN1_RX0_IRQHandler+0x10>)
 8002e32:	f000 ff4d 	bl	8003cd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000c574 	.word	0x2000c574

08002e40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <TIM6_DAC_IRQHandler+0x10>)
 8002e46:	f006 f89a 	bl	8008f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	2000c678 	.word	0x2000c678

08002e54 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <LTDC_IRQHandler+0x10>)
 8002e5a:	f002 fb17 	bl	800548c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000c24c 	.word	0x2000c24c

08002e68 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <DMA2D_IRQHandler+0x10>)
 8002e6e:	f001 fe22 	bl	8004ab6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000c4ec 	.word	0x2000c4ec

08002e7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
	return 1;
 8002e80:	2301      	movs	r3, #1
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <_kill>:

int _kill(int pid, int sig)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e96:	f021 f819 	bl	8023ecc <__errno>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	2316      	movs	r3, #22
 8002e9e:	6013      	str	r3, [r2, #0]
	return -1;
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <_exit>:

void _exit (int status)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ffe7 	bl	8002e8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ebe:	e7fe      	b.n	8002ebe <_exit+0x12>

08002ec0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e00a      	b.n	8002ee8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ed2:	f3af 8000 	nop.w
 8002ed6:	4601      	mov	r1, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	60ba      	str	r2, [r7, #8]
 8002ede:	b2ca      	uxtb	r2, r1
 8002ee0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	dbf0      	blt.n	8002ed2 <_read+0x12>
	}

return len;
 8002ef0:	687b      	ldr	r3, [r7, #4]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e009      	b.n	8002f20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	60ba      	str	r2, [r7, #8]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dbf1      	blt.n	8002f0c <_write+0x12>
	}
	return len;
 8002f28:	687b      	ldr	r3, [r7, #4]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_close>:

int _close(int file)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
	return -1;
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_isatty>:

int _isatty(int file)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
	return 1;
 8002f72:	2301      	movs	r3, #1
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <_sbrk+0x50>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <_sbrk+0x16>
		heap_end = &end;
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <_sbrk+0x50>)
 8002fae:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <_sbrk+0x54>)
 8002fb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <_sbrk+0x50>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <_sbrk+0x50>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	466a      	mov	r2, sp
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d907      	bls.n	8002fd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002fc6:	f020 ff81 	bl	8023ecc <__errno>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	230c      	movs	r3, #12
 8002fce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd4:	e006      	b.n	8002fe4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <_sbrk+0x50>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a03      	ldr	r2, [pc, #12]	; (8002fec <_sbrk+0x50>)
 8002fe0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200003a4 	.word	0x200003a4
 8002ff0:	2000cb30 	.word	0x2000cb30

08002ff4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <SystemInit+0x28>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	4a07      	ldr	r2, [pc, #28]	; (800301c <SystemInit+0x28>)
 8003000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <SystemInit+0x28>)
 800300a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800300e:	609a      	str	r2, [r3, #8]
#endif
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003058 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003024:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003026:	e003      	b.n	8003030 <LoopCopyDataInit>

08003028 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800302a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800302c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800302e:	3104      	adds	r1, #4

08003030 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003030:	480b      	ldr	r0, [pc, #44]	; (8003060 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003034:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003036:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003038:	d3f6      	bcc.n	8003028 <CopyDataInit>
  ldr  r2, =_sbss
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800303c:	e002      	b.n	8003044 <LoopFillZerobss>

0800303e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800303e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003040:	f842 3b04 	str.w	r3, [r2], #4

08003044 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003046:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003048:	d3f9      	bcc.n	800303e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800304a:	f7ff ffd3 	bl	8002ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800304e:	f020 ff55 	bl	8023efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003052:	f7fd fb13 	bl	800067c <main>
  bx  lr    
 8003056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003058:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800305c:	080439ac 	.word	0x080439ac
  ldr  r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003064:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8003068:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 800306c:	2000cb2c 	.word	0x2000cb2c

08003070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC_IRQHandler>

08003072 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003076:	2003      	movs	r0, #3
 8003078:	f001 f923 	bl	80042c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800307c:	2000      	movs	r0, #0
 800307e:	f7ff fe63 	bl	8002d48 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003082:	f7fe ff09 	bl	8001e98 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x20>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_IncTick+0x24>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4413      	add	r3, r2
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_IncTick+0x24>)
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000020 	.word	0x20000020
 80030b0:	2000c6b8 	.word	0x2000c6b8

080030b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTick;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_GetTick+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	2000c6b8 	.word	0x2000c6b8

080030cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff ffee 	bl	80030b4 <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d005      	beq.n	80030f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_Delay+0x40>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030f2:	bf00      	nop
 80030f4:	f7ff ffde 	bl	80030b4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d8f7      	bhi.n	80030f4 <HAL_Delay+0x28>
  {
  }
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000020 	.word	0x20000020

08003110 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e031      	b.n	800318a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fe feda 	bl	8001ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_ADC_Init+0x84>)
 8003154:	4013      	ands	r3, r2
 8003156:	f043 0202 	orr.w	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f964 	bl	800342c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
 800317a:	e001      	b.n	8003180 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	ffffeefd 	.word	0xffffeefd

08003198 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x1c>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e12a      	b.n	800340a <HAL_ADC_ConfigChannel+0x272>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b09      	cmp	r3, #9
 80031c2:	d93a      	bls.n	800323a <HAL_ADC_ConfigChannel+0xa2>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031cc:	d035      	beq.n	800323a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68d9      	ldr	r1, [r3, #12]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	3b1e      	subs	r3, #30
 80031e4:	2207      	movs	r2, #7
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	400a      	ands	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a87      	ldr	r2, [pc, #540]	; (8003418 <HAL_ADC_ConfigChannel+0x280>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d10a      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68d9      	ldr	r1, [r3, #12]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	061a      	lsls	r2, r3, #24
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003212:	e035      	b.n	8003280 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68d9      	ldr	r1, [r3, #12]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	4618      	mov	r0, r3
 8003226:	4603      	mov	r3, r0
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4403      	add	r3, r0
 800322c:	3b1e      	subs	r3, #30
 800322e:	409a      	lsls	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003238:	e022      	b.n	8003280 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6919      	ldr	r1, [r3, #16]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	2207      	movs	r2, #7
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43da      	mvns	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	400a      	ands	r2, r1
 800325c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6919      	ldr	r1, [r3, #16]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	4618      	mov	r0, r3
 8003270:	4603      	mov	r3, r0
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4403      	add	r3, r0
 8003276:	409a      	lsls	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b06      	cmp	r3, #6
 8003286:	d824      	bhi.n	80032d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	3b05      	subs	r3, #5
 800329a:	221f      	movs	r2, #31
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43da      	mvns	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	400a      	ands	r2, r1
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	3b05      	subs	r3, #5
 80032c4:	fa00 f203 	lsl.w	r2, r0, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34
 80032d0:	e04c      	b.n	800336c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d824      	bhi.n	8003324 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	3b23      	subs	r3, #35	; 0x23
 80032ec:	221f      	movs	r2, #31
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43da      	mvns	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	400a      	ands	r2, r1
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	b29b      	uxth	r3, r3
 8003308:	4618      	mov	r0, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	3b23      	subs	r3, #35	; 0x23
 8003316:	fa00 f203 	lsl.w	r2, r0, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
 8003322:	e023      	b.n	800336c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	3b41      	subs	r3, #65	; 0x41
 8003336:	221f      	movs	r2, #31
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43da      	mvns	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	400a      	ands	r2, r1
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	b29b      	uxth	r3, r3
 8003352:	4618      	mov	r0, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	3b41      	subs	r3, #65	; 0x41
 8003360:	fa00 f203 	lsl.w	r2, r0, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2a      	ldr	r2, [pc, #168]	; (800341c <HAL_ADC_ConfigChannel+0x284>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d10a      	bne.n	800338c <HAL_ADC_ConfigChannel+0x1f4>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800337e:	d105      	bne.n	800338c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003380:	4b27      	ldr	r3, [pc, #156]	; (8003420 <HAL_ADC_ConfigChannel+0x288>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a26      	ldr	r2, [pc, #152]	; (8003420 <HAL_ADC_ConfigChannel+0x288>)
 8003386:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800338a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a22      	ldr	r2, [pc, #136]	; (800341c <HAL_ADC_ConfigChannel+0x284>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d109      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x212>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b12      	cmp	r3, #18
 800339c:	d105      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_ADC_ConfigChannel+0x288>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_ADC_ConfigChannel+0x288>)
 80033a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1b      	ldr	r2, [pc, #108]	; (800341c <HAL_ADC_ConfigChannel+0x284>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d125      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x268>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a17      	ldr	r2, [pc, #92]	; (8003418 <HAL_ADC_ConfigChannel+0x280>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x22e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b11      	cmp	r3, #17
 80033c4:	d11c      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80033c6:	4b16      	ldr	r3, [pc, #88]	; (8003420 <HAL_ADC_ConfigChannel+0x288>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4a15      	ldr	r2, [pc, #84]	; (8003420 <HAL_ADC_ConfigChannel+0x288>)
 80033cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a10      	ldr	r2, [pc, #64]	; (8003418 <HAL_ADC_ConfigChannel+0x280>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d111      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_ADC_ConfigChannel+0x28c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a11      	ldr	r2, [pc, #68]	; (8003428 <HAL_ADC_ConfigChannel+0x290>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	0c9a      	lsrs	r2, r3, #18
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033f2:	e002      	b.n	80033fa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f9      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	10000012 	.word	0x10000012
 800341c:	40012000 	.word	0x40012000
 8003420:	40012300 	.word	0x40012300
 8003424:	20000018 	.word	0x20000018
 8003428:	431bde83 	.word	0x431bde83

0800342c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003434:	4b78      	ldr	r3, [pc, #480]	; (8003618 <ADC_Init+0x1ec>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a77      	ldr	r2, [pc, #476]	; (8003618 <ADC_Init+0x1ec>)
 800343a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800343e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003440:	4b75      	ldr	r3, [pc, #468]	; (8003618 <ADC_Init+0x1ec>)
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4973      	ldr	r1, [pc, #460]	; (8003618 <ADC_Init+0x1ec>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800345c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	021a      	lsls	r2, r3, #8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6899      	ldr	r1, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	4a58      	ldr	r2, [pc, #352]	; (800361c <ADC_Init+0x1f0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d022      	beq.n	8003506 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6899      	ldr	r1, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	e00f      	b.n	8003526 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003524:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0202 	bic.w	r2, r2, #2
 8003534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	005a      	lsls	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01b      	beq.n	800358c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003562:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	3b01      	subs	r3, #1
 8003580:	035a      	lsls	r2, r3, #13
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	e007      	b.n	800359c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	051a      	lsls	r2, r3, #20
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6899      	ldr	r1, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035de:	025a      	lsls	r2, r3, #9
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	029a      	lsls	r2, r3, #10
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40012300 	.word	0x40012300
 800361c:	0f000001 	.word	0x0f000001

08003620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0ed      	b.n	800380e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe fcac 	bl	8001f9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0202 	bic.w	r2, r2, #2
 8003652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003654:	f7ff fd2e 	bl	80030b4 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800365a:	e012      	b.n	8003682 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800365c:	f7ff fd2a 	bl	80030b4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b0a      	cmp	r3, #10
 8003668:	d90b      	bls.n	8003682 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2205      	movs	r2, #5
 800367a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0c5      	b.n	800380e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036a0:	f7ff fd08 	bl	80030b4 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036a6:	e012      	b.n	80036ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036a8:	f7ff fd04 	bl	80030b4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b0a      	cmp	r3, #10
 80036b4:	d90b      	bls.n	80036ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2205      	movs	r2, #5
 80036c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e09f      	b.n	800380e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0e5      	beq.n	80036a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7e1b      	ldrb	r3, [r3, #24]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d108      	bne.n	80036f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e007      	b.n	8003706 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7e5b      	ldrb	r3, [r3, #25]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d108      	bne.n	8003720 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e007      	b.n	8003730 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7e9b      	ldrb	r3, [r3, #26]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d108      	bne.n	800374a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0220 	orr.w	r2, r2, #32
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e007      	b.n	800375a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0220 	bic.w	r2, r2, #32
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7edb      	ldrb	r3, [r3, #27]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d108      	bne.n	8003774 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0210 	bic.w	r2, r2, #16
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e007      	b.n	8003784 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0210 	orr.w	r2, r2, #16
 8003782:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7f1b      	ldrb	r3, [r3, #28]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d108      	bne.n	800379e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0208 	orr.w	r2, r2, #8
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e007      	b.n	80037ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	7f5b      	ldrb	r3, [r3, #29]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d108      	bne.n	80037c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0204 	orr.w	r2, r2, #4
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e007      	b.n	80037d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0204 	bic.w	r2, r2, #4
 80037d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	ea42 0103 	orr.w	r1, r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d003      	beq.n	800383e <HAL_CAN_ConfigFilter+0x26>
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	2b02      	cmp	r3, #2
 800383a:	f040 80be 	bne.w	80039ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800383e:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003840:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003848:	f043 0201 	orr.w	r2, r3, #1
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003858:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	431a      	orrs	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2201      	movs	r2, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	43db      	mvns	r3, r3
 8003890:	401a      	ands	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d123      	bne.n	80038e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	401a      	ands	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3248      	adds	r2, #72	; 0x48
 80038c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	3348      	adds	r3, #72	; 0x48
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	440b      	add	r3, r1
 80038e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d122      	bne.n	8003936 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003910:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	3248      	adds	r2, #72	; 0x48
 8003916:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800392a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800392c:	6979      	ldr	r1, [r7, #20]
 800392e:	3348      	adds	r3, #72	; 0x48
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	440b      	add	r3, r1
 8003934:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43db      	mvns	r3, r3
 8003948:	401a      	ands	r2, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003950:	e007      	b.n	8003962 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	431a      	orrs	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	43db      	mvns	r3, r3
 8003974:	401a      	ands	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800397c:	e007      	b.n	800398e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	431a      	orrs	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d107      	bne.n	80039a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	431a      	orrs	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039ac:	f023 0201 	bic.w	r2, r3, #1
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e006      	b.n	80039c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40006400 	.word	0x40006400

080039d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d12e      	bne.n	8003a4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a04:	f7ff fb56 	bl	80030b4 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a0a:	e012      	b.n	8003a32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a0c:	f7ff fb52 	bl	80030b4 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b0a      	cmp	r3, #10
 8003a18:	d90b      	bls.n	8003a32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2205      	movs	r2, #5
 8003a2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e012      	b.n	8003a58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e006      	b.n	8003a58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
  }
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a74:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d003      	beq.n	8003a84 <HAL_CAN_GetRxMessage+0x24>
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	f040 80f3 	bne.w	8003c6a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10e      	bne.n	8003aa8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d116      	bne.n	8003ac6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0e7      	b.n	8003c78 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d107      	bne.n	8003ac6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0d8      	b.n	8003c78 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	331b      	adds	r3, #27
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	4413      	add	r3, r2
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0204 	and.w	r2, r3, #4
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10c      	bne.n	8003afe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	331b      	adds	r3, #27
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4413      	add	r3, r2
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	0d5b      	lsrs	r3, r3, #21
 8003af4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e00b      	b.n	8003b16 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	331b      	adds	r3, #27
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	4413      	add	r3, r2
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	08db      	lsrs	r3, r3, #3
 8003b0e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	331b      	adds	r3, #27
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	4413      	add	r3, r2
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0202 	and.w	r2, r3, #2
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	331b      	adds	r3, #27
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	4413      	add	r3, r2
 8003b38:	3304      	adds	r3, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 020f 	and.w	r2, r3, #15
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	331b      	adds	r3, #27
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4413      	add	r3, r2
 8003b50:	3304      	adds	r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	331b      	adds	r3, #27
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	4413      	add	r3, r2
 8003b68:	3304      	adds	r3, #4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	0a1a      	lsrs	r2, r3, #8
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0c1a      	lsrs	r2, r3, #16
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	3302      	adds	r3, #2
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	0e1a      	lsrs	r2, r3, #24
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	3303      	adds	r3, #3
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	3304      	adds	r3, #4
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	0a1a      	lsrs	r2, r3, #8
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	3305      	adds	r3, #5
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	0c1a      	lsrs	r2, r3, #16
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	3306      	adds	r3, #6
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0e1a      	lsrs	r2, r3, #24
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	3307      	adds	r3, #7
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d108      	bne.n	8003c56 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0220 	orr.w	r2, r2, #32
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	e007      	b.n	8003c66 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0220 	orr.w	r2, r2, #32
 8003c64:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e006      	b.n	8003c78 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c94:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d002      	beq.n	8003ca2 <HAL_CAN_ActivateNotification+0x1e>
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d109      	bne.n	8003cb6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6959      	ldr	r1, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e006      	b.n	8003cc4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d07c      	beq.n	8003e10 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d023      	beq.n	8003d68 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2201      	movs	r2, #1
 8003d26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f97d 	bl	8004032 <HAL_CAN_TxMailbox0CompleteCallback>
 8003d38:	e016      	b.n	8003d68 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	e00c      	b.n	8003d68 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d60:	e002      	b.n	8003d68 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f983 	bl	800406e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d024      	beq.n	8003dbc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f95d 	bl	8004046 <HAL_CAN_TxMailbox1CompleteCallback>
 8003d8c:	e016      	b.n	8003dbc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003da0:	e00c      	b.n	8003dbc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	e002      	b.n	8003dbc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f963 	bl	8004082 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d024      	beq.n	8003e10 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003dce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f93d 	bl	800405a <HAL_CAN_TxMailbox2CompleteCallback>
 8003de0:	e016      	b.n	8003e10 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
 8003df4:	e00c      	b.n	8003e10 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
 8003e08:	e002      	b.n	8003e10 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f943 	bl	8004096 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00c      	beq.n	8003e34 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2210      	movs	r2, #16
 8003e32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d006      	beq.n	8003e56 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f92a 	bl	80040aa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fc fde0 	bl	8000a34 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00c      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2210      	movs	r2, #16
 8003e96:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f90c 	bl	80040d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8f3 	bl	80040be <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d006      	beq.n	8003efa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f8f6 	bl	80040e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d006      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2208      	movs	r2, #8
 8003f14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8ef 	bl	80040fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d075      	beq.n	8004012 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d06c      	beq.n	800400a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	f043 0304 	orr.w	r3, r3, #4
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d03d      	beq.n	800400a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d038      	beq.n	800400a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f9e:	2b30      	cmp	r3, #48	; 0x30
 8003fa0:	d017      	beq.n	8003fd2 <HAL_CAN_IRQHandler+0x302>
 8003fa2:	2b30      	cmp	r3, #48	; 0x30
 8003fa4:	d804      	bhi.n	8003fb0 <HAL_CAN_IRQHandler+0x2e0>
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d009      	beq.n	8003fbe <HAL_CAN_IRQHandler+0x2ee>
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d00c      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003fae:	e024      	b.n	8003ffa <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003fb0:	2b50      	cmp	r3, #80	; 0x50
 8003fb2:	d018      	beq.n	8003fe6 <HAL_CAN_IRQHandler+0x316>
 8003fb4:	2b60      	cmp	r3, #96	; 0x60
 8003fb6:	d01b      	beq.n	8003ff0 <HAL_CAN_IRQHandler+0x320>
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d00f      	beq.n	8003fdc <HAL_CAN_IRQHandler+0x30c>
            break;
 8003fbc:	e01d      	b.n	8003ffa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	f043 0308 	orr.w	r3, r3, #8
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fc6:	e018      	b.n	8003ffa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	f043 0310 	orr.w	r3, r3, #16
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fd0:	e013      	b.n	8003ffa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	f043 0320 	orr.w	r3, r3, #32
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fda:	e00e      	b.n	8003ffa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fe4:	e009      	b.n	8003ffa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fee:	e004      	b.n	8003ffa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ff8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004008:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2204      	movs	r2, #4
 8004010:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f872 	bl	800410e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800402a:	bf00      	nop
 800402c:	3728      	adds	r7, #40	; 0x28
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <__NVIC_SetPriorityGrouping+0x40>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004140:	4013      	ands	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <__NVIC_SetPriorityGrouping+0x44>)
 800414e:	4313      	orrs	r3, r2
 8004150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004152:	4a04      	ldr	r2, [pc, #16]	; (8004164 <__NVIC_SetPriorityGrouping+0x40>)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	60d3      	str	r3, [r2, #12]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000ed00 	.word	0xe000ed00
 8004168:	05fa0000 	.word	0x05fa0000

0800416c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <__NVIC_GetPriorityGrouping+0x18>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	0a1b      	lsrs	r3, r3, #8
 8004176:	f003 0307 	and.w	r3, r3, #7
}
 800417a:	4618      	mov	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	e000ed00 	.word	0xe000ed00

08004188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004196:	2b00      	cmp	r3, #0
 8004198:	db0b      	blt.n	80041b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	f003 021f 	and.w	r2, r3, #31
 80041a0:	4907      	ldr	r1, [pc, #28]	; (80041c0 <__NVIC_EnableIRQ+0x38>)
 80041a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2001      	movs	r0, #1
 80041aa:	fa00 f202 	lsl.w	r2, r0, r2
 80041ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000e100 	.word	0xe000e100

080041c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	db10      	blt.n	80041f8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	4909      	ldr	r1, [pc, #36]	; (8004204 <__NVIC_DisableIRQ+0x40>)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	2001      	movs	r0, #1
 80041e6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ea:	3320      	adds	r3, #32
 80041ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80041f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000e100 	.word	0xe000e100

08004208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	6039      	str	r1, [r7, #0]
 8004212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004218:	2b00      	cmp	r3, #0
 800421a:	db0a      	blt.n	8004232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	490c      	ldr	r1, [pc, #48]	; (8004254 <__NVIC_SetPriority+0x4c>)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	440b      	add	r3, r1
 800422c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004230:	e00a      	b.n	8004248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4908      	ldr	r1, [pc, #32]	; (8004258 <__NVIC_SetPriority+0x50>)
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	3b04      	subs	r3, #4
 8004240:	0112      	lsls	r2, r2, #4
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	440b      	add	r3, r1
 8004246:	761a      	strb	r2, [r3, #24]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	e000e100 	.word	0xe000e100
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800425c:	b480      	push	{r7}
 800425e:	b089      	sub	sp, #36	; 0x24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f1c3 0307 	rsb	r3, r3, #7
 8004276:	2b04      	cmp	r3, #4
 8004278:	bf28      	it	cs
 800427a:	2304      	movcs	r3, #4
 800427c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3304      	adds	r3, #4
 8004282:	2b06      	cmp	r3, #6
 8004284:	d902      	bls.n	800428c <NVIC_EncodePriority+0x30>
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	3b03      	subs	r3, #3
 800428a:	e000      	b.n	800428e <NVIC_EncodePriority+0x32>
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004290:	f04f 32ff 	mov.w	r2, #4294967295
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43da      	mvns	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	401a      	ands	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a4:	f04f 31ff 	mov.w	r1, #4294967295
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	fa01 f303 	lsl.w	r3, r1, r3
 80042ae:	43d9      	mvns	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b4:	4313      	orrs	r3, r2
         );
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3724      	adds	r7, #36	; 0x24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff2a 	bl	8004124 <__NVIC_SetPriorityGrouping>
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042ea:	f7ff ff3f 	bl	800416c <__NVIC_GetPriorityGrouping>
 80042ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	6978      	ldr	r0, [r7, #20]
 80042f6:	f7ff ffb1 	bl	800425c <NVIC_EncodePriority>
 80042fa:	4602      	mov	r2, r0
 80042fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ff80 	bl	8004208 <__NVIC_SetPriority>
}
 8004308:	bf00      	nop
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ff32 	bl	8004188 <__NVIC_EnableIRQ>
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff42 	bl	80041c4 <__NVIC_DisableIRQ>
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e054      	b.n	8004404 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7f5b      	ldrb	r3, [r3, #29]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd fe62 	bl	8002034 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	791b      	ldrb	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a22      	ldr	r2, [pc, #136]	; (800440c <HAL_CRC_Init+0xc4>)
 8004384:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0218 	bic.w	r2, r2, #24
 8004394:	609a      	str	r2, [r3, #8]
 8004396:	e00c      	b.n	80043b2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6899      	ldr	r1, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	461a      	mov	r2, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f834 	bl	8004410 <HAL_CRCEx_Polynomial_Set>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e028      	b.n	8004404 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	795b      	ldrb	r3, [r3, #5]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f04f 32ff 	mov.w	r2, #4294967295
 80043c2:	611a      	str	r2, [r3, #16]
 80043c4:	e004      	b.n	80043d0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6912      	ldr	r2, [r2, #16]
 80043ce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	04c11db7 	.word	0x04c11db7

08004410 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004420:	231f      	movs	r3, #31
 8004422:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004424:	bf00      	nop
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1e5a      	subs	r2, r3, #1
 800442a:	613a      	str	r2, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <HAL_CRCEx_Polynomial_Set+0x34>
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b18      	cmp	r3, #24
 8004448:	d846      	bhi.n	80044d8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800444a:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <HAL_CRCEx_Polynomial_Set+0x40>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	080044df 	.word	0x080044df
 8004454:	080044d9 	.word	0x080044d9
 8004458:	080044d9 	.word	0x080044d9
 800445c:	080044d9 	.word	0x080044d9
 8004460:	080044d9 	.word	0x080044d9
 8004464:	080044d9 	.word	0x080044d9
 8004468:	080044d9 	.word	0x080044d9
 800446c:	080044d9 	.word	0x080044d9
 8004470:	080044cd 	.word	0x080044cd
 8004474:	080044d9 	.word	0x080044d9
 8004478:	080044d9 	.word	0x080044d9
 800447c:	080044d9 	.word	0x080044d9
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044d9 	.word	0x080044d9
 8004488:	080044d9 	.word	0x080044d9
 800448c:	080044d9 	.word	0x080044d9
 8004490:	080044c1 	.word	0x080044c1
 8004494:	080044d9 	.word	0x080044d9
 8004498:	080044d9 	.word	0x080044d9
 800449c:	080044d9 	.word	0x080044d9
 80044a0:	080044d9 	.word	0x080044d9
 80044a4:	080044d9 	.word	0x080044d9
 80044a8:	080044d9 	.word	0x080044d9
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	080044b5 	.word	0x080044b5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	d913      	bls.n	80044e2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044be:	e010      	b.n	80044e2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b07      	cmp	r3, #7
 80044c4:	d90f      	bls.n	80044e6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044ca:	e00c      	b.n	80044e6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b0f      	cmp	r3, #15
 80044d0:	d90b      	bls.n	80044ea <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044d6:	e008      	b.n	80044ea <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
      break;
 80044dc:	e006      	b.n	80044ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044de:	bf00      	nop
 80044e0:	e004      	b.n	80044ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044ea:	bf00      	nop
  }
  if (status == HAL_OK)
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f023 0118 	bic.w	r1, r3, #24
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	430a      	orrs	r2, r1
 800450c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800450e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004510:	4618      	mov	r0, r3
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e069      	b.n	8004602 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fd fd9a 	bl	8002074 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6819      	ldr	r1, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b2a      	ldr	r3, [pc, #168]	; (800460c <HAL_DCMI_Init+0xf0>)
 8004562:	400b      	ands	r3, r1
 8004564:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6819      	ldr	r1, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800457a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004586:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004592:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800459e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80045aa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d112      	bne.n	80045e2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	7f1b      	ldrb	r3, [r3, #28]
 80045c0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7f5b      	ldrb	r3, [r3, #29]
 80045c6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80045c8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7f9b      	ldrb	r3, [r3, #30]
 80045ce:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80045d0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	7fdb      	ldrb	r3, [r3, #31]
 80045d8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80045de:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80045e0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 021e 	orr.w	r2, r2, #30
 80045f0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	ffe0f007 	.word	0xffe0f007

08004610 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_DMA_Start_IT+0x26>
 8004632:	2302      	movs	r3, #2
 8004634:	e048      	b.n	80046c8 <HAL_DMA_Start_IT+0xb8>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b01      	cmp	r3, #1
 8004648:	d137      	bne.n	80046ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f842 	bl	80046e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	223f      	movs	r2, #63	; 0x3f
 800466a:	409a      	lsls	r2, r3
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0216 	orr.w	r2, r2, #22
 800467e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800468e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0208 	orr.w	r2, r2, #8
 80046a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e005      	b.n	80046c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
 80046c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004704:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d108      	bne.n	8004728 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004726:	e007      	b.n	8004738 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	60da      	str	r2, [r3, #12]
}
 8004738:	bf00      	nop
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e039      	b.n	80047ca <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fd fd40 	bl	80021f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	f023 0107 	bic.w	r1, r3, #7
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <HAL_DMA2D_Init+0x90>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68d1      	ldr	r1, [r2, #12]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	430b      	orrs	r3, r1
 80047b8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	ffffc000 	.word	0xffffc000

080047d8 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e05f      	b.n	80048aa <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80047ea:	4b32      	ldr	r3, [pc, #200]	; (80048b4 <HAL_DMA2D_DeInit+0xdc>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d02e      	beq.n	8004854 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8c1 	bl	800498c <HAL_DMA2D_Abort>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d021      	beq.n	8004854 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e04a      	b.n	80048aa <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b20      	cmp	r3, #32
 8004820:	d108      	bne.n	8004834 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8004822:	2100      	movs	r1, #0
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f8f7 	bl	8004a18 <HAL_DMA2D_CLUTLoading_Abort>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d011      	beq.n	8004854 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e03a      	b.n	80048aa <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b20      	cmp	r3, #32
 8004840:	d108      	bne.n	8004854 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8004842:	2101      	movs	r1, #1
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f8e7 	bl	8004a18 <HAL_DMA2D_CLUTLoading_Abort>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e02a      	b.n	80048aa <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	223f      	movs	r2, #63	; 0x3f
 8004862:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2200      	movs	r2, #0
 800486a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2200      	movs	r2, #0
 8004872:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2200      	movs	r2, #0
 8004882:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2200      	movs	r2, #0
 800488a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fd fcd5 	bl	800223c <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800

080048b8 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_DMA2D_Start_IT+0x1c>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e020      	b.n	8004916 <HAL_DMA2D_Start_IT+0x5e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fa84 	bl	8004dfc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004902:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b086      	sub	sp, #24
 8004922:	af02      	add	r7, sp, #8
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8004936:	2302      	movs	r3, #2
 8004938:	e024      	b.n	8004984 <HAL_DMA2D_BlendingStart_IT+0x66>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fa4d 	bl	8004dfc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004970:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 0205 	bic.w	r2, r3, #5
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0204 	orr.w	r2, r2, #4
 80049a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049a8:	f7fe fb84 	bl	80030b4 <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80049ae:	e017      	b.n	80049e0 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80049b0:	f7fe fb80 	bl	80030b4 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049be:	d90f      	bls.n	80049e0 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2203      	movs	r2, #3
 80049d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e017      	b.n	8004a10 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e0      	bne.n	80049b0 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80049fc:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3324      	adds	r3, #36	; 0x24
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0204 	orr.w	r2, r2, #4
 8004a38:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d103      	bne.n	8004a48 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	331c      	adds	r3, #28
 8004a46:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8004a48:	f7fe fb34 	bl	80030b4 <HAL_GetTick>
 8004a4c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004a4e:	e017      	b.n	8004a80 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004a50:	f7fe fb30 	bl	80030b4 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a5e:	d90f      	bls.n	8004a80 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2203      	movs	r2, #3
 8004a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e016      	b.n	8004aae <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e1      	bne.n	8004a50 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d026      	beq.n	8004b26 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d021      	beq.n	8004b26 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004af0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2201      	movs	r2, #1
 8004b04:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2204      	movs	r2, #4
 8004b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d026      	beq.n	8004b7e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d021      	beq.n	8004b7e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b48:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	f043 0202 	orr.w	r2, r3, #2
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2204      	movs	r2, #4
 8004b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d026      	beq.n	8004bd6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d021      	beq.n	8004bd6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ba0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	f043 0204 	orr.w	r2, r3, #4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2204      	movs	r2, #4
 8004bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d013      	beq.n	8004c08 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00e      	beq.n	8004c08 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f853 	bl	8004cae <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d024      	beq.n	8004c5c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01f      	beq.n	8004c5c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2202      	movs	r2, #2
 8004c32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01f      	beq.n	8004ca6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01a      	beq.n	8004ca6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c7e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2210      	movs	r2, #16
 8004c86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f80e 	bl	8004cc2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_DMA2D_ConfigLayer+0x20>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e079      	b.n	8004dec <HAL_DMA2D_ConfigLayer+0x114>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4413      	add	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004d22:	4b35      	ldr	r3, [pc, #212]	; (8004df8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004d24:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b0a      	cmp	r3, #10
 8004d2c:	d003      	beq.n	8004d36 <HAL_DMA2D_ConfigLayer+0x5e>
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b09      	cmp	r3, #9
 8004d34:	d107      	bne.n	8004d46 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	e005      	b.n	8004d52 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	061b      	lsls	r3, r3, #24
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d120      	bne.n	8004d9a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	ea02 0103 	and.w	r1, r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b0a      	cmp	r3, #10
 8004d80:	d003      	beq.n	8004d8a <HAL_DMA2D_ConfigLayer+0xb2>
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b09      	cmp	r3, #9
 8004d88:	d127      	bne.n	8004dda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
 8004d98:	e01f      	b.n	8004dda <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	43db      	mvns	r3, r3
 8004da4:	ea02 0103 	and.w	r1, r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b0a      	cmp	r3, #10
 8004dc2:	d003      	beq.n	8004dcc <HAL_DMA2D_ConfigLayer+0xf4>
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b09      	cmp	r3, #9
 8004dca:	d106      	bne.n	8004dda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004dd8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	ff03000f 	.word	0xff03000f

08004dfc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b08b      	sub	sp, #44	; 0x2c
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e10:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	041a      	lsls	r2, r3, #16
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e34:	d174      	bne.n	8004f20 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e3c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e44:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e4c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d108      	bne.n	8004e6e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6c:	e053      	b.n	8004f16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d106      	bne.n	8004e84 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	e048      	b.n	8004f16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d111      	bne.n	8004eb0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	0cdb      	lsrs	r3, r3, #19
 8004e90:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	0a9b      	lsrs	r3, r3, #10
 8004e96:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	08db      	lsrs	r3, r3, #3
 8004e9c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	02db      	lsls	r3, r3, #11
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
 8004eae:	e032      	b.n	8004f16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d117      	bne.n	8004ee8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	0fdb      	lsrs	r3, r3, #31
 8004ebc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	0cdb      	lsrs	r3, r3, #19
 8004ec2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	0adb      	lsrs	r3, r3, #11
 8004ec8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	08db      	lsrs	r3, r3, #3
 8004ece:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	029b      	lsls	r3, r3, #10
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	03db      	lsls	r3, r3, #15
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	e016      	b.n	8004f16 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	0f1b      	lsrs	r3, r3, #28
 8004eec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	0d1b      	lsrs	r3, r3, #20
 8004ef2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	0b1b      	lsrs	r3, r3, #12
 8004ef8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	011a      	lsls	r2, r3, #4
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	031b      	lsls	r3, r3, #12
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004f1e:	e003      	b.n	8004f28 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	60da      	str	r2, [r3, #12]
}
 8004f28:	bf00      	nop
 8004f2a:	372c      	adds	r7, #44	; 0x2c
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	e175      	b.n	8005240 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f54:	2201      	movs	r2, #1
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	f040 8164 	bne.w	800523a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d00b      	beq.n	8004f92 <HAL_GPIO_Init+0x5e>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d007      	beq.n	8004f92 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f86:	2b11      	cmp	r3, #17
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b12      	cmp	r3, #18
 8004f90:	d130      	bne.n	8004ff4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fc8:	2201      	movs	r2, #1
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 0201 	and.w	r2, r3, #1
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	2203      	movs	r2, #3
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x100>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b12      	cmp	r3, #18
 8005032:	d123      	bne.n	800507c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	08da      	lsrs	r2, r3, #3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3208      	adds	r2, #8
 800503c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	220f      	movs	r2, #15
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	08da      	lsrs	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3208      	adds	r2, #8
 8005076:	69b9      	ldr	r1, [r7, #24]
 8005078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2203      	movs	r2, #3
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 0203 	and.w	r2, r3, #3
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80be 	beq.w	800523a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050be:	4b65      	ldr	r3, [pc, #404]	; (8005254 <HAL_GPIO_Init+0x320>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	4a64      	ldr	r2, [pc, #400]	; (8005254 <HAL_GPIO_Init+0x320>)
 80050c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050c8:	6453      	str	r3, [r2, #68]	; 0x44
 80050ca:	4b62      	ldr	r3, [pc, #392]	; (8005254 <HAL_GPIO_Init+0x320>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050d6:	4a60      	ldr	r2, [pc, #384]	; (8005258 <HAL_GPIO_Init+0x324>)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	220f      	movs	r2, #15
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a57      	ldr	r2, [pc, #348]	; (800525c <HAL_GPIO_Init+0x328>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d037      	beq.n	8005172 <HAL_GPIO_Init+0x23e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a56      	ldr	r2, [pc, #344]	; (8005260 <HAL_GPIO_Init+0x32c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d031      	beq.n	800516e <HAL_GPIO_Init+0x23a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a55      	ldr	r2, [pc, #340]	; (8005264 <HAL_GPIO_Init+0x330>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02b      	beq.n	800516a <HAL_GPIO_Init+0x236>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a54      	ldr	r2, [pc, #336]	; (8005268 <HAL_GPIO_Init+0x334>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d025      	beq.n	8005166 <HAL_GPIO_Init+0x232>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a53      	ldr	r2, [pc, #332]	; (800526c <HAL_GPIO_Init+0x338>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01f      	beq.n	8005162 <HAL_GPIO_Init+0x22e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a52      	ldr	r2, [pc, #328]	; (8005270 <HAL_GPIO_Init+0x33c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d019      	beq.n	800515e <HAL_GPIO_Init+0x22a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a51      	ldr	r2, [pc, #324]	; (8005274 <HAL_GPIO_Init+0x340>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_GPIO_Init+0x226>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a50      	ldr	r2, [pc, #320]	; (8005278 <HAL_GPIO_Init+0x344>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00d      	beq.n	8005156 <HAL_GPIO_Init+0x222>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a4f      	ldr	r2, [pc, #316]	; (800527c <HAL_GPIO_Init+0x348>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <HAL_GPIO_Init+0x21e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a4e      	ldr	r2, [pc, #312]	; (8005280 <HAL_GPIO_Init+0x34c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <HAL_GPIO_Init+0x21a>
 800514a:	2309      	movs	r3, #9
 800514c:	e012      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800514e:	230a      	movs	r3, #10
 8005150:	e010      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005152:	2308      	movs	r3, #8
 8005154:	e00e      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005156:	2307      	movs	r3, #7
 8005158:	e00c      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800515a:	2306      	movs	r3, #6
 800515c:	e00a      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800515e:	2305      	movs	r3, #5
 8005160:	e008      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005162:	2304      	movs	r3, #4
 8005164:	e006      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005166:	2303      	movs	r3, #3
 8005168:	e004      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800516a:	2302      	movs	r3, #2
 800516c:	e002      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005172:	2300      	movs	r3, #0
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	f002 0203 	and.w	r2, r2, #3
 800517a:	0092      	lsls	r2, r2, #2
 800517c:	4093      	lsls	r3, r2
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005184:	4934      	ldr	r1, [pc, #208]	; (8005258 <HAL_GPIO_Init+0x324>)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	089b      	lsrs	r3, r3, #2
 800518a:	3302      	adds	r3, #2
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005192:	4b3c      	ldr	r3, [pc, #240]	; (8005284 <HAL_GPIO_Init+0x350>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	43db      	mvns	r3, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051b6:	4a33      	ldr	r2, [pc, #204]	; (8005284 <HAL_GPIO_Init+0x350>)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051bc:	4b31      	ldr	r3, [pc, #196]	; (8005284 <HAL_GPIO_Init+0x350>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051e0:	4a28      	ldr	r2, [pc, #160]	; (8005284 <HAL_GPIO_Init+0x350>)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <HAL_GPIO_Init+0x350>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800520a:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <HAL_GPIO_Init+0x350>)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005210:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <HAL_GPIO_Init+0x350>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005234:	4a13      	ldr	r2, [pc, #76]	; (8005284 <HAL_GPIO_Init+0x350>)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	f67f ae86 	bls.w	8004f54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005248:	bf00      	nop
 800524a:	3724      	adds	r7, #36	; 0x24
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40023800 	.word	0x40023800
 8005258:	40013800 	.word	0x40013800
 800525c:	40020000 	.word	0x40020000
 8005260:	40020400 	.word	0x40020400
 8005264:	40020800 	.word	0x40020800
 8005268:	40020c00 	.word	0x40020c00
 800526c:	40021000 	.word	0x40021000
 8005270:	40021400 	.word	0x40021400
 8005274:	40021800 	.word	0x40021800
 8005278:	40021c00 	.word	0x40021c00
 800527c:	40022000 	.word	0x40022000
 8005280:	40022400 	.word	0x40022400
 8005284:	40013c00 	.word	0x40013c00

08005288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
 80052a4:	e001      	b.n	80052aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	807b      	strh	r3, [r7, #2]
 80052c4:	4613      	mov	r3, r2
 80052c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052c8:	787b      	ldrb	r3, [r7, #1]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ce:	887a      	ldrh	r2, [r7, #2]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80052d4:	e003      	b.n	80052de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052d6:	887b      	ldrh	r3, [r7, #2]
 80052d8:	041a      	lsls	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	619a      	str	r2, [r3, #24]
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0bf      	b.n	800547e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc ffac 	bl	8002270 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800532e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6999      	ldr	r1, [r3, #24]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005344:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6899      	ldr	r1, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <HAL_LTDC_Init+0x19c>)
 8005360:	400b      	ands	r3, r1
 8005362:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	041b      	lsls	r3, r3, #16
 800536a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6899      	ldr	r1, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68d9      	ldr	r1, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b3e      	ldr	r3, [pc, #248]	; (8005488 <HAL_LTDC_Init+0x19c>)
 800538e:	400b      	ands	r3, r1
 8005390:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	041b      	lsls	r3, r3, #16
 8005398:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68d9      	ldr	r1, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6919      	ldr	r1, [r3, #16]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b33      	ldr	r3, [pc, #204]	; (8005488 <HAL_LTDC_Init+0x19c>)
 80053bc:	400b      	ands	r3, r1
 80053be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6919      	ldr	r1, [r3, #16]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6959      	ldr	r1, [r3, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4b27      	ldr	r3, [pc, #156]	; (8005488 <HAL_LTDC_Init+0x19c>)
 80053ea:	400b      	ands	r3, r1
 80053ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6959      	ldr	r1, [r3, #20]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0206 	orr.w	r2, r2, #6
 800545a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	f000f800 	.word	0xf000f800

0800548c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d023      	beq.n	80054f6 <HAL_LTDC_IRQHandler+0x6a>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01e      	beq.n	80054f6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0204 	bic.w	r2, r2, #4
 80054c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2204      	movs	r2, #4
 80054ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054d6:	f043 0201 	orr.w	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2204      	movs	r2, #4
 80054e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f86f 	bl	80055d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d023      	beq.n	8005548 <HAL_LTDC_IRQHandler+0xbc>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01e      	beq.n	8005548 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0202 	bic.w	r2, r2, #2
 8005518:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2202      	movs	r2, #2
 8005520:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005528:	f043 0202 	orr.w	r2, r3, #2
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2204      	movs	r2, #4
 8005536:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f846 	bl	80055d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01b      	beq.n	800558a <HAL_LTDC_IRQHandler+0xfe>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d016      	beq.n	800558a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0201 	bic.w	r2, r2, #1
 800556a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2201      	movs	r2, #1
 8005572:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f00e fe09 	bl	801419c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01b      	beq.n	80055cc <HAL_LTDC_IRQHandler+0x140>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d016      	beq.n	80055cc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0208 	bic.w	r2, r2, #8
 80055ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2208      	movs	r2, #8
 80055b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f80e 	bl	80055e8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055fc:	b5b0      	push	{r4, r5, r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_LTDC_ConfigLayer+0x1a>
 8005612:	2302      	movs	r3, #2
 8005614:	e02c      	b.n	8005670 <HAL_LTDC_ConfigLayer+0x74>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2134      	movs	r1, #52	; 0x34
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4614      	mov	r4, r2
 800563a:	461d      	mov	r5, r3
 800563c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800563e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f849 	bl	80056e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2201      	movs	r2, #1
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bdb0      	pop	{r4, r5, r7, pc}

08005678 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_LTDC_ProgramLineEvent+0x18>
 800568c:	2302      	movs	r3, #2
 800568e:	e023      	b.n	80056d8 <HAL_LTDC_ProgramLineEvent+0x60>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0201 	bic.w	r2, r2, #1
 80056ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80056b0:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0201 	orr.w	r2, r2, #1
 80056c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	40016800 	.word	0x40016800

080056e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	0c1b      	lsrs	r3, r3, #16
 8005700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005704:	4413      	add	r3, r2
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	01db      	lsls	r3, r3, #7
 8005714:	4413      	add	r3, r2
 8005716:	3384      	adds	r3, #132	; 0x84
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	4611      	mov	r1, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	01d2      	lsls	r2, r2, #7
 8005724:	440a      	add	r2, r1
 8005726:	3284      	adds	r2, #132	; 0x84
 8005728:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800572c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	0c1b      	lsrs	r3, r3, #16
 800573a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800573e:	4413      	add	r3, r2
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4619      	mov	r1, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	01db      	lsls	r3, r3, #7
 800574c:	440b      	add	r3, r1
 800574e:	3384      	adds	r3, #132	; 0x84
 8005750:	4619      	mov	r1, r3
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005766:	4413      	add	r3, r2
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	01db      	lsls	r3, r3, #7
 8005776:	4413      	add	r3, r2
 8005778:	3384      	adds	r3, #132	; 0x84
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	4611      	mov	r1, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	01d2      	lsls	r2, r2, #7
 8005786:	440a      	add	r2, r1
 8005788:	3284      	adds	r2, #132	; 0x84
 800578a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800578e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800579e:	4413      	add	r3, r2
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4619      	mov	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	01db      	lsls	r3, r3, #7
 80057ac:	440b      	add	r3, r1
 80057ae:	3384      	adds	r3, #132	; 0x84
 80057b0:	4619      	mov	r1, r3
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	01db      	lsls	r3, r3, #7
 80057c2:	4413      	add	r3, r2
 80057c4:	3384      	adds	r3, #132	; 0x84
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	4611      	mov	r1, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	01d2      	lsls	r2, r2, #7
 80057d2:	440a      	add	r2, r1
 80057d4:	3284      	adds	r2, #132	; 0x84
 80057d6:	f023 0307 	bic.w	r3, r3, #7
 80057da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	01db      	lsls	r3, r3, #7
 80057e6:	4413      	add	r3, r2
 80057e8:	3384      	adds	r3, #132	; 0x84
 80057ea:	461a      	mov	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	061b      	lsls	r3, r3, #24
 800580c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	01db      	lsls	r3, r3, #7
 8005818:	4413      	add	r3, r2
 800581a:	3384      	adds	r3, #132	; 0x84
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	01db      	lsls	r3, r3, #7
 8005828:	4413      	add	r3, r2
 800582a:	3384      	adds	r3, #132	; 0x84
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005838:	461a      	mov	r2, r3
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	431a      	orrs	r2, r3
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4619      	mov	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	01db      	lsls	r3, r3, #7
 800584c:	440b      	add	r3, r1
 800584e:	3384      	adds	r3, #132	; 0x84
 8005850:	4619      	mov	r1, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	01db      	lsls	r3, r3, #7
 8005862:	4413      	add	r3, r2
 8005864:	3384      	adds	r3, #132	; 0x84
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	4611      	mov	r1, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	01d2      	lsls	r2, r2, #7
 8005872:	440a      	add	r2, r1
 8005874:	3284      	adds	r2, #132	; 0x84
 8005876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800587a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	01db      	lsls	r3, r3, #7
 8005886:	4413      	add	r3, r2
 8005888:	3384      	adds	r3, #132	; 0x84
 800588a:	461a      	mov	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	01db      	lsls	r3, r3, #7
 800589c:	4413      	add	r3, r2
 800589e:	3384      	adds	r3, #132	; 0x84
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	01db      	lsls	r3, r3, #7
 80058ac:	440b      	add	r3, r1
 80058ae:	3384      	adds	r3, #132	; 0x84
 80058b0:	4619      	mov	r1, r3
 80058b2:	4b58      	ldr	r3, [pc, #352]	; (8005a14 <LTDC_SetConfig+0x32c>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	6809      	ldr	r1, [r1, #0]
 80058c4:	4608      	mov	r0, r1
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	01c9      	lsls	r1, r1, #7
 80058ca:	4401      	add	r1, r0
 80058cc:	3184      	adds	r1, #132	; 0x84
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	01db      	lsls	r3, r3, #7
 80058dc:	4413      	add	r3, r2
 80058de:	3384      	adds	r3, #132	; 0x84
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	01db      	lsls	r3, r3, #7
 80058ec:	4413      	add	r3, r2
 80058ee:	3384      	adds	r3, #132	; 0x84
 80058f0:	461a      	mov	r2, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	01db      	lsls	r3, r3, #7
 8005900:	4413      	add	r3, r2
 8005902:	3384      	adds	r3, #132	; 0x84
 8005904:	461a      	mov	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005914:	2304      	movs	r3, #4
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	e01b      	b.n	8005952 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005922:	2303      	movs	r3, #3
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	e014      	b.n	8005952 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d00b      	beq.n	8005948 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005934:	2b02      	cmp	r3, #2
 8005936:	d007      	beq.n	8005948 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800593c:	2b03      	cmp	r3, #3
 800593e:	d003      	beq.n	8005948 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005944:	2b07      	cmp	r3, #7
 8005946:	d102      	bne.n	800594e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005948:	2302      	movs	r3, #2
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e001      	b.n	8005952 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800594e:	2301      	movs	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	01db      	lsls	r3, r3, #7
 800595c:	4413      	add	r3, r2
 800595e:	3384      	adds	r3, #132	; 0x84
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	4611      	mov	r1, r2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	01d2      	lsls	r2, r2, #7
 800596c:	440a      	add	r2, r1
 800596e:	3284      	adds	r2, #132	; 0x84
 8005970:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005974:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	041a      	lsls	r2, r3, #16
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	69f9      	ldr	r1, [r7, #28]
 800598e:	fb01 f303 	mul.w	r3, r1, r3
 8005992:	3303      	adds	r3, #3
 8005994:	68f9      	ldr	r1, [r7, #12]
 8005996:	6809      	ldr	r1, [r1, #0]
 8005998:	4608      	mov	r0, r1
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	01c9      	lsls	r1, r1, #7
 800599e:	4401      	add	r1, r0
 80059a0:	3184      	adds	r1, #132	; 0x84
 80059a2:	4313      	orrs	r3, r2
 80059a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	01db      	lsls	r3, r3, #7
 80059b0:	4413      	add	r3, r2
 80059b2:	3384      	adds	r3, #132	; 0x84
 80059b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4619      	mov	r1, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	01db      	lsls	r3, r3, #7
 80059c0:	440b      	add	r3, r1
 80059c2:	3384      	adds	r3, #132	; 0x84
 80059c4:	4619      	mov	r1, r3
 80059c6:	4b14      	ldr	r3, [pc, #80]	; (8005a18 <LTDC_SetConfig+0x330>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	01db      	lsls	r3, r3, #7
 80059d6:	4413      	add	r3, r2
 80059d8:	3384      	adds	r3, #132	; 0x84
 80059da:	461a      	mov	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	01db      	lsls	r3, r3, #7
 80059ec:	4413      	add	r3, r2
 80059ee:	3384      	adds	r3, #132	; 0x84
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	4611      	mov	r1, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	01d2      	lsls	r2, r2, #7
 80059fc:	440a      	add	r2, r1
 80059fe:	3284      	adds	r2, #132	; 0x84
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	6013      	str	r3, [r2, #0]
}
 8005a06:	bf00      	nop
 8005a08:	3724      	adds	r7, #36	; 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	fffff8f8 	.word	0xfffff8f8
 8005a18:	fffff800 	.word	0xfffff800

08005a1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a04      	ldr	r2, [pc, #16]	; (8005a38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a2a:	6013      	str	r3, [r2, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40007000 	.word	0x40007000

08005a3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a46:	4b23      	ldr	r3, [pc, #140]	; (8005ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	4a22      	ldr	r2, [pc, #136]	; (8005ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a50:	6413      	str	r3, [r2, #64]	; 0x40
 8005a52:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a5e:	4b1e      	ldr	r3, [pc, #120]	; (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1d      	ldr	r2, [pc, #116]	; (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a6a:	f7fd fb23 	bl	80030b4 <HAL_GetTick>
 8005a6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a70:	e009      	b.n	8005a86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a72:	f7fd fb1f 	bl	80030b4 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a80:	d901      	bls.n	8005a86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e022      	b.n	8005acc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a86:	4b14      	ldr	r3, [pc, #80]	; (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a92:	d1ee      	bne.n	8005a72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a94:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a0f      	ldr	r2, [pc, #60]	; (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aa0:	f7fd fb08 	bl	80030b4 <HAL_GetTick>
 8005aa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005aa6:	e009      	b.n	8005abc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005aa8:	f7fd fb04 	bl	80030b4 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ab6:	d901      	bls.n	8005abc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e007      	b.n	8005acc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ac8:	d1ee      	bne.n	8005aa8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40007000 	.word	0x40007000

08005adc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005ae4:	f7fd fae6 	bl	80030b4 <HAL_GetTick>
 8005ae8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e067      	b.n	8005bc4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10b      	bne.n	8005b18 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7fc fc79 	bl	8002400 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005b0e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f85e 	bl	8005bd4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	021a      	lsls	r2, r3, #8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2120      	movs	r1, #32
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f856 	bl	8005bf0 <QSPI_WaitFlagStateUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005b48:	7afb      	ldrb	r3, [r7, #11]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d135      	bne.n	8005bba <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <HAL_QSPI_Init+0xf0>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6852      	ldr	r2, [r2, #4]
 8005b5c:	0611      	lsls	r1, r2, #24
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68d2      	ldr	r2, [r2, #12]
 8005b62:	4311      	orrs	r1, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	69d2      	ldr	r2, [r2, #28]
 8005b68:	4311      	orrs	r1, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6a12      	ldr	r2, [r2, #32]
 8005b6e:	4311      	orrs	r1, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <HAL_QSPI_Init+0xf4>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6912      	ldr	r2, [r2, #16]
 8005b86:	0411      	lsls	r1, r2, #16
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6952      	ldr	r2, [r2, #20]
 8005b8c:	4311      	orrs	r1, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6992      	ldr	r2, [r2, #24]
 8005b92:	4311      	orrs	r1, r2
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	00ffff2f 	.word	0x00ffff2f
 8005bd0:	ffe0f8fe 	.word	0xffe0f8fe

08005bd4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c00:	e01a      	b.n	8005c38 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d016      	beq.n	8005c38 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0a:	f7fd fa53 	bl	80030b4 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d302      	bcc.n	8005c20 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2204      	movs	r2, #4
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2c:	f043 0201 	orr.w	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e00e      	b.n	8005c56 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bf14      	ite	ne
 8005c46:	2301      	movne	r3, #1
 8005c48:	2300      	moveq	r3, #0
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d1d6      	bne.n	8005c02 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e291      	b.n	800619a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 8087 	beq.w	8005d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c84:	4b96      	ldr	r3, [pc, #600]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 030c 	and.w	r3, r3, #12
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d00c      	beq.n	8005caa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c90:	4b93      	ldr	r3, [pc, #588]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f003 030c 	and.w	r3, r3, #12
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d112      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x62>
 8005c9c:	4b90      	ldr	r3, [pc, #576]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005caa:	4b8d      	ldr	r3, [pc, #564]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d06c      	beq.n	8005d90 <HAL_RCC_OscConfig+0x130>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d168      	bne.n	8005d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e26b      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cca:	d106      	bne.n	8005cda <HAL_RCC_OscConfig+0x7a>
 8005ccc:	4b84      	ldr	r3, [pc, #528]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a83      	ldr	r2, [pc, #524]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	e02e      	b.n	8005d38 <HAL_RCC_OscConfig+0xd8>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x9c>
 8005ce2:	4b7f      	ldr	r3, [pc, #508]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a7e      	ldr	r2, [pc, #504]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b7c      	ldr	r3, [pc, #496]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a7b      	ldr	r2, [pc, #492]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e01d      	b.n	8005d38 <HAL_RCC_OscConfig+0xd8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCC_OscConfig+0xc0>
 8005d06:	4b76      	ldr	r3, [pc, #472]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a75      	ldr	r2, [pc, #468]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4b73      	ldr	r3, [pc, #460]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a72      	ldr	r2, [pc, #456]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e00b      	b.n	8005d38 <HAL_RCC_OscConfig+0xd8>
 8005d20:	4b6f      	ldr	r3, [pc, #444]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a6e      	ldr	r2, [pc, #440]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b6c      	ldr	r3, [pc, #432]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a6b      	ldr	r2, [pc, #428]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d013      	beq.n	8005d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fd f9b8 	bl	80030b4 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d48:	f7fd f9b4 	bl	80030b4 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b64      	cmp	r3, #100	; 0x64
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e21f      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5a:	4b61      	ldr	r3, [pc, #388]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0xe8>
 8005d66:	e014      	b.n	8005d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d68:	f7fd f9a4 	bl	80030b4 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fd f9a0 	bl	80030b4 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	; 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e20b      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d82:	4b57      	ldr	r3, [pc, #348]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0x110>
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d069      	beq.n	8005e72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d9e:	4b50      	ldr	r3, [pc, #320]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005daa:	4b4d      	ldr	r3, [pc, #308]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d11c      	bne.n	8005df0 <HAL_RCC_OscConfig+0x190>
 8005db6:	4b4a      	ldr	r3, [pc, #296]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d116      	bne.n	8005df0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dc2:	4b47      	ldr	r3, [pc, #284]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_RCC_OscConfig+0x17a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d001      	beq.n	8005dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e1df      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dda:	4b41      	ldr	r3, [pc, #260]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	493d      	ldr	r1, [pc, #244]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dee:	e040      	b.n	8005e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d023      	beq.n	8005e40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005df8:	4b39      	ldr	r3, [pc, #228]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a38      	ldr	r2, [pc, #224]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005dfe:	f043 0301 	orr.w	r3, r3, #1
 8005e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fd f956 	bl	80030b4 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e0c:	f7fd f952 	bl	80030b4 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e1bd      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e1e:	4b30      	ldr	r3, [pc, #192]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	4929      	ldr	r1, [pc, #164]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]
 8005e3e:	e018      	b.n	8005e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e40:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a26      	ldr	r2, [pc, #152]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005e46:	f023 0301 	bic.w	r3, r3, #1
 8005e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fd f932 	bl	80030b4 <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e54:	f7fd f92e 	bl	80030b4 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e199      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e66:	4b1e      	ldr	r3, [pc, #120]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d038      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d019      	beq.n	8005eba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e86:	4b16      	ldr	r3, [pc, #88]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8a:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e92:	f7fd f90f 	bl	80030b4 <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e9a:	f7fd f90b 	bl	80030b4 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e176      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eac:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0f0      	beq.n	8005e9a <HAL_RCC_OscConfig+0x23a>
 8005eb8:	e01a      	b.n	8005ef0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ebe:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <HAL_RCC_OscConfig+0x280>)
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec6:	f7fd f8f5 	bl	80030b4 <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ecc:	e00a      	b.n	8005ee4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ece:	f7fd f8f1 	bl	80030b4 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d903      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e15c      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
 8005ee0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee4:	4b91      	ldr	r3, [pc, #580]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1ee      	bne.n	8005ece <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80a4 	beq.w	8006046 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efe:	4b8b      	ldr	r3, [pc, #556]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10d      	bne.n	8005f26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f0a:	4b88      	ldr	r3, [pc, #544]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	4a87      	ldr	r2, [pc, #540]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f14:	6413      	str	r3, [r2, #64]	; 0x40
 8005f16:	4b85      	ldr	r3, [pc, #532]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	60bb      	str	r3, [r7, #8]
 8005f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f26:	4b82      	ldr	r3, [pc, #520]	; (8006130 <HAL_RCC_OscConfig+0x4d0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d118      	bne.n	8005f64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f32:	4b7f      	ldr	r3, [pc, #508]	; (8006130 <HAL_RCC_OscConfig+0x4d0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a7e      	ldr	r2, [pc, #504]	; (8006130 <HAL_RCC_OscConfig+0x4d0>)
 8005f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3e:	f7fd f8b9 	bl	80030b4 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f46:	f7fd f8b5 	bl	80030b4 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b64      	cmp	r3, #100	; 0x64
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e120      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f58:	4b75      	ldr	r3, [pc, #468]	; (8006130 <HAL_RCC_OscConfig+0x4d0>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d106      	bne.n	8005f7a <HAL_RCC_OscConfig+0x31a>
 8005f6c:	4b6f      	ldr	r3, [pc, #444]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	4a6e      	ldr	r2, [pc, #440]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	6713      	str	r3, [r2, #112]	; 0x70
 8005f78:	e02d      	b.n	8005fd6 <HAL_RCC_OscConfig+0x376>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x33c>
 8005f82:	4b6a      	ldr	r3, [pc, #424]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	4a69      	ldr	r2, [pc, #420]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8e:	4b67      	ldr	r3, [pc, #412]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	4a66      	ldr	r2, [pc, #408]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005f94:	f023 0304 	bic.w	r3, r3, #4
 8005f98:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9a:	e01c      	b.n	8005fd6 <HAL_RCC_OscConfig+0x376>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	d10c      	bne.n	8005fbe <HAL_RCC_OscConfig+0x35e>
 8005fa4:	4b61      	ldr	r3, [pc, #388]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	4a60      	ldr	r2, [pc, #384]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005faa:	f043 0304 	orr.w	r3, r3, #4
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb0:	4b5e      	ldr	r3, [pc, #376]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	4a5d      	ldr	r2, [pc, #372]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005fb6:	f043 0301 	orr.w	r3, r3, #1
 8005fba:	6713      	str	r3, [r2, #112]	; 0x70
 8005fbc:	e00b      	b.n	8005fd6 <HAL_RCC_OscConfig+0x376>
 8005fbe:	4b5b      	ldr	r3, [pc, #364]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	4a5a      	ldr	r2, [pc, #360]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fca:	4b58      	ldr	r3, [pc, #352]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fce:	4a57      	ldr	r2, [pc, #348]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005fd0:	f023 0304 	bic.w	r3, r3, #4
 8005fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d015      	beq.n	800600a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fde:	f7fd f869 	bl	80030b4 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe6:	f7fd f865 	bl	80030b4 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e0ce      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffc:	4b4b      	ldr	r3, [pc, #300]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8005ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0ee      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x386>
 8006008:	e014      	b.n	8006034 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600a:	f7fd f853 	bl	80030b4 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006010:	e00a      	b.n	8006028 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fd f84f 	bl	80030b4 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0b8      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006028:	4b40      	ldr	r3, [pc, #256]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 800602a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1ee      	bne.n	8006012 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d105      	bne.n	8006046 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800603a:	4b3c      	ldr	r3, [pc, #240]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	4a3b      	ldr	r2, [pc, #236]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8006040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 80a4 	beq.w	8006198 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006050:	4b36      	ldr	r3, [pc, #216]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 030c 	and.w	r3, r3, #12
 8006058:	2b08      	cmp	r3, #8
 800605a:	d06b      	beq.n	8006134 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	2b02      	cmp	r3, #2
 8006062:	d149      	bne.n	80060f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006064:	4b31      	ldr	r3, [pc, #196]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a30      	ldr	r2, [pc, #192]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 800606a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800606e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fd f820 	bl	80030b4 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006078:	f7fd f81c 	bl	80030b4 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e087      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608a:	4b28      	ldr	r3, [pc, #160]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69da      	ldr	r2, [r3, #28]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	019b      	lsls	r3, r3, #6
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	3b01      	subs	r3, #1
 80060b0:	041b      	lsls	r3, r3, #16
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	061b      	lsls	r3, r3, #24
 80060ba:	4313      	orrs	r3, r2
 80060bc:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 80060be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c4:	4b19      	ldr	r3, [pc, #100]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 80060ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fc fff0 	bl	80030b4 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fc ffec 	bl	80030b4 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e057      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ea:	4b10      	ldr	r3, [pc, #64]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0f0      	beq.n	80060d8 <HAL_RCC_OscConfig+0x478>
 80060f6:	e04f      	b.n	8006198 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0b      	ldr	r2, [pc, #44]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 80060fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006104:	f7fc ffd6 	bl	80030b4 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800610c:	f7fc ffd2 	bl	80030b4 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e03d      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611e:	4b03      	ldr	r3, [pc, #12]	; (800612c <HAL_RCC_OscConfig+0x4cc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f0      	bne.n	800610c <HAL_RCC_OscConfig+0x4ac>
 800612a:	e035      	b.n	8006198 <HAL_RCC_OscConfig+0x538>
 800612c:	40023800 	.word	0x40023800
 8006130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006134:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <HAL_RCC_OscConfig+0x544>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d028      	beq.n	8006194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d121      	bne.n	8006194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615a:	429a      	cmp	r2, r3
 800615c:	d11a      	bne.n	8006194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006164:	4013      	ands	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800616a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800616c:	4293      	cmp	r3, r2
 800616e:	d111      	bne.n	8006194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	3b01      	subs	r3, #1
 800617e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006180:	429a      	cmp	r2, r3
 8006182:	d107      	bne.n	8006194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d001      	beq.n	8006198 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40023800 	.word	0x40023800

080061a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0d0      	b.n	8006362 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061c0:	4b6a      	ldr	r3, [pc, #424]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d910      	bls.n	80061f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ce:	4b67      	ldr	r3, [pc, #412]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f023 020f 	bic.w	r2, r3, #15
 80061d6:	4965      	ldr	r1, [pc, #404]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	4313      	orrs	r3, r2
 80061dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061de:	4b63      	ldr	r3, [pc, #396]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d001      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e0b8      	b.n	8006362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d020      	beq.n	800623e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006208:	4b59      	ldr	r3, [pc, #356]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	4a58      	ldr	r2, [pc, #352]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800620e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006220:	4b53      	ldr	r3, [pc, #332]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	4a52      	ldr	r2, [pc, #328]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 8006226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800622a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800622c:	4b50      	ldr	r3, [pc, #320]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	494d      	ldr	r1, [pc, #308]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800623a:	4313      	orrs	r3, r2
 800623c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d040      	beq.n	80062cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d107      	bne.n	8006262 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006252:	4b47      	ldr	r3, [pc, #284]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d115      	bne.n	800628a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e07f      	b.n	8006362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d107      	bne.n	800627a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626a:	4b41      	ldr	r3, [pc, #260]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e073      	b.n	8006362 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800627a:	4b3d      	ldr	r3, [pc, #244]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e06b      	b.n	8006362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800628a:	4b39      	ldr	r3, [pc, #228]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f023 0203 	bic.w	r2, r3, #3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4936      	ldr	r1, [pc, #216]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 8006298:	4313      	orrs	r3, r2
 800629a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629c:	f7fc ff0a 	bl	80030b4 <HAL_GetTick>
 80062a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a4:	f7fc ff06 	bl	80030b4 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e053      	b.n	8006362 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ba:	4b2d      	ldr	r3, [pc, #180]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 020c 	and.w	r2, r3, #12
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d1eb      	bne.n	80062a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062cc:	4b27      	ldr	r3, [pc, #156]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d210      	bcs.n	80062fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b24      	ldr	r3, [pc, #144]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 020f 	bic.w	r2, r3, #15
 80062e2:	4922      	ldr	r1, [pc, #136]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	4b20      	ldr	r3, [pc, #128]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e032      	b.n	8006362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006308:	4b19      	ldr	r3, [pc, #100]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	4916      	ldr	r1, [pc, #88]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 8006316:	4313      	orrs	r3, r2
 8006318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d009      	beq.n	800633a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006326:	4b12      	ldr	r3, [pc, #72]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	490e      	ldr	r1, [pc, #56]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 8006336:	4313      	orrs	r3, r2
 8006338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800633a:	f000 f821 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 800633e:	4601      	mov	r1, r0
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	091b      	lsrs	r3, r3, #4
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	4a0a      	ldr	r2, [pc, #40]	; (8006374 <HAL_RCC_ClockConfig+0x1cc>)
 800634c:	5cd3      	ldrb	r3, [r2, r3]
 800634e:	fa21 f303 	lsr.w	r3, r1, r3
 8006352:	4a09      	ldr	r2, [pc, #36]	; (8006378 <HAL_RCC_ClockConfig+0x1d0>)
 8006354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <HAL_RCC_ClockConfig+0x1d4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f7fc fcf4 	bl	8002d48 <HAL_InitTick>

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40023c00 	.word	0x40023c00
 8006370:	40023800 	.word	0x40023800
 8006374:	08025548 	.word	0x08025548
 8006378:	20000018 	.word	0x20000018
 800637c:	2000001c 	.word	0x2000001c

08006380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	607b      	str	r3, [r7, #4]
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	2300      	movs	r3, #0
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006392:	2300      	movs	r3, #0
 8006394:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006396:	4b50      	ldr	r3, [pc, #320]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d007      	beq.n	80063b2 <HAL_RCC_GetSysClockFreq+0x32>
 80063a2:	2b08      	cmp	r3, #8
 80063a4:	d008      	beq.n	80063b8 <HAL_RCC_GetSysClockFreq+0x38>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f040 808d 	bne.w	80064c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063ac:	4b4b      	ldr	r3, [pc, #300]	; (80064dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80063ae:	60bb      	str	r3, [r7, #8]
      break;
 80063b0:	e08c      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063b2:	4b4b      	ldr	r3, [pc, #300]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80063b4:	60bb      	str	r3, [r7, #8]
      break;
 80063b6:	e089      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063b8:	4b47      	ldr	r3, [pc, #284]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063c0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80063c2:	4b45      	ldr	r3, [pc, #276]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d023      	beq.n	8006416 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ce:	4b42      	ldr	r3, [pc, #264]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	099b      	lsrs	r3, r3, #6
 80063d4:	f04f 0400 	mov.w	r4, #0
 80063d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	ea03 0501 	and.w	r5, r3, r1
 80063e4:	ea04 0602 	and.w	r6, r4, r2
 80063e8:	4a3d      	ldr	r2, [pc, #244]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80063ea:	fb02 f106 	mul.w	r1, r2, r6
 80063ee:	2200      	movs	r2, #0
 80063f0:	fb02 f205 	mul.w	r2, r2, r5
 80063f4:	440a      	add	r2, r1
 80063f6:	493a      	ldr	r1, [pc, #232]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80063f8:	fba5 0101 	umull	r0, r1, r5, r1
 80063fc:	1853      	adds	r3, r2, r1
 80063fe:	4619      	mov	r1, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f04f 0400 	mov.w	r4, #0
 8006406:	461a      	mov	r2, r3
 8006408:	4623      	mov	r3, r4
 800640a:	f7f9 ff51 	bl	80002b0 <__aeabi_uldivmod>
 800640e:	4603      	mov	r3, r0
 8006410:	460c      	mov	r4, r1
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e049      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006416:	4b30      	ldr	r3, [pc, #192]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	099b      	lsrs	r3, r3, #6
 800641c:	f04f 0400 	mov.w	r4, #0
 8006420:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	ea03 0501 	and.w	r5, r3, r1
 800642c:	ea04 0602 	and.w	r6, r4, r2
 8006430:	4629      	mov	r1, r5
 8006432:	4632      	mov	r2, r6
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	f04f 0400 	mov.w	r4, #0
 800643c:	0154      	lsls	r4, r2, #5
 800643e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006442:	014b      	lsls	r3, r1, #5
 8006444:	4619      	mov	r1, r3
 8006446:	4622      	mov	r2, r4
 8006448:	1b49      	subs	r1, r1, r5
 800644a:	eb62 0206 	sbc.w	r2, r2, r6
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	f04f 0400 	mov.w	r4, #0
 8006456:	0194      	lsls	r4, r2, #6
 8006458:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800645c:	018b      	lsls	r3, r1, #6
 800645e:	1a5b      	subs	r3, r3, r1
 8006460:	eb64 0402 	sbc.w	r4, r4, r2
 8006464:	f04f 0100 	mov.w	r1, #0
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	00e2      	lsls	r2, r4, #3
 800646e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006472:	00d9      	lsls	r1, r3, #3
 8006474:	460b      	mov	r3, r1
 8006476:	4614      	mov	r4, r2
 8006478:	195b      	adds	r3, r3, r5
 800647a:	eb44 0406 	adc.w	r4, r4, r6
 800647e:	f04f 0100 	mov.w	r1, #0
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	02a2      	lsls	r2, r4, #10
 8006488:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800648c:	0299      	lsls	r1, r3, #10
 800648e:	460b      	mov	r3, r1
 8006490:	4614      	mov	r4, r2
 8006492:	4618      	mov	r0, r3
 8006494:	4621      	mov	r1, r4
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f04f 0400 	mov.w	r4, #0
 800649c:	461a      	mov	r2, r3
 800649e:	4623      	mov	r3, r4
 80064a0:	f7f9 ff06 	bl	80002b0 <__aeabi_uldivmod>
 80064a4:	4603      	mov	r3, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	0c1b      	lsrs	r3, r3, #16
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	3301      	adds	r3, #1
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c2:	60bb      	str	r3, [r7, #8]
      break;
 80064c4:	e002      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064c6:	4b05      	ldr	r3, [pc, #20]	; (80064dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80064c8:	60bb      	str	r3, [r7, #8]
      break;
 80064ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064cc:	68bb      	ldr	r3, [r7, #8]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40023800 	.word	0x40023800
 80064dc:	00f42400 	.word	0x00f42400
 80064e0:	017d7840 	.word	0x017d7840

080064e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064e8:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80064ea:	681b      	ldr	r3, [r3, #0]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	20000018 	.word	0x20000018

080064fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006500:	f7ff fff0 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 8006504:	4601      	mov	r1, r0
 8006506:	4b05      	ldr	r3, [pc, #20]	; (800651c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	0a9b      	lsrs	r3, r3, #10
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	4a03      	ldr	r2, [pc, #12]	; (8006520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006512:	5cd3      	ldrb	r3, [r2, r3]
 8006514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006518:	4618      	mov	r0, r3
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40023800 	.word	0x40023800
 8006520:	08025558 	.word	0x08025558

08006524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006528:	f7ff ffdc 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 800652c:	4601      	mov	r1, r0
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	0b5b      	lsrs	r3, r3, #13
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	4a03      	ldr	r2, [pc, #12]	; (8006548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800653a:	5cd3      	ldrb	r3, [r2, r3]
 800653c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006540:	4618      	mov	r0, r3
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40023800 	.word	0x40023800
 8006548:	08025558 	.word	0x08025558

0800654c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	220f      	movs	r2, #15
 800655a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800655c:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <HAL_RCC_GetClockConfig+0x5c>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0203 	and.w	r2, r3, #3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006568:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <HAL_RCC_GetClockConfig+0x5c>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006574:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006580:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	08db      	lsrs	r3, r3, #3
 8006586:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <HAL_RCC_GetClockConfig+0x60>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 020f 	and.w	r2, r3, #15
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	601a      	str	r2, [r3, #0]
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800
 80065ac:	40023c00 	.word	0x40023c00

080065b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d012      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065d8:	4b69      	ldr	r3, [pc, #420]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	4a68      	ldr	r2, [pc, #416]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80065e2:	6093      	str	r3, [r2, #8]
 80065e4:	4b66      	ldr	r3, [pc, #408]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ec:	4964      	ldr	r1, [pc, #400]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80065fa:	2301      	movs	r3, #1
 80065fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d017      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800660a:	4b5d      	ldr	r3, [pc, #372]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006618:	4959      	ldr	r1, [pc, #356]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006628:	d101      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800662a:	2301      	movs	r3, #1
 800662c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006636:	2301      	movs	r3, #1
 8006638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d017      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006646:	4b4e      	ldr	r3, [pc, #312]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800664c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	494a      	ldr	r1, [pc, #296]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006656:	4313      	orrs	r3, r2
 8006658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006664:	d101      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006666:	2301      	movs	r3, #1
 8006668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006672:	2301      	movs	r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006682:	2301      	movs	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 808b 	beq.w	80067aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006694:	4b3a      	ldr	r3, [pc, #232]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	4a39      	ldr	r2, [pc, #228]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800669a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800669e:	6413      	str	r3, [r2, #64]	; 0x40
 80066a0:	4b37      	ldr	r3, [pc, #220]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066ac:	4b35      	ldr	r3, [pc, #212]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a34      	ldr	r2, [pc, #208]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b8:	f7fc fcfc 	bl	80030b4 <HAL_GetTick>
 80066bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c0:	f7fc fcf8 	bl	80030b4 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b64      	cmp	r3, #100	; 0x64
 80066cc:	d901      	bls.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e355      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066d2:	4b2c      	ldr	r3, [pc, #176]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066de:	4b28      	ldr	r3, [pc, #160]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d035      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d02e      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006704:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006706:	4b1e      	ldr	r3, [pc, #120]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670a:	4a1d      	ldr	r2, [pc, #116]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006710:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006712:	4b1b      	ldr	r3, [pc, #108]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006716:	4a1a      	ldr	r2, [pc, #104]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800671e:	4a18      	ldr	r2, [pc, #96]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d114      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fc fcc0 	bl	80030b4 <HAL_GetTick>
 8006734:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006736:	e00a      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006738:	f7fc fcbc 	bl	80030b4 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	f241 3288 	movw	r2, #5000	; 0x1388
 8006746:	4293      	cmp	r3, r2
 8006748:	d901      	bls.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e317      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674e:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0ee      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006766:	d111      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006774:	4b04      	ldr	r3, [pc, #16]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006776:	400b      	ands	r3, r1
 8006778:	4901      	ldr	r1, [pc, #4]	; (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677a:	4313      	orrs	r3, r2
 800677c:	608b      	str	r3, [r1, #8]
 800677e:	e00b      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006780:	40023800 	.word	0x40023800
 8006784:	40007000 	.word	0x40007000
 8006788:	0ffffcff 	.word	0x0ffffcff
 800678c:	4bb0      	ldr	r3, [pc, #704]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	4aaf      	ldr	r2, [pc, #700]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006792:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006796:	6093      	str	r3, [r2, #8]
 8006798:	4bad      	ldr	r3, [pc, #692]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800679a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a4:	49aa      	ldr	r1, [pc, #680]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d010      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067b6:	4ba6      	ldr	r3, [pc, #664]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067bc:	4aa4      	ldr	r2, [pc, #656]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80067c6:	4ba2      	ldr	r3, [pc, #648]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	499f      	ldr	r1, [pc, #636]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067e4:	4b9a      	ldr	r3, [pc, #616]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f2:	4997      	ldr	r1, [pc, #604]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006806:	4b92      	ldr	r3, [pc, #584]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006814:	498e      	ldr	r1, [pc, #568]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006828:	4b89      	ldr	r3, [pc, #548]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006836:	4986      	ldr	r1, [pc, #536]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800684a:	4b81      	ldr	r3, [pc, #516]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800684c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006850:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006858:	497d      	ldr	r1, [pc, #500]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800686c:	4b78      	ldr	r3, [pc, #480]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800686e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006872:	f023 0203 	bic.w	r2, r3, #3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	4975      	ldr	r1, [pc, #468]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800688e:	4b70      	ldr	r3, [pc, #448]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006894:	f023 020c 	bic.w	r2, r3, #12
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689c:	496c      	ldr	r1, [pc, #432]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068b0:	4b67      	ldr	r3, [pc, #412]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068be:	4964      	ldr	r1, [pc, #400]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068d2:	4b5f      	ldr	r3, [pc, #380]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e0:	495b      	ldr	r1, [pc, #364]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068f4:	4b56      	ldr	r3, [pc, #344]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	4953      	ldr	r1, [pc, #332]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006916:	4b4e      	ldr	r3, [pc, #312]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006924:	494a      	ldr	r1, [pc, #296]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006938:	4b45      	ldr	r3, [pc, #276]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006946:	4942      	ldr	r1, [pc, #264]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800695a:	4b3d      	ldr	r3, [pc, #244]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006960:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006968:	4939      	ldr	r1, [pc, #228]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800697c:	4b34      	ldr	r3, [pc, #208]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006982:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800698a:	4931      	ldr	r1, [pc, #196]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d011      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800699e:	4b2c      	ldr	r3, [pc, #176]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ac:	4928      	ldr	r1, [pc, #160]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069bc:	d101      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80069be:	2301      	movs	r3, #1
 80069c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80069ce:	2301      	movs	r3, #1
 80069d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069de:	4b1c      	ldr	r3, [pc, #112]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ec:	4918      	ldr	r1, [pc, #96]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a00:	4b13      	ldr	r3, [pc, #76]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a10:	490f      	ldr	r1, [pc, #60]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d005      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a26:	f040 80d8 	bne.w	8006bda <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a08      	ldr	r2, [pc, #32]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a36:	f7fc fb3d 	bl	80030b4 <HAL_GetTick>
 8006a3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a3c:	e00a      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a3e:	f7fc fb39 	bl	80030b4 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b64      	cmp	r3, #100	; 0x64
 8006a4a:	d903      	bls.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e196      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006a50:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a54:	4b6c      	ldr	r3, [pc, #432]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1ee      	bne.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d021      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d11d      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a74:	4b64      	ldr	r3, [pc, #400]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7a:	0c1b      	lsrs	r3, r3, #16
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a82:	4b61      	ldr	r3, [pc, #388]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a88:	0e1b      	lsrs	r3, r3, #24
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	019a      	lsls	r2, r3, #6
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	041b      	lsls	r3, r3, #16
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	061b      	lsls	r3, r3, #24
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	071b      	lsls	r3, r3, #28
 8006aa8:	4957      	ldr	r1, [pc, #348]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac4:	d00a      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d02e      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ada:	d129      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006adc:	4b4a      	ldr	r3, [pc, #296]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006aea:	4b47      	ldr	r3, [pc, #284]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af0:	0f1b      	lsrs	r3, r3, #28
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	019a      	lsls	r2, r3, #6
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	041b      	lsls	r3, r3, #16
 8006b02:	431a      	orrs	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	061b      	lsls	r3, r3, #24
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	071b      	lsls	r3, r3, #28
 8006b10:	493d      	ldr	r1, [pc, #244]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b18:	4b3b      	ldr	r3, [pc, #236]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1e:	f023 021f 	bic.w	r2, r3, #31
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	3b01      	subs	r3, #1
 8006b28:	4937      	ldr	r1, [pc, #220]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01d      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b3c:	4b32      	ldr	r3, [pc, #200]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b42:	0e1b      	lsrs	r3, r3, #24
 8006b44:	f003 030f 	and.w	r3, r3, #15
 8006b48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b4a:	4b2f      	ldr	r3, [pc, #188]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b50:	0f1b      	lsrs	r3, r3, #28
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	019a      	lsls	r2, r3, #6
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	041b      	lsls	r3, r3, #16
 8006b64:	431a      	orrs	r2, r3
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	061b      	lsls	r3, r3, #24
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	071b      	lsls	r3, r3, #28
 8006b70:	4925      	ldr	r1, [pc, #148]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d011      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	019a      	lsls	r2, r3, #6
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	431a      	orrs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	061b      	lsls	r3, r3, #24
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	071b      	lsls	r3, r3, #28
 8006ba0:	4919      	ldr	r1, [pc, #100]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ba8:	4b17      	ldr	r3, [pc, #92]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a16      	ldr	r2, [pc, #88]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb4:	f7fc fa7e 	bl	80030b4 <HAL_GetTick>
 8006bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bbc:	f7fc fa7a 	bl	80030b4 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b64      	cmp	r3, #100	; 0x64
 8006bc8:	d901      	bls.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e0d7      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bce:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	f040 80cd 	bne.w	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006be2:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a08      	ldr	r2, [pc, #32]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bee:	f7fc fa61 	bl	80030b4 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bf4:	e00a      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bf6:	f7fc fa5d 	bl	80030b4 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b64      	cmp	r3, #100	; 0x64
 8006c02:	d903      	bls.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e0ba      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006c08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c0c:	4b5e      	ldr	r3, [pc, #376]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c18:	d0ed      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d009      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d02e      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d12a      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c42:	4b51      	ldr	r3, [pc, #324]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c50:	4b4d      	ldr	r3, [pc, #308]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	0f1b      	lsrs	r3, r3, #28
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	019a      	lsls	r2, r3, #6
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	041b      	lsls	r3, r3, #16
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	061b      	lsls	r3, r3, #24
 8006c70:	431a      	orrs	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	071b      	lsls	r3, r3, #28
 8006c76:	4944      	ldr	r1, [pc, #272]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c7e:	4b42      	ldr	r3, [pc, #264]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	493d      	ldr	r1, [pc, #244]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d022      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cac:	d11d      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cae:	4b36      	ldr	r3, [pc, #216]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb4:	0e1b      	lsrs	r3, r3, #24
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006cbc:	4b32      	ldr	r3, [pc, #200]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc2:	0f1b      	lsrs	r3, r3, #28
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	019a      	lsls	r2, r3, #6
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	061b      	lsls	r3, r3, #24
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	071b      	lsls	r3, r3, #28
 8006ce2:	4929      	ldr	r1, [pc, #164]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0308 	and.w	r3, r3, #8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d028      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cf6:	4b24      	ldr	r3, [pc, #144]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfc:	0e1b      	lsrs	r3, r3, #24
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d04:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	019a      	lsls	r2, r3, #6
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	061b      	lsls	r3, r3, #24
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	071b      	lsls	r3, r3, #28
 8006d2a:	4917      	ldr	r1, [pc, #92]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d32:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	4911      	ldr	r1, [pc, #68]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d48:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a0e      	ldr	r2, [pc, #56]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d54:	f7fc f9ae 	bl	80030b4 <HAL_GetTick>
 8006d58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d5c:	f7fc f9aa 	bl	80030b4 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b64      	cmp	r3, #100	; 0x64
 8006d68:	d901      	bls.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e007      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d6e:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d7a:	d1ef      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3720      	adds	r7, #32
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40023800 	.word	0x40023800

08006d8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006daa:	f040 8086 	bne.w	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006dae:	4b8d      	ldr	r3, [pc, #564]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006dbc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc4:	d03e      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dca:	d073      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d000      	beq.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006dd0:	e074      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006dd2:	4b84      	ldr	r3, [pc, #528]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d108      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dde:	4b81      	ldr	r3, [pc, #516]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de6:	4a80      	ldr	r2, [pc, #512]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	e007      	b.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006df0:	4b7c      	ldr	r3, [pc, #496]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006df8:	4a7c      	ldr	r2, [pc, #496]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfe:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006e00:	4b78      	ldr	r3, [pc, #480]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e06:	0e1b      	lsrs	r3, r3, #24
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006e0e:	4b75      	ldr	r3, [pc, #468]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e14:	099b      	lsrs	r3, r3, #6
 8006e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	fb02 f203 	mul.w	r2, r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e26:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006e28:	4b6e      	ldr	r3, [pc, #440]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	f003 031f 	and.w	r3, r3, #31
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e40:	617b      	str	r3, [r7, #20]
        break;
 8006e42:	e03b      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e44:	4b67      	ldr	r3, [pc, #412]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d108      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e50:	4b64      	ldr	r3, [pc, #400]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e58:	4a63      	ldr	r2, [pc, #396]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	e007      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e62:	4b60      	ldr	r3, [pc, #384]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e6a:	4a60      	ldr	r2, [pc, #384]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e70:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006e72:	4b5c      	ldr	r3, [pc, #368]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e78:	0e1b      	lsrs	r3, r3, #24
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006e80:	4b58      	ldr	r3, [pc, #352]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e86:	099b      	lsrs	r3, r3, #6
 8006e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	fb02 f203 	mul.w	r2, r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e98:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006e9a:	4b52      	ldr	r3, [pc, #328]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea0:	f003 031f 	and.w	r3, r3, #31
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb0:	617b      	str	r3, [r7, #20]
        break;
 8006eb2:	e003      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006eb4:	4b4e      	ldr	r3, [pc, #312]	; (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006eb6:	617b      	str	r3, [r7, #20]
        break;
 8006eb8:	e000      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8006eba:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec2:	f040 8086 	bne.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006ec6:	4b47      	ldr	r3, [pc, #284]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ecc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006ed4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006edc:	d03e      	beq.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006ede:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ee2:	d073      	beq.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d000      	beq.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006ee8:	e074      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006eea:	4b3e      	ldr	r3, [pc, #248]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d108      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ef6:	4b3b      	ldr	r3, [pc, #236]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006efe:	4a3a      	ldr	r2, [pc, #232]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e007      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006f08:	4b36      	ldr	r3, [pc, #216]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f10:	4a36      	ldr	r2, [pc, #216]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f16:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006f18:	4b32      	ldr	r3, [pc, #200]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1e:	0e1b      	lsrs	r3, r3, #24
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006f26:	4b2f      	ldr	r3, [pc, #188]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2c:	099b      	lsrs	r3, r3, #6
 8006f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	fb02 f203 	mul.w	r2, r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006f40:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f46:	0a1b      	lsrs	r3, r3, #8
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f58:	617b      	str	r3, [r7, #20]
        break;
 8006f5a:	e03b      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006f5c:	4b21      	ldr	r3, [pc, #132]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d108      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f68:	4b1e      	ldr	r3, [pc, #120]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f70:	4a1d      	ldr	r2, [pc, #116]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	e007      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006f7a:	4b1a      	ldr	r3, [pc, #104]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f82:	4a1a      	ldr	r2, [pc, #104]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006f8a:	4b16      	ldr	r3, [pc, #88]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f90:	0e1b      	lsrs	r3, r3, #24
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006f98:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f9e:	099b      	lsrs	r3, r3, #6
 8006fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	fb02 f203 	mul.w	r2, r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006fb2:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb8:	f003 031f 	and.w	r3, r3, #31
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc8:	617b      	str	r3, [r7, #20]
        break;
 8006fca:	e003      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fcc:	4b08      	ldr	r3, [pc, #32]	; (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006fce:	617b      	str	r3, [r7, #20]
        break;
 8006fd0:	e000      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006fd2:	bf00      	nop

  return frequency;
 8006fd4:	697b      	ldr	r3, [r7, #20]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	00f42400 	.word	0x00f42400
 8006fec:	017d7840 	.word	0x017d7840
 8006ff0:	00bb8000 	.word	0x00bb8000

08006ff4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e06b      	b.n	80070de <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7f5b      	ldrb	r3, [r3, #29]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d105      	bne.n	800701c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fb fa82 	bl	8002520 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	22ca      	movs	r2, #202	; 0xca
 8007028:	625a      	str	r2, [r3, #36]	; 0x24
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2253      	movs	r2, #83	; 0x53
 8007030:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fb00 	bl	8007638 <RTC_EnterInitMode>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d008      	beq.n	8007050 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	22ff      	movs	r2, #255	; 0xff
 8007044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2204      	movs	r2, #4
 800704a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e046      	b.n	80070de <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6899      	ldr	r1, [r3, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4b23      	ldr	r3, [pc, #140]	; (80070e8 <HAL_RTC_Init+0xf4>)
 800705c:	400b      	ands	r3, r1
 800705e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6899      	ldr	r1, [r3, #8]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68d2      	ldr	r2, [r2, #12]
 8007086:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6919      	ldr	r1, [r3, #16]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	041a      	lsls	r2, r3, #16
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070aa:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0208 	bic.w	r2, r2, #8
 80070ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	22ff      	movs	r2, #255	; 0xff
 80070d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80070dc:	2300      	movs	r3, #0
  }
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	ff8fffbf 	.word	0xff8fffbf

080070ec <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	7f1b      	ldrb	r3, [r3, #28]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_RTC_SetTime+0x1c>
 8007104:	2302      	movs	r3, #2
 8007106:	e0a8      	b.n	800725a <HAL_RTC_SetTime+0x16e>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2202      	movs	r2, #2
 8007112:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d126      	bne.n	8007168 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2200      	movs	r2, #0
 800712c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 faac 	bl	8007690 <RTC_ByteToBcd2>
 8007138:	4603      	mov	r3, r0
 800713a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 faa5 	bl	8007690 <RTC_ByteToBcd2>
 8007146:	4603      	mov	r3, r0
 8007148:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800714a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	789b      	ldrb	r3, [r3, #2]
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fa9d 	bl	8007690 <RTC_ByteToBcd2>
 8007156:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007158:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	7b1b      	ldrb	r3, [r3, #12]
 8007160:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e018      	b.n	800719a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d102      	bne.n	800717c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2200      	movs	r2, #0
 800717a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007188:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800718e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	7b1b      	ldrb	r3, [r3, #12]
 8007194:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	22ca      	movs	r2, #202	; 0xca
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2253      	movs	r2, #83	; 0x53
 80071a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 fa44 	bl	8007638 <RTC_EnterInitMode>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00b      	beq.n	80071ce <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	22ff      	movs	r2, #255	; 0xff
 80071bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2204      	movs	r2, #4
 80071c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e045      	b.n	800725a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	6979      	ldr	r1, [r7, #20]
 80071d4:	4b23      	ldr	r3, [pc, #140]	; (8007264 <HAL_RTC_SetTime+0x178>)
 80071d6:	400b      	ands	r3, r1
 80071d8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6899      	ldr	r1, [r3, #8]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	431a      	orrs	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007210:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d111      	bne.n	8007244 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f9e1 	bl	80075e8 <HAL_RTC_WaitForSynchro>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	22ff      	movs	r2, #255	; 0xff
 8007232:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2204      	movs	r2, #4
 8007238:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e00a      	b.n	800725a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	22ff      	movs	r2, #255	; 0xff
 800724a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2201      	movs	r2, #1
 8007250:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007258:	2300      	movs	r3, #0
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	bd90      	pop	{r4, r7, pc}
 8007262:	bf00      	nop
 8007264:	007f7f7f 	.word	0x007f7f7f

08007268 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007268:	b590      	push	{r4, r7, lr}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	7f1b      	ldrb	r3, [r3, #28]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_RTC_SetDate+0x1c>
 8007280:	2302      	movs	r3, #2
 8007282:	e092      	b.n	80073aa <HAL_RTC_SetDate+0x142>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2201      	movs	r2, #1
 8007288:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2202      	movs	r2, #2
 800728e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10e      	bne.n	80072b4 <HAL_RTC_SetDate+0x4c>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	785b      	ldrb	r3, [r3, #1]
 80072a6:	f023 0310 	bic.w	r3, r3, #16
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	330a      	adds	r3, #10
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d11c      	bne.n	80072f4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	78db      	ldrb	r3, [r3, #3]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 f9e6 	bl	8007690 <RTC_ByteToBcd2>
 80072c4:	4603      	mov	r3, r0
 80072c6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 f9df 	bl	8007690 <RTC_ByteToBcd2>
 80072d2:	4603      	mov	r3, r0
 80072d4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80072d6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	789b      	ldrb	r3, [r3, #2]
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 f9d7 	bl	8007690 <RTC_ByteToBcd2>
 80072e2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80072e4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]
 80072f2:	e00e      	b.n	8007312 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	78db      	ldrb	r3, [r3, #3]
 80072f8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007300:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007306:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	22ca      	movs	r2, #202	; 0xca
 8007318:	625a      	str	r2, [r3, #36]	; 0x24
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2253      	movs	r2, #83	; 0x53
 8007320:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 f988 	bl	8007638 <RTC_EnterInitMode>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	22ff      	movs	r2, #255	; 0xff
 8007334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2204      	movs	r2, #4
 800733a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e031      	b.n	80073aa <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	6979      	ldr	r1, [r7, #20]
 800734c:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <HAL_RTC_SetDate+0x14c>)
 800734e:	400b      	ands	r3, r1
 8007350:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007360:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 0320 	and.w	r3, r3, #32
 800736c:	2b00      	cmp	r3, #0
 800736e:	d111      	bne.n	8007394 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f939 	bl	80075e8 <HAL_RTC_WaitForSynchro>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00b      	beq.n	8007394 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	22ff      	movs	r2, #255	; 0xff
 8007382:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2204      	movs	r2, #4
 8007388:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e00a      	b.n	80073aa <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	22ff      	movs	r2, #255	; 0xff
 800739a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80073a8:	2300      	movs	r3, #0
  }
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd90      	pop	{r4, r7, pc}
 80073b2:	bf00      	nop
 80073b4:	00ffff3f 	.word	0x00ffff3f

080073b8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b089      	sub	sp, #36	; 0x24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	7f1b      	ldrb	r3, [r3, #28]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_RTC_SetAlarm+0x24>
 80073d8:	2302      	movs	r3, #2
 80073da:	e101      	b.n	80075e0 <HAL_RTC_SetAlarm+0x228>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2202      	movs	r2, #2
 80073e6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d137      	bne.n	800745e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2200      	movs	r2, #0
 8007400:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f000 f942 	bl	8007690 <RTC_ByteToBcd2>
 800740c:	4603      	mov	r3, r0
 800740e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f93b 	bl	8007690 <RTC_ByteToBcd2>
 800741a:	4603      	mov	r3, r0
 800741c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800741e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	789b      	ldrb	r3, [r3, #2]
 8007424:	4618      	mov	r0, r3
 8007426:	f000 f933 	bl	8007690 <RTC_ByteToBcd2>
 800742a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800742c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	7b1b      	ldrb	r3, [r3, #12]
 8007434:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007436:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007440:	4618      	mov	r0, r3
 8007442:	f000 f925 	bl	8007690 <RTC_ByteToBcd2>
 8007446:	4603      	mov	r3, r0
 8007448:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800744a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007452:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007458:	4313      	orrs	r3, r2
 800745a:	61fb      	str	r3, [r7, #28]
 800745c:	e023      	b.n	80074a6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	785b      	ldrb	r3, [r3, #1]
 800747c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800747e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007484:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	7b1b      	ldrb	r3, [r3, #12]
 800748a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800748c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007494:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007496:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800749c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80074a2:	4313      	orrs	r3, r2
 80074a4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	22ca      	movs	r2, #202	; 0xca
 80074b8:	625a      	str	r2, [r3, #36]	; 0x24
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2253      	movs	r2, #83	; 0x53
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ca:	d13f      	bne.n	800754c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074da:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074ea:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074ec:	f7fb fde2 	bl	80030b4 <HAL_GetTick>
 80074f0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80074f2:	e013      	b.n	800751c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074f4:	f7fb fdde 	bl	80030b4 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007502:	d90b      	bls.n	800751c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	22ff      	movs	r2, #255	; 0xff
 800750a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2203      	movs	r2, #3
 8007510:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e061      	b.n	80075e0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0e4      	beq.n	80074f4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007548:	609a      	str	r2, [r3, #8]
 800754a:	e03e      	b.n	80075ca <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800755a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800756a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800756c:	f7fb fda2 	bl	80030b4 <HAL_GetTick>
 8007570:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007572:	e013      	b.n	800759c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007574:	f7fb fd9e 	bl	80030b4 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007582:	d90b      	bls.n	800759c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	22ff      	movs	r2, #255	; 0xff
 800758a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2203      	movs	r2, #3
 8007590:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e021      	b.n	80075e0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0e4      	beq.n	8007574 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	22ff      	movs	r2, #255	; 0xff
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3724      	adds	r7, #36	; 0x24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd90      	pop	{r4, r7, pc}

080075e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007602:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007604:	f7fb fd56 	bl	80030b4 <HAL_GetTick>
 8007608:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800760a:	e009      	b.n	8007620 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800760c:	f7fb fd52 	bl	80030b4 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800761a:	d901      	bls.n	8007620 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e007      	b.n	8007630 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0ee      	beq.n	800760c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d119      	bne.n	8007686 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f04f 32ff 	mov.w	r2, #4294967295
 800765a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800765c:	f7fb fd2a 	bl	80030b4 <HAL_GetTick>
 8007660:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007662:	e009      	b.n	8007678 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007664:	f7fb fd26 	bl	80030b4 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007672:	d901      	bls.n	8007678 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e007      	b.n	8007688 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0ee      	beq.n	8007664 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800769e:	e005      	b.n	80076ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	3b0a      	subs	r3, #10
 80076aa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	2b09      	cmp	r3, #9
 80076b0:	d8f6      	bhi.n	80076a0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	4313      	orrs	r3, r2
 80076be:	b2db      	uxtb	r3, r3
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	7f1b      	ldrb	r3, [r3, #28]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e03e      	b.n	8007766 <HAL_RTCEx_SetTimeStamp+0x9a>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2202      	movs	r2, #2
 80076f2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	4b1e      	ldr	r3, [pc, #120]	; (8007774 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80076fc:	4013      	ands	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	22ca      	movs	r2, #202	; 0xca
 800770e:	625a      	str	r2, [r3, #36]	; 0x24
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2253      	movs	r2, #83	; 0x53
 8007716:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0206 	bic.w	r2, r2, #6
 8007726:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	430a      	orrs	r2, r1
 8007736:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800774e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	22ff      	movs	r2, #255	; 0xff
 8007756:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	fffff7f7 	.word	0xfffff7f7

08007778 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e149      	b.n	8007a2a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7fb fa62 	bl	8002c74 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f94f 	bl	8007a5c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d007      	beq.n	80077d6 <HAL_SAI_Init+0x5e>
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d302      	bcc.n	80077d0 <HAL_SAI_Init+0x58>
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d006      	beq.n	80077dc <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80077ce:	e008      	b.n	80077e2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61fb      	str	r3, [r7, #28]
      break;
 80077d4:	e005      	b.n	80077e2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80077d6:	2310      	movs	r3, #16
 80077d8:	61fb      	str	r3, [r7, #28]
      break;
 80077da:	e002      	b.n	80077e2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80077dc:	2320      	movs	r3, #32
 80077de:	61fb      	str	r3, [r7, #28]
      break;
 80077e0:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d81d      	bhi.n	8007826 <HAL_SAI_Init+0xae>
 80077ea:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <HAL_SAI_Init+0x78>)
 80077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f0:	08007801 	.word	0x08007801
 80077f4:	08007807 	.word	0x08007807
 80077f8:	0800780f 	.word	0x0800780f
 80077fc:	08007817 	.word	0x08007817
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
      }
      break;
 8007804:	e010      	b.n	8007828 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800780a:	617b      	str	r3, [r7, #20]
      }
      break;
 800780c:	e00c      	b.n	8007828 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800780e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007812:	617b      	str	r3, [r7, #20]
      }
      break;
 8007814:	e008      	b.n	8007828 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007816:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800781a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f043 0301 	orr.w	r3, r3, #1
 8007822:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007824:	e000      	b.n	8007828 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007826:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a81      	ldr	r2, [pc, #516]	; (8007a34 <HAL_SAI_Init+0x2bc>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d004      	beq.n	800783c <HAL_SAI_Init+0xc4>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a80      	ldr	r2, [pc, #512]	; (8007a38 <HAL_SAI_Init+0x2c0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d103      	bne.n	8007844 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800783c:	4a7f      	ldr	r2, [pc, #508]	; (8007a3c <HAL_SAI_Init+0x2c4>)
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	e002      	b.n	800784a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007844:	4a7e      	ldr	r2, [pc, #504]	; (8007a40 <HAL_SAI_Init+0x2c8>)
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d043      	beq.n	80078da <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a76      	ldr	r2, [pc, #472]	; (8007a34 <HAL_SAI_Init+0x2bc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_SAI_Init+0xf2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a74      	ldr	r2, [pc, #464]	; (8007a38 <HAL_SAI_Init+0x2c0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d104      	bne.n	8007874 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800786a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800786e:	f7ff fa8d 	bl	8006d8c <HAL_RCCEx_GetPeriphCLKFreq>
 8007872:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a72      	ldr	r2, [pc, #456]	; (8007a44 <HAL_SAI_Init+0x2cc>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d004      	beq.n	8007888 <HAL_SAI_Init+0x110>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a71      	ldr	r2, [pc, #452]	; (8007a48 <HAL_SAI_Init+0x2d0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d104      	bne.n	8007892 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007888:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800788c:	f7ff fa7e 	bl	8006d8c <HAL_RCCEx_GetPeriphCLKFreq>
 8007890:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	025b      	lsls	r3, r3, #9
 80078a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	4a67      	ldr	r2, [pc, #412]	; (8007a4c <HAL_SAI_Init+0x2d4>)
 80078ae:	fba2 2303 	umull	r2, r3, r2, r3
 80078b2:	08da      	lsrs	r2, r3, #3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80078b8:	68f9      	ldr	r1, [r7, #12]
 80078ba:	4b64      	ldr	r3, [pc, #400]	; (8007a4c <HAL_SAI_Init+0x2d4>)
 80078bc:	fba3 2301 	umull	r2, r3, r3, r1
 80078c0:	08da      	lsrs	r2, r3, #3
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	1aca      	subs	r2, r1, r3
 80078cc:	2a08      	cmp	r2, #8
 80078ce:	d904      	bls.n	80078da <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_SAI_Init+0x172>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d109      	bne.n	80078fe <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <HAL_SAI_Init+0x17e>
 80078f2:	2300      	movs	r3, #0
 80078f4:	e001      	b.n	80078fa <HAL_SAI_Init+0x182>
 80078f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078fa:	61bb      	str	r3, [r7, #24]
 80078fc:	e008      	b.n	8007910 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007902:	2b01      	cmp	r3, #1
 8007904:	d102      	bne.n	800790c <HAL_SAI_Init+0x194>
 8007906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800790a:	e000      	b.n	800790e <HAL_SAI_Init+0x196>
 800790c:	2300      	movs	r3, #0
 800790e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6819      	ldr	r1, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b4d      	ldr	r3, [pc, #308]	; (8007a50 <HAL_SAI_Init+0x2d8>)
 800791c:	400b      	ands	r3, r1
 800791e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6819      	ldr	r1, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007934:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	431a      	orrs	r2, r3
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007948:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007954:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	051b      	lsls	r3, r3, #20
 800795c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6859      	ldr	r1, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	4b38      	ldr	r3, [pc, #224]	; (8007a54 <HAL_SAI_Init+0x2dc>)
 8007972:	400b      	ands	r3, r1
 8007974:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6859      	ldr	r1, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699a      	ldr	r2, [r3, #24]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	431a      	orrs	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6899      	ldr	r1, [r3, #8]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4b2e      	ldr	r3, [pc, #184]	; (8007a58 <HAL_SAI_Init+0x2e0>)
 80079a0:	400b      	ands	r3, r1
 80079a2:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6899      	ldr	r1, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80079b4:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80079ba:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80079c0:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c6:	3b01      	subs	r3, #1
 80079c8:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80079ca:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68d9      	ldr	r1, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	f24f 0320 	movw	r3, #61472	; 0xf020
 80079e2:	400b      	ands	r3, r1
 80079e4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68d9      	ldr	r1, [r3, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079fa:	041b      	lsls	r3, r3, #16
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a02:	3b01      	subs	r3, #1
 8007a04:	021b      	lsls	r3, r3, #8
 8007a06:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3720      	adds	r7, #32
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40015804 	.word	0x40015804
 8007a38:	40015824 	.word	0x40015824
 8007a3c:	40015800 	.word	0x40015800
 8007a40:	40015c00 	.word	0x40015c00
 8007a44:	40015c04 	.word	0x40015c04
 8007a48:	40015c24 	.word	0x40015c24
 8007a4c:	cccccccd 	.word	0xcccccccd
 8007a50:	ff05c010 	.word	0xff05c010
 8007a54:	ffff1ff0 	.word	0xffff1ff0
 8007a58:	fff88000 	.word	0xfff88000

08007a5c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007a5c:	b490      	push	{r4, r7}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007a64:	4b16      	ldr	r3, [pc, #88]	; (8007ac0 <SAI_Disable+0x64>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a16      	ldr	r2, [pc, #88]	; (8007ac4 <SAI_Disable+0x68>)
 8007a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6e:	0b1b      	lsrs	r3, r3, #12
 8007a70:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a84:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007a86:	4623      	mov	r3, r4
 8007a88:	1e5c      	subs	r4, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa2:	e006      	b.n	8007ab2 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e9      	bne.n	8007a86 <SAI_Disable+0x2a>

  return status;
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc90      	pop	{r4, r7}
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	20000018 	.word	0x20000018
 8007ac4:	95cbec1b 	.word	0x95cbec1b

08007ac8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e022      	b.n	8007b20 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d105      	bne.n	8007af2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7fa fd31 	bl	8002554 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2203      	movs	r2, #3
 8007af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f814 	bl	8007b28 <HAL_SD_InitCard>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e00a      	b.n	8007b20 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b28:	b5b0      	push	{r4, r5, r7, lr}
 8007b2a:	b08e      	sub	sp, #56	; 0x38
 8007b2c:	af04      	add	r7, sp, #16
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007b44:	2376      	movs	r3, #118	; 0x76
 8007b46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681d      	ldr	r5, [r3, #0]
 8007b4c:	466c      	mov	r4, sp
 8007b4e:	f107 0314 	add.w	r3, r7, #20
 8007b52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b60:	4628      	mov	r0, r5
 8007b62:	f002 ff51 	bl	800aa08 <SDMMC_Init>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e03b      	b.n	8007bf0 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b86:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f002 ff74 	bl	800aa7a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ba0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fde6 	bl	8008774 <SD_PowerON>
 8007ba8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e013      	b.n	8007bf0 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fd05 	bl	80085d8 <SD_InitCard>
 8007bce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00b      	beq.n	8007bee <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	431a      	orrs	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e000      	b.n	8007bf0 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3728      	adds	r7, #40	; 0x28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bdb0      	pop	{r4, r5, r7, pc}

08007bf8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08c      	sub	sp, #48	; 0x30
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d107      	bne.n	8007c20 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0cc      	b.n	8007dba <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	f040 80c5 	bne.w	8007db8 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	441a      	add	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d907      	bls.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e0b3      	b.n	8007dba <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2203      	movs	r2, #3
 8007c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007c70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	4a53      	ldr	r2, [pc, #332]	; (8007dc4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007c78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	4a52      	ldr	r2, [pc, #328]	; (8007dc8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8007c80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	2200      	movs	r2, #0
 8007c88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3380      	adds	r3, #128	; 0x80
 8007c94:	4619      	mov	r1, r3
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	025b      	lsls	r3, r3, #9
 8007c9c:	089b      	lsrs	r3, r3, #2
 8007c9e:	f7fc fcb7 	bl	8004610 <HAL_DMA_Start_IT>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d017      	beq.n	8007cd8 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007cb6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a43      	ldr	r2, [pc, #268]	; (8007dcc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e070      	b.n	8007dba <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0208 	orr.w	r2, r2, #8
 8007ce6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d002      	beq.n	8007cf6 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	025b      	lsls	r3, r3, #9
 8007cf4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f002 ff4e 	bl	800aba0 <SDMMC_CmdBlockLength>
 8007d04:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00f      	beq.n	8007d2c <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a2e      	ldr	r2, [pc, #184]	; (8007dcc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007d12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e046      	b.n	8007dba <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d30:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	025b      	lsls	r3, r3, #9
 8007d36:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d38:	2390      	movs	r3, #144	; 0x90
 8007d3a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d44:	2301      	movs	r3, #1
 8007d46:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f107 0210 	add.w	r2, r7, #16
 8007d50:	4611      	mov	r1, r2
 8007d52:	4618      	mov	r0, r3
 8007d54:	f002 fef8 	bl	800ab48 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d90a      	bls.n	8007d74 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2282      	movs	r2, #130	; 0x82
 8007d62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f002 ff5c 	bl	800ac28 <SDMMC_CmdReadMultiBlock>
 8007d70:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d72:	e009      	b.n	8007d88 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2281      	movs	r2, #129	; 0x81
 8007d78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d80:	4618      	mov	r0, r3
 8007d82:	f002 ff2f 	bl	800abe4 <SDMMC_CmdReadSingleBlock>
 8007d86:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d012      	beq.n	8007db4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a0e      	ldr	r2, [pc, #56]	; (8007dcc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007d94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e002      	b.n	8007dba <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	e000      	b.n	8007dba <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8007db8:	2302      	movs	r3, #2
  }
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3730      	adds	r7, #48	; 0x30
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	080084c3 	.word	0x080084c3
 8007dc8:	08008535 	.word	0x08008535
 8007dcc:	004005ff 	.word	0x004005ff

08007dd0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08c      	sub	sp, #48	; 0x30
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d107      	bne.n	8007df8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e0cf      	b.n	8007f98 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	f040 80c8 	bne.w	8007f96 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	441a      	add	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d907      	bls.n	8007e2a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e0b6      	b.n	8007f98 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2203      	movs	r2, #3
 8007e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 021a 	orr.w	r2, r2, #26
 8007e48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4e:	4a54      	ldr	r2, [pc, #336]	; (8007fa0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007e50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e56:	4a53      	ldr	r2, [pc, #332]	; (8007fa4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007e58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e5e:	2200      	movs	r2, #0
 8007e60:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d002      	beq.n	8007e70 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	025b      	lsls	r3, r3, #9
 8007e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f002 fe91 	bl	800aba0 <SDMMC_CmdBlockLength>
 8007e7e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00f      	beq.n	8007ea6 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a47      	ldr	r2, [pc, #284]	; (8007fa8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007e8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	431a      	orrs	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e078      	b.n	8007f98 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d90a      	bls.n	8007ec2 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	22a0      	movs	r2, #160	; 0xa0
 8007eb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 fef9 	bl	800acb0 <SDMMC_CmdWriteMultiBlock>
 8007ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007ec0:	e009      	b.n	8007ed6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2290      	movs	r2, #144	; 0x90
 8007ec6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f002 fecc 	bl	800ac6c <SDMMC_CmdWriteSingleBlock>
 8007ed4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d012      	beq.n	8007f02 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a31      	ldr	r2, [pc, #196]	; (8007fa8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007ee2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	431a      	orrs	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e04a      	b.n	8007f98 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f042 0208 	orr.w	r2, r2, #8
 8007f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3380      	adds	r3, #128	; 0x80
 8007f1e:	461a      	mov	r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	025b      	lsls	r3, r3, #9
 8007f24:	089b      	lsrs	r3, r3, #2
 8007f26:	f7fc fb73 	bl	8004610 <HAL_DMA_Start_IT>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d01a      	beq.n	8007f66 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 021a 	bic.w	r2, r2, #26
 8007f3e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a18      	ldr	r2, [pc, #96]	; (8007fa8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007f46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e018      	b.n	8007f98 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	025b      	lsls	r3, r3, #9
 8007f70:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f72:	2390      	movs	r3, #144	; 0x90
 8007f74:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f107 0210 	add.w	r2, r7, #16
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f002 fddb 	bl	800ab48 <SDMMC_ConfigData>

      return HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	e000      	b.n	8007f98 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007f96:	2302      	movs	r3, #2
  }
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3730      	adds	r7, #48	; 0x30
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	08008499 	.word	0x08008499
 8007fa4:	08008535 	.word	0x08008535
 8007fa8:	004005ff 	.word	0x004005ff

08007fac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fce:	0f9b      	lsrs	r3, r3, #30
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fda:	0e9b      	lsrs	r3, r3, #26
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fec:	0e1b      	lsrs	r3, r3, #24
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ffe:	0c1b      	lsrs	r3, r3, #16
 8008000:	b2da      	uxtb	r2, r3
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800800a:	0a1b      	lsrs	r3, r3, #8
 800800c:	b2da      	uxtb	r2, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008016:	b2da      	uxtb	r2, r3
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008020:	0d1b      	lsrs	r3, r3, #20
 8008022:	b29a      	uxth	r2, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800802c:	0c1b      	lsrs	r3, r3, #16
 800802e:	b2db      	uxtb	r3, r3
 8008030:	f003 030f 	and.w	r3, r3, #15
 8008034:	b2da      	uxtb	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800803e:	0bdb      	lsrs	r3, r3, #15
 8008040:	b2db      	uxtb	r3, r3
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	b2da      	uxtb	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008050:	0b9b      	lsrs	r3, r3, #14
 8008052:	b2db      	uxtb	r3, r3
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	b2da      	uxtb	r2, r3
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008062:	0b5b      	lsrs	r3, r3, #13
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008074:	0b1b      	lsrs	r3, r3, #12
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	b2da      	uxtb	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2200      	movs	r2, #0
 8008086:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808c:	2b00      	cmp	r3, #0
 800808e:	d163      	bne.n	8008158 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008094:	009a      	lsls	r2, r3, #2
 8008096:	f640 73fc 	movw	r3, #4092	; 0xffc
 800809a:	4013      	ands	r3, r2
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80080a0:	0f92      	lsrs	r2, r2, #30
 80080a2:	431a      	orrs	r2, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ac:	0edb      	lsrs	r3, r3, #27
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080be:	0e1b      	lsrs	r3, r3, #24
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d0:	0d5b      	lsrs	r3, r3, #21
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080e2:	0c9b      	lsrs	r3, r3, #18
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f4:	0bdb      	lsrs	r3, r3, #15
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	7e1b      	ldrb	r3, [r3, #24]
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	3302      	adds	r3, #2
 8008118:	2201      	movs	r2, #1
 800811a:	fa02 f303 	lsl.w	r3, r2, r3
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008122:	fb02 f203 	mul.w	r2, r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	7a1b      	ldrb	r3, [r3, #8]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 030f 	and.w	r3, r3, #15
 8008134:	2201      	movs	r2, #1
 8008136:	409a      	lsls	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008144:	0a52      	lsrs	r2, r2, #9
 8008146:	fb02 f203 	mul.w	r2, r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008154:	661a      	str	r2, [r3, #96]	; 0x60
 8008156:	e031      	b.n	80081bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815c:	2b01      	cmp	r3, #1
 800815e:	d11d      	bne.n	800819c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008164:	041b      	lsls	r3, r3, #16
 8008166:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800816e:	0c1b      	lsrs	r3, r3, #16
 8008170:	431a      	orrs	r2, r3
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	3301      	adds	r3, #1
 800817c:	029a      	lsls	r2, r3, #10
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008190:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	661a      	str	r2, [r3, #96]	; 0x60
 800819a:	e00f      	b.n	80081bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a58      	ldr	r2, [pc, #352]	; (8008304 <HAL_SD_GetCardCSD+0x344>)
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e09d      	b.n	80082f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081c0:	0b9b      	lsrs	r3, r3, #14
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081d2:	09db      	lsrs	r3, r3, #7
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f4:	0fdb      	lsrs	r3, r3, #31
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008200:	0f5b      	lsrs	r3, r3, #29
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 0303 	and.w	r3, r3, #3
 8008208:	b2da      	uxtb	r2, r3
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008212:	0e9b      	lsrs	r3, r3, #26
 8008214:	b2db      	uxtb	r3, r3
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	b2da      	uxtb	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008224:	0d9b      	lsrs	r3, r3, #22
 8008226:	b2db      	uxtb	r3, r3
 8008228:	f003 030f 	and.w	r3, r3, #15
 800822c:	b2da      	uxtb	r2, r3
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008236:	0d5b      	lsrs	r3, r3, #21
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	b2da      	uxtb	r2, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008252:	0c1b      	lsrs	r3, r3, #16
 8008254:	b2db      	uxtb	r3, r3
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	b2da      	uxtb	r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008266:	0bdb      	lsrs	r3, r3, #15
 8008268:	b2db      	uxtb	r3, r3
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	b2da      	uxtb	r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827a:	0b9b      	lsrs	r3, r3, #14
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	b2da      	uxtb	r2, r3
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828e:	0b5b      	lsrs	r3, r3, #13
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	b2da      	uxtb	r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a2:	0b1b      	lsrs	r3, r3, #12
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b6:	0a9b      	lsrs	r3, r3, #10
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	f003 0303 	and.w	r3, r3, #3
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082de:	085b      	lsrs	r3, r3, #1
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	004005ff 	.word	0x004005ff

08008308 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008360:	b5b0      	push	{r4, r5, r7, lr}
 8008362:	b08e      	sub	sp, #56	; 0x38
 8008364:	af04      	add	r7, sp, #16
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2203      	movs	r2, #3
 800836e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008376:	2b03      	cmp	r3, #3
 8008378:	d02e      	beq.n	80083d8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008380:	d106      	bne.n	8008390 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	639a      	str	r2, [r3, #56]	; 0x38
 800838e:	e029      	b.n	80083e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008396:	d10a      	bne.n	80083ae <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 faa1 	bl	80088e0 <SD_WideBus_Enable>
 800839e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	639a      	str	r2, [r3, #56]	; 0x38
 80083ac:	e01a      	b.n	80083e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fade 	bl	8008976 <SD_WideBus_Disable>
 80083ba:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	639a      	str	r2, [r3, #56]	; 0x38
 80083c8:	e00c      	b.n	80083e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	639a      	str	r2, [r3, #56]	; 0x38
 80083d6:	e005      	b.n	80083e4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d009      	beq.n	8008400 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a18      	ldr	r2, [pc, #96]	; (8008454 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80083f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e024      	b.n	800844a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681d      	ldr	r5, [r3, #0]
 8008426:	466c      	mov	r4, sp
 8008428:	f107 0318 	add.w	r3, r7, #24
 800842c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008434:	f107 030c 	add.w	r3, r7, #12
 8008438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800843a:	4628      	mov	r0, r5
 800843c:	f002 fae4 	bl	800aa08 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3728      	adds	r7, #40	; 0x28
 800844e:	46bd      	mov	sp, r7
 8008450:	bdb0      	pop	{r4, r5, r7, pc}
 8008452:	bf00      	nop
 8008454:	004005ff 	.word	0x004005ff

08008458 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008464:	f107 030c 	add.w	r3, r7, #12
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa10 	bl	8008890 <SD_SendStatus>
 8008470:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	431a      	orrs	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	0a5b      	lsrs	r3, r3, #9
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800848e:	693b      	ldr	r3, [r7, #16]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80084b6:	bf00      	nop
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d4:	2b82      	cmp	r3, #130	; 0x82
 80084d6:	d111      	bne.n	80084fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	f002 fc09 	bl	800acf4 <SDMMC_CmdStopTransfer>
 80084e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d008      	beq.n	80084fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	431a      	orrs	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fd58 	bl	8007fac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0208 	bic.w	r2, r2, #8
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f240 523a 	movw	r2, #1338	; 0x53a
 8008514:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f003 f84f 	bl	800b5c8 <HAL_SD_RxCpltCallback>
#endif
}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7fc f8c4 	bl	80046d0 <HAL_DMA_GetError>
 8008548:	4603      	mov	r3, r0
 800854a:	2b02      	cmp	r3, #2
 800854c:	d03e      	beq.n	80085cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008554:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d002      	beq.n	800856a <SD_DMAError+0x36>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d12d      	bne.n	80085c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a19      	ldr	r2, [pc, #100]	; (80085d4 <SD_DMAError+0xa0>)
 8008570:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008580:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800858e:	6978      	ldr	r0, [r7, #20]
 8008590:	f7ff ff62 	bl	8008458 <HAL_SD_GetCardState>
 8008594:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b06      	cmp	r3, #6
 800859a:	d002      	beq.n	80085a2 <SD_DMAError+0x6e>
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b05      	cmp	r3, #5
 80085a0:	d10a      	bne.n	80085b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f002 fba4 	bl	800acf4 <SDMMC_CmdStopTransfer>
 80085ac:	4602      	mov	r2, r0
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	431a      	orrs	r2, r3
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2200      	movs	r2, #0
 80085c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80085c6:	6978      	ldr	r0, [r7, #20]
 80085c8:	f7ff fcf0 	bl	8007fac <HAL_SD_ErrorCallback>
#endif
  }
}
 80085cc:	bf00      	nop
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	004005ff 	.word	0x004005ff

080085d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085d8:	b5b0      	push	{r4, r5, r7, lr}
 80085da:	b094      	sub	sp, #80	; 0x50
 80085dc:	af04      	add	r7, sp, #16
 80085de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80085e0:	2301      	movs	r3, #1
 80085e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f002 fa55 	bl	800aa98 <SDMMC_GetPowerState>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80085f8:	e0b7      	b.n	800876a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d02f      	beq.n	8008662 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f002 fc7f 	bl	800af0a <SDMMC_CmdSendCID>
 800860c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800860e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <SD_InitCard+0x40>
    {
      return errorstate;
 8008614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008616:	e0a8      	b.n	800876a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2100      	movs	r1, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f002 fa7f 	bl	800ab22 <SDMMC_GetResponse>
 8008624:	4602      	mov	r2, r0
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2104      	movs	r1, #4
 8008630:	4618      	mov	r0, r3
 8008632:	f002 fa76 	bl	800ab22 <SDMMC_GetResponse>
 8008636:	4602      	mov	r2, r0
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2108      	movs	r1, #8
 8008642:	4618      	mov	r0, r3
 8008644:	f002 fa6d 	bl	800ab22 <SDMMC_GetResponse>
 8008648:	4602      	mov	r2, r0
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	210c      	movs	r1, #12
 8008654:	4618      	mov	r0, r3
 8008656:	f002 fa64 	bl	800ab22 <SDMMC_GetResponse>
 800865a:	4602      	mov	r2, r0
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008666:	2b03      	cmp	r3, #3
 8008668:	d00d      	beq.n	8008686 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f107 020e 	add.w	r2, r7, #14
 8008672:	4611      	mov	r1, r2
 8008674:	4618      	mov	r0, r3
 8008676:	f002 fc85 	bl	800af84 <SDMMC_CmdSetRelAdd>
 800867a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800867c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <SD_InitCard+0xae>
    {
      return errorstate;
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	e071      	b.n	800876a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868a:	2b03      	cmp	r3, #3
 800868c:	d036      	beq.n	80086fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800868e:	89fb      	ldrh	r3, [r7, #14]
 8008690:	461a      	mov	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869e:	041b      	lsls	r3, r3, #16
 80086a0:	4619      	mov	r1, r3
 80086a2:	4610      	mov	r0, r2
 80086a4:	f002 fc4f 	bl	800af46 <SDMMC_CmdSendCSD>
 80086a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80086aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80086b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b2:	e05a      	b.n	800876a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2100      	movs	r1, #0
 80086ba:	4618      	mov	r0, r3
 80086bc:	f002 fa31 	bl	800ab22 <SDMMC_GetResponse>
 80086c0:	4602      	mov	r2, r0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2104      	movs	r1, #4
 80086cc:	4618      	mov	r0, r3
 80086ce:	f002 fa28 	bl	800ab22 <SDMMC_GetResponse>
 80086d2:	4602      	mov	r2, r0
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2108      	movs	r1, #8
 80086de:	4618      	mov	r0, r3
 80086e0:	f002 fa1f 	bl	800ab22 <SDMMC_GetResponse>
 80086e4:	4602      	mov	r2, r0
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	210c      	movs	r1, #12
 80086f0:	4618      	mov	r0, r3
 80086f2:	f002 fa16 	bl	800ab22 <SDMMC_GetResponse>
 80086f6:	4602      	mov	r2, r0
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2104      	movs	r1, #4
 8008702:	4618      	mov	r0, r3
 8008704:	f002 fa0d 	bl	800ab22 <SDMMC_GetResponse>
 8008708:	4603      	mov	r3, r0
 800870a:	0d1a      	lsrs	r2, r3, #20
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008710:	f107 0310 	add.w	r3, r7, #16
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff fc52 	bl	8007fc0 <HAL_SD_GetCardCSD>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008722:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008726:	e020      	b.n	800876a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6819      	ldr	r1, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008730:	041b      	lsls	r3, r3, #16
 8008732:	f04f 0400 	mov.w	r4, #0
 8008736:	461a      	mov	r2, r3
 8008738:	4623      	mov	r3, r4
 800873a:	4608      	mov	r0, r1
 800873c:	f002 fafc 	bl	800ad38 <SDMMC_CmdSelDesel>
 8008740:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <SD_InitCard+0x174>
  {
    return errorstate;
 8008748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874a:	e00e      	b.n	800876a <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681d      	ldr	r5, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	466c      	mov	r4, sp
 8008754:	f103 0210 	add.w	r2, r3, #16
 8008758:	ca07      	ldmia	r2, {r0, r1, r2}
 800875a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800875e:	3304      	adds	r3, #4
 8008760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008762:	4628      	mov	r0, r5
 8008764:	f002 f950 	bl	800aa08 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3740      	adds	r7, #64	; 0x40
 800876e:	46bd      	mov	sp, r7
 8008770:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008774 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	2300      	movs	r3, #0
 8008786:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	f002 faf6 	bl	800ad7e <SDMMC_CmdGoIdleState>
 8008792:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <SD_PowerON+0x2a>
  {
    return errorstate;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	e072      	b.n	8008884 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f002 fb09 	bl	800adba <SDMMC_CmdOperCond>
 80087a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00d      	beq.n	80087cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f002 fadf 	bl	800ad7e <SDMMC_CmdGoIdleState>
 80087c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d004      	beq.n	80087d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	e05b      	b.n	8008884 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d137      	bne.n	800884a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2100      	movs	r1, #0
 80087e0:	4618      	mov	r0, r3
 80087e2:	f002 fb09 	bl	800adf8 <SDMMC_CmdAppCommand>
 80087e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d02d      	beq.n	800884a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087f2:	e047      	b.n	8008884 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2100      	movs	r1, #0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f002 fafc 	bl	800adf8 <SDMMC_CmdAppCommand>
 8008800:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <SD_PowerON+0x98>
    {
      return errorstate;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	e03b      	b.n	8008884 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	491e      	ldr	r1, [pc, #120]	; (800888c <SD_PowerON+0x118>)
 8008812:	4618      	mov	r0, r3
 8008814:	f002 fb12 	bl	800ae3c <SDMMC_CmdAppOperCommand>
 8008818:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008820:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008824:	e02e      	b.n	8008884 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2100      	movs	r1, #0
 800882c:	4618      	mov	r0, r3
 800882e:	f002 f978 	bl	800ab22 <SDMMC_GetResponse>
 8008832:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	0fdb      	lsrs	r3, r3, #31
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <SD_PowerON+0xcc>
 800883c:	2301      	movs	r3, #1
 800883e:	e000      	b.n	8008842 <SD_PowerON+0xce>
 8008840:	2300      	movs	r3, #0
 8008842:	613b      	str	r3, [r7, #16]

    count++;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	3301      	adds	r3, #1
 8008848:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008850:	4293      	cmp	r3, r2
 8008852:	d802      	bhi.n	800885a <SD_PowerON+0xe6>
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0cc      	beq.n	80087f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008860:	4293      	cmp	r3, r2
 8008862:	d902      	bls.n	800886a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008868:	e00c      	b.n	8008884 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	645a      	str	r2, [r3, #68]	; 0x44
 800887a:	e002      	b.n	8008882 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	c1100000 	.word	0xc1100000

08008890 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d102      	bne.n	80088a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80088a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088a4:	e018      	b.n	80088d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ae:	041b      	lsls	r3, r3, #16
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f002 fb87 	bl	800afc6 <SDMMC_CmdSendStatus>
 80088b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	e009      	b.n	80088d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2100      	movs	r1, #0
 80088ca:	4618      	mov	r0, r3
 80088cc:	f002 f929 	bl	800ab22 <SDMMC_GetResponse>
 80088d0:	4602      	mov	r2, r0
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	2300      	movs	r3, #0
 80088ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2100      	movs	r1, #0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f002 f913 	bl	800ab22 <SDMMC_GetResponse>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008906:	d102      	bne.n	800890e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800890c:	e02f      	b.n	800896e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800890e:	f107 030c 	add.w	r3, r7, #12
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f879 	bl	8008a0c <SD_FindSCR>
 800891a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	e023      	b.n	800896e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01c      	beq.n	800896a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008938:	041b      	lsls	r3, r3, #16
 800893a:	4619      	mov	r1, r3
 800893c:	4610      	mov	r0, r2
 800893e:	f002 fa5b 	bl	800adf8 <SDMMC_CmdAppCommand>
 8008942:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	e00f      	b.n	800896e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2102      	movs	r1, #2
 8008954:	4618      	mov	r0, r3
 8008956:	f002 fa95 	bl	800ae84 <SDMMC_CmdBusWidth>
 800895a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	e003      	b.n	800896e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008966:	2300      	movs	r3, #0
 8008968:	e001      	b.n	800896e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800896a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b086      	sub	sp, #24
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	2300      	movs	r3, #0
 8008984:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2100      	movs	r1, #0
 800898c:	4618      	mov	r0, r3
 800898e:	f002 f8c8 	bl	800ab22 <SDMMC_GetResponse>
 8008992:	4603      	mov	r3, r0
 8008994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800899c:	d102      	bne.n	80089a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800899e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089a2:	e02f      	b.n	8008a04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80089a4:	f107 030c 	add.w	r3, r7, #12
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f82e 	bl	8008a0c <SD_FindSCR>
 80089b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	e023      	b.n	8008a04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d01c      	beq.n	8008a00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ce:	041b      	lsls	r3, r3, #16
 80089d0:	4619      	mov	r1, r3
 80089d2:	4610      	mov	r0, r2
 80089d4:	f002 fa10 	bl	800adf8 <SDMMC_CmdAppCommand>
 80089d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	e00f      	b.n	8008a04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2100      	movs	r1, #0
 80089ea:	4618      	mov	r0, r3
 80089ec:	f002 fa4a 	bl	800ae84 <SDMMC_CmdBusWidth>
 80089f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	e003      	b.n	8008a04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80089fc:	2300      	movs	r3, #0
 80089fe:	e001      	b.n	8008a04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008a0c:	b590      	push	{r4, r7, lr}
 8008a0e:	b08f      	sub	sp, #60	; 0x3c
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008a16:	f7fa fb4d 	bl	80030b4 <HAL_GetTick>
 8008a1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008a20:	2300      	movs	r3, #0
 8008a22:	60bb      	str	r3, [r7, #8]
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2108      	movs	r1, #8
 8008a32:	4618      	mov	r0, r3
 8008a34:	f002 f8b4 	bl	800aba0 <SDMMC_CmdBlockLength>
 8008a38:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	e0a9      	b.n	8008b98 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a4c:	041b      	lsls	r3, r3, #16
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4610      	mov	r0, r2
 8008a52:	f002 f9d1 	bl	800adf8 <SDMMC_CmdAppCommand>
 8008a56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a60:	e09a      	b.n	8008b98 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a62:	f04f 33ff 	mov.w	r3, #4294967295
 8008a66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008a68:	2308      	movs	r3, #8
 8008a6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008a6c:	2330      	movs	r3, #48	; 0x30
 8008a6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a70:	2302      	movs	r3, #2
 8008a72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f107 0210 	add.w	r2, r7, #16
 8008a84:	4611      	mov	r1, r2
 8008a86:	4618      	mov	r0, r3
 8008a88:	f002 f85e 	bl	800ab48 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f002 fa19 	bl	800aec8 <SDMMC_CmdSendSCR>
 8008a96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d022      	beq.n	8008ae4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa0:	e07a      	b.n	8008b98 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00e      	beq.n	8008ace <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	f107 0208 	add.w	r2, r7, #8
 8008abc:	18d4      	adds	r4, r2, r3
 8008abe:	4608      	mov	r0, r1
 8008ac0:	f001 ffce 	bl	800aa60 <SDMMC_ReadFIFO>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	6023      	str	r3, [r4, #0]
      index++;
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	3301      	adds	r3, #1
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ace:	f7fa faf1 	bl	80030b4 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008adc:	d102      	bne.n	8008ae4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ade:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ae2:	e059      	b.n	8008b98 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aea:	f240 432a 	movw	r3, #1066	; 0x42a
 8008aee:	4013      	ands	r3, r2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0d6      	beq.n	8008aa2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afa:	f003 0308 	and.w	r3, r3, #8
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d005      	beq.n	8008b0e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2208      	movs	r2, #8
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b0a:	2308      	movs	r3, #8
 8008b0c:	e044      	b.n	8008b98 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2202      	movs	r2, #2
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b24:	2302      	movs	r3, #2
 8008b26:	e037      	b.n	8008b98 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d005      	beq.n	8008b42 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008b3e:	2320      	movs	r3, #32
 8008b40:	e02a      	b.n	8008b98 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	061a      	lsls	r2, r3, #24
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	021b      	lsls	r3, r3, #8
 8008b54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b58:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	0a1b      	lsrs	r3, r3, #8
 8008b5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b62:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	0e1b      	lsrs	r3, r3, #24
 8008b68:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	601a      	str	r2, [r3, #0]
    scr++;
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	3304      	adds	r3, #4
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	061a      	lsls	r2, r3, #24
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b80:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	0a1b      	lsrs	r3, r3, #8
 8008b86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b8a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	0e1b      	lsrs	r3, r3, #24
 8008b90:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	373c      	adds	r7, #60	; 0x3c
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd90      	pop	{r4, r7, pc}

08008ba0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e025      	b.n	8008c00 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d106      	bne.n	8008bce <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7fa f849 	bl	8002c60 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	4619      	mov	r1, r3
 8008be0:	4610      	mov	r0, r2
 8008be2:	f001 fdeb 	bl	800a7bc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	f001 fe55 	bl	800a8a0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d101      	bne.n	8008c24 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008c20:	2302      	movs	r3, #2
 8008c22:	e018      	b.n	8008c56 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f001 feb3 	bl	800a9a0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d104      	bne.n	8008c4c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2205      	movs	r2, #5
 8008c46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008c4a:	e003      	b.n	8008c54 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d101      	bne.n	8008c78 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008c74:	2302      	movs	r3, #2
 8008c76:	e00e      	b.n	8008c96 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 feab 	bl	800a9e2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e04c      	b.n	8008d4c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7f9 fca6 	bl	8002618 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0203 	bic.w	r2, r2, #3
 8008ce2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4b19      	ldr	r3, [pc, #100]	; (8008d54 <HAL_SPDIFRX_Init+0xb4>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008cfc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008d02:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008d08:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008d0e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008d14:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008d1a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008d20:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008d26:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008d2c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	fff88407 	.word	0xfff88407

08008d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e084      	b.n	8008e74 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d106      	bne.n	8008d8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7f9 fc89 	bl	800269c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008da0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008daa:	d902      	bls.n	8008db2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	e002      	b.n	8008db8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008dc0:	d007      	beq.n	8008dd2 <HAL_SPI_Init+0x7a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008dca:	d002      	beq.n	8008dd2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10b      	bne.n	8008df2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008de2:	d903      	bls.n	8008dec <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	631a      	str	r2, [r3, #48]	; 0x30
 8008dea:	e002      	b.n	8008df2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	431a      	orrs	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	431a      	orrs	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e10:	431a      	orrs	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	431a      	orrs	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	ea42 0103 	orr.w	r1, r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	0c1b      	lsrs	r3, r3, #16
 8008e32:	f003 0204 	and.w	r2, r3, #4
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e40:	431a      	orrs	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	ea42 0103 	orr.w	r1, r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	69da      	ldr	r2, [r3, #28]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e01d      	b.n	8008eca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7f9 fc5c 	bl	8002760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4610      	mov	r0, r2
 8008ebc:	f000 fb78 	bl	80095b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0201 	orr.w	r2, r2, #1
 8008eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <HAL_TIM_Base_Start_IT+0x50>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b06      	cmp	r3, #6
 8008efc:	d00b      	beq.n	8008f16 <HAL_TIM_Base_Start_IT+0x42>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f04:	d007      	beq.n	8008f16 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f042 0201 	orr.w	r2, r2, #1
 8008f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	00010007 	.word	0x00010007

08008f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e01d      	b.n	8008f76 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7f9 fc74 	bl	800283c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3304      	adds	r3, #4
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f000 fb22 	bl	80095b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b082      	sub	sp, #8
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d122      	bne.n	8008fda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d11b      	bne.n	8008fda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f06f 0202 	mvn.w	r2, #2
 8008faa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fad7 	bl	8009574 <HAL_TIM_IC_CaptureCallback>
 8008fc6:	e005      	b.n	8008fd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fac9 	bl	8009560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fada 	bl	8009588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	d122      	bne.n	800902e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f003 0304 	and.w	r3, r3, #4
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d11b      	bne.n	800902e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f06f 0204 	mvn.w	r2, #4
 8008ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 faad 	bl	8009574 <HAL_TIM_IC_CaptureCallback>
 800901a:	e005      	b.n	8009028 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa9f 	bl	8009560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fab0 	bl	8009588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	f003 0308 	and.w	r3, r3, #8
 8009038:	2b08      	cmp	r3, #8
 800903a:	d122      	bne.n	8009082 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f003 0308 	and.w	r3, r3, #8
 8009046:	2b08      	cmp	r3, #8
 8009048:	d11b      	bne.n	8009082 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f06f 0208 	mvn.w	r2, #8
 8009052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2204      	movs	r2, #4
 8009058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	f003 0303 	and.w	r3, r3, #3
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa83 	bl	8009574 <HAL_TIM_IC_CaptureCallback>
 800906e:	e005      	b.n	800907c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa75 	bl	8009560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fa86 	bl	8009588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b10      	cmp	r3, #16
 800908e:	d122      	bne.n	80090d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f003 0310 	and.w	r3, r3, #16
 800909a:	2b10      	cmp	r3, #16
 800909c:	d11b      	bne.n	80090d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f06f 0210 	mvn.w	r2, #16
 80090a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2208      	movs	r2, #8
 80090ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa59 	bl	8009574 <HAL_TIM_IC_CaptureCallback>
 80090c2:	e005      	b.n	80090d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fa4b 	bl	8009560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa5c 	bl	8009588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d10e      	bne.n	8009102 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d107      	bne.n	8009102 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f06f 0201 	mvn.w	r2, #1
 80090fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7f8 feb1 	bl	8001e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910c:	2b80      	cmp	r3, #128	; 0x80
 800910e:	d10e      	bne.n	800912e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800911a:	2b80      	cmp	r3, #128	; 0x80
 800911c:	d107      	bne.n	800912e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 feef 	bl	8009f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800913c:	d10e      	bne.n	800915c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009148:	2b80      	cmp	r3, #128	; 0x80
 800914a:	d107      	bne.n	800915c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fee2 	bl	8009f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009166:	2b40      	cmp	r3, #64	; 0x40
 8009168:	d10e      	bne.n	8009188 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009174:	2b40      	cmp	r3, #64	; 0x40
 8009176:	d107      	bne.n	8009188 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa0a 	bl	800959c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b20      	cmp	r3, #32
 8009194:	d10e      	bne.n	80091b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f003 0320 	and.w	r3, r3, #32
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	d107      	bne.n	80091b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f06f 0220 	mvn.w	r2, #32
 80091ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fea2 	bl	8009ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d101      	bne.n	80091d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80091d2:	2302      	movs	r3, #2
 80091d4:	e105      	b.n	80093e2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2202      	movs	r2, #2
 80091e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b14      	cmp	r3, #20
 80091ea:	f200 80f0 	bhi.w	80093ce <HAL_TIM_PWM_ConfigChannel+0x212>
 80091ee:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009249 	.word	0x08009249
 80091f8:	080093cf 	.word	0x080093cf
 80091fc:	080093cf 	.word	0x080093cf
 8009200:	080093cf 	.word	0x080093cf
 8009204:	08009289 	.word	0x08009289
 8009208:	080093cf 	.word	0x080093cf
 800920c:	080093cf 	.word	0x080093cf
 8009210:	080093cf 	.word	0x080093cf
 8009214:	080092cb 	.word	0x080092cb
 8009218:	080093cf 	.word	0x080093cf
 800921c:	080093cf 	.word	0x080093cf
 8009220:	080093cf 	.word	0x080093cf
 8009224:	0800930b 	.word	0x0800930b
 8009228:	080093cf 	.word	0x080093cf
 800922c:	080093cf 	.word	0x080093cf
 8009230:	080093cf 	.word	0x080093cf
 8009234:	0800934d 	.word	0x0800934d
 8009238:	080093cf 	.word	0x080093cf
 800923c:	080093cf 	.word	0x080093cf
 8009240:	080093cf 	.word	0x080093cf
 8009244:	0800938d 	.word	0x0800938d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	4618      	mov	r0, r3
 8009250:	f000 fa4e 	bl	80096f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	699a      	ldr	r2, [r3, #24]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f042 0208 	orr.w	r2, r2, #8
 8009262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 0204 	bic.w	r2, r2, #4
 8009272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6999      	ldr	r1, [r3, #24]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	691a      	ldr	r2, [r3, #16]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	619a      	str	r2, [r3, #24]
      break;
 8009286:	e0a3      	b.n	80093d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68b9      	ldr	r1, [r7, #8]
 800928e:	4618      	mov	r0, r3
 8009290:	f000 faa0 	bl	80097d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699a      	ldr	r2, [r3, #24]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	699a      	ldr	r2, [r3, #24]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6999      	ldr	r1, [r3, #24]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	021a      	lsls	r2, r3, #8
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	619a      	str	r2, [r3, #24]
      break;
 80092c8:	e082      	b.n	80093d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 faf7 	bl	80098c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f042 0208 	orr.w	r2, r2, #8
 80092e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69da      	ldr	r2, [r3, #28]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f022 0204 	bic.w	r2, r2, #4
 80092f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69d9      	ldr	r1, [r3, #28]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	61da      	str	r2, [r3, #28]
      break;
 8009308:	e062      	b.n	80093d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fb4d 	bl	80099b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	69da      	ldr	r2, [r3, #28]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69da      	ldr	r2, [r3, #28]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69d9      	ldr	r1, [r3, #28]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	021a      	lsls	r2, r3, #8
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	61da      	str	r2, [r3, #28]
      break;
 800934a:	e041      	b.n	80093d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fb84 	bl	8009a60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f042 0208 	orr.w	r2, r2, #8
 8009366:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 0204 	bic.w	r2, r2, #4
 8009376:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	691a      	ldr	r2, [r3, #16]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	430a      	orrs	r2, r1
 8009388:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800938a:	e021      	b.n	80093d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68b9      	ldr	r1, [r7, #8]
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fbb6 	bl	8009b04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	021a      	lsls	r2, r3, #8
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093cc:	e000      	b.n	80093d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80093ce:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop

080093ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d101      	bne.n	8009404 <HAL_TIM_ConfigClockSource+0x18>
 8009400:	2302      	movs	r3, #2
 8009402:	e0a6      	b.n	8009552 <HAL_TIM_ConfigClockSource+0x166>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4b4f      	ldr	r3, [pc, #316]	; (800955c <HAL_TIM_ConfigClockSource+0x170>)
 8009420:	4013      	ands	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800942a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b40      	cmp	r3, #64	; 0x40
 800943a:	d067      	beq.n	800950c <HAL_TIM_ConfigClockSource+0x120>
 800943c:	2b40      	cmp	r3, #64	; 0x40
 800943e:	d80b      	bhi.n	8009458 <HAL_TIM_ConfigClockSource+0x6c>
 8009440:	2b10      	cmp	r3, #16
 8009442:	d073      	beq.n	800952c <HAL_TIM_ConfigClockSource+0x140>
 8009444:	2b10      	cmp	r3, #16
 8009446:	d802      	bhi.n	800944e <HAL_TIM_ConfigClockSource+0x62>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d06f      	beq.n	800952c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800944c:	e078      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800944e:	2b20      	cmp	r3, #32
 8009450:	d06c      	beq.n	800952c <HAL_TIM_ConfigClockSource+0x140>
 8009452:	2b30      	cmp	r3, #48	; 0x30
 8009454:	d06a      	beq.n	800952c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009456:	e073      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009458:	2b70      	cmp	r3, #112	; 0x70
 800945a:	d00d      	beq.n	8009478 <HAL_TIM_ConfigClockSource+0x8c>
 800945c:	2b70      	cmp	r3, #112	; 0x70
 800945e:	d804      	bhi.n	800946a <HAL_TIM_ConfigClockSource+0x7e>
 8009460:	2b50      	cmp	r3, #80	; 0x50
 8009462:	d033      	beq.n	80094cc <HAL_TIM_ConfigClockSource+0xe0>
 8009464:	2b60      	cmp	r3, #96	; 0x60
 8009466:	d041      	beq.n	80094ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009468:	e06a      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800946a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800946e:	d066      	beq.n	800953e <HAL_TIM_ConfigClockSource+0x152>
 8009470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009474:	d017      	beq.n	80094a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009476:	e063      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	6899      	ldr	r1, [r3, #8]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f000 fc0a 	bl	8009ca0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800949a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	609a      	str	r2, [r3, #8]
      break;
 80094a4:	e04c      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6818      	ldr	r0, [r3, #0]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	6899      	ldr	r1, [r3, #8]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	f000 fbf3 	bl	8009ca0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094c8:	609a      	str	r2, [r3, #8]
      break;
 80094ca:	e039      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	6859      	ldr	r1, [r3, #4]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	461a      	mov	r2, r3
 80094da:	f000 fb67 	bl	8009bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2150      	movs	r1, #80	; 0x50
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 fbc0 	bl	8009c6a <TIM_ITRx_SetConfig>
      break;
 80094ea:	e029      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6818      	ldr	r0, [r3, #0]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	6859      	ldr	r1, [r3, #4]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	461a      	mov	r2, r3
 80094fa:	f000 fb86 	bl	8009c0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2160      	movs	r1, #96	; 0x60
 8009504:	4618      	mov	r0, r3
 8009506:	f000 fbb0 	bl	8009c6a <TIM_ITRx_SetConfig>
      break;
 800950a:	e019      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	6859      	ldr	r1, [r3, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	461a      	mov	r2, r3
 800951a:	f000 fb47 	bl	8009bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2140      	movs	r1, #64	; 0x40
 8009524:	4618      	mov	r0, r3
 8009526:	f000 fba0 	bl	8009c6a <TIM_ITRx_SetConfig>
      break;
 800952a:	e009      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f000 fb97 	bl	8009c6a <TIM_ITRx_SetConfig>
      break;
 800953c:	e000      	b.n	8009540 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800953e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	fffeff88 	.word	0xfffeff88

08009560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a40      	ldr	r2, [pc, #256]	; (80096c4 <TIM_Base_SetConfig+0x114>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d013      	beq.n	80095f0 <TIM_Base_SetConfig+0x40>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ce:	d00f      	beq.n	80095f0 <TIM_Base_SetConfig+0x40>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a3d      	ldr	r2, [pc, #244]	; (80096c8 <TIM_Base_SetConfig+0x118>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00b      	beq.n	80095f0 <TIM_Base_SetConfig+0x40>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a3c      	ldr	r2, [pc, #240]	; (80096cc <TIM_Base_SetConfig+0x11c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d007      	beq.n	80095f0 <TIM_Base_SetConfig+0x40>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a3b      	ldr	r2, [pc, #236]	; (80096d0 <TIM_Base_SetConfig+0x120>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d003      	beq.n	80095f0 <TIM_Base_SetConfig+0x40>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a3a      	ldr	r2, [pc, #232]	; (80096d4 <TIM_Base_SetConfig+0x124>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d108      	bne.n	8009602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a2f      	ldr	r2, [pc, #188]	; (80096c4 <TIM_Base_SetConfig+0x114>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d02b      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009610:	d027      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a2c      	ldr	r2, [pc, #176]	; (80096c8 <TIM_Base_SetConfig+0x118>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d023      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a2b      	ldr	r2, [pc, #172]	; (80096cc <TIM_Base_SetConfig+0x11c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d01f      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a2a      	ldr	r2, [pc, #168]	; (80096d0 <TIM_Base_SetConfig+0x120>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d01b      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a29      	ldr	r2, [pc, #164]	; (80096d4 <TIM_Base_SetConfig+0x124>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d017      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a28      	ldr	r2, [pc, #160]	; (80096d8 <TIM_Base_SetConfig+0x128>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d013      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a27      	ldr	r2, [pc, #156]	; (80096dc <TIM_Base_SetConfig+0x12c>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00f      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a26      	ldr	r2, [pc, #152]	; (80096e0 <TIM_Base_SetConfig+0x130>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d00b      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a25      	ldr	r2, [pc, #148]	; (80096e4 <TIM_Base_SetConfig+0x134>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d007      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a24      	ldr	r2, [pc, #144]	; (80096e8 <TIM_Base_SetConfig+0x138>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d003      	beq.n	8009662 <TIM_Base_SetConfig+0xb2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a23      	ldr	r2, [pc, #140]	; (80096ec <TIM_Base_SetConfig+0x13c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d108      	bne.n	8009674 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a0a      	ldr	r2, [pc, #40]	; (80096c4 <TIM_Base_SetConfig+0x114>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_Base_SetConfig+0xf8>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a0c      	ldr	r2, [pc, #48]	; (80096d4 <TIM_Base_SetConfig+0x124>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d103      	bne.n	80096b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	691a      	ldr	r2, [r3, #16]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	615a      	str	r2, [r3, #20]
}
 80096b6:	bf00      	nop
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	40010000 	.word	0x40010000
 80096c8:	40000400 	.word	0x40000400
 80096cc:	40000800 	.word	0x40000800
 80096d0:	40000c00 	.word	0x40000c00
 80096d4:	40010400 	.word	0x40010400
 80096d8:	40014000 	.word	0x40014000
 80096dc:	40014400 	.word	0x40014400
 80096e0:	40014800 	.word	0x40014800
 80096e4:	40001800 	.word	0x40001800
 80096e8:	40001c00 	.word	0x40001c00
 80096ec:	40002000 	.word	0x40002000

080096f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	f023 0201 	bic.w	r2, r3, #1
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4b2b      	ldr	r3, [pc, #172]	; (80097c8 <TIM_OC1_SetConfig+0xd8>)
 800971c:	4013      	ands	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f023 0303 	bic.w	r3, r3, #3
 8009726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	4313      	orrs	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f023 0302 	bic.w	r3, r3, #2
 8009738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	4313      	orrs	r3, r2
 8009742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a21      	ldr	r2, [pc, #132]	; (80097cc <TIM_OC1_SetConfig+0xdc>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d003      	beq.n	8009754 <TIM_OC1_SetConfig+0x64>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a20      	ldr	r2, [pc, #128]	; (80097d0 <TIM_OC1_SetConfig+0xe0>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d10c      	bne.n	800976e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	f023 0308 	bic.w	r3, r3, #8
 800975a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	4313      	orrs	r3, r2
 8009764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f023 0304 	bic.w	r3, r3, #4
 800976c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a16      	ldr	r2, [pc, #88]	; (80097cc <TIM_OC1_SetConfig+0xdc>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d003      	beq.n	800977e <TIM_OC1_SetConfig+0x8e>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a15      	ldr	r2, [pc, #84]	; (80097d0 <TIM_OC1_SetConfig+0xe0>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d111      	bne.n	80097a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800978c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	4313      	orrs	r3, r2
 8009796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	4313      	orrs	r3, r2
 80097a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	621a      	str	r2, [r3, #32]
}
 80097bc:	bf00      	nop
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	fffeff8f 	.word	0xfffeff8f
 80097cc:	40010000 	.word	0x40010000
 80097d0:	40010400 	.word	0x40010400

080097d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b087      	sub	sp, #28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	f023 0210 	bic.w	r2, r3, #16
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4b2e      	ldr	r3, [pc, #184]	; (80098b8 <TIM_OC2_SetConfig+0xe4>)
 8009800:	4013      	ands	r3, r2
 8009802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800980a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	021b      	lsls	r3, r3, #8
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	4313      	orrs	r3, r2
 8009816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	f023 0320 	bic.w	r3, r3, #32
 800981e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	4313      	orrs	r3, r2
 800982a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a23      	ldr	r2, [pc, #140]	; (80098bc <TIM_OC2_SetConfig+0xe8>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d003      	beq.n	800983c <TIM_OC2_SetConfig+0x68>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a22      	ldr	r2, [pc, #136]	; (80098c0 <TIM_OC2_SetConfig+0xec>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d10d      	bne.n	8009858 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	011b      	lsls	r3, r3, #4
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	4313      	orrs	r3, r2
 800984e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009856:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a18      	ldr	r2, [pc, #96]	; (80098bc <TIM_OC2_SetConfig+0xe8>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_OC2_SetConfig+0x94>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a17      	ldr	r2, [pc, #92]	; (80098c0 <TIM_OC2_SetConfig+0xec>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d113      	bne.n	8009890 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800986e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009876:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	4313      	orrs	r3, r2
 8009882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	4313      	orrs	r3, r2
 800988e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	621a      	str	r2, [r3, #32]
}
 80098aa:	bf00      	nop
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	feff8fff 	.word	0xfeff8fff
 80098bc:	40010000 	.word	0x40010000
 80098c0:	40010400 	.word	0x40010400

080098c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	4b2d      	ldr	r3, [pc, #180]	; (80099a4 <TIM_OC3_SetConfig+0xe0>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f023 0303 	bic.w	r3, r3, #3
 80098fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	4313      	orrs	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800990c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	021b      	lsls	r3, r3, #8
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	4313      	orrs	r3, r2
 8009918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a22      	ldr	r2, [pc, #136]	; (80099a8 <TIM_OC3_SetConfig+0xe4>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d003      	beq.n	800992a <TIM_OC3_SetConfig+0x66>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a21      	ldr	r2, [pc, #132]	; (80099ac <TIM_OC3_SetConfig+0xe8>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d10d      	bne.n	8009946 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	021b      	lsls	r3, r3, #8
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a17      	ldr	r2, [pc, #92]	; (80099a8 <TIM_OC3_SetConfig+0xe4>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d003      	beq.n	8009956 <TIM_OC3_SetConfig+0x92>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a16      	ldr	r2, [pc, #88]	; (80099ac <TIM_OC3_SetConfig+0xe8>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d113      	bne.n	800997e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800995c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	011b      	lsls	r3, r3, #4
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	4313      	orrs	r3, r2
 8009970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	011b      	lsls	r3, r3, #4
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	4313      	orrs	r3, r2
 800997c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	621a      	str	r2, [r3, #32]
}
 8009998:	bf00      	nop
 800999a:	371c      	adds	r7, #28
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	fffeff8f 	.word	0xfffeff8f
 80099a8:	40010000 	.word	0x40010000
 80099ac:	40010400 	.word	0x40010400

080099b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4b1e      	ldr	r3, [pc, #120]	; (8009a54 <TIM_OC4_SetConfig+0xa4>)
 80099dc:	4013      	ands	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	021b      	lsls	r3, r3, #8
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	031b      	lsls	r3, r3, #12
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a13      	ldr	r2, [pc, #76]	; (8009a58 <TIM_OC4_SetConfig+0xa8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d003      	beq.n	8009a18 <TIM_OC4_SetConfig+0x68>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a12      	ldr	r2, [pc, #72]	; (8009a5c <TIM_OC4_SetConfig+0xac>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d109      	bne.n	8009a2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	019b      	lsls	r3, r3, #6
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	621a      	str	r2, [r3, #32]
}
 8009a46:	bf00      	nop
 8009a48:	371c      	adds	r7, #28
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	feff8fff 	.word	0xfeff8fff
 8009a58:	40010000 	.word	0x40010000
 8009a5c:	40010400 	.word	0x40010400

08009a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4b1b      	ldr	r3, [pc, #108]	; (8009af8 <TIM_OC5_SetConfig+0x98>)
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009aa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	041b      	lsls	r3, r3, #16
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a12      	ldr	r2, [pc, #72]	; (8009afc <TIM_OC5_SetConfig+0x9c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d003      	beq.n	8009abe <TIM_OC5_SetConfig+0x5e>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a11      	ldr	r2, [pc, #68]	; (8009b00 <TIM_OC5_SetConfig+0xa0>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d109      	bne.n	8009ad2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	021b      	lsls	r3, r3, #8
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	621a      	str	r2, [r3, #32]
}
 8009aec:	bf00      	nop
 8009aee:	371c      	adds	r7, #28
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	fffeff8f 	.word	0xfffeff8f
 8009afc:	40010000 	.word	0x40010000
 8009b00:	40010400 	.word	0x40010400

08009b04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	4b1c      	ldr	r3, [pc, #112]	; (8009ba0 <TIM_OC6_SetConfig+0x9c>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	051b      	lsls	r3, r3, #20
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a13      	ldr	r2, [pc, #76]	; (8009ba4 <TIM_OC6_SetConfig+0xa0>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d003      	beq.n	8009b64 <TIM_OC6_SetConfig+0x60>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a12      	ldr	r2, [pc, #72]	; (8009ba8 <TIM_OC6_SetConfig+0xa4>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d109      	bne.n	8009b78 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	029b      	lsls	r3, r3, #10
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	621a      	str	r2, [r3, #32]
}
 8009b92:	bf00      	nop
 8009b94:	371c      	adds	r7, #28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	feff8fff 	.word	0xfeff8fff
 8009ba4:	40010000 	.word	0x40010000
 8009ba8:	40010400 	.word	0x40010400

08009bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	f023 0201 	bic.w	r2, r3, #1
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	011b      	lsls	r3, r3, #4
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f023 030a 	bic.w	r3, r3, #10
 8009be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	621a      	str	r2, [r3, #32]
}
 8009bfe:	bf00      	nop
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b087      	sub	sp, #28
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	f023 0210 	bic.w	r2, r3, #16
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6a1b      	ldr	r3, [r3, #32]
 8009c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	031b      	lsls	r3, r3, #12
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	621a      	str	r2, [r3, #32]
}
 8009c5e:	bf00      	nop
 8009c60:	371c      	adds	r7, #28
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b085      	sub	sp, #20
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	f043 0307 	orr.w	r3, r3, #7
 8009c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	609a      	str	r2, [r3, #8]
}
 8009c94:	bf00      	nop
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
 8009cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	021a      	lsls	r2, r3, #8
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	609a      	str	r2, [r3, #8]
}
 8009cd4:	bf00      	nop
 8009cd6:	371c      	adds	r7, #28
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d101      	bne.n	8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e06d      	b.n	8009dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2202      	movs	r2, #2
 8009d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a30      	ldr	r2, [pc, #192]	; (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d004      	beq.n	8009d2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a2f      	ldr	r2, [pc, #188]	; (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d108      	bne.n	8009d3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a20      	ldr	r2, [pc, #128]	; (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d022      	beq.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6a:	d01d      	beq.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a1d      	ldr	r2, [pc, #116]	; (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d018      	beq.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a1c      	ldr	r2, [pc, #112]	; (8009dec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d013      	beq.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a1a      	ldr	r2, [pc, #104]	; (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d00e      	beq.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a15      	ldr	r2, [pc, #84]	; (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d009      	beq.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a16      	ldr	r2, [pc, #88]	; (8009df4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d004      	beq.n	8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a15      	ldr	r2, [pc, #84]	; (8009df8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d10c      	bne.n	8009dc2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	40010000 	.word	0x40010000
 8009de4:	40010400 	.word	0x40010400
 8009de8:	40000400 	.word	0x40000400
 8009dec:	40000800 	.word	0x40000800
 8009df0:	40000c00 	.word	0x40000c00
 8009df4:	40014000 	.word	0x40014000
 8009df8:	40001800 	.word	0x40001800

08009dfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d101      	bne.n	8009e18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e14:	2302      	movs	r3, #2
 8009e16:	e065      	b.n	8009ee4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	041b      	lsls	r3, r3, #16
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a16      	ldr	r2, [pc, #88]	; (8009ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d004      	beq.n	8009ea6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a14      	ldr	r2, [pc, #80]	; (8009ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d115      	bne.n	8009ed2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb0:	051b      	lsls	r3, r3, #20
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	69db      	ldr	r3, [r3, #28]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	40010000 	.word	0x40010000
 8009ef4:	40010400 	.word	0x40010400

08009ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e040      	b.n	8009fc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d106      	bne.n	8009f5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7f8 fd5e 	bl	8002a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2224      	movs	r2, #36	; 0x24
 8009f60:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f022 0201 	bic.w	r2, r2, #1
 8009f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f82c 	bl	8009fd0 <UART_SetConfig>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e022      	b.n	8009fc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 faca 	bl	800a524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689a      	ldr	r2, [r3, #8]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f042 0201 	orr.w	r2, r2, #1
 8009fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fb51 	bl	800a668 <UART_CheckIdleState>
 8009fc6:	4603      	mov	r3, r0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b088      	sub	sp, #32
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	431a      	orrs	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4bb1      	ldr	r3, [pc, #708]	; (800a2c4 <UART_SetConfig+0x2f4>)
 800a000:	4013      	ands	r3, r2
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	6812      	ldr	r2, [r2, #0]
 800a006:	6939      	ldr	r1, [r7, #16]
 800a008:	430b      	orrs	r3, r1
 800a00a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68da      	ldr	r2, [r3, #12]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a1b      	ldr	r3, [r3, #32]
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	4313      	orrs	r3, r2
 800a030:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	430a      	orrs	r2, r1
 800a044:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a9f      	ldr	r2, [pc, #636]	; (800a2c8 <UART_SetConfig+0x2f8>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d121      	bne.n	800a094 <UART_SetConfig+0xc4>
 800a050:	4b9e      	ldr	r3, [pc, #632]	; (800a2cc <UART_SetConfig+0x2fc>)
 800a052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a056:	f003 0303 	and.w	r3, r3, #3
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d816      	bhi.n	800a08c <UART_SetConfig+0xbc>
 800a05e:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <UART_SetConfig+0x94>)
 800a060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a064:	0800a075 	.word	0x0800a075
 800a068:	0800a081 	.word	0x0800a081
 800a06c:	0800a07b 	.word	0x0800a07b
 800a070:	0800a087 	.word	0x0800a087
 800a074:	2301      	movs	r3, #1
 800a076:	77fb      	strb	r3, [r7, #31]
 800a078:	e151      	b.n	800a31e <UART_SetConfig+0x34e>
 800a07a:	2302      	movs	r3, #2
 800a07c:	77fb      	strb	r3, [r7, #31]
 800a07e:	e14e      	b.n	800a31e <UART_SetConfig+0x34e>
 800a080:	2304      	movs	r3, #4
 800a082:	77fb      	strb	r3, [r7, #31]
 800a084:	e14b      	b.n	800a31e <UART_SetConfig+0x34e>
 800a086:	2308      	movs	r3, #8
 800a088:	77fb      	strb	r3, [r7, #31]
 800a08a:	e148      	b.n	800a31e <UART_SetConfig+0x34e>
 800a08c:	2310      	movs	r3, #16
 800a08e:	77fb      	strb	r3, [r7, #31]
 800a090:	bf00      	nop
 800a092:	e144      	b.n	800a31e <UART_SetConfig+0x34e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a8d      	ldr	r2, [pc, #564]	; (800a2d0 <UART_SetConfig+0x300>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d134      	bne.n	800a108 <UART_SetConfig+0x138>
 800a09e:	4b8b      	ldr	r3, [pc, #556]	; (800a2cc <UART_SetConfig+0x2fc>)
 800a0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a4:	f003 030c 	and.w	r3, r3, #12
 800a0a8:	2b0c      	cmp	r3, #12
 800a0aa:	d829      	bhi.n	800a100 <UART_SetConfig+0x130>
 800a0ac:	a201      	add	r2, pc, #4	; (adr r2, 800a0b4 <UART_SetConfig+0xe4>)
 800a0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b2:	bf00      	nop
 800a0b4:	0800a0e9 	.word	0x0800a0e9
 800a0b8:	0800a101 	.word	0x0800a101
 800a0bc:	0800a101 	.word	0x0800a101
 800a0c0:	0800a101 	.word	0x0800a101
 800a0c4:	0800a0f5 	.word	0x0800a0f5
 800a0c8:	0800a101 	.word	0x0800a101
 800a0cc:	0800a101 	.word	0x0800a101
 800a0d0:	0800a101 	.word	0x0800a101
 800a0d4:	0800a0ef 	.word	0x0800a0ef
 800a0d8:	0800a101 	.word	0x0800a101
 800a0dc:	0800a101 	.word	0x0800a101
 800a0e0:	0800a101 	.word	0x0800a101
 800a0e4:	0800a0fb 	.word	0x0800a0fb
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	77fb      	strb	r3, [r7, #31]
 800a0ec:	e117      	b.n	800a31e <UART_SetConfig+0x34e>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	77fb      	strb	r3, [r7, #31]
 800a0f2:	e114      	b.n	800a31e <UART_SetConfig+0x34e>
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	77fb      	strb	r3, [r7, #31]
 800a0f8:	e111      	b.n	800a31e <UART_SetConfig+0x34e>
 800a0fa:	2308      	movs	r3, #8
 800a0fc:	77fb      	strb	r3, [r7, #31]
 800a0fe:	e10e      	b.n	800a31e <UART_SetConfig+0x34e>
 800a100:	2310      	movs	r3, #16
 800a102:	77fb      	strb	r3, [r7, #31]
 800a104:	bf00      	nop
 800a106:	e10a      	b.n	800a31e <UART_SetConfig+0x34e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a71      	ldr	r2, [pc, #452]	; (800a2d4 <UART_SetConfig+0x304>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d120      	bne.n	800a154 <UART_SetConfig+0x184>
 800a112:	4b6e      	ldr	r3, [pc, #440]	; (800a2cc <UART_SetConfig+0x2fc>)
 800a114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a11c:	2b10      	cmp	r3, #16
 800a11e:	d00f      	beq.n	800a140 <UART_SetConfig+0x170>
 800a120:	2b10      	cmp	r3, #16
 800a122:	d802      	bhi.n	800a12a <UART_SetConfig+0x15a>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d005      	beq.n	800a134 <UART_SetConfig+0x164>
 800a128:	e010      	b.n	800a14c <UART_SetConfig+0x17c>
 800a12a:	2b20      	cmp	r3, #32
 800a12c:	d005      	beq.n	800a13a <UART_SetConfig+0x16a>
 800a12e:	2b30      	cmp	r3, #48	; 0x30
 800a130:	d009      	beq.n	800a146 <UART_SetConfig+0x176>
 800a132:	e00b      	b.n	800a14c <UART_SetConfig+0x17c>
 800a134:	2300      	movs	r3, #0
 800a136:	77fb      	strb	r3, [r7, #31]
 800a138:	e0f1      	b.n	800a31e <UART_SetConfig+0x34e>
 800a13a:	2302      	movs	r3, #2
 800a13c:	77fb      	strb	r3, [r7, #31]
 800a13e:	e0ee      	b.n	800a31e <UART_SetConfig+0x34e>
 800a140:	2304      	movs	r3, #4
 800a142:	77fb      	strb	r3, [r7, #31]
 800a144:	e0eb      	b.n	800a31e <UART_SetConfig+0x34e>
 800a146:	2308      	movs	r3, #8
 800a148:	77fb      	strb	r3, [r7, #31]
 800a14a:	e0e8      	b.n	800a31e <UART_SetConfig+0x34e>
 800a14c:	2310      	movs	r3, #16
 800a14e:	77fb      	strb	r3, [r7, #31]
 800a150:	bf00      	nop
 800a152:	e0e4      	b.n	800a31e <UART_SetConfig+0x34e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a5f      	ldr	r2, [pc, #380]	; (800a2d8 <UART_SetConfig+0x308>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d120      	bne.n	800a1a0 <UART_SetConfig+0x1d0>
 800a15e:	4b5b      	ldr	r3, [pc, #364]	; (800a2cc <UART_SetConfig+0x2fc>)
 800a160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a164:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a168:	2b40      	cmp	r3, #64	; 0x40
 800a16a:	d00f      	beq.n	800a18c <UART_SetConfig+0x1bc>
 800a16c:	2b40      	cmp	r3, #64	; 0x40
 800a16e:	d802      	bhi.n	800a176 <UART_SetConfig+0x1a6>
 800a170:	2b00      	cmp	r3, #0
 800a172:	d005      	beq.n	800a180 <UART_SetConfig+0x1b0>
 800a174:	e010      	b.n	800a198 <UART_SetConfig+0x1c8>
 800a176:	2b80      	cmp	r3, #128	; 0x80
 800a178:	d005      	beq.n	800a186 <UART_SetConfig+0x1b6>
 800a17a:	2bc0      	cmp	r3, #192	; 0xc0
 800a17c:	d009      	beq.n	800a192 <UART_SetConfig+0x1c2>
 800a17e:	e00b      	b.n	800a198 <UART_SetConfig+0x1c8>
 800a180:	2300      	movs	r3, #0
 800a182:	77fb      	strb	r3, [r7, #31]
 800a184:	e0cb      	b.n	800a31e <UART_SetConfig+0x34e>
 800a186:	2302      	movs	r3, #2
 800a188:	77fb      	strb	r3, [r7, #31]
 800a18a:	e0c8      	b.n	800a31e <UART_SetConfig+0x34e>
 800a18c:	2304      	movs	r3, #4
 800a18e:	77fb      	strb	r3, [r7, #31]
 800a190:	e0c5      	b.n	800a31e <UART_SetConfig+0x34e>
 800a192:	2308      	movs	r3, #8
 800a194:	77fb      	strb	r3, [r7, #31]
 800a196:	e0c2      	b.n	800a31e <UART_SetConfig+0x34e>
 800a198:	2310      	movs	r3, #16
 800a19a:	77fb      	strb	r3, [r7, #31]
 800a19c:	bf00      	nop
 800a19e:	e0be      	b.n	800a31e <UART_SetConfig+0x34e>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a4d      	ldr	r2, [pc, #308]	; (800a2dc <UART_SetConfig+0x30c>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d124      	bne.n	800a1f4 <UART_SetConfig+0x224>
 800a1aa:	4b48      	ldr	r3, [pc, #288]	; (800a2cc <UART_SetConfig+0x2fc>)
 800a1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1b8:	d012      	beq.n	800a1e0 <UART_SetConfig+0x210>
 800a1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1be:	d802      	bhi.n	800a1c6 <UART_SetConfig+0x1f6>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d007      	beq.n	800a1d4 <UART_SetConfig+0x204>
 800a1c4:	e012      	b.n	800a1ec <UART_SetConfig+0x21c>
 800a1c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1ca:	d006      	beq.n	800a1da <UART_SetConfig+0x20a>
 800a1cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1d0:	d009      	beq.n	800a1e6 <UART_SetConfig+0x216>
 800a1d2:	e00b      	b.n	800a1ec <UART_SetConfig+0x21c>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	77fb      	strb	r3, [r7, #31]
 800a1d8:	e0a1      	b.n	800a31e <UART_SetConfig+0x34e>
 800a1da:	2302      	movs	r3, #2
 800a1dc:	77fb      	strb	r3, [r7, #31]
 800a1de:	e09e      	b.n	800a31e <UART_SetConfig+0x34e>
 800a1e0:	2304      	movs	r3, #4
 800a1e2:	77fb      	strb	r3, [r7, #31]
 800a1e4:	e09b      	b.n	800a31e <UART_SetConfig+0x34e>
 800a1e6:	2308      	movs	r3, #8
 800a1e8:	77fb      	strb	r3, [r7, #31]
 800a1ea:	e098      	b.n	800a31e <UART_SetConfig+0x34e>
 800a1ec:	2310      	movs	r3, #16
 800a1ee:	77fb      	strb	r3, [r7, #31]
 800a1f0:	bf00      	nop
 800a1f2:	e094      	b.n	800a31e <UART_SetConfig+0x34e>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a39      	ldr	r2, [pc, #228]	; (800a2e0 <UART_SetConfig+0x310>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d124      	bne.n	800a248 <UART_SetConfig+0x278>
 800a1fe:	4b33      	ldr	r3, [pc, #204]	; (800a2cc <UART_SetConfig+0x2fc>)
 800a200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a20c:	d012      	beq.n	800a234 <UART_SetConfig+0x264>
 800a20e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a212:	d802      	bhi.n	800a21a <UART_SetConfig+0x24a>
 800a214:	2b00      	cmp	r3, #0
 800a216:	d007      	beq.n	800a228 <UART_SetConfig+0x258>
 800a218:	e012      	b.n	800a240 <UART_SetConfig+0x270>
 800a21a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a21e:	d006      	beq.n	800a22e <UART_SetConfig+0x25e>
 800a220:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a224:	d009      	beq.n	800a23a <UART_SetConfig+0x26a>
 800a226:	e00b      	b.n	800a240 <UART_SetConfig+0x270>
 800a228:	2301      	movs	r3, #1
 800a22a:	77fb      	strb	r3, [r7, #31]
 800a22c:	e077      	b.n	800a31e <UART_SetConfig+0x34e>
 800a22e:	2302      	movs	r3, #2
 800a230:	77fb      	strb	r3, [r7, #31]
 800a232:	e074      	b.n	800a31e <UART_SetConfig+0x34e>
 800a234:	2304      	movs	r3, #4
 800a236:	77fb      	strb	r3, [r7, #31]
 800a238:	e071      	b.n	800a31e <UART_SetConfig+0x34e>
 800a23a:	2308      	movs	r3, #8
 800a23c:	77fb      	strb	r3, [r7, #31]
 800a23e:	e06e      	b.n	800a31e <UART_SetConfig+0x34e>
 800a240:	2310      	movs	r3, #16
 800a242:	77fb      	strb	r3, [r7, #31]
 800a244:	bf00      	nop
 800a246:	e06a      	b.n	800a31e <UART_SetConfig+0x34e>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a25      	ldr	r2, [pc, #148]	; (800a2e4 <UART_SetConfig+0x314>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d124      	bne.n	800a29c <UART_SetConfig+0x2cc>
 800a252:	4b1e      	ldr	r3, [pc, #120]	; (800a2cc <UART_SetConfig+0x2fc>)
 800a254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a258:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a25c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a260:	d012      	beq.n	800a288 <UART_SetConfig+0x2b8>
 800a262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a266:	d802      	bhi.n	800a26e <UART_SetConfig+0x29e>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d007      	beq.n	800a27c <UART_SetConfig+0x2ac>
 800a26c:	e012      	b.n	800a294 <UART_SetConfig+0x2c4>
 800a26e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a272:	d006      	beq.n	800a282 <UART_SetConfig+0x2b2>
 800a274:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a278:	d009      	beq.n	800a28e <UART_SetConfig+0x2be>
 800a27a:	e00b      	b.n	800a294 <UART_SetConfig+0x2c4>
 800a27c:	2300      	movs	r3, #0
 800a27e:	77fb      	strb	r3, [r7, #31]
 800a280:	e04d      	b.n	800a31e <UART_SetConfig+0x34e>
 800a282:	2302      	movs	r3, #2
 800a284:	77fb      	strb	r3, [r7, #31]
 800a286:	e04a      	b.n	800a31e <UART_SetConfig+0x34e>
 800a288:	2304      	movs	r3, #4
 800a28a:	77fb      	strb	r3, [r7, #31]
 800a28c:	e047      	b.n	800a31e <UART_SetConfig+0x34e>
 800a28e:	2308      	movs	r3, #8
 800a290:	77fb      	strb	r3, [r7, #31]
 800a292:	e044      	b.n	800a31e <UART_SetConfig+0x34e>
 800a294:	2310      	movs	r3, #16
 800a296:	77fb      	strb	r3, [r7, #31]
 800a298:	bf00      	nop
 800a29a:	e040      	b.n	800a31e <UART_SetConfig+0x34e>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a11      	ldr	r2, [pc, #68]	; (800a2e8 <UART_SetConfig+0x318>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d139      	bne.n	800a31a <UART_SetConfig+0x34a>
 800a2a6:	4b09      	ldr	r3, [pc, #36]	; (800a2cc <UART_SetConfig+0x2fc>)
 800a2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a2b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2b4:	d027      	beq.n	800a306 <UART_SetConfig+0x336>
 800a2b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2ba:	d817      	bhi.n	800a2ec <UART_SetConfig+0x31c>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d01c      	beq.n	800a2fa <UART_SetConfig+0x32a>
 800a2c0:	e027      	b.n	800a312 <UART_SetConfig+0x342>
 800a2c2:	bf00      	nop
 800a2c4:	efff69f3 	.word	0xefff69f3
 800a2c8:	40011000 	.word	0x40011000
 800a2cc:	40023800 	.word	0x40023800
 800a2d0:	40004400 	.word	0x40004400
 800a2d4:	40004800 	.word	0x40004800
 800a2d8:	40004c00 	.word	0x40004c00
 800a2dc:	40005000 	.word	0x40005000
 800a2e0:	40011400 	.word	0x40011400
 800a2e4:	40007800 	.word	0x40007800
 800a2e8:	40007c00 	.word	0x40007c00
 800a2ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f0:	d006      	beq.n	800a300 <UART_SetConfig+0x330>
 800a2f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a2f6:	d009      	beq.n	800a30c <UART_SetConfig+0x33c>
 800a2f8:	e00b      	b.n	800a312 <UART_SetConfig+0x342>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	77fb      	strb	r3, [r7, #31]
 800a2fe:	e00e      	b.n	800a31e <UART_SetConfig+0x34e>
 800a300:	2302      	movs	r3, #2
 800a302:	77fb      	strb	r3, [r7, #31]
 800a304:	e00b      	b.n	800a31e <UART_SetConfig+0x34e>
 800a306:	2304      	movs	r3, #4
 800a308:	77fb      	strb	r3, [r7, #31]
 800a30a:	e008      	b.n	800a31e <UART_SetConfig+0x34e>
 800a30c:	2308      	movs	r3, #8
 800a30e:	77fb      	strb	r3, [r7, #31]
 800a310:	e005      	b.n	800a31e <UART_SetConfig+0x34e>
 800a312:	2310      	movs	r3, #16
 800a314:	77fb      	strb	r3, [r7, #31]
 800a316:	bf00      	nop
 800a318:	e001      	b.n	800a31e <UART_SetConfig+0x34e>
 800a31a:	2310      	movs	r3, #16
 800a31c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a326:	d17f      	bne.n	800a428 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a328:	7ffb      	ldrb	r3, [r7, #31]
 800a32a:	2b08      	cmp	r3, #8
 800a32c:	d85c      	bhi.n	800a3e8 <UART_SetConfig+0x418>
 800a32e:	a201      	add	r2, pc, #4	; (adr r2, 800a334 <UART_SetConfig+0x364>)
 800a330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a334:	0800a359 	.word	0x0800a359
 800a338:	0800a379 	.word	0x0800a379
 800a33c:	0800a399 	.word	0x0800a399
 800a340:	0800a3e9 	.word	0x0800a3e9
 800a344:	0800a3b1 	.word	0x0800a3b1
 800a348:	0800a3e9 	.word	0x0800a3e9
 800a34c:	0800a3e9 	.word	0x0800a3e9
 800a350:	0800a3e9 	.word	0x0800a3e9
 800a354:	0800a3d1 	.word	0x0800a3d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a358:	f7fc f8d0 	bl	80064fc <HAL_RCC_GetPCLK1Freq>
 800a35c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	005a      	lsls	r2, r3, #1
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	085b      	lsrs	r3, r3, #1
 800a368:	441a      	add	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a372:	b29b      	uxth	r3, r3
 800a374:	61bb      	str	r3, [r7, #24]
        break;
 800a376:	e03a      	b.n	800a3ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a378:	f7fc f8d4 	bl	8006524 <HAL_RCC_GetPCLK2Freq>
 800a37c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	005a      	lsls	r2, r3, #1
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	085b      	lsrs	r3, r3, #1
 800a388:	441a      	add	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a392:	b29b      	uxth	r3, r3
 800a394:	61bb      	str	r3, [r7, #24]
        break;
 800a396:	e02a      	b.n	800a3ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	085a      	lsrs	r2, r3, #1
 800a39e:	4b5f      	ldr	r3, [pc, #380]	; (800a51c <UART_SetConfig+0x54c>)
 800a3a0:	4413      	add	r3, r2
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6852      	ldr	r2, [r2, #4]
 800a3a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	61bb      	str	r3, [r7, #24]
        break;
 800a3ae:	e01e      	b.n	800a3ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3b0:	f7fb ffe6 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 800a3b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	005a      	lsls	r2, r3, #1
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	085b      	lsrs	r3, r3, #1
 800a3c0:	441a      	add	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	61bb      	str	r3, [r7, #24]
        break;
 800a3ce:	e00e      	b.n	800a3ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	085b      	lsrs	r3, r3, #1
 800a3d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	61bb      	str	r3, [r7, #24]
        break;
 800a3e6:	e002      	b.n	800a3ee <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	75fb      	strb	r3, [r7, #23]
        break;
 800a3ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	2b0f      	cmp	r3, #15
 800a3f2:	d916      	bls.n	800a422 <UART_SetConfig+0x452>
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3fa:	d212      	bcs.n	800a422 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	f023 030f 	bic.w	r3, r3, #15
 800a404:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	085b      	lsrs	r3, r3, #1
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	f003 0307 	and.w	r3, r3, #7
 800a410:	b29a      	uxth	r2, r3
 800a412:	897b      	ldrh	r3, [r7, #10]
 800a414:	4313      	orrs	r3, r2
 800a416:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	897a      	ldrh	r2, [r7, #10]
 800a41e:	60da      	str	r2, [r3, #12]
 800a420:	e070      	b.n	800a504 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	75fb      	strb	r3, [r7, #23]
 800a426:	e06d      	b.n	800a504 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a428:	7ffb      	ldrb	r3, [r7, #31]
 800a42a:	2b08      	cmp	r3, #8
 800a42c:	d859      	bhi.n	800a4e2 <UART_SetConfig+0x512>
 800a42e:	a201      	add	r2, pc, #4	; (adr r2, 800a434 <UART_SetConfig+0x464>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a477 	.word	0x0800a477
 800a43c:	0800a495 	.word	0x0800a495
 800a440:	0800a4e3 	.word	0x0800a4e3
 800a444:	0800a4ad 	.word	0x0800a4ad
 800a448:	0800a4e3 	.word	0x0800a4e3
 800a44c:	0800a4e3 	.word	0x0800a4e3
 800a450:	0800a4e3 	.word	0x0800a4e3
 800a454:	0800a4cb 	.word	0x0800a4cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a458:	f7fc f850 	bl	80064fc <HAL_RCC_GetPCLK1Freq>
 800a45c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	085a      	lsrs	r2, r3, #1
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	441a      	add	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a470:	b29b      	uxth	r3, r3
 800a472:	61bb      	str	r3, [r7, #24]
        break;
 800a474:	e038      	b.n	800a4e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a476:	f7fc f855 	bl	8006524 <HAL_RCC_GetPCLK2Freq>
 800a47a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	085a      	lsrs	r2, r3, #1
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	441a      	add	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a48e:	b29b      	uxth	r3, r3
 800a490:	61bb      	str	r3, [r7, #24]
        break;
 800a492:	e029      	b.n	800a4e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	085a      	lsrs	r2, r3, #1
 800a49a:	4b21      	ldr	r3, [pc, #132]	; (800a520 <UART_SetConfig+0x550>)
 800a49c:	4413      	add	r3, r2
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	6852      	ldr	r2, [r2, #4]
 800a4a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	61bb      	str	r3, [r7, #24]
        break;
 800a4aa:	e01d      	b.n	800a4e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4ac:	f7fb ff68 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 800a4b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	085a      	lsrs	r2, r3, #1
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	441a      	add	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	61bb      	str	r3, [r7, #24]
        break;
 800a4c8:	e00e      	b.n	800a4e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	085b      	lsrs	r3, r3, #1
 800a4d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	61bb      	str	r3, [r7, #24]
        break;
 800a4e0:	e002      	b.n	800a4e8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	75fb      	strb	r3, [r7, #23]
        break;
 800a4e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	2b0f      	cmp	r3, #15
 800a4ec:	d908      	bls.n	800a500 <UART_SetConfig+0x530>
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4f4:	d204      	bcs.n	800a500 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	60da      	str	r2, [r3, #12]
 800a4fe:	e001      	b.n	800a504 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a510:	7dfb      	ldrb	r3, [r7, #23]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3720      	adds	r7, #32
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	01e84800 	.word	0x01e84800
 800a520:	00f42400 	.word	0x00f42400

0800a524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00a      	beq.n	800a54e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	f003 0304 	and.w	r3, r3, #4
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	f003 0308 	and.w	r3, r3, #8
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	f003 0310 	and.w	r3, r3, #16
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01a      	beq.n	800a63a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a622:	d10a      	bne.n	800a63a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	430a      	orrs	r2, r1
 800a65a:	605a      	str	r2, [r3, #4]
  }
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a676:	f7f8 fd1d 	bl	80030b4 <HAL_GetTick>
 800a67a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0308 	and.w	r3, r3, #8
 800a686:	2b08      	cmp	r3, #8
 800a688:	d10e      	bne.n	800a6a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a68a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f814 	bl	800a6c6 <UART_WaitOnFlagUntilTimeout>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e00a      	b.n	800a6be <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	60b9      	str	r1, [r7, #8]
 800a6d0:	603b      	str	r3, [r7, #0]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6d6:	e05d      	b.n	800a794 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6de:	d059      	beq.n	800a794 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6e0:	f7f8 fce8 	bl	80030b4 <HAL_GetTick>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d302      	bcc.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d11b      	bne.n	800a72e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a704:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	689a      	ldr	r2, [r3, #8]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f022 0201 	bic.w	r2, r2, #1
 800a714:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2220      	movs	r2, #32
 800a71a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2220      	movs	r2, #32
 800a720:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a72a:	2303      	movs	r3, #3
 800a72c:	e042      	b.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 0304 	and.w	r3, r3, #4
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d02b      	beq.n	800a794 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a74a:	d123      	bne.n	800a794 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a754:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a764:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	689a      	ldr	r2, [r3, #8]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0201 	bic.w	r2, r2, #1
 800a774:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2220      	movs	r2, #32
 800a77a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2220      	movs	r2, #32
 800a780:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2220      	movs	r2, #32
 800a786:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e00f      	b.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	69da      	ldr	r2, [r3, #28]
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	4013      	ands	r3, r2
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	bf0c      	ite	eq
 800a7a4:	2301      	moveq	r3, #1
 800a7a6:	2300      	movne	r3, #0
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	79fb      	ldrb	r3, [r7, #7]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d092      	beq.n	800a6d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d027      	beq.n	800a826 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	4b2f      	ldr	r3, [pc, #188]	; (800a89c <FMC_SDRAM_Init+0xe0>)
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a7ec:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a7f2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a7f8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a7fe:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a804:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a80a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a810:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a816:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	e032      	b.n	800a88c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a832:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a83c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a842:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	4b12      	ldr	r3, [pc, #72]	; (800a89c <FMC_SDRAM_Init+0xe0>)
 800a854:	4013      	ands	r3, r2
 800a856:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a860:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a866:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a86c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a872:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a878:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	ffff8000 	.word	0xffff8000

0800a8a0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d02e      	beq.n	800a918 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a8c6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a8d6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a8e0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a8ea:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a8f4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a8fe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	3b01      	subs	r3, #1
 800a906:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a908:	4313      	orrs	r3, r2
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	609a      	str	r2, [r3, #8]
 800a916:	e039      	b.n	800a98c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	4b1e      	ldr	r3, [pc, #120]	; (800a99c <FMC_SDRAM_Timing_Init+0xfc>)
 800a922:	4013      	ands	r3, r2
 800a924:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	3b01      	subs	r3, #1
 800a934:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a936:	4313      	orrs	r3, r2
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a94a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	3b01      	subs	r3, #1
 800a958:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a95a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	3b01      	subs	r3, #1
 800a962:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a964:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	3b01      	subs	r3, #1
 800a96c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a96e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	3b01      	subs	r3, #1
 800a976:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a978:	4313      	orrs	r3, r2
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	ff0f0fff 	.word	0xff0f0fff

0800a9a0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a9b8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a9c2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	695a      	ldr	r2, [r3, #20]
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	005b      	lsls	r3, r3, #1
 800a9f4:	431a      	orrs	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa08:	b084      	sub	sp, #16
 800aa0a:	b480      	push	{r7}
 800aa0c:	b085      	sub	sp, #20
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	f107 001c 	add.w	r0, r7, #28
 800aa16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa22:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aa26:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aa2a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aa2e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aa32:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	4b07      	ldr	r3, [pc, #28]	; (800aa5c <SDMMC_Init+0x54>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	431a      	orrs	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	b004      	add	sp, #16
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	ffff8100 	.word	0xffff8100

0800aa60 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2203      	movs	r2, #3
 800aa86:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800aa88:	2002      	movs	r0, #2
 800aa8a:	f7f8 fb1f 	bl	80030cc <HAL_Delay>
  
  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0303 	and.w	r3, r3, #3
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aad2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aad8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aade:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68da      	ldr	r2, [r3, #12]
 800aaea:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <SDMMC_SendCommand+0x50>)
 800aaec:	4013      	ands	r3, r2
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	fffff000 	.word	0xfffff000

0800ab08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	b2db      	uxtb	r3, r3
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b085      	sub	sp, #20
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3314      	adds	r3, #20
 800ab30:	461a      	mov	r2, r3
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	4413      	add	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
}  
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab6e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ab74:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ab7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab86:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	431a      	orrs	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0

}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800abae:	2310      	movs	r3, #16
 800abb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abb2:	2340      	movs	r3, #64	; 0x40
 800abb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abc0:	f107 0308 	add.w	r3, r7, #8
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7ff ff74 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800abcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd0:	2110      	movs	r1, #16
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fa42 	bl	800b05c <SDMMC_GetCmdResp1>
 800abd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abda:	69fb      	ldr	r3, [r7, #28]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3720      	adds	r7, #32
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800abf2:	2311      	movs	r3, #17
 800abf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abf6:	2340      	movs	r3, #64	; 0x40
 800abf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abfa:	2300      	movs	r3, #0
 800abfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac04:	f107 0308 	add.w	r3, r7, #8
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7ff ff52 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac14:	2111      	movs	r1, #17
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa20 	bl	800b05c <SDMMC_GetCmdResp1>
 800ac1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac1e:	69fb      	ldr	r3, [r7, #28]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3720      	adds	r7, #32
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b088      	sub	sp, #32
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ac36:	2312      	movs	r3, #18
 800ac38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac3a:	2340      	movs	r3, #64	; 0x40
 800ac3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac48:	f107 0308 	add.w	r3, r7, #8
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7ff ff30 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ac54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac58:	2112      	movs	r1, #18
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 f9fe 	bl	800b05c <SDMMC_GetCmdResp1>
 800ac60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac62:	69fb      	ldr	r3, [r7, #28]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3720      	adds	r7, #32
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ac7a:	2318      	movs	r3, #24
 800ac7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac7e:	2340      	movs	r3, #64	; 0x40
 800ac80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac82:	2300      	movs	r3, #0
 800ac84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac8c:	f107 0308 	add.w	r3, r7, #8
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff ff0e 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac9c:	2118      	movs	r1, #24
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f9dc 	bl	800b05c <SDMMC_GetCmdResp1>
 800aca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aca6:	69fb      	ldr	r3, [r7, #28]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3720      	adds	r7, #32
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b088      	sub	sp, #32
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800acbe:	2319      	movs	r3, #25
 800acc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acc2:	2340      	movs	r3, #64	; 0x40
 800acc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acc6:	2300      	movs	r3, #0
 800acc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acd0:	f107 0308 	add.w	r3, r7, #8
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff feec 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace0:	2119      	movs	r1, #25
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f9ba 	bl	800b05c <SDMMC_GetCmdResp1>
 800ace8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acea:	69fb      	ldr	r3, [r7, #28]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3720      	adds	r7, #32
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800acfc:	2300      	movs	r3, #0
 800acfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad00:	230c      	movs	r3, #12
 800ad02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad04:	2340      	movs	r3, #64	; 0x40
 800ad06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad12:	f107 0308 	add.w	r3, r7, #8
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7ff fecb 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ad1e:	4a05      	ldr	r2, [pc, #20]	; (800ad34 <SDMMC_CmdStopTransfer+0x40>)
 800ad20:	210c      	movs	r1, #12
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f99a 	bl	800b05c <SDMMC_GetCmdResp1>
 800ad28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad2a:	69fb      	ldr	r3, [r7, #28]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3720      	adds	r7, #32
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	05f5e100 	.word	0x05f5e100

0800ad38 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08a      	sub	sp, #40	; 0x28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ad48:	2307      	movs	r3, #7
 800ad4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad4c:	2340      	movs	r3, #64	; 0x40
 800ad4e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad50:	2300      	movs	r3, #0
 800ad52:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad58:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad5a:	f107 0310 	add.w	r3, r7, #16
 800ad5e:	4619      	mov	r1, r3
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f7ff fea7 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ad66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad6a:	2107      	movs	r1, #7
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f000 f975 	bl	800b05c <SDMMC_GetCmdResp1>
 800ad72:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3728      	adds	r7, #40	; 0x28
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b088      	sub	sp, #32
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad92:	2300      	movs	r3, #0
 800ad94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad9c:	f107 0308 	add.w	r3, r7, #8
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7ff fe86 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f92f 	bl	800b00c <SDMMC_GetCmdError>
 800adae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adb0:	69fb      	ldr	r3, [r7, #28]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3720      	adds	r7, #32
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b088      	sub	sp, #32
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800adc2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800adc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800adc8:	2308      	movs	r3, #8
 800adca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adcc:	2340      	movs	r3, #64	; 0x40
 800adce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800add0:	2300      	movs	r3, #0
 800add2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800add4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adda:	f107 0308 	add.w	r3, r7, #8
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff fe67 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fb18 	bl	800b41c <SDMMC_GetCmdResp7>
 800adec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adee:	69fb      	ldr	r3, [r7, #28]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3720      	adds	r7, #32
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ae06:	2337      	movs	r3, #55	; 0x37
 800ae08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae0a:	2340      	movs	r3, #64	; 0x40
 800ae0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae18:	f107 0308 	add.w	r3, r7, #8
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff fe48 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ae24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae28:	2137      	movs	r1, #55	; 0x37
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f916 	bl	800b05c <SDMMC_GetCmdResp1>
 800ae30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae32:	69fb      	ldr	r3, [r7, #28]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	4b0d      	ldr	r3, [pc, #52]	; (800ae80 <SDMMC_CmdAppOperCommand+0x44>)
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ae4e:	2329      	movs	r3, #41	; 0x29
 800ae50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae52:	2340      	movs	r3, #64	; 0x40
 800ae54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae56:	2300      	movs	r3, #0
 800ae58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae60:	f107 0308 	add.w	r3, r7, #8
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff fe24 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fa27 	bl	800b2c0 <SDMMC_GetCmdResp3>
 800ae72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae74:	69fb      	ldr	r3, [r7, #28]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3720      	adds	r7, #32
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	80100000 	.word	0x80100000

0800ae84 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ae92:	2306      	movs	r3, #6
 800ae94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae96:	2340      	movs	r3, #64	; 0x40
 800ae98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aea4:	f107 0308 	add.w	r3, r7, #8
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7ff fe02 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800aeb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeb4:	2106      	movs	r1, #6
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f8d0 	bl	800b05c <SDMMC_GetCmdResp1>
 800aebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aebe:	69fb      	ldr	r3, [r7, #28]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3720      	adds	r7, #32
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b088      	sub	sp, #32
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800aed4:	2333      	movs	r3, #51	; 0x33
 800aed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aed8:	2340      	movs	r3, #64	; 0x40
 800aeda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aedc:	2300      	movs	r3, #0
 800aede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aee6:	f107 0308 	add.w	r3, r7, #8
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff fde1 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800aef2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aef6:	2133      	movs	r1, #51	; 0x33
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f8af 	bl	800b05c <SDMMC_GetCmdResp1>
 800aefe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af00:	69fb      	ldr	r3, [r7, #28]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3720      	adds	r7, #32
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b088      	sub	sp, #32
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800af16:	2302      	movs	r3, #2
 800af18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800af1a:	23c0      	movs	r3, #192	; 0xc0
 800af1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af1e:	2300      	movs	r3, #0
 800af20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af28:	f107 0308 	add.w	r3, r7, #8
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff fdc0 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f97d 	bl	800b234 <SDMMC_GetCmdResp2>
 800af3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af3c:	69fb      	ldr	r3, [r7, #28]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3720      	adds	r7, #32
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b088      	sub	sp, #32
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800af54:	2309      	movs	r3, #9
 800af56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800af58:	23c0      	movs	r3, #192	; 0xc0
 800af5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af5c:	2300      	movs	r3, #0
 800af5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af66:	f107 0308 	add.w	r3, r7, #8
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7ff fda1 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f95e 	bl	800b234 <SDMMC_GetCmdResp2>
 800af78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af7a:	69fb      	ldr	r3, [r7, #28]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3720      	adds	r7, #32
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b088      	sub	sp, #32
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800af8e:	2300      	movs	r3, #0
 800af90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800af92:	2303      	movs	r3, #3
 800af94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af96:	2340      	movs	r3, #64	; 0x40
 800af98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afa4:	f107 0308 	add.w	r3, r7, #8
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7ff fd82 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	2103      	movs	r1, #3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f9bd 	bl	800b334 <SDMMC_GetCmdResp6>
 800afba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afbc:	69fb      	ldr	r3, [r7, #28]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3720      	adds	r7, #32
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b088      	sub	sp, #32
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800afd4:	230d      	movs	r3, #13
 800afd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afd8:	2340      	movs	r3, #64	; 0x40
 800afda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afdc:	2300      	movs	r3, #0
 800afde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afe4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afe6:	f107 0308 	add.w	r3, r7, #8
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff fd61 	bl	800aab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aff2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aff6:	210d      	movs	r1, #13
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f82f 	bl	800b05c <SDMMC_GetCmdResp1>
 800affe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b000:	69fb      	ldr	r3, [r7, #28]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3720      	adds	r7, #32
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b00c:	b490      	push	{r4, r7}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b014:	4b0f      	ldr	r3, [pc, #60]	; (800b054 <SDMMC_GetCmdError+0x48>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a0f      	ldr	r2, [pc, #60]	; (800b058 <SDMMC_GetCmdError+0x4c>)
 800b01a:	fba2 2303 	umull	r2, r3, r2, r3
 800b01e:	0a5b      	lsrs	r3, r3, #9
 800b020:	f241 3288 	movw	r2, #5000	; 0x1388
 800b024:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b028:	4623      	mov	r3, r4
 800b02a:	1e5c      	subs	r4, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d102      	bne.n	800b036 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b030:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b034:	e009      	b.n	800b04a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0f2      	beq.n	800b028 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	22c5      	movs	r2, #197	; 0xc5
 800b046:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bc90      	pop	{r4, r7}
 800b052:	4770      	bx	lr
 800b054:	20000018 	.word	0x20000018
 800b058:	10624dd3 	.word	0x10624dd3

0800b05c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b05c:	b590      	push	{r4, r7, lr}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	460b      	mov	r3, r1
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b06a:	4b6f      	ldr	r3, [pc, #444]	; (800b228 <SDMMC_GetCmdResp1+0x1cc>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a6f      	ldr	r2, [pc, #444]	; (800b22c <SDMMC_GetCmdResp1+0x1d0>)
 800b070:	fba2 2303 	umull	r2, r3, r2, r3
 800b074:	0a5b      	lsrs	r3, r3, #9
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b07c:	4623      	mov	r3, r4
 800b07e:	1e5c      	subs	r4, r3, #1
 800b080:	2b00      	cmp	r3, #0
 800b082:	d102      	bne.n	800b08a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b084:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b088:	e0c9      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b08e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b096:	2b00      	cmp	r3, #0
 800b098:	d0f0      	beq.n	800b07c <SDMMC_GetCmdResp1+0x20>
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1eb      	bne.n	800b07c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d004      	beq.n	800b0ba <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2204      	movs	r2, #4
 800b0b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0b6:	2304      	movs	r3, #4
 800b0b8:	e0b1      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e0a6      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	22c5      	movs	r2, #197	; 0xc5
 800b0d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f7ff fd16 	bl	800ab08 <SDMMC_GetCommandResponse>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	461a      	mov	r2, r3
 800b0e0:	7afb      	ldrb	r3, [r7, #11]
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d001      	beq.n	800b0ea <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e099      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f7ff fd18 	bl	800ab22 <SDMMC_GetResponse>
 800b0f2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	4b4e      	ldr	r3, [pc, #312]	; (800b230 <SDMMC_GetCmdResp1+0x1d4>)
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b0fe:	2300      	movs	r3, #0
 800b100:	e08d      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	da02      	bge.n	800b10e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b10c:	e087      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b118:	2340      	movs	r3, #64	; 0x40
 800b11a:	e080      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b126:	2380      	movs	r3, #128	; 0x80
 800b128:	e079      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b134:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b138:	e071      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b144:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b148:	e069      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b158:	e061      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b164:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b168:	e059      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b178:	e051      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b188:	e049      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b194:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b198:	e041      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b1a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1a8:	e039      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b1b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1b8:	e031      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b1c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b1c8:	e029      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b1d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1d8:	e021      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b1e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b1e8:	e019      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b1f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b1f8:	e011      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b204:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b208:	e009      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	f003 0308 	and.w	r3, r3, #8
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b214:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b218:	e001      	b.n	800b21e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b21a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b21e:	4618      	mov	r0, r3
 800b220:	371c      	adds	r7, #28
 800b222:	46bd      	mov	sp, r7
 800b224:	bd90      	pop	{r4, r7, pc}
 800b226:	bf00      	nop
 800b228:	20000018 	.word	0x20000018
 800b22c:	10624dd3 	.word	0x10624dd3
 800b230:	fdffe008 	.word	0xfdffe008

0800b234 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b234:	b490      	push	{r4, r7}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b23c:	4b1e      	ldr	r3, [pc, #120]	; (800b2b8 <SDMMC_GetCmdResp2+0x84>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a1e      	ldr	r2, [pc, #120]	; (800b2bc <SDMMC_GetCmdResp2+0x88>)
 800b242:	fba2 2303 	umull	r2, r3, r2, r3
 800b246:	0a5b      	lsrs	r3, r3, #9
 800b248:	f241 3288 	movw	r2, #5000	; 0x1388
 800b24c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b250:	4623      	mov	r3, r4
 800b252:	1e5c      	subs	r4, r3, #1
 800b254:	2b00      	cmp	r3, #0
 800b256:	d102      	bne.n	800b25e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b258:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b25c:	e026      	b.n	800b2ac <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b262:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d0f0      	beq.n	800b250 <SDMMC_GetCmdResp2+0x1c>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1eb      	bne.n	800b250 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b27c:	f003 0304 	and.w	r3, r3, #4
 800b280:	2b00      	cmp	r3, #0
 800b282:	d004      	beq.n	800b28e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2204      	movs	r2, #4
 800b288:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b28a:	2304      	movs	r3, #4
 800b28c:	e00e      	b.n	800b2ac <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d004      	beq.n	800b2a4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e003      	b.n	800b2ac <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	22c5      	movs	r2, #197	; 0xc5
 800b2a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bc90      	pop	{r4, r7}
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	20000018 	.word	0x20000018
 800b2bc:	10624dd3 	.word	0x10624dd3

0800b2c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b2c0:	b490      	push	{r4, r7}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2c8:	4b18      	ldr	r3, [pc, #96]	; (800b32c <SDMMC_GetCmdResp3+0x6c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a18      	ldr	r2, [pc, #96]	; (800b330 <SDMMC_GetCmdResp3+0x70>)
 800b2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d2:	0a5b      	lsrs	r3, r3, #9
 800b2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b2dc:	4623      	mov	r3, r4
 800b2de:	1e5c      	subs	r4, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d102      	bne.n	800b2ea <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2e8:	e01b      	b.n	800b322 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0f0      	beq.n	800b2dc <SDMMC_GetCmdResp3+0x1c>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1eb      	bne.n	800b2dc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d004      	beq.n	800b31a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2204      	movs	r2, #4
 800b314:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b316:	2304      	movs	r3, #4
 800b318:	e003      	b.n	800b322 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	22c5      	movs	r2, #197	; 0xc5
 800b31e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bc90      	pop	{r4, r7}
 800b32a:	4770      	bx	lr
 800b32c:	20000018 	.word	0x20000018
 800b330:	10624dd3 	.word	0x10624dd3

0800b334 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b334:	b590      	push	{r4, r7, lr}
 800b336:	b087      	sub	sp, #28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	460b      	mov	r3, r1
 800b33e:	607a      	str	r2, [r7, #4]
 800b340:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b342:	4b34      	ldr	r3, [pc, #208]	; (800b414 <SDMMC_GetCmdResp6+0xe0>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a34      	ldr	r2, [pc, #208]	; (800b418 <SDMMC_GetCmdResp6+0xe4>)
 800b348:	fba2 2303 	umull	r2, r3, r2, r3
 800b34c:	0a5b      	lsrs	r3, r3, #9
 800b34e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b352:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b356:	4623      	mov	r3, r4
 800b358:	1e5c      	subs	r4, r3, #1
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d102      	bne.n	800b364 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b35e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b362:	e052      	b.n	800b40a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b368:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b370:	2b00      	cmp	r3, #0
 800b372:	d0f0      	beq.n	800b356 <SDMMC_GetCmdResp6+0x22>
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1eb      	bne.n	800b356 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b382:	f003 0304 	and.w	r3, r3, #4
 800b386:	2b00      	cmp	r3, #0
 800b388:	d004      	beq.n	800b394 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2204      	movs	r2, #4
 800b38e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b390:	2304      	movs	r3, #4
 800b392:	e03a      	b.n	800b40a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d004      	beq.n	800b3aa <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e02f      	b.n	800b40a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f7ff fbac 	bl	800ab08 <SDMMC_GetCommandResponse>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	7afb      	ldrb	r3, [r7, #11]
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d001      	beq.n	800b3be <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e025      	b.n	800b40a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	22c5      	movs	r2, #197	; 0xc5
 800b3c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7ff fbab 	bl	800ab22 <SDMMC_GetResponse>
 800b3cc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d106      	bne.n	800b3e6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	0c1b      	lsrs	r3, r3, #16
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	e011      	b.n	800b40a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b3f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3f4:	e009      	b.n	800b40a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b404:	e001      	b.n	800b40a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	371c      	adds	r7, #28
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd90      	pop	{r4, r7, pc}
 800b412:	bf00      	nop
 800b414:	20000018 	.word	0x20000018
 800b418:	10624dd3 	.word	0x10624dd3

0800b41c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b41c:	b490      	push	{r4, r7}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b424:	4b21      	ldr	r3, [pc, #132]	; (800b4ac <SDMMC_GetCmdResp7+0x90>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a21      	ldr	r2, [pc, #132]	; (800b4b0 <SDMMC_GetCmdResp7+0x94>)
 800b42a:	fba2 2303 	umull	r2, r3, r2, r3
 800b42e:	0a5b      	lsrs	r3, r3, #9
 800b430:	f241 3288 	movw	r2, #5000	; 0x1388
 800b434:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b438:	4623      	mov	r3, r4
 800b43a:	1e5c      	subs	r4, r3, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b440:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b444:	e02c      	b.n	800b4a0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b44a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0f0      	beq.n	800b438 <SDMMC_GetCmdResp7+0x1c>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1eb      	bne.n	800b438 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d004      	beq.n	800b476 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2204      	movs	r2, #4
 800b470:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b472:	2304      	movs	r3, #4
 800b474:	e014      	b.n	800b4a0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47a:	f003 0301 	and.w	r3, r3, #1
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d004      	beq.n	800b48c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b488:	2301      	movs	r3, #1
 800b48a:	e009      	b.n	800b4a0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2240      	movs	r2, #64	; 0x40
 800b49c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b49e:	2300      	movs	r3, #0
  
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bc90      	pop	{r4, r7}
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	20000018 	.word	0x20000018
 800b4b0:	10624dd3 	.word	0x10624dd3

0800b4b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b4b8:	4904      	ldr	r1, [pc, #16]	; (800b4cc <MX_FATFS_Init+0x18>)
 800b4ba:	4805      	ldr	r0, [pc, #20]	; (800b4d0 <MX_FATFS_Init+0x1c>)
 800b4bc:	f000 fa96 	bl	800b9ec <FATFS_LinkDriver>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	4b03      	ldr	r3, [pc, #12]	; (800b4d4 <MX_FATFS_Init+0x20>)
 800b4c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b4c8:	bf00      	nop
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	2000c6c0 	.word	0x2000c6c0
 800b4d0:	08025560 	.word	0x08025560
 800b4d4:	2000c6bc 	.word	0x2000c6bc

0800b4d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b4e2:	f000 f87b 	bl	800b5dc <BSP_SD_IsDetected>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d001      	beq.n	800b4f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	e012      	b.n	800b516 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b4f0:	480b      	ldr	r0, [pc, #44]	; (800b520 <BSP_SD_Init+0x48>)
 800b4f2:	f7fc fae9 	bl	8007ac8 <HAL_SD_Init>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d109      	bne.n	800b514 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b504:	4806      	ldr	r0, [pc, #24]	; (800b520 <BSP_SD_Init+0x48>)
 800b506:	f7fc ff2b 	bl	8008360 <HAL_SD_ConfigWideBusOperation>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b514:	79fb      	ldrb	r3, [r7, #7]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	2000c148 	.word	0x2000c148

0800b524 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	68f9      	ldr	r1, [r7, #12]
 800b53a:	4806      	ldr	r0, [pc, #24]	; (800b554 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b53c:	f7fc fb5c 	bl	8007bf8 <HAL_SD_ReadBlocks_DMA>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d001      	beq.n	800b54a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3718      	adds	r7, #24
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	2000c148 	.word	0x2000c148

0800b558 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b564:	2300      	movs	r3, #0
 800b566:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	68f9      	ldr	r1, [r7, #12]
 800b56e:	4806      	ldr	r0, [pc, #24]	; (800b588 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b570:	f7fc fc2e 	bl	8007dd0 <HAL_SD_WriteBlocks_DMA>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	2000c148 	.word	0x2000c148

0800b58c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b590:	4805      	ldr	r0, [pc, #20]	; (800b5a8 <BSP_SD_GetCardState+0x1c>)
 800b592:	f7fc ff61 	bl	8008458 <HAL_SD_GetCardState>
 800b596:	4603      	mov	r3, r0
 800b598:	2b04      	cmp	r3, #4
 800b59a:	bf14      	ite	ne
 800b59c:	2301      	movne	r3, #1
 800b59e:	2300      	moveq	r3, #0
 800b5a0:	b2db      	uxtb	r3, r3
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	2000c148 	.word	0x2000c148

0800b5ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	4803      	ldr	r0, [pc, #12]	; (800b5c4 <BSP_SD_GetCardInfo+0x18>)
 800b5b8:	f7fc fea6 	bl	8008308 <HAL_SD_GetCardInfo>
}
 800b5bc:	bf00      	nop
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	2000c148 	.word	0x2000c148

0800b5c8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b5d0:	f000 f9b2 	bl	800b938 <BSP_SD_ReadCpltCallback>
}
 800b5d4:	bf00      	nop
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b5e6:	f000 f80b 	bl	800b600 <BSP_PlatformIsDetected>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d101      	bne.n	800b5f4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	b2db      	uxtb	r3, r3
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3708      	adds	r7, #8
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b606:	2301      	movs	r3, #1
 800b608:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b60a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b60e:	4806      	ldr	r0, [pc, #24]	; (800b628 <BSP_PlatformIsDetected+0x28>)
 800b610:	f7f9 fe3a 	bl	8005288 <HAL_GPIO_ReadPin>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d001      	beq.n	800b61e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b61a:	2300      	movs	r3, #0
 800b61c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800b61e:	79fb      	ldrb	r3, [r7, #7]
}  
 800b620:	4618      	mov	r0, r3
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	40020800 	.word	0x40020800

0800b62c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b634:	f000 fa26 	bl	800ba84 <osKernelSysTick>
 800b638:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b63a:	e006      	b.n	800b64a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b63c:	f7ff ffa6 	bl	800b58c <BSP_SD_GetCardState>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b646:	2300      	movs	r3, #0
 800b648:	e009      	b.n	800b65e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b64a:	f000 fa1b 	bl	800ba84 <osKernelSysTick>
 800b64e:	4602      	mov	r2, r0
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	429a      	cmp	r2, r3
 800b658:	d8f0      	bhi.n	800b63c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b65a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	4603      	mov	r3, r0
 800b670:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b672:	4b0b      	ldr	r3, [pc, #44]	; (800b6a0 <SD_CheckStatus+0x38>)
 800b674:	2201      	movs	r2, #1
 800b676:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b678:	f7ff ff88 	bl	800b58c <BSP_SD_GetCardState>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d107      	bne.n	800b692 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b682:	4b07      	ldr	r3, [pc, #28]	; (800b6a0 <SD_CheckStatus+0x38>)
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	b2db      	uxtb	r3, r3
 800b688:	f023 0301 	bic.w	r3, r3, #1
 800b68c:	b2da      	uxtb	r2, r3
 800b68e:	4b04      	ldr	r3, [pc, #16]	; (800b6a0 <SD_CheckStatus+0x38>)
 800b690:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b692:	4b03      	ldr	r3, [pc, #12]	; (800b6a0 <SD_CheckStatus+0x38>)
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	b2db      	uxtb	r3, r3
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	20000021 	.word	0x20000021

0800b6a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b6a4:	b590      	push	{r4, r7, lr}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800b6ae:	4b20      	ldr	r3, [pc, #128]	; (800b730 <SD_initialize+0x8c>)
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b6b4:	f000 f9da 	bl	800ba6c <osKernelRunning>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d030      	beq.n	800b720 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b6be:	f7ff ff0b 	bl	800b4d8 <BSP_SD_Init>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d107      	bne.n	800b6d8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b6c8:	79fb      	ldrb	r3, [r7, #7]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7ff ffcc 	bl	800b668 <SD_CheckStatus>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	4b16      	ldr	r3, [pc, #88]	; (800b730 <SD_initialize+0x8c>)
 800b6d6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b6d8:	4b15      	ldr	r3, [pc, #84]	; (800b730 <SD_initialize+0x8c>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d01e      	beq.n	800b720 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b6e2:	4b14      	ldr	r3, [pc, #80]	; (800b734 <SD_initialize+0x90>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10e      	bne.n	800b708 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b6ea:	4b13      	ldr	r3, [pc, #76]	; (800b738 <SD_initialize+0x94>)
 800b6ec:	f107 0408 	add.w	r4, r7, #8
 800b6f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b6f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b6f6:	f107 0308 	add.w	r3, r7, #8
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 fa31 	bl	800bb64 <osMessageCreate>
 800b702:	4602      	mov	r2, r0
 800b704:	4b0b      	ldr	r3, [pc, #44]	; (800b734 <SD_initialize+0x90>)
 800b706:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b708:	4b0a      	ldr	r3, [pc, #40]	; (800b734 <SD_initialize+0x90>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d107      	bne.n	800b720 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b710:	4b07      	ldr	r3, [pc, #28]	; (800b730 <SD_initialize+0x8c>)
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	b2db      	uxtb	r3, r3
 800b716:	f043 0301 	orr.w	r3, r3, #1
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	4b04      	ldr	r3, [pc, #16]	; (800b730 <SD_initialize+0x8c>)
 800b71e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b720:	4b03      	ldr	r3, [pc, #12]	; (800b730 <SD_initialize+0x8c>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	b2db      	uxtb	r3, r3
}
 800b726:	4618      	mov	r0, r3
 800b728:	371c      	adds	r7, #28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd90      	pop	{r4, r7, pc}
 800b72e:	bf00      	nop
 800b730:	20000021 	.word	0x20000021
 800b734:	200003a8 	.word	0x200003a8
 800b738:	08024ed8 	.word	0x08024ed8

0800b73c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b746:	79fb      	ldrb	r3, [r7, #7]
 800b748:	4618      	mov	r0, r3
 800b74a:	f7ff ff8d 	bl	800b668 <SD_CheckStatus>
 800b74e:	4603      	mov	r3, r0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08a      	sub	sp, #40	; 0x28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60b9      	str	r1, [r7, #8]
 800b760:	607a      	str	r2, [r7, #4]
 800b762:	603b      	str	r3, [r7, #0]
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b76e:	f247 5030 	movw	r0, #30000	; 0x7530
 800b772:	f7ff ff5b 	bl	800b62c <SD_CheckStatusWithTimeout>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	da02      	bge.n	800b782 <SD_read+0x2a>
  {
    return res;
 800b77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b780:	e032      	b.n	800b7e8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	6879      	ldr	r1, [r7, #4]
 800b786:	68b8      	ldr	r0, [r7, #8]
 800b788:	f7ff fecc 	bl	800b524 <BSP_SD_ReadBlocks_DMA>
 800b78c:	4603      	mov	r3, r0
 800b78e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b792:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b796:	2b00      	cmp	r3, #0
 800b798:	d124      	bne.n	800b7e4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b79a:	4b15      	ldr	r3, [pc, #84]	; (800b7f0 <SD_read+0x98>)
 800b79c:	6819      	ldr	r1, [r3, #0]
 800b79e:	f107 0314 	add.w	r3, r7, #20
 800b7a2:	f247 5230 	movw	r2, #30000	; 0x7530
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f000 fa46 	bl	800bc38 <osMessageGet>

    if (event.status == osEventMessage)
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	2b10      	cmp	r3, #16
 800b7b0:	d118      	bne.n	800b7e4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d115      	bne.n	800b7e4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b7b8:	f000 f964 	bl	800ba84 <osKernelSysTick>
 800b7bc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b7be:	e008      	b.n	800b7d2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b7c0:	f7ff fee4 	bl	800b58c <BSP_SD_GetCardState>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d103      	bne.n	800b7d2 <SD_read+0x7a>
              {
                res = RES_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b7d0:	e008      	b.n	800b7e4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b7d2:	f000 f957 	bl	800ba84 <osKernelSysTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	f247 522f 	movw	r2, #29999	; 0x752f
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d9ed      	bls.n	800b7c0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3728      	adds	r7, #40	; 0x28
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	200003a8 	.word	0x200003a8

0800b7f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b08a      	sub	sp, #40	; 0x28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	607a      	str	r2, [r7, #4]
 800b7fe:	603b      	str	r3, [r7, #0]
 800b800:	4603      	mov	r3, r0
 800b802:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b80a:	f247 5030 	movw	r0, #30000	; 0x7530
 800b80e:	f7ff ff0d 	bl	800b62c <SD_CheckStatusWithTimeout>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	da02      	bge.n	800b81e <SD_write+0x2a>
  {
    return res;
 800b818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b81c:	e02e      	b.n	800b87c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	6879      	ldr	r1, [r7, #4]
 800b822:	68b8      	ldr	r0, [r7, #8]
 800b824:	f7ff fe98 	bl	800b558 <BSP_SD_WriteBlocks_DMA>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d124      	bne.n	800b878 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b82e:	4b15      	ldr	r3, [pc, #84]	; (800b884 <SD_write+0x90>)
 800b830:	6819      	ldr	r1, [r3, #0]
 800b832:	f107 0314 	add.w	r3, r7, #20
 800b836:	f247 5230 	movw	r2, #30000	; 0x7530
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 f9fc 	bl	800bc38 <osMessageGet>

    if (event.status == osEventMessage)
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2b10      	cmp	r3, #16
 800b844:	d118      	bne.n	800b878 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d115      	bne.n	800b878 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b84c:	f000 f91a 	bl	800ba84 <osKernelSysTick>
 800b850:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b852:	e008      	b.n	800b866 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b854:	f7ff fe9a 	bl	800b58c <BSP_SD_GetCardState>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d103      	bne.n	800b866 <SD_write+0x72>
          {
            res = RES_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b864:	e008      	b.n	800b878 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b866:	f000 f90d 	bl	800ba84 <osKernelSysTick>
 800b86a:	4602      	mov	r2, r0
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	1ad3      	subs	r3, r2, r3
 800b870:	f247 522f 	movw	r2, #29999	; 0x752f
 800b874:	4293      	cmp	r3, r2
 800b876:	d9ed      	bls.n	800b854 <SD_write+0x60>
    }

  }
#endif

  return res;
 800b878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3728      	adds	r7, #40	; 0x28
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	200003a8 	.word	0x200003a8

0800b888 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08c      	sub	sp, #48	; 0x30
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	4603      	mov	r3, r0
 800b890:	603a      	str	r2, [r7, #0]
 800b892:	71fb      	strb	r3, [r7, #7]
 800b894:	460b      	mov	r3, r1
 800b896:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b89e:	4b25      	ldr	r3, [pc, #148]	; (800b934 <SD_ioctl+0xac>)
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d001      	beq.n	800b8b0 <SD_ioctl+0x28>
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e03c      	b.n	800b92a <SD_ioctl+0xa2>

  switch (cmd)
 800b8b0:	79bb      	ldrb	r3, [r7, #6]
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	d834      	bhi.n	800b920 <SD_ioctl+0x98>
 800b8b6:	a201      	add	r2, pc, #4	; (adr r2, 800b8bc <SD_ioctl+0x34>)
 800b8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8bc:	0800b8cd 	.word	0x0800b8cd
 800b8c0:	0800b8d5 	.word	0x0800b8d5
 800b8c4:	0800b8ed 	.word	0x0800b8ed
 800b8c8:	0800b907 	.word	0x0800b907
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b8d2:	e028      	b.n	800b926 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b8d4:	f107 030c 	add.w	r3, r7, #12
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7ff fe67 	bl	800b5ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b8de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b8ea:	e01c      	b.n	800b926 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b8ec:	f107 030c 	add.w	r3, r7, #12
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff fe5b 	bl	800b5ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b904:	e00f      	b.n	800b926 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b906:	f107 030c 	add.w	r3, r7, #12
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7ff fe4e 	bl	800b5ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b912:	0a5a      	lsrs	r2, r3, #9
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b91e:	e002      	b.n	800b926 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b920:	2304      	movs	r3, #4
 800b922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3730      	adds	r7, #48	; 0x30
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20000021 	.word	0x20000021

0800b938 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b93c:	4b04      	ldr	r3, [pc, #16]	; (800b950 <BSP_SD_ReadCpltCallback+0x18>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2200      	movs	r2, #0
 800b942:	2101      	movs	r1, #1
 800b944:	4618      	mov	r0, r3
 800b946:	f000 f937 	bl	800bbb8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b94a:	bf00      	nop
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	200003a8 	.word	0x200003a8

0800b954 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b954:	b480      	push	{r7}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	4613      	mov	r3, r2
 800b960:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b962:	2301      	movs	r3, #1
 800b964:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b96a:	4b1f      	ldr	r3, [pc, #124]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b96c:	7a5b      	ldrb	r3, [r3, #9]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b00      	cmp	r3, #0
 800b972:	d131      	bne.n	800b9d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b974:	4b1c      	ldr	r3, [pc, #112]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b976:	7a5b      	ldrb	r3, [r3, #9]
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	461a      	mov	r2, r3
 800b97c:	4b1a      	ldr	r3, [pc, #104]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b97e:	2100      	movs	r1, #0
 800b980:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b982:	4b19      	ldr	r3, [pc, #100]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b984:	7a5b      	ldrb	r3, [r3, #9]
 800b986:	b2db      	uxtb	r3, r3
 800b988:	4a17      	ldr	r2, [pc, #92]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b992:	4b15      	ldr	r3, [pc, #84]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b994:	7a5b      	ldrb	r3, [r3, #9]
 800b996:	b2db      	uxtb	r3, r3
 800b998:	461a      	mov	r2, r3
 800b99a:	4b13      	ldr	r3, [pc, #76]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b99c:	4413      	add	r3, r2
 800b99e:	79fa      	ldrb	r2, [r7, #7]
 800b9a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b9a2:	4b11      	ldr	r3, [pc, #68]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b9a4:	7a5b      	ldrb	r3, [r3, #9]
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	b2d1      	uxtb	r1, r2
 800b9ac:	4a0e      	ldr	r2, [pc, #56]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b9ae:	7251      	strb	r1, [r2, #9]
 800b9b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9b2:	7dbb      	ldrb	r3, [r7, #22]
 800b9b4:	3330      	adds	r3, #48	; 0x30
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	223a      	movs	r2, #58	; 0x3a
 800b9c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	3302      	adds	r3, #2
 800b9c8:	222f      	movs	r2, #47	; 0x2f
 800b9ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	3303      	adds	r3, #3
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	200003ac 	.word	0x200003ac

0800b9ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff ffaa 	bl	800b954 <FATFS_LinkDriverEx>
 800ba00:	4603      	mov	r3, r0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ba0a:	b480      	push	{r7}
 800ba0c:	b085      	sub	sp, #20
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	4603      	mov	r3, r0
 800ba12:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ba14:	2300      	movs	r3, #0
 800ba16:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ba18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba1c:	2b84      	cmp	r3, #132	; 0x84
 800ba1e:	d005      	beq.n	800ba2c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ba20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4413      	add	r3, r2
 800ba28:	3303      	adds	r3, #3
 800ba2a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba40:	f3ef 8305 	mrs	r3, IPSR
 800ba44:	607b      	str	r3, [r7, #4]
  return(result);
 800ba46:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	bf14      	ite	ne
 800ba4c:	2301      	movne	r3, #1
 800ba4e:	2300      	moveq	r3, #0
 800ba50:	b2db      	uxtb	r3, r3
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ba62:	f001 faff 	bl	800d064 <vTaskStartScheduler>
  
  return osOK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800ba70:	f001 ff4a 	bl	800d908 <xTaskGetSchedulerState>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d101      	bne.n	800ba7e <osKernelRunning+0x12>
    return 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	e000      	b.n	800ba80 <osKernelRunning+0x14>
  else
    return 1;
 800ba7e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ba88:	f7ff ffd7 	bl	800ba3a <inHandlerMode>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d003      	beq.n	800ba9a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ba92:	f001 fc05 	bl	800d2a0 <xTaskGetTickCountFromISR>
 800ba96:	4603      	mov	r3, r0
 800ba98:	e002      	b.n	800baa0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ba9a:	f001 fbf1 	bl	800d280 <xTaskGetTickCount>
 800ba9e:	4603      	mov	r3, r0
  }
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800baa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa6:	b089      	sub	sp, #36	; 0x24
 800baa8:	af04      	add	r7, sp, #16
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d020      	beq.n	800baf8 <osThreadCreate+0x54>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d01c      	beq.n	800baf8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	685c      	ldr	r4, [r3, #4]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681d      	ldr	r5, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	691e      	ldr	r6, [r3, #16]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7ff ff9a 	bl	800ba0a <makeFreeRtosPriority>
 800bad6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bae0:	9202      	str	r2, [sp, #8]
 800bae2:	9301      	str	r3, [sp, #4]
 800bae4:	9100      	str	r1, [sp, #0]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	4632      	mov	r2, r6
 800baea:	4629      	mov	r1, r5
 800baec:	4620      	mov	r0, r4
 800baee:	f001 f8e0 	bl	800ccb2 <xTaskCreateStatic>
 800baf2:	4603      	mov	r3, r0
 800baf4:	60fb      	str	r3, [r7, #12]
 800baf6:	e01c      	b.n	800bb32 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685c      	ldr	r4, [r3, #4]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb04:	b29e      	uxth	r6, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff ff7c 	bl	800ba0a <makeFreeRtosPriority>
 800bb12:	4602      	mov	r2, r0
 800bb14:	f107 030c 	add.w	r3, r7, #12
 800bb18:	9301      	str	r3, [sp, #4]
 800bb1a:	9200      	str	r2, [sp, #0]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	4632      	mov	r2, r6
 800bb20:	4629      	mov	r1, r5
 800bb22:	4620      	mov	r0, r4
 800bb24:	f001 f925 	bl	800cd72 <xTaskCreate>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d001      	beq.n	800bb32 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e000      	b.n	800bb34 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bb32:	68fb      	ldr	r3, [r7, #12]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb3c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <osDelay+0x16>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	e000      	b.n	800bb54 <osDelay+0x18>
 800bb52:	2301      	movs	r3, #1
 800bb54:	4618      	mov	r0, r3
 800bb56:	f001 fa4f 	bl	800cff8 <vTaskDelay>
  
  return osOK;
 800bb5a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bb64:	b590      	push	{r4, r7, lr}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d012      	beq.n	800bb9c <osMessageCreate+0x38>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00e      	beq.n	800bb9c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6818      	ldr	r0, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6859      	ldr	r1, [r3, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	689a      	ldr	r2, [r3, #8]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68dc      	ldr	r4, [r3, #12]
 800bb8e:	2300      	movs	r3, #0
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	4623      	mov	r3, r4
 800bb94:	f000 f9e2 	bl	800bf5c <xQueueGenericCreateStatic>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	e008      	b.n	800bbae <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6818      	ldr	r0, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	4619      	mov	r1, r3
 800bba8:	f000 fa55 	bl	800c056 <xQueueGenericCreate>
 800bbac:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd90      	pop	{r4, r7, pc}
	...

0800bbb8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d101      	bne.n	800bbd6 <osMessagePut+0x1e>
    ticks = 1;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bbd6:	f7ff ff30 	bl	800ba3a <inHandlerMode>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d018      	beq.n	800bc12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bbe0:	f107 0210 	add.w	r2, r7, #16
 800bbe4:	f107 0108 	add.w	r1, r7, #8
 800bbe8:	2300      	movs	r3, #0
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f000 fb96 	bl	800c31c <xQueueGenericSendFromISR>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d001      	beq.n	800bbfa <osMessagePut+0x42>
      return osErrorOS;
 800bbf6:	23ff      	movs	r3, #255	; 0xff
 800bbf8:	e018      	b.n	800bc2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d014      	beq.n	800bc2a <osMessagePut+0x72>
 800bc00:	4b0c      	ldr	r3, [pc, #48]	; (800bc34 <osMessagePut+0x7c>)
 800bc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	e00b      	b.n	800bc2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bc12:	f107 0108 	add.w	r1, r7, #8
 800bc16:	2300      	movs	r3, #0
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f000 fa7c 	bl	800c118 <xQueueGenericSend>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d001      	beq.n	800bc2a <osMessagePut+0x72>
      return osErrorOS;
 800bc26:	23ff      	movs	r3, #255	; 0xff
 800bc28:	e000      	b.n	800bc2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3718      	adds	r7, #24
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	e000ed04 	.word	0xe000ed04

0800bc38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b08b      	sub	sp, #44	; 0x2c
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10a      	bne.n	800bc68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bc52:	2380      	movs	r3, #128	; 0x80
 800bc54:	617b      	str	r3, [r7, #20]
    return event;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	461c      	mov	r4, r3
 800bc5a:	f107 0314 	add.w	r3, r7, #20
 800bc5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bc66:	e054      	b.n	800bd12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc76:	d103      	bne.n	800bc80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bc78:	f04f 33ff 	mov.w	r3, #4294967295
 800bc7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc7e:	e009      	b.n	800bc94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d006      	beq.n	800bc94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <osMessageGet+0x5c>
      ticks = 1;
 800bc90:	2301      	movs	r3, #1
 800bc92:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bc94:	f7ff fed1 	bl	800ba3a <inHandlerMode>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d01c      	beq.n	800bcd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bc9e:	f107 0220 	add.w	r2, r7, #32
 800bca2:	f107 0314 	add.w	r3, r7, #20
 800bca6:	3304      	adds	r3, #4
 800bca8:	4619      	mov	r1, r3
 800bcaa:	68b8      	ldr	r0, [r7, #8]
 800bcac:	f000 fe56 	bl	800c95c <xQueueReceiveFromISR>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d102      	bne.n	800bcbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bcb6:	2310      	movs	r3, #16
 800bcb8:	617b      	str	r3, [r7, #20]
 800bcba:	e001      	b.n	800bcc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d01d      	beq.n	800bd02 <osMessageGet+0xca>
 800bcc6:	4b15      	ldr	r3, [pc, #84]	; (800bd1c <osMessageGet+0xe4>)
 800bcc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	e014      	b.n	800bd02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bcd8:	f107 0314 	add.w	r3, r7, #20
 800bcdc:	3304      	adds	r3, #4
 800bcde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bce0:	4619      	mov	r1, r3
 800bce2:	68b8      	ldr	r0, [r7, #8]
 800bce4:	f000 fc48 	bl	800c578 <xQueueReceive>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d102      	bne.n	800bcf4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bcee:	2310      	movs	r3, #16
 800bcf0:	617b      	str	r3, [r7, #20]
 800bcf2:	e006      	b.n	800bd02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d101      	bne.n	800bcfe <osMessageGet+0xc6>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e000      	b.n	800bd00 <osMessageGet+0xc8>
 800bcfe:	2340      	movs	r3, #64	; 0x40
 800bd00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	461c      	mov	r4, r3
 800bd06:	f107 0314 	add.w	r3, r7, #20
 800bd0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	372c      	adds	r7, #44	; 0x2c
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd90      	pop	{r4, r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	e000ed04 	.word	0xe000ed04

0800bd20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f103 0208 	add.w	r2, r3, #8
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f04f 32ff 	mov.w	r2, #4294967295
 800bd38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f103 0208 	add.w	r2, r3, #8
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f103 0208 	add.w	r2, r3, #8
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bd6e:	bf00      	nop
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b085      	sub	sp, #20
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
 800bd82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	689a      	ldr	r2, [r3, #8]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	1c5a      	adds	r2, r3, #1
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	601a      	str	r2, [r3, #0]
}
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdc2:	b480      	push	{r7}
 800bdc4:	b085      	sub	sp, #20
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd8:	d103      	bne.n	800bde2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	e00c      	b.n	800bdfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	3308      	adds	r3, #8
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	e002      	b.n	800bdf0 <vListInsert+0x2e>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	60fb      	str	r3, [r7, #12]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d2f6      	bcs.n	800bdea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	1c5a      	adds	r2, r3, #1
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	601a      	str	r2, [r3, #0]
}
 800be28:	bf00      	nop
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	6892      	ldr	r2, [r2, #8]
 800be4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	6852      	ldr	r2, [r2, #4]
 800be54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d103      	bne.n	800be68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	689a      	ldr	r2, [r3, #8]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	1e5a      	subs	r2, r3, #1
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10b      	bne.n	800beb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	b672      	cpsid	i
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	b662      	cpsie	i
 800beb0:	60bb      	str	r3, [r7, #8]
 800beb2:	e7fe      	b.n	800beb2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800beb4:	f002 f870 	bl	800df98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec0:	68f9      	ldr	r1, [r7, #12]
 800bec2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bec4:	fb01 f303 	mul.w	r3, r1, r3
 800bec8:	441a      	add	r2, r3
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2200      	movs	r2, #0
 800bed2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee4:	3b01      	subs	r3, #1
 800bee6:	68f9      	ldr	r1, [r7, #12]
 800bee8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800beea:	fb01 f303 	mul.w	r3, r1, r3
 800beee:	441a      	add	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	22ff      	movs	r2, #255	; 0xff
 800bef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	22ff      	movs	r2, #255	; 0xff
 800bf00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d114      	bne.n	800bf34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d01a      	beq.n	800bf48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3310      	adds	r3, #16
 800bf16:	4618      	mov	r0, r3
 800bf18:	f001 fb36 	bl	800d588 <xTaskRemoveFromEventList>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d012      	beq.n	800bf48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf22:	4b0d      	ldr	r3, [pc, #52]	; (800bf58 <xQueueGenericReset+0xd0>)
 800bf24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf28:	601a      	str	r2, [r3, #0]
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	e009      	b.n	800bf48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	3310      	adds	r3, #16
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff fef1 	bl	800bd20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3324      	adds	r3, #36	; 0x24
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7ff feec 	bl	800bd20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bf48:	f002 f858 	bl	800dffc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bf4c:	2301      	movs	r3, #1
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	e000ed04 	.word	0xe000ed04

0800bf5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08e      	sub	sp, #56	; 0x38
 800bf60:	af02      	add	r7, sp, #8
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10b      	bne.n	800bf88 <xQueueGenericCreateStatic+0x2c>
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	b672      	cpsid	i
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	b662      	cpsie	i
 800bf84:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf86:	e7fe      	b.n	800bf86 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10b      	bne.n	800bfa6 <xQueueGenericCreateStatic+0x4a>
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	b672      	cpsid	i
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	b662      	cpsie	i
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
 800bfa4:	e7fe      	b.n	800bfa4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <xQueueGenericCreateStatic+0x56>
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <xQueueGenericCreateStatic+0x5a>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e000      	b.n	800bfb8 <xQueueGenericCreateStatic+0x5c>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10b      	bne.n	800bfd4 <xQueueGenericCreateStatic+0x78>
 800bfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc0:	b672      	cpsid	i
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	b662      	cpsie	i
 800bfd0:	623b      	str	r3, [r7, #32]
 800bfd2:	e7fe      	b.n	800bfd2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d102      	bne.n	800bfe0 <xQueueGenericCreateStatic+0x84>
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d101      	bne.n	800bfe4 <xQueueGenericCreateStatic+0x88>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e000      	b.n	800bfe6 <xQueueGenericCreateStatic+0x8a>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10b      	bne.n	800c002 <xQueueGenericCreateStatic+0xa6>
 800bfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfee:	b672      	cpsid	i
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	b662      	cpsie	i
 800bffe:	61fb      	str	r3, [r7, #28]
 800c000:	e7fe      	b.n	800c000 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c002:	2348      	movs	r3, #72	; 0x48
 800c004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	2b48      	cmp	r3, #72	; 0x48
 800c00a:	d00b      	beq.n	800c024 <xQueueGenericCreateStatic+0xc8>
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	b672      	cpsid	i
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	b662      	cpsie	i
 800c020:	61bb      	str	r3, [r7, #24]
 800c022:	e7fe      	b.n	800c022 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c024:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00d      	beq.n	800c04c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c038:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	4613      	mov	r3, r2
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	68b9      	ldr	r1, [r7, #8]
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f000 f846 	bl	800c0d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c04e:	4618      	mov	r0, r3
 800c050:	3730      	adds	r7, #48	; 0x30
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c056:	b580      	push	{r7, lr}
 800c058:	b08a      	sub	sp, #40	; 0x28
 800c05a:	af02      	add	r7, sp, #8
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	60b9      	str	r1, [r7, #8]
 800c060:	4613      	mov	r3, r2
 800c062:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10b      	bne.n	800c082 <xQueueGenericCreate+0x2c>
 800c06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06e:	b672      	cpsid	i
 800c070:	f383 8811 	msr	BASEPRI, r3
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	b662      	cpsie	i
 800c07e:	613b      	str	r3, [r7, #16]
 800c080:	e7fe      	b.n	800c080 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d102      	bne.n	800c08e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c088:	2300      	movs	r3, #0
 800c08a:	61fb      	str	r3, [r7, #28]
 800c08c:	e004      	b.n	800c098 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	fb02 f303 	mul.w	r3, r2, r3
 800c096:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	3348      	adds	r3, #72	; 0x48
 800c09c:	4618      	mov	r0, r3
 800c09e:	f002 f89d 	bl	800e1dc <pvPortMalloc>
 800c0a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d011      	beq.n	800c0ce <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	3348      	adds	r3, #72	; 0x48
 800c0b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c0bc:	79fa      	ldrb	r2, [r7, #7]
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f000 f805 	bl	800c0d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0ce:	69bb      	ldr	r3, [r7, #24]
	}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3720      	adds	r7, #32
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d103      	bne.n	800c0f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	69ba      	ldr	r2, [r7, #24]
 800c0f0:	601a      	str	r2, [r3, #0]
 800c0f2:	e002      	b.n	800c0fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c106:	2101      	movs	r1, #1
 800c108:	69b8      	ldr	r0, [r7, #24]
 800c10a:	f7ff febd 	bl	800be88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c10e:	bf00      	nop
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
	...

0800c118 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08e      	sub	sp, #56	; 0x38
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
 800c124:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c126:	2300      	movs	r3, #0
 800c128:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10b      	bne.n	800c14c <xQueueGenericSend+0x34>
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	b672      	cpsid	i
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	b662      	cpsie	i
 800c148:	62bb      	str	r3, [r7, #40]	; 0x28
 800c14a:	e7fe      	b.n	800c14a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d103      	bne.n	800c15a <xQueueGenericSend+0x42>
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c156:	2b00      	cmp	r3, #0
 800c158:	d101      	bne.n	800c15e <xQueueGenericSend+0x46>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e000      	b.n	800c160 <xQueueGenericSend+0x48>
 800c15e:	2300      	movs	r3, #0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10b      	bne.n	800c17c <xQueueGenericSend+0x64>
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	b672      	cpsid	i
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	b662      	cpsie	i
 800c178:	627b      	str	r3, [r7, #36]	; 0x24
 800c17a:	e7fe      	b.n	800c17a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d103      	bne.n	800c18a <xQueueGenericSend+0x72>
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c186:	2b01      	cmp	r3, #1
 800c188:	d101      	bne.n	800c18e <xQueueGenericSend+0x76>
 800c18a:	2301      	movs	r3, #1
 800c18c:	e000      	b.n	800c190 <xQueueGenericSend+0x78>
 800c18e:	2300      	movs	r3, #0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10b      	bne.n	800c1ac <xQueueGenericSend+0x94>
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	b672      	cpsid	i
 800c19a:	f383 8811 	msr	BASEPRI, r3
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f3bf 8f4f 	dsb	sy
 800c1a6:	b662      	cpsie	i
 800c1a8:	623b      	str	r3, [r7, #32]
 800c1aa:	e7fe      	b.n	800c1aa <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1ac:	f001 fbac 	bl	800d908 <xTaskGetSchedulerState>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d102      	bne.n	800c1bc <xQueueGenericSend+0xa4>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <xQueueGenericSend+0xa8>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e000      	b.n	800c1c2 <xQueueGenericSend+0xaa>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10b      	bne.n	800c1de <xQueueGenericSend+0xc6>
 800c1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ca:	b672      	cpsid	i
 800c1cc:	f383 8811 	msr	BASEPRI, r3
 800c1d0:	f3bf 8f6f 	isb	sy
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	b662      	cpsie	i
 800c1da:	61fb      	str	r3, [r7, #28]
 800c1dc:	e7fe      	b.n	800c1dc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1de:	f001 fedb 	bl	800df98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d302      	bcc.n	800c1f4 <xQueueGenericSend+0xdc>
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d129      	bne.n	800c248 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1f4:	683a      	ldr	r2, [r7, #0]
 800c1f6:	68b9      	ldr	r1, [r7, #8]
 800c1f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1fa:	f000 fc4a 	bl	800ca92 <prvCopyDataToQueue>
 800c1fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c204:	2b00      	cmp	r3, #0
 800c206:	d010      	beq.n	800c22a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20a:	3324      	adds	r3, #36	; 0x24
 800c20c:	4618      	mov	r0, r3
 800c20e:	f001 f9bb 	bl	800d588 <xTaskRemoveFromEventList>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d013      	beq.n	800c240 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c218:	4b3f      	ldr	r3, [pc, #252]	; (800c318 <xQueueGenericSend+0x200>)
 800c21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c21e:	601a      	str	r2, [r3, #0]
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	e00a      	b.n	800c240 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d007      	beq.n	800c240 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c230:	4b39      	ldr	r3, [pc, #228]	; (800c318 <xQueueGenericSend+0x200>)
 800c232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c236:	601a      	str	r2, [r3, #0]
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c240:	f001 fedc 	bl	800dffc <vPortExitCritical>
				return pdPASS;
 800c244:	2301      	movs	r3, #1
 800c246:	e063      	b.n	800c310 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d103      	bne.n	800c256 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c24e:	f001 fed5 	bl	800dffc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c252:	2300      	movs	r3, #0
 800c254:	e05c      	b.n	800c310 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d106      	bne.n	800c26a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c25c:	f107 0314 	add.w	r3, r7, #20
 800c260:	4618      	mov	r0, r3
 800c262:	f001 f9f5 	bl	800d650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c266:	2301      	movs	r3, #1
 800c268:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c26a:	f001 fec7 	bl	800dffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c26e:	f000 ff5b 	bl	800d128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c272:	f001 fe91 	bl	800df98 <vPortEnterCritical>
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c27c:	b25b      	sxtb	r3, r3
 800c27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c282:	d103      	bne.n	800c28c <xQueueGenericSend+0x174>
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	2200      	movs	r2, #0
 800c288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c292:	b25b      	sxtb	r3, r3
 800c294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c298:	d103      	bne.n	800c2a2 <xQueueGenericSend+0x18a>
 800c29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2a2:	f001 feab 	bl	800dffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2a6:	1d3a      	adds	r2, r7, #4
 800c2a8:	f107 0314 	add.w	r3, r7, #20
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f001 f9e4 	bl	800d67c <xTaskCheckForTimeOut>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d124      	bne.n	800c304 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c2ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2bc:	f000 fce1 	bl	800cc82 <prvIsQueueFull>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d018      	beq.n	800c2f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	3310      	adds	r3, #16
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f001 f934 	bl	800d53c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c2d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2d6:	f000 fc6c 	bl	800cbb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c2da:	f000 ff33 	bl	800d144 <xTaskResumeAll>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f47f af7c 	bne.w	800c1de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <xQueueGenericSend+0x200>)
 800c2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	e772      	b.n	800c1de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2fa:	f000 fc5a 	bl	800cbb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2fe:	f000 ff21 	bl	800d144 <xTaskResumeAll>
 800c302:	e76c      	b.n	800c1de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c306:	f000 fc54 	bl	800cbb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c30a:	f000 ff1b 	bl	800d144 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c30e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c310:	4618      	mov	r0, r3
 800c312:	3738      	adds	r7, #56	; 0x38
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	e000ed04 	.word	0xe000ed04

0800c31c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08e      	sub	sp, #56	; 0x38
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
 800c328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10b      	bne.n	800c34c <xQueueGenericSendFromISR+0x30>
 800c334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c338:	b672      	cpsid	i
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	b662      	cpsie	i
 800c348:	627b      	str	r3, [r7, #36]	; 0x24
 800c34a:	e7fe      	b.n	800c34a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d103      	bne.n	800c35a <xQueueGenericSendFromISR+0x3e>
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c356:	2b00      	cmp	r3, #0
 800c358:	d101      	bne.n	800c35e <xQueueGenericSendFromISR+0x42>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e000      	b.n	800c360 <xQueueGenericSendFromISR+0x44>
 800c35e:	2300      	movs	r3, #0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d10b      	bne.n	800c37c <xQueueGenericSendFromISR+0x60>
 800c364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c368:	b672      	cpsid	i
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	b662      	cpsie	i
 800c378:	623b      	str	r3, [r7, #32]
 800c37a:	e7fe      	b.n	800c37a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d103      	bne.n	800c38a <xQueueGenericSendFromISR+0x6e>
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c386:	2b01      	cmp	r3, #1
 800c388:	d101      	bne.n	800c38e <xQueueGenericSendFromISR+0x72>
 800c38a:	2301      	movs	r3, #1
 800c38c:	e000      	b.n	800c390 <xQueueGenericSendFromISR+0x74>
 800c38e:	2300      	movs	r3, #0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10b      	bne.n	800c3ac <xQueueGenericSendFromISR+0x90>
 800c394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c398:	b672      	cpsid	i
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	b662      	cpsie	i
 800c3a8:	61fb      	str	r3, [r7, #28]
 800c3aa:	e7fe      	b.n	800c3aa <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3ac:	f001 fed4 	bl	800e158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c3b0:	f3ef 8211 	mrs	r2, BASEPRI
 800c3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b8:	b672      	cpsid	i
 800c3ba:	f383 8811 	msr	BASEPRI, r3
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f3bf 8f4f 	dsb	sy
 800c3c6:	b662      	cpsie	i
 800c3c8:	61ba      	str	r2, [r7, #24]
 800c3ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c3cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d302      	bcc.n	800c3e2 <xQueueGenericSendFromISR+0xc6>
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2b02      	cmp	r3, #2
 800c3e0:	d12c      	bne.n	800c43c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	68b9      	ldr	r1, [r7, #8]
 800c3f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3f2:	f000 fb4e 	bl	800ca92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fe:	d112      	bne.n	800c426 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c404:	2b00      	cmp	r3, #0
 800c406:	d016      	beq.n	800c436 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	3324      	adds	r3, #36	; 0x24
 800c40c:	4618      	mov	r0, r3
 800c40e:	f001 f8bb 	bl	800d588 <xTaskRemoveFromEventList>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00e      	beq.n	800c436 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00b      	beq.n	800c436 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	e007      	b.n	800c436 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c426:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c42a:	3301      	adds	r3, #1
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	b25a      	sxtb	r2, r3
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c436:	2301      	movs	r3, #1
 800c438:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c43a:	e001      	b.n	800c440 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c43c:	2300      	movs	r3, #0
 800c43e:	637b      	str	r3, [r7, #52]	; 0x34
 800c440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c442:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3738      	adds	r7, #56	; 0x38
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b08e      	sub	sp, #56	; 0x38
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10b      	bne.n	800c480 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46c:	b672      	cpsid	i
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	b662      	cpsie	i
 800c47c:	623b      	str	r3, [r7, #32]
 800c47e:	e7fe      	b.n	800c47e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00b      	beq.n	800c4a0 <xQueueGiveFromISR+0x4c>
 800c488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48c:	b672      	cpsid	i
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	b662      	cpsie	i
 800c49c:	61fb      	str	r3, [r7, #28]
 800c49e:	e7fe      	b.n	800c49e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d103      	bne.n	800c4b0 <xQueueGiveFromISR+0x5c>
 800c4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d101      	bne.n	800c4b4 <xQueueGiveFromISR+0x60>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e000      	b.n	800c4b6 <xQueueGiveFromISR+0x62>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10b      	bne.n	800c4d2 <xQueueGiveFromISR+0x7e>
 800c4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4be:	b672      	cpsid	i
 800c4c0:	f383 8811 	msr	BASEPRI, r3
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	b662      	cpsie	i
 800c4ce:	61bb      	str	r3, [r7, #24]
 800c4d0:	e7fe      	b.n	800c4d0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4d2:	f001 fe41 	bl	800e158 <vPortValidateInterruptPriority>
	__asm volatile
 800c4d6:	f3ef 8211 	mrs	r2, BASEPRI
 800c4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4de:	b672      	cpsid	i
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	b662      	cpsie	i
 800c4ee:	617a      	str	r2, [r7, #20]
 800c4f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c4f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c502:	429a      	cmp	r2, r3
 800c504:	d22b      	bcs.n	800c55e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c516:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c518:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c520:	d112      	bne.n	800c548 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c526:	2b00      	cmp	r3, #0
 800c528:	d016      	beq.n	800c558 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	3324      	adds	r3, #36	; 0x24
 800c52e:	4618      	mov	r0, r3
 800c530:	f001 f82a 	bl	800d588 <xTaskRemoveFromEventList>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00e      	beq.n	800c558 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00b      	beq.n	800c558 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2201      	movs	r2, #1
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	e007      	b.n	800c558 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c54c:	3301      	adds	r3, #1
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	b25a      	sxtb	r2, r3
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c558:	2301      	movs	r3, #1
 800c55a:	637b      	str	r3, [r7, #52]	; 0x34
 800c55c:	e001      	b.n	800c562 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c55e:	2300      	movs	r3, #0
 800c560:	637b      	str	r3, [r7, #52]	; 0x34
 800c562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c564:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3738      	adds	r7, #56	; 0x38
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b08c      	sub	sp, #48	; 0x30
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c584:	2300      	movs	r3, #0
 800c586:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d10b      	bne.n	800c5aa <xQueueReceive+0x32>
	__asm volatile
 800c592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c596:	b672      	cpsid	i
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	b662      	cpsie	i
 800c5a6:	623b      	str	r3, [r7, #32]
 800c5a8:	e7fe      	b.n	800c5a8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d103      	bne.n	800c5b8 <xQueueReceive+0x40>
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <xQueueReceive+0x44>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e000      	b.n	800c5be <xQueueReceive+0x46>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10b      	bne.n	800c5da <xQueueReceive+0x62>
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	b672      	cpsid	i
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	b662      	cpsie	i
 800c5d6:	61fb      	str	r3, [r7, #28]
 800c5d8:	e7fe      	b.n	800c5d8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5da:	f001 f995 	bl	800d908 <xTaskGetSchedulerState>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d102      	bne.n	800c5ea <xQueueReceive+0x72>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d101      	bne.n	800c5ee <xQueueReceive+0x76>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e000      	b.n	800c5f0 <xQueueReceive+0x78>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10b      	bne.n	800c60c <xQueueReceive+0x94>
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	b672      	cpsid	i
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	b662      	cpsie	i
 800c608:	61bb      	str	r3, [r7, #24]
 800c60a:	e7fe      	b.n	800c60a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c60c:	f001 fcc4 	bl	800df98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c614:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d01f      	beq.n	800c65c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c61c:	68b9      	ldr	r1, [r7, #8]
 800c61e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c620:	f000 faa1 	bl	800cb66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	1e5a      	subs	r2, r3, #1
 800c628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62e:	691b      	ldr	r3, [r3, #16]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00f      	beq.n	800c654 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c636:	3310      	adds	r3, #16
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 ffa5 	bl	800d588 <xTaskRemoveFromEventList>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d007      	beq.n	800c654 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c644:	4b3c      	ldr	r3, [pc, #240]	; (800c738 <xQueueReceive+0x1c0>)
 800c646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c654:	f001 fcd2 	bl	800dffc <vPortExitCritical>
				return pdPASS;
 800c658:	2301      	movs	r3, #1
 800c65a:	e069      	b.n	800c730 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d103      	bne.n	800c66a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c662:	f001 fccb 	bl	800dffc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c666:	2300      	movs	r3, #0
 800c668:	e062      	b.n	800c730 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d106      	bne.n	800c67e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c670:	f107 0310 	add.w	r3, r7, #16
 800c674:	4618      	mov	r0, r3
 800c676:	f000 ffeb 	bl	800d650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c67a:	2301      	movs	r3, #1
 800c67c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c67e:	f001 fcbd 	bl	800dffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c682:	f000 fd51 	bl	800d128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c686:	f001 fc87 	bl	800df98 <vPortEnterCritical>
 800c68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c690:	b25b      	sxtb	r3, r3
 800c692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c696:	d103      	bne.n	800c6a0 <xQueueReceive+0x128>
 800c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69a:	2200      	movs	r2, #0
 800c69c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6a6:	b25b      	sxtb	r3, r3
 800c6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ac:	d103      	bne.n	800c6b6 <xQueueReceive+0x13e>
 800c6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6b6:	f001 fca1 	bl	800dffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6ba:	1d3a      	adds	r2, r7, #4
 800c6bc:	f107 0310 	add.w	r3, r7, #16
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f000 ffda 	bl	800d67c <xTaskCheckForTimeOut>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d123      	bne.n	800c716 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6d0:	f000 fac1 	bl	800cc56 <prvIsQueueEmpty>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d017      	beq.n	800c70a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6dc:	3324      	adds	r3, #36	; 0x24
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f000 ff2a 	bl	800d53c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ea:	f000 fa62 	bl	800cbb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6ee:	f000 fd29 	bl	800d144 <xTaskResumeAll>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d189      	bne.n	800c60c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <xQueueReceive+0x1c0>)
 800c6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6fe:	601a      	str	r2, [r3, #0]
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	e780      	b.n	800c60c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c70a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c70c:	f000 fa51 	bl	800cbb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c710:	f000 fd18 	bl	800d144 <xTaskResumeAll>
 800c714:	e77a      	b.n	800c60c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c718:	f000 fa4b 	bl	800cbb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c71c:	f000 fd12 	bl	800d144 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c722:	f000 fa98 	bl	800cc56 <prvIsQueueEmpty>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f43f af6f 	beq.w	800c60c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c72e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c730:	4618      	mov	r0, r3
 800c732:	3730      	adds	r7, #48	; 0x30
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	e000ed04 	.word	0xe000ed04

0800c73c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b08e      	sub	sp, #56	; 0x38
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c746:	2300      	movs	r3, #0
 800c748:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c74e:	2300      	movs	r3, #0
 800c750:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10b      	bne.n	800c770 <xQueueSemaphoreTake+0x34>
 800c758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75c:	b672      	cpsid	i
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	b662      	cpsie	i
 800c76c:	623b      	str	r3, [r7, #32]
 800c76e:	e7fe      	b.n	800c76e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00b      	beq.n	800c790 <xQueueSemaphoreTake+0x54>
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	b672      	cpsid	i
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	b662      	cpsie	i
 800c78c:	61fb      	str	r3, [r7, #28]
 800c78e:	e7fe      	b.n	800c78e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c790:	f001 f8ba 	bl	800d908 <xTaskGetSchedulerState>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d102      	bne.n	800c7a0 <xQueueSemaphoreTake+0x64>
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d101      	bne.n	800c7a4 <xQueueSemaphoreTake+0x68>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e000      	b.n	800c7a6 <xQueueSemaphoreTake+0x6a>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10b      	bne.n	800c7c2 <xQueueSemaphoreTake+0x86>
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	b672      	cpsid	i
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	b662      	cpsie	i
 800c7be:	61bb      	str	r3, [r7, #24]
 800c7c0:	e7fe      	b.n	800c7c0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7c2:	f001 fbe9 	bl	800df98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d024      	beq.n	800c81c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d4:	1e5a      	subs	r2, r3, #1
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d104      	bne.n	800c7ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c7e2:	f001 fa53 	bl	800dc8c <pvTaskIncrementMutexHeldCount>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00f      	beq.n	800c814 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	3310      	adds	r3, #16
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 fec5 	bl	800d588 <xTaskRemoveFromEventList>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d007      	beq.n	800c814 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c804:	4b54      	ldr	r3, [pc, #336]	; (800c958 <xQueueSemaphoreTake+0x21c>)
 800c806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c80a:	601a      	str	r2, [r3, #0]
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c814:	f001 fbf2 	bl	800dffc <vPortExitCritical>
				return pdPASS;
 800c818:	2301      	movs	r3, #1
 800c81a:	e098      	b.n	800c94e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d112      	bne.n	800c848 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00b      	beq.n	800c840 <xQueueSemaphoreTake+0x104>
 800c828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82c:	b672      	cpsid	i
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	b662      	cpsie	i
 800c83c:	617b      	str	r3, [r7, #20]
 800c83e:	e7fe      	b.n	800c83e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c840:	f001 fbdc 	bl	800dffc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c844:	2300      	movs	r3, #0
 800c846:	e082      	b.n	800c94e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d106      	bne.n	800c85c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c84e:	f107 030c 	add.w	r3, r7, #12
 800c852:	4618      	mov	r0, r3
 800c854:	f000 fefc 	bl	800d650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c858:	2301      	movs	r3, #1
 800c85a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c85c:	f001 fbce 	bl	800dffc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c860:	f000 fc62 	bl	800d128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c864:	f001 fb98 	bl	800df98 <vPortEnterCritical>
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c86e:	b25b      	sxtb	r3, r3
 800c870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c874:	d103      	bne.n	800c87e <xQueueSemaphoreTake+0x142>
 800c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c878:	2200      	movs	r2, #0
 800c87a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c884:	b25b      	sxtb	r3, r3
 800c886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88a:	d103      	bne.n	800c894 <xQueueSemaphoreTake+0x158>
 800c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88e:	2200      	movs	r2, #0
 800c890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c894:	f001 fbb2 	bl	800dffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c898:	463a      	mov	r2, r7
 800c89a:	f107 030c 	add.w	r3, r7, #12
 800c89e:	4611      	mov	r1, r2
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 feeb 	bl	800d67c <xTaskCheckForTimeOut>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d132      	bne.n	800c912 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8ae:	f000 f9d2 	bl	800cc56 <prvIsQueueEmpty>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d026      	beq.n	800c906 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d109      	bne.n	800c8d4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c8c0:	f001 fb6a 	bl	800df98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f001 f83b 	bl	800d944 <xTaskPriorityInherit>
 800c8ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c8d0:	f001 fb94 	bl	800dffc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d6:	3324      	adds	r3, #36	; 0x24
 800c8d8:	683a      	ldr	r2, [r7, #0]
 800c8da:	4611      	mov	r1, r2
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f000 fe2d 	bl	800d53c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8e4:	f000 f965 	bl	800cbb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8e8:	f000 fc2c 	bl	800d144 <xTaskResumeAll>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f47f af67 	bne.w	800c7c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c8f4:	4b18      	ldr	r3, [pc, #96]	; (800c958 <xQueueSemaphoreTake+0x21c>)
 800c8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8fa:	601a      	str	r2, [r3, #0]
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	e75d      	b.n	800c7c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c908:	f000 f953 	bl	800cbb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c90c:	f000 fc1a 	bl	800d144 <xTaskResumeAll>
 800c910:	e757      	b.n	800c7c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c914:	f000 f94d 	bl	800cbb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c918:	f000 fc14 	bl	800d144 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c91c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c91e:	f000 f99a 	bl	800cc56 <prvIsQueueEmpty>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	f43f af4c 	beq.w	800c7c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00d      	beq.n	800c94c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c930:	f001 fb32 	bl	800df98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c936:	f000 f894 	bl	800ca62 <prvGetDisinheritPriorityAfterTimeout>
 800c93a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c942:	4618      	mov	r0, r3
 800c944:	f001 f906 	bl	800db54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c948:	f001 fb58 	bl	800dffc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c94c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3738      	adds	r7, #56	; 0x38
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	e000ed04 	.word	0xe000ed04

0800c95c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b08e      	sub	sp, #56	; 0x38
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10b      	bne.n	800c98a <xQueueReceiveFromISR+0x2e>
 800c972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c976:	b672      	cpsid	i
 800c978:	f383 8811 	msr	BASEPRI, r3
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	b662      	cpsie	i
 800c986:	623b      	str	r3, [r7, #32]
 800c988:	e7fe      	b.n	800c988 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d103      	bne.n	800c998 <xQueueReceiveFromISR+0x3c>
 800c990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c994:	2b00      	cmp	r3, #0
 800c996:	d101      	bne.n	800c99c <xQueueReceiveFromISR+0x40>
 800c998:	2301      	movs	r3, #1
 800c99a:	e000      	b.n	800c99e <xQueueReceiveFromISR+0x42>
 800c99c:	2300      	movs	r3, #0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10b      	bne.n	800c9ba <xQueueReceiveFromISR+0x5e>
 800c9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a6:	b672      	cpsid	i
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	b662      	cpsie	i
 800c9b6:	61fb      	str	r3, [r7, #28]
 800c9b8:	e7fe      	b.n	800c9b8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9ba:	f001 fbcd 	bl	800e158 <vPortValidateInterruptPriority>
	__asm volatile
 800c9be:	f3ef 8211 	mrs	r2, BASEPRI
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	b672      	cpsid	i
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	b662      	cpsie	i
 800c9d6:	61ba      	str	r2, [r7, #24]
 800c9d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c9da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d02f      	beq.n	800ca4a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9f4:	68b9      	ldr	r1, [r7, #8]
 800c9f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9f8:	f000 f8b5 	bl	800cb66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	1e5a      	subs	r2, r3, #1
 800ca00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ca04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca0c:	d112      	bne.n	800ca34 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d016      	beq.n	800ca44 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca18:	3310      	adds	r3, #16
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 fdb4 	bl	800d588 <xTaskRemoveFromEventList>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00e      	beq.n	800ca44 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00b      	beq.n	800ca44 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	e007      	b.n	800ca44 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ca34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca38:	3301      	adds	r3, #1
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	b25a      	sxtb	r2, r3
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ca44:	2301      	movs	r3, #1
 800ca46:	637b      	str	r3, [r7, #52]	; 0x34
 800ca48:	e001      	b.n	800ca4e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ca4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca50:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3738      	adds	r7, #56	; 0x38
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ca62:	b480      	push	{r7}
 800ca64:	b085      	sub	sp, #20
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d006      	beq.n	800ca80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f1c3 0307 	rsb	r3, r3, #7
 800ca7c:	60fb      	str	r3, [r7, #12]
 800ca7e:	e001      	b.n	800ca84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ca80:	2300      	movs	r3, #0
 800ca82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ca84:	68fb      	ldr	r3, [r7, #12]
	}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b086      	sub	sp, #24
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	60f8      	str	r0, [r7, #12]
 800ca9a:	60b9      	str	r1, [r7, #8]
 800ca9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10d      	bne.n	800cacc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d14d      	bne.n	800cb54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f000 ffc1 	bl	800da44 <xTaskPriorityDisinherit>
 800cac2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2200      	movs	r2, #0
 800cac8:	609a      	str	r2, [r3, #8]
 800caca:	e043      	b.n	800cb54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d119      	bne.n	800cb06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6858      	ldr	r0, [r3, #4]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cada:	461a      	mov	r2, r3
 800cadc:	68b9      	ldr	r1, [r7, #8]
 800cade:	f017 fa41 	bl	8023f64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	685a      	ldr	r2, [r3, #4]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caea:	441a      	add	r2, r3
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	685a      	ldr	r2, [r3, #4]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d32b      	bcc.n	800cb54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	605a      	str	r2, [r3, #4]
 800cb04:	e026      	b.n	800cb54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	68d8      	ldr	r0, [r3, #12]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0e:	461a      	mov	r2, r3
 800cb10:	68b9      	ldr	r1, [r7, #8]
 800cb12:	f017 fa27 	bl	8023f64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	68da      	ldr	r2, [r3, #12]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1e:	425b      	negs	r3, r3
 800cb20:	441a      	add	r2, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	68da      	ldr	r2, [r3, #12]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d207      	bcs.n	800cb42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	689a      	ldr	r2, [r3, #8]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3a:	425b      	negs	r3, r3
 800cb3c:	441a      	add	r2, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	d105      	bne.n	800cb54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d002      	beq.n	800cb54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cb5c:	697b      	ldr	r3, [r7, #20]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b082      	sub	sp, #8
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d018      	beq.n	800cbaa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	68da      	ldr	r2, [r3, #12]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb80:	441a      	add	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	68da      	ldr	r2, [r3, #12]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d303      	bcc.n	800cb9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	68d9      	ldr	r1, [r3, #12]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba2:	461a      	mov	r2, r3
 800cba4:	6838      	ldr	r0, [r7, #0]
 800cba6:	f017 f9dd 	bl	8023f64 <memcpy>
	}
}
 800cbaa:	bf00      	nop
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b084      	sub	sp, #16
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cbba:	f001 f9ed 	bl	800df98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbc6:	e011      	b.n	800cbec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d012      	beq.n	800cbf6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	3324      	adds	r3, #36	; 0x24
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f000 fcd7 	bl	800d588 <xTaskRemoveFromEventList>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cbe0:	f000 fdb0 	bl	800d744 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	dce9      	bgt.n	800cbc8 <prvUnlockQueue+0x16>
 800cbf4:	e000      	b.n	800cbf8 <prvUnlockQueue+0x46>
					break;
 800cbf6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	22ff      	movs	r2, #255	; 0xff
 800cbfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cc00:	f001 f9fc 	bl	800dffc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc04:	f001 f9c8 	bl	800df98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc10:	e011      	b.n	800cc36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d012      	beq.n	800cc40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	3310      	adds	r3, #16
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 fcb2 	bl	800d588 <xTaskRemoveFromEventList>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cc2a:	f000 fd8b 	bl	800d744 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cc2e:	7bbb      	ldrb	r3, [r7, #14]
 800cc30:	3b01      	subs	r3, #1
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	dce9      	bgt.n	800cc12 <prvUnlockQueue+0x60>
 800cc3e:	e000      	b.n	800cc42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cc40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	22ff      	movs	r2, #255	; 0xff
 800cc46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cc4a:	f001 f9d7 	bl	800dffc <vPortExitCritical>
}
 800cc4e:	bf00      	nop
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b084      	sub	sp, #16
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc5e:	f001 f99b 	bl	800df98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d102      	bne.n	800cc70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	e001      	b.n	800cc74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cc70:	2300      	movs	r3, #0
 800cc72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc74:	f001 f9c2 	bl	800dffc <vPortExitCritical>

	return xReturn;
 800cc78:	68fb      	ldr	r3, [r7, #12]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b084      	sub	sp, #16
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc8a:	f001 f985 	bl	800df98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d102      	bne.n	800cca0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	e001      	b.n	800cca4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cca0:	2300      	movs	r3, #0
 800cca2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cca4:	f001 f9aa 	bl	800dffc <vPortExitCritical>

	return xReturn;
 800cca8:	68fb      	ldr	r3, [r7, #12]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b08e      	sub	sp, #56	; 0x38
 800ccb6:	af04      	add	r7, sp, #16
 800ccb8:	60f8      	str	r0, [r7, #12]
 800ccba:	60b9      	str	r1, [r7, #8]
 800ccbc:	607a      	str	r2, [r7, #4]
 800ccbe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ccc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10b      	bne.n	800ccde <xTaskCreateStatic+0x2c>
	__asm volatile
 800ccc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccca:	b672      	cpsid	i
 800cccc:	f383 8811 	msr	BASEPRI, r3
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	b662      	cpsie	i
 800ccda:	623b      	str	r3, [r7, #32]
 800ccdc:	e7fe      	b.n	800ccdc <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800ccde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d10b      	bne.n	800ccfc <xTaskCreateStatic+0x4a>
 800cce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce8:	b672      	cpsid	i
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	b662      	cpsie	i
 800ccf8:	61fb      	str	r3, [r7, #28]
 800ccfa:	e7fe      	b.n	800ccfa <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ccfc:	2358      	movs	r3, #88	; 0x58
 800ccfe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2b58      	cmp	r3, #88	; 0x58
 800cd04:	d00b      	beq.n	800cd1e <xTaskCreateStatic+0x6c>
 800cd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0a:	b672      	cpsid	i
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	b662      	cpsie	i
 800cd1a:	61bb      	str	r3, [r7, #24]
 800cd1c:	e7fe      	b.n	800cd1c <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d01e      	beq.n	800cd64 <xTaskCreateStatic+0xb2>
 800cd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d01b      	beq.n	800cd64 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd38:	2202      	movs	r2, #2
 800cd3a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd3e:	2300      	movs	r3, #0
 800cd40:	9303      	str	r3, [sp, #12]
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	9302      	str	r3, [sp, #8]
 800cd46:	f107 0314 	add.w	r3, r7, #20
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	68b9      	ldr	r1, [r7, #8]
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f000 f850 	bl	800cdfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd5e:	f000 f8e1 	bl	800cf24 <prvAddNewTaskToReadyList>
 800cd62:	e001      	b.n	800cd68 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cd64:	2300      	movs	r3, #0
 800cd66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd68:	697b      	ldr	r3, [r7, #20]
	}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3728      	adds	r7, #40	; 0x28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b08c      	sub	sp, #48	; 0x30
 800cd76:	af04      	add	r7, sp, #16
 800cd78:	60f8      	str	r0, [r7, #12]
 800cd7a:	60b9      	str	r1, [r7, #8]
 800cd7c:	603b      	str	r3, [r7, #0]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd82:	88fb      	ldrh	r3, [r7, #6]
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	4618      	mov	r0, r3
 800cd88:	f001 fa28 	bl	800e1dc <pvPortMalloc>
 800cd8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00e      	beq.n	800cdb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd94:	2058      	movs	r0, #88	; 0x58
 800cd96:	f001 fa21 	bl	800e1dc <pvPortMalloc>
 800cd9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d003      	beq.n	800cdaa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	697a      	ldr	r2, [r7, #20]
 800cda6:	631a      	str	r2, [r3, #48]	; 0x30
 800cda8:	e005      	b.n	800cdb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cdaa:	6978      	ldr	r0, [r7, #20]
 800cdac:	f001 fae2 	bl	800e374 <vPortFree>
 800cdb0:	e001      	b.n	800cdb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d017      	beq.n	800cdec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cdc4:	88fa      	ldrh	r2, [r7, #6]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9303      	str	r3, [sp, #12]
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	9302      	str	r3, [sp, #8]
 800cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	68b9      	ldr	r1, [r7, #8]
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f000 f80e 	bl	800cdfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cde0:	69f8      	ldr	r0, [r7, #28]
 800cde2:	f000 f89f 	bl	800cf24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cde6:	2301      	movs	r3, #1
 800cde8:	61bb      	str	r3, [r7, #24]
 800cdea:	e002      	b.n	800cdf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cdec:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cdf2:	69bb      	ldr	r3, [r7, #24]
	}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3720      	adds	r7, #32
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b088      	sub	sp, #32
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
 800ce08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	461a      	mov	r2, r3
 800ce14:	21a5      	movs	r1, #165	; 0xa5
 800ce16:	f017 f8b0 	bl	8023f7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ce24:	440b      	add	r3, r1
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	4413      	add	r3, r2
 800ce2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	f023 0307 	bic.w	r3, r3, #7
 800ce32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	f003 0307 	and.w	r3, r3, #7
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00b      	beq.n	800ce56 <prvInitialiseNewTask+0x5a>
 800ce3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce42:	b672      	cpsid	i
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	b662      	cpsie	i
 800ce52:	617b      	str	r3, [r7, #20]
 800ce54:	e7fe      	b.n	800ce54 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d01f      	beq.n	800ce9c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	61fb      	str	r3, [r7, #28]
 800ce60:	e012      	b.n	800ce88 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	4413      	add	r3, r2
 800ce68:	7819      	ldrb	r1, [r3, #0]
 800ce6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	4413      	add	r3, r2
 800ce70:	3334      	adds	r3, #52	; 0x34
 800ce72:	460a      	mov	r2, r1
 800ce74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d006      	beq.n	800ce90 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	3301      	adds	r3, #1
 800ce86:	61fb      	str	r3, [r7, #28]
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	2b0f      	cmp	r3, #15
 800ce8c:	d9e9      	bls.n	800ce62 <prvInitialiseNewTask+0x66>
 800ce8e:	e000      	b.n	800ce92 <prvInitialiseNewTask+0x96>
			{
				break;
 800ce90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ce9a:	e003      	b.n	800cea4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea6:	2b06      	cmp	r3, #6
 800cea8:	d901      	bls.n	800ceae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ceaa:	2306      	movs	r3, #6
 800ceac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceb2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceb8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ceba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebc:	2200      	movs	r2, #0
 800cebe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec2:	3304      	adds	r3, #4
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fe ff4b 	bl	800bd60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ceca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cecc:	3318      	adds	r3, #24
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fe ff46 	bl	800bd60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ced4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ced8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	f1c3 0207 	rsb	r2, r3, #7
 800cee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cee8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceec:	2200      	movs	r2, #0
 800ceee:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef2:	2200      	movs	r2, #0
 800cef4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef8:	2200      	movs	r2, #0
 800cefa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	68f9      	ldr	r1, [r7, #12]
 800cf02:	69b8      	ldr	r0, [r7, #24]
 800cf04:	f000 ff3c 	bl	800dd80 <pxPortInitialiseStack>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d002      	beq.n	800cf1a <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf1a:	bf00      	nop
 800cf1c:	3720      	adds	r7, #32
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
	...

0800cf24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf2c:	f001 f834 	bl	800df98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf30:	4b2a      	ldr	r3, [pc, #168]	; (800cfdc <prvAddNewTaskToReadyList+0xb8>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3301      	adds	r3, #1
 800cf36:	4a29      	ldr	r2, [pc, #164]	; (800cfdc <prvAddNewTaskToReadyList+0xb8>)
 800cf38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf3a:	4b29      	ldr	r3, [pc, #164]	; (800cfe0 <prvAddNewTaskToReadyList+0xbc>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d109      	bne.n	800cf56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf42:	4a27      	ldr	r2, [pc, #156]	; (800cfe0 <prvAddNewTaskToReadyList+0xbc>)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf48:	4b24      	ldr	r3, [pc, #144]	; (800cfdc <prvAddNewTaskToReadyList+0xb8>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d110      	bne.n	800cf72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf50:	f000 fc1e 	bl	800d790 <prvInitialiseTaskLists>
 800cf54:	e00d      	b.n	800cf72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cf56:	4b23      	ldr	r3, [pc, #140]	; (800cfe4 <prvAddNewTaskToReadyList+0xc0>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d109      	bne.n	800cf72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf5e:	4b20      	ldr	r3, [pc, #128]	; (800cfe0 <prvAddNewTaskToReadyList+0xbc>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d802      	bhi.n	800cf72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf6c:	4a1c      	ldr	r2, [pc, #112]	; (800cfe0 <prvAddNewTaskToReadyList+0xbc>)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf72:	4b1d      	ldr	r3, [pc, #116]	; (800cfe8 <prvAddNewTaskToReadyList+0xc4>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3301      	adds	r3, #1
 800cf78:	4a1b      	ldr	r2, [pc, #108]	; (800cfe8 <prvAddNewTaskToReadyList+0xc4>)
 800cf7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf80:	2201      	movs	r2, #1
 800cf82:	409a      	lsls	r2, r3
 800cf84:	4b19      	ldr	r3, [pc, #100]	; (800cfec <prvAddNewTaskToReadyList+0xc8>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	4a18      	ldr	r2, [pc, #96]	; (800cfec <prvAddNewTaskToReadyList+0xc8>)
 800cf8c:	6013      	str	r3, [r2, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf92:	4613      	mov	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4a15      	ldr	r2, [pc, #84]	; (800cff0 <prvAddNewTaskToReadyList+0xcc>)
 800cf9c:	441a      	add	r2, r3
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	f7fe fee8 	bl	800bd7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cfaa:	f001 f827 	bl	800dffc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cfae:	4b0d      	ldr	r3, [pc, #52]	; (800cfe4 <prvAddNewTaskToReadyList+0xc0>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00e      	beq.n	800cfd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cfb6:	4b0a      	ldr	r3, [pc, #40]	; (800cfe0 <prvAddNewTaskToReadyList+0xbc>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d207      	bcs.n	800cfd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cfc4:	4b0b      	ldr	r3, [pc, #44]	; (800cff4 <prvAddNewTaskToReadyList+0xd0>)
 800cfc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfca:	601a      	str	r2, [r3, #0]
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfd4:	bf00      	nop
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	200004b8 	.word	0x200004b8
 800cfe0:	200003b8 	.word	0x200003b8
 800cfe4:	200004c4 	.word	0x200004c4
 800cfe8:	200004d4 	.word	0x200004d4
 800cfec:	200004c0 	.word	0x200004c0
 800cff0:	200003bc 	.word	0x200003bc
 800cff4:	e000ed04 	.word	0xe000ed04

0800cff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d000:	2300      	movs	r3, #0
 800d002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d018      	beq.n	800d03c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d00a:	4b14      	ldr	r3, [pc, #80]	; (800d05c <vTaskDelay+0x64>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00b      	beq.n	800d02a <vTaskDelay+0x32>
 800d012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d016:	b672      	cpsid	i
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	b662      	cpsie	i
 800d026:	60bb      	str	r3, [r7, #8]
 800d028:	e7fe      	b.n	800d028 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d02a:	f000 f87d 	bl	800d128 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d02e:	2100      	movs	r1, #0
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fe3f 	bl	800dcb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d036:	f000 f885 	bl	800d144 <xTaskResumeAll>
 800d03a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d107      	bne.n	800d052 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d042:	4b07      	ldr	r3, [pc, #28]	; (800d060 <vTaskDelay+0x68>)
 800d044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d052:	bf00      	nop
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	200004e0 	.word	0x200004e0
 800d060:	e000ed04 	.word	0xe000ed04

0800d064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b08a      	sub	sp, #40	; 0x28
 800d068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d06e:	2300      	movs	r3, #0
 800d070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d072:	463a      	mov	r2, r7
 800d074:	1d39      	adds	r1, r7, #4
 800d076:	f107 0308 	add.w	r3, r7, #8
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7f3 fab2 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	9202      	str	r2, [sp, #8]
 800d088:	9301      	str	r3, [sp, #4]
 800d08a:	2300      	movs	r3, #0
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	2300      	movs	r3, #0
 800d090:	460a      	mov	r2, r1
 800d092:	491f      	ldr	r1, [pc, #124]	; (800d110 <vTaskStartScheduler+0xac>)
 800d094:	481f      	ldr	r0, [pc, #124]	; (800d114 <vTaskStartScheduler+0xb0>)
 800d096:	f7ff fe0c 	bl	800ccb2 <xTaskCreateStatic>
 800d09a:	4602      	mov	r2, r0
 800d09c:	4b1e      	ldr	r3, [pc, #120]	; (800d118 <vTaskStartScheduler+0xb4>)
 800d09e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d0a0:	4b1d      	ldr	r3, [pc, #116]	; (800d118 <vTaskStartScheduler+0xb4>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d002      	beq.n	800d0ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	617b      	str	r3, [r7, #20]
 800d0ac:	e001      	b.n	800d0b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d117      	bne.n	800d0e8 <vTaskStartScheduler+0x84>
 800d0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0bc:	b672      	cpsid	i
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	b662      	cpsie	i
 800d0cc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d0ce:	4b13      	ldr	r3, [pc, #76]	; (800d11c <vTaskStartScheduler+0xb8>)
 800d0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d0d6:	4b12      	ldr	r3, [pc, #72]	; (800d120 <vTaskStartScheduler+0xbc>)
 800d0d8:	2201      	movs	r2, #1
 800d0da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d0dc:	4b11      	ldr	r3, [pc, #68]	; (800d124 <vTaskStartScheduler+0xc0>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d0e2:	f000 fedd 	bl	800dea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d0e6:	e00f      	b.n	800d108 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ee:	d10b      	bne.n	800d108 <vTaskStartScheduler+0xa4>
 800d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f4:	b672      	cpsid	i
 800d0f6:	f383 8811 	msr	BASEPRI, r3
 800d0fa:	f3bf 8f6f 	isb	sy
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	b662      	cpsie	i
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	e7fe      	b.n	800d106 <vTaskStartScheduler+0xa2>
}
 800d108:	bf00      	nop
 800d10a:	3718      	adds	r7, #24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	08024ee8 	.word	0x08024ee8
 800d114:	0800d75d 	.word	0x0800d75d
 800d118:	200004dc 	.word	0x200004dc
 800d11c:	200004d8 	.word	0x200004d8
 800d120:	200004c4 	.word	0x200004c4
 800d124:	200004bc 	.word	0x200004bc

0800d128 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d128:	b480      	push	{r7}
 800d12a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d12c:	4b04      	ldr	r3, [pc, #16]	; (800d140 <vTaskSuspendAll+0x18>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3301      	adds	r3, #1
 800d132:	4a03      	ldr	r2, [pc, #12]	; (800d140 <vTaskSuspendAll+0x18>)
 800d134:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d136:	bf00      	nop
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	200004e0 	.word	0x200004e0

0800d144 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d14a:	2300      	movs	r3, #0
 800d14c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d14e:	2300      	movs	r3, #0
 800d150:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d152:	4b42      	ldr	r3, [pc, #264]	; (800d25c <xTaskResumeAll+0x118>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10b      	bne.n	800d172 <xTaskResumeAll+0x2e>
 800d15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15e:	b672      	cpsid	i
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	b662      	cpsie	i
 800d16e:	603b      	str	r3, [r7, #0]
 800d170:	e7fe      	b.n	800d170 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d172:	f000 ff11 	bl	800df98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d176:	4b39      	ldr	r3, [pc, #228]	; (800d25c <xTaskResumeAll+0x118>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3b01      	subs	r3, #1
 800d17c:	4a37      	ldr	r2, [pc, #220]	; (800d25c <xTaskResumeAll+0x118>)
 800d17e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d180:	4b36      	ldr	r3, [pc, #216]	; (800d25c <xTaskResumeAll+0x118>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d161      	bne.n	800d24c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d188:	4b35      	ldr	r3, [pc, #212]	; (800d260 <xTaskResumeAll+0x11c>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d05d      	beq.n	800d24c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d190:	e02e      	b.n	800d1f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d192:	4b34      	ldr	r3, [pc, #208]	; (800d264 <xTaskResumeAll+0x120>)
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	3318      	adds	r3, #24
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fe fe48 	bl	800be34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	3304      	adds	r3, #4
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7fe fe43 	bl	800be34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	409a      	lsls	r2, r3
 800d1b6:	4b2c      	ldr	r3, [pc, #176]	; (800d268 <xTaskResumeAll+0x124>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	4a2a      	ldr	r2, [pc, #168]	; (800d268 <xTaskResumeAll+0x124>)
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	4413      	add	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4a27      	ldr	r2, [pc, #156]	; (800d26c <xTaskResumeAll+0x128>)
 800d1ce:	441a      	add	r2, r3
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	3304      	adds	r3, #4
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	f7fe fdcf 	bl	800bd7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e0:	4b23      	ldr	r3, [pc, #140]	; (800d270 <xTaskResumeAll+0x12c>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d302      	bcc.n	800d1f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d1ea:	4b22      	ldr	r3, [pc, #136]	; (800d274 <xTaskResumeAll+0x130>)
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d1f0:	4b1c      	ldr	r3, [pc, #112]	; (800d264 <xTaskResumeAll+0x120>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d1cc      	bne.n	800d192 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d1fe:	f000 fb63 	bl	800d8c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d202:	4b1d      	ldr	r3, [pc, #116]	; (800d278 <xTaskResumeAll+0x134>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d010      	beq.n	800d230 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d20e:	f000 f859 	bl	800d2c4 <xTaskIncrementTick>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d218:	4b16      	ldr	r3, [pc, #88]	; (800d274 <xTaskResumeAll+0x130>)
 800d21a:	2201      	movs	r2, #1
 800d21c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	3b01      	subs	r3, #1
 800d222:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1f1      	bne.n	800d20e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d22a:	4b13      	ldr	r3, [pc, #76]	; (800d278 <xTaskResumeAll+0x134>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d230:	4b10      	ldr	r3, [pc, #64]	; (800d274 <xTaskResumeAll+0x130>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d009      	beq.n	800d24c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d238:	2301      	movs	r3, #1
 800d23a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d23c:	4b0f      	ldr	r3, [pc, #60]	; (800d27c <xTaskResumeAll+0x138>)
 800d23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d24c:	f000 fed6 	bl	800dffc <vPortExitCritical>

	return xAlreadyYielded;
 800d250:	68bb      	ldr	r3, [r7, #8]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	200004e0 	.word	0x200004e0
 800d260:	200004b8 	.word	0x200004b8
 800d264:	20000478 	.word	0x20000478
 800d268:	200004c0 	.word	0x200004c0
 800d26c:	200003bc 	.word	0x200003bc
 800d270:	200003b8 	.word	0x200003b8
 800d274:	200004cc 	.word	0x200004cc
 800d278:	200004c8 	.word	0x200004c8
 800d27c:	e000ed04 	.word	0xe000ed04

0800d280 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d286:	4b05      	ldr	r3, [pc, #20]	; (800d29c <xTaskGetTickCount+0x1c>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d28c:	687b      	ldr	r3, [r7, #4]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	370c      	adds	r7, #12
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	200004bc 	.word	0x200004bc

0800d2a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2a6:	f000 ff57 	bl	800e158 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d2ae:	4b04      	ldr	r3, [pc, #16]	; (800d2c0 <xTaskGetTickCountFromISR+0x20>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2b4:	683b      	ldr	r3, [r7, #0]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	200004bc 	.word	0x200004bc

0800d2c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2ce:	4b4f      	ldr	r3, [pc, #316]	; (800d40c <xTaskIncrementTick+0x148>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	f040 8089 	bne.w	800d3ea <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d2d8:	4b4d      	ldr	r3, [pc, #308]	; (800d410 <xTaskIncrementTick+0x14c>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d2e0:	4a4b      	ldr	r2, [pc, #300]	; (800d410 <xTaskIncrementTick+0x14c>)
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d121      	bne.n	800d330 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d2ec:	4b49      	ldr	r3, [pc, #292]	; (800d414 <xTaskIncrementTick+0x150>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00b      	beq.n	800d30e <xTaskIncrementTick+0x4a>
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	b672      	cpsid	i
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	b662      	cpsie	i
 800d30a:	603b      	str	r3, [r7, #0]
 800d30c:	e7fe      	b.n	800d30c <xTaskIncrementTick+0x48>
 800d30e:	4b41      	ldr	r3, [pc, #260]	; (800d414 <xTaskIncrementTick+0x150>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	60fb      	str	r3, [r7, #12]
 800d314:	4b40      	ldr	r3, [pc, #256]	; (800d418 <xTaskIncrementTick+0x154>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a3e      	ldr	r2, [pc, #248]	; (800d414 <xTaskIncrementTick+0x150>)
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	4a3e      	ldr	r2, [pc, #248]	; (800d418 <xTaskIncrementTick+0x154>)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6013      	str	r3, [r2, #0]
 800d322:	4b3e      	ldr	r3, [pc, #248]	; (800d41c <xTaskIncrementTick+0x158>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	3301      	adds	r3, #1
 800d328:	4a3c      	ldr	r2, [pc, #240]	; (800d41c <xTaskIncrementTick+0x158>)
 800d32a:	6013      	str	r3, [r2, #0]
 800d32c:	f000 facc 	bl	800d8c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d330:	4b3b      	ldr	r3, [pc, #236]	; (800d420 <xTaskIncrementTick+0x15c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	429a      	cmp	r2, r3
 800d338:	d348      	bcc.n	800d3cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d33a:	4b36      	ldr	r3, [pc, #216]	; (800d414 <xTaskIncrementTick+0x150>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d104      	bne.n	800d34e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d344:	4b36      	ldr	r3, [pc, #216]	; (800d420 <xTaskIncrementTick+0x15c>)
 800d346:	f04f 32ff 	mov.w	r2, #4294967295
 800d34a:	601a      	str	r2, [r3, #0]
					break;
 800d34c:	e03e      	b.n	800d3cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d34e:	4b31      	ldr	r3, [pc, #196]	; (800d414 <xTaskIncrementTick+0x150>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	429a      	cmp	r2, r3
 800d364:	d203      	bcs.n	800d36e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d366:	4a2e      	ldr	r2, [pc, #184]	; (800d420 <xTaskIncrementTick+0x15c>)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d36c:	e02e      	b.n	800d3cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	3304      	adds	r3, #4
 800d372:	4618      	mov	r0, r3
 800d374:	f7fe fd5e 	bl	800be34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d004      	beq.n	800d38a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	3318      	adds	r3, #24
 800d384:	4618      	mov	r0, r3
 800d386:	f7fe fd55 	bl	800be34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38e:	2201      	movs	r2, #1
 800d390:	409a      	lsls	r2, r3
 800d392:	4b24      	ldr	r3, [pc, #144]	; (800d424 <xTaskIncrementTick+0x160>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4313      	orrs	r3, r2
 800d398:	4a22      	ldr	r2, [pc, #136]	; (800d424 <xTaskIncrementTick+0x160>)
 800d39a:	6013      	str	r3, [r2, #0]
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	4413      	add	r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	4a1f      	ldr	r2, [pc, #124]	; (800d428 <xTaskIncrementTick+0x164>)
 800d3aa:	441a      	add	r2, r3
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	f7fe fce1 	bl	800bd7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3bc:	4b1b      	ldr	r3, [pc, #108]	; (800d42c <xTaskIncrementTick+0x168>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d3b9      	bcc.n	800d33a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3ca:	e7b6      	b.n	800d33a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d3cc:	4b17      	ldr	r3, [pc, #92]	; (800d42c <xTaskIncrementTick+0x168>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d2:	4915      	ldr	r1, [pc, #84]	; (800d428 <xTaskIncrementTick+0x164>)
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	440b      	add	r3, r1
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d907      	bls.n	800d3f4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	617b      	str	r3, [r7, #20]
 800d3e8:	e004      	b.n	800d3f4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d3ea:	4b11      	ldr	r3, [pc, #68]	; (800d430 <xTaskIncrementTick+0x16c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	4a0f      	ldr	r2, [pc, #60]	; (800d430 <xTaskIncrementTick+0x16c>)
 800d3f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d3f4:	4b0f      	ldr	r3, [pc, #60]	; (800d434 <xTaskIncrementTick+0x170>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d001      	beq.n	800d400 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d400:	697b      	ldr	r3, [r7, #20]
}
 800d402:	4618      	mov	r0, r3
 800d404:	3718      	adds	r7, #24
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	200004e0 	.word	0x200004e0
 800d410:	200004bc 	.word	0x200004bc
 800d414:	20000470 	.word	0x20000470
 800d418:	20000474 	.word	0x20000474
 800d41c:	200004d0 	.word	0x200004d0
 800d420:	200004d8 	.word	0x200004d8
 800d424:	200004c0 	.word	0x200004c0
 800d428:	200003bc 	.word	0x200003bc
 800d42c:	200003b8 	.word	0x200003b8
 800d430:	200004c8 	.word	0x200004c8
 800d434:	200004cc 	.word	0x200004cc

0800d438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b088      	sub	sp, #32
 800d43c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d43e:	4b3a      	ldr	r3, [pc, #232]	; (800d528 <vTaskSwitchContext+0xf0>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d003      	beq.n	800d44e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d446:	4b39      	ldr	r3, [pc, #228]	; (800d52c <vTaskSwitchContext+0xf4>)
 800d448:	2201      	movs	r2, #1
 800d44a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d44c:	e067      	b.n	800d51e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800d44e:	4b37      	ldr	r3, [pc, #220]	; (800d52c <vTaskSwitchContext+0xf4>)
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d454:	4b36      	ldr	r3, [pc, #216]	; (800d530 <vTaskSwitchContext+0xf8>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45a:	61fb      	str	r3, [r7, #28]
 800d45c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d460:	61bb      	str	r3, [r7, #24]
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	69ba      	ldr	r2, [r7, #24]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d111      	bne.n	800d490 <vTaskSwitchContext+0x58>
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	3304      	adds	r3, #4
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	69ba      	ldr	r2, [r7, #24]
 800d474:	429a      	cmp	r2, r3
 800d476:	d10b      	bne.n	800d490 <vTaskSwitchContext+0x58>
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	3308      	adds	r3, #8
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	69ba      	ldr	r2, [r7, #24]
 800d480:	429a      	cmp	r2, r3
 800d482:	d105      	bne.n	800d490 <vTaskSwitchContext+0x58>
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	330c      	adds	r3, #12
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	69ba      	ldr	r2, [r7, #24]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d008      	beq.n	800d4a2 <vTaskSwitchContext+0x6a>
 800d490:	4b27      	ldr	r3, [pc, #156]	; (800d530 <vTaskSwitchContext+0xf8>)
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	4b26      	ldr	r3, [pc, #152]	; (800d530 <vTaskSwitchContext+0xf8>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	3334      	adds	r3, #52	; 0x34
 800d49a:	4619      	mov	r1, r3
 800d49c:	4610      	mov	r0, r2
 800d49e:	f7f3 f88e 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4a2:	4b24      	ldr	r3, [pc, #144]	; (800d534 <vTaskSwitchContext+0xfc>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	fab3 f383 	clz	r3, r3
 800d4ae:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d4b0:	7afb      	ldrb	r3, [r7, #11]
 800d4b2:	f1c3 031f 	rsb	r3, r3, #31
 800d4b6:	617b      	str	r3, [r7, #20]
 800d4b8:	491f      	ldr	r1, [pc, #124]	; (800d538 <vTaskSwitchContext+0x100>)
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	4613      	mov	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	4413      	add	r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	440b      	add	r3, r1
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10b      	bne.n	800d4e4 <vTaskSwitchContext+0xac>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	b672      	cpsid	i
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	b662      	cpsie	i
 800d4e0:	607b      	str	r3, [r7, #4]
 800d4e2:	e7fe      	b.n	800d4e2 <vTaskSwitchContext+0xaa>
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	4613      	mov	r3, r2
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	4413      	add	r3, r2
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4a12      	ldr	r2, [pc, #72]	; (800d538 <vTaskSwitchContext+0x100>)
 800d4f0:	4413      	add	r3, r2
 800d4f2:	613b      	str	r3, [r7, #16]
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	685a      	ldr	r2, [r3, #4]
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	605a      	str	r2, [r3, #4]
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	685a      	ldr	r2, [r3, #4]
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	3308      	adds	r3, #8
 800d506:	429a      	cmp	r2, r3
 800d508:	d104      	bne.n	800d514 <vTaskSwitchContext+0xdc>
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	605a      	str	r2, [r3, #4]
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	4a05      	ldr	r2, [pc, #20]	; (800d530 <vTaskSwitchContext+0xf8>)
 800d51c:	6013      	str	r3, [r2, #0]
}
 800d51e:	bf00      	nop
 800d520:	3720      	adds	r7, #32
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	200004e0 	.word	0x200004e0
 800d52c:	200004cc 	.word	0x200004cc
 800d530:	200003b8 	.word	0x200003b8
 800d534:	200004c0 	.word	0x200004c0
 800d538:	200003bc 	.word	0x200003bc

0800d53c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10b      	bne.n	800d564 <vTaskPlaceOnEventList+0x28>
 800d54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d550:	b672      	cpsid	i
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	b662      	cpsie	i
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	e7fe      	b.n	800d562 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d564:	4b07      	ldr	r3, [pc, #28]	; (800d584 <vTaskPlaceOnEventList+0x48>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3318      	adds	r3, #24
 800d56a:	4619      	mov	r1, r3
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7fe fc28 	bl	800bdc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d572:	2101      	movs	r1, #1
 800d574:	6838      	ldr	r0, [r7, #0]
 800d576:	f000 fb9d 	bl	800dcb4 <prvAddCurrentTaskToDelayedList>
}
 800d57a:	bf00      	nop
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	200003b8 	.word	0x200003b8

0800d588 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b086      	sub	sp, #24
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d10b      	bne.n	800d5b6 <xTaskRemoveFromEventList+0x2e>
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	b672      	cpsid	i
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	b662      	cpsie	i
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	e7fe      	b.n	800d5b4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	3318      	adds	r3, #24
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fe fc3a 	bl	800be34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5c0:	4b1d      	ldr	r3, [pc, #116]	; (800d638 <xTaskRemoveFromEventList+0xb0>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d11c      	bne.n	800d602 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	3304      	adds	r3, #4
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7fe fc31 	bl	800be34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	409a      	lsls	r2, r3
 800d5da:	4b18      	ldr	r3, [pc, #96]	; (800d63c <xTaskRemoveFromEventList+0xb4>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	4a16      	ldr	r2, [pc, #88]	; (800d63c <xTaskRemoveFromEventList+0xb4>)
 800d5e2:	6013      	str	r3, [r2, #0]
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4413      	add	r3, r2
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	4a13      	ldr	r2, [pc, #76]	; (800d640 <xTaskRemoveFromEventList+0xb8>)
 800d5f2:	441a      	add	r2, r3
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	4610      	mov	r0, r2
 800d5fc:	f7fe fbbd 	bl	800bd7a <vListInsertEnd>
 800d600:	e005      	b.n	800d60e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	3318      	adds	r3, #24
 800d606:	4619      	mov	r1, r3
 800d608:	480e      	ldr	r0, [pc, #56]	; (800d644 <xTaskRemoveFromEventList+0xbc>)
 800d60a:	f7fe fbb6 	bl	800bd7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d612:	4b0d      	ldr	r3, [pc, #52]	; (800d648 <xTaskRemoveFromEventList+0xc0>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d618:	429a      	cmp	r2, r3
 800d61a:	d905      	bls.n	800d628 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d61c:	2301      	movs	r3, #1
 800d61e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d620:	4b0a      	ldr	r3, [pc, #40]	; (800d64c <xTaskRemoveFromEventList+0xc4>)
 800d622:	2201      	movs	r2, #1
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	e001      	b.n	800d62c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d628:	2300      	movs	r3, #0
 800d62a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d62c:	697b      	ldr	r3, [r7, #20]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3718      	adds	r7, #24
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	200004e0 	.word	0x200004e0
 800d63c:	200004c0 	.word	0x200004c0
 800d640:	200003bc 	.word	0x200003bc
 800d644:	20000478 	.word	0x20000478
 800d648:	200003b8 	.word	0x200003b8
 800d64c:	200004cc 	.word	0x200004cc

0800d650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d658:	4b06      	ldr	r3, [pc, #24]	; (800d674 <vTaskInternalSetTimeOutState+0x24>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d660:	4b05      	ldr	r3, [pc, #20]	; (800d678 <vTaskInternalSetTimeOutState+0x28>)
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	605a      	str	r2, [r3, #4]
}
 800d668:	bf00      	nop
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr
 800d674:	200004d0 	.word	0x200004d0
 800d678:	200004bc 	.word	0x200004bc

0800d67c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b088      	sub	sp, #32
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10b      	bne.n	800d6a4 <xTaskCheckForTimeOut+0x28>
 800d68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d690:	b672      	cpsid	i
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	b662      	cpsie	i
 800d6a0:	613b      	str	r3, [r7, #16]
 800d6a2:	e7fe      	b.n	800d6a2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d10b      	bne.n	800d6c2 <xTaskCheckForTimeOut+0x46>
 800d6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ae:	b672      	cpsid	i
 800d6b0:	f383 8811 	msr	BASEPRI, r3
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	f3bf 8f4f 	dsb	sy
 800d6bc:	b662      	cpsie	i
 800d6be:	60fb      	str	r3, [r7, #12]
 800d6c0:	e7fe      	b.n	800d6c0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800d6c2:	f000 fc69 	bl	800df98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d6c6:	4b1d      	ldr	r3, [pc, #116]	; (800d73c <xTaskCheckForTimeOut+0xc0>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	69ba      	ldr	r2, [r7, #24]
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6de:	d102      	bne.n	800d6e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	61fb      	str	r3, [r7, #28]
 800d6e4:	e023      	b.n	800d72e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	4b15      	ldr	r3, [pc, #84]	; (800d740 <xTaskCheckForTimeOut+0xc4>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d007      	beq.n	800d702 <xTaskCheckForTimeOut+0x86>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	69ba      	ldr	r2, [r7, #24]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d302      	bcc.n	800d702 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	61fb      	str	r3, [r7, #28]
 800d700:	e015      	b.n	800d72e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	697a      	ldr	r2, [r7, #20]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d20b      	bcs.n	800d724 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	1ad2      	subs	r2, r2, r3
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f7ff ff99 	bl	800d650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d71e:	2300      	movs	r3, #0
 800d720:	61fb      	str	r3, [r7, #28]
 800d722:	e004      	b.n	800d72e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	2200      	movs	r2, #0
 800d728:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d72a:	2301      	movs	r3, #1
 800d72c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d72e:	f000 fc65 	bl	800dffc <vPortExitCritical>

	return xReturn;
 800d732:	69fb      	ldr	r3, [r7, #28]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3720      	adds	r7, #32
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	200004bc 	.word	0x200004bc
 800d740:	200004d0 	.word	0x200004d0

0800d744 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d744:	b480      	push	{r7}
 800d746:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d748:	4b03      	ldr	r3, [pc, #12]	; (800d758 <vTaskMissedYield+0x14>)
 800d74a:	2201      	movs	r2, #1
 800d74c:	601a      	str	r2, [r3, #0]
}
 800d74e:	bf00      	nop
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr
 800d758:	200004cc 	.word	0x200004cc

0800d75c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d764:	f000 f854 	bl	800d810 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d768:	4b07      	ldr	r3, [pc, #28]	; (800d788 <prvIdleTask+0x2c>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d907      	bls.n	800d780 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d770:	4b06      	ldr	r3, [pc, #24]	; (800d78c <prvIdleTask+0x30>)
 800d772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d776:	601a      	str	r2, [r3, #0]
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d780:	f7f2 ff16 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d784:	e7ee      	b.n	800d764 <prvIdleTask+0x8>
 800d786:	bf00      	nop
 800d788:	200003bc 	.word	0x200003bc
 800d78c:	e000ed04 	.word	0xe000ed04

0800d790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d796:	2300      	movs	r3, #0
 800d798:	607b      	str	r3, [r7, #4]
 800d79a:	e00c      	b.n	800d7b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	4a12      	ldr	r2, [pc, #72]	; (800d7f0 <prvInitialiseTaskLists+0x60>)
 800d7a8:	4413      	add	r3, r2
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fe fab8 	bl	800bd20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	607b      	str	r3, [r7, #4]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b06      	cmp	r3, #6
 800d7ba:	d9ef      	bls.n	800d79c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d7bc:	480d      	ldr	r0, [pc, #52]	; (800d7f4 <prvInitialiseTaskLists+0x64>)
 800d7be:	f7fe faaf 	bl	800bd20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d7c2:	480d      	ldr	r0, [pc, #52]	; (800d7f8 <prvInitialiseTaskLists+0x68>)
 800d7c4:	f7fe faac 	bl	800bd20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d7c8:	480c      	ldr	r0, [pc, #48]	; (800d7fc <prvInitialiseTaskLists+0x6c>)
 800d7ca:	f7fe faa9 	bl	800bd20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d7ce:	480c      	ldr	r0, [pc, #48]	; (800d800 <prvInitialiseTaskLists+0x70>)
 800d7d0:	f7fe faa6 	bl	800bd20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d7d4:	480b      	ldr	r0, [pc, #44]	; (800d804 <prvInitialiseTaskLists+0x74>)
 800d7d6:	f7fe faa3 	bl	800bd20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d7da:	4b0b      	ldr	r3, [pc, #44]	; (800d808 <prvInitialiseTaskLists+0x78>)
 800d7dc:	4a05      	ldr	r2, [pc, #20]	; (800d7f4 <prvInitialiseTaskLists+0x64>)
 800d7de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d7e0:	4b0a      	ldr	r3, [pc, #40]	; (800d80c <prvInitialiseTaskLists+0x7c>)
 800d7e2:	4a05      	ldr	r2, [pc, #20]	; (800d7f8 <prvInitialiseTaskLists+0x68>)
 800d7e4:	601a      	str	r2, [r3, #0]
}
 800d7e6:	bf00      	nop
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	200003bc 	.word	0x200003bc
 800d7f4:	20000448 	.word	0x20000448
 800d7f8:	2000045c 	.word	0x2000045c
 800d7fc:	20000478 	.word	0x20000478
 800d800:	2000048c 	.word	0x2000048c
 800d804:	200004a4 	.word	0x200004a4
 800d808:	20000470 	.word	0x20000470
 800d80c:	20000474 	.word	0x20000474

0800d810 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d816:	e019      	b.n	800d84c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d818:	f000 fbbe 	bl	800df98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d81c:	4b0f      	ldr	r3, [pc, #60]	; (800d85c <prvCheckTasksWaitingTermination+0x4c>)
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	3304      	adds	r3, #4
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fe fb03 	bl	800be34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d82e:	4b0c      	ldr	r3, [pc, #48]	; (800d860 <prvCheckTasksWaitingTermination+0x50>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3b01      	subs	r3, #1
 800d834:	4a0a      	ldr	r2, [pc, #40]	; (800d860 <prvCheckTasksWaitingTermination+0x50>)
 800d836:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d838:	4b0a      	ldr	r3, [pc, #40]	; (800d864 <prvCheckTasksWaitingTermination+0x54>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	4a09      	ldr	r2, [pc, #36]	; (800d864 <prvCheckTasksWaitingTermination+0x54>)
 800d840:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d842:	f000 fbdb 	bl	800dffc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 f80e 	bl	800d868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d84c:	4b05      	ldr	r3, [pc, #20]	; (800d864 <prvCheckTasksWaitingTermination+0x54>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d1e1      	bne.n	800d818 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d854:	bf00      	nop
 800d856:	3708      	adds	r7, #8
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	2000048c 	.word	0x2000048c
 800d860:	200004b8 	.word	0x200004b8
 800d864:	200004a0 	.word	0x200004a0

0800d868 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d876:	2b00      	cmp	r3, #0
 800d878:	d108      	bne.n	800d88c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d87e:	4618      	mov	r0, r3
 800d880:	f000 fd78 	bl	800e374 <vPortFree>
				vPortFree( pxTCB );
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fd75 	bl	800e374 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d88a:	e019      	b.n	800d8c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d892:	2b01      	cmp	r3, #1
 800d894:	d103      	bne.n	800d89e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fd6c 	bl	800e374 <vPortFree>
	}
 800d89c:	e010      	b.n	800d8c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d8a4:	2b02      	cmp	r3, #2
 800d8a6:	d00b      	beq.n	800d8c0 <prvDeleteTCB+0x58>
 800d8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ac:	b672      	cpsid	i
 800d8ae:	f383 8811 	msr	BASEPRI, r3
 800d8b2:	f3bf 8f6f 	isb	sy
 800d8b6:	f3bf 8f4f 	dsb	sy
 800d8ba:	b662      	cpsie	i
 800d8bc:	60fb      	str	r3, [r7, #12]
 800d8be:	e7fe      	b.n	800d8be <prvDeleteTCB+0x56>
	}
 800d8c0:	bf00      	nop
 800d8c2:	3710      	adds	r7, #16
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8ce:	4b0c      	ldr	r3, [pc, #48]	; (800d900 <prvResetNextTaskUnblockTime+0x38>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d104      	bne.n	800d8e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d8d8:	4b0a      	ldr	r3, [pc, #40]	; (800d904 <prvResetNextTaskUnblockTime+0x3c>)
 800d8da:	f04f 32ff 	mov.w	r2, #4294967295
 800d8de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d8e0:	e008      	b.n	800d8f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8e2:	4b07      	ldr	r3, [pc, #28]	; (800d900 <prvResetNextTaskUnblockTime+0x38>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	4a04      	ldr	r2, [pc, #16]	; (800d904 <prvResetNextTaskUnblockTime+0x3c>)
 800d8f2:	6013      	str	r3, [r2, #0]
}
 800d8f4:	bf00      	nop
 800d8f6:	370c      	adds	r7, #12
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr
 800d900:	20000470 	.word	0x20000470
 800d904:	200004d8 	.word	0x200004d8

0800d908 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d90e:	4b0b      	ldr	r3, [pc, #44]	; (800d93c <xTaskGetSchedulerState+0x34>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d102      	bne.n	800d91c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d916:	2301      	movs	r3, #1
 800d918:	607b      	str	r3, [r7, #4]
 800d91a:	e008      	b.n	800d92e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d91c:	4b08      	ldr	r3, [pc, #32]	; (800d940 <xTaskGetSchedulerState+0x38>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d102      	bne.n	800d92a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d924:	2302      	movs	r3, #2
 800d926:	607b      	str	r3, [r7, #4]
 800d928:	e001      	b.n	800d92e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d92a:	2300      	movs	r3, #0
 800d92c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d92e:	687b      	ldr	r3, [r7, #4]
	}
 800d930:	4618      	mov	r0, r3
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	200004c4 	.word	0x200004c4
 800d940:	200004e0 	.word	0x200004e0

0800d944 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d950:	2300      	movs	r3, #0
 800d952:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d069      	beq.n	800da2e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d95e:	4b36      	ldr	r3, [pc, #216]	; (800da38 <xTaskPriorityInherit+0xf4>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d964:	429a      	cmp	r2, r3
 800d966:	d259      	bcs.n	800da1c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	699b      	ldr	r3, [r3, #24]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	db06      	blt.n	800d97e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d970:	4b31      	ldr	r3, [pc, #196]	; (800da38 <xTaskPriorityInherit+0xf4>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d976:	f1c3 0207 	rsb	r2, r3, #7
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	6959      	ldr	r1, [r3, #20]
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d986:	4613      	mov	r3, r2
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	4413      	add	r3, r2
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	4a2b      	ldr	r2, [pc, #172]	; (800da3c <xTaskPriorityInherit+0xf8>)
 800d990:	4413      	add	r3, r2
 800d992:	4299      	cmp	r1, r3
 800d994:	d13a      	bne.n	800da0c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	3304      	adds	r3, #4
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fe fa4a 	bl	800be34 <uxListRemove>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d115      	bne.n	800d9d2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9aa:	4924      	ldr	r1, [pc, #144]	; (800da3c <xTaskPriorityInherit+0xf8>)
 800d9ac:	4613      	mov	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	4413      	add	r3, r2
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	440b      	add	r3, r1
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <xTaskPriorityInherit+0x8e>
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9c6:	43da      	mvns	r2, r3
 800d9c8:	4b1d      	ldr	r3, [pc, #116]	; (800da40 <xTaskPriorityInherit+0xfc>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	4a1c      	ldr	r2, [pc, #112]	; (800da40 <xTaskPriorityInherit+0xfc>)
 800d9d0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d9d2:	4b19      	ldr	r3, [pc, #100]	; (800da38 <xTaskPriorityInherit+0xf4>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	409a      	lsls	r2, r3
 800d9e4:	4b16      	ldr	r3, [pc, #88]	; (800da40 <xTaskPriorityInherit+0xfc>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	4a15      	ldr	r2, [pc, #84]	; (800da40 <xTaskPriorityInherit+0xfc>)
 800d9ec:	6013      	str	r3, [r2, #0]
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	4413      	add	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	4a10      	ldr	r2, [pc, #64]	; (800da3c <xTaskPriorityInherit+0xf8>)
 800d9fc:	441a      	add	r2, r3
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	3304      	adds	r3, #4
 800da02:	4619      	mov	r1, r3
 800da04:	4610      	mov	r0, r2
 800da06:	f7fe f9b8 	bl	800bd7a <vListInsertEnd>
 800da0a:	e004      	b.n	800da16 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da0c:	4b0a      	ldr	r3, [pc, #40]	; (800da38 <xTaskPriorityInherit+0xf4>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800da16:	2301      	movs	r3, #1
 800da18:	60fb      	str	r3, [r7, #12]
 800da1a:	e008      	b.n	800da2e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da20:	4b05      	ldr	r3, [pc, #20]	; (800da38 <xTaskPriorityInherit+0xf4>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da26:	429a      	cmp	r2, r3
 800da28:	d201      	bcs.n	800da2e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800da2a:	2301      	movs	r3, #1
 800da2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da2e:	68fb      	ldr	r3, [r7, #12]
	}
 800da30:	4618      	mov	r0, r3
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	200003b8 	.word	0x200003b8
 800da3c:	200003bc 	.word	0x200003bc
 800da40:	200004c0 	.word	0x200004c0

0800da44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800da50:	2300      	movs	r3, #0
 800da52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d070      	beq.n	800db3c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800da5a:	4b3b      	ldr	r3, [pc, #236]	; (800db48 <xTaskPriorityDisinherit+0x104>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	693a      	ldr	r2, [r7, #16]
 800da60:	429a      	cmp	r2, r3
 800da62:	d00b      	beq.n	800da7c <xTaskPriorityDisinherit+0x38>
 800da64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da68:	b672      	cpsid	i
 800da6a:	f383 8811 	msr	BASEPRI, r3
 800da6e:	f3bf 8f6f 	isb	sy
 800da72:	f3bf 8f4f 	dsb	sy
 800da76:	b662      	cpsie	i
 800da78:	60fb      	str	r3, [r7, #12]
 800da7a:	e7fe      	b.n	800da7a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da80:	2b00      	cmp	r3, #0
 800da82:	d10b      	bne.n	800da9c <xTaskPriorityDisinherit+0x58>
 800da84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da88:	b672      	cpsid	i
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	b662      	cpsie	i
 800da98:	60bb      	str	r3, [r7, #8]
 800da9a:	e7fe      	b.n	800da9a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800daa0:	1e5a      	subs	r2, r3, #1
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daae:	429a      	cmp	r2, r3
 800dab0:	d044      	beq.n	800db3c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d140      	bne.n	800db3c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	3304      	adds	r3, #4
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7fe f9b8 	bl	800be34 <uxListRemove>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d115      	bne.n	800daf6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dace:	491f      	ldr	r1, [pc, #124]	; (800db4c <xTaskPriorityDisinherit+0x108>)
 800dad0:	4613      	mov	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	4413      	add	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	440b      	add	r3, r1
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10a      	bne.n	800daf6 <xTaskPriorityDisinherit+0xb2>
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae4:	2201      	movs	r2, #1
 800dae6:	fa02 f303 	lsl.w	r3, r2, r3
 800daea:	43da      	mvns	r2, r3
 800daec:	4b18      	ldr	r3, [pc, #96]	; (800db50 <xTaskPriorityDisinherit+0x10c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4013      	ands	r3, r2
 800daf2:	4a17      	ldr	r2, [pc, #92]	; (800db50 <xTaskPriorityDisinherit+0x10c>)
 800daf4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db02:	f1c3 0207 	rsb	r2, r3, #7
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0e:	2201      	movs	r2, #1
 800db10:	409a      	lsls	r2, r3
 800db12:	4b0f      	ldr	r3, [pc, #60]	; (800db50 <xTaskPriorityDisinherit+0x10c>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4313      	orrs	r3, r2
 800db18:	4a0d      	ldr	r2, [pc, #52]	; (800db50 <xTaskPriorityDisinherit+0x10c>)
 800db1a:	6013      	str	r3, [r2, #0]
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db20:	4613      	mov	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4a08      	ldr	r2, [pc, #32]	; (800db4c <xTaskPriorityDisinherit+0x108>)
 800db2a:	441a      	add	r2, r3
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	3304      	adds	r3, #4
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7fe f921 	bl	800bd7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800db38:	2301      	movs	r3, #1
 800db3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db3c:	697b      	ldr	r3, [r7, #20]
	}
 800db3e:	4618      	mov	r0, r3
 800db40:	3718      	adds	r7, #24
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	200003b8 	.word	0x200003b8
 800db4c:	200003bc 	.word	0x200003bc
 800db50:	200004c0 	.word	0x200004c0

0800db54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800db62:	2301      	movs	r3, #1
 800db64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f000 8085 	beq.w	800dc78 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10b      	bne.n	800db8e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800db76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7a:	b672      	cpsid	i
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	b662      	cpsie	i
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	e7fe      	b.n	800db8c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db92:	683a      	ldr	r2, [r7, #0]
 800db94:	429a      	cmp	r2, r3
 800db96:	d902      	bls.n	800db9e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	61fb      	str	r3, [r7, #28]
 800db9c:	e002      	b.n	800dba4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dba2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba8:	69fa      	ldr	r2, [r7, #28]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d064      	beq.n	800dc78 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d15f      	bne.n	800dc78 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dbb8:	4b31      	ldr	r3, [pc, #196]	; (800dc80 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	69ba      	ldr	r2, [r7, #24]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d10b      	bne.n	800dbda <vTaskPriorityDisinheritAfterTimeout+0x86>
 800dbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc6:	b672      	cpsid	i
 800dbc8:	f383 8811 	msr	BASEPRI, r3
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f3bf 8f4f 	dsb	sy
 800dbd4:	b662      	cpsie	i
 800dbd6:	60bb      	str	r3, [r7, #8]
 800dbd8:	e7fe      	b.n	800dbd8 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbde:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dbe0:	69bb      	ldr	r3, [r7, #24]
 800dbe2:	69fa      	ldr	r2, [r7, #28]
 800dbe4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	699b      	ldr	r3, [r3, #24]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	db04      	blt.n	800dbf8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	f1c3 0207 	rsb	r2, r3, #7
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	6959      	ldr	r1, [r3, #20]
 800dbfc:	693a      	ldr	r2, [r7, #16]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	4413      	add	r3, r2
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	4a1f      	ldr	r2, [pc, #124]	; (800dc84 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dc08:	4413      	add	r3, r2
 800dc0a:	4299      	cmp	r1, r3
 800dc0c:	d134      	bne.n	800dc78 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	3304      	adds	r3, #4
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fe f90e 	bl	800be34 <uxListRemove>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d115      	bne.n	800dc4a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc22:	4918      	ldr	r1, [pc, #96]	; (800dc84 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dc24:	4613      	mov	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	440b      	add	r3, r1
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10a      	bne.n	800dc4a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc38:	2201      	movs	r2, #1
 800dc3a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc3e:	43da      	mvns	r2, r3
 800dc40:	4b11      	ldr	r3, [pc, #68]	; (800dc88 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4013      	ands	r3, r2
 800dc46:	4a10      	ldr	r2, [pc, #64]	; (800dc88 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dc48:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4e:	2201      	movs	r2, #1
 800dc50:	409a      	lsls	r2, r3
 800dc52:	4b0d      	ldr	r3, [pc, #52]	; (800dc88 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	4a0b      	ldr	r2, [pc, #44]	; (800dc88 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dc5a:	6013      	str	r3, [r2, #0]
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc60:	4613      	mov	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	4413      	add	r3, r2
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	4a06      	ldr	r2, [pc, #24]	; (800dc84 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dc6a:	441a      	add	r2, r3
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	3304      	adds	r3, #4
 800dc70:	4619      	mov	r1, r3
 800dc72:	4610      	mov	r0, r2
 800dc74:	f7fe f881 	bl	800bd7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc78:	bf00      	nop
 800dc7a:	3720      	adds	r7, #32
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	200003b8 	.word	0x200003b8
 800dc84:	200003bc 	.word	0x200003bc
 800dc88:	200004c0 	.word	0x200004c0

0800dc8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dc8c:	b480      	push	{r7}
 800dc8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dc90:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d004      	beq.n	800dca2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dc98:	4b05      	ldr	r3, [pc, #20]	; (800dcb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc9e:	3201      	adds	r2, #1
 800dca0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800dca2:	4b03      	ldr	r3, [pc, #12]	; (800dcb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dca4:	681b      	ldr	r3, [r3, #0]
	}
 800dca6:	4618      	mov	r0, r3
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr
 800dcb0:	200003b8 	.word	0x200003b8

0800dcb4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dcbe:	4b29      	ldr	r3, [pc, #164]	; (800dd64 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcc4:	4b28      	ldr	r3, [pc, #160]	; (800dd68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	3304      	adds	r3, #4
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe f8b2 	bl	800be34 <uxListRemove>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10b      	bne.n	800dcee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dcd6:	4b24      	ldr	r3, [pc, #144]	; (800dd68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcdc:	2201      	movs	r2, #1
 800dcde:	fa02 f303 	lsl.w	r3, r2, r3
 800dce2:	43da      	mvns	r2, r3
 800dce4:	4b21      	ldr	r3, [pc, #132]	; (800dd6c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4013      	ands	r3, r2
 800dcea:	4a20      	ldr	r2, [pc, #128]	; (800dd6c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dcec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf4:	d10a      	bne.n	800dd0c <prvAddCurrentTaskToDelayedList+0x58>
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d007      	beq.n	800dd0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcfc:	4b1a      	ldr	r3, [pc, #104]	; (800dd68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	3304      	adds	r3, #4
 800dd02:	4619      	mov	r1, r3
 800dd04:	481a      	ldr	r0, [pc, #104]	; (800dd70 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dd06:	f7fe f838 	bl	800bd7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd0a:	e026      	b.n	800dd5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4413      	add	r3, r2
 800dd12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd14:	4b14      	ldr	r3, [pc, #80]	; (800dd68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d209      	bcs.n	800dd38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd24:	4b13      	ldr	r3, [pc, #76]	; (800dd74 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	4b0f      	ldr	r3, [pc, #60]	; (800dd68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	4619      	mov	r1, r3
 800dd30:	4610      	mov	r0, r2
 800dd32:	f7fe f846 	bl	800bdc2 <vListInsert>
}
 800dd36:	e010      	b.n	800dd5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd38:	4b0f      	ldr	r3, [pc, #60]	; (800dd78 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	4b0a      	ldr	r3, [pc, #40]	; (800dd68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	3304      	adds	r3, #4
 800dd42:	4619      	mov	r1, r3
 800dd44:	4610      	mov	r0, r2
 800dd46:	f7fe f83c 	bl	800bdc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dd4a:	4b0c      	ldr	r3, [pc, #48]	; (800dd7c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68ba      	ldr	r2, [r7, #8]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d202      	bcs.n	800dd5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dd54:	4a09      	ldr	r2, [pc, #36]	; (800dd7c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	6013      	str	r3, [r2, #0]
}
 800dd5a:	bf00      	nop
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	200004bc 	.word	0x200004bc
 800dd68:	200003b8 	.word	0x200003b8
 800dd6c:	200004c0 	.word	0x200004c0
 800dd70:	200004a4 	.word	0x200004a4
 800dd74:	20000474 	.word	0x20000474
 800dd78:	20000470 	.word	0x20000470
 800dd7c:	200004d8 	.word	0x200004d8

0800dd80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	3b04      	subs	r3, #4
 800dd90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dd98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	3b04      	subs	r3, #4
 800dd9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	f023 0201 	bic.w	r2, r3, #1
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	3b04      	subs	r3, #4
 800ddae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ddb0:	4a0c      	ldr	r2, [pc, #48]	; (800dde4 <pxPortInitialiseStack+0x64>)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3b14      	subs	r3, #20
 800ddba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	3b04      	subs	r3, #4
 800ddc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f06f 0202 	mvn.w	r2, #2
 800ddce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	3b20      	subs	r3, #32
 800ddd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3714      	adds	r7, #20
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr
 800dde4:	0800dde9 	.word	0x0800dde9

0800dde8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ddf2:	4b13      	ldr	r3, [pc, #76]	; (800de40 <prvTaskExitError+0x58>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddfa:	d00b      	beq.n	800de14 <prvTaskExitError+0x2c>
 800ddfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de00:	b672      	cpsid	i
 800de02:	f383 8811 	msr	BASEPRI, r3
 800de06:	f3bf 8f6f 	isb	sy
 800de0a:	f3bf 8f4f 	dsb	sy
 800de0e:	b662      	cpsie	i
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	e7fe      	b.n	800de12 <prvTaskExitError+0x2a>
 800de14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de18:	b672      	cpsid	i
 800de1a:	f383 8811 	msr	BASEPRI, r3
 800de1e:	f3bf 8f6f 	isb	sy
 800de22:	f3bf 8f4f 	dsb	sy
 800de26:	b662      	cpsie	i
 800de28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de2a:	bf00      	nop
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d0fc      	beq.n	800de2c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de32:	bf00      	nop
 800de34:	3714      	adds	r7, #20
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	20000024 	.word	0x20000024
	...

0800de50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de50:	4b07      	ldr	r3, [pc, #28]	; (800de70 <pxCurrentTCBConst2>)
 800de52:	6819      	ldr	r1, [r3, #0]
 800de54:	6808      	ldr	r0, [r1, #0]
 800de56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5a:	f380 8809 	msr	PSP, r0
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f04f 0000 	mov.w	r0, #0
 800de66:	f380 8811 	msr	BASEPRI, r0
 800de6a:	4770      	bx	lr
 800de6c:	f3af 8000 	nop.w

0800de70 <pxCurrentTCBConst2>:
 800de70:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop

0800de78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de78:	4808      	ldr	r0, [pc, #32]	; (800de9c <prvPortStartFirstTask+0x24>)
 800de7a:	6800      	ldr	r0, [r0, #0]
 800de7c:	6800      	ldr	r0, [r0, #0]
 800de7e:	f380 8808 	msr	MSP, r0
 800de82:	f04f 0000 	mov.w	r0, #0
 800de86:	f380 8814 	msr	CONTROL, r0
 800de8a:	b662      	cpsie	i
 800de8c:	b661      	cpsie	f
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	f3bf 8f6f 	isb	sy
 800de96:	df00      	svc	0
 800de98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de9a:	bf00      	nop
 800de9c:	e000ed08 	.word	0xe000ed08

0800dea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dea6:	4b36      	ldr	r3, [pc, #216]	; (800df80 <xPortStartScheduler+0xe0>)
 800dea8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	22ff      	movs	r2, #255	; 0xff
 800deb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	b2db      	uxtb	r3, r3
 800debe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dec0:	78fb      	ldrb	r3, [r7, #3]
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	4b2e      	ldr	r3, [pc, #184]	; (800df84 <xPortStartScheduler+0xe4>)
 800decc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dece:	4b2e      	ldr	r3, [pc, #184]	; (800df88 <xPortStartScheduler+0xe8>)
 800ded0:	2207      	movs	r2, #7
 800ded2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ded4:	e009      	b.n	800deea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ded6:	4b2c      	ldr	r3, [pc, #176]	; (800df88 <xPortStartScheduler+0xe8>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	3b01      	subs	r3, #1
 800dedc:	4a2a      	ldr	r2, [pc, #168]	; (800df88 <xPortStartScheduler+0xe8>)
 800dede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dee0:	78fb      	ldrb	r3, [r7, #3]
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800deea:	78fb      	ldrb	r3, [r7, #3]
 800deec:	b2db      	uxtb	r3, r3
 800deee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800def2:	2b80      	cmp	r3, #128	; 0x80
 800def4:	d0ef      	beq.n	800ded6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800def6:	4b24      	ldr	r3, [pc, #144]	; (800df88 <xPortStartScheduler+0xe8>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f1c3 0307 	rsb	r3, r3, #7
 800defe:	2b04      	cmp	r3, #4
 800df00:	d00b      	beq.n	800df1a <xPortStartScheduler+0x7a>
 800df02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df06:	b672      	cpsid	i
 800df08:	f383 8811 	msr	BASEPRI, r3
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	b662      	cpsie	i
 800df16:	60bb      	str	r3, [r7, #8]
 800df18:	e7fe      	b.n	800df18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df1a:	4b1b      	ldr	r3, [pc, #108]	; (800df88 <xPortStartScheduler+0xe8>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	021b      	lsls	r3, r3, #8
 800df20:	4a19      	ldr	r2, [pc, #100]	; (800df88 <xPortStartScheduler+0xe8>)
 800df22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df24:	4b18      	ldr	r3, [pc, #96]	; (800df88 <xPortStartScheduler+0xe8>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df2c:	4a16      	ldr	r2, [pc, #88]	; (800df88 <xPortStartScheduler+0xe8>)
 800df2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	b2da      	uxtb	r2, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df38:	4b14      	ldr	r3, [pc, #80]	; (800df8c <xPortStartScheduler+0xec>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a13      	ldr	r2, [pc, #76]	; (800df8c <xPortStartScheduler+0xec>)
 800df3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800df42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df44:	4b11      	ldr	r3, [pc, #68]	; (800df8c <xPortStartScheduler+0xec>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a10      	ldr	r2, [pc, #64]	; (800df8c <xPortStartScheduler+0xec>)
 800df4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800df4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df50:	f000 f8d4 	bl	800e0fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df54:	4b0e      	ldr	r3, [pc, #56]	; (800df90 <xPortStartScheduler+0xf0>)
 800df56:	2200      	movs	r2, #0
 800df58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800df5a:	f000 f8f3 	bl	800e144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800df5e:	4b0d      	ldr	r3, [pc, #52]	; (800df94 <xPortStartScheduler+0xf4>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a0c      	ldr	r2, [pc, #48]	; (800df94 <xPortStartScheduler+0xf4>)
 800df64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800df68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800df6a:	f7ff ff85 	bl	800de78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800df6e:	f7ff fa63 	bl	800d438 <vTaskSwitchContext>
	prvTaskExitError();
 800df72:	f7ff ff39 	bl	800dde8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	e000e400 	.word	0xe000e400
 800df84:	200004e4 	.word	0x200004e4
 800df88:	200004e8 	.word	0x200004e8
 800df8c:	e000ed20 	.word	0xe000ed20
 800df90:	20000024 	.word	0x20000024
 800df94:	e000ef34 	.word	0xe000ef34

0800df98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	b672      	cpsid	i
 800dfa4:	f383 8811 	msr	BASEPRI, r3
 800dfa8:	f3bf 8f6f 	isb	sy
 800dfac:	f3bf 8f4f 	dsb	sy
 800dfb0:	b662      	cpsie	i
 800dfb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dfb4:	4b0f      	ldr	r3, [pc, #60]	; (800dff4 <vPortEnterCritical+0x5c>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	4a0e      	ldr	r2, [pc, #56]	; (800dff4 <vPortEnterCritical+0x5c>)
 800dfbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dfbe:	4b0d      	ldr	r3, [pc, #52]	; (800dff4 <vPortEnterCritical+0x5c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d110      	bne.n	800dfe8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dfc6:	4b0c      	ldr	r3, [pc, #48]	; (800dff8 <vPortEnterCritical+0x60>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00b      	beq.n	800dfe8 <vPortEnterCritical+0x50>
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	b672      	cpsid	i
 800dfd6:	f383 8811 	msr	BASEPRI, r3
 800dfda:	f3bf 8f6f 	isb	sy
 800dfde:	f3bf 8f4f 	dsb	sy
 800dfe2:	b662      	cpsie	i
 800dfe4:	603b      	str	r3, [r7, #0]
 800dfe6:	e7fe      	b.n	800dfe6 <vPortEnterCritical+0x4e>
	}
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr
 800dff4:	20000024 	.word	0x20000024
 800dff8:	e000ed04 	.word	0xe000ed04

0800dffc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e002:	4b12      	ldr	r3, [pc, #72]	; (800e04c <vPortExitCritical+0x50>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d10b      	bne.n	800e022 <vPortExitCritical+0x26>
 800e00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00e:	b672      	cpsid	i
 800e010:	f383 8811 	msr	BASEPRI, r3
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	b662      	cpsie	i
 800e01e:	607b      	str	r3, [r7, #4]
 800e020:	e7fe      	b.n	800e020 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e022:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <vPortExitCritical+0x50>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	3b01      	subs	r3, #1
 800e028:	4a08      	ldr	r2, [pc, #32]	; (800e04c <vPortExitCritical+0x50>)
 800e02a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e02c:	4b07      	ldr	r3, [pc, #28]	; (800e04c <vPortExitCritical+0x50>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d104      	bne.n	800e03e <vPortExitCritical+0x42>
 800e034:	2300      	movs	r3, #0
 800e036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e03e:	bf00      	nop
 800e040:	370c      	adds	r7, #12
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	20000024 	.word	0x20000024

0800e050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e050:	f3ef 8009 	mrs	r0, PSP
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	4b15      	ldr	r3, [pc, #84]	; (800e0b0 <pxCurrentTCBConst>)
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	f01e 0f10 	tst.w	lr, #16
 800e060:	bf08      	it	eq
 800e062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e06a:	6010      	str	r0, [r2, #0]
 800e06c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e070:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e074:	b672      	cpsid	i
 800e076:	f380 8811 	msr	BASEPRI, r0
 800e07a:	f3bf 8f4f 	dsb	sy
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	b662      	cpsie	i
 800e084:	f7ff f9d8 	bl	800d438 <vTaskSwitchContext>
 800e088:	f04f 0000 	mov.w	r0, #0
 800e08c:	f380 8811 	msr	BASEPRI, r0
 800e090:	bc09      	pop	{r0, r3}
 800e092:	6819      	ldr	r1, [r3, #0]
 800e094:	6808      	ldr	r0, [r1, #0]
 800e096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e09a:	f01e 0f10 	tst.w	lr, #16
 800e09e:	bf08      	it	eq
 800e0a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e0a4:	f380 8809 	msr	PSP, r0
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop

0800e0b0 <pxCurrentTCBConst>:
 800e0b0:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e0b4:	bf00      	nop
 800e0b6:	bf00      	nop

0800e0b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c2:	b672      	cpsid	i
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	b662      	cpsie	i
 800e0d2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e0d4:	f7ff f8f6 	bl	800d2c4 <xTaskIncrementTick>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d003      	beq.n	800e0e6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e0de:	4b06      	ldr	r3, [pc, #24]	; (800e0f8 <SysTick_Handler+0x40>)
 800e0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0e4:	601a      	str	r2, [r3, #0]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e0f0:	bf00      	nop
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	e000ed04 	.word	0xe000ed04

0800e0fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e100:	4b0b      	ldr	r3, [pc, #44]	; (800e130 <vPortSetupTimerInterrupt+0x34>)
 800e102:	2200      	movs	r2, #0
 800e104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e106:	4b0b      	ldr	r3, [pc, #44]	; (800e134 <vPortSetupTimerInterrupt+0x38>)
 800e108:	2200      	movs	r2, #0
 800e10a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e10c:	4b0a      	ldr	r3, [pc, #40]	; (800e138 <vPortSetupTimerInterrupt+0x3c>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a0a      	ldr	r2, [pc, #40]	; (800e13c <vPortSetupTimerInterrupt+0x40>)
 800e112:	fba2 2303 	umull	r2, r3, r2, r3
 800e116:	099b      	lsrs	r3, r3, #6
 800e118:	4a09      	ldr	r2, [pc, #36]	; (800e140 <vPortSetupTimerInterrupt+0x44>)
 800e11a:	3b01      	subs	r3, #1
 800e11c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e11e:	4b04      	ldr	r3, [pc, #16]	; (800e130 <vPortSetupTimerInterrupt+0x34>)
 800e120:	2207      	movs	r2, #7
 800e122:	601a      	str	r2, [r3, #0]
}
 800e124:	bf00      	nop
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	e000e010 	.word	0xe000e010
 800e134:	e000e018 	.word	0xe000e018
 800e138:	20000018 	.word	0x20000018
 800e13c:	10624dd3 	.word	0x10624dd3
 800e140:	e000e014 	.word	0xe000e014

0800e144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e154 <vPortEnableVFP+0x10>
 800e148:	6801      	ldr	r1, [r0, #0]
 800e14a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e14e:	6001      	str	r1, [r0, #0]
 800e150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e152:	bf00      	nop
 800e154:	e000ed88 	.word	0xe000ed88

0800e158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e15e:	f3ef 8305 	mrs	r3, IPSR
 800e162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2b0f      	cmp	r3, #15
 800e168:	d915      	bls.n	800e196 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e16a:	4a18      	ldr	r2, [pc, #96]	; (800e1cc <vPortValidateInterruptPriority+0x74>)
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	4413      	add	r3, r2
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e174:	4b16      	ldr	r3, [pc, #88]	; (800e1d0 <vPortValidateInterruptPriority+0x78>)
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	7afa      	ldrb	r2, [r7, #11]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d20b      	bcs.n	800e196 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e182:	b672      	cpsid	i
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	b662      	cpsie	i
 800e192:	607b      	str	r3, [r7, #4]
 800e194:	e7fe      	b.n	800e194 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e196:	4b0f      	ldr	r3, [pc, #60]	; (800e1d4 <vPortValidateInterruptPriority+0x7c>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e19e:	4b0e      	ldr	r3, [pc, #56]	; (800e1d8 <vPortValidateInterruptPriority+0x80>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d90b      	bls.n	800e1be <vPortValidateInterruptPriority+0x66>
 800e1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1aa:	b672      	cpsid	i
 800e1ac:	f383 8811 	msr	BASEPRI, r3
 800e1b0:	f3bf 8f6f 	isb	sy
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	b662      	cpsie	i
 800e1ba:	603b      	str	r3, [r7, #0]
 800e1bc:	e7fe      	b.n	800e1bc <vPortValidateInterruptPriority+0x64>
	}
 800e1be:	bf00      	nop
 800e1c0:	3714      	adds	r7, #20
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	e000e3f0 	.word	0xe000e3f0
 800e1d0:	200004e4 	.word	0x200004e4
 800e1d4:	e000ed0c 	.word	0xe000ed0c
 800e1d8:	200004e8 	.word	0x200004e8

0800e1dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08a      	sub	sp, #40	; 0x28
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e1e8:	f7fe ff9e 	bl	800d128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e1ec:	4b5c      	ldr	r3, [pc, #368]	; (800e360 <pvPortMalloc+0x184>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e1f4:	f000 f91a 	bl	800e42c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e1f8:	4b5a      	ldr	r3, [pc, #360]	; (800e364 <pvPortMalloc+0x188>)
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4013      	ands	r3, r2
 800e200:	2b00      	cmp	r3, #0
 800e202:	f040 8090 	bne.w	800e326 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d01e      	beq.n	800e24a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e20c:	2208      	movs	r2, #8
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4413      	add	r3, r2
 800e212:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f003 0307 	and.w	r3, r3, #7
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d015      	beq.n	800e24a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f023 0307 	bic.w	r3, r3, #7
 800e224:	3308      	adds	r3, #8
 800e226:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f003 0307 	and.w	r3, r3, #7
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00b      	beq.n	800e24a <pvPortMalloc+0x6e>
 800e232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e236:	b672      	cpsid	i
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	b662      	cpsie	i
 800e246:	617b      	str	r3, [r7, #20]
 800e248:	e7fe      	b.n	800e248 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d06a      	beq.n	800e326 <pvPortMalloc+0x14a>
 800e250:	4b45      	ldr	r3, [pc, #276]	; (800e368 <pvPortMalloc+0x18c>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	429a      	cmp	r2, r3
 800e258:	d865      	bhi.n	800e326 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e25a:	4b44      	ldr	r3, [pc, #272]	; (800e36c <pvPortMalloc+0x190>)
 800e25c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e25e:	4b43      	ldr	r3, [pc, #268]	; (800e36c <pvPortMalloc+0x190>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e264:	e004      	b.n	800e270 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e268:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	429a      	cmp	r2, r3
 800e278:	d903      	bls.n	800e282 <pvPortMalloc+0xa6>
 800e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d1f1      	bne.n	800e266 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e282:	4b37      	ldr	r3, [pc, #220]	; (800e360 <pvPortMalloc+0x184>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e288:	429a      	cmp	r2, r3
 800e28a:	d04c      	beq.n	800e326 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2208      	movs	r2, #8
 800e292:	4413      	add	r3, r2
 800e294:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a0:	685a      	ldr	r2, [r3, #4]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	1ad2      	subs	r2, r2, r3
 800e2a6:	2308      	movs	r3, #8
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d920      	bls.n	800e2f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e2ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	f003 0307 	and.w	r3, r3, #7
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00b      	beq.n	800e2d8 <pvPortMalloc+0xfc>
 800e2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c4:	b672      	cpsid	i
 800e2c6:	f383 8811 	msr	BASEPRI, r3
 800e2ca:	f3bf 8f6f 	isb	sy
 800e2ce:	f3bf 8f4f 	dsb	sy
 800e2d2:	b662      	cpsie	i
 800e2d4:	613b      	str	r3, [r7, #16]
 800e2d6:	e7fe      	b.n	800e2d6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2da:	685a      	ldr	r2, [r3, #4]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	1ad2      	subs	r2, r2, r3
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e2ea:	69b8      	ldr	r0, [r7, #24]
 800e2ec:	f000 f900 	bl	800e4f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2f0:	4b1d      	ldr	r3, [pc, #116]	; (800e368 <pvPortMalloc+0x18c>)
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	4a1b      	ldr	r2, [pc, #108]	; (800e368 <pvPortMalloc+0x18c>)
 800e2fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2fe:	4b1a      	ldr	r3, [pc, #104]	; (800e368 <pvPortMalloc+0x18c>)
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	4b1b      	ldr	r3, [pc, #108]	; (800e370 <pvPortMalloc+0x194>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	429a      	cmp	r2, r3
 800e308:	d203      	bcs.n	800e312 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e30a:	4b17      	ldr	r3, [pc, #92]	; (800e368 <pvPortMalloc+0x18c>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	4a18      	ldr	r2, [pc, #96]	; (800e370 <pvPortMalloc+0x194>)
 800e310:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	4b13      	ldr	r3, [pc, #76]	; (800e364 <pvPortMalloc+0x188>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	431a      	orrs	r2, r3
 800e31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	2200      	movs	r2, #0
 800e324:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e326:	f7fe ff0d 	bl	800d144 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d101      	bne.n	800e334 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e330:	f7f2 f950 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	f003 0307 	and.w	r3, r3, #7
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00b      	beq.n	800e356 <pvPortMalloc+0x17a>
 800e33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e342:	b672      	cpsid	i
 800e344:	f383 8811 	msr	BASEPRI, r3
 800e348:	f3bf 8f6f 	isb	sy
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	b662      	cpsie	i
 800e352:	60fb      	str	r3, [r7, #12]
 800e354:	e7fe      	b.n	800e354 <pvPortMalloc+0x178>
	return pvReturn;
 800e356:	69fb      	ldr	r3, [r7, #28]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3728      	adds	r7, #40	; 0x28
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	200084f4 	.word	0x200084f4
 800e364:	20008500 	.word	0x20008500
 800e368:	200084f8 	.word	0x200084f8
 800e36c:	200084ec 	.word	0x200084ec
 800e370:	200084fc 	.word	0x200084fc

0800e374 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d04a      	beq.n	800e41c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e386:	2308      	movs	r3, #8
 800e388:	425b      	negs	r3, r3
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	4413      	add	r3, r2
 800e38e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	685a      	ldr	r2, [r3, #4]
 800e398:	4b22      	ldr	r3, [pc, #136]	; (800e424 <vPortFree+0xb0>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4013      	ands	r3, r2
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d10b      	bne.n	800e3ba <vPortFree+0x46>
 800e3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a6:	b672      	cpsid	i
 800e3a8:	f383 8811 	msr	BASEPRI, r3
 800e3ac:	f3bf 8f6f 	isb	sy
 800e3b0:	f3bf 8f4f 	dsb	sy
 800e3b4:	b662      	cpsie	i
 800e3b6:	60fb      	str	r3, [r7, #12]
 800e3b8:	e7fe      	b.n	800e3b8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d00b      	beq.n	800e3da <vPortFree+0x66>
 800e3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c6:	b672      	cpsid	i
 800e3c8:	f383 8811 	msr	BASEPRI, r3
 800e3cc:	f3bf 8f6f 	isb	sy
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	b662      	cpsie	i
 800e3d6:	60bb      	str	r3, [r7, #8]
 800e3d8:	e7fe      	b.n	800e3d8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	685a      	ldr	r2, [r3, #4]
 800e3de:	4b11      	ldr	r3, [pc, #68]	; (800e424 <vPortFree+0xb0>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4013      	ands	r3, r2
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d019      	beq.n	800e41c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d115      	bne.n	800e41c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	685a      	ldr	r2, [r3, #4]
 800e3f4:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <vPortFree+0xb0>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	43db      	mvns	r3, r3
 800e3fa:	401a      	ands	r2, r3
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e400:	f7fe fe92 	bl	800d128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	685a      	ldr	r2, [r3, #4]
 800e408:	4b07      	ldr	r3, [pc, #28]	; (800e428 <vPortFree+0xb4>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4413      	add	r3, r2
 800e40e:	4a06      	ldr	r2, [pc, #24]	; (800e428 <vPortFree+0xb4>)
 800e410:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e412:	6938      	ldr	r0, [r7, #16]
 800e414:	f000 f86c 	bl	800e4f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e418:	f7fe fe94 	bl	800d144 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e41c:	bf00      	nop
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	20008500 	.word	0x20008500
 800e428:	200084f8 	.word	0x200084f8

0800e42c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e42c:	b480      	push	{r7}
 800e42e:	b085      	sub	sp, #20
 800e430:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e436:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e438:	4b27      	ldr	r3, [pc, #156]	; (800e4d8 <prvHeapInit+0xac>)
 800e43a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f003 0307 	and.w	r3, r3, #7
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00c      	beq.n	800e460 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	3307      	adds	r3, #7
 800e44a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f023 0307 	bic.w	r3, r3, #7
 800e452:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e454:	68ba      	ldr	r2, [r7, #8]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	1ad3      	subs	r3, r2, r3
 800e45a:	4a1f      	ldr	r2, [pc, #124]	; (800e4d8 <prvHeapInit+0xac>)
 800e45c:	4413      	add	r3, r2
 800e45e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e464:	4a1d      	ldr	r2, [pc, #116]	; (800e4dc <prvHeapInit+0xb0>)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e46a:	4b1c      	ldr	r3, [pc, #112]	; (800e4dc <prvHeapInit+0xb0>)
 800e46c:	2200      	movs	r2, #0
 800e46e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	68ba      	ldr	r2, [r7, #8]
 800e474:	4413      	add	r3, r2
 800e476:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e478:	2208      	movs	r2, #8
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	1a9b      	subs	r3, r3, r2
 800e47e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f023 0307 	bic.w	r3, r3, #7
 800e486:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	4a15      	ldr	r2, [pc, #84]	; (800e4e0 <prvHeapInit+0xb4>)
 800e48c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e48e:	4b14      	ldr	r3, [pc, #80]	; (800e4e0 <prvHeapInit+0xb4>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	2200      	movs	r2, #0
 800e494:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e496:	4b12      	ldr	r3, [pc, #72]	; (800e4e0 <prvHeapInit+0xb4>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	1ad2      	subs	r2, r2, r3
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e4ac:	4b0c      	ldr	r3, [pc, #48]	; (800e4e0 <prvHeapInit+0xb4>)
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	4a0a      	ldr	r2, [pc, #40]	; (800e4e4 <prvHeapInit+0xb8>)
 800e4ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	4a09      	ldr	r2, [pc, #36]	; (800e4e8 <prvHeapInit+0xbc>)
 800e4c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e4c4:	4b09      	ldr	r3, [pc, #36]	; (800e4ec <prvHeapInit+0xc0>)
 800e4c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e4ca:	601a      	str	r2, [r3, #0]
}
 800e4cc:	bf00      	nop
 800e4ce:	3714      	adds	r7, #20
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr
 800e4d8:	200004ec 	.word	0x200004ec
 800e4dc:	200084ec 	.word	0x200084ec
 800e4e0:	200084f4 	.word	0x200084f4
 800e4e4:	200084fc 	.word	0x200084fc
 800e4e8:	200084f8 	.word	0x200084f8
 800e4ec:	20008500 	.word	0x20008500

0800e4f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4f8:	4b28      	ldr	r3, [pc, #160]	; (800e59c <prvInsertBlockIntoFreeList+0xac>)
 800e4fa:	60fb      	str	r3, [r7, #12]
 800e4fc:	e002      	b.n	800e504 <prvInsertBlockIntoFreeList+0x14>
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	60fb      	str	r3, [r7, #12]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d8f7      	bhi.n	800e4fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	68ba      	ldr	r2, [r7, #8]
 800e518:	4413      	add	r3, r2
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d108      	bne.n	800e532 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	685a      	ldr	r2, [r3, #4]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	441a      	add	r2, r3
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	68ba      	ldr	r2, [r7, #8]
 800e53c:	441a      	add	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d118      	bne.n	800e578 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	4b15      	ldr	r3, [pc, #84]	; (800e5a0 <prvInsertBlockIntoFreeList+0xb0>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	429a      	cmp	r2, r3
 800e550:	d00d      	beq.n	800e56e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	685a      	ldr	r2, [r3, #4]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	441a      	add	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	601a      	str	r2, [r3, #0]
 800e56c:	e008      	b.n	800e580 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e56e:	4b0c      	ldr	r3, [pc, #48]	; (800e5a0 <prvInsertBlockIntoFreeList+0xb0>)
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	601a      	str	r2, [r3, #0]
 800e576:	e003      	b.n	800e580 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	429a      	cmp	r2, r3
 800e586:	d002      	beq.n	800e58e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e58e:	bf00      	nop
 800e590:	3714      	adds	r7, #20
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	200084ec 	.word	0x200084ec
 800e5a0:	200084f4 	.word	0x200084f4

0800e5a4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800e5a8:	f005 fa0c 	bl	80139c4 <touchgfx_init>
}
 800e5ac:	bf00      	nop
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800e5b4:	f005 fa30 	bl	8013a18 <touchgfx_taskEntry>
}
 800e5b8:	bf00      	nop
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
    {
 800e5c4:	4a04      	ldr	r2, [pc, #16]	; (800e5d8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	601a      	str	r2, [r3, #0]
    }
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr
 800e5d8:	08025590 	.word	0x08025590

0800e5dc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
    }
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7ff ffe9 	bl	800e5bc <_ZN8touchgfx12FontProviderD1Ev>
 800e5ea:	2104      	movs	r1, #4
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f015 fc10 	bl	8023e12 <_ZdlPvj>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	460b      	mov	r3, r1
 800e606:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800e608:	887b      	ldrh	r3, [r7, #2]
 800e60a:	2b07      	cmp	r3, #7
 800e60c:	d83a      	bhi.n	800e684 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800e60e:	a201      	add	r2, pc, #4	; (adr r2, 800e614 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800e610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e614:	0800e635 	.word	0x0800e635
 800e618:	0800e63f 	.word	0x0800e63f
 800e61c:	0800e649 	.word	0x0800e649
 800e620:	0800e653 	.word	0x0800e653
 800e624:	0800e65d 	.word	0x0800e65d
 800e628:	0800e667 	.word	0x0800e667
 800e62c:	0800e671 	.word	0x0800e671
 800e630:	0800e67b 	.word	0x0800e67b
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800e634:	f003 fbc8 	bl	8011dc8 <_ZN17TypedTextDatabase8getFontsEv>
 800e638:	4603      	mov	r3, r0
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	e023      	b.n	800e686 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800e63e:	f003 fbc3 	bl	8011dc8 <_ZN17TypedTextDatabase8getFontsEv>
 800e642:	4603      	mov	r3, r0
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	e01e      	b.n	800e686 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800e648:	f003 fbbe 	bl	8011dc8 <_ZN17TypedTextDatabase8getFontsEv>
 800e64c:	4603      	mov	r3, r0
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	e019      	b.n	800e686 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800e652:	f003 fbb9 	bl	8011dc8 <_ZN17TypedTextDatabase8getFontsEv>
 800e656:	4603      	mov	r3, r0
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	e014      	b.n	800e686 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800e65c:	f003 fbb4 	bl	8011dc8 <_ZN17TypedTextDatabase8getFontsEv>
 800e660:	4603      	mov	r3, r0
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	e00f      	b.n	800e686 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800e666:	f003 fbaf 	bl	8011dc8 <_ZN17TypedTextDatabase8getFontsEv>
 800e66a:	4603      	mov	r3, r0
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	e00a      	b.n	800e686 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800e670:	f003 fbaa 	bl	8011dc8 <_ZN17TypedTextDatabase8getFontsEv>
 800e674:	4603      	mov	r3, r0
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	e005      	b.n	800e686 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800e67a:	f003 fba5 	bl	8011dc8 <_ZN17TypedTextDatabase8getFontsEv>
 800e67e:	4603      	mov	r3, r0
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	e000      	b.n	800e686 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800e684:	2300      	movs	r3, #0
    }
}
 800e686:	4618      	mov	r0, r3
 800e688:	3708      	adds	r7, #8
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop

0800e690 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	4a05      	ldr	r2, [pc, #20]	; (800e6b0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7ff ff8b 	bl	800e5bc <_ZN8touchgfx12FontProviderD1Ev>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	0802557c 	.word	0x0802557c

0800e6b4 <_ZN23ApplicationFontProviderD0Ev>:
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7ff ffe7 	bl	800e690 <_ZN23ApplicationFontProviderD1Ev>
 800e6c2:	2104      	movs	r1, #4
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f015 fba4 	bl	8023e12 <_ZdlPvj>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	4a04      	ldr	r2, [pc, #16]	; (800e6f0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	601a      	str	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	080277fc 	.word	0x080277fc

0800e6f4 <_ZN8touchgfx4FontD0Ev>:
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7ff ffe9 	bl	800e6d4 <_ZN8touchgfx4FontD1Ev>
 800e702:	2110      	movs	r1, #16
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f015 fb84 	bl	8023e12 <_ZdlPvj>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4618      	mov	r0, r3
 800e70e:	3708      	adds	r7, #8
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800e714:	b590      	push	{r4, r7, lr}
 800e716:	b087      	sub	sp, #28
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	460b      	mov	r3, r1
 800e71e:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800e720:	2300      	movs	r3, #0
 800e722:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800e724:	2300      	movs	r3, #0
 800e726:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	3308      	adds	r3, #8
 800e72e:	681c      	ldr	r4, [r3, #0]
 800e730:	f107 030f 	add.w	r3, r7, #15
 800e734:	f107 0210 	add.w	r2, r7, #16
 800e738:	8879      	ldrh	r1, [r7, #2]
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	47a0      	blx	r4
 800e73e:	6178      	str	r0, [r7, #20]
        return glyph;
 800e740:	697b      	ldr	r3, [r7, #20]
    }
 800e742:	4618      	mov	r0, r3
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	bd90      	pop	{r4, r7, pc}

0800e74a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800e74a:	b480      	push	{r7}
 800e74c:	b083      	sub	sp, #12
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	895b      	ldrh	r3, [r3, #10]
    }
 800e756:	4618      	mov	r0, r3
 800e758:	370c      	adds	r7, #12
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr

0800e762 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800e762:	b480      	push	{r7}
 800e764:	b083      	sub	sp, #12
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	899b      	ldrh	r3, [r3, #12]
    }
 800e76e:	4618      	mov	r0, r3
 800e770:	370c      	adds	r7, #12
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr

0800e77a <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800e77a:	b480      	push	{r7}
 800e77c:	b083      	sub	sp, #12
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	889b      	ldrh	r3, [r3, #4]
    }
 800e786:	4618      	mov	r0, r3
 800e788:	370c      	adds	r7, #12
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr

0800e792 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800e792:	b480      	push	{r7}
 800e794:	b083      	sub	sp, #12
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	889a      	ldrh	r2, [r3, #4]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	799b      	ldrb	r3, [r3, #6]
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	4413      	add	r3, r2
 800e7a6:	b29b      	uxth	r3, r3
    }
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	370c      	adds	r7, #12
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr

0800e7b4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	79db      	ldrb	r3, [r3, #7]
 800e7c0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800e7c4:	b2db      	uxtb	r3, r3
    }
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800e7d2:	b480      	push	{r7}
 800e7d4:	b083      	sub	sp, #12
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	79db      	ldrb	r3, [r3, #7]
 800e7de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e7e2:	b2db      	uxtb	r3, r3
    }
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	4a05      	ldr	r2, [pc, #20]	; (800e810 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	601a      	str	r2, [r3, #0]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff ff67 	bl	800e6d4 <_ZN8touchgfx4FontD1Ev>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4618      	mov	r0, r3
 800e80a:	3708      	adds	r7, #8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	080278b4 	.word	0x080278b4

0800e814 <_ZN8touchgfx9ConstFontD0Ev>:
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7ff ffe7 	bl	800e7f0 <_ZN8touchgfx9ConstFontD1Ev>
 800e822:	2118      	movs	r1, #24
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f015 faf4 	bl	8023e12 <_ZdlPvj>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	4618      	mov	r0, r3
 800e82e:	3708      	adds	r7, #8
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	4a05      	ldr	r2, [pc, #20]	; (800e854 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4618      	mov	r0, r3
 800e846:	f7ff ffd3 	bl	800e7f0 <_ZN8touchgfx9ConstFontD1Ev>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4618      	mov	r0, r3
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	080255d4 	.word	0x080255d4

0800e858 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7ff ffe7 	bl	800e834 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e866:	2124      	movs	r1, #36	; 0x24
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f015 fad2 	bl	8023e12 <_ZdlPvj>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4618      	mov	r0, r3
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 f82d 	bl	800e8e0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800e886:	4b08      	ldr	r3, [pc, #32]	; (800e8a8 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	4b08      	ldr	r3, [pc, #32]	; (800e8ac <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800e88c:	6819      	ldr	r1, [r3, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	005b      	lsls	r3, r3, #1
 800e894:	440b      	add	r3, r1
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	4413      	add	r3, r2
 800e89c:	681b      	ldr	r3, [r3, #0]
    }
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3708      	adds	r7, #8
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	2000bd00 	.word	0x2000bd00
 800e8ac:	2000bcf8 	.word	0x2000bcf8

0800e8b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f000 f811 	bl	800e8e0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800e8be:	4b07      	ldr	r3, [pc, #28]	; (800e8dc <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	881b      	ldrh	r3, [r3, #0]
 800e8c6:	005b      	lsls	r3, r3, #1
 800e8c8:	4413      	add	r3, r2
 800e8ca:	785b      	ldrb	r3, [r3, #1]
 800e8cc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e8d0:	b2db      	uxtb	r3, r3
    }
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3708      	adds	r7, #8
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	2000bcf8 	.word	0x2000bcf8

0800e8e0 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e8e8:	4b0c      	ldr	r3, [pc, #48]	; (800e91c <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d105      	bne.n	800e8fc <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800e8f0:	4b0b      	ldr	r3, [pc, #44]	; (800e920 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800e8f2:	4a0c      	ldr	r2, [pc, #48]	; (800e924 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e8f4:	21de      	movs	r1, #222	; 0xde
 800e8f6:	480c      	ldr	r0, [pc, #48]	; (800e928 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e8f8:	f015 fab6 	bl	8023e68 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	881a      	ldrh	r2, [r3, #0]
 800e900:	4b0a      	ldr	r3, [pc, #40]	; (800e92c <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800e902:	881b      	ldrh	r3, [r3, #0]
 800e904:	429a      	cmp	r2, r3
 800e906:	d305      	bcc.n	800e914 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800e908:	4b09      	ldr	r3, [pc, #36]	; (800e930 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800e90a:	4a06      	ldr	r2, [pc, #24]	; (800e924 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e90c:	21df      	movs	r1, #223	; 0xdf
 800e90e:	4806      	ldr	r0, [pc, #24]	; (800e928 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e910:	f015 faaa 	bl	8023e68 <__assert_func>
    }
 800e914:	bf00      	nop
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	2000bcf8 	.word	0x2000bcf8
 800e920:	08024ef0 	.word	0x08024ef0
 800e924:	0802559c 	.word	0x0802559c
 800e928:	08024f34 	.word	0x08024f34
 800e92c:	2000bcfc 	.word	0x2000bcfc
 800e930:	08024f78 	.word	0x08024f78

0800e934 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	7b5b      	ldrb	r3, [r3, #13]
 800e940:	021b      	lsls	r3, r3, #8
 800e942:	b21b      	sxth	r3, r3
 800e944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e948:	b21a      	sxth	r2, r3
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	7adb      	ldrb	r3, [r3, #11]
 800e94e:	b21b      	sxth	r3, r3
 800e950:	4313      	orrs	r3, r2
 800e952:	b21b      	sxth	r3, r3
 800e954:	b29b      	uxth	r3, r3
    }
 800e956:	4618      	mov	r0, r3
 800e958:	370c      	adds	r7, #12
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr

0800e962 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e962:	b480      	push	{r7}
 800e964:	b083      	sub	sp, #12
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a1b      	ldr	r3, [r3, #32]
    }
 800e96e:	4618      	mov	r0, r3
 800e970:	370c      	adds	r7, #12
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
	...

0800e97c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b08c      	sub	sp, #48	; 0x30
 800e980:	af08      	add	r7, sp, #32
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	4611      	mov	r1, r2
 800e988:	461a      	mov	r2, r3
 800e98a:	460b      	mov	r3, r1
 800e98c:	80fb      	strh	r3, [r7, #6]
 800e98e:	4613      	mov	r3, r2
 800e990:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	88b9      	ldrh	r1, [r7, #4]
 800e996:	88fa      	ldrh	r2, [r7, #6]
 800e998:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e99a:	9306      	str	r3, [sp, #24]
 800e99c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e99e:	9305      	str	r3, [sp, #20]
 800e9a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e9a4:	9304      	str	r3, [sp, #16]
 800e9a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e9aa:	9303      	str	r3, [sp, #12]
 800e9ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9b0:	9302      	str	r3, [sp, #8]
 800e9b2:	7f3b      	ldrb	r3, [r7, #28]
 800e9b4:	9301      	str	r3, [sp, #4]
 800e9b6:	7e3b      	ldrb	r3, [r7, #24]
 800e9b8:	9300      	str	r3, [sp, #0]
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	68b9      	ldr	r1, [r7, #8]
 800e9be:	f009 ff47 	bl	8018850 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e9c2:	4a08      	ldr	r2, [pc, #32]	; (800e9e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	601a      	str	r2, [r3, #0]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9cc:	619a      	str	r2, [r3, #24]
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d2:	61da      	str	r2, [r3, #28]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9d8:	621a      	str	r2, [r3, #32]
{
}
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3710      	adds	r7, #16
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	080255d4 	.word	0x080255d4

0800e9e8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	699b      	ldr	r3, [r3, #24]
 800e9f6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	889b      	ldrh	r3, [r3, #4]
 800e9fc:	0adb      	lsrs	r3, r3, #11
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	4413      	add	r3, r2
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4413      	add	r3, r2
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b086      	sub	sp, #24
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	60f8      	str	r0, [r7, #12]
 800ea22:	460b      	mov	r3, r1
 800ea24:	607a      	str	r2, [r7, #4]
 800ea26:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d003      	beq.n	800ea36 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	7b1b      	ldrb	r3, [r3, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d101      	bne.n	800ea3a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	e023      	b.n	800ea82 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f7ff ff7a 	bl	800e934 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800ea40:	4603      	mov	r3, r0
 800ea42:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800ea44:	8abb      	ldrh	r3, [r7, #20]
 800ea46:	82fb      	strh	r3, [r7, #22]
 800ea48:	8afa      	ldrh	r2, [r7, #22]
 800ea4a:	8abb      	ldrh	r3, [r7, #20]
 800ea4c:	6879      	ldr	r1, [r7, #4]
 800ea4e:	7b09      	ldrb	r1, [r1, #12]
 800ea50:	440b      	add	r3, r1
 800ea52:	429a      	cmp	r2, r3
 800ea54:	da14      	bge.n	800ea80 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	69da      	ldr	r2, [r3, #28]
 800ea5a:	8afb      	ldrh	r3, [r7, #22]
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	4413      	add	r3, r2
 800ea60:	881b      	ldrh	r3, [r3, #0]
 800ea62:	897a      	ldrh	r2, [r7, #10]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d107      	bne.n	800ea78 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	69da      	ldr	r2, [r3, #28]
 800ea6c:	8afb      	ldrh	r3, [r7, #22]
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	4413      	add	r3, r2
 800ea72:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ea76:	e004      	b.n	800ea82 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800ea78:	8afb      	ldrh	r3, [r7, #22]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	82fb      	strh	r3, [r7, #22]
 800ea7e:	e7e3      	b.n	800ea48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3718      	adds	r7, #24
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
	...

0800ea8c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	4801      	ldr	r0, [pc, #4]	; (800ea98 <__tcf_0+0xc>)
 800ea92:	f7ff fecf 	bl	800e834 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	20008504 	.word	0x20008504

0800ea9c <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b08a      	sub	sp, #40	; 0x28
 800eaa0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800eaa2:	4b15      	ldr	r3, [pc, #84]	; (800eaf8 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f003 0301 	and.w	r3, r3, #1
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d11f      	bne.n	800eaee <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 800eaae:	2300      	movs	r3, #0
 800eab0:	9309      	str	r3, [sp, #36]	; 0x24
 800eab2:	2300      	movs	r3, #0
 800eab4:	9308      	str	r3, [sp, #32]
 800eab6:	233f      	movs	r3, #63	; 0x3f
 800eab8:	9307      	str	r3, [sp, #28]
 800eaba:	4b10      	ldr	r3, [pc, #64]	; (800eafc <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 800eabc:	9306      	str	r3, [sp, #24]
 800eabe:	4b10      	ldr	r3, [pc, #64]	; (800eb00 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 800eac0:	9305      	str	r3, [sp, #20]
 800eac2:	2301      	movs	r3, #1
 800eac4:	9304      	str	r3, [sp, #16]
 800eac6:	2300      	movs	r3, #0
 800eac8:	9303      	str	r3, [sp, #12]
 800eaca:	2301      	movs	r3, #1
 800eacc:	9302      	str	r3, [sp, #8]
 800eace:	2304      	movs	r3, #4
 800ead0:	9301      	str	r3, [sp, #4]
 800ead2:	2300      	movs	r3, #0
 800ead4:	9300      	str	r3, [sp, #0]
 800ead6:	230a      	movs	r3, #10
 800ead8:	2204      	movs	r2, #4
 800eada:	490a      	ldr	r1, [pc, #40]	; (800eb04 <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 800eadc:	480a      	ldr	r0, [pc, #40]	; (800eb08 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 800eade:	f7ff ff4d 	bl	800e97c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800eae2:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800eae4:	2201      	movs	r2, #1
 800eae6:	601a      	str	r2, [r3, #0]
 800eae8:	4808      	ldr	r0, [pc, #32]	; (800eb0c <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 800eaea:	f015 f9db 	bl	8023ea4 <atexit>
    return Asap_Bold_10_4bpp;
 800eaee:	4b06      	ldr	r3, [pc, #24]	; (800eb08 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20008528 	.word	0x20008528
 800eafc:	0802c894 	.word	0x0802c894
 800eb00:	08025620 	.word	0x08025620
 800eb04:	0802c8b0 	.word	0x0802c8b0
 800eb08:	20008504 	.word	0x20008504
 800eb0c:	0800ea8d 	.word	0x0800ea8d

0800eb10 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 28, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800eb10:	b580      	push	{r7, lr}
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	4801      	ldr	r0, [pc, #4]	; (800eb1c <__tcf_0+0xc>)
 800eb16:	f7ff fe8d 	bl	800e834 <_ZN8touchgfx13GeneratedFontD1Ev>
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	2000852c 	.word	0x2000852c

0800eb20 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08a      	sub	sp, #40	; 0x28
 800eb24:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 28, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800eb26:	4b15      	ldr	r3, [pc, #84]	; (800eb7c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f003 0301 	and.w	r3, r3, #1
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d11f      	bne.n	800eb72 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800eb32:	2300      	movs	r3, #0
 800eb34:	9309      	str	r3, [sp, #36]	; 0x24
 800eb36:	2300      	movs	r3, #0
 800eb38:	9308      	str	r3, [sp, #32]
 800eb3a:	233f      	movs	r3, #63	; 0x3f
 800eb3c:	9307      	str	r3, [sp, #28]
 800eb3e:	4b10      	ldr	r3, [pc, #64]	; (800eb80 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800eb40:	9306      	str	r3, [sp, #24]
 800eb42:	4b10      	ldr	r3, [pc, #64]	; (800eb84 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800eb44:	9305      	str	r3, [sp, #20]
 800eb46:	2301      	movs	r3, #1
 800eb48:	9304      	str	r3, [sp, #16]
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	9303      	str	r3, [sp, #12]
 800eb4e:	2301      	movs	r3, #1
 800eb50:	9302      	str	r3, [sp, #8]
 800eb52:	2304      	movs	r3, #4
 800eb54:	9301      	str	r3, [sp, #4]
 800eb56:	2300      	movs	r3, #0
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	230c      	movs	r3, #12
 800eb5c:	221c      	movs	r2, #28
 800eb5e:	490a      	ldr	r1, [pc, #40]	; (800eb88 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800eb60:	480a      	ldr	r0, [pc, #40]	; (800eb8c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800eb62:	f7ff ff0b 	bl	800e97c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800eb66:	4b05      	ldr	r3, [pc, #20]	; (800eb7c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800eb68:	2201      	movs	r2, #1
 800eb6a:	601a      	str	r2, [r3, #0]
 800eb6c:	4808      	ldr	r0, [pc, #32]	; (800eb90 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800eb6e:	f015 f999 	bl	8023ea4 <atexit>
    return Asap_Bold_12_4bpp;
 800eb72:	4b06      	ldr	r3, [pc, #24]	; (800eb8c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	20008550 	.word	0x20008550
 800eb80:	0802c898 	.word	0x0802c898
 800eb84:	08025624 	.word	0x08025624
 800eb88:	0802c8e8 	.word	0x0802c8e8
 800eb8c:	2000852c 	.word	0x2000852c
 800eb90:	0800eb11 	.word	0x0800eb11

0800eb94 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800eb94:	b580      	push	{r7, lr}
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	4801      	ldr	r0, [pc, #4]	; (800eba0 <__tcf_0+0xc>)
 800eb9a:	f7ff fe4b 	bl	800e834 <_ZN8touchgfx13GeneratedFontD1Ev>
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	20008554 	.word	0x20008554

0800eba4 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b08a      	sub	sp, #40	; 0x28
 800eba8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800ebaa:	4b15      	ldr	r3, [pc, #84]	; (800ec00 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d11f      	bne.n	800ebf6 <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	9309      	str	r3, [sp, #36]	; 0x24
 800ebba:	2300      	movs	r3, #0
 800ebbc:	9308      	str	r3, [sp, #32]
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	9307      	str	r3, [sp, #28]
 800ebc2:	4b10      	ldr	r3, [pc, #64]	; (800ec04 <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 800ebc4:	9306      	str	r3, [sp, #24]
 800ebc6:	4b10      	ldr	r3, [pc, #64]	; (800ec08 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 800ebc8:	9305      	str	r3, [sp, #20]
 800ebca:	2300      	movs	r3, #0
 800ebcc:	9304      	str	r3, [sp, #16]
 800ebce:	2300      	movs	r3, #0
 800ebd0:	9303      	str	r3, [sp, #12]
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	9302      	str	r3, [sp, #8]
 800ebd6:	2304      	movs	r3, #4
 800ebd8:	9301      	str	r3, [sp, #4]
 800ebda:	2300      	movs	r3, #0
 800ebdc:	9300      	str	r3, [sp, #0]
 800ebde:	2312      	movs	r3, #18
 800ebe0:	220d      	movs	r2, #13
 800ebe2:	490a      	ldr	r1, [pc, #40]	; (800ec0c <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 800ebe4:	480a      	ldr	r0, [pc, #40]	; (800ec10 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 800ebe6:	f7ff fec9 	bl	800e97c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ebea:	4b05      	ldr	r3, [pc, #20]	; (800ec00 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800ebec:	2201      	movs	r2, #1
 800ebee:	601a      	str	r2, [r3, #0]
 800ebf0:	4808      	ldr	r0, [pc, #32]	; (800ec14 <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 800ebf2:	f015 f957 	bl	8023ea4 <atexit>
    return Asap_Bold_18_4bpp;
 800ebf6:	4b06      	ldr	r3, [pc, #24]	; (800ec10 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20008578 	.word	0x20008578
 800ec04:	0802c89c 	.word	0x0802c89c
 800ec08:	08025628 	.word	0x08025628
 800ec0c:	0802ca70 	.word	0x0802ca70
 800ec10:	20008554 	.word	0x20008554
 800ec14:	0800eb95 	.word	0x0800eb95

0800ec18 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	4801      	ldr	r0, [pc, #4]	; (800ec24 <__tcf_0+0xc>)
 800ec1e:	f7ff fe09 	bl	800e834 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	2000857c 	.word	0x2000857c

0800ec28 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b08a      	sub	sp, #40	; 0x28
 800ec2c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800ec2e:	4b15      	ldr	r3, [pc, #84]	; (800ec84 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d11f      	bne.n	800ec7a <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec3e:	2300      	movs	r3, #0
 800ec40:	9308      	str	r3, [sp, #32]
 800ec42:	233f      	movs	r3, #63	; 0x3f
 800ec44:	9307      	str	r3, [sp, #28]
 800ec46:	4b10      	ldr	r3, [pc, #64]	; (800ec88 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 800ec48:	9306      	str	r3, [sp, #24]
 800ec4a:	4b10      	ldr	r3, [pc, #64]	; (800ec8c <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 800ec4c:	9305      	str	r3, [sp, #20]
 800ec4e:	2301      	movs	r3, #1
 800ec50:	9304      	str	r3, [sp, #16]
 800ec52:	2300      	movs	r3, #0
 800ec54:	9303      	str	r3, [sp, #12]
 800ec56:	2301      	movs	r3, #1
 800ec58:	9302      	str	r3, [sp, #8]
 800ec5a:	2304      	movs	r3, #4
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	2300      	movs	r3, #0
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	2315      	movs	r3, #21
 800ec64:	220d      	movs	r2, #13
 800ec66:	490a      	ldr	r1, [pc, #40]	; (800ec90 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 800ec68:	480a      	ldr	r0, [pc, #40]	; (800ec94 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 800ec6a:	f7ff fe87 	bl	800e97c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ec6e:	4b05      	ldr	r3, [pc, #20]	; (800ec84 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800ec70:	2201      	movs	r2, #1
 800ec72:	601a      	str	r2, [r3, #0]
 800ec74:	4808      	ldr	r0, [pc, #32]	; (800ec98 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 800ec76:	f015 f915 	bl	8023ea4 <atexit>
    return Asap_Bold_21_4bpp;
 800ec7a:	4b06      	ldr	r3, [pc, #24]	; (800ec94 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	200085a0 	.word	0x200085a0
 800ec88:	0802c8a0 	.word	0x0802c8a0
 800ec8c:	0802562c 	.word	0x0802562c
 800ec90:	0802cb28 	.word	0x0802cb28
 800ec94:	2000857c 	.word	0x2000857c
 800ec98:	0800ec19 	.word	0x0800ec19

0800ec9c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	4801      	ldr	r0, [pc, #4]	; (800eca8 <__tcf_0+0xc>)
 800eca2:	f7ff fdc7 	bl	800e834 <_ZN8touchgfx13GeneratedFontD1Ev>
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	200085a4 	.word	0x200085a4

0800ecac <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b08a      	sub	sp, #40	; 0x28
 800ecb0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800ecb2:	4b15      	ldr	r3, [pc, #84]	; (800ed08 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f003 0301 	and.w	r3, r3, #1
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d11f      	bne.n	800ecfe <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	9309      	str	r3, [sp, #36]	; 0x24
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	9308      	str	r3, [sp, #32]
 800ecc6:	233f      	movs	r3, #63	; 0x3f
 800ecc8:	9307      	str	r3, [sp, #28]
 800ecca:	4b10      	ldr	r3, [pc, #64]	; (800ed0c <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800eccc:	9306      	str	r3, [sp, #24]
 800ecce:	4b10      	ldr	r3, [pc, #64]	; (800ed10 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800ecd0:	9305      	str	r3, [sp, #20]
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	9304      	str	r3, [sp, #16]
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	9303      	str	r3, [sp, #12]
 800ecda:	2301      	movs	r3, #1
 800ecdc:	9302      	str	r3, [sp, #8]
 800ecde:	2304      	movs	r3, #4
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	2300      	movs	r3, #0
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	231e      	movs	r3, #30
 800ece8:	220d      	movs	r2, #13
 800ecea:	490a      	ldr	r1, [pc, #40]	; (800ed14 <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800ecec:	480a      	ldr	r0, [pc, #40]	; (800ed18 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800ecee:	f7ff fe45 	bl	800e97c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ecf2:	4b05      	ldr	r3, [pc, #20]	; (800ed08 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	601a      	str	r2, [r3, #0]
 800ecf8:	4808      	ldr	r0, [pc, #32]	; (800ed1c <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800ecfa:	f015 f8d3 	bl	8023ea4 <atexit>
    return Asap_Bold_30_4bpp;
 800ecfe:	4b06      	ldr	r3, [pc, #24]	; (800ed18 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	200085c8 	.word	0x200085c8
 800ed0c:	0802c8a4 	.word	0x0802c8a4
 800ed10:	08025630 	.word	0x08025630
 800ed14:	0802cbe0 	.word	0x0802cbe0
 800ed18:	200085a4 	.word	0x200085a4
 800ed1c:	0800ec9d 	.word	0x0800ec9d

0800ed20 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800ed20:	b580      	push	{r7, lr}
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	4801      	ldr	r0, [pc, #4]	; (800ed2c <__tcf_0+0xc>)
 800ed26:	f7ff fd85 	bl	800e834 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	200085cc 	.word	0x200085cc

0800ed30 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b08a      	sub	sp, #40	; 0x28
 800ed34:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800ed36:	4b15      	ldr	r3, [pc, #84]	; (800ed8c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f003 0301 	and.w	r3, r3, #1
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d11f      	bne.n	800ed82 <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800ed42:	2300      	movs	r3, #0
 800ed44:	9309      	str	r3, [sp, #36]	; 0x24
 800ed46:	2300      	movs	r3, #0
 800ed48:	9308      	str	r3, [sp, #32]
 800ed4a:	233f      	movs	r3, #63	; 0x3f
 800ed4c:	9307      	str	r3, [sp, #28]
 800ed4e:	4b10      	ldr	r3, [pc, #64]	; (800ed90 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800ed50:	9306      	str	r3, [sp, #24]
 800ed52:	4b10      	ldr	r3, [pc, #64]	; (800ed94 <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800ed54:	9305      	str	r3, [sp, #20]
 800ed56:	2301      	movs	r3, #1
 800ed58:	9304      	str	r3, [sp, #16]
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	9303      	str	r3, [sp, #12]
 800ed5e:	2301      	movs	r3, #1
 800ed60:	9302      	str	r3, [sp, #8]
 800ed62:	2304      	movs	r3, #4
 800ed64:	9301      	str	r3, [sp, #4]
 800ed66:	2300      	movs	r3, #0
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	2328      	movs	r3, #40	; 0x28
 800ed6c:	220c      	movs	r2, #12
 800ed6e:	490a      	ldr	r1, [pc, #40]	; (800ed98 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800ed70:	480a      	ldr	r0, [pc, #40]	; (800ed9c <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800ed72:	f7ff fe03 	bl	800e97c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ed76:	4b05      	ldr	r3, [pc, #20]	; (800ed8c <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800ed78:	2201      	movs	r2, #1
 800ed7a:	601a      	str	r2, [r3, #0]
 800ed7c:	4808      	ldr	r0, [pc, #32]	; (800eda0 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800ed7e:	f015 f891 	bl	8023ea4 <atexit>
    return Asap_Bold_40_4bpp;
 800ed82:	4b06      	ldr	r3, [pc, #24]	; (800ed9c <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	200085f0 	.word	0x200085f0
 800ed90:	0802c8a8 	.word	0x0802c8a8
 800ed94:	08025634 	.word	0x08025634
 800ed98:	0802cc98 	.word	0x0802cc98
 800ed9c:	200085cc 	.word	0x200085cc
 800eda0:	0800ed21 	.word	0x0800ed21

0800eda4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800eda4:	b580      	push	{r7, lr}
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	4801      	ldr	r0, [pc, #4]	; (800edb0 <__tcf_0+0xc>)
 800edaa:	f7ff fd43 	bl	800e834 <_ZN8touchgfx13GeneratedFontD1Ev>
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	200085f4 	.word	0x200085f4

0800edb4 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b08a      	sub	sp, #40	; 0x28
 800edb8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800edba:	4b15      	ldr	r3, [pc, #84]	; (800ee10 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f003 0301 	and.w	r3, r3, #1
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d11f      	bne.n	800ee06 <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800edc6:	2300      	movs	r3, #0
 800edc8:	9309      	str	r3, [sp, #36]	; 0x24
 800edca:	2300      	movs	r3, #0
 800edcc:	9308      	str	r3, [sp, #32]
 800edce:	233f      	movs	r3, #63	; 0x3f
 800edd0:	9307      	str	r3, [sp, #28]
 800edd2:	4b10      	ldr	r3, [pc, #64]	; (800ee14 <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800edd4:	9306      	str	r3, [sp, #24]
 800edd6:	4b10      	ldr	r3, [pc, #64]	; (800ee18 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800edd8:	9305      	str	r3, [sp, #20]
 800edda:	2300      	movs	r3, #0
 800eddc:	9304      	str	r3, [sp, #16]
 800edde:	2300      	movs	r3, #0
 800ede0:	9303      	str	r3, [sp, #12]
 800ede2:	2301      	movs	r3, #1
 800ede4:	9302      	str	r3, [sp, #8]
 800ede6:	2304      	movs	r3, #4
 800ede8:	9301      	str	r3, [sp, #4]
 800edea:	2300      	movs	r3, #0
 800edec:	9300      	str	r3, [sp, #0]
 800edee:	233c      	movs	r3, #60	; 0x3c
 800edf0:	220d      	movs	r2, #13
 800edf2:	490a      	ldr	r1, [pc, #40]	; (800ee1c <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800edf4:	480a      	ldr	r0, [pc, #40]	; (800ee20 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800edf6:	f7ff fdc1 	bl	800e97c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800edfa:	4b05      	ldr	r3, [pc, #20]	; (800ee10 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800edfc:	2201      	movs	r2, #1
 800edfe:	601a      	str	r2, [r3, #0]
 800ee00:	4808      	ldr	r0, [pc, #32]	; (800ee24 <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800ee02:	f015 f84f 	bl	8023ea4 <atexit>
    return Asap_Bold_60_4bpp;
 800ee06:	4b06      	ldr	r3, [pc, #24]	; (800ee20 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	20008618 	.word	0x20008618
 800ee14:	0802c8ac 	.word	0x0802c8ac
 800ee18:	08025638 	.word	0x08025638
 800ee1c:	0802cd40 	.word	0x0802cd40
 800ee20:	200085f4 	.word	0x200085f4
 800ee24:	0800eda5 	.word	0x0800eda5

0800ee28 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	4618      	mov	r0, r3
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
    {
    }
 800ee4a:	bf00      	nop
 800ee4c:	370c      	adds	r7, #12
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr

0800ee56 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ee56:	b480      	push	{r7}
 800ee58:	b083      	sub	sp, #12
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	6039      	str	r1, [r7, #0]
    {
    }
 800ee60:	bf00      	nop
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr

0800ee6c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
    {
    }
 800ee76:	bf00      	nop
 800ee78:	370c      	adds	r7, #12
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr

0800ee82 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ee82:	b480      	push	{r7}
 800ee84:	b083      	sub	sp, #12
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ee8e:	bf00      	nop
 800ee90:	370c      	adds	r7, #12
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr

0800ee9a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ee9a:	b480      	push	{r7}
 800ee9c:	b083      	sub	sp, #12
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
    {
    }
 800eea2:	bf00      	nop
 800eea4:	370c      	adds	r7, #12
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr

0800eeae <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800eeae:	b480      	push	{r7}
 800eeb0:	b083      	sub	sp, #12
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
    {
    }
 800eeb6:	bf00      	nop
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr
	...

0800eec4 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
    {
 800eecc:	4a04      	ldr	r2, [pc, #16]	; (800eee0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	601a      	str	r2, [r3, #0]
    }
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4618      	mov	r0, r3
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	0802572c 	.word	0x0802572c

0800eee4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
    }
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f7ff ffe9 	bl	800eec4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800eef2:	2104      	movs	r1, #4
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f014 ff8c 	bl	8023e12 <_ZdlPvj>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4618      	mov	r0, r3
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800ef0c:	4a07      	ldr	r2, [pc, #28]	; (800ef2c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	601a      	str	r2, [r3, #0]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	605a      	str	r2, [r3, #4]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	721a      	strb	r2, [r3, #8]
    {
    }
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4618      	mov	r0, r3
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr
 800ef2c:	0802570c 	.word	0x0802570c

0800ef30 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800ef30:	b480      	push	{r7}
 800ef32:	b083      	sub	sp, #12
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
    {
 800ef38:	4a04      	ldr	r2, [pc, #16]	; (800ef4c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	601a      	str	r2, [r3, #0]
    }
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4618      	mov	r0, r3
 800ef42:	370c      	adds	r7, #12
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr
 800ef4c:	0802570c 	.word	0x0802570c

0800ef50 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
    }
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f7ff ffe9 	bl	800ef30 <_ZN8touchgfx10TransitionD1Ev>
 800ef5e:	210c      	movs	r1, #12
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f014 ff56 	bl	8023e12 <_ZdlPvj>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	bf00      	nop
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800ef84:	b480      	push	{r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	bf00      	nop
 800ef8e:	370c      	adds	r7, #12
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	bf00      	nop
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	683a      	ldr	r2, [r7, #0]
 800efba:	605a      	str	r2, [r3, #4]
    }
 800efbc:	bf00      	nop
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
    {
    }
 800efd4:	bf00      	nop
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
    {
 800efe8:	4a04      	ldr	r2, [pc, #16]	; (800effc <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	601a      	str	r2, [r3, #0]
    }
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4618      	mov	r0, r3
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr
 800effc:	080256f4 	.word	0x080256f4

0800f000 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
    }
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f7ff ffe9 	bl	800efe0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f00e:	2104      	movs	r1, #4
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f014 fefe 	bl	8023e12 <_ZdlPvj>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f020:	b480      	push	{r7}
 800f022:	af00      	add	r7, sp, #0
    {
        return instance;
 800f024:	4b03      	ldr	r3, [pc, #12]	; (800f034 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f026:	681b      	ldr	r3, [r3, #0]
    }
 800f028:	4618      	mov	r0, r3
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	2000bc68 	.word	0x2000bc68

0800f038 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f038:	b480      	push	{r7}
 800f03a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f03c:	4b0b      	ldr	r3, [pc, #44]	; (800f06c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f044:	2b00      	cmp	r3, #0
 800f046:	d008      	beq.n	800f05a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f048:	4b08      	ldr	r3, [pc, #32]	; (800f06c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d003      	beq.n	800f05a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f052:	4b06      	ldr	r3, [pc, #24]	; (800f06c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f058:	e002      	b.n	800f060 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f05a:	4b04      	ldr	r3, [pc, #16]	; (800f06c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f060:	4618      	mov	r0, r3
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop
 800f06c:	2000bc68 	.word	0x2000bc68

0800f070 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	4a05      	ldr	r2, [pc, #20]	; (800f090 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4618      	mov	r0, r3
 800f082:	f7ff ff1f 	bl	800eec4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4618      	mov	r0, r3
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	08027714 	.word	0x08027714

0800f094 <_ZN8touchgfx11ApplicationD0Ev>:
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7ff ffe7 	bl	800f070 <_ZN8touchgfx11ApplicationD1Ev>
 800f0a2:	f44f 7198 	mov.w	r1, #304	; 0x130
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f014 feb3 	bl	8023e12 <_ZdlPvj>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
	...

0800f0b8 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f008 fefe 	bl	8017ec4 <_ZN8touchgfx11ApplicationC1Ev>
 800f0c8:	4a09      	ldr	r2, [pc, #36]	; (800f0f0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a04      	ldr	r2, [pc, #16]	; (800f0f4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800f0e2:	6013      	str	r3, [r2, #0]
    }
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3708      	adds	r7, #8
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	080256b8 	.word	0x080256b8
 800f0f4:	2000bcf4 	.word	0x2000bcf4

0800f0f8 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	4a05      	ldr	r2, [pc, #20]	; (800f118 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	601a      	str	r2, [r3, #0]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4618      	mov	r0, r3
 800f10a:	f7ff ffb1 	bl	800f070 <_ZN8touchgfx11ApplicationD1Ev>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4618      	mov	r0, r3
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	080256b8 	.word	0x080256b8

0800f11c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7ff ffe7 	bl	800f0f8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f12a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f014 fe6f 	bl	8023e12 <_ZdlPvj>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4618      	mov	r0, r3
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800f13e:	b580      	push	{r7, lr}
 800f140:	b082      	sub	sp, #8
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f804 	bl	800f154 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800f14c:	bf00      	nop
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00f      	beq.n	800f186 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	330c      	adds	r3, #12
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	4610      	mov	r0, r2
 800f17a:	4798      	blx	r3
 800f17c:	4603      	mov	r3, r0
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d001      	beq.n	800f186 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f182:	2301      	movs	r3, #1
 800f184:	e000      	b.n	800f188 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800f186:	2300      	movs	r3, #0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00e      	beq.n	800f1aa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	3308      	adds	r3, #8
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4610      	mov	r0, r2
 800f1a0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800f1aa:	bf00      	nop
 800f1ac:	3708      	adds	r7, #8
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}

0800f1b2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b084      	sub	sp, #16
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	60f8      	str	r0, [r7, #12]
 800f1ba:	60b9      	str	r1, [r7, #8]
 800f1bc:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800f1be:	f008 fe5f 	bl	8017e80 <_ZN8touchgfx11Application11getInstanceEv>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f008 fe61 	bl	8017e8c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d008      	beq.n	800f1e4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	330c      	adds	r3, #12
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4610      	mov	r0, r2
 800f1e2:	4798      	blx	r3
    }
    if (*currentTrans)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d007      	beq.n	800f1fc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4610      	mov	r0, r2
 800f1fa:	4798      	blx	r3
    }
    if (*currentScreen)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d008      	beq.n	800f216 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	3314      	adds	r3, #20
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	4610      	mov	r0, r2
 800f214:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d008      	beq.n	800f230 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	3304      	adds	r3, #4
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4610      	mov	r0, r2
 800f22e:	4798      	blx	r3
    }
    if (*currentScreen)
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d007      	beq.n	800f248 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4610      	mov	r0, r2
 800f246:	4798      	blx	r3
    }
    if (*currentPresenter)
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d008      	beq.n	800f262 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	3308      	adds	r3, #8
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4610      	mov	r0, r2
 800f260:	4798      	blx	r3
    }
}
 800f262:	bf00      	nop
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b084      	sub	sp, #16
 800f26e:	af00      	add	r7, sp, #0
 800f270:	60f8      	str	r0, [r7, #12]
 800f272:	60b9      	str	r1, [r7, #8]
 800f274:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	330c      	adds	r3, #12
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	4798      	blx	r3
    newPresenter->activate();
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	68b8      	ldr	r0, [r7, #8]
 800f28a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f28c:	6879      	ldr	r1, [r7, #4]
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f009 ff06 	bl	80190a0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	3310      	adds	r3, #16
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	4798      	blx	r3

    Application::getInstance()->draw();
 800f2a0:	f008 fdee 	bl	8017e80 <_ZN8touchgfx11Application11getInstanceEv>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	6813      	ldr	r3, [r2, #0]
 800f2a8:	3328      	adds	r3, #40	; 0x28
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4610      	mov	r0, r2
 800f2ae:	4798      	blx	r3
}
 800f2b0:	bf00      	nop
 800f2b2:	3710      	adds	r7, #16
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	601a      	str	r2, [r3, #0]
    }
 800f2c8:	bf00      	nop
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	4a08      	ldr	r2, [pc, #32]	; (800f300 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	601a      	str	r2, [r3, #0]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f000 fa5f 	bl	800f7ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff ff01 	bl	800f0f8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	08025664 	.word	0x08025664

0800f304 <_ZN23FrontendApplicationBaseD0Ev>:
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7ff ffe1 	bl	800f2d4 <_ZN23FrontendApplicationBaseD1Ev>
 800f312:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f014 fd7b 	bl	8023e12 <_ZdlPvj>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4618      	mov	r0, r3
 800f320:	3708      	adds	r7, #8
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
	...

0800f328 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	4618      	mov	r0, r3
 800f334:	f7ff fde6 	bl	800ef04 <_ZN8touchgfx10TransitionC1Ev>
 800f338:	4a03      	ldr	r2, [pc, #12]	; (800f348 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4618      	mov	r0, r3
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	08025644 	.word	0x08025644

0800f34c <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	4a05      	ldr	r2, [pc, #20]	; (800f36c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	601a      	str	r2, [r3, #0]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7ff fde7 	bl	800ef30 <_ZN8touchgfx10TransitionD1Ev>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4618      	mov	r0, r3
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	08025644 	.word	0x08025644

0800f370 <_ZN8touchgfx12NoTransitionD0Ev>:
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f7ff ffe7 	bl	800f34c <_ZN8touchgfx12NoTransitionD1Ev>
 800f37e:	210c      	movs	r1, #12
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f014 fd46 	bl	8023e12 <_ZdlPvj>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4618      	mov	r0, r3
 800f38a:	3708      	adds	r7, #8
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2201      	movs	r2, #1
 800f39c:	721a      	strb	r2, [r3, #8]
    }
 800f39e:	bf00      	nop
 800f3a0:	370c      	adds	r7, #12
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr

0800f3aa <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800f3aa:	b480      	push	{r7}
 800f3ac:	b083      	sub	sp, #12
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	683a      	ldr	r2, [r7, #0]
 800f3b8:	605a      	str	r2, [r3, #4]
    }
 800f3ba:	bf00      	nop
 800f3bc:	370c      	adds	r7, #12
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr
	...

0800f3c8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7ff fe6e 	bl	800f0b8 <_ZN8touchgfx14MVPApplicationC1Ev>
 800f3dc:	4a13      	ldr	r2, [pc, #76]	; (800f42c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	601a      	str	r2, [r3, #0]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f000 f89f 	bl	800f52c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800f3fe:	f7ff fe0f 	bl	800f020 <_ZN8touchgfx3HAL11getInstanceEv>
 800f402:	4602      	mov	r2, r0
 800f404:	6813      	ldr	r3, [r2, #0]
 800f406:	3308      	adds	r3, #8
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2100      	movs	r1, #0
 800f40c:	4610      	mov	r0, r2
 800f40e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800f410:	2000      	movs	r0, #0
 800f412:	f002 fc61 	bl	8011cd8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800f416:	f7ff fe0f 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 800f41a:	4603      	mov	r3, r0
 800f41c:	4618      	mov	r0, r3
 800f41e:	f00e fa06 	bl	801d82e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	4618      	mov	r0, r3
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	08025664 	.word	0x08025664

0800f430 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	4618      	mov	r0, r3
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	683a      	ldr	r2, [r7, #0]
 800f456:	4611      	mov	r1, r2
 800f458:	4618      	mov	r0, r3
 800f45a:	f7ff ffe9 	bl	800f430 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	685a      	ldr	r2, [r3, #4]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	605a      	str	r2, [r3, #4]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	683a      	ldr	r2, [r7, #0]
 800f46a:	3308      	adds	r3, #8
 800f46c:	3208      	adds	r2, #8
 800f46e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f472:	e883 0003 	stmia.w	r3, {r0, r1}
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4618      	mov	r0, r3
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800f480:	b590      	push	{r4, r7, lr}
 800f482:	b089      	sub	sp, #36	; 0x24
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800f48e:	4b10      	ldr	r3, [pc, #64]	; (800f4d0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800f490:	61bb      	str	r3, [r7, #24]
 800f492:	2300      	movs	r3, #0
 800f494:	61fb      	str	r3, [r7, #28]
 800f496:	f107 0008 	add.w	r0, r7, #8
 800f49a:	f107 0318 	add.w	r3, r7, #24
 800f49e:	cb0c      	ldmia	r3, {r2, r3}
 800f4a0:	6879      	ldr	r1, [r7, #4]
 800f4a2:	f000 f85f 	bl	800f564 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800f4a6:	f107 0308 	add.w	r3, r7, #8
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f7ff ffcb 	bl	800f448 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800f4b2:	f107 0308 	add.w	r3, r7, #8
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f000 f978 	bl	800f7ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800f4c8:	bf00      	nop
 800f4ca:	3724      	adds	r7, #36	; 0x24
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd90      	pop	{r4, r7, pc}
 800f4d0:	0800f4d5 	.word	0x0800f4d5

0800f4d4 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af02      	add	r7, sp, #8
 800f4da:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	4b04      	ldr	r3, [pc, #16]	; (800f504 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800f4f4:	4804      	ldr	r0, [pc, #16]	; (800f508 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800f4f6:	f000 f855 	bl	800f5a4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800f4fa:	bf00      	nop
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	2000bce8 	.word	0x2000bce8
 800f508:	2000bce4 	.word	0x2000bce4

0800f50c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	4a04      	ldr	r2, [pc, #16]	; (800f528 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	601a      	str	r2, [r3, #0]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4618      	mov	r0, r3
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	080256f4 	.word	0x080256f4

0800f52c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4618      	mov	r0, r3
 800f538:	f7ff ffe8 	bl	800f50c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f53c:	4a08      	ldr	r2, [pc, #32]	; (800f560 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	601a      	str	r2, [r3, #0]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	605a      	str	r2, [r3, #4]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	609a      	str	r2, [r3, #8]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2200      	movs	r2, #0
 800f552:	60da      	str	r2, [r3, #12]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4618      	mov	r0, r3
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	080256a0 	.word	0x080256a0

0800f564 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	4639      	mov	r1, r7
 800f570:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	4618      	mov	r0, r3
 800f578:	f7ff ffc8 	bl	800f50c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f57c:	4a08      	ldr	r2, [pc, #32]	; (800f5a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	68ba      	ldr	r2, [r7, #8]
 800f586:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	3308      	adds	r3, #8
 800f58c:	463a      	mov	r2, r7
 800f58e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f592:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	4618      	mov	r0, r3
 800f59a:	3710      	adds	r7, #16
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	080256a0 	.word	0x080256a0

0800f5a4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f5a4:	b590      	push	{r4, r7, lr}
 800f5a6:	b089      	sub	sp, #36	; 0x24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
 800f5b0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	689a      	ldr	r2, [r3, #8]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	3320      	adds	r3, #32
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4610      	mov	r0, r2
 800f5c2:	4798      	blx	r3
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	f242 732b 	movw	r3, #10027	; 0x272b
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d805      	bhi.n	800f5da <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800f5ce:	4b4e      	ldr	r3, [pc, #312]	; (800f708 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800f5d0:	4a4e      	ldr	r2, [pc, #312]	; (800f70c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f5d2:	21c2      	movs	r1, #194	; 0xc2
 800f5d4:	484e      	ldr	r0, [pc, #312]	; (800f710 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f5d6:	f014 fc47 	bl	8023e68 <__assert_func>
 800f5da:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	685a      	ldr	r2, [r3, #4]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	3320      	adds	r3, #32
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4610      	mov	r0, r2
 800f5ec:	4798      	blx	r3
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b0f      	cmp	r3, #15
 800f5f2:	d805      	bhi.n	800f600 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800f5f4:	4b47      	ldr	r3, [pc, #284]	; (800f714 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800f5f6:	4a45      	ldr	r2, [pc, #276]	; (800f70c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f5f8:	21c3      	movs	r1, #195	; 0xc3
 800f5fa:	4845      	ldr	r0, [pc, #276]	; (800f710 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f5fc:	f014 fc34 	bl	8023e68 <__assert_func>
 800f600:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68da      	ldr	r2, [r3, #12]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	3320      	adds	r3, #32
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4610      	mov	r0, r2
 800f612:	4798      	blx	r3
 800f614:	4603      	mov	r3, r0
 800f616:	2b0b      	cmp	r3, #11
 800f618:	d805      	bhi.n	800f626 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800f61a:	4b3f      	ldr	r3, [pc, #252]	; (800f718 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800f61c:	4a3b      	ldr	r2, [pc, #236]	; (800f70c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f61e:	21c4      	movs	r1, #196	; 0xc4
 800f620:	483b      	ldr	r0, [pc, #236]	; (800f710 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f622:	f014 fc21 	bl	8023e68 <__assert_func>
 800f626:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800f628:	683a      	ldr	r2, [r7, #0]
 800f62a:	68b9      	ldr	r1, [r7, #8]
 800f62c:	68f8      	ldr	r0, [r7, #12]
 800f62e:	f7ff fdc0 	bl	800f1b2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	2100      	movs	r1, #0
 800f638:	4618      	mov	r0, r3
 800f63a:	f000 f86f 	bl	800f71c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800f63e:	4603      	mov	r3, r0
 800f640:	4619      	mov	r1, r3
 800f642:	200c      	movs	r0, #12
 800f644:	f7ff fbf0 	bl	800ee28 <_ZnwjPv>
 800f648:	4604      	mov	r4, r0
 800f64a:	2c00      	cmp	r4, #0
 800f64c:	d004      	beq.n	800f658 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800f64e:	4620      	mov	r0, r4
 800f650:	f7ff fe6a 	bl	800f328 <_ZN8touchgfx12NoTransitionC1Ev>
 800f654:	4623      	mov	r3, r4
 800f656:	e000      	b.n	800f65a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800f658:	4623      	mov	r3, r4
 800f65a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	689b      	ldr	r3, [r3, #8]
 800f660:	2100      	movs	r1, #0
 800f662:	4618      	mov	r0, r3
 800f664:	f000 f86d 	bl	800f742 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800f668:	4603      	mov	r3, r0
 800f66a:	4619      	mov	r1, r3
 800f66c:	f242 702c 	movw	r0, #10028	; 0x272c
 800f670:	f7ff fbda 	bl	800ee28 <_ZnwjPv>
 800f674:	4604      	mov	r4, r0
 800f676:	2c00      	cmp	r4, #0
 800f678:	d004      	beq.n	800f684 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800f67a:	4620      	mov	r0, r4
 800f67c:	f002 fd8a 	bl	8012194 <_ZN8MainViewC1Ev>
 800f680:	4623      	mov	r3, r4
 800f682:	e000      	b.n	800f686 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800f684:	4623      	mov	r3, r4
 800f686:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	2100      	movs	r1, #0
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 f86a 	bl	800f768 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800f694:	4603      	mov	r3, r0
 800f696:	4619      	mov	r1, r3
 800f698:	2010      	movs	r0, #16
 800f69a:	f7ff fbc5 	bl	800ee28 <_ZnwjPv>
 800f69e:	4604      	mov	r4, r0
 800f6a0:	2c00      	cmp	r4, #0
 800f6a2:	d005      	beq.n	800f6b0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800f6a4:	69b9      	ldr	r1, [r7, #24]
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	f002 fcda 	bl	8012060 <_ZN13MainPresenterC1ER8MainView>
 800f6ac:	4623      	mov	r3, r4
 800f6ae:	e000      	b.n	800f6b2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800f6b0:	4623      	mov	r3, r4
 800f6b2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	69fa      	ldr	r2, [r7, #28]
 800f6b8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	697a      	ldr	r2, [r7, #20]
 800f6be:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	69ba      	ldr	r2, [r7, #24]
 800f6c4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d002      	beq.n	800f6d2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	3304      	adds	r3, #4
 800f6d0:	e000      	b.n	800f6d4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6d8:	f7ff fdee 	bl	800f2b8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	3304      	adds	r3, #4
 800f6e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7ff fe61 	bl	800f3aa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	6979      	ldr	r1, [r7, #20]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f000 f84e 	bl	800f78e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800f6f2:	69fa      	ldr	r2, [r7, #28]
 800f6f4:	6979      	ldr	r1, [r7, #20]
 800f6f6:	69b8      	ldr	r0, [r7, #24]
 800f6f8:	f7ff fdb7 	bl	800f26a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800f6fc:	697b      	ldr	r3, [r7, #20]
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3724      	adds	r7, #36	; 0x24
 800f702:	46bd      	mov	sp, r7
 800f704:	bd90      	pop	{r4, r7, pc}
 800f706:	bf00      	nop
 800f708:	08024fcc 	.word	0x08024fcc
 800f70c:	0802574c 	.word	0x0802574c
 800f710:	0802505c 	.word	0x0802505c
 800f714:	080250a0 	.word	0x080250a0
 800f718:	08025144 	.word	0x08025144

0800f71c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	460b      	mov	r3, r1
 800f726:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	3324      	adds	r3, #36	; 0x24
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	887a      	ldrh	r2, [r7, #2]
 800f732:	4611      	mov	r1, r2
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	4798      	blx	r3
 800f738:	4603      	mov	r3, r0
    }
 800f73a:	4618      	mov	r0, r3
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800f742:	b580      	push	{r7, lr}
 800f744:	b082      	sub	sp, #8
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
 800f74a:	460b      	mov	r3, r1
 800f74c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	3324      	adds	r3, #36	; 0x24
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	887a      	ldrh	r2, [r7, #2]
 800f758:	4611      	mov	r1, r2
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	4798      	blx	r3
 800f75e:	4603      	mov	r3, r0
    }
 800f760:	4618      	mov	r0, r3
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	460b      	mov	r3, r1
 800f772:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	3324      	adds	r3, #36	; 0x24
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	887a      	ldrh	r2, [r7, #2]
 800f77e:	4611      	mov	r1, r2
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	4798      	blx	r3
 800f784:	4603      	mov	r3, r0
    }
 800f786:	4618      	mov	r0, r3
 800f788:	3708      	adds	r7, #8
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800f78e:	b480      	push	{r7}
 800f790:	b083      	sub	sp, #12
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
 800f796:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	683a      	ldr	r2, [r7, #0]
 800f79c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f79e:	bf00      	nop
 800f7a0:	370c      	adds	r7, #12
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
	...

0800f7ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	4a05      	ldr	r2, [pc, #20]	; (800f7cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	601a      	str	r2, [r3, #0]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7ff fc0f 	bl	800efe0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3708      	adds	r7, #8
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	080256a0 	.word	0x080256a0

0800f7d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b082      	sub	sp, #8
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7ff ffe7 	bl	800f7ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f7de:	2110      	movs	r1, #16
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f014 fb16 	bl	8023e12 <_ZdlPvj>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b082      	sub	sp, #8
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	68d2      	ldr	r2, [r2, #12]
 800f800:	1052      	asrs	r2, r2, #1
 800f802:	1899      	adds	r1, r3, r2
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	f003 0301 	and.w	r3, r3, #1
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d102      	bne.n	800f816 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	e00a      	b.n	800f82c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	68d2      	ldr	r2, [r2, #12]
 800f81e:	1052      	asrs	r2, r2, #1
 800f820:	4413      	add	r3, r2
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	6892      	ldr	r2, [r2, #8]
 800f828:	4413      	add	r3, r2
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	4608      	mov	r0, r1
 800f82e:	4798      	blx	r3
    }
 800f830:	bf00      	nop
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d010      	beq.n	800f86a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	689b      	ldr	r3, [r3, #8]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d107      	bne.n	800f860 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	f003 0301 	and.w	r3, r3, #1
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d101      	bne.n	800f860 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f85c:	2301      	movs	r3, #1
 800f85e:	e000      	b.n	800f862 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f860:	2300      	movs	r3, #0
 800f862:	2b01      	cmp	r3, #1
 800f864:	d001      	beq.n	800f86a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f866:	2301      	movs	r3, #1
 800f868:	e000      	b.n	800f86c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f86a:	2300      	movs	r3, #0
    }
 800f86c:	4618      	mov	r0, r3
 800f86e:	370c      	adds	r7, #12
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr

0800f878 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800f878:	b480      	push	{r7}
 800f87a:	b083      	sub	sp, #12
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	683a      	ldr	r2, [r7, #0]
 800f886:	601a      	str	r2, [r3, #0]
    }
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4618      	mov	r0, r3
 800f88c:	370c      	adds	r7, #12
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr

0800f896 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800f896:	b480      	push	{r7}
 800f898:	b083      	sub	sp, #12
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	80da      	strh	r2, [r3, #6]
    }
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800f8c4:	b480      	push	{r7}
 800f8c6:	b085      	sub	sp, #20
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	4608      	mov	r0, r1
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	817b      	strh	r3, [r7, #10]
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	813b      	strh	r3, [r7, #8]
 800f8da:	4613      	mov	r3, r2
 800f8dc:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	897a      	ldrh	r2, [r7, #10]
 800f8e2:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	893a      	ldrh	r2, [r7, #8]
 800f8e8:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	88fa      	ldrh	r2, [r7, #6]
 800f8ee:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	8b3a      	ldrh	r2, [r7, #24]
 800f8f4:	80da      	strh	r2, [r3, #6]
    }
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3714      	adds	r7, #20
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f902:	4770      	bx	lr

0800f904 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	460b      	mov	r3, r1
 800f90e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	887a      	ldrh	r2, [r7, #2]
 800f914:	801a      	strh	r2, [r3, #0]
    {
    }
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4618      	mov	r0, r3
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af02      	add	r7, sp, #8
 800f92a:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 800f92c:	4a13      	ldr	r2, [pc, #76]	; (800f97c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	601a      	str	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	1d18      	adds	r0, r3, #4
 800f936:	2300      	movs	r3, #0
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	2300      	movs	r3, #0
 800f93c:	2200      	movs	r2, #0
 800f93e:	2100      	movs	r1, #0
 800f940:	f7ff ffc0 	bl	800f8c4 <_ZN8touchgfx4RectC1Essss>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	330c      	adds	r3, #12
 800f948:	4618      	mov	r0, r3
 800f94a:	f7ff ffa4 	bl	800f896 <_ZN8touchgfx4RectC1Ev>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	615a      	str	r2, [r3, #20]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	619a      	str	r2, [r3, #24]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2200      	movs	r2, #0
 800f95e:	61da      	str	r2, [r3, #28]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2201      	movs	r2, #1
 800f96c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	4618      	mov	r0, r3
 800f974:	3708      	adds	r7, #8
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	0802784c 	.word	0x0802784c

0800f980 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	4a04      	ldr	r2, [pc, #16]	; (800f99c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	601a      	str	r2, [r3, #0]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4618      	mov	r0, r3
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr
 800f99c:	0802784c 	.word	0x0802784c

0800f9a0 <_ZN8touchgfx8DrawableD0Ev>:
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7ff ffe9 	bl	800f980 <_ZN8touchgfx8DrawableD1Ev>
 800f9ae:	2128      	movs	r1, #40	; 0x28
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f014 fa2e 	bl	8023e12 <_ZdlPvj>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3708      	adds	r7, #8
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	4608      	mov	r0, r1
 800f9ca:	4611      	mov	r1, r2
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	817b      	strh	r3, [r7, #10]
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	813b      	strh	r3, [r7, #8]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	3334      	adds	r3, #52	; 0x34
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f9e6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	4798      	blx	r3
        setWidth(width);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	3338      	adds	r3, #56	; 0x38
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	4798      	blx	r3
        setHeight(height);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	333c      	adds	r3, #60	; 0x3c
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800fa0c:	4611      	mov	r1, r2
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	4798      	blx	r3
    }
 800fa12:	bf00      	nop
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800fa1a:	b480      	push	{r7}
 800fa1c:	b083      	sub	sp, #12
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
 800fa22:	460b      	mov	r3, r1
 800fa24:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	887a      	ldrh	r2, [r7, #2]
 800fa2a:	809a      	strh	r2, [r3, #4]
    }
 800fa2c:	bf00      	nop
 800fa2e:	370c      	adds	r7, #12
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800fa38:	b480      	push	{r7}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	460b      	mov	r3, r1
 800fa42:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	887a      	ldrh	r2, [r7, #2]
 800fa48:	80da      	strh	r2, [r3, #6]
    }
 800fa4a:	bf00      	nop
 800fa4c:	370c      	adds	r7, #12
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr

0800fa56 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b082      	sub	sp, #8
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
 800fa5e:	460b      	mov	r3, r1
 800fa60:	807b      	strh	r3, [r7, #2]
 800fa62:	4613      	mov	r3, r2
 800fa64:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	332c      	adds	r3, #44	; 0x2c
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fa72:	4611      	mov	r1, r2
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	4798      	blx	r3
        setY(y);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	3330      	adds	r3, #48	; 0x30
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fa84:	4611      	mov	r1, r2
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	4798      	blx	r3
    }
 800fa8a:	bf00      	nop
 800fa8c:	3708      	adds	r7, #8
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800fa92:	b480      	push	{r7}
 800fa94:	b083      	sub	sp, #12
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	887a      	ldrh	r2, [r7, #2]
 800faa2:	811a      	strh	r2, [r3, #8]
    }
 800faa4:	bf00      	nop
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	460b      	mov	r3, r1
 800faba:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	887a      	ldrh	r2, [r7, #2]
 800fac0:	815a      	strh	r2, [r3, #10]
    }
 800fac2:	bf00      	nop
 800fac4:	370c      	adds	r7, #12
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800face:	b480      	push	{r7}
 800fad0:	b083      	sub	sp, #12
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	bf00      	nop
 800fad8:	370c      	adds	r7, #12
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr

0800fae2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800fae2:	b480      	push	{r7}
 800fae4:	b083      	sub	sp, #12
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
 800faea:	6039      	str	r1, [r7, #0]
 800faec:	bf00      	nop
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]
 800fb02:	bf00      	nop
 800fb04:	370c      	adds	r7, #12
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr

0800fb0e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800fb0e:	b480      	push	{r7}
 800fb10:	b083      	sub	sp, #12
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
 800fb16:	6039      	str	r1, [r7, #0]
 800fb18:	bf00      	nop
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	bf00      	nop
 800fb2e:	370c      	adds	r7, #12
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr

0800fb38 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	460b      	mov	r3, r1
 800fb42:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	78fa      	ldrb	r2, [r7, #3]
 800fb48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800fb4c:	bf00      	nop
 800fb4e:	370c      	adds	r7, #12
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr

0800fb58 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800fb66:	4618      	mov	r0, r3
 800fb68:	370c      	adds	r7, #12
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr

0800fb72 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800fb72:	b480      	push	{r7}
 800fb74:	b083      	sub	sp, #12
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800fb80:	4618      	mov	r0, r3
 800fb82:	370c      	adds	r7, #12
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr

0800fb8c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	460b      	mov	r3, r1
 800fb96:	807b      	strh	r3, [r7, #2]
 800fb98:	4613      	mov	r3, r2
 800fb9a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	3354      	adds	r3, #84	; 0x54
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	8879      	ldrh	r1, [r7, #2]
 800fba6:	687a      	ldr	r2, [r7, #4]
 800fba8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800fbac:	b292      	uxth	r2, r2
 800fbae:	1a8a      	subs	r2, r1, r2
 800fbb0:	b292      	uxth	r2, r2
 800fbb2:	b210      	sxth	r0, r2
 800fbb4:	8839      	ldrh	r1, [r7, #0]
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800fbbc:	b292      	uxth	r2, r2
 800fbbe:	1a8a      	subs	r2, r1, r2
 800fbc0:	b292      	uxth	r2, r2
 800fbc2:	b212      	sxth	r2, r2
 800fbc4:	4601      	mov	r1, r0
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	4798      	blx	r3
    }
 800fbca:	bf00      	nop
 800fbcc:	3708      	adds	r7, #8
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800fbd2:	b480      	push	{r7}
 800fbd4:	b083      	sub	sp, #12
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbe0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbe8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbf0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800fbf2:	bf00      	nop
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b084      	sub	sp, #16
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	60f8      	str	r0, [r7, #12]
 800fc06:	60b9      	str	r1, [r7, #8]
 800fc08:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800fc0a:	68f8      	ldr	r0, [r7, #12]
 800fc0c:	f7ff ffe1 	bl	800fbd2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	601a      	str	r2, [r3, #0]
    }
 800fc1e:	bf00      	nop
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
	...

0800fc28 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	4a05      	ldr	r2, [pc, #20]	; (800fc48 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	601a      	str	r2, [r3, #0]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7ff fea1 	bl	800f980 <_ZN8touchgfx8DrawableD1Ev>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	4618      	mov	r0, r3
 800fc42:	3708      	adds	r7, #8
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	08026618 	.word	0x08026618

0800fc4c <_ZN8touchgfx9ContainerD0Ev>:
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f7ff ffe7 	bl	800fc28 <_ZN8touchgfx9ContainerD1Ev>
 800fc5a:	212c      	movs	r1, #44	; 0x2c
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f014 f8d8 	bl	8023e12 <_ZdlPvj>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4618      	mov	r0, r3
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	4a06      	ldr	r2, [pc, #24]	; (800fc90 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	601a      	str	r2, [r3, #0]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	3304      	adds	r3, #4
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff ffd2 	bl	800fc28 <_ZN8touchgfx9ContainerD1Ev>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	08027944 	.word	0x08027944

0800fc94 <_ZN8touchgfx6ScreenD0Ev>:
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7ff ffe5 	bl	800fc6c <_ZN8touchgfx6ScreenD1Ev>
 800fca2:	213c      	movs	r1, #60	; 0x3c
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f014 f8b4 	bl	8023e12 <_ZdlPvj>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4618      	mov	r0, r3
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	bf00      	nop
 800fcbe:	370c      	adds	r7, #12
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	bf00      	nop
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	bf00      	nop
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
    {
    }
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fd10:	bf00      	nop
 800fd12:	370c      	adds	r7, #12
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr

0800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	3304      	adds	r3, #4
 800fd2a:	6839      	ldr	r1, [r7, #0]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f004 ff0b 	bl	8014b48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800fd32:	bf00      	nop
 800fd34:	3708      	adds	r7, #8
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
	...

0800fd3c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7ff fdec 	bl	800f924 <_ZN8touchgfx8DrawableC1Ev>
 800fd4c:	4a03      	ldr	r2, [pc, #12]	; (800fd5c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	601a      	str	r2, [r3, #0]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	4618      	mov	r0, r3
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	08025938 	.word	0x08025938

0800fd60 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	4a05      	ldr	r2, [pc, #20]	; (800fd80 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7ff fe05 	bl	800f980 <_ZN8touchgfx8DrawableD1Ev>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	08025938 	.word	0x08025938

0800fd84 <_ZN8touchgfx6WidgetD0Ev>:
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f7ff ffe7 	bl	800fd60 <_ZN8touchgfx6WidgetD1Ev>
 800fd92:	2128      	movs	r1, #40	; 0x28
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f014 f83c 	bl	8023e12 <_ZdlPvj>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3708      	adds	r7, #8
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	607b      	str	r3, [r7, #4]
 800fdae:	460b      	mov	r3, r1
 800fdb0:	817b      	strh	r3, [r7, #10]
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7ff fecd 	bl	800fb58 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d008      	beq.n	800fdd6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7ff fed3 	bl	800fb72 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d001      	beq.n	800fdd6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e000      	b.n	800fdd8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d002      	beq.n	800fde2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800fddc:	68fa      	ldr	r2, [r7, #12]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	601a      	str	r2, [r3, #0]
        }
    }
 800fde2:	bf00      	nop
 800fde4:	3710      	adds	r7, #16
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
	...

0800fdec <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7ff ffa0 	bl	800fd3c <_ZN8touchgfx6WidgetC1Ev>
 800fdfc:	4a0a      	ldr	r2, [pc, #40]	; (800fe28 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	601a      	str	r2, [r3, #0]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	22ff      	movs	r2, #255	; 0xff
 800fe06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	3328      	adds	r3, #40	; 0x28
 800fe0e:	2100      	movs	r1, #0
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7ff fd31 	bl	800f878 <_ZN8touchgfx9colortypeC1Em>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4618      	mov	r0, r3
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	08027350 	.word	0x08027350

0800fe2c <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	4a05      	ldr	r2, [pc, #20]	; (800fe4c <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	601a      	str	r2, [r3, #0]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7ff ff8f 	bl	800fd60 <_ZN8touchgfx6WidgetD1Ev>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	4618      	mov	r0, r3
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	08027350 	.word	0x08027350

0800fe50 <_ZN8touchgfx3BoxD0Ev>:
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7ff ffe7 	bl	800fe2c <_ZN8touchgfx3BoxD1Ev>
 800fe5e:	2130      	movs	r1, #48	; 0x30
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f013 ffd6 	bl	8023e12 <_ZdlPvj>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3708      	adds	r7, #8
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	683a      	ldr	r2, [r7, #0]
 800fe7e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fe80:	bf00      	nop
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	460b      	mov	r3, r1
 800fe96:	807b      	strh	r3, [r7, #2]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	887a      	ldrh	r2, [r7, #2]
 800fe9c:	801a      	strh	r2, [r3, #0]
    }
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4618      	mov	r0, r3
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
        assertValid();
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f7fe fd13 	bl	800e8e0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800feba:	4b06      	ldr	r3, [pc, #24]	; (800fed4 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	881b      	ldrh	r3, [r3, #0]
 800fec2:	4619      	mov	r1, r3
 800fec4:	4610      	mov	r0, r2
 800fec6:	f001 ff5d 	bl	8011d84 <_ZNK8touchgfx5Texts7getTextEt>
 800feca:	4603      	mov	r3, r0
    }
 800fecc:	4618      	mov	r0, r3
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	2000bd04 	.word	0x2000bd04

0800fed8 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7ff ff2a 	bl	800fd3c <_ZN8touchgfx6WidgetC1Ev>
 800fee8:	4a13      	ldr	r2, [pc, #76]	; (800ff38 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	3326      	adds	r3, #38	; 0x26
 800fef2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7ff ffc8 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	3328      	adds	r3, #40	; 0x28
 800ff00:	2100      	movs	r1, #0
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7ff fcb8 	bl	800f878 <_ZN8touchgfx9colortypeC1Em>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	22ff      	movs	r2, #255	; 0xff
 800ff12:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4618      	mov	r0, r3
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	080272d4 	.word	0x080272d4

0800ff3c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af02      	add	r7, sp, #8
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800ff46:	2300      	movs	r3, #0
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	2100      	movs	r1, #0
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7ff fcb7 	bl	800f8c4 <_ZN8touchgfx4RectC1Essss>
    }
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800ff5e:	b480      	push	{r7}
 800ff60:	b083      	sub	sp, #12
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
 800ff66:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ff6e:	bf00      	nop
 800ff70:	370c      	adds	r7, #12
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr

0800ff7a <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800ff7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7c:	b085      	sub	sp, #20
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	6078      	str	r0, [r7, #4]
 800ff82:	460b      	mov	r3, r1
 800ff84:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800ff86:	687e      	ldr	r6, [r7, #4]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	3330      	adds	r3, #48	; 0x30
 800ff8e:	681c      	ldr	r4, [r3, #0]
 800ff90:	887d      	ldrh	r5, [r7, #2]
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 f845 	bl	8010022 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	81bb      	strh	r3, [r7, #12]
 800ff9c:	f107 030c 	add.w	r3, r7, #12
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7fe fc69 	bl	800e878 <_ZNK8touchgfx9TypedText7getFontEv>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	6813      	ldr	r3, [r2, #0]
 800ffaa:	332c      	adds	r3, #44	; 0x2c
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4610      	mov	r0, r2
 800ffb0:	4798      	blx	r3
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	1aeb      	subs	r3, r5, r3
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	b21b      	sxth	r3, r3
 800ffba:	4619      	mov	r1, r3
 800ffbc:	4630      	mov	r0, r6
 800ffbe:	47a0      	blx	r4
    }
 800ffc0:	bf00      	nop
 800ffc2:	3714      	adds	r7, #20
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ffc8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	807b      	strh	r3, [r7, #2]
 800ffd4:	4613      	mov	r3, r2
 800ffd6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	332c      	adds	r3, #44	; 0x2c
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800ffe6:	4610      	mov	r0, r2
 800ffe8:	4798      	blx	r3
        setBaselineY(baselineY);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	3360      	adds	r3, #96	; 0x60
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fff6:	4611      	mov	r1, r2
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	4798      	blx	r3
    }
 800fffc:	bf00      	nop
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010004:	b480      	push	{r7}
 8010006:	b083      	sub	sp, #12
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	460b      	mov	r3, r1
 801000e:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	887a      	ldrh	r2, [r7, #2]
 8010014:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010016:	bf00      	nop
 8010018:	370c      	adds	r7, #12
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr

08010022 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010022:	b480      	push	{r7}
 8010024:	b083      	sub	sp, #12
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 801002e:	4618      	mov	r0, r3
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr
	...

0801003c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	4a05      	ldr	r2, [pc, #20]	; (801005c <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	601a      	str	r2, [r3, #0]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4618      	mov	r0, r3
 801004e:	f7ff fe87 	bl	800fd60 <_ZN8touchgfx6WidgetD1Ev>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4618      	mov	r0, r3
 8010056:	3708      	adds	r7, #8
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}
 801005c:	080272d4 	.word	0x080272d4

08010060 <_ZN8touchgfx8TextAreaD0Ev>:
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f7ff ffe7 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 801006e:	2134      	movs	r1, #52	; 0x34
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f013 fece 	bl	8023e12 <_ZdlPvj>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4618      	mov	r0, r3
 801007a:	3708      	adds	r7, #8
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	4618      	mov	r0, r3
 801008c:	f7ff ff24 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 8010090:	4a03      	ldr	r2, [pc, #12]	; (80100a0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	601a      	str	r2, [r3, #0]
    {
    }
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	080258bc 	.word	0x080258bc

080100a4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	4a05      	ldr	r2, [pc, #20]	; (80100c4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	601a      	str	r2, [r3, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7ff ffc1 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4618      	mov	r0, r3
 80100be:	3708      	adds	r7, #8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}
 80100c4:	080258bc 	.word	0x080258bc

080100c8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f7ff ffe7 	bl	80100a4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80100d6:	2134      	movs	r1, #52	; 0x34
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f013 fe9a 	bl	8023e12 <_ZdlPvj>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4618      	mov	r0, r3
 80100e2:	3708      	adds	r7, #8
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7ff ffc4 	bl	8010080 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 80100f8:	4a05      	ldr	r2, [pc, #20]	; (8010110 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	601a      	str	r2, [r3, #0]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2200      	movs	r2, #0
 8010102:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4618      	mov	r0, r3
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	0802743c 	.word	0x0802743c

08010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	683a      	ldr	r2, [r7, #0]
 8010122:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010124:	bf00      	nop
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	4618      	mov	r0, r3
 801013e:	f7ff fdfd 	bl	800fd3c <_ZN8touchgfx6WidgetC1Ev>
 8010142:	4a0b      	ldr	r2, [pc, #44]	; (8010170 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	601a      	str	r2, [r3, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	3326      	adds	r3, #38	; 0x26
 801014c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010150:	4618      	mov	r0, r3
 8010152:	f7ff fbd7 	bl	800f904 <_ZN8touchgfx6BitmapC1Et>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	22ff      	movs	r2, #255	; 0xff
 801015a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 801015e:	6839      	ldr	r1, [r7, #0]
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f006 fddf 	bl	8016d24 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	4618      	mov	r0, r3
 801016a:	3708      	adds	r7, #8
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	080274b8 	.word	0x080274b8

08010174 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	683a      	ldr	r2, [r7, #0]
 8010182:	601a      	str	r2, [r3, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	4618      	mov	r0, r3
 8010188:	370c      	adds	r7, #12
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr

08010192 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8010192:	b480      	push	{r7}
 8010194:	b083      	sub	sp, #12
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
        {
            return v;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
        }
 801019e:	4618      	mov	r0, r3
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 80101aa:	b590      	push	{r4, r7, lr}
 80101ac:	b083      	sub	sp, #12
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
 80101b2:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	3340      	adds	r3, #64	; 0x40
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7ff ffea 	bl	8010192 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80101be:	4604      	mov	r4, r0
 80101c0:	463b      	mov	r3, r7
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7ff ffe5 	bl	8010192 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80101c8:	4603      	mov	r3, r0
 80101ca:	429c      	cmp	r4, r3
 80101cc:	bf0c      	ite	eq
 80101ce:	2301      	moveq	r3, #1
 80101d0:	2300      	movne	r3, #0
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d106      	bne.n	80101e6 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	683a      	ldr	r2, [r7, #0]
 80101dc:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f006 f81a 	bl	8016218 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80101e4:	e000      	b.n	80101e8 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 80101e6:	bf00      	nop
    }
 80101e8:	370c      	adds	r7, #12
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd90      	pop	{r4, r7, pc}
	...

080101f0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	4a05      	ldr	r2, [pc, #20]	; (8010210 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	601a      	str	r2, [r3, #0]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4618      	mov	r0, r3
 8010202:	f005 fe1d 	bl	8015e40 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4618      	mov	r0, r3
 801020a:	3708      	adds	r7, #8
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	08026e28 	.word	0x08026e28

08010214 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7ff ffe7 	bl	80101f0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010222:	2114      	movs	r1, #20
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f013 fdf4 	bl	8023e12 <_ZdlPvj>
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4618      	mov	r0, r3
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	4a05      	ldr	r2, [pc, #20]	; (8010254 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	601a      	str	r2, [r3, #0]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	4618      	mov	r0, r3
 8010246:	f7ff fd8b 	bl	800fd60 <_ZN8touchgfx6WidgetD1Ev>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	080274b8 	.word	0x080274b8

08010258 <_ZN8touchgfx5ImageD0Ev>:
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f7ff ffe7 	bl	8010234 <_ZN8touchgfx5ImageD1Ev>
 8010266:	212c      	movs	r1, #44	; 0x2c
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f013 fdd2 	bl	8023e12 <_ZdlPvj>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4618      	mov	r0, r3
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	4a05      	ldr	r2, [pc, #20]	; (8010298 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	601a      	str	r2, [r3, #0]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4618      	mov	r0, r3
 801028a:	f7ff fcef 	bl	800fc6c <_ZN8touchgfx6ScreenD1Ev>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4618      	mov	r0, r3
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	08025888 	.word	0x08025888

0801029c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f7ff ffe7 	bl	8010278 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80102aa:	2140      	movs	r1, #64	; 0x40
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f013 fdb0 	bl	8023e12 <_ZdlPvj>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}

080102bc <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 80102bc:	b580      	push	{r7, lr}
 80102be:	b082      	sub	sp, #8
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	4a81      	ldr	r2, [pc, #516]	; (80104cc <_ZN12MainViewBaseD1Ev+0x210>)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	601a      	str	r2, [r3, #0]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 80102d0:	4618      	mov	r0, r3
 80102d2:	f001 fc6d 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 80102dc:	4618      	mov	r0, r3
 80102de:	f001 fc67 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80102e8:	4618      	mov	r0, r3
 80102ea:	f001 fc61 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7ff fea1 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8010300:	4618      	mov	r0, r3
 8010302:	f001 fc55 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f603 0398 	addw	r3, r3, #2200	; 0x898
 801030c:	4618      	mov	r0, r3
 801030e:	f004 f91f 	bl	8014550 <_ZN8touchgfx13ImageProgressD1Ev>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8010318:	4618      	mov	r0, r3
 801031a:	f001 fc49 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8010324:	4618      	mov	r0, r3
 8010326:	f001 fc87 	bl	8011c38 <_ZN8touchgfx13PainterRGB888D1Ev>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8010330:	4618      	mov	r0, r3
 8010332:	f001 fc5f 	bl	8011bf4 <_ZN8touchgfx4LineD1Ev>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 801033c:	4618      	mov	r0, r3
 801033e:	f001 fc7b 	bl	8011c38 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8010348:	4618      	mov	r0, r3
 801034a:	f001 fc53 	bl	8011bf4 <_ZN8touchgfx4LineD1Ev>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8010354:	4618      	mov	r0, r3
 8010356:	f003 fffb 	bl	8014350 <_ZN8touchgfx11BoxProgressD1Ev>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8010360:	4618      	mov	r0, r3
 8010362:	f7ff fe6b 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 801036c:	4618      	mov	r0, r3
 801036e:	f001 fc1f 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 8010378:	4618      	mov	r0, r3
 801037a:	f001 fc19 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8010384:	4618      	mov	r0, r3
 8010386:	f7ff fe59 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8010390:	4618      	mov	r0, r3
 8010392:	f7ff fe53 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f203 5344 	addw	r3, r3, #1348	; 0x544
 801039c:	4618      	mov	r0, r3
 801039e:	f001 fc07 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 80103a8:	4618      	mov	r0, r3
 80103aa:	f001 fc01 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff fe41 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7ff fe3b 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80103cc:	4618      	mov	r0, r3
 80103ce:	f001 fc33 	bl	8011c38 <_ZN8touchgfx13PainterRGB888D1Ev>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80103d8:	4618      	mov	r0, r3
 80103da:	f001 fc0b 	bl	8011bf4 <_ZN8touchgfx4LineD1Ev>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7ff fe29 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7ff fe23 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7ff fe1d 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010408:	4618      	mov	r0, r3
 801040a:	f7ff fe17 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff fe11 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8010420:	4618      	mov	r0, r3
 8010422:	f7ff fe0b 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801042c:	4618      	mov	r0, r3
 801042e:	f7ff fe05 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010438:	4618      	mov	r0, r3
 801043a:	f7ff fdff 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8010444:	4618      	mov	r0, r3
 8010446:	f7ff fdf9 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010450:	4618      	mov	r0, r3
 8010452:	f7ff fdf3 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801045c:	4618      	mov	r0, r3
 801045e:	f7ff fee9 	bl	8010234 <_ZN8touchgfx5ImageD1Ev>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010468:	4618      	mov	r0, r3
 801046a:	f001 fba1 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010474:	4618      	mov	r0, r3
 8010476:	f001 fb9b 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010480:	4618      	mov	r0, r3
 8010482:	f7ff fddb 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801048c:	4618      	mov	r0, r3
 801048e:	f7ff fdd5 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	33d8      	adds	r3, #216	; 0xd8
 8010496:	4618      	mov	r0, r3
 8010498:	f7ff fdd0 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	33a4      	adds	r3, #164	; 0xa4
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7ff fdcb 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	3370      	adds	r3, #112	; 0x70
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff fdc6 	bl	801003c <_ZN8touchgfx8TextAreaD1Ev>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	3340      	adds	r3, #64	; 0x40
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7ff fcb9 	bl	800fe2c <_ZN8touchgfx3BoxD1Ev>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4618      	mov	r0, r3
 80104be:	f7ff fedb 	bl	8010278 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4618      	mov	r0, r3
 80104c6:	3708      	adds	r7, #8
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	08025854 	.word	0x08025854

080104d0 <_ZN12MainViewBaseD0Ev>:
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7ff feef 	bl	80102bc <_ZN12MainViewBaseD1Ev>
 80104de:	f242 712c 	movw	r1, #10028	; 0x272c
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f013 fc95 	bl	8023e12 <_ZdlPvj>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4618      	mov	r0, r3
 80104ec:	3708      	adds	r7, #8
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
	...

080104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80104f4:	b590      	push	{r4, r7, lr}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	4603      	mov	r3, r0
 80104fc:	71fb      	strb	r3, [r7, #7]
 80104fe:	460b      	mov	r3, r1
 8010500:	71bb      	strb	r3, [r7, #6]
 8010502:	4613      	mov	r3, r2
 8010504:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010506:	f7fe fd8b 	bl	800f020 <_ZN8touchgfx3HAL11getInstanceEv>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	d105      	bne.n	801051c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010510:	4b0a      	ldr	r3, [pc, #40]	; (801053c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010512:	4a0b      	ldr	r2, [pc, #44]	; (8010540 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010514:	2138      	movs	r1, #56	; 0x38
 8010516:	480b      	ldr	r0, [pc, #44]	; (8010544 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010518:	f013 fca6 	bl	8023e68 <__assert_func>
 801051c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 801051e:	f7fe fd8b 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8010522:	6803      	ldr	r3, [r0, #0]
 8010524:	332c      	adds	r3, #44	; 0x2c
 8010526:	681c      	ldr	r4, [r3, #0]
 8010528:	797b      	ldrb	r3, [r7, #5]
 801052a:	79ba      	ldrb	r2, [r7, #6]
 801052c:	79f9      	ldrb	r1, [r7, #7]
 801052e:	47a0      	blx	r4
 8010530:	4603      	mov	r3, r0
    }
 8010532:	4618      	mov	r0, r3
 8010534:	370c      	adds	r7, #12
 8010536:	46bd      	mov	sp, r7
 8010538:	bd90      	pop	{r4, r7, pc}
 801053a:	bf00      	nop
 801053c:	080252c4 	.word	0x080252c4
 8010540:	08025998 	.word	0x08025998
 8010544:	08025308 	.word	0x08025308

08010548 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010548:	b590      	push	{r4, r7, lr}
 801054a:	b0b5      	sub	sp, #212	; 0xd4
 801054c:	af02      	add	r7, sp, #8
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	4618      	mov	r0, r3
 8010554:	f001 fab2 	bl	8011abc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010558:	4adc      	ldr	r2, [pc, #880]	; (80108cc <_ZN12MainViewBaseC1Ev+0x384>)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	601a      	str	r2, [r3, #0]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	3340      	adds	r3, #64	; 0x40
 8010562:	4618      	mov	r0, r3
 8010564:	f7ff fc42 	bl	800fdec <_ZN8touchgfx3BoxC1Ev>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	3370      	adds	r3, #112	; 0x70
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff fcb3 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	33a4      	adds	r3, #164	; 0xa4
 8010576:	4618      	mov	r0, r3
 8010578:	f7ff fcae 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	33d8      	adds	r3, #216	; 0xd8
 8010580:	4618      	mov	r0, r3
 8010582:	f7ff fca9 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801058c:	4618      	mov	r0, r3
 801058e:	f7ff fca3 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010598:	4618      	mov	r0, r3
 801059a:	f7ff fc9d 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7ff fd9f 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7ff fd99 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 80105bc:	f107 0308 	add.w	r3, r7, #8
 80105c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7ff f99d 	bl	800f904 <_ZN8touchgfx6BitmapC1Et>
 80105ca:	f107 0308 	add.w	r3, r7, #8
 80105ce:	4619      	mov	r1, r3
 80105d0:	4620      	mov	r0, r4
 80105d2:	f7ff fdad 	bl	8010130 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80105dc:	4618      	mov	r0, r3
 80105de:	f7ff fc7b 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7ff fc75 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7ff fc6f 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8010600:	4618      	mov	r0, r3
 8010602:	f7ff fc69 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 801060c:	4618      	mov	r0, r3
 801060e:	f7ff fc63 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8010618:	4618      	mov	r0, r3
 801061a:	f7ff fc5d 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010624:	4618      	mov	r0, r3
 8010626:	f7ff fc57 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8010630:	4618      	mov	r0, r3
 8010632:	f7ff fc51 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 801063c:	4618      	mov	r0, r3
 801063e:	f7ff fc4b 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8010648:	4618      	mov	r0, r3
 801064a:	f7ff fc45 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8010654:	4618      	mov	r0, r3
 8010656:	f005 fdbf 	bl	80161d8 <_ZN8touchgfx4LineC1Ev>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8010660:	f107 030c 	add.w	r3, r7, #12
 8010664:	2100      	movs	r1, #0
 8010666:	4618      	mov	r0, r3
 8010668:	f7ff f906 	bl	800f878 <_ZN8touchgfx9colortypeC1Em>
 801066c:	22ff      	movs	r2, #255	; 0xff
 801066e:	68f9      	ldr	r1, [r7, #12]
 8010670:	4620      	mov	r0, r4
 8010672:	f005 fba3 	bl	8015dbc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 801067c:	4618      	mov	r0, r3
 801067e:	f7ff fc2b 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8010688:	4618      	mov	r0, r3
 801068a:	f7ff fc25 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8010694:	4618      	mov	r0, r3
 8010696:	f7ff fd27 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7ff fd21 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7ff fc13 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7ff fc0d 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7ff fd0f 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7ff fd09 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff fbfb 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80106e8:	4618      	mov	r0, r3
 80106ea:	f003 fe45 	bl	8014378 <_ZN8touchgfx11BoxProgressC1Ev>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 80106f4:	4618      	mov	r0, r3
 80106f6:	f005 fd6f 	bl	80161d8 <_ZN8touchgfx4LineC1Ev>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 8010700:	f107 0310 	add.w	r3, r7, #16
 8010704:	2100      	movs	r1, #0
 8010706:	4618      	mov	r0, r3
 8010708:	f7ff f8b6 	bl	800f878 <_ZN8touchgfx9colortypeC1Em>
 801070c:	22ff      	movs	r2, #255	; 0xff
 801070e:	6939      	ldr	r1, [r7, #16]
 8010710:	4620      	mov	r0, r4
 8010712:	f005 fb53 	bl	8015dbc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 801071c:	4618      	mov	r0, r3
 801071e:	f005 fd5b 	bl	80161d8 <_ZN8touchgfx4LineC1Ev>
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f603 0448 	addw	r4, r3, #2120	; 0x848
 8010728:	f107 0314 	add.w	r3, r7, #20
 801072c:	2100      	movs	r1, #0
 801072e:	4618      	mov	r0, r3
 8010730:	f7ff f8a2 	bl	800f878 <_ZN8touchgfx9colortypeC1Em>
 8010734:	22ff      	movs	r2, #255	; 0xff
 8010736:	6979      	ldr	r1, [r7, #20]
 8010738:	4620      	mov	r0, r4
 801073a:	f005 fb3f 	bl	8015dbc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8010744:	4618      	mov	r0, r3
 8010746:	f7ff fccf 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8010750:	4618      	mov	r0, r3
 8010752:	f003 ff27 	bl	80145a4 <_ZN8touchgfx13ImageProgressC1Ev>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f603 1388 	addw	r3, r3, #2440	; 0x988
 801075c:	4618      	mov	r0, r3
 801075e:	f7ff fcc3 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8010768:	4618      	mov	r0, r3
 801076a:	f7ff fbb5 	bl	800fed8 <_ZN8touchgfx8TextAreaC1Ev>
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8010774:	4618      	mov	r0, r3
 8010776:	f7ff fcb7 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8010780:	4618      	mov	r0, r3
 8010782:	f7ff fcb1 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 801078c:	4618      	mov	r0, r3
 801078e:	f7ff fcab 	bl	80100e8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f603 330a 	addw	r3, r3, #2826	; 0xb0a
 8010798:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801079c:	4618      	mov	r0, r3
 801079e:	f006 fb2f 	bl	8016e00 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80107a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80107ac:	9300      	str	r3, [sp, #0]
 80107ae:	f44f 7348 	mov.w	r3, #800	; 0x320
 80107b2:	2200      	movs	r2, #0
 80107b4:	2100      	movs	r1, #0
 80107b6:	f7ff f903 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80107c0:	2200      	movs	r2, #0
 80107c2:	2100      	movs	r1, #0
 80107c4:	2000      	movs	r0, #0
 80107c6:	f7ff fe95 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80107ca:	4603      	mov	r3, r0
 80107cc:	4619      	mov	r1, r3
 80107ce:	4620      	mov	r0, r4
 80107d0:	f7ff fb4e 	bl	800fe70 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    RpmDescriptor.setXY(228, 138);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	3370      	adds	r3, #112	; 0x70
 80107d8:	228a      	movs	r2, #138	; 0x8a
 80107da:	21e4      	movs	r1, #228	; 0xe4
 80107dc:	4618      	mov	r0, r3
 80107de:	f7ff f93a 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    RpmDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80107e8:	2200      	movs	r2, #0
 80107ea:	21dc      	movs	r1, #220	; 0xdc
 80107ec:	20ff      	movs	r0, #255	; 0xff
 80107ee:	f7ff fe81 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80107f2:	4603      	mov	r3, r0
 80107f4:	4619      	mov	r1, r3
 80107f6:	4620      	mov	r0, r4
 80107f8:	f7ff fbb1 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RpmDescriptor.setLinespacing(0);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	3370      	adds	r3, #112	; 0x70
 8010800:	2100      	movs	r1, #0
 8010802:	4618      	mov	r0, r3
 8010804:	f7ff fbfe 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    RpmDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801080e:	f107 0318 	add.w	r3, r7, #24
 8010812:	210e      	movs	r1, #14
 8010814:	4618      	mov	r0, r3
 8010816:	f7ff fb39 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 801081a:	8b39      	ldrh	r1, [r7, #24]
 801081c:	4620      	mov	r0, r4
 801081e:	f005 ffe1 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaDescriptor.setXY(428, 126);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	33a4      	adds	r3, #164	; 0xa4
 8010826:	227e      	movs	r2, #126	; 0x7e
 8010828:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 801082c:	4618      	mov	r0, r3
 801082e:	f7ff f912 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010838:	2200      	movs	r2, #0
 801083a:	21dc      	movs	r1, #220	; 0xdc
 801083c:	20ff      	movs	r0, #255	; 0xff
 801083e:	f7ff fe59 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010842:	4603      	mov	r3, r0
 8010844:	4619      	mov	r1, r3
 8010846:	4620      	mov	r0, r4
 8010848:	f7ff fb89 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	33a4      	adds	r3, #164	; 0xa4
 8010850:	2100      	movs	r1, #0
 8010852:	4618      	mov	r0, r3
 8010854:	f7ff fbd6 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801085e:	f107 031c 	add.w	r3, r7, #28
 8010862:	211e      	movs	r1, #30
 8010864:	4618      	mov	r0, r3
 8010866:	f7ff fb11 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 801086a:	8bb9      	ldrh	r1, [r7, #28]
 801086c:	4620      	mov	r0, r4
 801086e:	f005 ffb9 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(346, 126);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	33d8      	adds	r3, #216	; 0xd8
 8010876:	227e      	movs	r2, #126	; 0x7e
 8010878:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 801087c:	4618      	mov	r0, r3
 801087e:	f7ff f8ea 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8010888:	2200      	movs	r2, #0
 801088a:	21dc      	movs	r1, #220	; 0xdc
 801088c:	20ff      	movs	r0, #255	; 0xff
 801088e:	f7ff fe31 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010892:	4603      	mov	r3, r0
 8010894:	4619      	mov	r1, r3
 8010896:	4620      	mov	r0, r4
 8010898:	f7ff fb61 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	33d8      	adds	r3, #216	; 0xd8
 80108a0:	2100      	movs	r1, #0
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7ff fbae 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80108ae:	f107 0320 	add.w	r3, r7, #32
 80108b2:	211d      	movs	r1, #29
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7ff fae9 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80108ba:	8c39      	ldrh	r1, [r7, #32]
 80108bc:	4620      	mov	r0, r4
 80108be:	f005 ff91 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(38, 126);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80108c8:	e002      	b.n	80108d0 <_ZN12MainViewBaseC1Ev+0x388>
 80108ca:	bf00      	nop
 80108cc:	08025854 	.word	0x08025854
 80108d0:	227e      	movs	r2, #126	; 0x7e
 80108d2:	2126      	movs	r1, #38	; 0x26
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7ff f8be 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80108e0:	2200      	movs	r2, #0
 80108e2:	21dc      	movs	r1, #220	; 0xdc
 80108e4:	20ff      	movs	r0, #255	; 0xff
 80108e6:	f7ff fe05 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80108ea:	4603      	mov	r3, r0
 80108ec:	4619      	mov	r1, r3
 80108ee:	4620      	mov	r0, r4
 80108f0:	f7ff fb35 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80108fa:	2100      	movs	r1, #0
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7ff fb81 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8010908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801090c:	2116      	movs	r1, #22
 801090e:	4618      	mov	r0, r3
 8010910:	f7ff fabc 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010914:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8010916:	4620      	mov	r0, r4
 8010918:	f005 ff64 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(119, 126);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010922:	227e      	movs	r2, #126	; 0x7e
 8010924:	2177      	movs	r1, #119	; 0x77
 8010926:	4618      	mov	r0, r3
 8010928:	f7ff f895 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8010932:	2200      	movs	r2, #0
 8010934:	21dc      	movs	r1, #220	; 0xdc
 8010936:	20ff      	movs	r0, #255	; 0xff
 8010938:	f7ff fddc 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801093c:	4603      	mov	r3, r0
 801093e:	4619      	mov	r1, r3
 8010940:	4620      	mov	r0, r4
 8010942:	f7ff fb0c 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801094c:	2100      	movs	r1, #0
 801094e:	4618      	mov	r0, r3
 8010950:	f7ff fb58 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801095a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801095e:	2115      	movs	r1, #21
 8010960:	4618      	mov	r0, r3
 8010962:	f7ff fa93 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010966:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8010968:	4620      	mov	r0, r4
 801096a:	f005 ff3b 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setXY(27, 91);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010974:	225b      	movs	r2, #91	; 0x5b
 8010976:	211b      	movs	r1, #27
 8010978:	4618      	mov	r0, r3
 801097a:	f7ff f86c 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8010984:	22ff      	movs	r2, #255	; 0xff
 8010986:	21ff      	movs	r1, #255	; 0xff
 8010988:	20ff      	movs	r0, #255	; 0xff
 801098a:	f7ff fdb3 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801098e:	4603      	mov	r3, r0
 8010990:	4619      	mov	r1, r3
 8010992:	4620      	mov	r0, r4
 8010994:	f7ff fae3 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801099e:	2100      	movs	r1, #0
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7ff fb2f 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f603 249c 	addw	r4, r3, #2716	; 0xa9c
 80109ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80109b0:	2103      	movs	r1, #3
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7ff fa6a 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80109b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80109bc:	4618      	mov	r0, r3
 80109be:	f7ff fa75 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 80109c2:	4603      	mov	r3, r0
 80109c4:	4ae4      	ldr	r2, [pc, #912]	; (8010d58 <_ZN12MainViewBaseC1Ev+0x810>)
 80109c6:	2105      	movs	r1, #5
 80109c8:	4620      	mov	r0, r4
 80109ca:	f009 fab5 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 80109da:	4619      	mov	r1, r3
 80109dc:	4610      	mov	r0, r2
 80109de:	f7ff fb99 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.resizeToCurrentText();
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80109e8:	4618      	mov	r0, r3
 80109ea:	f005 fed1 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 80109f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80109f8:	2102      	movs	r1, #2
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7ff fa46 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010a00:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8010a02:	4620      	mov	r0, r4
 8010a04:	f005 feee 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setXY(107, 91);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010a0e:	225b      	movs	r2, #91	; 0x5b
 8010a10:	216b      	movs	r1, #107	; 0x6b
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7ff f81f 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 8010a1e:	22ff      	movs	r2, #255	; 0xff
 8010a20:	21ff      	movs	r1, #255	; 0xff
 8010a22:	20ff      	movs	r0, #255	; 0xff
 8010a24:	f7ff fd66 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	4619      	mov	r1, r3
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f7ff fa96 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010a38:	2100      	movs	r1, #0
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7ff fae2 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f603 24a6 	addw	r4, r3, #2726	; 0xaa6
 8010a46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a4a:	2101      	movs	r1, #1
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7ff fa1d 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010a52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff fa28 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	4abe      	ldr	r2, [pc, #760]	; (8010d58 <_ZN12MainViewBaseC1Ev+0x810>)
 8010a60:	2105      	movs	r1, #5
 8010a62:	4620      	mov	r0, r4
 8010a64:	f009 fa68 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f603 23a6 	addw	r3, r3, #2726	; 0xaa6
 8010a74:	4619      	mov	r1, r3
 8010a76:	4610      	mov	r0, r2
 8010a78:	f7ff fb4c 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.resizeToCurrentText();
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010a82:	4618      	mov	r0, r3
 8010a84:	f005 fe84 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 8010a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010a92:	2100      	movs	r1, #0
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7ff f9f9 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010a9a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	f005 fea1 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010aa8:	223f      	movs	r2, #63	; 0x3f
 8010aaa:	21b3      	movs	r1, #179	; 0xb3
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fe ffd2 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010ab8:	2100      	movs	r1, #0
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7ff f83c 	bl	800fb38 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setXY(46, 56);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010ac6:	2238      	movs	r2, #56	; 0x38
 8010ac8:	212e      	movs	r1, #46	; 0x2e
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fe ffc3 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8010ad6:	22ff      	movs	r2, #255	; 0xff
 8010ad8:	21ff      	movs	r1, #255	; 0xff
 8010ada:	20ff      	movs	r0, #255	; 0xff
 8010adc:	f7ff fd0a 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f7ff fa3a 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010af0:	2100      	movs	r1, #0
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff fa86 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8010afe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010b02:	2104      	movs	r1, #4
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff f9c1 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010b0a:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f005 fe69 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setXY(94, 56);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8010b18:	2238      	movs	r2, #56	; 0x38
 8010b1a:	215e      	movs	r1, #94	; 0x5e
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fe ff9a 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f503 7411 	add.w	r4, r3, #580	; 0x244
 8010b28:	22ff      	movs	r2, #255	; 0xff
 8010b2a:	21ff      	movs	r1, #255	; 0xff
 8010b2c:	20ff      	movs	r0, #255	; 0xff
 8010b2e:	f7ff fce1 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b32:	4603      	mov	r3, r0
 8010b34:	4619      	mov	r1, r3
 8010b36:	4620      	mov	r0, r4
 8010b38:	f7ff fa11 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8010b42:	2100      	movs	r1, #0
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7ff fa5d 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f503 7411 	add.w	r4, r3, #580	; 0x244
 8010b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010b54:	2105      	movs	r1, #5
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7ff f998 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010b5c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8010b60:	4620      	mov	r0, r4
 8010b62:	f005 fe3f 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setXY(143, 56);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010b6c:	2238      	movs	r2, #56	; 0x38
 8010b6e:	218f      	movs	r1, #143	; 0x8f
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7fe ff70 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f503 741e 	add.w	r4, r3, #632	; 0x278
 8010b7c:	22ff      	movs	r2, #255	; 0xff
 8010b7e:	21ff      	movs	r1, #255	; 0xff
 8010b80:	20ff      	movs	r0, #255	; 0xff
 8010b82:	f7ff fcb7 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b86:	4603      	mov	r3, r0
 8010b88:	4619      	mov	r1, r3
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	f7ff f9e7 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010b96:	2100      	movs	r1, #0
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff fa33 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f503 741e 	add.w	r4, r3, #632	; 0x278
 8010ba4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010ba8:	2106      	movs	r1, #6
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7ff f96e 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010bb0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f005 fe15 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setXY(189, 56);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8010bc0:	2238      	movs	r2, #56	; 0x38
 8010bc2:	21bd      	movs	r1, #189	; 0xbd
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7fe ff46 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f503 742b 	add.w	r4, r3, #684	; 0x2ac
 8010bd0:	22ff      	movs	r2, #255	; 0xff
 8010bd2:	21ff      	movs	r1, #255	; 0xff
 8010bd4:	20ff      	movs	r0, #255	; 0xff
 8010bd6:	f7ff fc8d 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	4619      	mov	r1, r3
 8010bde:	4620      	mov	r0, r4
 8010be0:	f7ff f9bd 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8010bea:	2100      	movs	r1, #0
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7ff fa09 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f503 742b 	add.w	r4, r3, #684	; 0x2ac
 8010bf8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010bfc:	2107      	movs	r1, #7
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff f944 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010c04:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f005 fdeb 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setXY(236, 56);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8010c14:	2238      	movs	r2, #56	; 0x38
 8010c16:	21ec      	movs	r1, #236	; 0xec
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fe ff1c 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f503 7438 	add.w	r4, r3, #736	; 0x2e0
 8010c24:	22ff      	movs	r2, #255	; 0xff
 8010c26:	21ff      	movs	r1, #255	; 0xff
 8010c28:	20ff      	movs	r0, #255	; 0xff
 8010c2a:	f7ff fc63 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	4619      	mov	r1, r3
 8010c32:	4620      	mov	r0, r4
 8010c34:	f7ff f993 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8010c3e:	2100      	movs	r1, #0
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7ff f9df 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f503 7438 	add.w	r4, r3, #736	; 0x2e0
 8010c4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010c50:	2108      	movs	r1, #8
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7ff f91a 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010c58:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	f005 fdc1 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setXY(285, 56);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8010c68:	2238      	movs	r2, #56	; 0x38
 8010c6a:	f240 111d 	movw	r1, #285	; 0x11d
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7fe fef1 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f503 7445 	add.w	r4, r3, #788	; 0x314
 8010c7a:	22ff      	movs	r2, #255	; 0xff
 8010c7c:	21ff      	movs	r1, #255	; 0xff
 8010c7e:	20ff      	movs	r0, #255	; 0xff
 8010c80:	f7ff fc38 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c84:	4603      	mov	r3, r0
 8010c86:	4619      	mov	r1, r3
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f7ff f968 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8010c94:	2100      	movs	r1, #0
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7ff f9b4 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f503 7445 	add.w	r4, r3, #788	; 0x314
 8010ca2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ca6:	2109      	movs	r1, #9
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7ff f8ef 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010cae:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f005 fd96 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setXY(332, 56);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010cbe:	2238      	movs	r2, #56	; 0x38
 8010cc0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7fe fec6 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8010cd0:	22ff      	movs	r2, #255	; 0xff
 8010cd2:	21ff      	movs	r1, #255	; 0xff
 8010cd4:	20ff      	movs	r0, #255	; 0xff
 8010cd6:	f7ff fc0d 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	4619      	mov	r1, r3
 8010cde:	4620      	mov	r0, r4
 8010ce0:	f7ff f93d 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010cea:	2100      	movs	r1, #0
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7ff f989 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8010cf8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010cfc:	210a      	movs	r1, #10
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7ff f8c4 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010d04:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f005 fd6b 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setXY(380, 56);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8010d14:	2238      	movs	r2, #56	; 0x38
 8010d16:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fe fe9b 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8010d26:	22ff      	movs	r2, #255	; 0xff
 8010d28:	21ff      	movs	r1, #255	; 0xff
 8010d2a:	20ff      	movs	r0, #255	; 0xff
 8010d2c:	f7ff fbe2 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010d30:	4603      	mov	r3, r0
 8010d32:	4619      	mov	r1, r3
 8010d34:	4620      	mov	r0, r4
 8010d36:	f7ff f912 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8010d40:	2100      	movs	r1, #0
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7ff f95e 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8010d4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010d52:	210b      	movs	r1, #11
 8010d54:	4618      	mov	r0, r3
 8010d56:	e001      	b.n	8010d5c <_ZN12MainViewBaseC1Ev+0x814>
 8010d58:	08025348 	.word	0x08025348
 8010d5c:	f7ff f896 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010d60:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8010d64:	4620      	mov	r0, r4
 8010d66:	f005 fd3d 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm9.setXY(427, 56);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8010d70:	2238      	movs	r2, #56	; 0x38
 8010d72:	f240 11ab 	movw	r1, #427	; 0x1ab
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fe fe6d 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    rpm9.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
 8010d82:	22ff      	movs	r2, #255	; 0xff
 8010d84:	21ff      	movs	r1, #255	; 0xff
 8010d86:	20ff      	movs	r0, #255	; 0xff
 8010d88:	f7ff fbb4 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	4619      	mov	r1, r3
 8010d90:	4620      	mov	r0, r4
 8010d92:	f7ff f8e4 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm9.setLinespacing(0);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8010d9c:	2100      	movs	r1, #0
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7ff f930 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm9.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
 8010daa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010dae:	210c      	movs	r1, #12
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff f86b 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010db6:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f005 fd12 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm10.setXY(465, 56);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8010dc6:	2238      	movs	r2, #56	; 0x38
 8010dc8:	f240 11d1 	movw	r1, #465	; 0x1d1
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fe fe42 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    rpm10.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f503 7479 	add.w	r4, r3, #996	; 0x3e4
 8010dd8:	22ff      	movs	r2, #255	; 0xff
 8010dda:	21ff      	movs	r1, #255	; 0xff
 8010ddc:	20ff      	movs	r0, #255	; 0xff
 8010dde:	f7ff fb89 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010de2:	4603      	mov	r3, r0
 8010de4:	4619      	mov	r1, r3
 8010de6:	4620      	mov	r0, r4
 8010de8:	f7ff f8b9 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm10.setLinespacing(0);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8010df2:	2100      	movs	r1, #0
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7ff f905 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm10.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f503 7479 	add.w	r4, r3, #996	; 0x3e4
 8010e00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010e04:	210d      	movs	r1, #13
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7ff f840 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010e0c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010e10:	4620      	mov	r0, r4
 8010e12:	f005 fce7 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 53, 490, 5);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f503 6083 	add.w	r0, r3, #1048	; 0x418
 8010e1c:	2305      	movs	r3, #5
 8010e1e:	9300      	str	r3, [sp, #0]
 8010e20:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8010e24:	2235      	movs	r2, #53	; 0x35
 8010e26:	f06f 0101 	mvn.w	r1, #1
 8010e2a:	f7fe fdc9 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 8010e34:	22ff      	movs	r2, #255	; 0xff
 8010e36:	21ff      	movs	r1, #255	; 0xff
 8010e38:	20ff      	movs	r0, #255	; 0xff
 8010e3a:	f7ff fb5b 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	22ff      	movs	r2, #255	; 0xff
 8010e42:	4619      	mov	r1, r3
 8010e44:	4620      	mov	r0, r4
 8010e46:	f004 ff9e 	bl	8015d86 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8010e56:	4619      	mov	r1, r3
 8010e58:	4610      	mov	r0, r2
 8010e5a:	f004 fffd 	bl	8015e58 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8010e64:	2203      	movs	r2, #3
 8010e66:	2100      	movs	r1, #0
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f000 fe3d 	bl	8011ae8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8010e74:	2203      	movs	r2, #3
 8010e76:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f000 fe5a 	bl	8011b34 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8010e86:	2102      	movs	r1, #2
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f000 fe79 	bl	8011b80 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8010e94:	2101      	movs	r1, #1
 8010e96:	4618      	mov	r0, r3
 8010e98:	f005 faf8 	bl	801648c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(46, 188);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8010ea2:	22bc      	movs	r2, #188	; 0xbc
 8010ea4:	212e      	movs	r1, #46	; 0x2e
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fe fdd5 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f203 44a4 	addw	r4, r3, #1188	; 0x4a4
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	21dc      	movs	r1, #220	; 0xdc
 8010eb6:	20ff      	movs	r0, #255	; 0xff
 8010eb8:	f7ff fb1c 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	f7ff f84c 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8010ecc:	2100      	movs	r1, #0
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7ff f898 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f203 44a4 	addw	r4, r3, #1188	; 0x4a4
 8010eda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010ede:	2113      	movs	r1, #19
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fe ffd3 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010ee6:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8010eea:	4620      	mov	r0, r4
 8010eec:	f005 fc7a 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor.setXY(124, 188);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8010ef6:	22bc      	movs	r2, #188	; 0xbc
 8010ef8:	217c      	movs	r1, #124	; 0x7c
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fe fdab 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f503 649b 	add.w	r4, r3, #1240	; 0x4d8
 8010f06:	2200      	movs	r2, #0
 8010f08:	21dc      	movs	r1, #220	; 0xdc
 8010f0a:	20ff      	movs	r0, #255	; 0xff
 8010f0c:	f7ff faf2 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f10:	4603      	mov	r3, r0
 8010f12:	4619      	mov	r1, r3
 8010f14:	4620      	mov	r0, r4
 8010f16:	f7ff f822 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor.setLinespacing(0);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8010f20:	2100      	movs	r1, #0
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7ff f86e 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f503 649b 	add.w	r4, r3, #1240	; 0x4d8
 8010f2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010f32:	2114      	movs	r1, #20
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7fe ffa9 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010f3a:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f005 fc50 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setXY(38, 153);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8010f4a:	2299      	movs	r2, #153	; 0x99
 8010f4c:	2126      	movs	r1, #38	; 0x26
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe fd81 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f203 540c 	addw	r4, r3, #1292	; 0x50c
 8010f5a:	22ff      	movs	r2, #255	; 0xff
 8010f5c:	21ff      	movs	r1, #255	; 0xff
 8010f5e:	20ff      	movs	r0, #255	; 0xff
 8010f60:	f7ff fac8 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f64:	4603      	mov	r3, r0
 8010f66:	4619      	mov	r1, r3
 8010f68:	4620      	mov	r0, r4
 8010f6a:	f7fe fff8 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8010f74:	2100      	movs	r1, #0
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7ff f844 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f503 642b 	add.w	r4, r3, #2736	; 0xab0
 8010f82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010f86:	2110      	movs	r1, #16
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fe ff7f 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010f8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fe ff8a 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	4ae4      	ldr	r2, [pc, #912]	; (801132c <_ZN12MainViewBaseC1Ev+0xde4>)
 8010f9c:	2105      	movs	r1, #5
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f008 ffca 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f203 520c 	addw	r2, r3, #1292	; 0x50c
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	4610      	mov	r0, r2
 8010fb4:	f7ff f8ae 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.resizeToCurrentText();
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f005 fbe6 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f203 540c 	addw	r4, r3, #1292	; 0x50c
 8010fca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010fce:	210f      	movs	r1, #15
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fe ff5b 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8010fd6:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f005 fc02 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setXY(107, 153);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8010fe6:	2299      	movs	r2, #153	; 0x99
 8010fe8:	216b      	movs	r1, #107	; 0x6b
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7fe fd33 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f203 5444 	addw	r4, r3, #1348	; 0x544
 8010ff6:	22ff      	movs	r2, #255	; 0xff
 8010ff8:	21ff      	movs	r1, #255	; 0xff
 8010ffa:	20ff      	movs	r0, #255	; 0xff
 8010ffc:	f7ff fa7a 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011000:	4603      	mov	r3, r0
 8011002:	4619      	mov	r1, r3
 8011004:	4620      	mov	r0, r4
 8011006:	f7fe ffaa 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8011010:	2100      	movs	r1, #0
 8011012:	4618      	mov	r0, r3
 8011014:	f7fe fff6 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f603 24ba 	addw	r4, r3, #2746	; 0xaba
 801101e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011022:	2112      	movs	r1, #18
 8011024:	4618      	mov	r0, r3
 8011026:	f7fe ff31 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 801102a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801102e:	4618      	mov	r0, r3
 8011030:	f7fe ff3c 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 8011034:	4603      	mov	r3, r0
 8011036:	4abd      	ldr	r2, [pc, #756]	; (801132c <_ZN12MainViewBaseC1Ev+0xde4>)
 8011038:	2105      	movs	r1, #5
 801103a:	4620      	mov	r0, r4
 801103c:	f008 ff7c 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f203 5244 	addw	r2, r3, #1348	; 0x544
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f603 23ba 	addw	r3, r3, #2746	; 0xaba
 801104c:	4619      	mov	r1, r3
 801104e:	4610      	mov	r0, r2
 8011050:	f7ff f860 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.resizeToCurrentText();
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f203 5344 	addw	r3, r3, #1348	; 0x544
 801105a:	4618      	mov	r0, r3
 801105c:	f005 fb98 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f203 5444 	addw	r4, r3, #1348	; 0x544
 8011066:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801106a:	2111      	movs	r1, #17
 801106c:	4618      	mov	r0, r3
 801106e:	f7fe ff0d 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8011072:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8011076:	4620      	mov	r0, r4
 8011078:	f005 fbb4 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(343, 188);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8011082:	22bc      	movs	r2, #188	; 0xbc
 8011084:	f240 1157 	movw	r1, #343	; 0x157
 8011088:	4618      	mov	r0, r3
 801108a:	f7fe fce4 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 8011094:	2200      	movs	r2, #0
 8011096:	21dc      	movs	r1, #220	; 0xdc
 8011098:	20ff      	movs	r0, #255	; 0xff
 801109a:	f7ff fa2b 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801109e:	4603      	mov	r3, r0
 80110a0:	4619      	mov	r1, r3
 80110a2:	4620      	mov	r0, r4
 80110a4:	f7fe ff5b 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80110ae:	2100      	movs	r1, #0
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7fe ffa7 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 80110bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80110c0:	2117      	movs	r1, #23
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fe fee2 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80110c8:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 80110cc:	4620      	mov	r0, r4
 80110ce:	f005 fb89 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(426, 188);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80110d8:	22bc      	movs	r2, #188	; 0xbc
 80110da:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80110de:	4618      	mov	r0, r3
 80110e0:	f7fe fcb9 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f503 64b6 	add.w	r4, r3, #1456	; 0x5b0
 80110ea:	2200      	movs	r2, #0
 80110ec:	21dc      	movs	r1, #220	; 0xdc
 80110ee:	20ff      	movs	r0, #255	; 0xff
 80110f0:	f7ff fa00 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80110f4:	4603      	mov	r3, r0
 80110f6:	4619      	mov	r1, r3
 80110f8:	4620      	mov	r0, r4
 80110fa:	f7fe ff30 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8011104:	2100      	movs	r1, #0
 8011106:	4618      	mov	r0, r3
 8011108:	f7fe ff7c 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f503 64b6 	add.w	r4, r3, #1456	; 0x5b0
 8011112:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011116:	2118      	movs	r1, #24
 8011118:	4618      	mov	r0, r3
 801111a:	f7fe feb7 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 801111e:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8011122:	4620      	mov	r0, r4
 8011124:	f005 fb5e 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setXY(328, 153);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 801112e:	2299      	movs	r2, #153	; 0x99
 8011130:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8011134:	4618      	mov	r0, r3
 8011136:	f7fe fc8e 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f203 54e4 	addw	r4, r3, #1508	; 0x5e4
 8011140:	22ff      	movs	r2, #255	; 0xff
 8011142:	21ff      	movs	r1, #255	; 0xff
 8011144:	20ff      	movs	r0, #255	; 0xff
 8011146:	f7ff f9d5 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801114a:	4603      	mov	r3, r0
 801114c:	4619      	mov	r1, r3
 801114e:	4620      	mov	r0, r4
 8011150:	f7fe ff05 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 801115a:	2100      	movs	r1, #0
 801115c:	4618      	mov	r0, r3
 801115e:	f7fe ff51 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 8011168:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801116c:	211a      	movs	r1, #26
 801116e:	4618      	mov	r0, r3
 8011170:	f7fe fe8c 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8011174:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011178:	4618      	mov	r0, r3
 801117a:	f7fe fe97 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 801117e:	4603      	mov	r3, r0
 8011180:	4a6a      	ldr	r2, [pc, #424]	; (801132c <_ZN12MainViewBaseC1Ev+0xde4>)
 8011182:	2105      	movs	r1, #5
 8011184:	4620      	mov	r0, r4
 8011186:	f008 fed7 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f203 52e4 	addw	r2, r3, #1508	; 0x5e4
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8011196:	4619      	mov	r1, r3
 8011198:	4610      	mov	r0, r2
 801119a:	f7fe ffbb 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.resizeToCurrentText();
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 80111a4:	4618      	mov	r0, r3
 80111a6:	f005 faf3 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f203 54e4 	addw	r4, r3, #1508	; 0x5e4
 80111b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80111b4:	2119      	movs	r1, #25
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fe fe68 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80111bc:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 80111c0:	4620      	mov	r0, r4
 80111c2:	f005 fb0f 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setXY(414, 153);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80111cc:	2299      	movs	r2, #153	; 0x99
 80111ce:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fe fc3f 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f203 641c 	addw	r4, r3, #1564	; 0x61c
 80111de:	22ff      	movs	r2, #255	; 0xff
 80111e0:	21ff      	movs	r1, #255	; 0xff
 80111e2:	20ff      	movs	r0, #255	; 0xff
 80111e4:	f7ff f986 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111e8:	4603      	mov	r3, r0
 80111ea:	4619      	mov	r1, r3
 80111ec:	4620      	mov	r0, r4
 80111ee:	f7fe feb6 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80111f8:	2100      	movs	r1, #0
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7fe ff02 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID39).getText());
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f603 24ce 	addw	r4, r3, #2766	; 0xace
 8011206:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801120a:	211c      	movs	r1, #28
 801120c:	4618      	mov	r0, r3
 801120e:	f7fe fe3d 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8011212:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011216:	4618      	mov	r0, r3
 8011218:	f7fe fe48 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 801121c:	4603      	mov	r3, r0
 801121e:	4a43      	ldr	r2, [pc, #268]	; (801132c <_ZN12MainViewBaseC1Ev+0xde4>)
 8011220:	2105      	movs	r1, #5
 8011222:	4620      	mov	r0, r4
 8011224:	f008 fe88 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f203 621c 	addw	r2, r3, #1564	; 0x61c
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f603 23ce 	addw	r3, r3, #2766	; 0xace
 8011234:	4619      	mov	r1, r3
 8011236:	4610      	mov	r0, r2
 8011238:	f7fe ff6c 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.resizeToCurrentText();
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8011242:	4618      	mov	r0, r3
 8011244:	f005 faa4 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f203 641c 	addw	r4, r3, #1564	; 0x61c
 801124e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011252:	211b      	movs	r1, #27
 8011254:	4618      	mov	r0, r3
 8011256:	f7fe fe19 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 801125a:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 801125e:	4620      	mov	r0, r4
 8011260:	f005 fac0 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f203 6354 	addw	r3, r3, #1620	; 0x654
 801126a:	22f0      	movs	r2, #240	; 0xf0
 801126c:	f240 1197 	movw	r1, #407	; 0x197
 8011270:	4618      	mov	r0, r3
 8011272:	f7fe fbf0 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f203 6454 	addw	r4, r3, #1620	; 0x654
 801127c:	2200      	movs	r2, #0
 801127e:	21dc      	movs	r1, #220	; 0xdc
 8011280:	20ff      	movs	r0, #255	; 0xff
 8011282:	f7ff f937 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011286:	4603      	mov	r3, r0
 8011288:	4619      	mov	r1, r3
 801128a:	4620      	mov	r0, r4
 801128c:	f7fe fe67 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8011296:	2100      	movs	r1, #0
 8011298:	4618      	mov	r0, r3
 801129a:	f7fe feb3 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f203 6454 	addw	r4, r3, #1620	; 0x654
 80112a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80112a8:	211f      	movs	r1, #31
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7fe fdee 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80112b0:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 80112b4:	4620      	mov	r0, r4
 80112b6:	f005 fa95 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80112c0:	22e2      	movs	r2, #226	; 0xe2
 80112c2:	f240 116d 	movw	r1, #365	; 0x16d
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fe fbc5 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f503 60d1 	add.w	r0, r3, #1672	; 0x688
 80112d2:	230a      	movs	r3, #10
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	2364      	movs	r3, #100	; 0x64
 80112d8:	2202      	movs	r2, #2
 80112da:	2102      	movs	r1, #2
 80112dc:	f003 f882 	bl	80143e4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f503 60d1 	add.w	r0, r3, #1672	; 0x688
 80112e6:	2300      	movs	r3, #0
 80112e8:	9300      	str	r3, [sp, #0]
 80112ea:	2300      	movs	r3, #0
 80112ec:	2264      	movs	r2, #100	; 0x64
 80112ee:	2100      	movs	r1, #0
 80112f0:	f003 faf6 	bl	80148e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80112fa:	2100      	movs	r1, #0
 80112fc:	4618      	mov	r0, r3
 80112fe:	f003 f8d1 	bl	80144a4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f503 64d1 	add.w	r4, r3, #1672	; 0x688
 8011308:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801130c:	2100      	movs	r1, #0
 801130e:	4618      	mov	r0, r3
 8011310:	f7fe faf8 	bl	800f904 <_ZN8touchgfx6BitmapC1Et>
 8011314:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011318:	4619      	mov	r1, r3
 801131a:	4620      	mov	r0, r4
 801131c:	f003 fad5 	bl	80148ca <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f503 64d1 	add.w	r4, r3, #1672	; 0x688
 8011326:	2200      	movs	r2, #0
 8011328:	21dc      	movs	r1, #220	; 0xdc
 801132a:	e001      	b.n	8011330 <_ZN12MainViewBaseC1Ev+0xde8>
 801132c:	08025348 	.word	0x08025348
 8011330:	20ff      	movs	r0, #255	; 0xff
 8011332:	f7ff f8df 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011336:	4603      	mov	r3, r0
 8011338:	4619      	mov	r1, r3
 801133a:	4620      	mov	r0, r4
 801133c:	f002 fffc 	bl	8014338 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8011346:	213c      	movs	r1, #60	; 0x3c
 8011348:	4618      	mov	r0, r3
 801134a:	f003 f863 	bl	8014414 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f503 60e9 	add.w	r0, r3, #1864	; 0x748
 8011354:	230a      	movs	r3, #10
 8011356:	9300      	str	r3, [sp, #0]
 8011358:	23b4      	movs	r3, #180	; 0xb4
 801135a:	f44f 7281 	mov.w	r2, #258	; 0x102
 801135e:	210e      	movs	r1, #14
 8011360:	f7fe fb2e 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 801136a:	22ff      	movs	r2, #255	; 0xff
 801136c:	21ff      	movs	r1, #255	; 0xff
 801136e:	20ff      	movs	r0, #255	; 0xff
 8011370:	f7ff f8c0 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011374:	4603      	mov	r3, r0
 8011376:	22ff      	movs	r2, #255	; 0xff
 8011378:	4619      	mov	r1, r3
 801137a:	4620      	mov	r0, r4
 801137c:	f004 fd03 	bl	8015d86 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f503 62e9 	add.w	r2, r3, #1864	; 0x748
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 801138c:	4619      	mov	r1, r3
 801138e:	4610      	mov	r0, r2
 8011390:	f004 fd62 	bl	8015e58 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 801139a:	2205      	movs	r2, #5
 801139c:	2100      	movs	r1, #0
 801139e:	4618      	mov	r0, r3
 80113a0:	f000 fba2 	bl	8011ae8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 80113aa:	2205      	movs	r2, #5
 80113ac:	21b4      	movs	r1, #180	; 0xb4
 80113ae:	4618      	mov	r0, r3
 80113b0:	f000 fbc0 	bl	8011b34 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 80113ba:	2102      	movs	r1, #2
 80113bc:	4618      	mov	r0, r3
 80113be:	f000 fbdf 	bl	8011b80 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 80113c8:	2100      	movs	r1, #0
 80113ca:	4618      	mov	r0, r3
 80113cc:	f005 f85e 	bl	801648c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f203 70d4 	addw	r0, r3, #2004	; 0x7d4
 80113d6:	230a      	movs	r3, #10
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	23b4      	movs	r3, #180	; 0xb4
 80113dc:	f44f 7281 	mov.w	r2, #258	; 0x102
 80113e0:	f240 111f 	movw	r1, #287	; 0x11f
 80113e4:	f7fe faec 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f603 0448 	addw	r4, r3, #2120	; 0x848
 80113ee:	22ff      	movs	r2, #255	; 0xff
 80113f0:	21ff      	movs	r1, #255	; 0xff
 80113f2:	20ff      	movs	r0, #255	; 0xff
 80113f4:	f7ff f87e 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80113f8:	4603      	mov	r3, r0
 80113fa:	22ff      	movs	r2, #255	; 0xff
 80113fc:	4619      	mov	r1, r3
 80113fe:	4620      	mov	r0, r4
 8011400:	f004 fcc1 	bl	8015d86 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f203 72d4 	addw	r2, r3, #2004	; 0x7d4
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8011410:	4619      	mov	r1, r3
 8011412:	4610      	mov	r0, r2
 8011414:	f004 fd20 	bl	8015e58 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 801141e:	2205      	movs	r2, #5
 8011420:	2100      	movs	r1, #0
 8011422:	4618      	mov	r0, r3
 8011424:	f000 fb60 	bl	8011ae8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 801142e:	2205      	movs	r2, #5
 8011430:	21b4      	movs	r1, #180	; 0xb4
 8011432:	4618      	mov	r0, r3
 8011434:	f000 fb7e 	bl	8011b34 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 801143e:	2102      	movs	r1, #2
 8011440:	4618      	mov	r0, r3
 8011442:	f000 fb9d 	bl	8011b80 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 801144c:	2100      	movs	r1, #0
 801144e:	4618      	mov	r0, r3
 8011450:	f005 f81c 	bl	801648c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setXY(215, 247);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 801145a:	22f7      	movs	r2, #247	; 0xf7
 801145c:	21d7      	movs	r1, #215	; 0xd7
 801145e:	4618      	mov	r0, r3
 8011460:	f7fe faf9 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f503 6406 	add.w	r4, r3, #2144	; 0x860
 801146a:	22ff      	movs	r2, #255	; 0xff
 801146c:	21ff      	movs	r1, #255	; 0xff
 801146e:	20ff      	movs	r0, #255	; 0xff
 8011470:	f7ff f840 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011474:	4603      	mov	r3, r0
 8011476:	4619      	mov	r1, r3
 8011478:	4620      	mov	r0, r4
 801147a:	f7fe fd70 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8011484:	2100      	movs	r1, #0
 8011486:	4618      	mov	r0, r3
 8011488:	f7fe fdbc 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f603 24d8 	addw	r4, r3, #2776	; 0xad8
 8011492:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011496:	2121      	movs	r1, #33	; 0x21
 8011498:	4618      	mov	r0, r3
 801149a:	f7fe fcf7 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 801149e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7fe fd02 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 80114a8:	4603      	mov	r3, r0
 80114aa:	4ae2      	ldr	r2, [pc, #904]	; (8011834 <_ZN12MainViewBaseC1Ev+0x12ec>)
 80114ac:	2105      	movs	r1, #5
 80114ae:	4620      	mov	r0, r4
 80114b0:	f008 fd42 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f503 6206 	add.w	r2, r3, #2144	; 0x860
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 80114c0:	4619      	mov	r1, r3
 80114c2:	4610      	mov	r0, r2
 80114c4:	f7fe fe26 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.resizeToCurrentText();
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 80114ce:	4618      	mov	r0, r3
 80114d0:	f005 f95e 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f503 6406 	add.w	r4, r3, #2144	; 0x860
 80114da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80114de:	2120      	movs	r1, #32
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7fe fcd3 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80114e6:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 80114ea:	4620      	mov	r0, r4
 80114ec:	f005 f97a 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(0, 0);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80114f6:	2200      	movs	r2, #0
 80114f8:	2100      	movs	r1, #0
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7fe faab 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f603 0098 	addw	r0, r3, #2200	; 0x898
 8011506:	2337      	movs	r3, #55	; 0x37
 8011508:	9300      	str	r3, [sp, #0]
 801150a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 801150e:	2202      	movs	r2, #2
 8011510:	2102      	movs	r1, #2
 8011512:	f003 f8b7 	bl	8014684 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 10000);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f603 0098 	addw	r0, r3, #2200	; 0x898
 801151c:	2300      	movs	r3, #0
 801151e:	9300      	str	r3, [sp, #0]
 8011520:	2300      	movs	r3, #0
 8011522:	f242 7210 	movw	r2, #10000	; 0x2710
 8011526:	2100      	movs	r1, #0
 8011528:	f003 f9da 	bl	80148e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8011532:	2100      	movs	r1, #0
 8011534:	4618      	mov	r0, r3
 8011536:	f002 ffb5 	bl	80144a4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_ID);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8011540:	2101      	movs	r1, #1
 8011542:	4618      	mov	r0, r3
 8011544:	f002 fff9 	bl	801453a <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(9500);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 801154e:	f242 511c 	movw	r1, #9500	; 0x251c
 8011552:	4618      	mov	r0, r3
 8011554:	f003 f8ae 	bl	80146b4 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 801155e:	2101      	movs	r1, #1
 8011560:	4618      	mov	r0, r3
 8011562:	f002 ffd3 	bl	801450c <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setXY(29, 5);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f603 1388 	addw	r3, r3, #2440	; 0x988
 801156c:	2205      	movs	r2, #5
 801156e:	211d      	movs	r1, #29
 8011570:	4618      	mov	r0, r3
 8011572:	f7fe fa70 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f603 1488 	addw	r4, r3, #2440	; 0x988
 801157c:	22ff      	movs	r2, #255	; 0xff
 801157e:	21ff      	movs	r1, #255	; 0xff
 8011580:	20ff      	movs	r0, #255	; 0xff
 8011582:	f7fe ffb7 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011586:	4603      	mov	r3, r0
 8011588:	4619      	mov	r1, r3
 801158a:	4620      	mov	r0, r4
 801158c:	f7fe fce7 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8011596:	2100      	movs	r1, #0
 8011598:	4618      	mov	r0, r3
 801159a:	f7fe fd33 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f603 24e2 	addw	r4, r3, #2786	; 0xae2
 80115a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80115a8:	2123      	movs	r1, #35	; 0x23
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7fe fc6e 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80115b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7fe fc79 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 80115ba:	4603      	mov	r3, r0
 80115bc:	4a9d      	ldr	r2, [pc, #628]	; (8011834 <_ZN12MainViewBaseC1Ev+0x12ec>)
 80115be:	2105      	movs	r1, #5
 80115c0:	4620      	mov	r0, r4
 80115c2:	f008 fcb9 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f603 1288 	addw	r2, r3, #2440	; 0x988
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f603 23e2 	addw	r3, r3, #2786	; 0xae2
 80115d2:	4619      	mov	r1, r3
 80115d4:	4610      	mov	r0, r2
 80115d6:	f7fe fd9d 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.resizeToCurrentText();
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f603 1388 	addw	r3, r3, #2440	; 0x988
 80115e0:	4618      	mov	r0, r3
 80115e2:	f005 f8d5 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f603 1488 	addw	r4, r3, #2440	; 0x988
 80115ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80115f0:	2122      	movs	r1, #34	; 0x22
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7fe fc4a 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80115f8:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 80115fc:	4620      	mov	r0, r4
 80115fe:	f005 f8f1 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(76, 16);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8011608:	2210      	movs	r2, #16
 801160a:	214c      	movs	r1, #76	; 0x4c
 801160c:	4618      	mov	r0, r3
 801160e:	f7fe fa22 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f503 641c 	add.w	r4, r3, #2496	; 0x9c0
 8011618:	22ff      	movs	r2, #255	; 0xff
 801161a:	21ff      	movs	r1, #255	; 0xff
 801161c:	20ff      	movs	r0, #255	; 0xff
 801161e:	f7fe ff69 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011622:	4603      	mov	r3, r0
 8011624:	4619      	mov	r1, r3
 8011626:	4620      	mov	r0, r4
 8011628:	f7fe fc99 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8011632:	2100      	movs	r1, #0
 8011634:	4618      	mov	r0, r3
 8011636:	f7fe fce5 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f503 641c 	add.w	r4, r3, #2496	; 0x9c0
 8011640:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011644:	2124      	movs	r1, #36	; 0x24
 8011646:	4618      	mov	r0, r3
 8011648:	f7fe fc20 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 801164c:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8011650:	4620      	mov	r0, r4
 8011652:	f005 f8c7 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KMHValue.setXY(192, 69);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 801165c:	2245      	movs	r2, #69	; 0x45
 801165e:	21c0      	movs	r1, #192	; 0xc0
 8011660:	4618      	mov	r0, r3
 8011662:	f7fe f9f8 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    KMHValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f603 14f4 	addw	r4, r3, #2548	; 0x9f4
 801166c:	22ff      	movs	r2, #255	; 0xff
 801166e:	21ff      	movs	r1, #255	; 0xff
 8011670:	20ff      	movs	r0, #255	; 0xff
 8011672:	f7fe ff3f 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011676:	4603      	mov	r3, r0
 8011678:	4619      	mov	r1, r3
 801167a:	4620      	mov	r0, r4
 801167c:	f7fe fc6f 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KMHValue.setLinespacing(0);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8011686:	2100      	movs	r1, #0
 8011688:	4618      	mov	r0, r3
 801168a:	f7fe fcbb 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID52).getText());
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f603 24ec 	addw	r4, r3, #2796	; 0xaec
 8011694:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011698:	2126      	movs	r1, #38	; 0x26
 801169a:	4618      	mov	r0, r3
 801169c:	f7fe fbf6 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80116a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7fe fc01 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 80116aa:	4603      	mov	r3, r0
 80116ac:	4a61      	ldr	r2, [pc, #388]	; (8011834 <_ZN12MainViewBaseC1Ev+0x12ec>)
 80116ae:	2105      	movs	r1, #5
 80116b0:	4620      	mov	r0, r4
 80116b2:	f008 fc41 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KMHValue.setWildcard(KMHValueBuffer);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f603 12f4 	addw	r2, r3, #2548	; 0x9f4
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 80116c2:	4619      	mov	r1, r3
 80116c4:	4610      	mov	r0, r2
 80116c6:	f7fe fd25 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KMHValue.resizeToCurrentText();
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80116d0:	4618      	mov	r0, r3
 80116d2:	f005 f85d 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    KMHValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID51));
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f603 14f4 	addw	r4, r3, #2548	; 0x9f4
 80116dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80116e0:	2125      	movs	r1, #37	; 0x25
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7fe fbd2 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80116e8:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80116ec:	4620      	mov	r0, r4
 80116ee:	f005 f879 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setXY(331, 91);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 80116f8:	225b      	movs	r2, #91	; 0x5b
 80116fa:	f240 114b 	movw	r1, #331	; 0x14b
 80116fe:	4618      	mov	r0, r3
 8011700:	f7fe f9a9 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 801170a:	22ff      	movs	r2, #255	; 0xff
 801170c:	21ff      	movs	r1, #255	; 0xff
 801170e:	20ff      	movs	r0, #255	; 0xff
 8011710:	f7fe fef0 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011714:	4603      	mov	r3, r0
 8011716:	4619      	mov	r1, r3
 8011718:	4620      	mov	r0, r4
 801171a:	f7fe fc20 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8011724:	2100      	movs	r1, #0
 8011726:	4618      	mov	r0, r3
 8011728:	f7fe fc6c 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f603 24f6 	addw	r4, r3, #2806	; 0xaf6
 8011732:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011736:	2128      	movs	r1, #40	; 0x28
 8011738:	4618      	mov	r0, r3
 801173a:	f7fe fba7 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 801173e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011742:	4618      	mov	r0, r3
 8011744:	f7fe fbb2 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 8011748:	4603      	mov	r3, r0
 801174a:	4a3a      	ldr	r2, [pc, #232]	; (8011834 <_ZN12MainViewBaseC1Ev+0x12ec>)
 801174c:	2105      	movs	r1, #5
 801174e:	4620      	mov	r0, r4
 8011750:	f008 fbf2 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f603 222c 	addw	r2, r3, #2604	; 0xa2c
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f603 23f6 	addw	r3, r3, #2806	; 0xaf6
 8011760:	4619      	mov	r1, r3
 8011762:	4610      	mov	r0, r2
 8011764:	f7fe fcd6 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.resizeToCurrentText();
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 801176e:	4618      	mov	r0, r3
 8011770:	f005 f80e 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 801177a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801177e:	2127      	movs	r1, #39	; 0x27
 8011780:	4618      	mov	r0, r3
 8011782:	f7fe fb83 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8011786:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 801178a:	4620      	mov	r0, r4
 801178c:	f005 f82a 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setXY(414, 91);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8011796:	225b      	movs	r2, #91	; 0x5b
 8011798:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 801179c:	4618      	mov	r0, r3
 801179e:	f7fe f95a 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f603 2464 	addw	r4, r3, #2660	; 0xa64
 80117a8:	22ff      	movs	r2, #255	; 0xff
 80117aa:	21ff      	movs	r1, #255	; 0xff
 80117ac:	20ff      	movs	r0, #255	; 0xff
 80117ae:	f7fe fea1 	bl	80104f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117b2:	4603      	mov	r3, r0
 80117b4:	4619      	mov	r1, r3
 80117b6:	4620      	mov	r0, r4
 80117b8:	f7fe fbd1 	bl	800ff5e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 80117c2:	2100      	movs	r1, #0
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7fe fc1d 	bl	8010004 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 80117d0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80117d4:	212a      	movs	r1, #42	; 0x2a
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fe fb58 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 80117dc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7fe fb63 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 80117e6:	4603      	mov	r3, r0
 80117e8:	4a12      	ldr	r2, [pc, #72]	; (8011834 <_ZN12MainViewBaseC1Ev+0x12ec>)
 80117ea:	2105      	movs	r1, #5
 80117ec:	4620      	mov	r0, r4
 80117ee:	f008 fba3 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f603 2264 	addw	r2, r3, #2660	; 0xa64
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117fe:	4619      	mov	r1, r3
 8011800:	4610      	mov	r0, r2
 8011802:	f7fe fc87 	bl	8010114 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.resizeToCurrentText();
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 801180c:	4618      	mov	r0, r3
 801180e:	f004 ffbf 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f603 2464 	addw	r4, r3, #2660	; 0xa64
 8011818:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801181c:	2129      	movs	r1, #41	; 0x29
 801181e:	4618      	mov	r0, r3
 8011820:	f7fe fb34 	bl	800fe8c <_ZN8touchgfx9TypedTextC1Et>
 8011824:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8011828:	4620      	mov	r0, r4
 801182a:	f004 ffdb 	bl	80167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	e001      	b.n	8011838 <_ZN12MainViewBaseC1Ev+0x12f0>
 8011834:	08025348 	.word	0x08025348
 8011838:	3340      	adds	r3, #64	; 0x40
 801183a:	4619      	mov	r1, r3
 801183c:	4610      	mov	r0, r2
 801183e:	f7fe fa6d 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RpmDescriptor);
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	3370      	adds	r3, #112	; 0x70
 8011848:	4619      	mov	r1, r3
 801184a:	4610      	mov	r0, r2
 801184c:	f7fe fa66 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	33a4      	adds	r3, #164	; 0xa4
 8011856:	4619      	mov	r1, r3
 8011858:	4610      	mov	r0, r2
 801185a:	f7fe fa5f 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	33d8      	adds	r3, #216	; 0xd8
 8011864:	4619      	mov	r1, r3
 8011866:	4610      	mov	r0, r2
 8011868:	f7fe fa58 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011874:	4619      	mov	r1, r3
 8011876:	4610      	mov	r0, r2
 8011878:	f7fe fa50 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011884:	4619      	mov	r1, r3
 8011886:	4610      	mov	r0, r2
 8011888:	f7fe fa48 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011894:	4619      	mov	r1, r3
 8011896:	4610      	mov	r0, r2
 8011898:	f7fe fa40 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80118a4:	4619      	mov	r1, r3
 80118a6:	4610      	mov	r0, r2
 80118a8:	f7fe fa38 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 80118ac:	687a      	ldr	r2, [r7, #4]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80118b4:	4619      	mov	r1, r3
 80118b6:	4610      	mov	r0, r2
 80118b8:	f7fe fa30 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80118c4:	4619      	mov	r1, r3
 80118c6:	4610      	mov	r0, r2
 80118c8:	f7fe fa28 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 80118cc:	687a      	ldr	r2, [r7, #4]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80118d4:	4619      	mov	r1, r3
 80118d6:	4610      	mov	r0, r2
 80118d8:	f7fe fa20 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80118e4:	4619      	mov	r1, r3
 80118e6:	4610      	mov	r0, r2
 80118e8:	f7fe fa18 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 80118ec:	687a      	ldr	r2, [r7, #4]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 80118f4:	4619      	mov	r1, r3
 80118f6:	4610      	mov	r0, r2
 80118f8:	f7fe fa10 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8011904:	4619      	mov	r1, r3
 8011906:	4610      	mov	r0, r2
 8011908:	f7fe fa08 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8011914:	4619      	mov	r1, r3
 8011916:	4610      	mov	r0, r2
 8011918:	f7fe fa00 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8011924:	4619      	mov	r1, r3
 8011926:	4610      	mov	r0, r2
 8011928:	f7fe f9f8 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011934:	4619      	mov	r1, r3
 8011936:	4610      	mov	r0, r2
 8011938:	f7fe f9f0 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm9);
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8011944:	4619      	mov	r1, r3
 8011946:	4610      	mov	r0, r2
 8011948:	f7fe f9e8 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm10);
 801194c:	687a      	ldr	r2, [r7, #4]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8011954:	4619      	mov	r1, r3
 8011956:	4610      	mov	r0, r2
 8011958:	f7fe f9e0 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8011964:	4619      	mov	r1, r3
 8011966:	4610      	mov	r0, r2
 8011968:	f7fe f9d8 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8011974:	4619      	mov	r1, r3
 8011976:	4610      	mov	r0, r2
 8011978:	f7fe f9d0 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor);
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8011984:	4619      	mov	r1, r3
 8011986:	4610      	mov	r0, r2
 8011988:	f7fe f9c8 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8011994:	4619      	mov	r1, r3
 8011996:	4610      	mov	r0, r2
 8011998:	f7fe f9c0 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 801199c:	687a      	ldr	r2, [r7, #4]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80119a4:	4619      	mov	r1, r3
 80119a6:	4610      	mov	r0, r2
 80119a8:	f7fe f9b8 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 80119ac:	687a      	ldr	r2, [r7, #4]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80119b4:	4619      	mov	r1, r3
 80119b6:	4610      	mov	r0, r2
 80119b8:	f7fe f9b0 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80119c4:	4619      	mov	r1, r3
 80119c6:	4610      	mov	r0, r2
 80119c8:	f7fe f9a8 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 80119d4:	4619      	mov	r1, r3
 80119d6:	4610      	mov	r0, r2
 80119d8:	f7fe f9a0 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 80119dc:	687a      	ldr	r2, [r7, #4]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80119e4:	4619      	mov	r1, r3
 80119e6:	4610      	mov	r0, r2
 80119e8:	f7fe f998 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 80119ec:	687a      	ldr	r2, [r7, #4]
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80119f4:	4619      	mov	r1, r3
 80119f6:	4610      	mov	r0, r2
 80119f8:	f7fe f990 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8011a04:	4619      	mov	r1, r3
 8011a06:	4610      	mov	r0, r2
 8011a08:	f7fe f988 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8011a14:	4619      	mov	r1, r3
 8011a16:	4610      	mov	r0, r2
 8011a18:	f7fe f980 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f203 73d4 	addw	r3, r3, #2004	; 0x7d4
 8011a24:	4619      	mov	r1, r3
 8011a26:	4610      	mov	r0, r2
 8011a28:	f7fe f978 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8011a34:	4619      	mov	r1, r3
 8011a36:	4610      	mov	r0, r2
 8011a38:	f7fe f970 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8011a44:	4619      	mov	r1, r3
 8011a46:	4610      	mov	r0, r2
 8011a48:	f7fe f968 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8011a4c:	687a      	ldr	r2, [r7, #4]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8011a54:	4619      	mov	r1, r3
 8011a56:	4610      	mov	r0, r2
 8011a58:	f7fe f960 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8011a5c:	687a      	ldr	r2, [r7, #4]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8011a64:	4619      	mov	r1, r3
 8011a66:	4610      	mov	r0, r2
 8011a68:	f7fe f958 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KMHValue);
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8011a74:	4619      	mov	r1, r3
 8011a76:	4610      	mov	r0, r2
 8011a78:	f7fe f950 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8011a7c:	687a      	ldr	r2, [r7, #4]
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8011a84:	4619      	mov	r1, r3
 8011a86:	4610      	mov	r0, r2
 8011a88:	f7fe f948 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 8011a8c:	687a      	ldr	r2, [r7, #4]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8011a94:	4619      	mov	r1, r3
 8011a96:	4610      	mov	r0, r2
 8011a98:	f7fe f940 	bl	800fd1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	37cc      	adds	r7, #204	; 0xcc
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd90      	pop	{r4, r7, pc}
 8011aa6:	bf00      	nop

08011aa8 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]

}
 8011ab0:	bf00      	nop
 8011ab2:	370c      	adds	r7, #12
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aba:	4770      	bx	lr

08011abc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f007 f970 	bl	8018dac <_ZN8touchgfx6ScreenC1Ev>
 8011acc:	4a05      	ldr	r2, [pc, #20]	; (8011ae4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	601a      	str	r2, [r3, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	4618      	mov	r0, r3
 8011adc:	3708      	adds	r7, #8
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	08025888 	.word	0x08025888

08011ae8 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8011ae8:	b590      	push	{r4, r7, lr}
 8011aea:	b089      	sub	sp, #36	; 0x24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	015a      	lsls	r2, r3, #5
 8011afc:	f107 0314 	add.w	r3, r7, #20
 8011b00:	4611      	mov	r1, r2
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fe fb36 	bl	8010174 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	461c      	mov	r4, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	61fb      	str	r3, [r7, #28]
 8011b10:	69fb      	ldr	r3, [r7, #28]
 8011b12:	015a      	lsls	r2, r3, #5
 8011b14:	f107 0310 	add.w	r3, r7, #16
 8011b18:	4611      	mov	r1, r2
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fe fb2a 	bl	8010174 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011b20:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8011b22:	461a      	mov	r2, r3
 8011b24:	4621      	mov	r1, r4
 8011b26:	68f8      	ldr	r0, [r7, #12]
 8011b28:	f004 fc9a 	bl	8016460 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8011b2c:	bf00      	nop
 8011b2e:	3724      	adds	r7, #36	; 0x24
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd90      	pop	{r4, r7, pc}

08011b34 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8011b34:	b590      	push	{r4, r7, lr}
 8011b36:	b089      	sub	sp, #36	; 0x24
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	60f8      	str	r0, [r7, #12]
 8011b3c:	60b9      	str	r1, [r7, #8]
 8011b3e:	607a      	str	r2, [r7, #4]
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	61bb      	str	r3, [r7, #24]
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	015a      	lsls	r2, r3, #5
 8011b48:	f107 0314 	add.w	r3, r7, #20
 8011b4c:	4611      	mov	r1, r2
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fe fb10 	bl	8010174 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	461c      	mov	r4, r3
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	61fb      	str	r3, [r7, #28]
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	015a      	lsls	r2, r3, #5
 8011b60:	f107 0310 	add.w	r3, r7, #16
 8011b64:	4611      	mov	r1, r2
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fe fb04 	bl	8010174 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011b6c:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8011b6e:	461a      	mov	r2, r3
 8011b70:	4621      	mov	r1, r4
 8011b72:	68f8      	ldr	r0, [r7, #12]
 8011b74:	f004 fc7f 	bl	8016476 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8011b78:	bf00      	nop
 8011b7a:	3724      	adds	r7, #36	; 0x24
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd90      	pop	{r4, r7, pc}

08011b80 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	60fb      	str	r3, [r7, #12]
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	015a      	lsls	r2, r3, #5
 8011b92:	f107 0308 	add.w	r3, r7, #8
 8011b96:	4611      	mov	r1, r2
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7fe faeb 	bl	8010174 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011b9e:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f7fe fb01 	bl	80101aa <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8011ba8:	bf00      	nop
 8011baa:	3710      	adds	r7, #16
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b082      	sub	sp, #8
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	4a05      	ldr	r2, [pc, #20]	; (8011bd0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	601a      	str	r2, [r3, #0]
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7fe fa6f 	bl	80100a4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3708      	adds	r7, #8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	0802743c 	.word	0x0802743c

08011bd4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f7ff ffe7 	bl	8011bb0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011be2:	2138      	movs	r1, #56	; 0x38
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f012 f914 	bl	8023e12 <_ZdlPvj>
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	4618      	mov	r0, r3
 8011bee:	3708      	adds	r7, #8
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	4a05      	ldr	r2, [pc, #20]	; (8011c14 <_ZN8touchgfx4LineD1Ev+0x20>)
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	601a      	str	r2, [r3, #0]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	4618      	mov	r0, r3
 8011c06:	f004 fa05 	bl	8016014 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3708      	adds	r7, #8
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	080271e8 	.word	0x080271e8

08011c18 <_ZN8touchgfx4LineD0Ev>:
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b082      	sub	sp, #8
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f7ff ffe7 	bl	8011bf4 <_ZN8touchgfx4LineD1Ev>
 8011c26:	2174      	movs	r1, #116	; 0x74
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f012 f8f2 	bl	8023e12 <_ZdlPvj>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	4618      	mov	r0, r3
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	4a05      	ldr	r2, [pc, #20]	; (8011c58 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	601a      	str	r2, [r3, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7fe fad1 	bl	80101f0 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	4618      	mov	r0, r3
 8011c52:	3708      	adds	r7, #8
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}
 8011c58:	08026eec 	.word	0x08026eec

08011c5c <_ZN8touchgfx13PainterRGB888D0Ev>:
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f7ff ffe7 	bl	8011c38 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011c6a:	2118      	movs	r1, #24
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f012 f8d0 	bl	8023e12 <_ZdlPvj>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	4618      	mov	r0, r3
 8011c76:	3708      	adds	r7, #8
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8011c80:	4b02      	ldr	r3, [pc, #8]	; (8011c8c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	46bd      	mov	sp, r7
 8011c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8a:	4770      	bx	lr
 8011c8c:	080259f4 	.word	0x080259f4

08011c90 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8011c90:	b480      	push	{r7}
 8011c92:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8011c94:	2302      	movs	r3, #2
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr

08011ca0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011ca0:	b480      	push	{r7}
 8011ca2:	b085      	sub	sp, #20
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	60f8      	str	r0, [r7, #12]
 8011ca8:	60b9      	str	r1, [r7, #8]
 8011caa:	4613      	mov	r3, r2
 8011cac:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8011cae:	4a07      	ldr	r2, [pc, #28]	; (8011ccc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011cb4:	4a06      	ldr	r2, [pc, #24]	; (8011cd0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8011cba:	4a06      	ldr	r2, [pc, #24]	; (8011cd4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011cbc:	88fb      	ldrh	r3, [r7, #6]
 8011cbe:	8013      	strh	r3, [r2, #0]
    }
 8011cc0:	bf00      	nop
 8011cc2:	3714      	adds	r7, #20
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cca:	4770      	bx	lr
 8011ccc:	2000bcf8 	.word	0x2000bcf8
 8011cd0:	2000bd00 	.word	0x2000bd00
 8011cd4:	2000bcfc 	.word	0x2000bcfc

08011cd8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011cd8:	b590      	push	{r4, r7, lr}
 8011cda:	b085      	sub	sp, #20
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	4603      	mov	r3, r0
 8011ce0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8011ce6:	88fb      	ldrh	r3, [r7, #6]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d127      	bne.n	8011d3c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011cec:	88fb      	ldrh	r3, [r7, #6]
 8011cee:	4a1e      	ldr	r2, [pc, #120]	; (8011d68 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d016      	beq.n	8011d26 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011cf8:	88fb      	ldrh	r3, [r7, #6]
 8011cfa:	4a1b      	ldr	r2, [pc, #108]	; (8011d68 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d00:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	68ba      	ldr	r2, [r7, #8]
 8011d08:	4413      	add	r3, r2
 8011d0a:	4a18      	ldr	r2, [pc, #96]	; (8011d6c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011d0c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	68ba      	ldr	r2, [r7, #8]
 8011d14:	4413      	add	r3, r2
 8011d16:	4a16      	ldr	r2, [pc, #88]	; (8011d70 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011d18:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	689b      	ldr	r3, [r3, #8]
 8011d1e:	68ba      	ldr	r2, [r7, #8]
 8011d20:	4413      	add	r3, r2
 8011d22:	60fb      	str	r3, [r7, #12]
 8011d24:	e00a      	b.n	8011d3c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011d26:	4b11      	ldr	r3, [pc, #68]	; (8011d6c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011d28:	4a12      	ldr	r2, [pc, #72]	; (8011d74 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011d2a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011d2c:	4a12      	ldr	r2, [pc, #72]	; (8011d78 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011d2e:	4b10      	ldr	r3, [pc, #64]	; (8011d70 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011d30:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011d32:	88fb      	ldrh	r3, [r7, #6]
 8011d34:	4a11      	ldr	r2, [pc, #68]	; (8011d7c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8011d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d3a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d00d      	beq.n	8011d5e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8011d42:	4a0f      	ldr	r2, [pc, #60]	; (8011d80 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011d44:	88fb      	ldrh	r3, [r7, #6]
 8011d46:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011d48:	f000 f83e 	bl	8011dc8 <_ZN17TypedTextDatabase8getFontsEv>
 8011d4c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011d4e:	f000 f833 	bl	8011db8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011d52:	4603      	mov	r3, r0
 8011d54:	461a      	mov	r2, r3
 8011d56:	4621      	mov	r1, r4
 8011d58:	68f8      	ldr	r0, [r7, #12]
 8011d5a:	f7ff ffa1 	bl	8011ca0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011d5e:	bf00      	nop
 8011d60:	3714      	adds	r7, #20
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd90      	pop	{r4, r7, pc}
 8011d66:	bf00      	nop
 8011d68:	2000862c 	.word	0x2000862c
 8011d6c:	20008634 	.word	0x20008634
 8011d70:	20008638 	.word	0x20008638
 8011d74:	0804383c 	.word	0x0804383c
 8011d78:	08043790 	.word	0x08043790
 8011d7c:	08043984 	.word	0x08043984
 8011d80:	20008630 	.word	0x20008630

08011d84 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011d84:	b480      	push	{r7}
 8011d86:	b083      	sub	sp, #12
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011d90:	4b07      	ldr	r3, [pc, #28]	; (8011db0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	4b07      	ldr	r3, [pc, #28]	; (8011db4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8011d96:	6819      	ldr	r1, [r3, #0]
 8011d98:	887b      	ldrh	r3, [r7, #2]
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	440b      	add	r3, r1
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	005b      	lsls	r3, r3, #1
 8011da2:	4413      	add	r3, r2
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr
 8011db0:	20008634 	.word	0x20008634
 8011db4:	20008638 	.word	0x20008638

08011db8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011db8:	b480      	push	{r7}
 8011dba:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011dbc:	232b      	movs	r3, #43	; 0x2b
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr

08011dc8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011dc8:	b480      	push	{r7}
 8011dca:	af00      	add	r7, sp, #0
    return _fonts;
 8011dcc:	4b02      	ldr	r3, [pc, #8]	; (8011dd8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr
 8011dd8:	2000863c 	.word	0x2000863c

08011ddc <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	6039      	str	r1, [r7, #0]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2b01      	cmp	r3, #1
 8011dea:	d127      	bne.n	8011e3c <_Z41__static_initialization_and_destruction_0ii+0x60>
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011df2:	4293      	cmp	r3, r2
 8011df4:	d122      	bne.n	8011e3c <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 8011df6:	f7fc fed5 	bl	800eba4 <_Z25getFont_Asap_Bold_18_4bppv>
 8011dfa:	4602      	mov	r2, r0
};
 8011dfc:	4b11      	ldr	r3, [pc, #68]	; (8011e44 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011dfe:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8011e00:	f7fc ff96 	bl	800ed30 <_Z25getFont_Asap_Bold_40_4bppv>
 8011e04:	4602      	mov	r2, r0
};
 8011e06:	4b0f      	ldr	r3, [pc, #60]	; (8011e44 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011e08:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8011e0a:	f7fc ff4f 	bl	800ecac <_Z25getFont_Asap_Bold_30_4bppv>
 8011e0e:	4602      	mov	r2, r0
};
 8011e10:	4b0c      	ldr	r3, [pc, #48]	; (8011e44 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011e12:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8011e14:	f7fc fe84 	bl	800eb20 <_Z25getFont_Asap_Bold_12_4bppv>
 8011e18:	4602      	mov	r2, r0
};
 8011e1a:	4b0a      	ldr	r3, [pc, #40]	; (8011e44 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011e1c:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8011e1e:	f7fc ffc9 	bl	800edb4 <_Z25getFont_Asap_Bold_60_4bppv>
 8011e22:	4602      	mov	r2, r0
};
 8011e24:	4b07      	ldr	r3, [pc, #28]	; (8011e44 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011e26:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8011e28:	f7fc fefe 	bl	800ec28 <_Z25getFont_Asap_Bold_21_4bppv>
 8011e2c:	4602      	mov	r2, r0
};
 8011e2e:	4b05      	ldr	r3, [pc, #20]	; (8011e44 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011e30:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8011e32:	f7fc fe33 	bl	800ea9c <_Z25getFont_Asap_Bold_10_4bppv>
 8011e36:	4602      	mov	r2, r0
};
 8011e38:	4b02      	ldr	r3, [pc, #8]	; (8011e44 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8011e3a:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8011e3c:	bf00      	nop
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	2000863c 	.word	0x2000863c

08011e48 <_GLOBAL__sub_I__fonts>:
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011e50:	2001      	movs	r0, #1
 8011e52:	f7ff ffc3 	bl	8011ddc <_Z41__static_initialization_and_destruction_0ii>
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	4a05      	ldr	r2, [pc, #20]	; (8011e78 <_ZN19FrontendApplicationD1Ev+0x20>)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	601a      	str	r2, [r3, #0]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7fd fa33 	bl	800f2d4 <_ZN23FrontendApplicationBaseD1Ev>
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	4618      	mov	r0, r3
 8011e72:	3708      	adds	r7, #8
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	08025a24 	.word	0x08025a24

08011e7c <_ZN19FrontendApplicationD0Ev>:
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f7ff ffe7 	bl	8011e58 <_ZN19FrontendApplicationD1Ev>
 8011e8a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f011 ffbf 	bl	8023e12 <_ZdlPvj>
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	4618      	mov	r0, r3
 8011e98:	3708      	adds	r7, #8
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b082      	sub	sp, #8
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011eac:	4618      	mov	r0, r3
 8011eae:	f000 faf3 	bl	8012498 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f005 fefd 	bl	8017cb4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011eba:	bf00      	nop
 8011ebc:	3708      	adds	r7, #8
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}
	...

08011ec4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	60f8      	str	r0, [r7, #12]
 8011ecc:	60b9      	str	r1, [r7, #8]
 8011ece:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	687a      	ldr	r2, [r7, #4]
 8011ed4:	68b9      	ldr	r1, [r7, #8]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7fd fa76 	bl	800f3c8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011edc:	4a03      	ldr	r2, [pc, #12]	; (8011eec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	601a      	str	r2, [r3, #0]
{
}
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3710      	adds	r7, #16
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}
 8011eec:	08025a24 	.word	0x08025a24

08011ef0 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011ef0:	b480      	push	{r7}
 8011ef2:	b083      	sub	sp, #12
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
    {
    }
 8011ef8:	bf00      	nop
 8011efa:	370c      	adds	r7, #12
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr

08011f04 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011f04:	b480      	push	{r7}
 8011f06:	b083      	sub	sp, #12
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
    {
    }
 8011f0c:	bf00      	nop
 8011f0e:	370c      	adds	r7, #12
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8011f18:	b480      	push	{r7}
 8011f1a:	b083      	sub	sp, #12
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
    {
 8011f20:	4a04      	ldr	r2, [pc, #16]	; (8011f34 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	601a      	str	r2, [r3, #0]
    }
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	4618      	mov	r0, r3
 8011f2a:	370c      	adds	r7, #12
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f32:	4770      	bx	lr
 8011f34:	08025aa4 	.word	0x08025aa4

08011f38 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
    }
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7ff ffe9 	bl	8011f18 <_ZN8touchgfx9PresenterD1Ev>
 8011f46:	2104      	movs	r1, #4
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f011 ff62 	bl	8023e12 <_ZdlPvj>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4618      	mov	r0, r3
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8011f58:	b480      	push	{r7}
 8011f5a:	b083      	sub	sp, #12
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
    {
 8011f60:	4a04      	ldr	r2, [pc, #16]	; (8011f74 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	601a      	str	r2, [r3, #0]
    }
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	4618      	mov	r0, r3
 8011f6a:	370c      	adds	r7, #12
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr
 8011f74:	08025aa4 	.word	0x08025aa4

08011f78 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	4a06      	ldr	r2, [pc, #24]	; (8011f9c <_ZN13ModelListenerC1Ev+0x24>)
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	601a      	str	r2, [r3, #0]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	605a      	str	r2, [r3, #4]
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	4618      	mov	r0, r3
 8011f90:	370c      	adds	r7, #12
 8011f92:	46bd      	mov	sp, r7
 8011f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f98:	4770      	bx	lr
 8011f9a:	bf00      	nop
 8011f9c:	08025a90 	.word	0x08025a90

08011fa0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011fa0:	b480      	push	{r7}
 8011fa2:	b083      	sub	sp, #12
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	4a04      	ldr	r2, [pc, #16]	; (8011fbc <_ZN13ModelListenerD1Ev+0x1c>)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	601a      	str	r2, [r3, #0]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	370c      	adds	r7, #12
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr
 8011fbc:	08025a90 	.word	0x08025a90

08011fc0 <_ZN13ModelListenerD0Ev>:
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b082      	sub	sp, #8
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f7ff ffe9 	bl	8011fa0 <_ZN13ModelListenerD1Ev>
 8011fce:	2108      	movs	r1, #8
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f011 ff1e 	bl	8023e12 <_ZdlPvj>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3708      	adds	r7, #8
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}

08011fe0 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8011fe0:	b480      	push	{r7}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
 8011fea:	bf00      	nop
 8011fec:	370c      	adds	r7, #12
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr
	...

08011ff8 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	4a09      	ldr	r2, [pc, #36]	; (8012028 <_ZN13MainPresenterD1Ev+0x30>)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	601a      	str	r2, [r3, #0]
 8012006:	4a09      	ldr	r2, [pc, #36]	; (801202c <_ZN13MainPresenterD1Ev+0x34>)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	605a      	str	r2, [r3, #4]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	3304      	adds	r3, #4
 8012010:	4618      	mov	r0, r3
 8012012:	f7ff ffc5 	bl	8011fa0 <_ZN13ModelListenerD1Ev>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	4618      	mov	r0, r3
 801201a:	f7ff ff7d 	bl	8011f18 <_ZN8touchgfx9PresenterD1Ev>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	4618      	mov	r0, r3
 8012022:	3708      	adds	r7, #8
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	08025a60 	.word	0x08025a60
 801202c:	08025a7c 	.word	0x08025a7c

08012030 <_ZThn4_N13MainPresenterD1Ev>:
 8012030:	f1a0 0004 	sub.w	r0, r0, #4
 8012034:	e7e0      	b.n	8011ff8 <_ZN13MainPresenterD1Ev>
 8012036:	bf00      	nop

08012038 <_ZN13MainPresenterD0Ev>:
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f7ff ffd9 	bl	8011ff8 <_ZN13MainPresenterD1Ev>
 8012046:	2110      	movs	r1, #16
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f011 fee2 	bl	8023e12 <_ZdlPvj>
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	4618      	mov	r0, r3
 8012052:	3708      	adds	r7, #8
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <_ZThn4_N13MainPresenterD0Ev>:
 8012058:	f1a0 0004 	sub.w	r0, r0, #4
 801205c:	e7ec      	b.n	8012038 <_ZN13MainPresenterD0Ev>
	...

08012060 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	6039      	str	r1, [r7, #0]
    : view(v)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	4618      	mov	r0, r3
 801206e:	f7ff ff73 	bl	8011f58 <_ZN8touchgfx9PresenterC1Ev>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	3304      	adds	r3, #4
 8012076:	4618      	mov	r0, r3
 8012078:	f7ff ff7e 	bl	8011f78 <_ZN13ModelListenerC1Ev>
 801207c:	4a06      	ldr	r2, [pc, #24]	; (8012098 <_ZN13MainPresenterC1ER8MainView+0x38>)
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	601a      	str	r2, [r3, #0]
 8012082:	4a06      	ldr	r2, [pc, #24]	; (801209c <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	605a      	str	r2, [r3, #4]
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	683a      	ldr	r2, [r7, #0]
 801208c:	60da      	str	r2, [r3, #12]
{
}
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	4618      	mov	r0, r3
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	08025a60 	.word	0x08025a60
 801209c:	08025a7c 	.word	0x08025a7c

080120a0 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80120a0:	b480      	push	{r7}
 80120a2:	b083      	sub	sp, #12
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
}
 80120a8:	bf00      	nop
 80120aa:	370c      	adds	r7, #12
 80120ac:	46bd      	mov	sp, r7
 80120ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b2:	4770      	bx	lr

080120b4 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 80120b4:	b480      	push	{r7}
 80120b6:	b083      	sub	sp, #12
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
}
 80120bc:	bf00      	nop
 80120be:	370c      	adds	r7, #12
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	68db      	ldr	r3, [r3, #12]
 80120d6:	6839      	ldr	r1, [r7, #0]
 80120d8:	4618      	mov	r0, r3
 80120da:	f000 f8a9 	bl	8012230 <_ZN8MainView9updateValEPh>
}
 80120de:	bf00      	nop
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}

080120e6 <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 80120e6:	f1a0 0004 	sub.w	r0, r0, #4
 80120ea:	f7ff bfed 	b.w	80120c8 <_ZN13MainPresenter11setNewValueEPh>

080120ee <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 80120ee:	b580      	push	{r7, lr}
 80120f0:	b084      	sub	sp, #16
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	60f8      	str	r0, [r7, #12]
 80120f6:	460b      	mov	r3, r1
 80120f8:	607a      	str	r2, [r7, #4]
 80120fa:	ed87 0a00 	vstr	s0, [r7]
 80120fe:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8012100:	463b      	mov	r3, r7
 8012102:	8979      	ldrh	r1, [r7, #10]
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	68f8      	ldr	r0, [r7, #12]
 8012108:	f008 f870 	bl	801a1ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 801210c:	4603      	mov	r3, r0
    }
 801210e:	4618      	mov	r0, r3
 8012110:	3710      	adds	r7, #16
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}

08012116 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8012116:	b480      	push	{r7}
 8012118:	b083      	sub	sp, #12
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
        return rect.width;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8012124:	4618      	mov	r0, r3
 8012126:	370c      	adds	r7, #12
 8012128:	46bd      	mov	sp, r7
 801212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212e:	4770      	bx	lr

08012130 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8012130:	b480      	push	{r7}
 8012132:	b083      	sub	sp, #12
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
        return rect.height;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 801213e:	4618      	mov	r0, r3
 8012140:	370c      	adds	r7, #12
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr
	...

0801214c <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	4a05      	ldr	r2, [pc, #20]	; (801216c <_ZN8MainViewD1Ev+0x20>)
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	601a      	str	r2, [r3, #0]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	4618      	mov	r0, r3
 801215e:	f7fe f8ad 	bl	80102bc <_ZN12MainViewBaseD1Ev>
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	4618      	mov	r0, r3
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}
 801216c:	08025abc 	.word	0x08025abc

08012170 <_ZN8MainViewD0Ev>:
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f7ff ffe7 	bl	801214c <_ZN8MainViewD1Ev>
 801217e:	f242 712c 	movw	r1, #10028	; 0x272c
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	f011 fe45 	bl	8023e12 <_ZdlPvj>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4618      	mov	r0, r3
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
	...

08012194 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

MainView::MainView()
 8012194:	b590      	push	{r4, r7, lr}
 8012196:	b083      	sub	sp, #12
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	4618      	mov	r0, r3
 80121a0:	f7fe f9d2 	bl	8010548 <_ZN12MainViewBaseC1Ev>
 80121a4:	4a15      	ldr	r2, [pc, #84]	; (80121fc <_ZN8MainViewC1Ev+0x68>)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80121aa:	4b15      	ldr	r3, [pc, #84]	; (8012200 <_ZN8MainViewC1Ev+0x6c>)
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	461c      	mov	r4, r3
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7ff ffad 	bl	8012116 <_ZNK8touchgfx8Drawable8getWidthEv>
 80121bc:	4603      	mov	r3, r0
 80121be:	429c      	cmp	r4, r3
 80121c0:	dc0b      	bgt.n	80121da <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 80121c2:	4b10      	ldr	r3, [pc, #64]	; (8012204 <_ZN8MainViewC1Ev+0x70>)
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	461c      	mov	r4, r3
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7ff ffae 	bl	8012130 <_ZNK8touchgfx8Drawable9getHeightEv>
 80121d4:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80121d6:	429c      	cmp	r4, r3
 80121d8:	dd01      	ble.n	80121de <_ZN8MainViewC1Ev+0x4a>
 80121da:	2301      	movs	r3, #1
 80121dc:	e000      	b.n	80121e0 <_ZN8MainViewC1Ev+0x4c>
 80121de:	2300      	movs	r3, #0
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d005      	beq.n	80121f0 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	3340      	adds	r3, #64	; 0x40
 80121e8:	2101      	movs	r1, #1
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7fd fca4 	bl	800fb38 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	4618      	mov	r0, r3
 80121f4:	370c      	adds	r7, #12
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd90      	pop	{r4, r7, pc}
 80121fa:	bf00      	nop
 80121fc:	08025abc 	.word	0x08025abc
 8012200:	2000bc5c 	.word	0x2000bc5c
 8012204:	2000bc5e 	.word	0x2000bc5e

08012208 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
}
 8012210:	bf00      	nop
 8012212:	370c      	adds	r7, #12
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr

0801221c <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
}
 8012224:	bf00      	nop
 8012226:	370c      	adds	r7, #12
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr

08012230 <_ZN8MainView9updateValEPh>:
   int	  tps;
   float	  batt_v;
} display_values;

void MainView::updateVal(uint8_t* newValue)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b084      	sub	sp, #16
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
	display_values* values = (display_values*) newValue;
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	60fb      	str	r3, [r7, #12]

	RPMProgressBar.setValue(values->rpm);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f603 0298 	addw	r2, r3, #2200	; 0x898
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	4619      	mov	r1, r3
 801224a:	4610      	mov	r0, r2
 801224c:	f002 fa32 	bl	80146b4 <_ZN8touchgfx13ImageProgress8setValueEi>
	RPMProgressBar.invalidate();
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8012256:	4618      	mov	r0, r3
 8012258:	f006 fa40 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f603 20e2 	addw	r0, r3, #2786	; 0xae2
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	4a7f      	ldr	r2, [pc, #508]	; (8012464 <_ZN8MainView9updateValEPh+0x234>)
 8012268:	2105      	movs	r1, #5
 801226a:	f007 fe65 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RPMValue.resizeToCurrentText();
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8012274:	4618      	mov	r0, r3
 8012276:	f004 fa8b 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	RPMValue.invalidate();
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8012280:	4618      	mov	r0, r3
 8012282:	f006 fa2b 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f503 6030 	add.w	r0, r3, #2816	; 0xb00
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	689b      	ldr	r3, [r3, #8]
 8012290:	4a74      	ldr	r2, [pc, #464]	; (8012464 <_ZN8MainView9updateValEPh+0x234>)
 8012292:	2105      	movs	r1, #5
 8012294:	f007 fe50 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	MAPValue.resizeToCurrentText();
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 801229e:	4618      	mov	r0, r3
 80122a0:	f004 fa76 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	MAPValue.invalidate();
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 80122aa:	4618      	mov	r0, r3
 80122ac:	f006 fa16 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f603 20f6 	addw	r0, r3, #2806	; 0xaf6
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	4a6a      	ldr	r2, [pc, #424]	; (8012464 <_ZN8MainView9updateValEPh+0x234>)
 80122bc:	2105      	movs	r1, #5
 80122be:	f007 fe3b 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CLTValue.resizeToCurrentText();
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 80122c8:	4618      	mov	r0, r3
 80122ca:	f004 fa61 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	CLTValue.invalidate();
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 80122d4:	4618      	mov	r0, r3
 80122d6:	f006 fa01 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f603 209c 	addw	r0, r3, #2716	; 0xa9c
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80122e6:	eeb0 0a67 	vmov.f32	s0, s15
 80122ea:	4a5f      	ldr	r2, [pc, #380]	; (8012468 <_ZN8MainView9updateValEPh+0x238>)
 80122ec:	2105      	movs	r1, #5
 80122ee:	f7ff fefe 	bl	80120ee <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.resizeToCurrentText();
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80122f8:	4618      	mov	r0, r3
 80122fa:	f004 fa49 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	LambdaValue.invalidate();
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8012304:	4618      	mov	r0, r3
 8012306:	f006 f9e9 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f603 20a6 	addw	r0, r3, #2726	; 0xaa6
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	edd3 7a04 	vldr	s15, [r3, #16]
 8012316:	eeb0 0a67 	vmov.f32	s0, s15
 801231a:	4a53      	ldr	r2, [pc, #332]	; (8012468 <_ZN8MainView9updateValEPh+0x238>)
 801231c:	2105      	movs	r1, #5
 801231e:	f7ff fee6 	bl	80120ee <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.resizeToCurrentText();
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012328:	4618      	mov	r0, r3
 801232a:	f004 fa31 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	TrgtValue.invalidate();
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012334:	4618      	mov	r0, r3
 8012336:	f006 f9d1 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%d",values->vehicle_spd);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f603 20ec 	addw	r0, r3, #2796	; 0xaec
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	695b      	ldr	r3, [r3, #20]
 8012344:	4a47      	ldr	r2, [pc, #284]	; (8012464 <_ZN8MainView9updateValEPh+0x234>)
 8012346:	2105      	movs	r1, #5
 8012348:	f007 fdf6 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	KMHValue.resizeToCurrentText();
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8012352:	4618      	mov	r0, r3
 8012354:	f004 fa1c 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	KMHValue.invalidate();
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 801235e:	4618      	mov	r0, r3
 8012360:	f006 f9bc 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%d",values->oil_press);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f603 20ce 	addw	r0, r3, #2766	; 0xace
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	69db      	ldr	r3, [r3, #28]
 801236e:	4a3d      	ldr	r2, [pc, #244]	; (8012464 <_ZN8MainView9updateValEPh+0x234>)
 8012370:	2105      	movs	r1, #5
 8012372:	f007 fde1 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	OILPressureValue.resizeToCurrentText();
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 801237c:	4618      	mov	r0, r3
 801237e:	f004 fa07 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	OILPressureValue.invalidate();
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8012388:	4618      	mov	r0, r3
 801238a:	f006 f9a7 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f603 20c4 	addw	r0, r3, #2756	; 0xac4
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	699b      	ldr	r3, [r3, #24]
 8012398:	4a32      	ldr	r2, [pc, #200]	; (8012464 <_ZN8MainView9updateValEPh+0x234>)
 801239a:	2105      	movs	r1, #5
 801239c:	f007 fdcc 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	OILTempValue.resizeToCurrentText();
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 80123a6:	4618      	mov	r0, r3
 80123a8:	f004 f9f2 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	OILTempValue.invalidate();
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 80123b2:	4618      	mov	r0, r3
 80123b4:	f006 f992 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f503 602b 	add.w	r0, r3, #2736	; 0xab0
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	6a1b      	ldr	r3, [r3, #32]
 80123c2:	4a28      	ldr	r2, [pc, #160]	; (8012464 <_ZN8MainView9updateValEPh+0x234>)
 80123c4:	2105      	movs	r1, #5
 80123c6:	f007 fdb7 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	IATValue.resizeToCurrentText();
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 80123d0:	4618      	mov	r0, r3
 80123d2:	f004 f9dd 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	IATValue.invalidate();
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 80123dc:	4618      	mov	r0, r3
 80123de:	f006 f97d 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f603 20ba 	addw	r0, r3, #2746	; 0xaba
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ec:	4a1d      	ldr	r2, [pc, #116]	; (8012464 <_ZN8MainView9updateValEPh+0x234>)
 80123ee:	2105      	movs	r1, #5
 80123f0:	f007 fda2 	bl	8019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	EGTValue.resizeToCurrentText();
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80123fa:	4618      	mov	r0, r3
 80123fc:	f004 f9c8 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	EGTValue.invalidate();
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8012406:	4618      	mov	r0, r3
 8012408:	f006 f968 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	TPSProgress.setValue(values->tps);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f503 62d1 	add.w	r2, r3, #1672	; 0x688
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012416:	4619      	mov	r1, r3
 8012418:	4610      	mov	r0, r2
 801241a:	f001 fffb 	bl	8014414 <_ZN8touchgfx11BoxProgress8setValueEi>
	RPMProgressBar.invalidate();
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8012424:	4618      	mov	r0, r3
 8012426:	f006 f959 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f603 20d8 	addw	r0, r3, #2776	; 0xad8
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8012436:	eeb0 0a67 	vmov.f32	s0, s15
 801243a:	4a0b      	ldr	r2, [pc, #44]	; (8012468 <_ZN8MainView9updateValEPh+0x238>)
 801243c:	2105      	movs	r1, #5
 801243e:	f7ff fe56 	bl	80120ee <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	BatteryVoltage.resizeToCurrentText();
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8012448:	4618      	mov	r0, r3
 801244a:	f004 f9a1 	bl	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	BatteryVoltage.invalidate();
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8012454:	4618      	mov	r0, r3
 8012456:	f006 f941 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801245a:	bf00      	nop
 801245c:	3710      	adds	r7, #16
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
 8012462:	bf00      	nop
 8012464:	08025428 	.word	0x08025428
 8012468:	0802542c 	.word	0x0802542c

0801246c <_ZN5ModelC1Ev>:
extern "C"
{
	xQueueHandle messageQ;
}

Model::Model() : modelListener(0)
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 801247a:	2200      	movs	r2, #0
 801247c:	2130      	movs	r1, #48	; 0x30
 801247e:	2001      	movs	r0, #1
 8012480:	f7f9 fde9 	bl	800c056 <xQueueGenericCreate>
 8012484:	4602      	mov	r2, r0
 8012486:	4b03      	ldr	r3, [pc, #12]	; (8012494 <_ZN5ModelC1Ev+0x28>)
 8012488:	601a      	str	r2, [r3, #0]
}
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	4618      	mov	r0, r3
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}
 8012494:	20008688 	.word	0x20008688

08012498 <_ZN5Model4tickEv>:

void Model::tick()
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 80124a0:	4b0e      	ldr	r3, [pc, #56]	; (80124dc <_ZN5Model4tickEv+0x44>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	2200      	movs	r2, #0
 80124a6:	490e      	ldr	r1, [pc, #56]	; (80124e0 <_ZN5Model4tickEv+0x48>)
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7fa f865 	bl	800c578 <xQueueReceive>
 80124ae:	4603      	mov	r3, r0
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	bf0c      	ite	eq
 80124b4:	2301      	moveq	r3, #1
 80124b6:	2300      	movne	r3, #0
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d009      	beq.n	80124d2 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681a      	ldr	r2, [r3, #0]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	3308      	adds	r3, #8
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	4904      	ldr	r1, [pc, #16]	; (80124e0 <_ZN5Model4tickEv+0x48>)
 80124ce:	4610      	mov	r0, r2
 80124d0:	4798      	blx	r3

		// something to update
	}
}
 80124d2:	bf00      	nop
 80124d4:	3708      	adds	r7, #8
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	20008688 	.word	0x20008688
 80124e0:	20008658 	.word	0x20008658

080124e4 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
    {
 80124ec:	4a04      	ldr	r2, [pc, #16]	; (8012500 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	601a      	str	r2, [r3, #0]
    }
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	4618      	mov	r0, r3
 80124f6:	370c      	adds	r7, #12
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr
 8012500:	08025b08 	.word	0x08025b08

08012504 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
    }
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f7ff ffe9 	bl	80124e4 <_ZN8touchgfx15TouchControllerD1Ev>
 8012512:	2104      	movs	r1, #4
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f011 fc7c 	bl	8023e12 <_ZdlPvj>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	4618      	mov	r0, r3
 801251e:	3708      	adds	r7, #8
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}

08012524 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8012524:	b480      	push	{r7}
 8012526:	b083      	sub	sp, #12
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 801252c:	bf00      	nop
 801252e:	370c      	adds	r7, #12
 8012530:	46bd      	mov	sp, r7
 8012532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012536:	4770      	bx	lr

08012538 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012538:	b480      	push	{r7}
 801253a:	b085      	sub	sp, #20
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8012544:	2300      	movs	r3, #0
}
 8012546:	4618      	mov	r0, r3
 8012548:	3714      	adds	r7, #20
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr
	...

08012554 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	4a05      	ldr	r2, [pc, #20]	; (8012574 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	601a      	str	r2, [r3, #0]
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4618      	mov	r0, r3
 8012566:	f7ff ffbd 	bl	80124e4 <_ZN8touchgfx15TouchControllerD1Ev>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	3708      	adds	r7, #8
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	08025af0 	.word	0x08025af0

08012578 <_ZN20STM32TouchControllerD0Ev>:
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f7ff ffe7 	bl	8012554 <_ZN20STM32TouchControllerD1Ev>
 8012586:	2104      	movs	r1, #4
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f011 fc42 	bl	8023e12 <_ZdlPvj>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	4618      	mov	r0, r3
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8012598:	b480      	push	{r7}
 801259a:	b083      	sub	sp, #12
 801259c:	af00      	add	r7, sp, #0
 801259e:	4603      	mov	r3, r0
 80125a0:	71fb      	strb	r3, [r7, #7]

}
 80125a2:	bf00      	nop
 80125a4:	370c      	adds	r7, #12
 80125a6:	46bd      	mov	sp, r7
 80125a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ac:	4770      	bx	lr

080125ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80125ae:	b480      	push	{r7}
 80125b0:	b083      	sub	sp, #12
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	4603      	mov	r3, r0
 80125b6:	71fb      	strb	r3, [r7, #7]

}
 80125b8:	bf00      	nop
 80125ba:	370c      	adds	r7, #12
 80125bc:	46bd      	mov	sp, r7
 80125be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c2:	4770      	bx	lr

080125c4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80125c4:	b480      	push	{r7}
 80125c6:	b083      	sub	sp, #12
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	4603      	mov	r3, r0
 80125cc:	71fb      	strb	r3, [r7, #7]

}
 80125ce:	bf00      	nop
 80125d0:	370c      	adds	r7, #12
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr
	...

080125dc <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80125dc:	b480      	push	{r7}
 80125de:	b083      	sub	sp, #12
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
    {
 80125e4:	4a04      	ldr	r2, [pc, #16]	; (80125f8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	601a      	str	r2, [r3, #0]
    }
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4618      	mov	r0, r3
 80125ee:	370c      	adds	r7, #12
 80125f0:	46bd      	mov	sp, r7
 80125f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f6:	4770      	bx	lr
 80125f8:	080268c0 	.word	0x080268c0

080125fc <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
    }
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f7ff ffe9 	bl	80125dc <_ZN8touchgfx3HALD1Ev>
 801260a:	2178      	movs	r1, #120	; 0x78
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f011 fc00 	bl	8023e12 <_ZdlPvj>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4618      	mov	r0, r3
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}

0801261c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	460b      	mov	r3, r1
 8012626:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	78fa      	ldrb	r2, [r7, #3]
 801262c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2201      	movs	r2, #1
 8012634:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8012638:	bf00      	nop
 801263a:	370c      	adds	r7, #12
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr

08012644 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	685a      	ldr	r2, [r3, #4]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	4610      	mov	r0, r2
 801265a:	4798      	blx	r3
 801265c:	4603      	mov	r3, r0
    }
 801265e:	4618      	mov	r0, r3
 8012660:	3708      	adds	r7, #8
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}

08012666 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8012666:	b580      	push	{r7, lr}
 8012668:	b082      	sub	sp, #8
 801266a:	af00      	add	r7, sp, #0
 801266c:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f003 f92a 	bl	80158c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	3390      	adds	r3, #144	; 0x90
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	4798      	blx	r3
    }
 8012680:	bf00      	nop
 8012682:	3708      	adds	r7, #8
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
    {
        return false;
 8012692:	2300      	movs	r3, #0
    }
 8012694:	4618      	mov	r0, r3
 8012696:	370c      	adds	r7, #12
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80126a0:	b590      	push	{r4, r7, lr}
 80126a2:	b08b      	sub	sp, #44	; 0x2c
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	4611      	mov	r1, r2
 80126ac:	461a      	mov	r2, r3
 80126ae:	460b      	mov	r3, r1
 80126b0:	80fb      	strh	r3, [r7, #6]
 80126b2:	4613      	mov	r3, r2
 80126b4:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80126b6:	f7fc fcbf 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 80126ba:	4602      	mov	r2, r0
 80126bc:	6813      	ldr	r3, [r2, #0]
 80126be:	3328      	adds	r3, #40	; 0x28
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	4610      	mov	r0, r2
 80126c4:	4798      	blx	r3
 80126c6:	4603      	mov	r3, r0
 80126c8:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80126ca:	8b7b      	ldrh	r3, [r7, #26]
 80126cc:	4a3d      	ldr	r2, [pc, #244]	; (80127c4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80126ce:	8812      	ldrh	r2, [r2, #0]
 80126d0:	fb02 f303 	mul.w	r3, r2, r3
 80126d4:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80126da:	2300      	movs	r3, #0
 80126dc:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80126de:	2300      	movs	r3, #0
 80126e0:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80126e2:	797b      	ldrb	r3, [r7, #5]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d005      	beq.n	80126f4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80126e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	4413      	add	r3, r2
 80126ee:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80126f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f2:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 80126f4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d005      	beq.n	8012708 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 80126fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	4413      	add	r3, r2
 8012702:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8012704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012706:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8012708:	88fb      	ldrh	r3, [r7, #6]
 801270a:	3b01      	subs	r3, #1
 801270c:	2b1f      	cmp	r3, #31
 801270e:	d84d      	bhi.n	80127ac <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8012710:	a201      	add	r2, pc, #4	; (adr r2, 8012718 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8012712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012716:	bf00      	nop
 8012718:	08012799 	.word	0x08012799
 801271c:	08012799 	.word	0x08012799
 8012720:	080127ad 	.word	0x080127ad
 8012724:	08012799 	.word	0x08012799
 8012728:	080127ad 	.word	0x080127ad
 801272c:	080127ad 	.word	0x080127ad
 8012730:	080127ad 	.word	0x080127ad
 8012734:	08012799 	.word	0x08012799
 8012738:	080127ad 	.word	0x080127ad
 801273c:	080127ad 	.word	0x080127ad
 8012740:	080127ad 	.word	0x080127ad
 8012744:	080127ad 	.word	0x080127ad
 8012748:	080127ad 	.word	0x080127ad
 801274c:	080127ad 	.word	0x080127ad
 8012750:	080127ad 	.word	0x080127ad
 8012754:	08012799 	.word	0x08012799
 8012758:	080127ad 	.word	0x080127ad
 801275c:	080127ad 	.word	0x080127ad
 8012760:	080127ad 	.word	0x080127ad
 8012764:	080127ad 	.word	0x080127ad
 8012768:	080127ad 	.word	0x080127ad
 801276c:	080127ad 	.word	0x080127ad
 8012770:	080127ad 	.word	0x080127ad
 8012774:	08012799 	.word	0x08012799
 8012778:	080127ad 	.word	0x080127ad
 801277c:	080127ad 	.word	0x080127ad
 8012780:	080127ad 	.word	0x080127ad
 8012784:	080127ad 	.word	0x080127ad
 8012788:	080127ad 	.word	0x080127ad
 801278c:	080127ad 	.word	0x080127ad
 8012790:	080127ad 	.word	0x080127ad
 8012794:	08012799 	.word	0x08012799
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	3374      	adds	r3, #116	; 0x74
 801279e:	681c      	ldr	r4, [r3, #0]
 80127a0:	69fb      	ldr	r3, [r7, #28]
 80127a2:	6a3a      	ldr	r2, [r7, #32]
 80127a4:	68b9      	ldr	r1, [r7, #8]
 80127a6:	68f8      	ldr	r0, [r7, #12]
 80127a8:	47a0      	blx	r4
            break;
 80127aa:	e006      	b.n	80127ba <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 80127ac:	4b06      	ldr	r3, [pc, #24]	; (80127c8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80127ae:	4a07      	ldr	r2, [pc, #28]	; (80127cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80127b0:	f240 3125 	movw	r1, #805	; 0x325
 80127b4:	4806      	ldr	r0, [pc, #24]	; (80127d0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80127b6:	f011 fb57 	bl	8023e68 <__assert_func>
            break;
        }
    }
 80127ba:	bf00      	nop
 80127bc:	372c      	adds	r7, #44	; 0x2c
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd90      	pop	{r4, r7, pc}
 80127c2:	bf00      	nop
 80127c4:	2000bc64 	.word	0x2000bc64
 80127c8:	08025434 	.word	0x08025434
 80127cc:	08025c1c 	.word	0x08025c1c
 80127d0:	08025454 	.word	0x08025454

080127d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b084      	sub	sp, #16
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	60b9      	str	r1, [r7, #8]
 80127de:	607a      	str	r2, [r7, #4]
 80127e0:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d106      	bne.n	80127f6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80127e8:	4b11      	ldr	r3, [pc, #68]	; (8012830 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80127ea:	4a12      	ldr	r2, [pc, #72]	; (8012834 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80127ec:	f240 3137 	movw	r1, #823	; 0x337
 80127f0:	4811      	ldr	r0, [pc, #68]	; (8012838 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80127f2:	f011 fb39 	bl	8023e68 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	68ba      	ldr	r2, [r7, #8]
 80127fa:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	687a      	ldr	r2, [r7, #4]
 8012800:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	683a      	ldr	r2, [r7, #0]
 8012806:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	bf14      	ite	ne
 801280e:	2301      	movne	r3, #1
 8012810:	2300      	moveq	r3, #0
 8012812:	b2da      	uxtb	r2, r3
 8012814:	4b09      	ldr	r3, [pc, #36]	; (801283c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8012816:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	bf14      	ite	ne
 801281e:	2301      	movne	r3, #1
 8012820:	2300      	moveq	r3, #0
 8012822:	b2da      	uxtb	r2, r3
 8012824:	4b06      	ldr	r3, [pc, #24]	; (8012840 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8012826:	701a      	strb	r2, [r3, #0]
    }
 8012828:	bf00      	nop
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	08025498 	.word	0x08025498
 8012834:	08025bcc 	.word	0x08025bcc
 8012838:	08025454 	.word	0x08025454
 801283c:	2000bc66 	.word	0x2000bc66
 8012840:	2000bc67 	.word	0x2000bc67

08012844 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	460b      	mov	r3, r1
 801284e:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012854:	2b00      	cmp	r3, #0
 8012856:	d004      	beq.n	8012862 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801285c:	887a      	ldrh	r2, [r7, #2]
 801285e:	4610      	mov	r0, r2
 8012860:	4798      	blx	r3
        }
    }
 8012862:	bf00      	nop
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801286a:	b580      	push	{r7, lr}
 801286c:	b082      	sub	sp, #8
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	685a      	ldr	r2, [r3, #4]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	3318      	adds	r3, #24
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4610      	mov	r0, r2
 8012882:	4798      	blx	r3
 8012884:	4603      	mov	r3, r0
    }
 8012886:	4618      	mov	r0, r3
 8012888:	3708      	adds	r7, #8
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
	...

08012890 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8012890:	b480      	push	{r7}
 8012892:	b083      	sub	sp, #12
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d017      	beq.n	80128d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80128a8:	4b1a      	ldr	r3, [pc, #104]	; (8012914 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d12a      	bne.n	8012906 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80128b0:	4b19      	ldr	r3, [pc, #100]	; (8012918 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80128b2:	881a      	ldrh	r2, [r3, #0]
 80128b4:	4b19      	ldr	r3, [pc, #100]	; (801291c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80128b6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80128b8:	4b19      	ldr	r3, [pc, #100]	; (8012920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80128ba:	881a      	ldrh	r2, [r3, #0]
 80128bc:	4b19      	ldr	r3, [pc, #100]	; (8012924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80128be:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80128c0:	4b16      	ldr	r3, [pc, #88]	; (801291c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80128c2:	881a      	ldrh	r2, [r3, #0]
 80128c4:	4b16      	ldr	r3, [pc, #88]	; (8012920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80128c6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80128c8:	4b16      	ldr	r3, [pc, #88]	; (8012924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80128ca:	881a      	ldrh	r2, [r3, #0]
 80128cc:	4b12      	ldr	r3, [pc, #72]	; (8012918 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80128ce:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80128d0:	4b10      	ldr	r3, [pc, #64]	; (8012914 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80128d2:	2201      	movs	r2, #1
 80128d4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80128d6:	e016      	b.n	8012906 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80128d8:	4b0e      	ldr	r3, [pc, #56]	; (8012914 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d012      	beq.n	8012906 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80128e0:	4b0f      	ldr	r3, [pc, #60]	; (8012920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80128e2:	881a      	ldrh	r2, [r3, #0]
 80128e4:	4b0d      	ldr	r3, [pc, #52]	; (801291c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80128e6:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80128e8:	4b0b      	ldr	r3, [pc, #44]	; (8012918 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80128ea:	881a      	ldrh	r2, [r3, #0]
 80128ec:	4b0d      	ldr	r3, [pc, #52]	; (8012924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80128ee:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80128f0:	4b0c      	ldr	r3, [pc, #48]	; (8012924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80128f2:	881a      	ldrh	r2, [r3, #0]
 80128f4:	4b0a      	ldr	r3, [pc, #40]	; (8012920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80128f6:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80128f8:	4b08      	ldr	r3, [pc, #32]	; (801291c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80128fa:	881a      	ldrh	r2, [r3, #0]
 80128fc:	4b06      	ldr	r3, [pc, #24]	; (8012918 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80128fe:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8012900:	4b04      	ldr	r3, [pc, #16]	; (8012914 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012902:	2200      	movs	r2, #0
 8012904:	701a      	strb	r2, [r3, #0]
    }
 8012906:	bf00      	nop
 8012908:	370c      	adds	r7, #12
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop
 8012914:	2000bc60 	.word	0x2000bc60
 8012918:	2000bc5c 	.word	0x2000bc5c
 801291c:	2000bc62 	.word	0x2000bc62
 8012920:	2000bc5e 	.word	0x2000bc5e
 8012924:	2000bc64 	.word	0x2000bc64

08012928 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012928:	b580      	push	{r7, lr}
 801292a:	b082      	sub	sp, #8
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	4618      	mov	r0, r3
 8012934:	f002 fa4a 	bl	8014dcc <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012938:	bf00      	nop
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	4a05      	ldr	r2, [pc, #20]	; (8012960 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	601a      	str	r2, [r3, #0]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	4618      	mov	r0, r3
 8012952:	f7ff fe43 	bl	80125dc <_ZN8touchgfx3HALD1Ev>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	4618      	mov	r0, r3
 801295a:	3708      	adds	r7, #8
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}
 8012960:	08025df4 	.word	0x08025df4

08012964 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f7ff ffe7 	bl	8012940 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012972:	2178      	movs	r1, #120	; 0x78
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f011 fa4c 	bl	8023e12 <_ZdlPvj>
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	4618      	mov	r0, r3
 801297e:	3708      	adds	r7, #8
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	4618      	mov	r0, r3
 8012990:	f7ff ffca 	bl	8012928 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8012994:	bf00      	nop
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b082      	sub	sp, #8
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	4618      	mov	r0, r3
 80129a8:	f001 fb18 	bl	8013fdc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80129ac:	bf00      	nop
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	4618      	mov	r0, r3
 80129c0:	f001 fb98 	bl	80140f4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80129c4:	4603      	mov	r3, r0
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3708      	adds	r7, #8
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}

080129ce <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b082      	sub	sp, #8
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
 80129d6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6839      	ldr	r1, [r7, #0]
 80129dc:	4618      	mov	r0, r3
 80129de:	f001 fb97 	bl	8014110 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80129e2:	bf00      	nop
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b082      	sub	sp, #8
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
 80129f2:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6839      	ldr	r1, [r7, #0]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f001 fb9f 	bl	801413c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80129fe:	bf00      	nop
 8012a00:	3708      	adds	r7, #8
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b082      	sub	sp, #8
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	4618      	mov	r0, r3
 8012a12:	f001 fb15 	bl	8014040 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8012a16:	bf00      	nop
 8012a18:	3708      	adds	r7, #8
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}

08012a1e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8012a1e:	b580      	push	{r7, lr}
 8012a20:	b082      	sub	sp, #8
 8012a22:	af00      	add	r7, sp, #0
 8012a24:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f001 fb19 	bl	8014060 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8012a2e:	bf00      	nop
 8012a30:	3708      	adds	r7, #8
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}

08012a36 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8012a36:	b580      	push	{r7, lr}
 8012a38:	b082      	sub	sp, #8
 8012a3a:	af00      	add	r7, sp, #0
 8012a3c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	4618      	mov	r0, r3
 8012a42:	f001 fb1b 	bl	801407c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8012a46:	bf00      	nop
 8012a48:	3708      	adds	r7, #8
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}

08012a4e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8012a4e:	b580      	push	{r7, lr}
 8012a50:	b082      	sub	sp, #8
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f001 fb1d 	bl	8014098 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8012a5e:	bf00      	nop
 8012a60:	3708      	adds	r7, #8
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
	...

08012a68 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	4a05      	ldr	r2, [pc, #20]	; (8012a88 <_ZN11TouchGFXHALD1Ev+0x20>)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	601a      	str	r2, [r3, #0]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7ff ff61 	bl	8012940 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	4618      	mov	r0, r3
 8012a82:	3708      	adds	r7, #8
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	08025b20 	.word	0x08025b20

08012a8c <_ZN11TouchGFXHALD0Ev>:
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f7ff ffe7 	bl	8012a68 <_ZN11TouchGFXHALD1Ev>
 8012a9a:	2178      	movs	r1, #120	; 0x78
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f011 f9b8 	bl	8023e12 <_ZdlPvj>
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3708      	adds	r7, #8
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}

08012aac <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8012ab0:	2203      	movs	r2, #3
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	2001      	movs	r0, #1
 8012ab6:	f7f9 face 	bl	800c056 <xQueueGenericCreate>
 8012aba:	4602      	mov	r2, r0
 8012abc:	4b0b      	ldr	r3, [pc, #44]	; (8012aec <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8012abe:	601a      	str	r2, [r3, #0]
 8012ac0:	4b0a      	ldr	r3, [pc, #40]	; (8012aec <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d006      	beq.n	8012ad6 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8012ac8:	4b08      	ldr	r3, [pc, #32]	; (8012aec <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8012aca:	6818      	ldr	r0, [r3, #0]
 8012acc:	2300      	movs	r3, #0
 8012ace:	2200      	movs	r2, #0
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	f7f9 fb21 	bl	800c118 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	2101      	movs	r1, #1
 8012ada:	2001      	movs	r0, #1
 8012adc:	f7f9 fabb 	bl	800c056 <xQueueGenericCreate>
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	4b03      	ldr	r3, [pc, #12]	; (8012af0 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8012ae4:	601a      	str	r2, [r3, #0]
}
 8012ae6:	bf00      	nop
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	2000868c 	.word	0x2000868c
 8012af0:	20008690 	.word	0x20008690

08012af4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8012af8:	4b04      	ldr	r3, [pc, #16]	; (8012b0c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	f04f 31ff 	mov.w	r1, #4294967295
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7f9 fe1b 	bl	800c73c <xQueueSemaphoreTake>
}
 8012b06:	bf00      	nop
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	2000868c 	.word	0x2000868c

08012b10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8012b14:	4b04      	ldr	r3, [pc, #16]	; (8012b28 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8012b16:	6818      	ldr	r0, [r3, #0]
 8012b18:	2300      	movs	r3, #0
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	2100      	movs	r1, #0
 8012b1e:	f7f9 fafb 	bl	800c118 <xQueueGenericSend>
}
 8012b22:	bf00      	nop
 8012b24:	bd80      	pop	{r7, pc}
 8012b26:	bf00      	nop
 8012b28:	2000868c 	.word	0x2000868c

08012b2c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8012b30:	4b03      	ldr	r3, [pc, #12]	; (8012b40 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	2100      	movs	r1, #0
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7f9 fe00 	bl	800c73c <xQueueSemaphoreTake>
}
 8012b3c:	bf00      	nop
 8012b3e:	bd80      	pop	{r7, pc}
 8012b40:	2000868c 	.word	0x2000868c

08012b44 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8012b4e:	4b0b      	ldr	r3, [pc, #44]	; (8012b7c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	1d3a      	adds	r2, r7, #4
 8012b54:	4611      	mov	r1, r2
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7f9 fc7c 	bl	800c454 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d007      	beq.n	8012b72 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8012b62:	4b07      	ldr	r3, [pc, #28]	; (8012b80 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8012b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b68:	601a      	str	r2, [r3, #0]
 8012b6a:	f3bf 8f4f 	dsb	sy
 8012b6e:	f3bf 8f6f 	isb	sy
}
 8012b72:	bf00      	nop
 8012b74:	3708      	adds	r7, #8
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	2000868c 	.word	0x2000868c
 8012b80:	e000ed04 	.word	0xe000ed04

08012b84 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
    if (vsync_q)
 8012b8a:	4b0e      	ldr	r3, [pc, #56]	; (8012bc4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d013      	beq.n	8012bba <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8012b92:	2300      	movs	r3, #0
 8012b94:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8012b96:	4b0b      	ldr	r3, [pc, #44]	; (8012bc4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8012b98:	6818      	ldr	r0, [r3, #0]
 8012b9a:	1d3a      	adds	r2, r7, #4
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	490a      	ldr	r1, [pc, #40]	; (8012bc8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8012ba0:	f7f9 fbbc 	bl	800c31c <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d007      	beq.n	8012bba <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8012baa:	4b08      	ldr	r3, [pc, #32]	; (8012bcc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8012bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bb0:	601a      	str	r2, [r3, #0]
 8012bb2:	f3bf 8f4f 	dsb	sy
 8012bb6:	f3bf 8f6f 	isb	sy
    }
}
 8012bba:	bf00      	nop
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	20008690 	.word	0x20008690
 8012bc8:	20000038 	.word	0x20000038
 8012bcc:	e000ed04 	.word	0xe000ed04

08012bd0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8012bd4:	4b08      	ldr	r3, [pc, #32]	; (8012bf8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2200      	movs	r2, #0
 8012bda:	4908      	ldr	r1, [pc, #32]	; (8012bfc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f7f9 fccb 	bl	800c578 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8012be2:	4b05      	ldr	r3, [pc, #20]	; (8012bf8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	f04f 32ff 	mov.w	r2, #4294967295
 8012bea:	4904      	ldr	r1, [pc, #16]	; (8012bfc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7f9 fcc3 	bl	800c578 <xQueueReceive>
}
 8012bf2:	bf00      	nop
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	20008690 	.word	0x20008690
 8012bfc:	20000038 	.word	0x20000038

08012c00 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	4603      	mov	r3, r0
 8012c08:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8012c0a:	88fb      	ldrh	r3, [r7, #6]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7fa f9f3 	bl	800cff8 <vTaskDelay>
}
 8012c12:	bf00      	nop
 8012c14:	3708      	adds	r7, #8
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
	...

08012c1c <__NVIC_EnableIRQ>:
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b083      	sub	sp, #12
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	4603      	mov	r3, r0
 8012c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	db0d      	blt.n	8012c4a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	f003 021f 	and.w	r2, r3, #31
 8012c38:	4907      	ldr	r1, [pc, #28]	; (8012c58 <__NVIC_EnableIRQ+0x3c>)
 8012c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c3e:	095b      	lsrs	r3, r3, #5
 8012c40:	2001      	movs	r0, #1
 8012c42:	fa00 f202 	lsl.w	r2, r0, r2
 8012c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012c4a:	bf00      	nop
 8012c4c:	370c      	adds	r7, #12
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c54:	4770      	bx	lr
 8012c56:	bf00      	nop
 8012c58:	e000e100 	.word	0xe000e100

08012c5c <__NVIC_DisableIRQ>:
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	4603      	mov	r3, r0
 8012c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	db12      	blt.n	8012c94 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	f003 021f 	and.w	r2, r3, #31
 8012c78:	4909      	ldr	r1, [pc, #36]	; (8012ca0 <__NVIC_DisableIRQ+0x44>)
 8012c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c7e:	095b      	lsrs	r3, r3, #5
 8012c80:	2001      	movs	r0, #1
 8012c82:	fa00 f202 	lsl.w	r2, r0, r2
 8012c86:	3320      	adds	r3, #32
 8012c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012c8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012c90:	f3bf 8f6f 	isb	sy
}
 8012c94:	bf00      	nop
 8012c96:	370c      	adds	r7, #12
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr
 8012ca0:	e000e100 	.word	0xe000e100

08012ca4 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	601a      	str	r2, [r3, #0]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr

08012cc0 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8012cc0:	b480      	push	{r7}
 8012cc2:	b083      	sub	sp, #12
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
        return color;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
    }
 8012ccc:	4618      	mov	r0, r3
 8012cce:	370c      	adds	r7, #12
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr

08012cd8 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8012cd8:	b480      	push	{r7}
 8012cda:	b083      	sub	sp, #12
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	b29b      	uxth	r3, r3
    }
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	370c      	adds	r7, #12
 8012cea:	46bd      	mov	sp, r7
 8012cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf0:	4770      	bx	lr
	...

08012cf4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8012cf4:	b480      	push	{r7}
 8012cf6:	b083      	sub	sp, #12
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
    {
 8012cfc:	4a04      	ldr	r2, [pc, #16]	; (8012d10 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	601a      	str	r2, [r3, #0]
    }
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	4618      	mov	r0, r3
 8012d06:	370c      	adds	r7, #12
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0e:	4770      	bx	lr
 8012d10:	08025cc8 	.word	0x08025cc8

08012d14 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
    }
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7ff ffe9 	bl	8012cf4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012d22:	2104      	movs	r1, #4
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f011 f874 	bl	8023e12 <_ZdlPvj>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	3708      	adds	r7, #8
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}

08012d34 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b082      	sub	sp, #8
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	3344      	adds	r3, #68	; 0x44
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	4798      	blx	r3
    }
 8012d48:	bf00      	nop
 8012d4a:	3708      	adds	r7, #8
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}

08012d50 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8012d58:	2300      	movs	r3, #0
    }
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	370c      	adds	r7, #12
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d64:	4770      	bx	lr
	...

08012d68 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8012d68:	b480      	push	{r7}
 8012d6a:	b083      	sub	sp, #12
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
    {
 8012d70:	4a04      	ldr	r2, [pc, #16]	; (8012d84 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	601a      	str	r2, [r3, #0]
    }
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	370c      	adds	r7, #12
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d82:	4770      	bx	lr
 8012d84:	08026d04 	.word	0x08026d04

08012d88 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
    }
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f7ff ffe9 	bl	8012d68 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012d96:	210c      	movs	r1, #12
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f011 f83a 	bl	8023e12 <_ZdlPvj>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	4618      	mov	r0, r3
 8012da2:	3708      	adds	r7, #8
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012da8:	b480      	push	{r7}
 8012daa:	b083      	sub	sp, #12
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8012db2:	4a09      	ldr	r2, [pc, #36]	; (8012dd8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	601a      	str	r2, [r3, #0]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	683a      	ldr	r2, [r7, #0]
 8012dbc:	605a      	str	r2, [r3, #4]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	721a      	strb	r2, [r3, #8]
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	725a      	strb	r2, [r3, #9]
    {
    }
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	4618      	mov	r0, r3
 8012dce:	370c      	adds	r7, #12
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr
 8012dd8:	08026d04 	.word	0x08026d04

08012ddc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b082      	sub	sp, #8
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	685a      	ldr	r2, [r3, #4]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	3314      	adds	r3, #20
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	4610      	mov	r0, r2
 8012df4:	4798      	blx	r3
    }
 8012df6:	bf00      	nop
 8012df8:	3708      	adds	r7, #8
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}

08012dfe <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b082      	sub	sp, #8
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8012e06:	687a      	ldr	r2, [r7, #4]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	3328      	adds	r3, #40	; 0x28
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4610      	mov	r0, r2
 8012e12:	4798      	blx	r3
    }
 8012e14:	bf00      	nop
 8012e16:	3708      	adds	r7, #8
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}

08012e1c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b085      	sub	sp, #20
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	60f8      	str	r0, [r7, #12]
 8012e24:	60b9      	str	r1, [r7, #8]
 8012e26:	607a      	str	r2, [r7, #4]
 8012e28:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8012e34:	68ba      	ldr	r2, [r7, #8]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	430a      	orrs	r2, r1
 8012e3c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e44:	f023 0107 	bic.w	r1, r3, #7
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	430a      	orrs	r2, r1
 8012e50:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012e58:	4b06      	ldr	r3, [pc, #24]	; (8012e74 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8012e5a:	4013      	ands	r3, r2
 8012e5c:	6839      	ldr	r1, [r7, #0]
 8012e5e:	68fa      	ldr	r2, [r7, #12]
 8012e60:	6812      	ldr	r2, [r2, #0]
 8012e62:	430b      	orrs	r3, r1
 8012e64:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8012e66:	2300      	movs	r3, #0
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3714      	adds	r7, #20
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr
 8012e74:	ffffc000 	.word	0xffffc000

08012e78 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8012e80:	f7fc f8ce 	bl	800f020 <_ZN8touchgfx3HAL11getInstanceEv>
 8012e84:	4603      	mov	r3, r0
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ff ffa8 	bl	8012ddc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8012e8c:	bf00      	nop
 8012e8e:	3708      	adds	r7, #8
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
    assert(0);
 8012e9c:	4b02      	ldr	r3, [pc, #8]	; (8012ea8 <DMA2D_XferErrorCallback+0x14>)
 8012e9e:	4a03      	ldr	r2, [pc, #12]	; (8012eac <DMA2D_XferErrorCallback+0x18>)
 8012ea0:	213e      	movs	r1, #62	; 0x3e
 8012ea2:	4803      	ldr	r0, [pc, #12]	; (8012eb0 <DMA2D_XferErrorCallback+0x1c>)
 8012ea4:	f010 ffe0 	bl	8023e68 <__assert_func>
 8012ea8:	080254d0 	.word	0x080254d0
 8012eac:	08025ce4 	.word	0x08025ce4
 8012eb0:	080254d4 	.word	0x080254d4

08012eb4 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	3318      	adds	r3, #24
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7ff feef 	bl	8012ca4 <_ZN8touchgfx9colortypeC1Ev>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	3708      	adds	r7, #8
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}

08012ed0 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8012ed0:	b5b0      	push	{r4, r5, r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012ed8:	687a      	ldr	r2, [r7, #4]
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	330c      	adds	r3, #12
 8012ede:	4619      	mov	r1, r3
 8012ee0:	4610      	mov	r0, r2
 8012ee2:	f7ff ff61 	bl	8012da8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012ee6:	4a0e      	ldr	r2, [pc, #56]	; (8012f20 <_ZN10STM32F7DMAC1Ev+0x50>)
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	601a      	str	r2, [r3, #0]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f103 000c 	add.w	r0, r3, #12
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	3320      	adds	r3, #32
 8012ef6:	2260      	movs	r2, #96	; 0x60
 8012ef8:	4619      	mov	r1, r3
 8012efa:	f002 fe0b 	bl	8015b14 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	3320      	adds	r3, #32
 8012f02:	245f      	movs	r4, #95	; 0x5f
 8012f04:	461d      	mov	r5, r3
 8012f06:	2c00      	cmp	r4, #0
 8012f08:	db05      	blt.n	8012f16 <_ZN10STM32F7DMAC1Ev+0x46>
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	f7ff ffd2 	bl	8012eb4 <_ZN8touchgfx6BlitOpC1Ev>
 8012f10:	3520      	adds	r5, #32
 8012f12:	3c01      	subs	r4, #1
 8012f14:	e7f7      	b.n	8012f06 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3708      	adds	r7, #8
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8012f20:	08025c78 	.word	0x08025c78

08012f24 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	4a0b      	ldr	r2, [pc, #44]	; (8012f5c <_ZN10STM32F7DMAD1Ev+0x38>)
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8012f32:	480b      	ldr	r0, [pc, #44]	; (8012f60 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8012f34:	f7f1 fc50 	bl	80047d8 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012f38:	205a      	movs	r0, #90	; 0x5a
 8012f3a:	f7ff fe8f 	bl	8012c5c <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	330c      	adds	r3, #12
 8012f42:	4618      	mov	r0, r3
 8012f44:	f000 faa0 	bl	8013488 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7ff ff0c 	bl	8012d68 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	4618      	mov	r0, r3
 8012f54:	3708      	adds	r7, #8
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	08025c78 	.word	0x08025c78
 8012f60:	2000c4ec 	.word	0x2000c4ec

08012f64 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b082      	sub	sp, #8
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
}
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7ff ffd9 	bl	8012f24 <_ZN10STM32F7DMAD1Ev>
 8012f72:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f010 ff4b 	bl	8023e12 <_ZdlPvj>
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3708      	adds	r7, #8
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}
	...

08012f88 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b082      	sub	sp, #8
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8012f90:	4b09      	ldr	r3, [pc, #36]	; (8012fb8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012f92:	4a0a      	ldr	r2, [pc, #40]	; (8012fbc <_ZN10STM32F7DMA10initializeEv+0x34>)
 8012f94:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8012f96:	4808      	ldr	r0, [pc, #32]	; (8012fb8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012f98:	f7f1 fbd4 	bl	8004744 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8012f9c:	4b06      	ldr	r3, [pc, #24]	; (8012fb8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012f9e:	4a08      	ldr	r2, [pc, #32]	; (8012fc0 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8012fa0:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8012fa2:	4b05      	ldr	r3, [pc, #20]	; (8012fb8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012fa4:	4a07      	ldr	r2, [pc, #28]	; (8012fc4 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8012fa6:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8012fa8:	205a      	movs	r0, #90	; 0x5a
 8012faa:	f7ff fe37 	bl	8012c1c <__NVIC_EnableIRQ>
}
 8012fae:	bf00      	nop
 8012fb0:	3708      	adds	r7, #8
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	2000c4ec 	.word	0x2000c4ec
 8012fbc:	4002b000 	.word	0x4002b000
 8012fc0:	08012e79 	.word	0x08012e79
 8012fc4:	08012e95 	.word	0x08012e95

08012fc8 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8012fc8:	b480      	push	{r7}
 8012fca:	b083      	sub	sp, #12
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8012fd0:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	370c      	adds	r7, #12
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fde:	4770      	bx	lr

08012fe0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012fe0:	b590      	push	{r4, r7, lr}
 8012fe2:	b08d      	sub	sp, #52	; 0x34
 8012fe4:	af02      	add	r7, sp, #8
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8012fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012fee:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8012ff8:	2b20      	cmp	r3, #32
 8012ffa:	d007      	beq.n	801300c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2b40      	cmp	r3, #64	; 0x40
 8013002:	d003      	beq.n	801300c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	2b04      	cmp	r3, #4
 801300a:	d101      	bne.n	8013010 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 801300c:	2301      	movs	r3, #1
 801300e:	e000      	b.n	8013012 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8013010:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013012:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8013018:	2b80      	cmp	r3, #128	; 0x80
 801301a:	d004      	beq.n	8013026 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013024:	d101      	bne.n	801302a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8013026:	2301      	movs	r3, #1
 8013028:	e000      	b.n	801302c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 801302a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801302c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801302e:	f7fc f803 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8013032:	4602      	mov	r2, r0
 8013034:	6813      	ldr	r3, [r2, #0]
 8013036:	3320      	adds	r3, #32
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	4610      	mov	r0, r2
 801303c:	4798      	blx	r3
 801303e:	4603      	mov	r3, r0
 8013040:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	2b40      	cmp	r3, #64	; 0x40
 8013048:	d01d      	beq.n	8013086 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801304a:	2b40      	cmp	r3, #64	; 0x40
 801304c:	d804      	bhi.n	8013058 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801304e:	2b04      	cmp	r3, #4
 8013050:	d00e      	beq.n	8013070 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8013052:	2b20      	cmp	r3, #32
 8013054:	d017      	beq.n	8013086 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013056:	e019      	b.n	801308c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8013058:	2b80      	cmp	r3, #128	; 0x80
 801305a:	d003      	beq.n	8013064 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 801305c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013060:	d003      	beq.n	801306a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8013062:	e013      	b.n	801308c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8013064:	230a      	movs	r3, #10
 8013066:	623b      	str	r3, [r7, #32]
        break;
 8013068:	e01a      	b.n	80130a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 801306a:	2309      	movs	r3, #9
 801306c:	623b      	str	r3, [r7, #32]
        break;
 801306e:	e017      	b.n	80130a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013074:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013076:	7f7b      	ldrb	r3, [r7, #29]
 8013078:	2b10      	cmp	r3, #16
 801307a:	d101      	bne.n	8013080 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 801307c:	2302      	movs	r3, #2
 801307e:	e000      	b.n	8013082 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8013080:	2301      	movs	r3, #1
 8013082:	623b      	str	r3, [r7, #32]
        break;
 8013084:	e00c      	b.n	80130a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8013086:	2300      	movs	r3, #0
 8013088:	623b      	str	r3, [r7, #32]
        break;
 801308a:	e009      	b.n	80130a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 801308c:	2300      	movs	r3, #0
 801308e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013090:	7f7b      	ldrb	r3, [r7, #29]
 8013092:	2b10      	cmp	r3, #16
 8013094:	d101      	bne.n	801309a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8013096:	2302      	movs	r3, #2
 8013098:	e000      	b.n	801309c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 801309a:	2301      	movs	r3, #1
 801309c:	623b      	str	r3, [r7, #32]
        break;
 801309e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80130a0:	4a76      	ldr	r2, [pc, #472]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80130a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a4:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80130a6:	7f7b      	ldrb	r3, [r7, #29]
 80130a8:	2b10      	cmp	r3, #16
 80130aa:	d101      	bne.n	80130b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80130ac:	2302      	movs	r3, #2
 80130ae:	e000      	b.n	80130b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80130b0:	2301      	movs	r3, #1
 80130b2:	4a72      	ldr	r2, [pc, #456]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80130b4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	8adb      	ldrh	r3, [r3, #22]
 80130ba:	461a      	mov	r2, r3
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	8a1b      	ldrh	r3, [r3, #16]
 80130c0:	1ad3      	subs	r3, r2, r3
 80130c2:	461a      	mov	r2, r3
 80130c4:	4b6d      	ldr	r3, [pc, #436]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80130c6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80130c8:	7f7b      	ldrb	r3, [r7, #29]
 80130ca:	2b10      	cmp	r3, #16
 80130cc:	d101      	bne.n	80130d2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80130ce:	2202      	movs	r2, #2
 80130d0:	e000      	b.n	80130d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80130d2:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	8adb      	ldrh	r3, [r3, #22]
 80130d8:	4619      	mov	r1, r3
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	8a1b      	ldrh	r3, [r3, #16]
 80130de:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80130e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130e2:	4866      	ldr	r0, [pc, #408]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80130e4:	f7ff fe9a 	bl	8012e1c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80130e8:	4a64      	ldr	r2, [pc, #400]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80130ea:	6a3b      	ldr	r3, [r7, #32]
 80130ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	8a9b      	ldrh	r3, [r3, #20]
 80130f2:	461a      	mov	r2, r3
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	8a1b      	ldrh	r3, [r3, #16]
 80130f8:	1ad3      	subs	r3, r2, r3
 80130fa:	461a      	mov	r2, r3
 80130fc:	4b5f      	ldr	r3, [pc, #380]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80130fe:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8013100:	7ffb      	ldrb	r3, [r7, #31]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d103      	bne.n	801310e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8013106:	7fbb      	ldrb	r3, [r7, #30]
 8013108:	2b00      	cmp	r3, #0
 801310a:	f000 8082 	beq.w	8013212 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	7f1b      	ldrb	r3, [r3, #28]
 8013112:	2bff      	cmp	r3, #255	; 0xff
 8013114:	d008      	beq.n	8013128 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8013116:	4b59      	ldr	r3, [pc, #356]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013118:	2202      	movs	r2, #2
 801311a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	7f1b      	ldrb	r3, [r3, #28]
 8013120:	461a      	mov	r2, r3
 8013122:	4b56      	ldr	r3, [pc, #344]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013124:	635a      	str	r2, [r3, #52]	; 0x34
 8013126:	e002      	b.n	801312e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8013128:	4b54      	ldr	r3, [pc, #336]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801312a:	2200      	movs	r2, #0
 801312c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801312e:	7fbb      	ldrb	r3, [r7, #30]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d059      	beq.n	80131e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8013134:	7f7b      	ldrb	r3, [r7, #29]
 8013136:	2b10      	cmp	r3, #16
 8013138:	d14a      	bne.n	80131d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	3318      	adds	r3, #24
 801313e:	4618      	mov	r0, r3
 8013140:	f7ff fdca 	bl	8012cd8 <_ZNK8touchgfx9colortypecvtEv>
 8013144:	4603      	mov	r3, r0
 8013146:	12db      	asrs	r3, r3, #11
 8013148:	f003 021f 	and.w	r2, r3, #31
 801314c:	4613      	mov	r3, r2
 801314e:	021b      	lsls	r3, r3, #8
 8013150:	1a9b      	subs	r3, r3, r2
 8013152:	4a4b      	ldr	r2, [pc, #300]	; (8013280 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013154:	fb82 1203 	smull	r1, r2, r2, r3
 8013158:	441a      	add	r2, r3
 801315a:	1112      	asrs	r2, r2, #4
 801315c:	17db      	asrs	r3, r3, #31
 801315e:	1ad3      	subs	r3, r2, r3
 8013160:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	3318      	adds	r3, #24
 8013166:	4618      	mov	r0, r3
 8013168:	f7ff fdb6 	bl	8012cd8 <_ZNK8touchgfx9colortypecvtEv>
 801316c:	4603      	mov	r3, r0
 801316e:	115b      	asrs	r3, r3, #5
 8013170:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013174:	4613      	mov	r3, r2
 8013176:	021b      	lsls	r3, r3, #8
 8013178:	1a9b      	subs	r3, r3, r2
 801317a:	4a42      	ldr	r2, [pc, #264]	; (8013284 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801317c:	fb82 1203 	smull	r1, r2, r2, r3
 8013180:	441a      	add	r2, r3
 8013182:	1152      	asrs	r2, r2, #5
 8013184:	17db      	asrs	r3, r3, #31
 8013186:	1ad3      	subs	r3, r2, r3
 8013188:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	3318      	adds	r3, #24
 801318e:	4618      	mov	r0, r3
 8013190:	f7ff fda2 	bl	8012cd8 <_ZNK8touchgfx9colortypecvtEv>
 8013194:	4603      	mov	r3, r0
 8013196:	f003 021f 	and.w	r2, r3, #31
 801319a:	4613      	mov	r3, r2
 801319c:	021b      	lsls	r3, r3, #8
 801319e:	1a9b      	subs	r3, r3, r2
 80131a0:	4a37      	ldr	r2, [pc, #220]	; (8013280 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80131a2:	fb82 1203 	smull	r1, r2, r2, r3
 80131a6:	441a      	add	r2, r3
 80131a8:	1112      	asrs	r2, r2, #4
 80131aa:	17db      	asrs	r3, r3, #31
 80131ac:	1ad3      	subs	r3, r2, r3
 80131ae:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	7f1b      	ldrb	r3, [r3, #28]
 80131b4:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	061a      	lsls	r2, r3, #24
 80131ba:	69bb      	ldr	r3, [r7, #24]
 80131bc:	041b      	lsls	r3, r3, #16
 80131be:	431a      	orrs	r2, r3
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	021b      	lsls	r3, r3, #8
 80131c4:	431a      	orrs	r2, r3
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	4313      	orrs	r3, r2
 80131ca:	4a2c      	ldr	r2, [pc, #176]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80131cc:	6353      	str	r3, [r2, #52]	; 0x34
 80131ce:	e00b      	b.n	80131e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	3318      	adds	r3, #24
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7ff fd73 	bl	8012cc0 <_ZNK8touchgfx9colortype10getColor32Ev>
 80131da:	4602      	mov	r2, r0
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	7f1b      	ldrb	r3, [r3, #28]
 80131e0:	061b      	lsls	r3, r3, #24
 80131e2:	4313      	orrs	r3, r2
 80131e4:	4a25      	ldr	r2, [pc, #148]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80131e6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	8adb      	ldrh	r3, [r3, #22]
 80131ec:	461a      	mov	r2, r3
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	8a1b      	ldrh	r3, [r3, #16]
 80131f2:	1ad3      	subs	r3, r2, r3
 80131f4:	461a      	mov	r2, r3
 80131f6:	4b21      	ldr	r3, [pc, #132]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80131f8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80131fa:	7f7b      	ldrb	r3, [r7, #29]
 80131fc:	2b10      	cmp	r3, #16
 80131fe:	d101      	bne.n	8013204 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8013200:	2302      	movs	r3, #2
 8013202:	e000      	b.n	8013206 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8013204:	2301      	movs	r3, #1
 8013206:	4a1d      	ldr	r2, [pc, #116]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013208:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801320a:	2100      	movs	r1, #0
 801320c:	481b      	ldr	r0, [pc, #108]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801320e:	f7f1 fd63 	bl	8004cd8 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8013212:	2101      	movs	r1, #1
 8013214:	4819      	ldr	r0, [pc, #100]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013216:	f7f1 fd5f 	bl	8004cd8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 801321a:	7ffb      	ldrb	r3, [r7, #31]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d102      	bne.n	8013226 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8013220:	7fbb      	ldrb	r3, [r7, #30]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d015      	beq.n	8013252 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801322a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013230:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013236:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801323c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013242:	9301      	str	r3, [sp, #4]
 8013244:	9200      	str	r2, [sp, #0]
 8013246:	4623      	mov	r3, r4
 8013248:	4602      	mov	r2, r0
 801324a:	480c      	ldr	r0, [pc, #48]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801324c:	f7f1 fb67 	bl	800491e <HAL_DMA2D_BlendingStart_IT>
 8013250:	e00f      	b.n	8013272 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013256:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801325c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013262:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8013268:	9300      	str	r3, [sp, #0]
 801326a:	4603      	mov	r3, r0
 801326c:	4803      	ldr	r0, [pc, #12]	; (801327c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801326e:	f7f1 fb23 	bl	80048b8 <HAL_DMA2D_Start_IT>
    }
}
 8013272:	bf00      	nop
 8013274:	372c      	adds	r7, #44	; 0x2c
 8013276:	46bd      	mov	sp, r7
 8013278:	bd90      	pop	{r4, r7, pc}
 801327a:	bf00      	nop
 801327c:	2000c4ec 	.word	0x2000c4ec
 8013280:	84210843 	.word	0x84210843
 8013284:	82082083 	.word	0x82082083

08013288 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8013288:	b590      	push	{r4, r7, lr}
 801328a:	b08d      	sub	sp, #52	; 0x34
 801328c:	af02      	add	r7, sp, #8
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013292:	f7fb fed1 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8013296:	4602      	mov	r2, r0
 8013298:	6813      	ldr	r3, [r2, #0]
 801329a:	3320      	adds	r3, #32
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	4610      	mov	r0, r2
 80132a0:	4798      	blx	r3
 80132a2:	4603      	mov	r3, r0
 80132a4:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80132a6:	7ffb      	ldrb	r3, [r7, #31]
 80132a8:	2b10      	cmp	r3, #16
 80132aa:	d101      	bne.n	80132b0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 80132ac:	2302      	movs	r3, #2
 80132ae:	e000      	b.n	80132b2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 80132b0:	2301      	movs	r3, #1
 80132b2:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 80132b4:	2300      	movs	r3, #0
 80132b6:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 80132b8:	7ffb      	ldrb	r3, [r7, #31]
 80132ba:	2b10      	cmp	r3, #16
 80132bc:	d149      	bne.n	8013352 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	3318      	adds	r3, #24
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7ff fd08 	bl	8012cd8 <_ZNK8touchgfx9colortypecvtEv>
 80132c8:	4603      	mov	r3, r0
 80132ca:	12db      	asrs	r3, r3, #11
 80132cc:	f003 021f 	and.w	r2, r3, #31
 80132d0:	4613      	mov	r3, r2
 80132d2:	021b      	lsls	r3, r3, #8
 80132d4:	1a9b      	subs	r3, r3, r2
 80132d6:	4a69      	ldr	r2, [pc, #420]	; (801347c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80132d8:	fb82 1203 	smull	r1, r2, r2, r3
 80132dc:	441a      	add	r2, r3
 80132de:	1112      	asrs	r2, r2, #4
 80132e0:	17db      	asrs	r3, r3, #31
 80132e2:	1ad3      	subs	r3, r2, r3
 80132e4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	3318      	adds	r3, #24
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7ff fcf4 	bl	8012cd8 <_ZNK8touchgfx9colortypecvtEv>
 80132f0:	4603      	mov	r3, r0
 80132f2:	115b      	asrs	r3, r3, #5
 80132f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80132f8:	4613      	mov	r3, r2
 80132fa:	021b      	lsls	r3, r3, #8
 80132fc:	1a9b      	subs	r3, r3, r2
 80132fe:	4a60      	ldr	r2, [pc, #384]	; (8013480 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8013300:	fb82 1203 	smull	r1, r2, r2, r3
 8013304:	441a      	add	r2, r3
 8013306:	1152      	asrs	r2, r2, #5
 8013308:	17db      	asrs	r3, r3, #31
 801330a:	1ad3      	subs	r3, r2, r3
 801330c:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	3318      	adds	r3, #24
 8013312:	4618      	mov	r0, r3
 8013314:	f7ff fce0 	bl	8012cd8 <_ZNK8touchgfx9colortypecvtEv>
 8013318:	4603      	mov	r3, r0
 801331a:	f003 021f 	and.w	r2, r3, #31
 801331e:	4613      	mov	r3, r2
 8013320:	021b      	lsls	r3, r3, #8
 8013322:	1a9b      	subs	r3, r3, r2
 8013324:	4a55      	ldr	r2, [pc, #340]	; (801347c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013326:	fb82 1203 	smull	r1, r2, r2, r3
 801332a:	441a      	add	r2, r3
 801332c:	1112      	asrs	r2, r2, #4
 801332e:	17db      	asrs	r3, r3, #31
 8013330:	1ad3      	subs	r3, r2, r3
 8013332:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	7f1b      	ldrb	r3, [r3, #28]
 8013338:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	061a      	lsls	r2, r3, #24
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	041b      	lsls	r3, r3, #16
 8013342:	431a      	orrs	r2, r3
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	021b      	lsls	r3, r3, #8
 8013348:	4313      	orrs	r3, r2
 801334a:	68fa      	ldr	r2, [r7, #12]
 801334c:	4313      	orrs	r3, r2
 801334e:	623b      	str	r3, [r7, #32]
 8013350:	e00b      	b.n	801336a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	7f1b      	ldrb	r3, [r3, #28]
 8013356:	061b      	lsls	r3, r3, #24
 8013358:	461c      	mov	r4, r3
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	3318      	adds	r3, #24
 801335e:	4618      	mov	r0, r3
 8013360:	f7ff fcae 	bl	8012cc0 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013364:	4603      	mov	r3, r0
 8013366:	4323      	orrs	r3, r4
 8013368:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	2b08      	cmp	r3, #8
 8013370:	d103      	bne.n	801337a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013378:	e003      	b.n	8013382 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801337a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801337e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013380:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013382:	4a40      	ldr	r2, [pc, #256]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013386:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013388:	7ffb      	ldrb	r3, [r7, #31]
 801338a:	2b10      	cmp	r3, #16
 801338c:	d101      	bne.n	8013392 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 801338e:	2302      	movs	r3, #2
 8013390:	e000      	b.n	8013394 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8013392:	2301      	movs	r3, #1
 8013394:	4a3b      	ldr	r2, [pc, #236]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013396:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	8adb      	ldrh	r3, [r3, #22]
 801339c:	461a      	mov	r2, r3
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	8a1b      	ldrh	r3, [r3, #16]
 80133a2:	1ad3      	subs	r3, r2, r3
 80133a4:	461a      	mov	r2, r3
 80133a6:	4b37      	ldr	r3, [pc, #220]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80133a8:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80133aa:	7ffb      	ldrb	r3, [r7, #31]
 80133ac:	2b10      	cmp	r3, #16
 80133ae:	d101      	bne.n	80133b4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80133b0:	2202      	movs	r2, #2
 80133b2:	e000      	b.n	80133b6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80133b4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	8adb      	ldrh	r3, [r3, #22]
 80133ba:	4619      	mov	r1, r3
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	8a1b      	ldrh	r3, [r3, #16]
 80133c0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80133c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133c4:	482f      	ldr	r0, [pc, #188]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80133c6:	f7ff fd29 	bl	8012e1c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80133ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80133d0:	d11e      	bne.n	8013410 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80133d2:	4b2c      	ldr	r3, [pc, #176]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80133d4:	2201      	movs	r2, #1
 80133d6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 80133d8:	4a2a      	ldr	r2, [pc, #168]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80133da:	6a3b      	ldr	r3, [r7, #32]
 80133dc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80133de:	4b29      	ldr	r3, [pc, #164]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80133e0:	2209      	movs	r2, #9
 80133e2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	8adb      	ldrh	r3, [r3, #22]
 80133e8:	461a      	mov	r2, r3
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	8a1b      	ldrh	r3, [r3, #16]
 80133ee:	1ad3      	subs	r3, r2, r3
 80133f0:	461a      	mov	r2, r3
 80133f2:	4b24      	ldr	r3, [pc, #144]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80133f4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80133f6:	7ffb      	ldrb	r3, [r7, #31]
 80133f8:	2b10      	cmp	r3, #16
 80133fa:	d101      	bne.n	8013400 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 80133fc:	2302      	movs	r3, #2
 80133fe:	e000      	b.n	8013402 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8013400:	2301      	movs	r3, #1
 8013402:	4a20      	ldr	r2, [pc, #128]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013404:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013406:	2100      	movs	r1, #0
 8013408:	481e      	ldr	r0, [pc, #120]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801340a:	f7f1 fc65 	bl	8004cd8 <HAL_DMA2D_ConfigLayer>
 801340e:	e005      	b.n	801341c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013410:	4a1c      	ldr	r2, [pc, #112]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8013416:	4b1b      	ldr	r3, [pc, #108]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013418:	2200      	movs	r2, #0
 801341a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801341c:	2101      	movs	r1, #1
 801341e:	4819      	ldr	r0, [pc, #100]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013420:	f7f1 fc5a 	bl	8004cd8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8013424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801342a:	d115      	bne.n	8013458 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013430:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013436:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801343c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013442:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	9200      	str	r2, [sp, #0]
 801344c:	4623      	mov	r3, r4
 801344e:	4602      	mov	r2, r0
 8013450:	480c      	ldr	r0, [pc, #48]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013452:	f7f1 fa64 	bl	800491e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8013456:	e00d      	b.n	8013474 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	68db      	ldr	r3, [r3, #12]
 801345c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013462:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013468:	9300      	str	r3, [sp, #0]
 801346a:	460b      	mov	r3, r1
 801346c:	6a39      	ldr	r1, [r7, #32]
 801346e:	4805      	ldr	r0, [pc, #20]	; (8013484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013470:	f7f1 fa22 	bl	80048b8 <HAL_DMA2D_Start_IT>
}
 8013474:	bf00      	nop
 8013476:	372c      	adds	r7, #44	; 0x2c
 8013478:	46bd      	mov	sp, r7
 801347a:	bd90      	pop	{r4, r7, pc}
 801347c:	84210843 	.word	0x84210843
 8013480:	82082083 	.word	0x82082083
 8013484:	2000c4ec 	.word	0x2000c4ec

08013488 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013488:	b580      	push	{r7, lr}
 801348a:	b082      	sub	sp, #8
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	4a05      	ldr	r2, [pc, #20]	; (80134a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	601a      	str	r2, [r3, #0]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	4618      	mov	r0, r3
 801349a:	f7ff fc2b 	bl	8012cf4 <_ZN8touchgfx9DMA_QueueD1Ev>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	4618      	mov	r0, r3
 80134a2:	3708      	adds	r7, #8
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	08026d54 	.word	0x08026d54

080134ac <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b082      	sub	sp, #8
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f7ff ffe7 	bl	8013488 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80134ba:	2114      	movs	r1, #20
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f010 fca8 	bl	8023e12 <_ZdlPvj>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	4618      	mov	r0, r3
 80134c6:	3708      	adds	r7, #8
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80134cc:	b480      	push	{r7}
 80134ce:	b083      	sub	sp, #12
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
        texts = t;
 80134d4:	4a04      	ldr	r2, [pc, #16]	; (80134e8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	6013      	str	r3, [r2, #0]
    }
 80134da:	bf00      	nop
 80134dc:	370c      	adds	r7, #12
 80134de:	46bd      	mov	sp, r7
 80134e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e4:	4770      	bx	lr
 80134e6:	bf00      	nop
 80134e8:	2000bd04 	.word	0x2000bd04

080134ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80134ec:	b480      	push	{r7}
 80134ee:	b085      	sub	sp, #20
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	60f8      	str	r0, [r7, #12]
 80134f4:	60b9      	str	r1, [r7, #8]
 80134f6:	607a      	str	r2, [r7, #4]
 80134f8:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80134fa:	4a0b      	ldr	r2, [pc, #44]	; (8013528 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	601a      	str	r2, [r3, #0]
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	68ba      	ldr	r2, [r7, #8]
 8013504:	605a      	str	r2, [r3, #4]
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	687a      	ldr	r2, [r7, #4]
 801350a:	609a      	str	r2, [r3, #8]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	683a      	ldr	r2, [r7, #0]
 8013510:	60da      	str	r2, [r3, #12]
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	69ba      	ldr	r2, [r7, #24]
 8013516:	611a      	str	r2, [r3, #16]
    {
    }
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	4618      	mov	r0, r3
 801351c:	3714      	adds	r7, #20
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr
 8013526:	bf00      	nop
 8013528:	08025de4 	.word	0x08025de4

0801352c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801352c:	b480      	push	{r7}
 801352e:	b083      	sub	sp, #12
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
    {
 8013534:	4a04      	ldr	r2, [pc, #16]	; (8013548 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	601a      	str	r2, [r3, #0]
    }
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	4618      	mov	r0, r3
 801353e:	370c      	adds	r7, #12
 8013540:	46bd      	mov	sp, r7
 8013542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013546:	4770      	bx	lr
 8013548:	08025de4 	.word	0x08025de4

0801354c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
    }
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f7ff ffe9 	bl	801352c <_ZN8touchgfx7MVPHeapD1Ev>
 801355a:	2114      	movs	r1, #20
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f010 fc58 	bl	8023e12 <_ZdlPvj>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	4618      	mov	r0, r3
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
    {
 8013574:	4a04      	ldr	r2, [pc, #16]	; (8013588 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	601a      	str	r2, [r3, #0]
    }
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	4618      	mov	r0, r3
 801357e:	370c      	adds	r7, #12
 8013580:	46bd      	mov	sp, r7
 8013582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013586:	4770      	bx	lr
 8013588:	08027638 	.word	0x08027638

0801358c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801358c:	b580      	push	{r7, lr}
 801358e:	b082      	sub	sp, #8
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
    }
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7ff ffe9 	bl	801356c <_ZN8touchgfx3LCDD1Ev>
 801359a:	2108      	movs	r1, #8
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f010 fc38 	bl	8023e12 <_ZdlPvj>
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	4618      	mov	r0, r3
 80135a6:	3708      	adds	r7, #8
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80135ac:	b480      	push	{r7}
 80135ae:	b083      	sub	sp, #12
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2200      	movs	r2, #0
 80135b8:	801a      	strh	r2, [r3, #0]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	2200      	movs	r2, #0
 80135be:	805a      	strh	r2, [r3, #2]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2200      	movs	r2, #0
 80135c4:	809a      	strh	r2, [r3, #4]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2200      	movs	r2, #0
 80135ca:	80da      	strh	r2, [r3, #6]
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2200      	movs	r2, #0
 80135d0:	811a      	strh	r2, [r3, #8]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	2200      	movs	r2, #0
 80135d6:	815a      	strh	r2, [r3, #10]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2200      	movs	r2, #0
 80135dc:	819a      	strh	r2, [r3, #12]
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2200      	movs	r2, #0
 80135e2:	739a      	strb	r2, [r3, #14]
        {
        }
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	4618      	mov	r0, r3
 80135e8:	370c      	adds	r7, #12
 80135ea:	46bd      	mov	sp, r7
 80135ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f0:	4770      	bx	lr

080135f2 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80135f2:	b580      	push	{r7, lr}
 80135f4:	b082      	sub	sp, #8
 80135f6:	af00      	add	r7, sp, #0
 80135f8:	6078      	str	r0, [r7, #4]
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7ff ffd5 	bl	80135ac <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2200      	movs	r2, #0
 8013606:	611a      	str	r2, [r3, #16]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2200      	movs	r2, #0
 801360c:	829a      	strh	r2, [r3, #20]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	4618      	mov	r0, r3
 8013612:	3708      	adds	r7, #8
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}

08013618 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8013618:	b580      	push	{r7, lr}
 801361a:	b084      	sub	sp, #16
 801361c:	af00      	add	r7, sp, #0
 801361e:	60f8      	str	r0, [r7, #12]
 8013620:	60b9      	str	r1, [r7, #8]
 8013622:	607a      	str	r2, [r7, #4]
 8013624:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8013626:	4a44      	ldr	r2, [pc, #272]	; (8013738 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	601a      	str	r2, [r3, #0]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	68ba      	ldr	r2, [r7, #8]
 8013630:	605a      	str	r2, [r3, #4]
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	609a      	str	r2, [r3, #8]
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	683a      	ldr	r2, [r7, #0]
 801363c:	60da      	str	r2, [r3, #12]
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2200      	movs	r2, #0
 8013642:	611a      	str	r2, [r3, #16]
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2200      	movs	r2, #0
 8013648:	615a      	str	r2, [r3, #20]
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2200      	movs	r2, #0
 801364e:	619a      	str	r2, [r3, #24]
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	331c      	adds	r3, #28
 8013654:	4618      	mov	r0, r3
 8013656:	f7ff ffcc 	bl	80135f2 <_ZN8touchgfx8GesturesC1Ev>
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	2200      	movs	r2, #0
 801365e:	639a      	str	r2, [r3, #56]	; 0x38
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2200      	movs	r2, #0
 8013664:	63da      	str	r2, [r3, #60]	; 0x3c
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	2200      	movs	r2, #0
 801366a:	641a      	str	r2, [r3, #64]	; 0x40
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	2200      	movs	r2, #0
 8013670:	645a      	str	r2, [r3, #68]	; 0x44
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	2200      	movs	r2, #0
 8013676:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2201      	movs	r2, #1
 801367e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	2201      	movs	r2, #1
 8013686:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	2200      	movs	r2, #0
 801368e:	64da      	str	r2, [r3, #76]	; 0x4c
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	3350      	adds	r3, #80	; 0x50
 8013694:	4618      	mov	r0, r3
 8013696:	f7fc f8fe 	bl	800f896 <_ZN8touchgfx4RectC1Ev>
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	2201      	movs	r2, #1
 801369e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2200      	movs	r2, #0
 80136a6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	2200      	movs	r2, #0
 80136ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	2201      	movs	r2, #1
 80136b6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	2200      	movs	r2, #0
 80136be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	2200      	movs	r2, #0
 80136c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	2200      	movs	r2, #0
 80136ce:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2200      	movs	r2, #0
 80136d6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	2200      	movs	r2, #0
 80136de:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	2200      	movs	r2, #0
 80136e6:	671a      	str	r2, [r3, #112]	; 0x70
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2200      	movs	r2, #0
 80136ec:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 80136f0:	4a12      	ldr	r2, [pc, #72]	; (801373c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80136f6:	4a12      	ldr	r2, [pc, #72]	; (8013740 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80136f8:	8b3b      	ldrh	r3, [r7, #24]
 80136fa:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80136fc:	4a11      	ldr	r2, [pc, #68]	; (8013744 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80136fe:	8bbb      	ldrh	r3, [r7, #28]
 8013700:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8013702:	4b11      	ldr	r3, [pc, #68]	; (8013748 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8013704:	2200      	movs	r2, #0
 8013706:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013708:	4b0d      	ldr	r3, [pc, #52]	; (8013740 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801370a:	881a      	ldrh	r2, [r3, #0]
 801370c:	4b0f      	ldr	r3, [pc, #60]	; (801374c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 801370e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013710:	4b0c      	ldr	r3, [pc, #48]	; (8013744 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8013712:	881a      	ldrh	r2, [r3, #0]
 8013714:	4b0e      	ldr	r3, [pc, #56]	; (8013750 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8013716:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013718:	8b3a      	ldrh	r2, [r7, #24]
 801371a:	8bbb      	ldrh	r3, [r7, #28]
 801371c:	429a      	cmp	r2, r3
 801371e:	d301      	bcc.n	8013724 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8013720:	2200      	movs	r2, #0
 8013722:	e000      	b.n	8013726 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8013724:	2201      	movs	r2, #1
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	4618      	mov	r0, r3
 8013730:	3710      	adds	r7, #16
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
 8013736:	bf00      	nop
 8013738:	080268c0 	.word	0x080268c0
 801373c:	2000bc68 	.word	0x2000bc68
 8013740:	2000bc5c 	.word	0x2000bc5c
 8013744:	2000bc5e 	.word	0x2000bc5e
 8013748:	2000bc60 	.word	0x2000bc60
 801374c:	2000bc62 	.word	0x2000bc62
 8013750:	2000bc64 	.word	0x2000bc64

08013754 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013754:	b580      	push	{r7, lr}
 8013756:	b082      	sub	sp, #8
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	4618      	mov	r0, r3
 8013762:	f7fb fe8d 	bl	800f480 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8013766:	bf00      	nop
 8013768:	3708      	adds	r7, #8
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
	...

08013770 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013770:	b580      	push	{r7, lr}
 8013772:	b086      	sub	sp, #24
 8013774:	af02      	add	r7, sp, #8
 8013776:	60f8      	str	r0, [r7, #12]
 8013778:	60b9      	str	r1, [r7, #8]
 801377a:	607a      	str	r2, [r7, #4]
 801377c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801377e:	68f8      	ldr	r0, [r7, #12]
 8013780:	69bb      	ldr	r3, [r7, #24]
 8013782:	9300      	str	r3, [sp, #0]
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	687a      	ldr	r2, [r7, #4]
 8013788:	68b9      	ldr	r1, [r7, #8]
 801378a:	f7ff feaf 	bl	80134ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801378e:	4a04      	ldr	r2, [pc, #16]	; (80137a0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	601a      	str	r2, [r3, #0]
    {

    }
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	4618      	mov	r0, r3
 8013798:	3710      	adds	r7, #16
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}
 801379e:	bf00      	nop
 80137a0:	08025dd0 	.word	0x08025dd0

080137a4 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80137a4:	b580      	push	{r7, lr}
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	4801      	ldr	r0, [pc, #4]	; (80137b0 <__tcf_0+0xc>)
 80137aa:	f000 f9dd 	bl	8013b68 <_ZN12FrontendHeapD1Ev>
 80137ae:	bd80      	pop	{r7, pc}
 80137b0:	20008694 	.word	0x20008694

080137b4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80137b4:	b580      	push	{r7, lr}
 80137b6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80137b8:	4b08      	ldr	r3, [pc, #32]	; (80137dc <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	f003 0301 	and.w	r3, r3, #1
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d108      	bne.n	80137d6 <_ZN12FrontendHeap11getInstanceEv+0x22>
 80137c4:	4806      	ldr	r0, [pc, #24]	; (80137e0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80137c6:	f000 f831 	bl	801382c <_ZN12FrontendHeapC1Ev>
 80137ca:	4b04      	ldr	r3, [pc, #16]	; (80137dc <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80137cc:	2201      	movs	r2, #1
 80137ce:	601a      	str	r2, [r3, #0]
 80137d0:	4804      	ldr	r0, [pc, #16]	; (80137e4 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80137d2:	f010 fb67 	bl	8023ea4 <atexit>
        return instance;
 80137d6:	4b02      	ldr	r3, [pc, #8]	; (80137e0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80137d8:	4618      	mov	r0, r3
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	2000af5c 	.word	0x2000af5c
 80137e0:	20008694 	.word	0x20008694
 80137e4:	080137a5 	.word	0x080137a5

080137e8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b082      	sub	sp, #8
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	4a05      	ldr	r2, [pc, #20]	; (8013808 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	601a      	str	r2, [r3, #0]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7ff fe97 	bl	801352c <_ZN8touchgfx7MVPHeapD1Ev>
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	4618      	mov	r0, r3
 8013802:	3708      	adds	r7, #8
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}
 8013808:	08025dd0 	.word	0x08025dd0

0801380c <_ZN16FrontendHeapBaseD0Ev>:
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f7ff ffe7 	bl	80137e8 <_ZN16FrontendHeapBaseD1Ev>
 801381a:	2114      	movs	r1, #20
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f010 faf8 	bl	8023e12 <_ZdlPvj>
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	4618      	mov	r0, r3
 8013826:	3708      	adds	r7, #8
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}

0801382c <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801382c:	b5b0      	push	{r4, r5, r7, lr}
 801382e:	b084      	sub	sp, #16
 8013830:	af02      	add	r7, sp, #8
 8013832:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f103 0414 	add.w	r4, r3, #20
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f242 7260 	movw	r2, #10080	; 0x2760
 8013848:	441a      	add	r2, r3
 801384a:	6879      	ldr	r1, [r7, #4]
 801384c:	f242 7374 	movw	r3, #10100	; 0x2774
 8013850:	440b      	add	r3, r1
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	4613      	mov	r3, r2
 8013856:	462a      	mov	r2, r5
 8013858:	4621      	mov	r1, r4
 801385a:	f7ff ff89 	bl	8013770 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801385e:	4a1a      	ldr	r2, [pc, #104]	; (80138c8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	601a      	str	r2, [r3, #0]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	3314      	adds	r3, #20
 8013868:	4618      	mov	r0, r3
 801386a:	f000 f8df 	bl	8013a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	332c      	adds	r3, #44	; 0x2c
 8013872:	4618      	mov	r0, r3
 8013874:	f000 f90e 	bl	8013a94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	f242 7360 	movw	r3, #10080	; 0x2760
 801387e:	4413      	add	r3, r2
 8013880:	4618      	mov	r0, r3
 8013882:	f000 f93d 	bl	8013b00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	f242 7374 	movw	r3, #10100	; 0x2774
 801388c:	4413      	add	r3, r2
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	f642 01c4 	movw	r1, #10436	; 0x28c4
 8013894:	4411      	add	r1, r2
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	4618      	mov	r0, r3
 801389a:	f7fe fb13 	bl	8011ec4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801389e:	687a      	ldr	r2, [r7, #4]
 80138a0:	f642 03c4 	movw	r3, #10436	; 0x28c4
 80138a4:	4413      	add	r3, r2
 80138a6:	4618      	mov	r0, r3
 80138a8:	f7fe fde0 	bl	801246c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	687a      	ldr	r2, [r7, #4]
 80138b0:	f242 7374 	movw	r3, #10100	; 0x2774
 80138b4:	4413      	add	r3, r2
 80138b6:	4619      	mov	r1, r3
 80138b8:	f7ff ff4c 	bl	8013754 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	4618      	mov	r0, r3
 80138c0:	3708      	adds	r7, #8
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bdb0      	pop	{r4, r5, r7, pc}
 80138c6:	bf00      	nop
 80138c8:	08025d20 	.word	0x08025d20

080138cc <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b082      	sub	sp, #8
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
    {
 80138d4:	4a05      	ldr	r2, [pc, #20]	; (80138ec <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	601a      	str	r2, [r3, #0]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	4618      	mov	r0, r3
 80138de:	f7ff fe45 	bl	801356c <_ZN8touchgfx3LCDD1Ev>
    }
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	4618      	mov	r0, r3
 80138e6:	3708      	adds	r7, #8
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	08028a14 	.word	0x08028a14

080138f0 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
    }
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f7ff ffe7 	bl	80138cc <_ZN8touchgfx8LCD24bppD1Ev>
 80138fe:	2158      	movs	r1, #88	; 0x58
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f010 fa86 	bl	8023e12 <_ZdlPvj>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	4618      	mov	r0, r3
 801390a:	3708      	adds	r7, #8
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8013910:	b580      	push	{r7, lr}
 8013912:	b086      	sub	sp, #24
 8013914:	af02      	add	r7, sp, #8
 8013916:	60f8      	str	r0, [r7, #12]
 8013918:	60b9      	str	r1, [r7, #8]
 801391a:	607a      	str	r2, [r7, #4]
 801391c:	603b      	str	r3, [r7, #0]
 801391e:	68f8      	ldr	r0, [r7, #12]
 8013920:	8bbb      	ldrh	r3, [r7, #28]
 8013922:	9301      	str	r3, [sp, #4]
 8013924:	8b3b      	ldrh	r3, [r7, #24]
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	687a      	ldr	r2, [r7, #4]
 801392c:	68b9      	ldr	r1, [r7, #8]
 801392e:	f7ff fe73 	bl	8013618 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8013932:	4a04      	ldr	r2, [pc, #16]	; (8013944 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	601a      	str	r2, [r3, #0]
    }
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	4618      	mov	r0, r3
 801393c:	3710      	adds	r7, #16
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}
 8013942:	bf00      	nop
 8013944:	08025df4 	.word	0x08025df4

08013948 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8013948:	b580      	push	{r7, lr}
 801394a:	b086      	sub	sp, #24
 801394c:	af02      	add	r7, sp, #8
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
 8013954:	603b      	str	r3, [r7, #0]
 8013956:	68f8      	ldr	r0, [r7, #12]
 8013958:	8bbb      	ldrh	r3, [r7, #28]
 801395a:	9301      	str	r3, [sp, #4]
 801395c:	8b3b      	ldrh	r3, [r7, #24]
 801395e:	9300      	str	r3, [sp, #0]
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	68b9      	ldr	r1, [r7, #8]
 8013966:	f7ff ffd3 	bl	8013910 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801396a:	4a04      	ldr	r2, [pc, #16]	; (801397c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	601a      	str	r2, [r3, #0]
    }
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	4618      	mov	r0, r3
 8013974:	3710      	adds	r7, #16
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	08025b20 	.word	0x08025b20

08013980 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013980:	b480      	push	{r7}
 8013982:	b083      	sub	sp, #12
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	4a04      	ldr	r2, [pc, #16]	; (801399c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	601a      	str	r2, [r3, #0]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	4618      	mov	r0, r3
 8013992:	370c      	adds	r7, #12
 8013994:	46bd      	mov	sp, r7
 8013996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399a:	4770      	bx	lr
 801399c:	08025b08 	.word	0x08025b08

080139a0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b082      	sub	sp, #8
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7ff ffe8 	bl	8013980 <_ZN8touchgfx15TouchControllerC1Ev>
 80139b0:	4a03      	ldr	r2, [pc, #12]	; (80139c0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	601a      	str	r2, [r3, #0]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	3708      	adds	r7, #8
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}
 80139c0:	08025af0 	.word	0x08025af0

080139c4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80139c4:	b590      	push	{r4, r7, lr}
 80139c6:	b085      	sub	sp, #20
 80139c8:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80139ca:	f7fe f957 	bl	8011c7c <_ZN14BitmapDatabase11getInstanceEv>
 80139ce:	4604      	mov	r4, r0
 80139d0:	f7fe f95e 	bl	8011c90 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80139d4:	4603      	mov	r3, r0
 80139d6:	4619      	mov	r1, r3
 80139d8:	2300      	movs	r3, #0
 80139da:	9300      	str	r3, [sp, #0]
 80139dc:	2300      	movs	r3, #0
 80139de:	2200      	movs	r2, #0
 80139e0:	4620      	mov	r0, r4
 80139e2:	f006 fcdb 	bl	801a39c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80139e6:	4809      	ldr	r0, [pc, #36]	; (8013a0c <touchgfx_init+0x48>)
 80139e8:	f7ff fd70 	bl	80134cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80139ec:	2000      	movs	r0, #0
 80139ee:	f7fe f973 	bl	8011cd8 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80139f2:	4807      	ldr	r0, [pc, #28]	; (8013a10 <touchgfx_init+0x4c>)
 80139f4:	f006 fc20 	bl	801a238 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80139f8:	f7ff fedc 	bl	80137b4 <_ZN12FrontendHeap11getInstanceEv>
 80139fc:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80139fe:	4805      	ldr	r0, [pc, #20]	; (8013a14 <touchgfx_init+0x50>)
 8013a00:	f7fe ffcc 	bl	801299c <_ZN11TouchGFXHAL10initializeEv>
}
 8013a04:	bf00      	nop
 8013a06:	370c      	adds	r7, #12
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd90      	pop	{r4, r7, pc}
 8013a0c:	2000bbdc 	.word	0x2000bbdc
 8013a10:	2000003c 	.word	0x2000003c
 8013a14:	2000bbe0 	.word	0x2000bbe0

08013a18 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8013a1c:	4802      	ldr	r0, [pc, #8]	; (8013a28 <touchgfx_taskEntry+0x10>)
 8013a1e:	f001 fa06 	bl	8014e2e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8013a22:	bf00      	nop
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	2000bbe0 	.word	0x2000bbe0

08013a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	4618      	mov	r0, r3
 8013a38:	f000 fc76 	bl	8014328 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013a3c:	4a03      	ldr	r2, [pc, #12]	; (8013a4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	601a      	str	r2, [r3, #0]
    {
    }
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	4618      	mov	r0, r3
 8013a46:	3708      	adds	r7, #8
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}
 8013a4c:	08025d9c 	.word	0x08025d9c

08013a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
    {
    }
 8013a58:	4a05      	ldr	r2, [pc, #20]	; (8013a70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	601a      	str	r2, [r3, #0]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	4618      	mov	r0, r3
 8013a62:	f000 fc5f 	bl	8014324 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3708      	adds	r7, #8
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	08025d9c 	.word	0x08025d9c

08013a74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b082      	sub	sp, #8
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
    }
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f7ff ffe7 	bl	8013a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013a82:	2118      	movs	r1, #24
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f010 f9c4 	bl	8023e12 <_ZdlPvj>
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3708      	adds	r7, #8
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}

08013a94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b082      	sub	sp, #8
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f000 fc42 	bl	8014328 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013aa4:	4a03      	ldr	r2, [pc, #12]	; (8013ab4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	601a      	str	r2, [r3, #0]
    }
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	4618      	mov	r0, r3
 8013aae:	3708      	adds	r7, #8
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}
 8013ab4:	08025d68 	.word	0x08025d68

08013ab8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
    }
 8013ac0:	4a05      	ldr	r2, [pc, #20]	; (8013ad8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	601a      	str	r2, [r3, #0]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f000 fc2b 	bl	8014324 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	08025d68 	.word	0x08025d68

08013adc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
    }
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f7ff ffe7 	bl	8013ab8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013aea:	f242 7134 	movw	r1, #10036	; 0x2734
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f010 f98f 	bl	8023e12 <_ZdlPvj>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	4618      	mov	r0, r3
 8013af8:	3708      	adds	r7, #8
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
	...

08013b00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b082      	sub	sp, #8
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f000 fc0c 	bl	8014328 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013b10:	4a03      	ldr	r2, [pc, #12]	; (8013b20 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	601a      	str	r2, [r3, #0]
    }
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3708      	adds	r7, #8
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	08025d34 	.word	0x08025d34

08013b24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
    }
 8013b2c:	4a05      	ldr	r2, [pc, #20]	; (8013b44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	601a      	str	r2, [r3, #0]
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	4618      	mov	r0, r3
 8013b36:	f000 fbf5 	bl	8014324 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3708      	adds	r7, #8
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}
 8013b44:	08025d34 	.word	0x08025d34

08013b48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
    }
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f7ff ffe7 	bl	8013b24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b56:	2114      	movs	r1, #20
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f010 f95a 	bl	8023e12 <_ZdlPvj>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	4618      	mov	r0, r3
 8013b62:	3708      	adds	r7, #8
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	4a11      	ldr	r2, [pc, #68]	; (8013bb8 <_ZN12FrontendHeapD1Ev+0x50>)
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	601a      	str	r2, [r3, #0]
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	f242 7374 	movw	r3, #10100	; 0x2774
 8013b7c:	4413      	add	r3, r2
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7fe f96a 	bl	8011e58 <_ZN19FrontendApplicationD1Ev>
 8013b84:	687a      	ldr	r2, [r7, #4]
 8013b86:	f242 7360 	movw	r3, #10080	; 0x2760
 8013b8a:	4413      	add	r3, r2
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7ff ffc9 	bl	8013b24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	332c      	adds	r3, #44	; 0x2c
 8013b96:	4618      	mov	r0, r3
 8013b98:	f7ff ff8e 	bl	8013ab8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	3314      	adds	r3, #20
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7ff ff55 	bl	8013a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7ff fe1d 	bl	80137e8 <_ZN16FrontendHeapBaseD1Ev>
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3708      	adds	r7, #8
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}
 8013bb8:	08025d20 	.word	0x08025d20

08013bbc <_ZN12FrontendHeapD0Ev>:
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7ff ffcf 	bl	8013b68 <_ZN12FrontendHeapD1Ev>
 8013bca:	f642 01c8 	movw	r1, #10440	; 0x28c8
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f010 f91f 	bl	8023e12 <_ZdlPvj>
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3708      	adds	r7, #8
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
	...

08013be0 <_Z41__static_initialization_and_destruction_0ii>:
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b084      	sub	sp, #16
 8013be4:	af02      	add	r7, sp, #8
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	d119      	bne.n	8013c24 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d114      	bne.n	8013c24 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8013bfa:	4818      	ldr	r0, [pc, #96]	; (8013c5c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013bfc:	f7ff fed0 	bl	80139a0 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8013c00:	4817      	ldr	r0, [pc, #92]	; (8013c60 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013c02:	f7ff f965 	bl	8012ed0 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8013c06:	4817      	ldr	r0, [pc, #92]	; (8013c64 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013c08:	f008 fdee 	bl	801c7e8 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8013c0c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013c10:	9301      	str	r3, [sp, #4]
 8013c12:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013c16:	9300      	str	r3, [sp, #0]
 8013c18:	4b10      	ldr	r3, [pc, #64]	; (8013c5c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013c1a:	4a12      	ldr	r2, [pc, #72]	; (8013c64 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013c1c:	4910      	ldr	r1, [pc, #64]	; (8013c60 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013c1e:	4812      	ldr	r0, [pc, #72]	; (8013c68 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013c20:	f7ff fe92 	bl	8013948 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d113      	bne.n	8013c52 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c30:	4293      	cmp	r3, r2
 8013c32:	d10e      	bne.n	8013c52 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013c34:	480c      	ldr	r0, [pc, #48]	; (8013c68 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013c36:	f7fe ff17 	bl	8012a68 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013c3a:	480c      	ldr	r0, [pc, #48]	; (8013c6c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8013c3c:	f7fa fd28 	bl	800e690 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8013c40:	4808      	ldr	r0, [pc, #32]	; (8013c64 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013c42:	f7ff fe43 	bl	80138cc <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8013c46:	4806      	ldr	r0, [pc, #24]	; (8013c60 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013c48:	f7ff f96c 	bl	8012f24 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8013c4c:	4803      	ldr	r0, [pc, #12]	; (8013c5c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013c4e:	f7fe fc81 	bl	8012554 <_ZN20STM32TouchControllerD1Ev>
}
 8013c52:	bf00      	nop
 8013c54:	3708      	adds	r7, #8
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	2000af60 	.word	0x2000af60
 8013c60:	2000af64 	.word	0x2000af64
 8013c64:	2000bb84 	.word	0x2000bb84
 8013c68:	2000bbe0 	.word	0x2000bbe0
 8013c6c:	2000003c 	.word	0x2000003c

08013c70 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013c78:	2301      	movs	r3, #1
    }
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	370c      	adds	r7, #12
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c84:	4770      	bx	lr

08013c86 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8013c86:	b480      	push	{r7}
 8013c88:	b083      	sub	sp, #12
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8013c8e:	230c      	movs	r3, #12
    }
 8013c90:	4618      	mov	r0, r3
 8013c92:	370c      	adds	r7, #12
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr

08013c9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8013c9c:	b480      	push	{r7}
 8013c9e:	b083      	sub	sp, #12
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	460b      	mov	r3, r1
 8013ca6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013ca8:	887a      	ldrh	r2, [r7, #2]
 8013caa:	4613      	mov	r3, r2
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	4413      	add	r3, r2
 8013cb0:	009b      	lsls	r3, r3, #2
 8013cb2:	3308      	adds	r3, #8
 8013cb4:	687a      	ldr	r2, [r7, #4]
 8013cb6:	4413      	add	r3, r2
    }
 8013cb8:	4618      	mov	r0, r3
 8013cba:	370c      	adds	r7, #12
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc2:	4770      	bx	lr

08013cc4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	460b      	mov	r3, r1
 8013cce:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013cd0:	887a      	ldrh	r2, [r7, #2]
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	005b      	lsls	r3, r3, #1
 8013cd6:	4413      	add	r3, r2
 8013cd8:	009b      	lsls	r3, r3, #2
 8013cda:	3308      	adds	r3, #8
 8013cdc:	687a      	ldr	r2, [r7, #4]
 8013cde:	4413      	add	r3, r2
    }
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr

08013cec <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013cf4:	2301      	movs	r3, #1
    }
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	370c      	adds	r7, #12
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr

08013d02 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013d02:	b480      	push	{r7}
 8013d04:	b083      	sub	sp, #12
 8013d06:	af00      	add	r7, sp, #0
 8013d08:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013d0a:	f242 732c 	movw	r3, #10028	; 0x272c
    }
 8013d0e:	4618      	mov	r0, r3
 8013d10:	370c      	adds	r7, #12
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr

08013d1a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013d1a:	b480      	push	{r7}
 8013d1c:	b083      	sub	sp, #12
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
 8013d22:	460b      	mov	r3, r1
 8013d24:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013d26:	887b      	ldrh	r3, [r7, #2]
 8013d28:	f242 722c 	movw	r2, #10028	; 0x272c
 8013d2c:	fb02 f303 	mul.w	r3, r2, r3
 8013d30:	3308      	adds	r3, #8
 8013d32:	687a      	ldr	r2, [r7, #4]
 8013d34:	4413      	add	r3, r2
    }
 8013d36:	4618      	mov	r0, r3
 8013d38:	370c      	adds	r7, #12
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d40:	4770      	bx	lr

08013d42 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013d42:	b480      	push	{r7}
 8013d44:	b083      	sub	sp, #12
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	6078      	str	r0, [r7, #4]
 8013d4a:	460b      	mov	r3, r1
 8013d4c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013d4e:	887b      	ldrh	r3, [r7, #2]
 8013d50:	f242 722c 	movw	r2, #10028	; 0x272c
 8013d54:	fb02 f303 	mul.w	r3, r2, r3
 8013d58:	3308      	adds	r3, #8
 8013d5a:	687a      	ldr	r2, [r7, #4]
 8013d5c:	4413      	add	r3, r2
    }
 8013d5e:	4618      	mov	r0, r3
 8013d60:	370c      	adds	r7, #12
 8013d62:	46bd      	mov	sp, r7
 8013d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d68:	4770      	bx	lr

08013d6a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013d6a:	b480      	push	{r7}
 8013d6c:	b083      	sub	sp, #12
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013d72:	2301      	movs	r3, #1
    }
 8013d74:	4618      	mov	r0, r3
 8013d76:	370c      	adds	r7, #12
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7e:	4770      	bx	lr

08013d80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013d88:	2310      	movs	r3, #16
    }
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	370c      	adds	r7, #12
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr

08013d96 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013d96:	b480      	push	{r7}
 8013d98:	b083      	sub	sp, #12
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	6078      	str	r0, [r7, #4]
 8013d9e:	460b      	mov	r3, r1
 8013da0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013da2:	887b      	ldrh	r3, [r7, #2]
 8013da4:	011b      	lsls	r3, r3, #4
 8013da6:	3308      	adds	r3, #8
 8013da8:	687a      	ldr	r2, [r7, #4]
 8013daa:	4413      	add	r3, r2
    }
 8013dac:	4618      	mov	r0, r3
 8013dae:	370c      	adds	r7, #12
 8013db0:	46bd      	mov	sp, r7
 8013db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db6:	4770      	bx	lr

08013db8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
 8013dc0:	460b      	mov	r3, r1
 8013dc2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013dc4:	887b      	ldrh	r3, [r7, #2]
 8013dc6:	011b      	lsls	r3, r3, #4
 8013dc8:	3308      	adds	r3, #8
 8013dca:	687a      	ldr	r2, [r7, #4]
 8013dcc:	4413      	add	r3, r2
    }
 8013dce:	4618      	mov	r0, r3
 8013dd0:	370c      	adds	r7, #12
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd8:	4770      	bx	lr

08013dda <_GLOBAL__sub_I_touchgfx_init>:
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013de2:	2001      	movs	r0, #1
 8013de4:	f7ff fefc 	bl	8013be0 <_Z41__static_initialization_and_destruction_0ii>
 8013de8:	bd80      	pop	{r7, pc}

08013dea <_GLOBAL__sub_D_touchgfx_init>:
 8013dea:	b580      	push	{r7, lr}
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013df2:	2000      	movs	r0, #0
 8013df4:	f7ff fef4 	bl	8013be0 <_Z41__static_initialization_and_destruction_0ii>
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b082      	sub	sp, #8
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	3318      	adds	r3, #24
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	4798      	blx	r3
    }
 8013e0e:	bf00      	nop
 8013e10:	3708      	adds	r7, #8
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}

08013e16 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8013e16:	b480      	push	{r7}
 8013e18:	b083      	sub	sp, #12
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
 8013e1e:	460b      	mov	r3, r1
 8013e20:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	78fa      	ldrb	r2, [r7, #3]
 8013e26:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8013e2a:	bf00      	nop
 8013e2c:	370c      	adds	r7, #12
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e34:	4770      	bx	lr

08013e36 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8013e36:	b480      	push	{r7}
 8013e38:	b083      	sub	sp, #12
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8013e44:	3301      	adds	r3, #1
 8013e46:	b2da      	uxtb	r2, r3
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8013e4e:	bf00      	nop
 8013e50:	370c      	adds	r7, #12
 8013e52:	46bd      	mov	sp, r7
 8013e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e58:	4770      	bx	lr
	...

08013e5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b082      	sub	sp, #8
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	460b      	mov	r3, r1
 8013e66:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8013e68:	78fb      	ldrb	r3, [r7, #3]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d002      	beq.n	8013e74 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8013e6e:	78fb      	ldrb	r3, [r7, #3]
 8013e70:	2b02      	cmp	r3, #2
 8013e72:	d105      	bne.n	8013e80 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	78fa      	ldrb	r2, [r7, #3]
 8013e78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	e027      	b.n	8013ed0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8013e80:	78fb      	ldrb	r3, [r7, #3]
 8013e82:	2b01      	cmp	r3, #1
 8013e84:	d123      	bne.n	8013ece <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d014      	beq.n	8013eb8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	3380      	adds	r3, #128	; 0x80
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	4798      	blx	r3
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d008      	beq.n	8013eb8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013ea6:	4b0c      	ldr	r3, [pc, #48]	; (8013ed8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	f083 0301 	eor.w	r3, r3, #1
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d001      	beq.n	8013eb8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	e000      	b.n	8013eba <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d005      	beq.n	8013eca <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	78fa      	ldrb	r2, [r7, #3]
 8013ec2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	e002      	b.n	8013ed0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	e000      	b.n	8013ed0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8013ece:	2300      	movs	r3, #0
    }
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}
 8013ed8:	2000bc66 	.word	0x2000bc66

08013edc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8013edc:	b480      	push	{r7}
 8013ede:	b083      	sub	sp, #12
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	683a      	ldr	r2, [r7, #0]
 8013eea:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8013eec:	bf00      	nop
 8013eee:	370c      	adds	r7, #12
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr

08013ef8 <__NVIC_EnableIRQ>:
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b083      	sub	sp, #12
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	4603      	mov	r3, r0
 8013f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	db0d      	blt.n	8013f26 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f0e:	b2db      	uxtb	r3, r3
 8013f10:	f003 021f 	and.w	r2, r3, #31
 8013f14:	4907      	ldr	r1, [pc, #28]	; (8013f34 <__NVIC_EnableIRQ+0x3c>)
 8013f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f1a:	095b      	lsrs	r3, r3, #5
 8013f1c:	2001      	movs	r0, #1
 8013f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8013f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013f26:	bf00      	nop
 8013f28:	370c      	adds	r7, #12
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr
 8013f32:	bf00      	nop
 8013f34:	e000e100 	.word	0xe000e100

08013f38 <__NVIC_DisableIRQ>:
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b083      	sub	sp, #12
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	4603      	mov	r3, r0
 8013f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	db12      	blt.n	8013f70 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f4e:	b2db      	uxtb	r3, r3
 8013f50:	f003 021f 	and.w	r2, r3, #31
 8013f54:	4909      	ldr	r1, [pc, #36]	; (8013f7c <__NVIC_DisableIRQ+0x44>)
 8013f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f5a:	095b      	lsrs	r3, r3, #5
 8013f5c:	2001      	movs	r0, #1
 8013f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8013f62:	3320      	adds	r3, #32
 8013f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013f68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013f6c:	f3bf 8f6f 	isb	sy
}
 8013f70:	bf00      	nop
 8013f72:	370c      	adds	r7, #12
 8013f74:	46bd      	mov	sp, r7
 8013f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7a:	4770      	bx	lr
 8013f7c:	e000e100 	.word	0xe000e100

08013f80 <__NVIC_SetPriority>:
{
 8013f80:	b480      	push	{r7}
 8013f82:	b083      	sub	sp, #12
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	4603      	mov	r3, r0
 8013f88:	6039      	str	r1, [r7, #0]
 8013f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	db0c      	blt.n	8013fae <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	b2db      	uxtb	r3, r3
 8013f98:	4a0e      	ldr	r2, [pc, #56]	; (8013fd4 <__NVIC_SetPriority+0x54>)
 8013f9a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8013f9e:	4608      	mov	r0, r1
 8013fa0:	011b      	lsls	r3, r3, #4
 8013fa2:	b2d9      	uxtb	r1, r3
 8013fa4:	1813      	adds	r3, r2, r0
 8013fa6:	460a      	mov	r2, r1
 8013fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013fac:	e00c      	b.n	8013fc8 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	b2da      	uxtb	r2, r3
 8013fb2:	4909      	ldr	r1, [pc, #36]	; (8013fd8 <__NVIC_SetPriority+0x58>)
 8013fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fb8:	b2db      	uxtb	r3, r3
 8013fba:	f003 030f 	and.w	r3, r3, #15
 8013fbe:	3b04      	subs	r3, #4
 8013fc0:	0112      	lsls	r2, r2, #4
 8013fc2:	b2d2      	uxtb	r2, r2
 8013fc4:	440b      	add	r3, r1
 8013fc6:	761a      	strb	r2, [r3, #24]
}
 8013fc8:	bf00      	nop
 8013fca:	370c      	adds	r7, #12
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd2:	4770      	bx	lr
 8013fd4:	e000e100 	.word	0xe000e100
 8013fd8:	e000ed00 	.word	0xe000ed00

08013fdc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8013fdc:	b5b0      	push	{r4, r5, r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f001 f9e6 	bl	80153b8 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8013fec:	687d      	ldr	r5, [r7, #4]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	334c      	adds	r3, #76	; 0x4c
 8013ff4:	681c      	ldr	r4, [r3, #0]
 8013ff6:	f003 ff43 	bl	8017e80 <_ZN8touchgfx11Application11getInstanceEv>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	4628      	mov	r0, r5
 8014000:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	490d      	ldr	r1, [pc, #52]	; (801403c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8014006:	4618      	mov	r0, r3
 8014008:	f7ff ff68 	bl	8013edc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2101      	movs	r1, #1
 8014010:	4618      	mov	r0, r3
 8014012:	f7ff ff23 	bl	8013e5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	3374      	adds	r3, #116	; 0x74
 801401e:	681c      	ldr	r4, [r3, #0]
 8014020:	2300      	movs	r3, #0
 8014022:	2200      	movs	r2, #0
 8014024:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014028:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2101      	movs	r1, #1
 801402e:	4618      	mov	r0, r3
 8014030:	f7ff fef1 	bl	8013e16 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8014034:	bf00      	nop
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bdb0      	pop	{r4, r5, r7, pc}
 801403c:	08012c01 	.word	0x08012c01

08014040 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014048:	2109      	movs	r1, #9
 801404a:	205a      	movs	r0, #90	; 0x5a
 801404c:	f7ff ff98 	bl	8013f80 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014050:	2109      	movs	r1, #9
 8014052:	2058      	movs	r0, #88	; 0x58
 8014054:	f7ff ff94 	bl	8013f80 <__NVIC_SetPriority>
}
 8014058:	bf00      	nop
 801405a:	3708      	adds	r7, #8
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}

08014060 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014068:	205a      	movs	r0, #90	; 0x5a
 801406a:	f7ff ff45 	bl	8013ef8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801406e:	2058      	movs	r0, #88	; 0x58
 8014070:	f7ff ff42 	bl	8013ef8 <__NVIC_EnableIRQ>
}
 8014074:	bf00      	nop
 8014076:	3708      	adds	r7, #8
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014084:	205a      	movs	r0, #90	; 0x5a
 8014086:	f7ff ff57 	bl	8013f38 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801408a:	2058      	movs	r0, #88	; 0x58
 801408c:	f7ff ff54 	bl	8013f38 <__NVIC_DisableIRQ>
}
 8014090:	bf00      	nop
 8014092:	3708      	adds	r7, #8
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}

08014098 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014098:	b480      	push	{r7}
 801409a:	b083      	sub	sp, #12
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80140a0:	4b11      	ldr	r3, [pc, #68]	; (80140e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80140a2:	68db      	ldr	r3, [r3, #12]
 80140a4:	b29b      	uxth	r3, r3
 80140a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	3b01      	subs	r3, #1
 80140ae:	b29a      	uxth	r2, r3
 80140b0:	4b0e      	ldr	r3, [pc, #56]	; (80140ec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80140b2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80140b4:	4b0c      	ldr	r3, [pc, #48]	; (80140e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80140b6:	691b      	ldr	r3, [r3, #16]
 80140b8:	b29b      	uxth	r3, r3
 80140ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80140be:	b29b      	uxth	r3, r3
 80140c0:	3b01      	subs	r3, #1
 80140c2:	b29a      	uxth	r2, r3
 80140c4:	4b0a      	ldr	r3, [pc, #40]	; (80140f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80140c6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80140c8:	4b08      	ldr	r3, [pc, #32]	; (80140ec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80140ca:	881a      	ldrh	r2, [r3, #0]
 80140cc:	4b06      	ldr	r3, [pc, #24]	; (80140e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80140ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80140d0:	4b05      	ldr	r3, [pc, #20]	; (80140e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80140d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140d4:	4a04      	ldr	r2, [pc, #16]	; (80140e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80140d6:	f043 0301 	orr.w	r3, r3, #1
 80140da:	6353      	str	r3, [r2, #52]	; 0x34
}
 80140dc:	bf00      	nop
 80140de:	370c      	adds	r7, #12
 80140e0:	46bd      	mov	sp, r7
 80140e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e6:	4770      	bx	lr
 80140e8:	40016800 	.word	0x40016800
 80140ec:	2000bc58 	.word	0x2000bc58
 80140f0:	2000bc5a 	.word	0x2000bc5a

080140f4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80140f4:	b480      	push	{r7}
 80140f6:	b083      	sub	sp, #12
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80140fc:	4b03      	ldr	r3, [pc, #12]	; (801410c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80140fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014100:	4618      	mov	r0, r3
 8014102:	370c      	adds	r7, #12
 8014104:	46bd      	mov	sp, r7
 8014106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410a:	4770      	bx	lr
 801410c:	40016884 	.word	0x40016884

08014110 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8014110:	b480      	push	{r7}
 8014112:	b083      	sub	sp, #12
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801411a:	4a06      	ldr	r2, [pc, #24]	; (8014134 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8014120:	4b05      	ldr	r3, [pc, #20]	; (8014138 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8014122:	2201      	movs	r2, #1
 8014124:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014126:	bf00      	nop
 8014128:	370c      	adds	r7, #12
 801412a:	46bd      	mov	sp, r7
 801412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014130:	4770      	bx	lr
 8014132:	bf00      	nop
 8014134:	40016884 	.word	0x40016884
 8014138:	40016800 	.word	0x40016800

0801413c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6839      	ldr	r1, [r7, #0]
 801414a:	4618      	mov	r0, r3
 801414c:	f000 fe44 	bl	8014dd8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8014150:	bf00      	nop
 8014152:	3708      	adds	r7, #8
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}

08014158 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014158:	b480      	push	{r7}
 801415a:	b085      	sub	sp, #20
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014160:	4b0d      	ldr	r3, [pc, #52]	; (8014198 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014164:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8014166:	4b0c      	ldr	r3, [pc, #48]	; (8014198 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014168:	68db      	ldr	r3, [r3, #12]
 801416a:	b29b      	uxth	r3, r3
 801416c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014170:	b29b      	uxth	r3, r3
 8014172:	3301      	adds	r3, #1
 8014174:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8014176:	89fa      	ldrh	r2, [r7, #14]
 8014178:	89bb      	ldrh	r3, [r7, #12]
 801417a:	429a      	cmp	r2, r3
 801417c:	d201      	bcs.n	8014182 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 801417e:	2300      	movs	r3, #0
 8014180:	e003      	b.n	801418a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8014182:	89fa      	ldrh	r2, [r7, #14]
 8014184:	89bb      	ldrh	r3, [r7, #12]
 8014186:	1ad3      	subs	r3, r2, r3
 8014188:	b29b      	uxth	r3, r3
    }
}
 801418a:	4618      	mov	r0, r3
 801418c:	3714      	adds	r7, #20
 801418e:	46bd      	mov	sp, r7
 8014190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014194:	4770      	bx	lr
 8014196:	bf00      	nop
 8014198:	40016800 	.word	0x40016800

0801419c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80141a4:	4b1a      	ldr	r3, [pc, #104]	; (8014210 <HAL_LTDC_LineEventCallback+0x74>)
 80141a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141a8:	4a1a      	ldr	r2, [pc, #104]	; (8014214 <HAL_LTDC_LineEventCallback+0x78>)
 80141aa:	8812      	ldrh	r2, [r2, #0]
 80141ac:	4293      	cmp	r3, r2
 80141ae:	bf0c      	ite	eq
 80141b0:	2301      	moveq	r3, #1
 80141b2:	2300      	movne	r3, #0
 80141b4:	b2db      	uxtb	r3, r3
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d017      	beq.n	80141ea <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80141ba:	4b17      	ldr	r3, [pc, #92]	; (8014218 <HAL_LTDC_LineEventCallback+0x7c>)
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	4619      	mov	r1, r3
 80141c0:	6878      	ldr	r0, [r7, #4]
 80141c2:	f7f1 fa59 	bl	8005678 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80141c6:	f7fa ff2b 	bl	800f020 <_ZN8touchgfx3HAL11getInstanceEv>
 80141ca:	4603      	mov	r3, r0
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7ff fe32 	bl	8013e36 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80141d2:	f7fe fcd7 	bl	8012b84 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80141d6:	f7fa ff23 	bl	800f020 <_ZN8touchgfx3HAL11getInstanceEv>
 80141da:	4603      	mov	r3, r0
 80141dc:	4618      	mov	r0, r3
 80141de:	f001 fb73 	bl	80158c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80141e2:	2000      	movs	r0, #0
 80141e4:	f7fe f9d8 	bl	8012598 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80141e8:	e00e      	b.n	8014208 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80141ea:	4b0a      	ldr	r3, [pc, #40]	; (8014214 <HAL_LTDC_LineEventCallback+0x78>)
 80141ec:	881b      	ldrh	r3, [r3, #0]
 80141ee:	4619      	mov	r1, r3
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f7f1 fa41 	bl	8005678 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80141f6:	2000      	movs	r0, #0
 80141f8:	f7fe f9d9 	bl	80125ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80141fc:	f7fa ff10 	bl	800f020 <_ZN8touchgfx3HAL11getInstanceEv>
 8014200:	4603      	mov	r3, r0
 8014202:	4618      	mov	r0, r3
 8014204:	f7ff fdf9 	bl	8013dfa <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8014208:	bf00      	nop
 801420a:	3708      	adds	r7, #8
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}
 8014210:	40016800 	.word	0x40016800
 8014214:	2000bc58 	.word	0x2000bc58
 8014218:	2000bc5a 	.word	0x2000bc5a

0801421c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801421c:	8880      	ldrh	r0, [r0, #4]
 801421e:	4770      	bx	lr

08014220 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014220:	2300      	movs	r3, #0
 8014222:	8083      	strh	r3, [r0, #4]
 8014224:	4770      	bx	lr
	...

08014228 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801422a:	6803      	ldr	r3, [r0, #0]
 801422c:	460e      	mov	r6, r1
 801422e:	2100      	movs	r1, #0
 8014230:	4605      	mov	r5, r0
 8014232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014234:	4798      	blx	r3
 8014236:	4604      	mov	r4, r0
 8014238:	682b      	ldr	r3, [r5, #0]
 801423a:	4628      	mov	r0, r5
 801423c:	1b34      	subs	r4, r6, r4
 801423e:	6a1b      	ldr	r3, [r3, #32]
 8014240:	b2a4      	uxth	r4, r4
 8014242:	4798      	blx	r3
 8014244:	88ab      	ldrh	r3, [r5, #4]
 8014246:	fbb4 f4f0 	udiv	r4, r4, r0
 801424a:	42a3      	cmp	r3, r4
 801424c:	d805      	bhi.n	801425a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801424e:	4b0e      	ldr	r3, [pc, #56]	; (8014288 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014250:	211e      	movs	r1, #30
 8014252:	4a0e      	ldr	r2, [pc, #56]	; (801428c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014254:	480e      	ldr	r0, [pc, #56]	; (8014290 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8014256:	f00f fe07 	bl	8023e68 <__assert_func>
 801425a:	682b      	ldr	r3, [r5, #0]
 801425c:	2100      	movs	r1, #0
 801425e:	4628      	mov	r0, r5
 8014260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014262:	4798      	blx	r3
 8014264:	682b      	ldr	r3, [r5, #0]
 8014266:	4607      	mov	r7, r0
 8014268:	4628      	mov	r0, r5
 801426a:	6a1b      	ldr	r3, [r3, #32]
 801426c:	4798      	blx	r3
 801426e:	1bf3      	subs	r3, r6, r7
 8014270:	b29b      	uxth	r3, r3
 8014272:	fbb3 f2f0 	udiv	r2, r3, r0
 8014276:	fb02 3010 	mls	r0, r2, r0, r3
 801427a:	b118      	cbz	r0, 8014284 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801427c:	4b05      	ldr	r3, [pc, #20]	; (8014294 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801427e:	211f      	movs	r1, #31
 8014280:	4a02      	ldr	r2, [pc, #8]	; (801428c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014282:	e7e7      	b.n	8014254 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8014284:	4620      	mov	r0, r4
 8014286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014288:	08025ea0 	.word	0x08025ea0
 801428c:	0802600e 	.word	0x0802600e
 8014290:	08025eb5 	.word	0x08025eb5
 8014294:	08025ee3 	.word	0x08025ee3

08014298 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014298:	b538      	push	{r3, r4, r5, lr}
 801429a:	6803      	ldr	r3, [r0, #0]
 801429c:	460d      	mov	r5, r1
 801429e:	4604      	mov	r4, r0
 80142a0:	6a1b      	ldr	r3, [r3, #32]
 80142a2:	4798      	blx	r3
 80142a4:	4285      	cmp	r5, r0
 80142a6:	d905      	bls.n	80142b4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80142a8:	4b0c      	ldr	r3, [pc, #48]	; (80142dc <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80142aa:	212f      	movs	r1, #47	; 0x2f
 80142ac:	4a0c      	ldr	r2, [pc, #48]	; (80142e0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80142ae:	480d      	ldr	r0, [pc, #52]	; (80142e4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80142b0:	f00f fdda 	bl	8023e68 <__assert_func>
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	4620      	mov	r0, r4
 80142b8:	88a5      	ldrh	r5, [r4, #4]
 80142ba:	69db      	ldr	r3, [r3, #28]
 80142bc:	4798      	blx	r3
 80142be:	4285      	cmp	r5, r0
 80142c0:	d303      	bcc.n	80142ca <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80142c2:	4b09      	ldr	r3, [pc, #36]	; (80142e8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80142c4:	2130      	movs	r1, #48	; 0x30
 80142c6:	4a06      	ldr	r2, [pc, #24]	; (80142e0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80142c8:	e7f1      	b.n	80142ae <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80142ca:	6823      	ldr	r3, [r4, #0]
 80142cc:	4620      	mov	r0, r4
 80142ce:	88a1      	ldrh	r1, [r4, #4]
 80142d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142d2:	4798      	blx	r3
 80142d4:	88a3      	ldrh	r3, [r4, #4]
 80142d6:	3301      	adds	r3, #1
 80142d8:	80a3      	strh	r3, [r4, #4]
 80142da:	bd38      	pop	{r3, r4, r5, pc}
 80142dc:	08025f5d 	.word	0x08025f5d
 80142e0:	08026051 	.word	0x08026051
 80142e4:	08025eb5 	.word	0x08025eb5
 80142e8:	08025f74 	.word	0x08025f74

080142ec <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80142ec:	b570      	push	{r4, r5, r6, lr}
 80142ee:	6803      	ldr	r3, [r0, #0]
 80142f0:	4616      	mov	r6, r2
 80142f2:	4604      	mov	r4, r0
 80142f4:	460d      	mov	r5, r1
 80142f6:	6a1b      	ldr	r3, [r3, #32]
 80142f8:	4798      	blx	r3
 80142fa:	4286      	cmp	r6, r0
 80142fc:	d905      	bls.n	801430a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80142fe:	4b06      	ldr	r3, [pc, #24]	; (8014318 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014300:	2139      	movs	r1, #57	; 0x39
 8014302:	4a06      	ldr	r2, [pc, #24]	; (801431c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014304:	4806      	ldr	r0, [pc, #24]	; (8014320 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014306:	f00f fdaf 	bl	8023e68 <__assert_func>
 801430a:	6823      	ldr	r3, [r4, #0]
 801430c:	4629      	mov	r1, r5
 801430e:	4620      	mov	r0, r4
 8014310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014316:	4718      	bx	r3
 8014318:	08025f5d 	.word	0x08025f5d
 801431c:	08025fc4 	.word	0x08025fc4
 8014320:	08025eb5 	.word	0x08025eb5

08014324 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014324:	4770      	bx	lr
	...

08014328 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014328:	4a02      	ldr	r2, [pc, #8]	; (8014334 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801432a:	6002      	str	r2, [r0, #0]
 801432c:	2200      	movs	r2, #0
 801432e:	8082      	strh	r2, [r0, #4]
 8014330:	4770      	bx	lr
 8014332:	bf00      	nop
 8014334:	08025f98 	.word	0x08025f98

08014338 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8014338:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 801433c:	4770      	bx	lr

0801433e <_ZNK8touchgfx11BoxProgress8getColorEv>:
 801433e:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8014342:	4770      	bx	lr

08014344 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8014344:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8014348:	4770      	bx	lr

0801434a <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 801434a:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 801434e:	4770      	bx	lr

08014350 <_ZN8touchgfx11BoxProgressD1Ev>:
 8014350:	4b03      	ldr	r3, [pc, #12]	; (8014360 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8014352:	b510      	push	{r4, lr}
 8014354:	4604      	mov	r4, r0
 8014356:	6003      	str	r3, [r0, #0]
 8014358:	f000 f8b6 	bl	80144c8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801435c:	4620      	mov	r0, r4
 801435e:	bd10      	pop	{r4, pc}
 8014360:	08026098 	.word	0x08026098

08014364 <_ZN8touchgfx11BoxProgressD0Ev>:
 8014364:	b510      	push	{r4, lr}
 8014366:	4604      	mov	r4, r0
 8014368:	f7ff fff2 	bl	8014350 <_ZN8touchgfx11BoxProgressD1Ev>
 801436c:	21c0      	movs	r1, #192	; 0xc0
 801436e:	4620      	mov	r0, r4
 8014370:	f00f fd4f 	bl	8023e12 <_ZdlPvj>
 8014374:	4620      	mov	r0, r4
 8014376:	bd10      	pop	{r4, pc}

08014378 <_ZN8touchgfx11BoxProgressC1Ev>:
 8014378:	b510      	push	{r4, lr}
 801437a:	4604      	mov	r4, r0
 801437c:	f000 f8b8 	bl	80144f0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8014380:	2201      	movs	r2, #1
 8014382:	4b16      	ldr	r3, [pc, #88]	; (80143dc <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8014384:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014388:	f104 0190 	add.w	r1, r4, #144	; 0x90
 801438c:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8014390:	4a13      	ldr	r2, [pc, #76]	; (80143e0 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8014392:	6023      	str	r3, [r4, #0]
 8014394:	2300      	movs	r3, #0
 8014396:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801439a:	22ff      	movs	r2, #255	; 0xff
 801439c:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 80143a0:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 80143a4:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 80143a8:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 80143ac:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 80143b0:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 80143b4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80143b8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80143bc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80143c0:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80143c4:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 80143c8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80143cc:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80143d0:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 80143d4:	f000 fbb8 	bl	8014b48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80143d8:	4620      	mov	r0, r4
 80143da:	bd10      	pop	{r4, pc}
 80143dc:	08026098 	.word	0x08026098
 80143e0:	08027350 	.word	0x08027350

080143e4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 80143e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80143e8:	4617      	mov	r7, r2
 80143ea:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80143ee:	2200      	movs	r2, #0
 80143f0:	4604      	mov	r4, r0
 80143f2:	460e      	mov	r6, r1
 80143f4:	4698      	mov	r8, r3
 80143f6:	4611      	mov	r1, r2
 80143f8:	9500      	str	r5, [sp, #0]
 80143fa:	3090      	adds	r0, #144	; 0x90
 80143fc:	f7fb fae0 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014400:	4643      	mov	r3, r8
 8014402:	463a      	mov	r2, r7
 8014404:	4631      	mov	r1, r6
 8014406:	4620      	mov	r0, r4
 8014408:	9508      	str	r5, [sp, #32]
 801440a:	b002      	add	sp, #8
 801440c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014410:	f000 b9fa 	b.w	8014808 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08014414 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8014414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014416:	4604      	mov	r4, r0
 8014418:	f000 fa40 	bl	801489c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801441c:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8014420:	4628      	mov	r0, r5
 8014422:	f004 f95b 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>
 8014426:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801442a:	2b03      	cmp	r3, #3
 801442c:	d814      	bhi.n	8014458 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 801442e:	e8df f003 	tbb	[pc, r3]
 8014432:	0202      	.short	0x0202
 8014434:	1010      	.short	0x1010
 8014436:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801443a:	4620      	mov	r0, r4
 801443c:	f000 fa88 	bl	8014950 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8014440:	b200      	sxth	r0, r0
 8014442:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8014446:	2b03      	cmp	r3, #3
 8014448:	d81a      	bhi.n	8014480 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 801444a:	e8df f003 	tbb	[pc, r3]
 801444e:	0e07      	.short	0x0e07
 8014450:	231f      	.short	0x231f
 8014452:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8014456:	e7f0      	b.n	801443a <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8014458:	2000      	movs	r0, #0
 801445a:	e7f2      	b.n	8014442 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 801445c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014460:	9300      	str	r3, [sp, #0]
 8014462:	4603      	mov	r3, r0
 8014464:	2200      	movs	r2, #0
 8014466:	2100      	movs	r1, #0
 8014468:	e007      	b.n	801447a <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 801446a:	8921      	ldrh	r1, [r4, #8]
 801446c:	2200      	movs	r2, #0
 801446e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014472:	1a09      	subs	r1, r1, r0
 8014474:	9300      	str	r3, [sp, #0]
 8014476:	4603      	mov	r3, r0
 8014478:	b209      	sxth	r1, r1
 801447a:	4628      	mov	r0, r5
 801447c:	f7fb faa0 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014480:	4628      	mov	r0, r5
 8014482:	b003      	add	sp, #12
 8014484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014488:	f004 b928 	b.w	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>
 801448c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014490:	9000      	str	r0, [sp, #0]
 8014492:	e7e7      	b.n	8014464 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8014494:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014498:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801449c:	1a12      	subs	r2, r2, r0
 801449e:	9000      	str	r0, [sp, #0]
 80144a0:	b212      	sxth	r2, r2
 80144a2:	e7e0      	b.n	8014466 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

080144a4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 80144a4:	b570      	push	{r4, r5, r6, lr}
 80144a6:	6803      	ldr	r3, [r0, #0]
 80144a8:	4604      	mov	r4, r0
 80144aa:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 80144ae:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80144b2:	4798      	blx	r3
 80144b4:	4601      	mov	r1, r0
 80144b6:	462b      	mov	r3, r5
 80144b8:	4620      	mov	r0, r4
 80144ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144be:	4718      	bx	r3

080144c0 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 80144c0:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 80144c4:	4770      	bx	lr
	...

080144c8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 80144c8:	4b03      	ldr	r3, [pc, #12]	; (80144d8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 80144ca:	b510      	push	{r4, lr}
 80144cc:	4604      	mov	r4, r0
 80144ce:	6003      	str	r3, [r0, #0]
 80144d0:	f000 f999 	bl	8014806 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80144d4:	4620      	mov	r0, r4
 80144d6:	bd10      	pop	{r4, pc}
 80144d8:	08026170 	.word	0x08026170

080144dc <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 80144dc:	b510      	push	{r4, lr}
 80144de:	4604      	mov	r4, r0
 80144e0:	f7ff fff2 	bl	80144c8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80144e4:	2190      	movs	r1, #144	; 0x90
 80144e6:	4620      	mov	r0, r4
 80144e8:	f00f fc93 	bl	8023e12 <_ZdlPvj>
 80144ec:	4620      	mov	r0, r4
 80144ee:	bd10      	pop	{r4, pc}

080144f0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80144f0:	b510      	push	{r4, lr}
 80144f2:	4604      	mov	r4, r0
 80144f4:	f000 fa4c 	bl	8014990 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80144f8:	4b03      	ldr	r3, [pc, #12]	; (8014508 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80144fa:	2100      	movs	r1, #0
 80144fc:	4620      	mov	r0, r4
 80144fe:	6023      	str	r3, [r4, #0]
 8014500:	f7ff ffd0 	bl	80144a4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8014504:	4620      	mov	r0, r4
 8014506:	bd10      	pop	{r4, pc}
 8014508:	08026170 	.word	0x08026170

0801450c <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 801450c:	b570      	push	{r4, r5, r6, lr}
 801450e:	6803      	ldr	r3, [r0, #0]
 8014510:	4604      	mov	r4, r0
 8014512:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8014516:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801451a:	4798      	blx	r3
 801451c:	4601      	mov	r1, r0
 801451e:	462b      	mov	r3, r5
 8014520:	4620      	mov	r0, r4
 8014522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014526:	4718      	bx	r3

08014528 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8014528:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 801452c:	4770      	bx	lr

0801452e <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 801452e:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8014532:	4770      	bx	lr

08014534 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8014534:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8014538:	4770      	bx	lr

0801453a <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 801453a:	b507      	push	{r0, r1, r2, lr}
 801453c:	ab02      	add	r3, sp, #8
 801453e:	30bc      	adds	r0, #188	; 0xbc
 8014540:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8014544:	4619      	mov	r1, r3
 8014546:	f002 f9a9 	bl	801689c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 801454a:	b003      	add	sp, #12
 801454c:	f85d fb04 	ldr.w	pc, [sp], #4

08014550 <_ZN8touchgfx13ImageProgressD1Ev>:
 8014550:	4b03      	ldr	r3, [pc, #12]	; (8014560 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8014552:	b510      	push	{r4, lr}
 8014554:	4604      	mov	r4, r0
 8014556:	6003      	str	r3, [r0, #0]
 8014558:	f7ff ffb6 	bl	80144c8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801455c:	4620      	mov	r0, r4
 801455e:	bd10      	pop	{r4, pc}
 8014560:	0802629c 	.word	0x0802629c

08014564 <_ZN8touchgfx13ImageProgressD0Ev>:
 8014564:	b510      	push	{r4, lr}
 8014566:	4604      	mov	r4, r0
 8014568:	f7ff fff2 	bl	8014550 <_ZN8touchgfx13ImageProgressD1Ev>
 801456c:	21f0      	movs	r1, #240	; 0xf0
 801456e:	4620      	mov	r0, r4
 8014570:	f00f fc4f 	bl	8023e12 <_ZdlPvj>
 8014574:	4620      	mov	r0, r4
 8014576:	bd10      	pop	{r4, pc}

08014578 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8014578:	b508      	push	{r3, lr}
 801457a:	4b06      	ldr	r3, [pc, #24]	; (8014594 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	b92b      	cbnz	r3, 801458c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8014580:	4b05      	ldr	r3, [pc, #20]	; (8014598 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8014582:	21b8      	movs	r1, #184	; 0xb8
 8014584:	4a05      	ldr	r2, [pc, #20]	; (801459c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8014586:	4806      	ldr	r0, [pc, #24]	; (80145a0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8014588:	f00f fc6e 	bl	8023e68 <__assert_func>
 801458c:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8014590:	bd08      	pop	{r3, pc}
 8014592:	bf00      	nop
 8014594:	2000bd30 	.word	0x2000bd30
 8014598:	08026230 	.word	0x08026230
 801459c:	08026374 	.word	0x08026374
 80145a0:	0802626c 	.word	0x0802626c

080145a4 <_ZN8touchgfx13ImageProgressC1Ev>:
 80145a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80145a8:	4604      	mov	r4, r0
 80145aa:	f7ff ffa1 	bl	80144f0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 80145ae:	4b31      	ldr	r3, [pc, #196]	; (8014674 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 80145b0:	a902      	add	r1, sp, #8
 80145b2:	4626      	mov	r6, r4
 80145b4:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 80145b8:	2500      	movs	r5, #0
 80145ba:	4a2f      	ldr	r2, [pc, #188]	; (8014678 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 80145bc:	f846 3b90 	str.w	r3, [r6], #144
 80145c0:	2701      	movs	r7, #1
 80145c2:	4b2e      	ldr	r3, [pc, #184]	; (801467c <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 80145c4:	4640      	mov	r0, r8
 80145c6:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 80145ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80145ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145d2:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 80145d6:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80145da:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 80145de:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 80145e2:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80145e6:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 80145ea:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 80145ee:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 80145f2:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 80145f6:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 80145fa:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 80145fe:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8014602:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8014606:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 801460a:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 801460e:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8014612:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8014616:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 801461a:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 801461e:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8014622:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8014626:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 801462a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 801462e:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8014632:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8014636:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801463a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 801463e:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8014642:	f002 fb6f 	bl	8016d24 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014646:	4b0e      	ldr	r3, [pc, #56]	; (8014680 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8014648:	4641      	mov	r1, r8
 801464a:	4630      	mov	r0, r6
 801464c:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8014650:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8014654:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8014658:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 801465c:	f000 fa74 	bl	8014b48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014660:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014664:	4631      	mov	r1, r6
 8014666:	f000 fa6f 	bl	8014b48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801466a:	4620      	mov	r0, r4
 801466c:	b002      	add	sp, #8
 801466e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014672:	bf00      	nop
 8014674:	0802629c 	.word	0x0802629c
 8014678:	080274b8 	.word	0x080274b8
 801467c:	08026618 	.word	0x08026618
 8014680:	080273b8 	.word	0x080273b8

08014684 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8014684:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014688:	4617      	mov	r7, r2
 801468a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801468e:	2200      	movs	r2, #0
 8014690:	4604      	mov	r4, r0
 8014692:	460e      	mov	r6, r1
 8014694:	4698      	mov	r8, r3
 8014696:	4611      	mov	r1, r2
 8014698:	9500      	str	r5, [sp, #0]
 801469a:	3090      	adds	r0, #144	; 0x90
 801469c:	f7fb f990 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80146a0:	4643      	mov	r3, r8
 80146a2:	463a      	mov	r2, r7
 80146a4:	4631      	mov	r1, r6
 80146a6:	4620      	mov	r0, r4
 80146a8:	9508      	str	r5, [sp, #32]
 80146aa:	b002      	add	sp, #8
 80146ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146b0:	f000 b8aa 	b.w	8014808 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080146b4 <_ZN8touchgfx13ImageProgress8setValueEi>:
 80146b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146b6:	4604      	mov	r4, r0
 80146b8:	f000 f8f0 	bl	801489c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80146bc:	f104 0790 	add.w	r7, r4, #144	; 0x90
 80146c0:	4638      	mov	r0, r7
 80146c2:	f004 f80b 	bl	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>
 80146c6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80146ca:	4620      	mov	r0, r4
 80146cc:	2b01      	cmp	r3, #1
 80146ce:	bf94      	ite	ls
 80146d0:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 80146d4:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 80146d8:	f000 f93a 	bl	8014950 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80146dc:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 80146e0:	4606      	mov	r6, r0
 80146e2:	b205      	sxth	r5, r0
 80146e4:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80146e8:	2a00      	cmp	r2, #0
 80146ea:	d056      	beq.n	801479a <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 80146ec:	2b03      	cmp	r3, #3
 80146ee:	d82c      	bhi.n	801474a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 80146f0:	e8df f003 	tbb	[pc, r3]
 80146f4:	3d311202 	.word	0x3d311202
 80146f8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80146fc:	2200      	movs	r2, #0
 80146fe:	9300      	str	r3, [sp, #0]
 8014700:	4611      	mov	r1, r2
 8014702:	462b      	mov	r3, r5
 8014704:	4638      	mov	r0, r7
 8014706:	f7fb f95b 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801470a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801470e:	9300      	str	r3, [sp, #0]
 8014710:	462b      	mov	r3, r5
 8014712:	2200      	movs	r2, #0
 8014714:	4611      	mov	r1, r2
 8014716:	e014      	b.n	8014742 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8014718:	8921      	ldrh	r1, [r4, #8]
 801471a:	2200      	movs	r2, #0
 801471c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8014720:	1a09      	subs	r1, r1, r0
 8014722:	4638      	mov	r0, r7
 8014724:	9300      	str	r3, [sp, #0]
 8014726:	462b      	mov	r3, r5
 8014728:	b209      	sxth	r1, r1
 801472a:	f7fb f949 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801472e:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8014732:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014736:	4249      	negs	r1, r1
 8014738:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801473c:	9200      	str	r2, [sp, #0]
 801473e:	b209      	sxth	r1, r1
 8014740:	2200      	movs	r2, #0
 8014742:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8014746:	f7fb f93b 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801474a:	4638      	mov	r0, r7
 801474c:	b003      	add	sp, #12
 801474e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014752:	f003 bfc3 	b.w	80186dc <_ZNK8touchgfx8Drawable10invalidateEv>
 8014756:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801475a:	2200      	movs	r2, #0
 801475c:	9500      	str	r5, [sp, #0]
 801475e:	2100      	movs	r1, #0
 8014760:	4638      	mov	r0, r7
 8014762:	f7fb f92d 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014766:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801476a:	9500      	str	r5, [sp, #0]
 801476c:	e7d1      	b.n	8014712 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 801476e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8014772:	2100      	movs	r1, #0
 8014774:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014778:	1a12      	subs	r2, r2, r0
 801477a:	9500      	str	r5, [sp, #0]
 801477c:	4638      	mov	r0, r7
 801477e:	b212      	sxth	r2, r2
 8014780:	f7fb f91e 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014784:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8014788:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 801478c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8014790:	4252      	negs	r2, r2
 8014792:	9100      	str	r1, [sp, #0]
 8014794:	b212      	sxth	r2, r2
 8014796:	2100      	movs	r1, #0
 8014798:	e7d3      	b.n	8014742 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801479a:	2b03      	cmp	r3, #3
 801479c:	d8d5      	bhi.n	801474a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 801479e:	e8df f003 	tbb	[pc, r3]
 80147a2:	1102      	.short	0x1102
 80147a4:	2a1b      	.short	0x2a1b
 80147a6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80147aa:	2200      	movs	r2, #0
 80147ac:	4638      	mov	r0, r7
 80147ae:	4611      	mov	r1, r2
 80147b0:	9300      	str	r3, [sp, #0]
 80147b2:	462b      	mov	r3, r5
 80147b4:	f7fb f904 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80147b8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80147bc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80147c0:	1af1      	subs	r1, r6, r3
 80147c2:	e7bb      	b.n	801473c <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 80147c4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80147c8:	2200      	movs	r2, #0
 80147ca:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80147ce:	1a09      	subs	r1, r1, r0
 80147d0:	9300      	str	r3, [sp, #0]
 80147d2:	462b      	mov	r3, r5
 80147d4:	b209      	sxth	r1, r1
 80147d6:	e795      	b.n	8014704 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 80147d8:	2200      	movs	r2, #0
 80147da:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80147de:	4638      	mov	r0, r7
 80147e0:	9500      	str	r5, [sp, #0]
 80147e2:	4611      	mov	r1, r2
 80147e4:	f7fb f8ec 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80147e8:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 80147ec:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80147f0:	1a32      	subs	r2, r6, r0
 80147f2:	9000      	str	r0, [sp, #0]
 80147f4:	e7ce      	b.n	8014794 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 80147f6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80147fa:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80147fe:	1a12      	subs	r2, r2, r0
 8014800:	9500      	str	r5, [sp, #0]
 8014802:	b212      	sxth	r2, r2
 8014804:	e7ab      	b.n	801475e <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08014806 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8014806:	4770      	bx	lr

08014808 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8014808:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801480c:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8014810:	4604      	mov	r4, r0
 8014812:	460e      	mov	r6, r1
 8014814:	4698      	mov	r8, r3
 8014816:	9700      	str	r7, [sp, #0]
 8014818:	3058      	adds	r0, #88	; 0x58
 801481a:	4615      	mov	r5, r2
 801481c:	f7fb f8d0 	bl	800f9c0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014820:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8014824:	eb06 0308 	add.w	r3, r6, r8
 8014828:	429a      	cmp	r2, r3
 801482a:	eb05 0207 	add.w	r2, r5, r7
 801482e:	bfb8      	it	lt
 8014830:	8123      	strhlt	r3, [r4, #8]
 8014832:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014836:	4293      	cmp	r3, r2
 8014838:	bfb8      	it	lt
 801483a:	8162      	strhlt	r2, [r4, #10]
 801483c:	b002      	add	sp, #8
 801483e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014842 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8014842:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8014846:	4770      	bx	lr

08014848 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8014848:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 801484c:	4770      	bx	lr

0801484e <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 801484e:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8014852:	4770      	bx	lr

08014854 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8014854:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8014858:	4770      	bx	lr

0801485a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 801485a:	b510      	push	{r4, lr}
 801485c:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8014860:	800c      	strh	r4, [r1, #0]
 8014862:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8014866:	8011      	strh	r1, [r2, #0]
 8014868:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801486c:	801a      	strh	r2, [r3, #0]
 801486e:	9b02      	ldr	r3, [sp, #8]
 8014870:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8014874:	801a      	strh	r2, [r3, #0]
 8014876:	bd10      	pop	{r4, pc}

08014878 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8014878:	b510      	push	{r4, lr}
 801487a:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 801487e:	800c      	strh	r4, [r1, #0]
 8014880:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8014884:	8011      	strh	r1, [r2, #0]
 8014886:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801488a:	801a      	strh	r2, [r3, #0]
 801488c:	bd10      	pop	{r4, pc}

0801488e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 801488e:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8014892:	800b      	strh	r3, [r1, #0]
 8014894:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8014898:	8013      	strh	r3, [r2, #0]
 801489a:	4770      	bx	lr

0801489c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801489c:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80148a0:	4299      	cmp	r1, r3
 80148a2:	bfb8      	it	lt
 80148a4:	4619      	movlt	r1, r3
 80148a6:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 80148aa:	4299      	cmp	r1, r3
 80148ac:	bfa8      	it	ge
 80148ae:	4619      	movge	r1, r3
 80148b0:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 80148b4:	4770      	bx	lr

080148b6 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80148b6:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 80148ba:	4770      	bx	lr

080148bc <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80148bc:	b510      	push	{r4, lr}
 80148be:	4604      	mov	r4, r0
 80148c0:	2190      	movs	r1, #144	; 0x90
 80148c2:	f00f faa6 	bl	8023e12 <_ZdlPvj>
 80148c6:	4620      	mov	r0, r4
 80148c8:	bd10      	pop	{r4, pc}

080148ca <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80148ca:	b510      	push	{r4, lr}
 80148cc:	4604      	mov	r4, r0
 80148ce:	302c      	adds	r0, #44	; 0x2c
 80148d0:	f002 fa28 	bl	8016d24 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80148d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80148d6:	8123      	strh	r3, [r4, #8]
 80148d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80148da:	8163      	strh	r3, [r4, #10]
 80148dc:	bd10      	pop	{r4, pc}
	...

080148e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 80148e0:	4291      	cmp	r1, r2
 80148e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148e6:	4604      	mov	r4, r0
 80148e8:	460e      	mov	r6, r1
 80148ea:	4615      	mov	r5, r2
 80148ec:	4698      	mov	r8, r3
 80148ee:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80148f2:	db05      	blt.n	8014900 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 80148f4:	4b12      	ldr	r3, [pc, #72]	; (8014940 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 80148f6:	214d      	movs	r1, #77	; 0x4d
 80148f8:	4a12      	ldr	r2, [pc, #72]	; (8014944 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80148fa:	4813      	ldr	r0, [pc, #76]	; (8014948 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 80148fc:	f00f fab4 	bl	8023e68 <__assert_func>
 8014900:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8014904:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8014908:	6803      	ldr	r3, [r0, #0]
 801490a:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 801490e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014912:	4798      	blx	r3
 8014914:	f1b8 0f00 	cmp.w	r8, #0
 8014918:	d10c      	bne.n	8014934 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801491a:	1bad      	subs	r5, r5, r6
 801491c:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8014920:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8014924:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8014928:	42bb      	cmp	r3, r7
 801492a:	d806      	bhi.n	801493a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 801492c:	4b07      	ldr	r3, [pc, #28]	; (801494c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 801492e:	215a      	movs	r1, #90	; 0x5a
 8014930:	4a04      	ldr	r2, [pc, #16]	; (8014944 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8014932:	e7e2      	b.n	80148fa <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8014934:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8014938:	e7f2      	b.n	8014920 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 801493a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801493e:	bf00      	nop
 8014940:	080263a7 	.word	0x080263a7
 8014944:	080264e4 	.word	0x080264e4
 8014948:	080263b1 	.word	0x080263b1
 801494c:	08026408 	.word	0x08026408

08014950 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8014950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014952:	4604      	mov	r4, r0
 8014954:	460d      	mov	r5, r1
 8014956:	b1b9      	cbz	r1, 8014988 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8014958:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 801495c:	ab01      	add	r3, sp, #4
 801495e:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8014962:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8014966:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 801496a:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 801496e:	1a12      	subs	r2, r2, r0
 8014970:	1b89      	subs	r1, r1, r6
 8014972:	1a38      	subs	r0, r7, r0
 8014974:	f003 fff3 	bl	801895e <_ZN8touchgfx6muldivElllRl>
 8014978:	4629      	mov	r1, r5
 801497a:	ab01      	add	r3, sp, #4
 801497c:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8014980:	4430      	add	r0, r6
 8014982:	f003 ffec 	bl	801895e <_ZN8touchgfx6muldivElllRl>
 8014986:	b285      	uxth	r5, r0
 8014988:	4628      	mov	r0, r5
 801498a:	b003      	add	sp, #12
 801498c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08014990 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8014990:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014994:	4604      	mov	r4, r0
 8014996:	2600      	movs	r6, #0
 8014998:	f7fa ffc4 	bl	800f924 <_ZN8touchgfx8DrawableC1Ev>
 801499c:	4b1b      	ldr	r3, [pc, #108]	; (8014a0c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 801499e:	4625      	mov	r5, r4
 80149a0:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80149a4:	af02      	add	r7, sp, #8
 80149a6:	62a6      	str	r6, [r4, #40]	; 0x28
 80149a8:	f845 3b2c 	str.w	r3, [r5], #44
 80149ac:	4628      	mov	r0, r5
 80149ae:	f827 8d04 	strh.w	r8, [r7, #-4]!
 80149b2:	f7fa ffb7 	bl	800f924 <_ZN8touchgfx8DrawableC1Ev>
 80149b6:	4b16      	ldr	r3, [pc, #88]	; (8014a10 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 80149b8:	4639      	mov	r1, r7
 80149ba:	f104 0758 	add.w	r7, r4, #88	; 0x58
 80149be:	4628      	mov	r0, r5
 80149c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80149c2:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 80149c6:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 80149ca:	f002 f9ab 	bl	8016d24 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80149ce:	4638      	mov	r0, r7
 80149d0:	f7fa ffa8 	bl	800f924 <_ZN8touchgfx8DrawableC1Ev>
 80149d4:	4b0f      	ldr	r3, [pc, #60]	; (8014a14 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 80149d6:	4632      	mov	r2, r6
 80149d8:	4631      	mov	r1, r6
 80149da:	65a3      	str	r3, [r4, #88]	; 0x58
 80149dc:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80149e0:	4628      	mov	r0, r5
 80149e2:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80149e6:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 80149ea:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 80149ee:	f7fb f832 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
 80149f2:	4629      	mov	r1, r5
 80149f4:	4620      	mov	r0, r4
 80149f6:	f000 f8a7 	bl	8014b48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80149fa:	4620      	mov	r0, r4
 80149fc:	4639      	mov	r1, r7
 80149fe:	f000 f8a3 	bl	8014b48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014a02:	4620      	mov	r0, r4
 8014a04:	b002      	add	sp, #8
 8014a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a0a:	bf00      	nop
 8014a0c:	0802642c 	.word	0x0802642c
 8014a10:	080274b8 	.word	0x080274b8
 8014a14:	08026618 	.word	0x08026618

08014a18 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014a18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014a1a:	2000      	movs	r0, #0
 8014a1c:	b12b      	cbz	r3, 8014a2a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014a1e:	b920      	cbnz	r0, 8014a2a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014a20:	1a5a      	subs	r2, r3, r1
 8014a22:	699b      	ldr	r3, [r3, #24]
 8014a24:	4250      	negs	r0, r2
 8014a26:	4150      	adcs	r0, r2
 8014a28:	e7f8      	b.n	8014a1c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014a2a:	4770      	bx	lr

08014a2c <_ZN8touchgfx9Container9removeAllEv>:
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014a30:	b123      	cbz	r3, 8014a3c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014a32:	6999      	ldr	r1, [r3, #24]
 8014a34:	6281      	str	r1, [r0, #40]	; 0x28
 8014a36:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014a3a:	e7f8      	b.n	8014a2e <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014a3c:	4770      	bx	lr

08014a3e <_ZN8touchgfx9Container6unlinkEv>:
 8014a3e:	2300      	movs	r3, #0
 8014a40:	6283      	str	r3, [r0, #40]	; 0x28
 8014a42:	4770      	bx	lr

08014a44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a48:	461f      	mov	r7, r3
 8014a4a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014a4e:	460d      	mov	r5, r1
 8014a50:	4616      	mov	r6, r2
 8014a52:	b103      	cbz	r3, 8014a56 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014a54:	6038      	str	r0, [r7, #0]
 8014a56:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014a58:	b314      	cbz	r4, 8014aa0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014a5a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014a5e:	b1eb      	cbz	r3, 8014a9c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014a60:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014a64:	428d      	cmp	r5, r1
 8014a66:	db19      	blt.n	8014a9c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014a68:	b289      	uxth	r1, r1
 8014a6a:	8923      	ldrh	r3, [r4, #8]
 8014a6c:	440b      	add	r3, r1
 8014a6e:	b21b      	sxth	r3, r3
 8014a70:	429d      	cmp	r5, r3
 8014a72:	da13      	bge.n	8014a9c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014a74:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014a78:	4296      	cmp	r6, r2
 8014a7a:	db0f      	blt.n	8014a9c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014a7c:	b292      	uxth	r2, r2
 8014a7e:	8963      	ldrh	r3, [r4, #10]
 8014a80:	4413      	add	r3, r2
 8014a82:	b21b      	sxth	r3, r3
 8014a84:	429e      	cmp	r6, r3
 8014a86:	da09      	bge.n	8014a9c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014a88:	6823      	ldr	r3, [r4, #0]
 8014a8a:	1ab2      	subs	r2, r6, r2
 8014a8c:	1a69      	subs	r1, r5, r1
 8014a8e:	4620      	mov	r0, r4
 8014a90:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8014a94:	b212      	sxth	r2, r2
 8014a96:	463b      	mov	r3, r7
 8014a98:	b209      	sxth	r1, r1
 8014a9a:	47c0      	blx	r8
 8014a9c:	69a4      	ldr	r4, [r4, #24]
 8014a9e:	e7db      	b.n	8014a58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014aa4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	8002      	strh	r2, [r0, #0]
 8014aa8:	8042      	strh	r2, [r0, #2]
 8014aaa:	8082      	strh	r2, [r0, #4]
 8014aac:	80c2      	strh	r2, [r0, #6]
 8014aae:	4770      	bx	lr

08014ab0 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014ab0:	b570      	push	{r4, r5, r6, lr}
 8014ab2:	460d      	mov	r5, r1
 8014ab4:	4616      	mov	r6, r2
 8014ab6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014ab8:	b13c      	cbz	r4, 8014aca <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014aba:	6823      	ldr	r3, [r4, #0]
 8014abc:	4620      	mov	r0, r4
 8014abe:	4632      	mov	r2, r6
 8014ac0:	4629      	mov	r1, r5
 8014ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ac4:	4798      	blx	r3
 8014ac6:	69a4      	ldr	r4, [r4, #24]
 8014ac8:	e7f6      	b.n	8014ab8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014aca:	bd70      	pop	{r4, r5, r6, pc}

08014acc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014acc:	b538      	push	{r3, r4, r5, lr}
 8014ace:	460d      	mov	r5, r1
 8014ad0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014ad2:	b134      	cbz	r4, 8014ae2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014ad4:	682b      	ldr	r3, [r5, #0]
 8014ad6:	4621      	mov	r1, r4
 8014ad8:	4628      	mov	r0, r5
 8014ada:	689b      	ldr	r3, [r3, #8]
 8014adc:	4798      	blx	r3
 8014ade:	69a4      	ldr	r4, [r4, #24]
 8014ae0:	e7f7      	b.n	8014ad2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014ae2:	bd38      	pop	{r3, r4, r5, pc}

08014ae4 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014ae4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014ae6:	b19b      	cbz	r3, 8014b10 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014ae8:	428b      	cmp	r3, r1
 8014aea:	d109      	bne.n	8014b00 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014aec:	699a      	ldr	r2, [r3, #24]
 8014aee:	2100      	movs	r1, #0
 8014af0:	6159      	str	r1, [r3, #20]
 8014af2:	6282      	str	r2, [r0, #40]	; 0x28
 8014af4:	b902      	cbnz	r2, 8014af8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014af6:	4770      	bx	lr
 8014af8:	6199      	str	r1, [r3, #24]
 8014afa:	4770      	bx	lr
 8014afc:	4613      	mov	r3, r2
 8014afe:	b13a      	cbz	r2, 8014b10 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014b00:	699a      	ldr	r2, [r3, #24]
 8014b02:	428a      	cmp	r2, r1
 8014b04:	d1fa      	bne.n	8014afc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014b06:	698a      	ldr	r2, [r1, #24]
 8014b08:	619a      	str	r2, [r3, #24]
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014b10:	4770      	bx	lr

08014b12 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014b12:	b410      	push	{r4}
 8014b14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014b16:	4604      	mov	r4, r0
 8014b18:	b92b      	cbnz	r3, 8014b26 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014b1a:	6803      	ldr	r3, [r0, #0]
 8014b1c:	4611      	mov	r1, r2
 8014b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014b24:	4718      	bx	r3
 8014b26:	b941      	cbnz	r1, 8014b3a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014b28:	6193      	str	r3, [r2, #24]
 8014b2a:	6282      	str	r2, [r0, #40]	; 0x28
 8014b2c:	6154      	str	r4, [r2, #20]
 8014b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b32:	4770      	bx	lr
 8014b34:	4603      	mov	r3, r0
 8014b36:	2800      	cmp	r0, #0
 8014b38:	d0f9      	beq.n	8014b2e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8014b3a:	4299      	cmp	r1, r3
 8014b3c:	6998      	ldr	r0, [r3, #24]
 8014b3e:	d1f9      	bne.n	8014b34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014b40:	6190      	str	r0, [r2, #24]
 8014b42:	618a      	str	r2, [r1, #24]
 8014b44:	e7f2      	b.n	8014b2c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08014b48 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014b48:	4288      	cmp	r0, r1
 8014b4a:	b508      	push	{r3, lr}
 8014b4c:	d105      	bne.n	8014b5a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8014b4e:	4b11      	ldr	r3, [pc, #68]	; (8014b94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8014b50:	2123      	movs	r1, #35	; 0x23
 8014b52:	4a11      	ldr	r2, [pc, #68]	; (8014b98 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014b54:	4811      	ldr	r0, [pc, #68]	; (8014b9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8014b56:	f00f f987 	bl	8023e68 <__assert_func>
 8014b5a:	694b      	ldr	r3, [r1, #20]
 8014b5c:	b11b      	cbz	r3, 8014b66 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8014b5e:	4b10      	ldr	r3, [pc, #64]	; (8014ba0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8014b60:	2124      	movs	r1, #36	; 0x24
 8014b62:	4a0d      	ldr	r2, [pc, #52]	; (8014b98 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014b64:	e7f6      	b.n	8014b54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014b66:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8014b6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014b6c:	b913      	cbnz	r3, 8014b74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8014b6e:	6281      	str	r1, [r0, #40]	; 0x28
 8014b70:	bd08      	pop	{r3, pc}
 8014b72:	4613      	mov	r3, r2
 8014b74:	699a      	ldr	r2, [r3, #24]
 8014b76:	b12a      	cbz	r2, 8014b84 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8014b78:	428b      	cmp	r3, r1
 8014b7a:	d1fa      	bne.n	8014b72 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8014b7c:	4b09      	ldr	r3, [pc, #36]	; (8014ba4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014b7e:	2135      	movs	r1, #53	; 0x35
 8014b80:	4a05      	ldr	r2, [pc, #20]	; (8014b98 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014b82:	e7e7      	b.n	8014b54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014b84:	428b      	cmp	r3, r1
 8014b86:	d103      	bne.n	8014b90 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8014b88:	4b06      	ldr	r3, [pc, #24]	; (8014ba4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014b8a:	2138      	movs	r1, #56	; 0x38
 8014b8c:	4a02      	ldr	r2, [pc, #8]	; (8014b98 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014b8e:	e7e1      	b.n	8014b54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014b90:	6199      	str	r1, [r3, #24]
 8014b92:	e7ed      	b.n	8014b70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8014b94:	08026545 	.word	0x08026545
 8014b98:	0802669c 	.word	0x0802669c
 8014b9c:	08026571 	.word	0x08026571
 8014ba0:	080265a4 	.word	0x080265a4
 8014ba4:	080265da 	.word	0x080265da

08014ba8 <_ZN8touchgfx4RectaNERKS0_>:
 8014ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bac:	888b      	ldrh	r3, [r1, #4]
 8014bae:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014bb2:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014bb6:	444b      	add	r3, r9
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	fa0f f883 	sxth.w	r8, r3
 8014bbe:	45c2      	cmp	sl, r8
 8014bc0:	da30      	bge.n	8014c24 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014bc2:	8882      	ldrh	r2, [r0, #4]
 8014bc4:	4452      	add	r2, sl
 8014bc6:	b292      	uxth	r2, r2
 8014bc8:	fa0f fe82 	sxth.w	lr, r2
 8014bcc:	45f1      	cmp	r9, lr
 8014bce:	da29      	bge.n	8014c24 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014bd0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014bd4:	88cc      	ldrh	r4, [r1, #6]
 8014bd6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014bda:	442c      	add	r4, r5
 8014bdc:	b224      	sxth	r4, r4
 8014bde:	42a6      	cmp	r6, r4
 8014be0:	da20      	bge.n	8014c24 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014be2:	88c7      	ldrh	r7, [r0, #6]
 8014be4:	4437      	add	r7, r6
 8014be6:	b2bf      	uxth	r7, r7
 8014be8:	fa0f fc87 	sxth.w	ip, r7
 8014bec:	4565      	cmp	r5, ip
 8014bee:	da19      	bge.n	8014c24 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014bf0:	45ca      	cmp	sl, r9
 8014bf2:	4654      	mov	r4, sl
 8014bf4:	bfb8      	it	lt
 8014bf6:	464c      	movlt	r4, r9
 8014bf8:	42b5      	cmp	r5, r6
 8014bfa:	bfb8      	it	lt
 8014bfc:	4635      	movlt	r5, r6
 8014bfe:	45f0      	cmp	r8, lr
 8014c00:	bfc8      	it	gt
 8014c02:	4613      	movgt	r3, r2
 8014c04:	1b1b      	subs	r3, r3, r4
 8014c06:	8083      	strh	r3, [r0, #4]
 8014c08:	88ca      	ldrh	r2, [r1, #6]
 8014c0a:	884b      	ldrh	r3, [r1, #2]
 8014c0c:	8004      	strh	r4, [r0, #0]
 8014c0e:	4413      	add	r3, r2
 8014c10:	8045      	strh	r5, [r0, #2]
 8014c12:	b29b      	uxth	r3, r3
 8014c14:	b21a      	sxth	r2, r3
 8014c16:	4594      	cmp	ip, r2
 8014c18:	bfb8      	it	lt
 8014c1a:	463b      	movlt	r3, r7
 8014c1c:	1b5b      	subs	r3, r3, r5
 8014c1e:	80c3      	strh	r3, [r0, #6]
 8014c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c24:	2300      	movs	r3, #0
 8014c26:	8003      	strh	r3, [r0, #0]
 8014c28:	8043      	strh	r3, [r0, #2]
 8014c2a:	8083      	strh	r3, [r0, #4]
 8014c2c:	80c3      	strh	r3, [r0, #6]
 8014c2e:	e7f7      	b.n	8014c20 <_ZN8touchgfx4RectaNERKS0_+0x78>

08014c30 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014c30:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014c34:	b12b      	cbz	r3, 8014c42 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8014c36:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014c3a:	fab0 f080 	clz	r0, r0
 8014c3e:	0940      	lsrs	r0, r0, #5
 8014c40:	4770      	bx	lr
 8014c42:	2001      	movs	r0, #1
 8014c44:	4770      	bx	lr

08014c46 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8014c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8014c50:	8003      	strh	r3, [r0, #0]
 8014c52:	8043      	strh	r3, [r0, #2]
 8014c54:	8083      	strh	r3, [r0, #4]
 8014c56:	80c3      	strh	r3, [r0, #6]
 8014c58:	2d00      	cmp	r5, #0
 8014c5a:	d040      	beq.n	8014cde <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8014c5c:	1d28      	adds	r0, r5, #4
 8014c5e:	f7ff ffe7 	bl	8014c30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014c62:	b988      	cbnz	r0, 8014c88 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014c64:	4620      	mov	r0, r4
 8014c66:	f7ff ffe3 	bl	8014c30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014c6a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014c6e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014c72:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014c76:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014c7a:	b138      	cbz	r0, 8014c8c <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014c7c:	8022      	strh	r2, [r4, #0]
 8014c7e:	8063      	strh	r3, [r4, #2]
 8014c80:	f8a4 e004 	strh.w	lr, [r4, #4]
 8014c84:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014c88:	69ad      	ldr	r5, [r5, #24]
 8014c8a:	e7e5      	b.n	8014c58 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8014c8c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014c90:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014c94:	4290      	cmp	r0, r2
 8014c96:	4607      	mov	r7, r0
 8014c98:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014c9c:	460e      	mov	r6, r1
 8014c9e:	bfa8      	it	ge
 8014ca0:	4617      	movge	r7, r2
 8014ca2:	4299      	cmp	r1, r3
 8014ca4:	4472      	add	r2, lr
 8014ca6:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014caa:	bfa8      	it	ge
 8014cac:	461e      	movge	r6, r3
 8014cae:	4440      	add	r0, r8
 8014cb0:	4471      	add	r1, lr
 8014cb2:	4463      	add	r3, ip
 8014cb4:	b200      	sxth	r0, r0
 8014cb6:	8027      	strh	r7, [r4, #0]
 8014cb8:	b212      	sxth	r2, r2
 8014cba:	8066      	strh	r6, [r4, #2]
 8014cbc:	b209      	sxth	r1, r1
 8014cbe:	b21b      	sxth	r3, r3
 8014cc0:	4290      	cmp	r0, r2
 8014cc2:	bfac      	ite	ge
 8014cc4:	ebc7 0200 	rsbge	r2, r7, r0
 8014cc8:	ebc7 0202 	rsblt	r2, r7, r2
 8014ccc:	4299      	cmp	r1, r3
 8014cce:	bfac      	ite	ge
 8014cd0:	ebc6 0301 	rsbge	r3, r6, r1
 8014cd4:	ebc6 0303 	rsblt	r3, r6, r3
 8014cd8:	80a2      	strh	r2, [r4, #4]
 8014cda:	80e3      	strh	r3, [r4, #6]
 8014cdc:	e7d4      	b.n	8014c88 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014cde:	4620      	mov	r0, r4
 8014ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ce4 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014ce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014ce8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014cec:	b383      	cbz	r3, 8014d50 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014cee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014cf0:	b374      	cbz	r4, 8014d50 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014cf2:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014cf6:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014cfa:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014cfe:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014d02:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014d06:	b303      	cbz	r3, 8014d4a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014d08:	4668      	mov	r0, sp
 8014d0a:	1d21      	adds	r1, r4, #4
 8014d0c:	f8ad 5000 	strh.w	r5, [sp]
 8014d10:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014d14:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014d18:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014d1c:	f7ff ff44 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 8014d20:	4668      	mov	r0, sp
 8014d22:	f7ff ff85 	bl	8014c30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014d26:	b980      	cbnz	r0, 8014d4a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014d28:	f8bd 3000 	ldrh.w	r3, [sp]
 8014d2c:	4669      	mov	r1, sp
 8014d2e:	88a2      	ldrh	r2, [r4, #4]
 8014d30:	4620      	mov	r0, r4
 8014d32:	1a9b      	subs	r3, r3, r2
 8014d34:	88e2      	ldrh	r2, [r4, #6]
 8014d36:	f8ad 3000 	strh.w	r3, [sp]
 8014d3a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014d3e:	1a9b      	subs	r3, r3, r2
 8014d40:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014d44:	6823      	ldr	r3, [r4, #0]
 8014d46:	689b      	ldr	r3, [r3, #8]
 8014d48:	4798      	blx	r3
 8014d4a:	69a4      	ldr	r4, [r4, #24]
 8014d4c:	2c00      	cmp	r4, #0
 8014d4e:	d1d8      	bne.n	8014d02 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014d50:	b002      	add	sp, #8
 8014d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d56 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d58:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014d5c:	460d      	mov	r5, r1
 8014d5e:	4616      	mov	r6, r2
 8014d60:	b323      	cbz	r3, 8014dac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014d62:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014d64:	b314      	cbz	r4, 8014dac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014d66:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014d6a:	b1eb      	cbz	r3, 8014da8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014d6c:	6828      	ldr	r0, [r5, #0]
 8014d6e:	466b      	mov	r3, sp
 8014d70:	6869      	ldr	r1, [r5, #4]
 8014d72:	c303      	stmia	r3!, {r0, r1}
 8014d74:	4668      	mov	r0, sp
 8014d76:	1d21      	adds	r1, r4, #4
 8014d78:	f7ff ff16 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 8014d7c:	4668      	mov	r0, sp
 8014d7e:	f7ff ff57 	bl	8014c30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014d82:	b988      	cbnz	r0, 8014da8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014d84:	f8bd 3000 	ldrh.w	r3, [sp]
 8014d88:	4669      	mov	r1, sp
 8014d8a:	88a2      	ldrh	r2, [r4, #4]
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	1a9b      	subs	r3, r3, r2
 8014d90:	88e2      	ldrh	r2, [r4, #6]
 8014d92:	f8ad 3000 	strh.w	r3, [sp]
 8014d96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014d9a:	1a9b      	subs	r3, r3, r2
 8014d9c:	4632      	mov	r2, r6
 8014d9e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014da2:	6823      	ldr	r3, [r4, #0]
 8014da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014da6:	4798      	blx	r3
 8014da8:	69a4      	ldr	r4, [r4, #24]
 8014daa:	e7db      	b.n	8014d64 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014dac:	b002      	add	sp, #8
 8014dae:	bd70      	pop	{r4, r5, r6, pc}

08014db0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8014db0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014db4:	4770      	bx	lr

08014db6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014db6:	6803      	ldr	r3, [r0, #0]
 8014db8:	b513      	push	{r0, r1, r4, lr}
 8014dba:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	e9cd 3300 	strd	r3, r3, [sp]
 8014dc4:	466b      	mov	r3, sp
 8014dc6:	47a0      	blx	r4
 8014dc8:	b002      	add	sp, #8
 8014dca:	bd10      	pop	{r4, pc}

08014dcc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014dcc:	2301      	movs	r3, #1
 8014dce:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014dd2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014dd6:	4770      	bx	lr

08014dd8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014dd8:	2301      	movs	r3, #1
 8014dda:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014dde:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014de2:	4770      	bx	lr

08014de4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014de4:	6843      	ldr	r3, [r0, #4]
 8014de6:	2201      	movs	r2, #1
 8014de8:	725a      	strb	r2, [r3, #9]
 8014dea:	6840      	ldr	r0, [r0, #4]
 8014dec:	6803      	ldr	r3, [r0, #0]
 8014dee:	691b      	ldr	r3, [r3, #16]
 8014df0:	4718      	bx	r3

08014df2 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014df2:	6840      	ldr	r0, [r0, #4]
 8014df4:	6803      	ldr	r3, [r0, #0]
 8014df6:	689b      	ldr	r3, [r3, #8]
 8014df8:	4718      	bx	r3
	...

08014dfc <_ZN8touchgfx3HAL10beginFrameEv>:
 8014dfc:	4b04      	ldr	r3, [pc, #16]	; (8014e10 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014dfe:	781b      	ldrb	r3, [r3, #0]
 8014e00:	b123      	cbz	r3, 8014e0c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014e02:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014e06:	f080 0001 	eor.w	r0, r0, #1
 8014e0a:	4770      	bx	lr
 8014e0c:	2001      	movs	r0, #1
 8014e0e:	4770      	bx	lr
 8014e10:	2000bc66 	.word	0x2000bc66

08014e14 <_ZN8touchgfx3HAL8endFrameEv>:
 8014e14:	b510      	push	{r4, lr}
 8014e16:	4604      	mov	r4, r0
 8014e18:	6840      	ldr	r0, [r0, #4]
 8014e1a:	6803      	ldr	r3, [r0, #0]
 8014e1c:	689b      	ldr	r3, [r3, #8]
 8014e1e:	4798      	blx	r3
 8014e20:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014e24:	b113      	cbz	r3, 8014e2c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014e26:	2301      	movs	r3, #1
 8014e28:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014e2c:	bd10      	pop	{r4, pc}

08014e2e <_ZN8touchgfx3HAL9taskEntryEv>:
 8014e2e:	b508      	push	{r3, lr}
 8014e30:	6803      	ldr	r3, [r0, #0]
 8014e32:	4604      	mov	r4, r0
 8014e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e36:	4798      	blx	r3
 8014e38:	6823      	ldr	r3, [r4, #0]
 8014e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e3c:	4620      	mov	r0, r4
 8014e3e:	4798      	blx	r3
 8014e40:	f7fd fec6 	bl	8012bd0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014e44:	6823      	ldr	r3, [r4, #0]
 8014e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e48:	e7f8      	b.n	8014e3c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08014e4c <_ZN8touchgfx3HAL4tickEv>:
 8014e4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014e4e:	6803      	ldr	r3, [r0, #0]
 8014e50:	4604      	mov	r4, r0
 8014e52:	4d5c      	ldr	r5, [pc, #368]	; (8014fc4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8014e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014e58:	4798      	blx	r3
 8014e5a:	2800      	cmp	r0, #0
 8014e5c:	f000 8097 	beq.w	8014f8e <_ZN8touchgfx3HAL4tickEv+0x142>
 8014e60:	2001      	movs	r0, #1
 8014e62:	2600      	movs	r6, #0
 8014e64:	f7fd fb98 	bl	8012598 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014e68:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8014e6c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014e70:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014e74:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8014e78:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8014e7c:	b133      	cbz	r3, 8014e8c <_ZN8touchgfx3HAL4tickEv+0x40>
 8014e7e:	6823      	ldr	r3, [r4, #0]
 8014e80:	4620      	mov	r0, r4
 8014e82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014e86:	4798      	blx	r3
 8014e88:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8014e8c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014e90:	2601      	movs	r6, #1
 8014e92:	6862      	ldr	r2, [r4, #4]
 8014e94:	f083 0301 	eor.w	r3, r3, #1
 8014e98:	702e      	strb	r6, [r5, #0]
 8014e9a:	7253      	strb	r3, [r2, #9]
 8014e9c:	f002 fff0 	bl	8017e80 <_ZN8touchgfx11Application11getInstanceEv>
 8014ea0:	6803      	ldr	r3, [r0, #0]
 8014ea2:	4631      	mov	r1, r6
 8014ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ea6:	4798      	blx	r3
 8014ea8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014eac:	b90b      	cbnz	r3, 8014eb2 <_ZN8touchgfx3HAL4tickEv+0x66>
 8014eae:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014eb2:	f002 ffe5 	bl	8017e80 <_ZN8touchgfx11Application11getInstanceEv>
 8014eb6:	6803      	ldr	r3, [r0, #0]
 8014eb8:	695b      	ldr	r3, [r3, #20]
 8014eba:	4798      	blx	r3
 8014ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ebe:	6803      	ldr	r3, [r0, #0]
 8014ec0:	691b      	ldr	r3, [r3, #16]
 8014ec2:	4798      	blx	r3
 8014ec4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014ec8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8014ecc:	3b01      	subs	r3, #1
 8014ece:	b2db      	uxtb	r3, r3
 8014ed0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014ed4:	b10a      	cbz	r2, 8014eda <_ZN8touchgfx3HAL4tickEv+0x8e>
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d1eb      	bne.n	8014eb2 <_ZN8touchgfx3HAL4tickEv+0x66>
 8014eda:	4a3b      	ldr	r2, [pc, #236]	; (8014fc8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014edc:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8014ee0:	7813      	ldrb	r3, [r2, #0]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	b25b      	sxtb	r3, r3
 8014ee6:	4299      	cmp	r1, r3
 8014ee8:	7013      	strb	r3, [r2, #0]
 8014eea:	dc10      	bgt.n	8014f0e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014eec:	2300      	movs	r3, #0
 8014eee:	68e0      	ldr	r0, [r4, #12]
 8014ef0:	a902      	add	r1, sp, #8
 8014ef2:	7013      	strb	r3, [r2, #0]
 8014ef4:	aa03      	add	r2, sp, #12
 8014ef6:	6803      	ldr	r3, [r0, #0]
 8014ef8:	68db      	ldr	r3, [r3, #12]
 8014efa:	4798      	blx	r3
 8014efc:	6823      	ldr	r3, [r4, #0]
 8014efe:	2800      	cmp	r0, #0
 8014f00:	d051      	beq.n	8014fa6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8014f02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014f06:	4620      	mov	r0, r4
 8014f08:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014f0c:	4798      	blx	r3
 8014f0e:	2300      	movs	r3, #0
 8014f10:	6960      	ldr	r0, [r4, #20]
 8014f12:	f88d 3007 	strb.w	r3, [sp, #7]
 8014f16:	b158      	cbz	r0, 8014f30 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014f18:	6803      	ldr	r3, [r0, #0]
 8014f1a:	f10d 0107 	add.w	r1, sp, #7
 8014f1e:	68db      	ldr	r3, [r3, #12]
 8014f20:	4798      	blx	r3
 8014f22:	b128      	cbz	r0, 8014f30 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f26:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014f2a:	6803      	ldr	r3, [r0, #0]
 8014f2c:	68db      	ldr	r3, [r3, #12]
 8014f2e:	4798      	blx	r3
 8014f30:	f104 001c 	add.w	r0, r4, #28
 8014f34:	f00d facc 	bl	80224d0 <_ZN8touchgfx8Gestures4tickEv>
 8014f38:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8014f3c:	b30b      	cbz	r3, 8014f82 <_ZN8touchgfx3HAL4tickEv+0x136>
 8014f3e:	6920      	ldr	r0, [r4, #16]
 8014f40:	6803      	ldr	r3, [r0, #0]
 8014f42:	691b      	ldr	r3, [r3, #16]
 8014f44:	4798      	blx	r3
 8014f46:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014f48:	4606      	mov	r6, r0
 8014f4a:	b903      	cbnz	r3, 8014f4e <_ZN8touchgfx3HAL4tickEv+0x102>
 8014f4c:	6720      	str	r0, [r4, #112]	; 0x70
 8014f4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014f50:	4a1e      	ldr	r2, [pc, #120]	; (8014fcc <_ZN8touchgfx3HAL4tickEv+0x180>)
 8014f52:	1af3      	subs	r3, r6, r3
 8014f54:	4293      	cmp	r3, r2
 8014f56:	d914      	bls.n	8014f82 <_ZN8touchgfx3HAL4tickEv+0x136>
 8014f58:	6920      	ldr	r0, [r4, #16]
 8014f5a:	6803      	ldr	r3, [r0, #0]
 8014f5c:	699b      	ldr	r3, [r3, #24]
 8014f5e:	4798      	blx	r3
 8014f60:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014f62:	2264      	movs	r2, #100	; 0x64
 8014f64:	1af3      	subs	r3, r6, r3
 8014f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8014f6e:	2800      	cmp	r0, #0
 8014f70:	dc1e      	bgt.n	8014fb0 <_ZN8touchgfx3HAL4tickEv+0x164>
 8014f72:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8014f76:	6920      	ldr	r0, [r4, #16]
 8014f78:	2100      	movs	r1, #0
 8014f7a:	6803      	ldr	r3, [r0, #0]
 8014f7c:	69db      	ldr	r3, [r3, #28]
 8014f7e:	4798      	blx	r3
 8014f80:	6726      	str	r6, [r4, #112]	; 0x70
 8014f82:	f002 ff7d 	bl	8017e80 <_ZN8touchgfx11Application11getInstanceEv>
 8014f86:	6803      	ldr	r3, [r0, #0]
 8014f88:	2100      	movs	r1, #0
 8014f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f8c:	4798      	blx	r3
 8014f8e:	6823      	ldr	r3, [r4, #0]
 8014f90:	4620      	mov	r0, r4
 8014f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014f96:	4798      	blx	r3
 8014f98:	2001      	movs	r0, #1
 8014f9a:	f7fd fb08 	bl	80125ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	702b      	strb	r3, [r5, #0]
 8014fa2:	b004      	add	sp, #16
 8014fa4:	bd70      	pop	{r4, r5, r6, pc}
 8014fa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014faa:	4620      	mov	r0, r4
 8014fac:	4798      	blx	r3
 8014fae:	e7ae      	b.n	8014f0e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014fb0:	2863      	cmp	r0, #99	; 0x63
 8014fb2:	bfcb      	itete	gt
 8014fb4:	2300      	movgt	r3, #0
 8014fb6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8014fba:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8014fbe:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8014fc2:	e7d8      	b.n	8014f76 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8014fc4:	2000bc6c 	.word	0x2000bc6c
 8014fc8:	2000bc6d 	.word	0x2000bc6d
 8014fcc:	05f5e100 	.word	0x05f5e100

08014fd0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014fd0:	f7fd bd9e 	b.w	8012b10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014fd4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014fd4:	6581      	str	r1, [r0, #88]	; 0x58
 8014fd6:	301c      	adds	r0, #28
 8014fd8:	f00d ba78 	b.w	80224cc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014fdc <_ZN8touchgfx3HAL5touchEll>:
 8014fdc:	b530      	push	{r4, r5, lr}
 8014fde:	b087      	sub	sp, #28
 8014fe0:	4604      	mov	r4, r0
 8014fe2:	a804      	add	r0, sp, #16
 8014fe4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014fe8:	f002 fd4e 	bl	8017a88 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014fec:	9b04      	ldr	r3, [sp, #16]
 8014fee:	a906      	add	r1, sp, #24
 8014ff0:	a803      	add	r0, sp, #12
 8014ff2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014ff6:	9b05      	ldr	r3, [sp, #20]
 8014ff8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014ffc:	f002 fd92 	bl	8017b24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015000:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015004:	f104 001c 	add.w	r0, r4, #28
 8015008:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801500c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015010:	b189      	cbz	r1, 8015036 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015012:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015016:	9300      	str	r3, [sp, #0]
 8015018:	4613      	mov	r3, r2
 801501a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801501e:	462a      	mov	r2, r5
 8015020:	f00d fa64 	bl	80224ec <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015024:	b128      	cbz	r0, 8015032 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015026:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801502a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801502c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015030:	6623      	str	r3, [r4, #96]	; 0x60
 8015032:	b007      	add	sp, #28
 8015034:	bd30      	pop	{r4, r5, pc}
 8015036:	f00d fa9d 	bl	8022574 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801503a:	2301      	movs	r3, #1
 801503c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015040:	e7f1      	b.n	8015026 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015042 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015042:	b570      	push	{r4, r5, r6, lr}
 8015044:	2b00      	cmp	r3, #0
 8015046:	d050      	beq.n	80150ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015048:	ea81 0002 	eor.w	r0, r1, r2
 801504c:	07c6      	lsls	r6, r0, #31
 801504e:	d508      	bpl.n	8015062 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015050:	3a01      	subs	r2, #1
 8015052:	18cc      	adds	r4, r1, r3
 8015054:	42a1      	cmp	r1, r4
 8015056:	d048      	beq.n	80150ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015058:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801505c:	f801 0b01 	strb.w	r0, [r1], #1
 8015060:	e7f8      	b.n	8015054 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015062:	07d5      	lsls	r5, r2, #31
 8015064:	bf42      	ittt	mi
 8015066:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801506a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801506e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015072:	2b01      	cmp	r3, #1
 8015074:	d915      	bls.n	80150a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015076:	ea82 0001 	eor.w	r0, r2, r1
 801507a:	0784      	lsls	r4, r0, #30
 801507c:	d02d      	beq.n	80150da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801507e:	1e94      	subs	r4, r2, #2
 8015080:	4608      	mov	r0, r1
 8015082:	18ce      	adds	r6, r1, r3
 8015084:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015088:	f820 5b02 	strh.w	r5, [r0], #2
 801508c:	1a35      	subs	r5, r6, r0
 801508e:	2d01      	cmp	r5, #1
 8015090:	d8f8      	bhi.n	8015084 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015092:	1e98      	subs	r0, r3, #2
 8015094:	f003 0301 	and.w	r3, r3, #1
 8015098:	f020 0001 	bic.w	r0, r0, #1
 801509c:	3002      	adds	r0, #2
 801509e:	4401      	add	r1, r0
 80150a0:	4402      	add	r2, r0
 80150a2:	1f14      	subs	r4, r2, #4
 80150a4:	4608      	mov	r0, r1
 80150a6:	18ce      	adds	r6, r1, r3
 80150a8:	1a35      	subs	r5, r6, r0
 80150aa:	2d03      	cmp	r5, #3
 80150ac:	d810      	bhi.n	80150d0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80150ae:	089c      	lsrs	r4, r3, #2
 80150b0:	00a0      	lsls	r0, r4, #2
 80150b2:	4401      	add	r1, r0
 80150b4:	3801      	subs	r0, #1
 80150b6:	4402      	add	r2, r0
 80150b8:	f06f 0003 	mvn.w	r0, #3
 80150bc:	fb00 3404 	mla	r4, r0, r4, r3
 80150c0:	440c      	add	r4, r1
 80150c2:	42a1      	cmp	r1, r4
 80150c4:	d011      	beq.n	80150ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80150c6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80150ca:	f801 3b01 	strb.w	r3, [r1], #1
 80150ce:	e7f8      	b.n	80150c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80150d0:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80150d4:	f840 5b04 	str.w	r5, [r0], #4
 80150d8:	e7e6      	b.n	80150a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 80150da:	0790      	lsls	r0, r2, #30
 80150dc:	d0e1      	beq.n	80150a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80150de:	f832 0b02 	ldrh.w	r0, [r2], #2
 80150e2:	3b02      	subs	r3, #2
 80150e4:	f821 0b02 	strh.w	r0, [r1], #2
 80150e8:	e7db      	b.n	80150a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80150ea:	2001      	movs	r0, #1
 80150ec:	bd70      	pop	{r4, r5, r6, pc}

080150ee <_ZN8touchgfx3HAL7noTouchEv>:
 80150ee:	b510      	push	{r4, lr}
 80150f0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80150f4:	4604      	mov	r4, r0
 80150f6:	b153      	cbz	r3, 801510e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80150f8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80150fc:	2101      	movs	r1, #1
 80150fe:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015102:	301c      	adds	r0, #28
 8015104:	f00d fa36 	bl	8022574 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015108:	2300      	movs	r3, #0
 801510a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801510e:	bd10      	pop	{r4, pc}

08015110 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015114:	4605      	mov	r5, r0
 8015116:	6980      	ldr	r0, [r0, #24]
 8015118:	b085      	sub	sp, #20
 801511a:	460f      	mov	r7, r1
 801511c:	4690      	mov	r8, r2
 801511e:	4699      	mov	r9, r3
 8015120:	b930      	cbnz	r0, 8015130 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015122:	4b1f      	ldr	r3, [pc, #124]	; (80151a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015124:	f44f 7198 	mov.w	r1, #304	; 0x130
 8015128:	4a1e      	ldr	r2, [pc, #120]	; (80151a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801512a:	481f      	ldr	r0, [pc, #124]	; (80151a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801512c:	f00e fe9c 	bl	8023e68 <__assert_func>
 8015130:	ac04      	add	r4, sp, #16
 8015132:	2600      	movs	r6, #0
 8015134:	f844 6d04 	str.w	r6, [r4, #-4]!
 8015138:	6806      	ldr	r6, [r0, #0]
 801513a:	9401      	str	r4, [sp, #4]
 801513c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015140:	9400      	str	r4, [sp, #0]
 8015142:	6834      	ldr	r4, [r6, #0]
 8015144:	47a0      	blx	r4
 8015146:	4c19      	ldr	r4, [pc, #100]	; (80151ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8015148:	4606      	mov	r6, r0
 801514a:	f8a4 9000 	strh.w	r9, [r4]
 801514e:	f7f9 ff73 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8015152:	6803      	ldr	r3, [r0, #0]
 8015154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015156:	4798      	blx	r3
 8015158:	280c      	cmp	r0, #12
 801515a:	d80f      	bhi.n	801517c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801515c:	e8df f000 	tbb	[pc, r0]
 8015160:	1b1b1207 	.word	0x1b1b1207
 8015164:	1b1b1b1b 	.word	0x1b1b1b1b
 8015168:	1b1b1b1b 	.word	0x1b1b1b1b
 801516c:	1b          	.byte	0x1b
 801516d:	00          	.byte	0x00
 801516e:	8823      	ldrh	r3, [r4, #0]
 8015170:	fb08 7203 	mla	r2, r8, r3, r7
 8015174:	9b03      	ldr	r3, [sp, #12]
 8015176:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801517a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801517c:	4630      	mov	r0, r6
 801517e:	b005      	add	sp, #20
 8015180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015184:	8822      	ldrh	r2, [r4, #0]
 8015186:	9b03      	ldr	r3, [sp, #12]
 8015188:	fb08 7202 	mla	r2, r8, r2, r7
 801518c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015190:	1a9a      	subs	r2, r3, r2
 8015192:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015194:	e7f2      	b.n	801517c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015196:	4b06      	ldr	r3, [pc, #24]	; (80151b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8015198:	f240 114d 	movw	r1, #333	; 0x14d
 801519c:	4a01      	ldr	r2, [pc, #4]	; (80151a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801519e:	e7c4      	b.n	801512a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80151a0:	08026745 	.word	0x08026745
 80151a4:	08026a56 	.word	0x08026a56
 80151a8:	0802678a 	.word	0x0802678a
 80151ac:	2000bc62 	.word	0x2000bc62
 80151b0:	080267b0 	.word	0x080267b0

080151b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 80151b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151b8:	4698      	mov	r8, r3
 80151ba:	6803      	ldr	r3, [r0, #0]
 80151bc:	b087      	sub	sp, #28
 80151be:	460e      	mov	r6, r1
 80151c0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80151c2:	4617      	mov	r7, r2
 80151c4:	4b0d      	ldr	r3, [pc, #52]	; (80151fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 80151c6:	4604      	mov	r4, r0
 80151c8:	f8b3 9000 	ldrh.w	r9, [r3]
 80151cc:	f7f9 ff34 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 80151d0:	6803      	ldr	r3, [r0, #0]
 80151d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d4:	4798      	blx	r3
 80151d6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80151da:	463a      	mov	r2, r7
 80151dc:	4631      	mov	r1, r6
 80151de:	9302      	str	r3, [sp, #8]
 80151e0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80151e4:	9301      	str	r3, [sp, #4]
 80151e6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80151ea:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80151ee:	9300      	str	r3, [sp, #0]
 80151f0:	4620      	mov	r0, r4
 80151f2:	4643      	mov	r3, r8
 80151f4:	47a8      	blx	r5
 80151f6:	b007      	add	sp, #28
 80151f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151fc:	2000bc62 	.word	0x2000bc62

08015200 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015204:	4606      	mov	r6, r0
 8015206:	b089      	sub	sp, #36	; 0x24
 8015208:	4610      	mov	r0, r2
 801520a:	460c      	mov	r4, r1
 801520c:	4691      	mov	r9, r2
 801520e:	4698      	mov	r8, r3
 8015210:	f005 f818 	bl	801a244 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015214:	2800      	cmp	r0, #0
 8015216:	f000 8092 	beq.w	801533e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801521a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8015358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801521e:	ad08      	add	r5, sp, #32
 8015220:	f8df b138 	ldr.w	fp, [pc, #312]	; 801535c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8015224:	f8da 0000 	ldr.w	r0, [sl]
 8015228:	4f4a      	ldr	r7, [pc, #296]	; (8015354 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801522a:	6802      	ldr	r2, [r0, #0]
 801522c:	6a12      	ldr	r2, [r2, #32]
 801522e:	4790      	blx	r2
 8015230:	f8da 0000 	ldr.w	r0, [sl]
 8015234:	6802      	ldr	r2, [r0, #0]
 8015236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015238:	4790      	blx	r2
 801523a:	f8bb 3000 	ldrh.w	r3, [fp]
 801523e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8015242:	4628      	mov	r0, r5
 8015244:	9300      	str	r3, [sp, #0]
 8015246:	883b      	ldrh	r3, [r7, #0]
 8015248:	9301      	str	r3, [sp, #4]
 801524a:	f005 f8bb 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801524e:	f8ab 0000 	strh.w	r0, [fp]
 8015252:	4628      	mov	r0, r5
 8015254:	f005 f8f0 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015258:	f8da b000 	ldr.w	fp, [sl]
 801525c:	8038      	strh	r0, [r7, #0]
 801525e:	4648      	mov	r0, r9
 8015260:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8015264:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8015268:	9302      	str	r3, [sp, #8]
 801526a:	f004 ffeb 	bl	801a244 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801526e:	f8da 2000 	ldr.w	r2, [sl]
 8015272:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8015276:	63d0      	str	r0, [r2, #60]	; 0x3c
 8015278:	4620      	mov	r0, r4
 801527a:	6822      	ldr	r2, [r4, #0]
 801527c:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8015280:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015282:	2200      	movs	r2, #0
 8015284:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8015288:	4611      	mov	r1, r2
 801528a:	4798      	blx	r3
 801528c:	2201      	movs	r2, #1
 801528e:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8015292:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8015296:	1d22      	adds	r2, r4, #4
 8015298:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801529c:	2900      	cmp	r1, #0
 801529e:	d051      	beq.n	8015344 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 80152a0:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 80152a4:	2900      	cmp	r1, #0
 80152a6:	d04d      	beq.n	8015344 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 80152a8:	6810      	ldr	r0, [r2, #0]
 80152aa:	f10d 0c18 	add.w	ip, sp, #24
 80152ae:	6851      	ldr	r1, [r2, #4]
 80152b0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80152b4:	4641      	mov	r1, r8
 80152b6:	a806      	add	r0, sp, #24
 80152b8:	f7ff fc76 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 80152bc:	4628      	mov	r0, r5
 80152be:	f005 fa0d 	bl	801a6dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80152c2:	4680      	mov	r8, r0
 80152c4:	f7f9 feb8 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 80152c8:	6802      	ldr	r2, [r0, #0]
 80152ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80152cc:	4790      	blx	r2
 80152ce:	4580      	cmp	r8, r0
 80152d0:	d03d      	beq.n	801534e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 80152d2:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80152d4:	b150      	cbz	r0, 80152ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80152d6:	4628      	mov	r0, r5
 80152d8:	f005 fa00 	bl	801a6dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80152dc:	4605      	mov	r5, r0
 80152de:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80152e0:	6803      	ldr	r3, [r0, #0]
 80152e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152e4:	4798      	blx	r3
 80152e6:	1a2b      	subs	r3, r5, r0
 80152e8:	4258      	negs	r0, r3
 80152ea:	4158      	adcs	r0, r3
 80152ec:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80152f0:	2500      	movs	r5, #0
 80152f2:	6963      	ldr	r3, [r4, #20]
 80152f4:	4620      	mov	r0, r4
 80152f6:	6822      	ldr	r2, [r4, #0]
 80152f8:	a906      	add	r1, sp, #24
 80152fa:	6165      	str	r5, [r4, #20]
 80152fc:	9303      	str	r3, [sp, #12]
 80152fe:	6892      	ldr	r2, [r2, #8]
 8015300:	4790      	blx	r2
 8015302:	9b03      	ldr	r3, [sp, #12]
 8015304:	4620      	mov	r0, r4
 8015306:	4652      	mov	r2, sl
 8015308:	6163      	str	r3, [r4, #20]
 801530a:	4649      	mov	r1, r9
 801530c:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8015310:	6823      	ldr	r3, [r4, #0]
 8015312:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8015316:	4c10      	ldr	r4, [pc, #64]	; (8015358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8015318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801531a:	4798      	blx	r3
 801531c:	6820      	ldr	r0, [r4, #0]
 801531e:	9b02      	ldr	r3, [sp, #8]
 8015320:	9a00      	ldr	r2, [sp, #0]
 8015322:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8015326:	4b0d      	ldr	r3, [pc, #52]	; (801535c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8015328:	801a      	strh	r2, [r3, #0]
 801532a:	4b0a      	ldr	r3, [pc, #40]	; (8015354 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801532c:	9a01      	ldr	r2, [sp, #4]
 801532e:	801a      	strh	r2, [r3, #0]
 8015330:	6803      	ldr	r3, [r0, #0]
 8015332:	6a1b      	ldr	r3, [r3, #32]
 8015334:	4798      	blx	r3
 8015336:	6820      	ldr	r0, [r4, #0]
 8015338:	6803      	ldr	r3, [r0, #0]
 801533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801533c:	4798      	blx	r3
 801533e:	b009      	add	sp, #36	; 0x24
 8015340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015344:	ab06      	add	r3, sp, #24
 8015346:	6810      	ldr	r0, [r2, #0]
 8015348:	6851      	ldr	r1, [r2, #4]
 801534a:	c303      	stmia	r3!, {r0, r1}
 801534c:	e7b6      	b.n	80152bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 801534e:	2000      	movs	r0, #0
 8015350:	e7cc      	b.n	80152ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015352:	bf00      	nop
 8015354:	2000bc64 	.word	0x2000bc64
 8015358:	2000bc68 	.word	0x2000bc68
 801535c:	2000bc62 	.word	0x2000bc62

08015360 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015360:	4b07      	ldr	r3, [pc, #28]	; (8015380 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015362:	b510      	push	{r4, lr}
 8015364:	781b      	ldrb	r3, [r3, #0]
 8015366:	4604      	mov	r4, r0
 8015368:	b13b      	cbz	r3, 801537a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801536a:	6803      	ldr	r3, [r0, #0]
 801536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801536e:	4798      	blx	r3
 8015370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015372:	4283      	cmp	r3, r0
 8015374:	d101      	bne.n	801537a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015376:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015378:	bd10      	pop	{r4, pc}
 801537a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801537c:	e7fc      	b.n	8015378 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801537e:	bf00      	nop
 8015380:	2000bc66 	.word	0x2000bc66

08015384 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015384:	4b0b      	ldr	r3, [pc, #44]	; (80153b4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8015386:	b510      	push	{r4, lr}
 8015388:	781b      	ldrb	r3, [r3, #0]
 801538a:	4604      	mov	r4, r0
 801538c:	b95b      	cbnz	r3, 80153a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801538e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015392:	2b02      	cmp	r3, #2
 8015394:	d007      	beq.n	80153a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015396:	6840      	ldr	r0, [r0, #4]
 8015398:	f000 fbc8 	bl	8015b2c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801539c:	b118      	cbz	r0, 80153a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801539e:	6862      	ldr	r2, [r4, #4]
 80153a0:	7a53      	ldrb	r3, [r2, #9]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d0fc      	beq.n	80153a0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80153a6:	f7fd fba5 	bl	8012af4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80153aa:	4620      	mov	r0, r4
 80153ac:	f7ff ffd8 	bl	8015360 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80153b0:	bd10      	pop	{r4, pc}
 80153b2:	bf00      	nop
 80153b4:	2000bc66 	.word	0x2000bc66

080153b8 <_ZN8touchgfx3HAL10initializeEv>:
 80153b8:	b510      	push	{r4, lr}
 80153ba:	4604      	mov	r4, r0
 80153bc:	f7fd fb76 	bl	8012aac <_ZN8touchgfx10OSWrappers10initializeEv>
 80153c0:	6860      	ldr	r0, [r4, #4]
 80153c2:	6803      	ldr	r3, [r0, #0]
 80153c4:	68db      	ldr	r3, [r3, #12]
 80153c6:	4798      	blx	r3
 80153c8:	68e0      	ldr	r0, [r4, #12]
 80153ca:	6803      	ldr	r3, [r0, #0]
 80153cc:	689b      	ldr	r3, [r3, #8]
 80153ce:	4798      	blx	r3
 80153d0:	6823      	ldr	r3, [r4, #0]
 80153d2:	4620      	mov	r0, r4
 80153d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80153d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153da:	4718      	bx	r3

080153dc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80153dc:	b508      	push	{r3, lr}
 80153de:	290c      	cmp	r1, #12
 80153e0:	d817      	bhi.n	8015412 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80153e2:	e8df f001 	tbb	[pc, r1]
 80153e6:	090b      	.short	0x090b
 80153e8:	0d0d0d07 	.word	0x0d0d0d07
 80153ec:	1414140d 	.word	0x1414140d
 80153f0:	1414      	.short	0x1414
 80153f2:	0d          	.byte	0x0d
 80153f3:	00          	.byte	0x00
 80153f4:	2020      	movs	r0, #32
 80153f6:	bd08      	pop	{r3, pc}
 80153f8:	2018      	movs	r0, #24
 80153fa:	e7fc      	b.n	80153f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80153fc:	2010      	movs	r0, #16
 80153fe:	e7fa      	b.n	80153f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015400:	4b05      	ldr	r3, [pc, #20]	; (8015418 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015402:	f44f 710c 	mov.w	r1, #560	; 0x230
 8015406:	4a05      	ldr	r2, [pc, #20]	; (801541c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015408:	4805      	ldr	r0, [pc, #20]	; (8015420 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801540a:	f00e fd2d 	bl	8023e68 <__assert_func>
 801540e:	2008      	movs	r0, #8
 8015410:	e7f1      	b.n	80153f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015412:	2000      	movs	r0, #0
 8015414:	e7ef      	b.n	80153f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015416:	bf00      	nop
 8015418:	08026883 	.word	0x08026883
 801541c:	08026c18 	.word	0x08026c18
 8015420:	0802678a 	.word	0x0802678a

08015424 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015424:	b570      	push	{r4, r5, r6, lr}
 8015426:	460d      	mov	r5, r1
 8015428:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801542c:	4616      	mov	r6, r2
 801542e:	461c      	mov	r4, r3
 8015430:	f7ff ffd4 	bl	80153dc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015434:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015438:	10c0      	asrs	r0, r0, #3
 801543a:	fb06 5101 	mla	r1, r6, r1, r5
 801543e:	fb00 4001 	mla	r0, r0, r1, r4
 8015442:	bd70      	pop	{r4, r5, r6, pc}

08015444 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015448:	b08a      	sub	sp, #40	; 0x28
 801544a:	f04f 0c00 	mov.w	ip, #0
 801544e:	4604      	mov	r4, r0
 8015450:	469a      	mov	sl, r3
 8015452:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015456:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801545a:	f1b8 0f02 	cmp.w	r8, #2
 801545e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015462:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015466:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801546a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801546e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015472:	f8cd c020 	str.w	ip, [sp, #32]
 8015476:	d030      	beq.n	80154da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015478:	2bff      	cmp	r3, #255	; 0xff
 801547a:	d12c      	bne.n	80154d6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801547c:	4560      	cmp	r0, ip
 801547e:	bf14      	ite	ne
 8015480:	2004      	movne	r0, #4
 8015482:	2001      	moveq	r0, #1
 8015484:	9204      	str	r2, [sp, #16]
 8015486:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801548a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801548e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015492:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015496:	f8ad 501a 	strh.w	r5, [sp, #26]
 801549a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801549e:	4620      	mov	r0, r4
 80154a0:	f7ff ff5e 	bl	8015360 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80154a4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80154a8:	4603      	mov	r3, r0
 80154aa:	4651      	mov	r1, sl
 80154ac:	4620      	mov	r0, r4
 80154ae:	e9cd 9700 	strd	r9, r7, [sp]
 80154b2:	f7ff ffb7 	bl	8015424 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80154b6:	f8ad 901e 	strh.w	r9, [sp, #30]
 80154ba:	9005      	str	r0, [sp, #20]
 80154bc:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80154c0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80154c4:	b106      	cbz	r6, 80154c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 80154c6:	b98d      	cbnz	r5, 80154ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 80154c8:	4b12      	ldr	r3, [pc, #72]	; (8015514 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 80154ca:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80154ce:	4a12      	ldr	r2, [pc, #72]	; (8015518 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80154d0:	4812      	ldr	r0, [pc, #72]	; (801551c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 80154d2:	f00e fcc9 	bl	8023e68 <__assert_func>
 80154d6:	2004      	movs	r0, #4
 80154d8:	e7d4      	b.n	8015484 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80154da:	2bff      	cmp	r3, #255	; 0xff
 80154dc:	d104      	bne.n	80154e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 80154de:	2800      	cmp	r0, #0
 80154e0:	bf14      	ite	ne
 80154e2:	2040      	movne	r0, #64	; 0x40
 80154e4:	2020      	moveq	r0, #32
 80154e6:	e7cd      	b.n	8015484 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80154e8:	2040      	movs	r0, #64	; 0x40
 80154ea:	e7cb      	b.n	8015484 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80154ec:	6823      	ldr	r3, [r4, #0]
 80154ee:	4620      	mov	r0, r4
 80154f0:	9d02      	ldr	r5, [sp, #8]
 80154f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154f4:	4798      	blx	r3
 80154f6:	4228      	tst	r0, r5
 80154f8:	d104      	bne.n	8015504 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80154fa:	4b09      	ldr	r3, [pc, #36]	; (8015520 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80154fc:	f240 11b1 	movw	r1, #433	; 0x1b1
 8015500:	4a05      	ldr	r2, [pc, #20]	; (8015518 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015502:	e7e5      	b.n	80154d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8015504:	6860      	ldr	r0, [r4, #4]
 8015506:	a902      	add	r1, sp, #8
 8015508:	6803      	ldr	r3, [r0, #0]
 801550a:	685b      	ldr	r3, [r3, #4]
 801550c:	4798      	blx	r3
 801550e:	b00a      	add	sp, #40	; 0x28
 8015510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015514:	08026806 	.word	0x08026806
 8015518:	08026aba 	.word	0x08026aba
 801551c:	0802678a 	.word	0x0802678a
 8015520:	0802683e 	.word	0x0802683e

08015524 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015524:	b510      	push	{r4, lr}
 8015526:	b08a      	sub	sp, #40	; 0x28
 8015528:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801552c:	9408      	str	r4, [sp, #32]
 801552e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8015532:	9407      	str	r4, [sp, #28]
 8015534:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8015538:	9406      	str	r4, [sp, #24]
 801553a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801553e:	9405      	str	r4, [sp, #20]
 8015540:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8015544:	9404      	str	r4, [sp, #16]
 8015546:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801554a:	9403      	str	r4, [sp, #12]
 801554c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8015550:	9402      	str	r4, [sp, #8]
 8015552:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015556:	e9cd 3400 	strd	r3, r4, [sp]
 801555a:	4613      	mov	r3, r2
 801555c:	2200      	movs	r2, #0
 801555e:	f7ff ff71 	bl	8015444 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015562:	b00a      	add	sp, #40	; 0x28
 8015564:	bd10      	pop	{r4, pc}
	...

08015568 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8015568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801556a:	b08b      	sub	sp, #44	; 0x2c
 801556c:	4616      	mov	r6, r2
 801556e:	460d      	mov	r5, r1
 8015570:	461f      	mov	r7, r3
 8015572:	4604      	mov	r4, r0
 8015574:	f7f9 fd60 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8015578:	6803      	ldr	r3, [r0, #0]
 801557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801557c:	4798      	blx	r3
 801557e:	4b0e      	ldr	r3, [pc, #56]	; (80155b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8015580:	2200      	movs	r2, #0
 8015582:	4629      	mov	r1, r5
 8015584:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015588:	881b      	ldrh	r3, [r3, #0]
 801558a:	4620      	mov	r0, r4
 801558c:	9306      	str	r3, [sp, #24]
 801558e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015592:	9305      	str	r3, [sp, #20]
 8015594:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015598:	9304      	str	r3, [sp, #16]
 801559a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801559e:	9303      	str	r3, [sp, #12]
 80155a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80155a4:	9302      	str	r3, [sp, #8]
 80155a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80155aa:	e9cd 7300 	strd	r7, r3, [sp]
 80155ae:	4633      	mov	r3, r6
 80155b0:	f7ff ff48 	bl	8015444 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80155b4:	b00b      	add	sp, #44	; 0x2c
 80155b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155b8:	2000bc62 	.word	0x2000bc62

080155bc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80155bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155c0:	461f      	mov	r7, r3
 80155c2:	4b14      	ldr	r3, [pc, #80]	; (8015614 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80155c4:	b08a      	sub	sp, #40	; 0x28
 80155c6:	4616      	mov	r6, r2
 80155c8:	f8b3 8000 	ldrh.w	r8, [r3]
 80155cc:	460d      	mov	r5, r1
 80155ce:	4604      	mov	r4, r0
 80155d0:	f7f9 fd32 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 80155d4:	6803      	ldr	r3, [r0, #0]
 80155d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155d8:	4798      	blx	r3
 80155da:	2302      	movs	r3, #2
 80155dc:	9008      	str	r0, [sp, #32]
 80155de:	2200      	movs	r2, #0
 80155e0:	4629      	mov	r1, r5
 80155e2:	4620      	mov	r0, r4
 80155e4:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80155e8:	2301      	movs	r3, #1
 80155ea:	9305      	str	r3, [sp, #20]
 80155ec:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80155f0:	9304      	str	r3, [sp, #16]
 80155f2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80155f6:	9303      	str	r3, [sp, #12]
 80155f8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80155fc:	9302      	str	r3, [sp, #8]
 80155fe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015602:	e9cd 7300 	strd	r7, r3, [sp]
 8015606:	4633      	mov	r3, r6
 8015608:	f7ff ff1c 	bl	8015444 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801560c:	b00a      	add	sp, #40	; 0x28
 801560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015612:	bf00      	nop
 8015614:	2000bc62 	.word	0x2000bc62

08015618 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8015618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801561c:	b08b      	sub	sp, #44	; 0x2c
 801561e:	469b      	mov	fp, r3
 8015620:	4604      	mov	r4, r0
 8015622:	4692      	mov	sl, r2
 8015624:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015628:	2600      	movs	r6, #0
 801562a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801562e:	4689      	mov	r9, r1
 8015630:	2fff      	cmp	r7, #255	; 0xff
 8015632:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8015636:	9608      	str	r6, [sp, #32]
 8015638:	bf14      	ite	ne
 801563a:	2308      	movne	r3, #8
 801563c:	2302      	moveq	r3, #2
 801563e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8015642:	f7ff fe8d 	bl	8015360 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015646:	465a      	mov	r2, fp
 8015648:	4603      	mov	r3, r0
 801564a:	4651      	mov	r1, sl
 801564c:	4620      	mov	r0, r4
 801564e:	e9cd 8500 	strd	r8, r5, [sp]
 8015652:	f7ff fee7 	bl	8015424 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015656:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801565a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801565e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015662:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015666:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801566a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801566e:	6823      	ldr	r3, [r4, #0]
 8015670:	9d02      	ldr	r5, [sp, #8]
 8015672:	9005      	str	r0, [sp, #20]
 8015674:	4620      	mov	r0, r4
 8015676:	f8ad 601c 	strh.w	r6, [sp, #28]
 801567a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801567e:	f8cd 9020 	str.w	r9, [sp, #32]
 8015682:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015688:	4798      	blx	r3
 801568a:	4228      	tst	r0, r5
 801568c:	d106      	bne.n	801569c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801568e:	4b07      	ldr	r3, [pc, #28]	; (80156ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015690:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8015694:	4a06      	ldr	r2, [pc, #24]	; (80156b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015696:	4807      	ldr	r0, [pc, #28]	; (80156b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015698:	f00e fbe6 	bl	8023e68 <__assert_func>
 801569c:	6860      	ldr	r0, [r4, #4]
 801569e:	a902      	add	r1, sp, #8
 80156a0:	6803      	ldr	r3, [r0, #0]
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	4798      	blx	r3
 80156a6:	b00b      	add	sp, #44	; 0x2c
 80156a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ac:	0802683e 	.word	0x0802683e
 80156b0:	08026b83 	.word	0x08026b83
 80156b4:	0802678a 	.word	0x0802678a

080156b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80156b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80156bc:	461f      	mov	r7, r3
 80156be:	4b0b      	ldr	r3, [pc, #44]	; (80156ec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80156c0:	460d      	mov	r5, r1
 80156c2:	4616      	mov	r6, r2
 80156c4:	f8b3 8000 	ldrh.w	r8, [r3]
 80156c8:	4604      	mov	r4, r0
 80156ca:	f7f9 fcb5 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 80156ce:	6803      	ldr	r3, [r0, #0]
 80156d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156d2:	4798      	blx	r3
 80156d4:	463b      	mov	r3, r7
 80156d6:	4632      	mov	r2, r6
 80156d8:	4629      	mov	r1, r5
 80156da:	e9cd 8000 	strd	r8, r0, [sp]
 80156de:	4620      	mov	r0, r4
 80156e0:	f7ff fea0 	bl	8015424 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80156e4:	b002      	add	sp, #8
 80156e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ea:	bf00      	nop
 80156ec:	2000bc62 	.word	0x2000bc62

080156f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80156f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156f4:	4698      	mov	r8, r3
 80156f6:	b088      	sub	sp, #32
 80156f8:	2300      	movs	r3, #0
 80156fa:	4617      	mov	r7, r2
 80156fc:	4604      	mov	r4, r0
 80156fe:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015702:	9306      	str	r3, [sp, #24]
 8015704:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015708:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801570c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8015710:	f8ad 5012 	strh.w	r5, [sp, #18]
 8015714:	e9cd 3100 	strd	r3, r1, [sp]
 8015718:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801571c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015720:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015724:	f88d 301c 	strb.w	r3, [sp, #28]
 8015728:	f7ff fe1a 	bl	8015360 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801572c:	4642      	mov	r2, r8
 801572e:	4603      	mov	r3, r0
 8015730:	4639      	mov	r1, r7
 8015732:	4620      	mov	r0, r4
 8015734:	f7ff ffc0 	bl	80156b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015738:	4b16      	ldr	r3, [pc, #88]	; (8015794 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801573a:	9003      	str	r0, [sp, #12]
 801573c:	881b      	ldrh	r3, [r3, #0]
 801573e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015742:	f7f9 fc79 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8015746:	6803      	ldr	r3, [r0, #0]
 8015748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801574a:	4798      	blx	r3
 801574c:	f88d 001e 	strb.w	r0, [sp, #30]
 8015750:	f88d 001d 	strb.w	r0, [sp, #29]
 8015754:	b106      	cbz	r6, 8015758 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8015756:	b935      	cbnz	r5, 8015766 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8015758:	4b0f      	ldr	r3, [pc, #60]	; (8015798 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801575a:	f240 11cd 	movw	r1, #461	; 0x1cd
 801575e:	4a0f      	ldr	r2, [pc, #60]	; (801579c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015760:	480f      	ldr	r0, [pc, #60]	; (80157a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8015762:	f00e fb81 	bl	8023e68 <__assert_func>
 8015766:	6823      	ldr	r3, [r4, #0]
 8015768:	4620      	mov	r0, r4
 801576a:	9d00      	ldr	r5, [sp, #0]
 801576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801576e:	4798      	blx	r3
 8015770:	4228      	tst	r0, r5
 8015772:	d104      	bne.n	801577e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015774:	4b0b      	ldr	r3, [pc, #44]	; (80157a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8015776:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801577a:	4a08      	ldr	r2, [pc, #32]	; (801579c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801577c:	e7f0      	b.n	8015760 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801577e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015780:	4669      	mov	r1, sp
 8015782:	6860      	ldr	r0, [r4, #4]
 8015784:	9306      	str	r3, [sp, #24]
 8015786:	6803      	ldr	r3, [r0, #0]
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	4798      	blx	r3
 801578c:	b008      	add	sp, #32
 801578e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015792:	bf00      	nop
 8015794:	2000bc62 	.word	0x2000bc62
 8015798:	08026806 	.word	0x08026806
 801579c:	0802696c 	.word	0x0802696c
 80157a0:	0802678a 	.word	0x0802678a
 80157a4:	0802683e 	.word	0x0802683e

080157a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80157a8:	b570      	push	{r4, r5, r6, lr}
 80157aa:	b08a      	sub	sp, #40	; 0x28
 80157ac:	4604      	mov	r4, r0
 80157ae:	466b      	mov	r3, sp
 80157b0:	e883 0006 	stmia.w	r3, {r1, r2}
 80157b4:	4b1f      	ldr	r3, [pc, #124]	; (8015834 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80157b6:	781b      	ldrb	r3, [r3, #0]
 80157b8:	b933      	cbnz	r3, 80157c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80157ba:	4b1f      	ldr	r3, [pc, #124]	; (8015838 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80157bc:	f240 11f9 	movw	r1, #505	; 0x1f9
 80157c0:	4a1e      	ldr	r2, [pc, #120]	; (801583c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80157c2:	481f      	ldr	r0, [pc, #124]	; (8015840 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80157c4:	f00e fb50 	bl	8023e68 <__assert_func>
 80157c8:	2300      	movs	r3, #0
 80157ca:	f8bd 5000 	ldrh.w	r5, [sp]
 80157ce:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80157d2:	9308      	str	r3, [sp, #32]
 80157d4:	2301      	movs	r3, #1
 80157d6:	9302      	str	r3, [sp, #8]
 80157d8:	6803      	ldr	r3, [r0, #0]
 80157da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157dc:	4798      	blx	r3
 80157de:	4632      	mov	r2, r6
 80157e0:	4629      	mov	r1, r5
 80157e2:	4603      	mov	r3, r0
 80157e4:	4620      	mov	r0, r4
 80157e6:	f7ff ff67 	bl	80156b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80157ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80157ec:	9003      	str	r0, [sp, #12]
 80157ee:	9305      	str	r3, [sp, #20]
 80157f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80157f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80157f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80157fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015800:	4b10      	ldr	r3, [pc, #64]	; (8015844 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8015802:	881b      	ldrh	r3, [r3, #0]
 8015804:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015808:	f8ad 301e 	strh.w	r3, [sp, #30]
 801580c:	f7f9 fc14 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8015810:	6803      	ldr	r3, [r0, #0]
 8015812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015814:	4798      	blx	r3
 8015816:	23ff      	movs	r3, #255	; 0xff
 8015818:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801581c:	a902      	add	r1, sp, #8
 801581e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015822:	6860      	ldr	r0, [r4, #4]
 8015824:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015828:	6803      	ldr	r3, [r0, #0]
 801582a:	685b      	ldr	r3, [r3, #4]
 801582c:	4798      	blx	r3
 801582e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015830:	b00a      	add	sp, #40	; 0x28
 8015832:	bd70      	pop	{r4, r5, r6, pc}
 8015834:	2000bc67 	.word	0x2000bc67
 8015838:	080266d7 	.word	0x080266d7
 801583c:	08026a10 	.word	0x08026a10
 8015840:	0802678a 	.word	0x0802678a
 8015844:	2000bc62 	.word	0x2000bc62

08015848 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801584a:	b08b      	sub	sp, #44	; 0x2c
 801584c:	4604      	mov	r4, r0
 801584e:	466d      	mov	r5, sp
 8015850:	e885 0006 	stmia.w	r5, {r1, r2}
 8015854:	461d      	mov	r5, r3
 8015856:	2300      	movs	r3, #0
 8015858:	f8bd 6000 	ldrh.w	r6, [sp]
 801585c:	9308      	str	r3, [sp, #32]
 801585e:	2301      	movs	r3, #1
 8015860:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015864:	9302      	str	r3, [sp, #8]
 8015866:	6803      	ldr	r3, [r0, #0]
 8015868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801586a:	4798      	blx	r3
 801586c:	463a      	mov	r2, r7
 801586e:	4631      	mov	r1, r6
 8015870:	4603      	mov	r3, r0
 8015872:	4620      	mov	r0, r4
 8015874:	f7ff ff20 	bl	80156b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015878:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801587c:	9003      	str	r0, [sp, #12]
 801587e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015882:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015886:	9505      	str	r5, [sp, #20]
 8015888:	f8ad 301a 	strh.w	r3, [sp, #26]
 801588c:	4b0d      	ldr	r3, [pc, #52]	; (80158c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801588e:	881b      	ldrh	r3, [r3, #0]
 8015890:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015896:	f8ad 301e 	strh.w	r3, [sp, #30]
 801589a:	f7f9 fbcd 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 801589e:	6803      	ldr	r3, [r0, #0]
 80158a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158a2:	4798      	blx	r3
 80158a4:	23ff      	movs	r3, #255	; 0xff
 80158a6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80158aa:	a902      	add	r1, sp, #8
 80158ac:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80158b0:	6860      	ldr	r0, [r4, #4]
 80158b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80158b6:	6803      	ldr	r3, [r0, #0]
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	4798      	blx	r3
 80158bc:	4628      	mov	r0, r5
 80158be:	b00b      	add	sp, #44	; 0x2c
 80158c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158c2:	bf00      	nop
 80158c4:	2000bc62 	.word	0x2000bc62

080158c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80158c8:	b570      	push	{r4, r5, r6, lr}
 80158ca:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80158ce:	4604      	mov	r4, r0
 80158d0:	b19b      	cbz	r3, 80158fa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80158d2:	2002      	movs	r0, #2
 80158d4:	f7fc fe76 	bl	80125c4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80158d8:	2300      	movs	r3, #0
 80158da:	4620      	mov	r0, r4
 80158dc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80158e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80158e4:	6823      	ldr	r3, [r4, #0]
 80158e6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80158ea:	f7ff fd39 	bl	8015360 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80158ee:	4601      	mov	r1, r0
 80158f0:	4620      	mov	r0, r4
 80158f2:	462b      	mov	r3, r5
 80158f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158f8:	4718      	bx	r3
 80158fa:	bd70      	pop	{r4, r5, r6, pc}

080158fc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80158fc:	4770      	bx	lr

080158fe <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80158fe:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015902:	1a13      	subs	r3, r2, r0
 8015904:	4258      	negs	r0, r3
 8015906:	4158      	adcs	r0, r3
 8015908:	4770      	bx	lr

0801590a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801590a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801590e:	1a9b      	subs	r3, r3, r2
 8015910:	2b00      	cmp	r3, #0
 8015912:	bfdc      	itt	le
 8015914:	6882      	ldrle	r2, [r0, #8]
 8015916:	189b      	addle	r3, r3, r2
 8015918:	2b01      	cmp	r3, #1
 801591a:	bfcc      	ite	gt
 801591c:	2000      	movgt	r0, #0
 801591e:	2001      	movle	r0, #1
 8015920:	4770      	bx	lr

08015922 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015922:	6902      	ldr	r2, [r0, #16]
 8015924:	6840      	ldr	r0, [r0, #4]
 8015926:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801592a:	4770      	bx	lr

0801592c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801592c:	6803      	ldr	r3, [r0, #0]
 801592e:	691b      	ldr	r3, [r3, #16]
 8015930:	4718      	bx	r3

08015932 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015932:	4770      	bx	lr

08015934 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015934:	4770      	bx	lr
	...

08015938 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015938:	2301      	movs	r3, #1
 801593a:	b570      	push	{r4, r5, r6, lr}
 801593c:	7203      	strb	r3, [r0, #8]
 801593e:	4604      	mov	r4, r0
 8015940:	6840      	ldr	r0, [r0, #4]
 8015942:	6803      	ldr	r3, [r0, #0]
 8015944:	699b      	ldr	r3, [r3, #24]
 8015946:	4798      	blx	r3
 8015948:	6803      	ldr	r3, [r0, #0]
 801594a:	4605      	mov	r5, r0
 801594c:	2b08      	cmp	r3, #8
 801594e:	d01e      	beq.n	801598e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8015950:	d80b      	bhi.n	801596a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015952:	2b02      	cmp	r3, #2
 8015954:	d027      	beq.n	80159a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8015956:	2b04      	cmp	r3, #4
 8015958:	d011      	beq.n	801597e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801595a:	2b01      	cmp	r3, #1
 801595c:	d028      	beq.n	80159b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801595e:	4b17      	ldr	r3, [pc, #92]	; (80159bc <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8015960:	218b      	movs	r1, #139	; 0x8b
 8015962:	4a17      	ldr	r2, [pc, #92]	; (80159c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8015964:	4817      	ldr	r0, [pc, #92]	; (80159c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8015966:	f00e fa7f 	bl	8023e68 <__assert_func>
 801596a:	2b40      	cmp	r3, #64	; 0x40
 801596c:	d020      	beq.n	80159b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801596e:	d801      	bhi.n	8015974 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015970:	2b20      	cmp	r3, #32
 8015972:	e7f3      	b.n	801595c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8015974:	2b80      	cmp	r3, #128	; 0x80
 8015976:	d01b      	beq.n	80159b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801597c:	e7ee      	b.n	801595c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801597e:	6823      	ldr	r3, [r4, #0]
 8015980:	7f01      	ldrb	r1, [r0, #28]
 8015982:	4620      	mov	r0, r4
 8015984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015986:	4798      	blx	r3
 8015988:	6823      	ldr	r3, [r4, #0]
 801598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801598c:	e006      	b.n	801599c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801598e:	6823      	ldr	r3, [r4, #0]
 8015990:	7f01      	ldrb	r1, [r0, #28]
 8015992:	4620      	mov	r0, r4
 8015994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015996:	4798      	blx	r3
 8015998:	6823      	ldr	r3, [r4, #0]
 801599a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801599c:	4629      	mov	r1, r5
 801599e:	4620      	mov	r0, r4
 80159a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159a4:	4718      	bx	r3
 80159a6:	6823      	ldr	r3, [r4, #0]
 80159a8:	4620      	mov	r0, r4
 80159aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159ac:	4798      	blx	r3
 80159ae:	e7f3      	b.n	8015998 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80159b0:	6823      	ldr	r3, [r4, #0]
 80159b2:	4620      	mov	r0, r4
 80159b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159b6:	4798      	blx	r3
 80159b8:	e7e6      	b.n	8015988 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80159ba:	bf00      	nop
 80159bc:	08026c61 	.word	0x08026c61
 80159c0:	08026d70 	.word	0x08026d70
 80159c4:	08026c86 	.word	0x08026c86

080159c8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80159c8:	b570      	push	{r4, r5, r6, lr}
 80159ca:	4604      	mov	r4, r0
 80159cc:	460e      	mov	r6, r1
 80159ce:	6860      	ldr	r0, [r4, #4]
 80159d0:	6803      	ldr	r3, [r0, #0]
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	4798      	blx	r3
 80159d6:	2800      	cmp	r0, #0
 80159d8:	d1f9      	bne.n	80159ce <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80159da:	4d0b      	ldr	r5, [pc, #44]	; (8015a08 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 80159dc:	6828      	ldr	r0, [r5, #0]
 80159de:	6803      	ldr	r3, [r0, #0]
 80159e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80159e2:	4798      	blx	r3
 80159e4:	f7fd f8a2 	bl	8012b2c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80159e8:	6860      	ldr	r0, [r4, #4]
 80159ea:	4631      	mov	r1, r6
 80159ec:	6803      	ldr	r3, [r0, #0]
 80159ee:	689b      	ldr	r3, [r3, #8]
 80159f0:	4798      	blx	r3
 80159f2:	6823      	ldr	r3, [r4, #0]
 80159f4:	4620      	mov	r0, r4
 80159f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159f8:	4798      	blx	r3
 80159fa:	6828      	ldr	r0, [r5, #0]
 80159fc:	6803      	ldr	r3, [r0, #0]
 80159fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015a04:	4718      	bx	r3
 8015a06:	bf00      	nop
 8015a08:	2000bc68 	.word	0x2000bc68

08015a0c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015a0c:	b508      	push	{r3, lr}
 8015a0e:	f7fd f871 	bl	8012af4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015a16:	f7fd b87b 	b.w	8012b10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015a1a <_ZN8touchgfx13DMA_Interface5startEv>:
 8015a1a:	b510      	push	{r4, lr}
 8015a1c:	4604      	mov	r4, r0
 8015a1e:	6840      	ldr	r0, [r0, #4]
 8015a20:	6803      	ldr	r3, [r0, #0]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	4798      	blx	r3
 8015a26:	b948      	cbnz	r0, 8015a3c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015a28:	7a63      	ldrb	r3, [r4, #9]
 8015a2a:	b13b      	cbz	r3, 8015a3c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015a2c:	7a23      	ldrb	r3, [r4, #8]
 8015a2e:	b92b      	cbnz	r3, 8015a3c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015a30:	6823      	ldr	r3, [r4, #0]
 8015a32:	4620      	mov	r0, r4
 8015a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a3a:	4718      	bx	r3
 8015a3c:	bd10      	pop	{r4, pc}
	...

08015a40 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015a40:	b510      	push	{r4, lr}
 8015a42:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8015a46:	1b12      	subs	r2, r2, r4
 8015a48:	2a00      	cmp	r2, #0
 8015a4a:	bfdc      	itt	le
 8015a4c:	6883      	ldrle	r3, [r0, #8]
 8015a4e:	18d2      	addle	r2, r2, r3
 8015a50:	2a01      	cmp	r2, #1
 8015a52:	dd18      	ble.n	8015a86 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8015a54:	6843      	ldr	r3, [r0, #4]
 8015a56:	f101 021c 	add.w	r2, r1, #28
 8015a5a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8015a5e:	f851 4b04 	ldr.w	r4, [r1], #4
 8015a62:	4291      	cmp	r1, r2
 8015a64:	f843 4b04 	str.w	r4, [r3], #4
 8015a68:	d1f9      	bne.n	8015a5e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8015a6a:	880a      	ldrh	r2, [r1, #0]
 8015a6c:	801a      	strh	r2, [r3, #0]
 8015a6e:	788a      	ldrb	r2, [r1, #2]
 8015a70:	709a      	strb	r2, [r3, #2]
 8015a72:	68c3      	ldr	r3, [r0, #12]
 8015a74:	6882      	ldr	r2, [r0, #8]
 8015a76:	f3bf 8f5b 	dmb	ish
 8015a7a:	3301      	adds	r3, #1
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	bfd8      	it	le
 8015a80:	1a9b      	suble	r3, r3, r2
 8015a82:	60c3      	str	r3, [r0, #12]
 8015a84:	bd10      	pop	{r4, pc}
 8015a86:	4b03      	ldr	r3, [pc, #12]	; (8015a94 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8015a88:	2139      	movs	r1, #57	; 0x39
 8015a8a:	4a03      	ldr	r2, [pc, #12]	; (8015a98 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8015a8c:	4803      	ldr	r0, [pc, #12]	; (8015a9c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8015a8e:	f00e f9eb 	bl	8023e68 <__assert_func>
 8015a92:	bf00      	nop
 8015a94:	08026cac 	.word	0x08026cac
 8015a98:	08026da0 	.word	0x08026da0
 8015a9c:	08026c86 	.word	0x08026c86

08015aa0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015aa0:	b510      	push	{r4, lr}
 8015aa2:	6803      	ldr	r3, [r0, #0]
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	4798      	blx	r3
 8015aaa:	b128      	cbz	r0, 8015ab8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8015aac:	4b07      	ldr	r3, [pc, #28]	; (8015acc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8015aae:	213f      	movs	r1, #63	; 0x3f
 8015ab0:	4a07      	ldr	r2, [pc, #28]	; (8015ad0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8015ab2:	4808      	ldr	r0, [pc, #32]	; (8015ad4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8015ab4:	f00e f9d8 	bl	8023e68 <__assert_func>
 8015ab8:	6923      	ldr	r3, [r4, #16]
 8015aba:	68a2      	ldr	r2, [r4, #8]
 8015abc:	f3bf 8f5b 	dmb	ish
 8015ac0:	3301      	adds	r3, #1
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	bfd8      	it	le
 8015ac6:	1a9b      	suble	r3, r3, r2
 8015ac8:	6123      	str	r3, [r4, #16]
 8015aca:	bd10      	pop	{r4, pc}
 8015acc:	08026ccf 	.word	0x08026ccf
 8015ad0:	08026dee 	.word	0x08026dee
 8015ad4:	08026c86 	.word	0x08026c86

08015ad8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015ad8:	b570      	push	{r4, r5, r6, lr}
 8015ada:	4604      	mov	r4, r0
 8015adc:	6840      	ldr	r0, [r0, #4]
 8015ade:	6803      	ldr	r3, [r0, #0]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	4798      	blx	r3
 8015ae4:	4605      	mov	r5, r0
 8015ae6:	b930      	cbnz	r0, 8015af6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015ae8:	7a23      	ldrb	r3, [r4, #8]
 8015aea:	b123      	cbz	r3, 8015af6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015aec:	6860      	ldr	r0, [r4, #4]
 8015aee:	6803      	ldr	r3, [r0, #0]
 8015af0:	695b      	ldr	r3, [r3, #20]
 8015af2:	4798      	blx	r3
 8015af4:	7225      	strb	r5, [r4, #8]
 8015af6:	6860      	ldr	r0, [r4, #4]
 8015af8:	6803      	ldr	r3, [r0, #0]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	4798      	blx	r3
 8015afe:	b928      	cbnz	r0, 8015b0c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015b00:	6823      	ldr	r3, [r4, #0]
 8015b02:	4620      	mov	r0, r4
 8015b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b0a:	4718      	bx	r3
 8015b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b10:	f7fd b818 	b.w	8012b44 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015b14 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015b14:	b510      	push	{r4, lr}
 8015b16:	6082      	str	r2, [r0, #8]
 8015b18:	2200      	movs	r2, #0
 8015b1a:	4c03      	ldr	r4, [pc, #12]	; (8015b28 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015b1c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015b20:	e9c0 4100 	strd	r4, r1, [r0]
 8015b24:	bd10      	pop	{r4, pc}
 8015b26:	bf00      	nop
 8015b28:	08026d54 	.word	0x08026d54

08015b2c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015b2c:	6840      	ldr	r0, [r0, #4]
 8015b2e:	6803      	ldr	r3, [r0, #0]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	4718      	bx	r3

08015b34 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8015b34:	2001      	movs	r0, #1
 8015b36:	4770      	bx	lr

08015b38 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8015b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b3c:	460d      	mov	r5, r1
 8015b3e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015b42:	b085      	sub	sp, #20
 8015b44:	4690      	mov	r8, r2
 8015b46:	4411      	add	r1, r2
 8015b48:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015b4c:	4699      	mov	r9, r3
 8015b4e:	6803      	ldr	r3, [r0, #0]
 8015b50:	60c1      	str	r1, [r0, #12]
 8015b52:	4604      	mov	r4, r0
 8015b54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b56:	440a      	add	r2, r1
 8015b58:	6102      	str	r2, [r0, #16]
 8015b5a:	68db      	ldr	r3, [r3, #12]
 8015b5c:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8015b60:	4798      	blx	r3
 8015b62:	2800      	cmp	r0, #0
 8015b64:	d039      	beq.n	8015bda <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8015b66:	44c8      	add	r8, r9
 8015b68:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015b6c:	4445      	add	r5, r8
 8015b6e:	6823      	ldr	r3, [r4, #0]
 8015b70:	f10d 020f 	add.w	r2, sp, #15
 8015b74:	a903      	add	r1, sp, #12
 8015b76:	4620      	mov	r0, r4
 8015b78:	9200      	str	r2, [sp, #0]
 8015b7a:	f10d 020d 	add.w	r2, sp, #13
 8015b7e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8015b82:	f10d 030e 	add.w	r3, sp, #14
 8015b86:	47c0      	blx	r8
 8015b88:	b1f8      	cbz	r0, 8015bca <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8015b8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015b8e:	7a20      	ldrb	r0, [r4, #8]
 8015b90:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8015b94:	4358      	muls	r0, r3
 8015b96:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8015b9a:	1c43      	adds	r3, r0, #1
 8015b9c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8015ba0:	f817 0b01 	ldrb.w	r0, [r7], #1
 8015ba4:	121b      	asrs	r3, r3, #8
 8015ba6:	fb10 f003 	smulbb	r0, r0, r3
 8015baa:	b283      	uxth	r3, r0
 8015bac:	1c58      	adds	r0, r3, #1
 8015bae:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8015bb2:	6823      	ldr	r3, [r4, #0]
 8015bb4:	1200      	asrs	r0, r0, #8
 8015bb6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8015bba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8015bbe:	28ff      	cmp	r0, #255	; 0xff
 8015bc0:	d10e      	bne.n	8015be0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8015bc2:	9100      	str	r1, [sp, #0]
 8015bc4:	4629      	mov	r1, r5
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	47c0      	blx	r8
 8015bca:	68e3      	ldr	r3, [r4, #12]
 8015bcc:	3e01      	subs	r6, #1
 8015bce:	f105 0503 	add.w	r5, r5, #3
 8015bd2:	f103 0301 	add.w	r3, r3, #1
 8015bd6:	60e3      	str	r3, [r4, #12]
 8015bd8:	d1c9      	bne.n	8015b6e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8015bda:	b005      	add	sp, #20
 8015bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015be0:	fa1f fc80 	uxth.w	ip, r0
 8015be4:	43c0      	mvns	r0, r0
 8015be6:	f895 e002 	ldrb.w	lr, [r5, #2]
 8015bea:	fb12 f20c 	smulbb	r2, r2, ip
 8015bee:	b2c0      	uxtb	r0, r0
 8015bf0:	fb13 f30c 	smulbb	r3, r3, ip
 8015bf4:	fb0e 2200 	mla	r2, lr, r0, r2
 8015bf8:	f895 e001 	ldrb.w	lr, [r5, #1]
 8015bfc:	fb11 f10c 	smulbb	r1, r1, ip
 8015c00:	fb0e 3300 	mla	r3, lr, r0, r3
 8015c04:	f895 e000 	ldrb.w	lr, [r5]
 8015c08:	b292      	uxth	r2, r2
 8015c0a:	b29b      	uxth	r3, r3
 8015c0c:	fb0e 1000 	mla	r0, lr, r0, r1
 8015c10:	1c59      	adds	r1, r3, #1
 8015c12:	b280      	uxth	r0, r0
 8015c14:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8015c18:	1c51      	adds	r1, r2, #1
 8015c1a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8015c1e:	1c41      	adds	r1, r0, #1
 8015c20:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015c24:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8015c28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015c2c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015c30:	9000      	str	r0, [sp, #0]
 8015c32:	e7c7      	b.n	8015bc4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08015c34 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8015c34:	f89d 0000 	ldrb.w	r0, [sp]
 8015c38:	704b      	strb	r3, [r1, #1]
 8015c3a:	7008      	strb	r0, [r1, #0]
 8015c3c:	708a      	strb	r2, [r1, #2]
 8015c3e:	4770      	bx	lr

08015c40 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8015c40:	4413      	add	r3, r2
 8015c42:	7dc2      	ldrb	r2, [r0, #23]
 8015c44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c48:	4419      	add	r1, r3
 8015c4a:	7a03      	ldrb	r3, [r0, #8]
 8015c4c:	435a      	muls	r2, r3
 8015c4e:	1c53      	adds	r3, r2, #1
 8015c50:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015c54:	121b      	asrs	r3, r3, #8
 8015c56:	2bff      	cmp	r3, #255	; 0xff
 8015c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c5a:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8015c5e:	d13e      	bne.n	8015cde <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8015c60:	4427      	add	r7, r4
 8015c62:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015c66:	3103      	adds	r1, #3
 8015c68:	7d86      	ldrb	r6, [r0, #22]
 8015c6a:	2bff      	cmp	r3, #255	; 0xff
 8015c6c:	d10a      	bne.n	8015c84 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8015c6e:	f801 6c03 	strb.w	r6, [r1, #-3]
 8015c72:	7d43      	ldrb	r3, [r0, #21]
 8015c74:	f801 3c02 	strb.w	r3, [r1, #-2]
 8015c78:	7d03      	ldrb	r3, [r0, #20]
 8015c7a:	f801 3c01 	strb.w	r3, [r1, #-1]
 8015c7e:	42a7      	cmp	r7, r4
 8015c80:	d1ef      	bne.n	8015c62 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8015c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c84:	b29a      	uxth	r2, r3
 8015c86:	43db      	mvns	r3, r3
 8015c88:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8015c8c:	fb16 f602 	smulbb	r6, r6, r2
 8015c90:	b2db      	uxtb	r3, r3
 8015c92:	fb05 6503 	mla	r5, r5, r3, r6
 8015c96:	b2ad      	uxth	r5, r5
 8015c98:	1c6e      	adds	r6, r5, #1
 8015c9a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8015c9e:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8015ca2:	fb16 f603 	smulbb	r6, r6, r3
 8015ca6:	122d      	asrs	r5, r5, #8
 8015ca8:	f801 5c03 	strb.w	r5, [r1, #-3]
 8015cac:	7d45      	ldrb	r5, [r0, #21]
 8015cae:	fb05 6502 	mla	r5, r5, r2, r6
 8015cb2:	b2ad      	uxth	r5, r5
 8015cb4:	1c6e      	adds	r6, r5, #1
 8015cb6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8015cba:	122d      	asrs	r5, r5, #8
 8015cbc:	f801 5c02 	strb.w	r5, [r1, #-2]
 8015cc0:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8015cc4:	7d06      	ldrb	r6, [r0, #20]
 8015cc6:	fb15 f303 	smulbb	r3, r5, r3
 8015cca:	fb06 3202 	mla	r2, r6, r2, r3
 8015cce:	b292      	uxth	r2, r2
 8015cd0:	1c53      	adds	r3, r2, #1
 8015cd2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8015cd6:	1212      	asrs	r2, r2, #8
 8015cd8:	f801 2c01 	strb.w	r2, [r1, #-1]
 8015cdc:	e7cf      	b.n	8015c7e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8015cde:	b2de      	uxtb	r6, r3
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d0ce      	beq.n	8015c82 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8015ce4:	3103      	adds	r1, #3
 8015ce6:	4427      	add	r7, r4
 8015ce8:	f814 2b01 	ldrb.w	r2, [r4], #1
 8015cec:	3103      	adds	r1, #3
 8015cee:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8015cf2:	fb02 f306 	mul.w	r3, r2, r6
 8015cf6:	42bc      	cmp	r4, r7
 8015cf8:	f103 0201 	add.w	r2, r3, #1
 8015cfc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8015d00:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015d04:	b295      	uxth	r5, r2
 8015d06:	ea6f 0202 	mvn.w	r2, r2
 8015d0a:	b2d3      	uxtb	r3, r2
 8015d0c:	7d82      	ldrb	r2, [r0, #22]
 8015d0e:	fb1c fc03 	smulbb	ip, ip, r3
 8015d12:	fb02 c205 	mla	r2, r2, r5, ip
 8015d16:	b292      	uxth	r2, r2
 8015d18:	f102 0c01 	add.w	ip, r2, #1
 8015d1c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015d20:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8015d24:	fb1c fc03 	smulbb	ip, ip, r3
 8015d28:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015d2c:	f801 2c06 	strb.w	r2, [r1, #-6]
 8015d30:	7d42      	ldrb	r2, [r0, #21]
 8015d32:	fb02 c205 	mla	r2, r2, r5, ip
 8015d36:	b292      	uxth	r2, r2
 8015d38:	f102 0c01 	add.w	ip, r2, #1
 8015d3c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015d40:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015d44:	f801 2c05 	strb.w	r2, [r1, #-5]
 8015d48:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8015d4c:	f890 c014 	ldrb.w	ip, [r0, #20]
 8015d50:	fb12 f303 	smulbb	r3, r2, r3
 8015d54:	fb0c 3305 	mla	r3, ip, r5, r3
 8015d58:	b29b      	uxth	r3, r3
 8015d5a:	f103 0201 	add.w	r2, r3, #1
 8015d5e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015d62:	ea4f 2323 	mov.w	r3, r3, asr #8
 8015d66:	f801 3c04 	strb.w	r3, [r1, #-4]
 8015d6a:	d1bd      	bne.n	8015ce8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8015d6c:	e789      	b.n	8015c82 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08015d6e <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8015d6e:	b510      	push	{r4, lr}
 8015d70:	7d04      	ldrb	r4, [r0, #20]
 8015d72:	700c      	strb	r4, [r1, #0]
 8015d74:	7d41      	ldrb	r1, [r0, #21]
 8015d76:	7011      	strb	r1, [r2, #0]
 8015d78:	7d82      	ldrb	r2, [r0, #22]
 8015d7a:	701a      	strb	r2, [r3, #0]
 8015d7c:	9b02      	ldr	r3, [sp, #8]
 8015d7e:	7dc2      	ldrb	r2, [r0, #23]
 8015d80:	2001      	movs	r0, #1
 8015d82:	701a      	strb	r2, [r3, #0]
 8015d84:	bd10      	pop	{r4, pc}

08015d86 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 8015d86:	b570      	push	{r4, r5, r6, lr}
 8015d88:	4616      	mov	r6, r2
 8015d8a:	4604      	mov	r4, r0
 8015d8c:	460d      	mov	r5, r1
 8015d8e:	f7f9 f953 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8015d92:	6803      	ldr	r3, [r0, #0]
 8015d94:	4629      	mov	r1, r5
 8015d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d98:	4798      	blx	r3
 8015d9a:	7520      	strb	r0, [r4, #20]
 8015d9c:	f7f9 f94c 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8015da0:	6803      	ldr	r3, [r0, #0]
 8015da2:	4629      	mov	r1, r5
 8015da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015da6:	4798      	blx	r3
 8015da8:	7560      	strb	r0, [r4, #21]
 8015daa:	f7f9 f945 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8015dae:	6803      	ldr	r3, [r0, #0]
 8015db0:	4629      	mov	r1, r5
 8015db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015db4:	4798      	blx	r3
 8015db6:	75e6      	strb	r6, [r4, #23]
 8015db8:	75a0      	strb	r0, [r4, #22]
 8015dba:	bd70      	pop	{r4, r5, r6, pc}

08015dbc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8015dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dbe:	460e      	mov	r6, r1
 8015dc0:	4617      	mov	r7, r2
 8015dc2:	4604      	mov	r4, r0
 8015dc4:	f000 f832 	bl	8015e2c <_ZN8touchgfx15AbstractPainterC1Ev>
 8015dc8:	4b12      	ldr	r3, [pc, #72]	; (8015e14 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8015dca:	6023      	str	r3, [r4, #0]
 8015dcc:	f7f9 f934 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8015dd0:	6803      	ldr	r3, [r0, #0]
 8015dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd4:	4798      	blx	r3
 8015dd6:	1e43      	subs	r3, r0, #1
 8015dd8:	425d      	negs	r5, r3
 8015dda:	415d      	adcs	r5, r3
 8015ddc:	4b0e      	ldr	r3, [pc, #56]	; (8015e18 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015de2:	b130      	cbz	r0, 8015df2 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8015de4:	6803      	ldr	r3, [r0, #0]
 8015de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de8:	4798      	blx	r3
 8015dea:	2801      	cmp	r0, #1
 8015dec:	bf08      	it	eq
 8015dee:	f045 0501 	orreq.w	r5, r5, #1
 8015df2:	b92d      	cbnz	r5, 8015e00 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8015df4:	4b09      	ldr	r3, [pc, #36]	; (8015e1c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8015df6:	2129      	movs	r1, #41	; 0x29
 8015df8:	4a09      	ldr	r2, [pc, #36]	; (8015e20 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8015dfa:	480a      	ldr	r0, [pc, #40]	; (8015e24 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8015dfc:	f00e f834 	bl	8023e68 <__assert_func>
 8015e00:	4b09      	ldr	r3, [pc, #36]	; (8015e28 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8015e02:	4620      	mov	r0, r4
 8015e04:	463a      	mov	r2, r7
 8015e06:	4631      	mov	r1, r6
 8015e08:	6023      	str	r3, [r4, #0]
 8015e0a:	f7ff ffbc 	bl	8015d86 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8015e0e:	4620      	mov	r0, r4
 8015e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e12:	bf00      	nop
 8015e14:	08026e28 	.word	0x08026e28
 8015e18:	2000bc68 	.word	0x2000bc68
 8015e1c:	08026e40 	.word	0x08026e40
 8015e20:	08026f04 	.word	0x08026f04
 8015e24:	08026e9e 	.word	0x08026e9e
 8015e28:	08026eec 	.word	0x08026eec

08015e2c <_ZN8touchgfx15AbstractPainterC1Ev>:
 8015e2c:	4a03      	ldr	r2, [pc, #12]	; (8015e3c <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8015e2e:	6002      	str	r2, [r0, #0]
 8015e30:	2200      	movs	r2, #0
 8015e32:	6042      	str	r2, [r0, #4]
 8015e34:	22ff      	movs	r2, #255	; 0xff
 8015e36:	7202      	strb	r2, [r0, #8]
 8015e38:	4770      	bx	lr
 8015e3a:	bf00      	nop
 8015e3c:	08026f48 	.word	0x08026f48

08015e40 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8015e40:	4770      	bx	lr

08015e42 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8015e42:	8081      	strh	r1, [r0, #4]
 8015e44:	80c2      	strh	r2, [r0, #6]
 8015e46:	4770      	bx	lr

08015e48 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8015e48:	7201      	strb	r1, [r0, #8]
 8015e4a:	4770      	bx	lr

08015e4c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8015e4c:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8015e50:	4770      	bx	lr

08015e52 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8015e52:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8015e56:	4770      	bx	lr

08015e58 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8015e58:	6281      	str	r1, [r0, #40]	; 0x28
 8015e5a:	4770      	bx	lr

08015e5c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8015e5c:	b513      	push	{r0, r1, r4, lr}
 8015e5e:	6803      	ldr	r3, [r0, #0]
 8015e60:	4604      	mov	r4, r0
 8015e62:	4601      	mov	r1, r0
 8015e64:	4668      	mov	r0, sp
 8015e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e68:	4798      	blx	r3
 8015e6a:	6823      	ldr	r3, [r4, #0]
 8015e6c:	4669      	mov	r1, sp
 8015e6e:	4620      	mov	r0, r4
 8015e70:	691b      	ldr	r3, [r3, #16]
 8015e72:	4798      	blx	r3
 8015e74:	b002      	add	sp, #8
 8015e76:	bd10      	pop	{r4, pc}

08015e78 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8015e78:	b510      	push	{r4, lr}
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8015e80:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8015e84:	8002      	strh	r2, [r0, #0]
 8015e86:	8042      	strh	r2, [r0, #2]
 8015e88:	8084      	strh	r4, [r0, #4]
 8015e8a:	80c1      	strh	r1, [r0, #6]
 8015e8c:	bd10      	pop	{r4, pc}

08015e8e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8015e8e:	2200      	movs	r2, #0
 8015e90:	8002      	strh	r2, [r0, #0]
 8015e92:	8042      	strh	r2, [r0, #2]
 8015e94:	8082      	strh	r2, [r0, #4]
 8015e96:	80c2      	strh	r2, [r0, #6]
 8015e98:	4770      	bx	lr
	...

08015e9c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8015e9c:	b508      	push	{r3, lr}
 8015e9e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015ea0:	b928      	cbnz	r0, 8015eae <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8015ea2:	4b03      	ldr	r3, [pc, #12]	; (8015eb0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8015ea4:	2127      	movs	r1, #39	; 0x27
 8015ea6:	4a03      	ldr	r2, [pc, #12]	; (8015eb4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8015ea8:	4803      	ldr	r0, [pc, #12]	; (8015eb8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8015eaa:	f00d ffdd 	bl	8023e68 <__assert_func>
 8015eae:	bd08      	pop	{r3, pc}
 8015eb0:	08026f54 	.word	0x08026f54
 8015eb4:	08027038 	.word	0x08027038
 8015eb8:	08026f7b 	.word	0x08026f7b

08015ebc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8015ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ec0:	b089      	sub	sp, #36	; 0x24
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	6808      	ldr	r0, [r1, #0]
 8015ec6:	f04f 0a00 	mov.w	sl, #0
 8015eca:	6849      	ldr	r1, [r1, #4]
 8015ecc:	ab02      	add	r3, sp, #8
 8015ece:	f04f 0b01 	mov.w	fp, #1
 8015ed2:	c303      	stmia	r3!, {r0, r1}
 8015ed4:	4b3f      	ldr	r3, [pc, #252]	; (8015fd4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8015ed6:	4621      	mov	r1, r4
 8015ed8:	a804      	add	r0, sp, #16
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	2b01      	cmp	r3, #1
 8015ede:	6823      	ldr	r3, [r4, #0]
 8015ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ee2:	bf1f      	itttt	ne
 8015ee4:	f10d 0906 	addne.w	r9, sp, #6
 8015ee8:	ae03      	addne	r6, sp, #12
 8015eea:	f10d 050e 	addne.w	r5, sp, #14
 8015eee:	f10d 080a 	addne.w	r8, sp, #10
 8015ef2:	bf01      	itttt	eq
 8015ef4:	f10d 090e 	addeq.w	r9, sp, #14
 8015ef8:	f10d 0606 	addeq.w	r6, sp, #6
 8015efc:	ad03      	addeq	r5, sp, #12
 8015efe:	f10d 0808 	addeq.w	r8, sp, #8
 8015f02:	4798      	blx	r3
 8015f04:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015f08:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d056      	beq.n	8015fbe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8015f10:	4293      	cmp	r3, r2
 8015f12:	bfa8      	it	ge
 8015f14:	4613      	movge	r3, r2
 8015f16:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015f1a:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8015f1e:	2f00      	cmp	r7, #0
 8015f20:	dd34      	ble.n	8015f8c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8015f22:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8015f26:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8015f2a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8015f2e:	4484      	add	ip, r0
 8015f30:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015f34:	f9b6 e000 	ldrsh.w	lr, [r6]
 8015f38:	fa0f fc8c 	sxth.w	ip, ip
 8015f3c:	f9b9 1000 	ldrsh.w	r1, [r9]
 8015f40:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015f44:	4562      	cmp	r2, ip
 8015f46:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f4a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8015f4e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8015f52:	da29      	bge.n	8015fa8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015f54:	4472      	add	r2, lr
 8015f56:	b212      	sxth	r2, r2
 8015f58:	4290      	cmp	r0, r2
 8015f5a:	da25      	bge.n	8015fa8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015f5c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8015f60:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015f64:	4402      	add	r2, r0
 8015f66:	b212      	sxth	r2, r2
 8015f68:	4293      	cmp	r3, r2
 8015f6a:	da1d      	bge.n	8015fa8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015f6c:	440b      	add	r3, r1
 8015f6e:	b21b      	sxth	r3, r3
 8015f70:	4298      	cmp	r0, r3
 8015f72:	da19      	bge.n	8015fa8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015f74:	6823      	ldr	r3, [r4, #0]
 8015f76:	a906      	add	r1, sp, #24
 8015f78:	4620      	mov	r0, r4
 8015f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f7c:	4798      	blx	r3
 8015f7e:	b998      	cbnz	r0, 8015fa8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015f80:	107f      	asrs	r7, r7, #1
 8015f82:	f04f 0a01 	mov.w	sl, #1
 8015f86:	f8ad 7006 	strh.w	r7, [sp, #6]
 8015f8a:	e7c6      	b.n	8015f1a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8015f8c:	d10c      	bne.n	8015fa8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015f8e:	f8ad b006 	strh.w	fp, [sp, #6]
 8015f92:	f8b8 2000 	ldrh.w	r2, [r8]
 8015f96:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8015f9a:	440a      	add	r2, r1
 8015f9c:	f8a8 2000 	strh.w	r2, [r8]
 8015fa0:	882b      	ldrh	r3, [r5, #0]
 8015fa2:	1a5b      	subs	r3, r3, r1
 8015fa4:	802b      	strh	r3, [r5, #0]
 8015fa6:	e7ad      	b.n	8015f04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015fa8:	f1ba 0f00 	cmp.w	sl, #0
 8015fac:	d0f1      	beq.n	8015f92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8015fae:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015fb2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	bf08      	it	eq
 8015fba:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8015fbc:	e7e9      	b.n	8015f92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8015fbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	bf04      	itt	eq
 8015fc6:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8015fca:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8015fcc:	b009      	add	sp, #36	; 0x24
 8015fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fd2:	bf00      	nop
 8015fd4:	2000bc60 	.word	0x2000bc60

08015fd8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8015fd8:	2200      	movs	r2, #0
 8015fda:	2101      	movs	r1, #1
 8015fdc:	8082      	strh	r2, [r0, #4]
 8015fde:	80c2      	strh	r2, [r0, #6]
 8015fe0:	8102      	strh	r2, [r0, #8]
 8015fe2:	8142      	strh	r2, [r0, #10]
 8015fe4:	8182      	strh	r2, [r0, #12]
 8015fe6:	81c2      	strh	r2, [r0, #14]
 8015fe8:	8202      	strh	r2, [r0, #16]
 8015fea:	8242      	strh	r2, [r0, #18]
 8015fec:	61c2      	str	r2, [r0, #28]
 8015fee:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015ff2:	6282      	str	r2, [r0, #40]	; 0x28
 8015ff4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8015ff8:	4905      	ldr	r1, [pc, #20]	; (8016010 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8015ffa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015ffe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016002:	6001      	str	r1, [r0, #0]
 8016004:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016006:	22ff      	movs	r2, #255	; 0xff
 8016008:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801600c:	4770      	bx	lr
 801600e:	bf00      	nop
 8016010:	08026fc0 	.word	0x08026fc0

08016014 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8016014:	4770      	bx	lr

08016016 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016016:	f101 0368 	add.w	r3, r1, #104	; 0x68
 801601a:	4602      	mov	r2, r0
 801601c:	cb03      	ldmia	r3!, {r0, r1}
 801601e:	6010      	str	r0, [r2, #0]
 8016020:	4610      	mov	r0, r2
 8016022:	6051      	str	r1, [r2, #4]
 8016024:	4770      	bx	lr

08016026 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801602a:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801602e:	b395      	cbz	r5, 8016096 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016030:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8016034:	f1bc 0f00 	cmp.w	ip, #0
 8016038:	d02d      	beq.n	8016096 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801603a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801603e:	f9b1 e000 	ldrsh.w	lr, [r1]
 8016042:	b354      	cbz	r4, 801609a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016044:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8016048:	b33f      	cbz	r7, 801609a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801604a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801604e:	4475      	add	r5, lr
 8016050:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8016054:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016058:	45f0      	cmp	r8, lr
 801605a:	4646      	mov	r6, r8
 801605c:	4444      	add	r4, r8
 801605e:	bfa8      	it	ge
 8016060:	4676      	movge	r6, lr
 8016062:	4293      	cmp	r3, r2
 8016064:	4619      	mov	r1, r3
 8016066:	443b      	add	r3, r7
 8016068:	bfa8      	it	ge
 801606a:	4611      	movge	r1, r2
 801606c:	4462      	add	r2, ip
 801606e:	b22d      	sxth	r5, r5
 8016070:	8006      	strh	r6, [r0, #0]
 8016072:	b224      	sxth	r4, r4
 8016074:	8041      	strh	r1, [r0, #2]
 8016076:	b212      	sxth	r2, r2
 8016078:	b21b      	sxth	r3, r3
 801607a:	42a5      	cmp	r5, r4
 801607c:	bfac      	ite	ge
 801607e:	ebc6 0405 	rsbge	r4, r6, r5
 8016082:	ebc6 0404 	rsblt	r4, r6, r4
 8016086:	429a      	cmp	r2, r3
 8016088:	bfac      	ite	ge
 801608a:	ebc1 0302 	rsbge	r3, r1, r2
 801608e:	ebc1 0303 	rsblt	r3, r1, r3
 8016092:	8084      	strh	r4, [r0, #4]
 8016094:	80c3      	strh	r3, [r0, #6]
 8016096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801609a:	f8a0 e000 	strh.w	lr, [r0]
 801609e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80160a2:	8043      	strh	r3, [r0, #2]
 80160a4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80160a8:	8083      	strh	r3, [r0, #4]
 80160aa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80160ae:	e7f1      	b.n	8016094 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

080160b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80160b0:	b507      	push	{r0, r1, r2, lr}
 80160b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80160b6:	ab01      	add	r3, sp, #4
 80160b8:	6809      	ldr	r1, [r1, #0]
 80160ba:	6800      	ldr	r0, [r0, #0]
 80160bc:	f002 fc4f 	bl	801895e <_ZN8touchgfx6muldivElllRl>
 80160c0:	b003      	add	sp, #12
 80160c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080160c8 <_ZN8touchgfx7CWRUtil4sineEi>:
 80160c8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80160cc:	fb90 f3f2 	sdiv	r3, r0, r2
 80160d0:	fb03 0312 	mls	r3, r3, r2, r0
 80160d4:	4413      	add	r3, r2
 80160d6:	fb93 f0f2 	sdiv	r0, r3, r2
 80160da:	fb02 3010 	mls	r0, r2, r0, r3
 80160de:	4b0a      	ldr	r3, [pc, #40]	; (8016108 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80160e0:	285a      	cmp	r0, #90	; 0x5a
 80160e2:	dc02      	bgt.n	80160ea <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80160e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80160e8:	4770      	bx	lr
 80160ea:	28b4      	cmp	r0, #180	; 0xb4
 80160ec:	dc02      	bgt.n	80160f4 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 80160ee:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80160f2:	e7f7      	b.n	80160e4 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 80160f4:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80160f8:	bfd4      	ite	le
 80160fa:	38b4      	suble	r0, #180	; 0xb4
 80160fc:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016100:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016104:	4240      	negs	r0, r0
 8016106:	4770      	bx	lr
 8016108:	080270e2 	.word	0x080270e2

0801610c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801610c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016110:	f04f 0300 	mov.w	r3, #0
 8016114:	bf2c      	ite	cs
 8016116:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801611a:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801611e:	1899      	adds	r1, r3, r2
 8016120:	4288      	cmp	r0, r1
 8016122:	bf24      	itt	cs
 8016124:	1853      	addcs	r3, r2, r1
 8016126:	1a40      	subcs	r0, r0, r1
 8016128:	0892      	lsrs	r2, r2, #2
 801612a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801612e:	d1f6      	bne.n	801611e <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8016130:	4618      	mov	r0, r3
 8016132:	4770      	bx	lr

08016134 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016134:	2800      	cmp	r0, #0
 8016136:	b508      	push	{r3, lr}
 8016138:	da05      	bge.n	8016146 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801613a:	4240      	negs	r0, r0
 801613c:	f7ff fffa 	bl	8016134 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016140:	4240      	negs	r0, r0
 8016142:	b240      	sxtb	r0, r0
 8016144:	bd08      	pop	{r3, pc}
 8016146:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801614a:	dc11      	bgt.n	8016170 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801614c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016150:	dd09      	ble.n	8016166 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016152:	4340      	muls	r0, r0
 8016154:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016158:	f7ff ffd8 	bl	801610c <_ZN8touchgfx7CWRUtil5isqrtEm>
 801615c:	f7ff ffea 	bl	8016134 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016160:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016164:	e7ed      	b.n	8016142 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016166:	3003      	adds	r0, #3
 8016168:	4b02      	ldr	r3, [pc, #8]	; (8016174 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801616a:	10c0      	asrs	r0, r0, #3
 801616c:	5618      	ldrsb	r0, [r3, r0]
 801616e:	e7e9      	b.n	8016144 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016170:	2000      	movs	r0, #0
 8016172:	e7e7      	b.n	8016144 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016174:	08027086 	.word	0x08027086

08016178 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801617a:	460c      	mov	r4, r1
 801617c:	1e01      	subs	r1, r0, #0
 801617e:	4615      	mov	r5, r2
 8016180:	db01      	blt.n	8016186 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8016182:	2c00      	cmp	r4, #0
 8016184:	da06      	bge.n	8016194 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8016186:	4b11      	ldr	r3, [pc, #68]	; (80161cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8016188:	f240 3197 	movw	r1, #919	; 0x397
 801618c:	4a10      	ldr	r2, [pc, #64]	; (80161d0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 801618e:	4811      	ldr	r0, [pc, #68]	; (80161d4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8016190:	f00d fe6a 	bl	8023e68 <__assert_func>
 8016194:	428c      	cmp	r4, r1
 8016196:	dd06      	ble.n	80161a6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8016198:	4620      	mov	r0, r4
 801619a:	f7ff ffed 	bl	8016178 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801619e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80161a2:	b003      	add	sp, #12
 80161a4:	bd30      	pop	{r4, r5, pc}
 80161a6:	4349      	muls	r1, r1
 80161a8:	fb04 1004 	mla	r0, r4, r4, r1
 80161ac:	f7ff ffae 	bl	801610c <_ZN8touchgfx7CWRUtil5isqrtEm>
 80161b0:	6028      	str	r0, [r5, #0]
 80161b2:	2800      	cmp	r0, #0
 80161b4:	d0f5      	beq.n	80161a2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 80161b6:	4602      	mov	r2, r0
 80161b8:	ab01      	add	r3, sp, #4
 80161ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80161be:	4620      	mov	r0, r4
 80161c0:	f002 fbcd 	bl	801895e <_ZN8touchgfx6muldivElllRl>
 80161c4:	f7ff ffb6 	bl	8016134 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80161c8:	e7eb      	b.n	80161a2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 80161ca:	bf00      	nop
 80161cc:	08027198 	.word	0x08027198
 80161d0:	08027260 	.word	0x08027260
 80161d4:	080271a9 	.word	0x080271a9

080161d8 <_ZN8touchgfx4LineC1Ev>:
 80161d8:	b510      	push	{r4, lr}
 80161da:	4604      	mov	r4, r0
 80161dc:	f7ff fefc 	bl	8015fd8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80161e0:	4b0c      	ldr	r3, [pc, #48]	; (8016214 <_ZN8touchgfx4LineC1Ev+0x3c>)
 80161e2:	2220      	movs	r2, #32
 80161e4:	4620      	mov	r0, r4
 80161e6:	6023      	str	r3, [r4, #0]
 80161e8:	2300      	movs	r3, #0
 80161ea:	6422      	str	r2, [r4, #64]	; 0x40
 80161ec:	2212      	movs	r2, #18
 80161ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80161f2:	6722      	str	r2, [r4, #112]	; 0x70
 80161f4:	60a3      	str	r3, [r4, #8]
 80161f6:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80161fa:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80161fe:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016202:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8016206:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801620a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801620e:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8016212:	bd10      	pop	{r4, pc}
 8016214:	080271e8 	.word	0x080271e8

08016218 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8016218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801621c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801621e:	b085      	sub	sp, #20
 8016220:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016222:	4604      	mov	r4, r0
 8016224:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8016226:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8016228:	1af6      	subs	r6, r6, r3
 801622a:	eba5 0502 	sub.w	r5, r5, r2
 801622e:	f040 809b 	bne.w	8016368 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 8016232:	b955      	cbnz	r5, 801624a <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8016234:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8016238:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801623c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8016240:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8016244:	b005      	add	sp, #20
 8016246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801624a:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801624e:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8016252:	f04f 0802 	mov.w	r8, #2
 8016256:	463a      	mov	r2, r7
 8016258:	4629      	mov	r1, r5
 801625a:	ab03      	add	r3, sp, #12
 801625c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801625e:	f002 fb7e 	bl	801895e <_ZN8touchgfx6muldivElllRl>
 8016262:	ab03      	add	r3, sp, #12
 8016264:	463a      	mov	r2, r7
 8016266:	4631      	mov	r1, r6
 8016268:	fb90 f5f8 	sdiv	r5, r0, r8
 801626c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801626e:	f002 fb76 	bl	801895e <_ZN8touchgfx6muldivElllRl>
 8016272:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8016276:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801627a:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801627e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8016280:	fb90 f0f8 	sdiv	r0, r0, r8
 8016284:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8016288:	eba8 0305 	sub.w	r3, r8, r5
 801628c:	f1ba 0f00 	cmp.w	sl, #0
 8016290:	f040 80c3 	bne.w	801641a <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8016294:	64a3      	str	r3, [r4, #72]	; 0x48
 8016296:	19c3      	adds	r3, r0, r7
 8016298:	65a3      	str	r3, [r4, #88]	; 0x58
 801629a:	ebae 0305 	sub.w	r3, lr, r5
 801629e:	64e3      	str	r3, [r4, #76]	; 0x4c
 80162a0:	eb00 030c 	add.w	r3, r0, ip
 80162a4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80162a6:	eb05 030e 	add.w	r3, r5, lr
 80162aa:	6523      	str	r3, [r4, #80]	; 0x50
 80162ac:	ebac 0300 	sub.w	r3, ip, r0
 80162b0:	6623      	str	r3, [r4, #96]	; 0x60
 80162b2:	eb05 0308 	add.w	r3, r5, r8
 80162b6:	6563      	str	r3, [r4, #84]	; 0x54
 80162b8:	1a3b      	subs	r3, r7, r0
 80162ba:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80162bc:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 80162c0:	6663      	str	r3, [r4, #100]	; 0x64
 80162c2:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80162c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80162c8:	4632      	mov	r2, r6
 80162ca:	9301      	str	r3, [sp, #4]
 80162cc:	9100      	str	r1, [sp, #0]
 80162ce:	f859 bb04 	ldr.w	fp, [r9], #4
 80162d2:	9b00      	ldr	r3, [sp, #0]
 80162d4:	455e      	cmp	r6, fp
 80162d6:	bfa8      	it	ge
 80162d8:	465e      	movge	r6, fp
 80162da:	455a      	cmp	r2, fp
 80162dc:	bfb8      	it	lt
 80162de:	465a      	movlt	r2, fp
 80162e0:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80162e4:	4559      	cmp	r1, fp
 80162e6:	bfa8      	it	ge
 80162e8:	4659      	movge	r1, fp
 80162ea:	455b      	cmp	r3, fp
 80162ec:	bfb8      	it	lt
 80162ee:	465b      	movlt	r3, fp
 80162f0:	9300      	str	r3, [sp, #0]
 80162f2:	9b01      	ldr	r3, [sp, #4]
 80162f4:	454b      	cmp	r3, r9
 80162f6:	d1ea      	bne.n	80162ce <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 80162f8:	f04f 0b20 	mov.w	fp, #32
 80162fc:	b209      	sxth	r1, r1
 80162fe:	b212      	sxth	r2, r2
 8016300:	f1ba 0f01 	cmp.w	sl, #1
 8016304:	b236      	sxth	r6, r6
 8016306:	fb91 f9fb 	sdiv	r9, r1, fp
 801630a:	f9bd 1000 	ldrsh.w	r1, [sp]
 801630e:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8016312:	fb92 f2fb 	sdiv	r2, r2, fp
 8016316:	fb91 f1fb 	sdiv	r1, r1, fp
 801631a:	fb96 f6fb 	sdiv	r6, r6, fp
 801631e:	f102 0201 	add.w	r2, r2, #1
 8016322:	f101 0101 	add.w	r1, r1, #1
 8016326:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801632a:	eba1 0109 	sub.w	r1, r1, r9
 801632e:	eba2 0606 	sub.w	r6, r2, r6
 8016332:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8016336:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801633a:	d183      	bne.n	8016244 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801633c:	eba8 0305 	sub.w	r3, r8, r5
 8016340:	64a3      	str	r3, [r4, #72]	; 0x48
 8016342:	19c3      	adds	r3, r0, r7
 8016344:	65a3      	str	r3, [r4, #88]	; 0x58
 8016346:	ebae 0305 	sub.w	r3, lr, r5
 801634a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801634c:	eb00 030c 	add.w	r3, r0, ip
 8016350:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016352:	eb05 030e 	add.w	r3, r5, lr
 8016356:	4445      	add	r5, r8
 8016358:	6523      	str	r3, [r4, #80]	; 0x50
 801635a:	ebac 0300 	sub.w	r3, ip, r0
 801635e:	1a38      	subs	r0, r7, r0
 8016360:	6565      	str	r5, [r4, #84]	; 0x54
 8016362:	6623      	str	r3, [r4, #96]	; 0x60
 8016364:	6660      	str	r0, [r4, #100]	; 0x64
 8016366:	e76d      	b.n	8016244 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8016368:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801636c:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8016370:	2d00      	cmp	r5, #0
 8016372:	f43f af6e 	beq.w	8016252 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8016376:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801637a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801637e:	fb93 f2f7 	sdiv	r2, r3, r7
 8016382:	fb07 3312 	mls	r3, r7, r2, r3
 8016386:	b34b      	cbz	r3, 80163dc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8016388:	fb97 f2f3 	sdiv	r2, r7, r3
 801638c:	fb03 7712 	mls	r7, r3, r2, r7
 8016390:	2f00      	cmp	r7, #0
 8016392:	d1f4      	bne.n	801637e <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8016394:	2b01      	cmp	r3, #1
 8016396:	f24b 5204 	movw	r2, #46340	; 0xb504
 801639a:	bf18      	it	ne
 801639c:	fb96 f6f3 	sdivne	r6, r6, r3
 80163a0:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 80163a4:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 80163a8:	bf18      	it	ne
 80163aa:	fb95 f5f3 	sdivne	r5, r5, r3
 80163ae:	4291      	cmp	r1, r2
 80163b0:	dd16      	ble.n	80163e0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 80163b2:	2d00      	cmp	r5, #0
 80163b4:	da4d      	bge.n	8016452 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 80163b6:	4b29      	ldr	r3, [pc, #164]	; (801645c <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 80163b8:	429d      	cmp	r5, r3
 80163ba:	da27      	bge.n	801640c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 80163bc:	426a      	negs	r2, r5
 80163be:	f24b 5304 	movw	r3, #46340	; 0xb504
 80163c2:	fb91 f1f3 	sdiv	r1, r1, r3
 80163c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80163ca:	4299      	cmp	r1, r3
 80163cc:	bfcc      	ite	gt
 80163ce:	1c4b      	addgt	r3, r1, #1
 80163d0:	3301      	addle	r3, #1
 80163d2:	fb96 f6f3 	sdiv	r6, r6, r3
 80163d6:	fb95 f5f3 	sdiv	r5, r5, r3
 80163da:	e00f      	b.n	80163fc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 80163dc:	463b      	mov	r3, r7
 80163de:	e7d9      	b.n	8016394 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 80163e0:	2d00      	cmp	r5, #0
 80163e2:	fb92 f2f1 	sdiv	r2, r2, r1
 80163e6:	da13      	bge.n	8016410 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 80163e8:	4269      	negs	r1, r5
 80163ea:	f24b 5304 	movw	r3, #46340	; 0xb504
 80163ee:	fb93 f3f1 	sdiv	r3, r3, r1
 80163f2:	429a      	cmp	r2, r3
 80163f4:	bfa8      	it	ge
 80163f6:	461a      	movge	r2, r3
 80163f8:	4356      	muls	r6, r2
 80163fa:	4355      	muls	r5, r2
 80163fc:	fb05 f005 	mul.w	r0, r5, r5
 8016400:	fb06 0006 	mla	r0, r6, r6, r0
 8016404:	f7ff fe82 	bl	801610c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016408:	4607      	mov	r7, r0
 801640a:	e722      	b.n	8016252 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801640c:	2200      	movs	r2, #0
 801640e:	e7eb      	b.n	80163e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8016410:	4629      	mov	r1, r5
 8016412:	e7ea      	b.n	80163ea <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8016414:	4629      	mov	r1, r5
 8016416:	2200      	movs	r2, #0
 8016418:	e7e7      	b.n	80163ea <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801641a:	1a1b      	subs	r3, r3, r0
 801641c:	64a3      	str	r3, [r4, #72]	; 0x48
 801641e:	19c3      	adds	r3, r0, r7
 8016420:	1b5b      	subs	r3, r3, r5
 8016422:	65a3      	str	r3, [r4, #88]	; 0x58
 8016424:	ebae 0305 	sub.w	r3, lr, r5
 8016428:	4403      	add	r3, r0
 801642a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801642c:	eb00 030c 	add.w	r3, r0, ip
 8016430:	442b      	add	r3, r5
 8016432:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016434:	eb05 030e 	add.w	r3, r5, lr
 8016438:	4403      	add	r3, r0
 801643a:	6523      	str	r3, [r4, #80]	; 0x50
 801643c:	ebac 0300 	sub.w	r3, ip, r0
 8016440:	442b      	add	r3, r5
 8016442:	6623      	str	r3, [r4, #96]	; 0x60
 8016444:	eb05 0308 	add.w	r3, r5, r8
 8016448:	1a1b      	subs	r3, r3, r0
 801644a:	6563      	str	r3, [r4, #84]	; 0x54
 801644c:	1a3b      	subs	r3, r7, r0
 801644e:	1b5b      	subs	r3, r3, r5
 8016450:	e733      	b.n	80162ba <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8016452:	4295      	cmp	r5, r2
 8016454:	ddde      	ble.n	8016414 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8016456:	462a      	mov	r2, r5
 8016458:	e7b1      	b.n	80163be <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801645a:	bf00      	nop
 801645c:	ffff4afc 	.word	0xffff4afc

08016460 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8016460:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016462:	428b      	cmp	r3, r1
 8016464:	d102      	bne.n	801646c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8016466:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016468:	4293      	cmp	r3, r2
 801646a:	d003      	beq.n	8016474 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801646c:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8016470:	f7ff bed2 	b.w	8016218 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016474:	4770      	bx	lr

08016476 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8016476:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016478:	428b      	cmp	r3, r1
 801647a:	d102      	bne.n	8016482 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801647c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801647e:	4293      	cmp	r3, r2
 8016480:	d003      	beq.n	801648a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016482:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8016486:	f7ff bec7 	b.w	8016218 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801648a:	4770      	bx	lr

0801648c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801648c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8016490:	f7ff bec2 	b.w	8016218 <_ZN8touchgfx4Line17updateCachedShapeEv>

08016494 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016498:	b0b3      	sub	sp, #204	; 0xcc
 801649a:	4604      	mov	r4, r0
 801649c:	460a      	mov	r2, r1
 801649e:	4601      	mov	r1, r0
 80164a0:	a804      	add	r0, sp, #16
 80164a2:	ad32      	add	r5, sp, #200	; 0xc8
 80164a4:	f00c f914 	bl	80226d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80164a8:	2300      	movs	r3, #0
 80164aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80164ac:	f845 3dc4 	str.w	r3, [r5, #-196]!
 80164b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80164b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80164b6:	1ac0      	subs	r0, r0, r3
 80164b8:	eba1 0102 	sub.w	r1, r1, r2
 80164bc:	d43c      	bmi.n	8016538 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 80164be:	2900      	cmp	r1, #0
 80164c0:	462a      	mov	r2, r5
 80164c2:	db33      	blt.n	801652c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 80164c4:	f7ff fe58 	bl	8016178 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80164c8:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 80164cc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80164ce:	a804      	add	r0, sp, #16
 80164d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80164d2:	f00c fac6 	bl	8022a62 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80164d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80164d8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80164da:	a804      	add	r0, sp, #16
 80164dc:	f00c fa50 	bl	8022980 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80164e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80164e4:	2b01      	cmp	r3, #1
 80164e6:	d137      	bne.n	8016558 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 80164e8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80164ea:	2eb3      	cmp	r6, #179	; 0xb3
 80164ec:	dc34      	bgt.n	8016558 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 80164ee:	eba7 0906 	sub.w	r9, r7, r6
 80164f2:	4648      	mov	r0, r9
 80164f4:	f7ff fde8 	bl	80160c8 <_ZN8touchgfx7CWRUtil4sineEi>
 80164f8:	a902      	add	r1, sp, #8
 80164fa:	9002      	str	r0, [sp, #8]
 80164fc:	4628      	mov	r0, r5
 80164fe:	f7ff fdd7 	bl	80160b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016502:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016504:	eb00 0801 	add.w	r8, r0, r1
 8016508:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801650c:	f7ff fddc 	bl	80160c8 <_ZN8touchgfx7CWRUtil4sineEi>
 8016510:	a903      	add	r1, sp, #12
 8016512:	9003      	str	r0, [sp, #12]
 8016514:	4628      	mov	r0, r5
 8016516:	f7ff fdcb 	bl	80160b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801651a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801651c:	4641      	mov	r1, r8
 801651e:	1a12      	subs	r2, r2, r0
 8016520:	a804      	add	r0, sp, #16
 8016522:	f00c fa2d 	bl	8022980 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016526:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016528:	441e      	add	r6, r3
 801652a:	e7de      	b.n	80164ea <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801652c:	4249      	negs	r1, r1
 801652e:	f7ff fe23 	bl	8016178 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016532:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8016536:	e7c9      	b.n	80164cc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016538:	2900      	cmp	r1, #0
 801653a:	f1c0 0000 	rsb	r0, r0, #0
 801653e:	462a      	mov	r2, r5
 8016540:	db04      	blt.n	801654c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8016542:	f7ff fe19 	bl	8016178 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016546:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801654a:	e7bf      	b.n	80164cc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801654c:	4249      	negs	r1, r1
 801654e:	f7ff fe13 	bl	8016178 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016552:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8016556:	e7b9      	b.n	80164cc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8016558:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801655a:	a804      	add	r0, sp, #16
 801655c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801655e:	f00c fa0f 	bl	8022980 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016564:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8016566:	a804      	add	r0, sp, #16
 8016568:	f00c fa0a 	bl	8022980 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801656c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016570:	2b01      	cmp	r3, #1
 8016572:	d123      	bne.n	80165bc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8016574:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8016576:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801657a:	2e00      	cmp	r6, #0
 801657c:	dd1e      	ble.n	80165bc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801657e:	eb06 0907 	add.w	r9, r6, r7
 8016582:	4648      	mov	r0, r9
 8016584:	f7ff fda0 	bl	80160c8 <_ZN8touchgfx7CWRUtil4sineEi>
 8016588:	a902      	add	r1, sp, #8
 801658a:	9002      	str	r0, [sp, #8]
 801658c:	4628      	mov	r0, r5
 801658e:	f7ff fd8f 	bl	80160b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016592:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016594:	eb00 0801 	add.w	r8, r0, r1
 8016598:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801659c:	f7ff fd94 	bl	80160c8 <_ZN8touchgfx7CWRUtil4sineEi>
 80165a0:	a903      	add	r1, sp, #12
 80165a2:	9003      	str	r0, [sp, #12]
 80165a4:	4628      	mov	r0, r5
 80165a6:	f7ff fd83 	bl	80160b0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80165aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80165ac:	4641      	mov	r1, r8
 80165ae:	1a12      	subs	r2, r2, r0
 80165b0:	a804      	add	r0, sp, #16
 80165b2:	f00c f9e5 	bl	8022980 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80165b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80165b8:	1af6      	subs	r6, r6, r3
 80165ba:	e7de      	b.n	801657a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 80165bc:	a804      	add	r0, sp, #16
 80165be:	f00c fb54 	bl	8022c6a <_ZN8touchgfx6Canvas6renderEv>
 80165c2:	4604      	mov	r4, r0
 80165c4:	a804      	add	r0, sp, #16
 80165c6:	f00c fb91 	bl	8022cec <_ZN8touchgfx6CanvasD1Ev>
 80165ca:	4620      	mov	r0, r4
 80165cc:	b033      	add	sp, #204	; 0xcc
 80165ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080165d2 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80165d2:	b570      	push	{r4, r5, r6, lr}
 80165d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165d8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80165da:	4604      	mov	r4, r0
 80165dc:	429a      	cmp	r2, r3
 80165de:	d00c      	beq.n	80165fa <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 80165e0:	f850 3b26 	ldr.w	r3, [r0], #38
 80165e4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80165e6:	f7f9 fc61 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 80165ea:	2300      	movs	r3, #0
 80165ec:	4601      	mov	r1, r0
 80165ee:	46ac      	mov	ip, r5
 80165f0:	4620      	mov	r0, r4
 80165f2:	461a      	mov	r2, r3
 80165f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165f8:	4760      	bx	ip
 80165fa:	2000      	movs	r0, #0
 80165fc:	bd70      	pop	{r4, r5, r6, pc}

080165fe <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80165fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016604:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016606:	429a      	cmp	r2, r3
 8016608:	d016      	beq.n	8016638 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801660a:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801660e:	4620      	mov	r0, r4
 8016610:	f7f8 f932 	bl	800e878 <_ZNK8touchgfx9TypedText7getFontEv>
 8016614:	6803      	ldr	r3, [r0, #0]
 8016616:	4605      	mov	r5, r0
 8016618:	4620      	mov	r0, r4
 801661a:	69de      	ldr	r6, [r3, #28]
 801661c:	f7f8 f948 	bl	800e8b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016620:	4607      	mov	r7, r0
 8016622:	4620      	mov	r0, r4
 8016624:	f7f9 fc42 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 8016628:	2300      	movs	r3, #0
 801662a:	4602      	mov	r2, r0
 801662c:	4639      	mov	r1, r7
 801662e:	9300      	str	r3, [sp, #0]
 8016630:	4628      	mov	r0, r5
 8016632:	47b0      	blx	r6
 8016634:	b003      	add	sp, #12
 8016636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016638:	2000      	movs	r0, #0
 801663a:	e7fb      	b.n	8016634 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801663c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801663c:	b40e      	push	{r1, r2, r3}
 801663e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016646:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016648:	b09b      	sub	sp, #108	; 0x6c
 801664a:	4604      	mov	r4, r0
 801664c:	429a      	cmp	r2, r3
 801664e:	d03f      	beq.n	80166d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8016650:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8016654:	ab22      	add	r3, sp, #136	; 0x88
 8016656:	4638      	mov	r0, r7
 8016658:	9303      	str	r3, [sp, #12]
 801665a:	f7f8 f90d 	bl	800e878 <_ZNK8touchgfx9TypedText7getFontEv>
 801665e:	6803      	ldr	r3, [r0, #0]
 8016660:	4680      	mov	r8, r0
 8016662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016664:	4798      	blx	r3
 8016666:	4606      	mov	r6, r0
 8016668:	b205      	sxth	r5, r0
 801666a:	a804      	add	r0, sp, #16
 801666c:	f002 ff7e 	bl	801956c <_ZN8touchgfx12TextProviderC1Ev>
 8016670:	f8d8 3000 	ldr.w	r3, [r8]
 8016674:	4640      	mov	r0, r8
 8016676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016678:	4798      	blx	r3
 801667a:	9a03      	ldr	r2, [sp, #12]
 801667c:	4603      	mov	r3, r0
 801667e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016680:	a804      	add	r0, sp, #16
 8016682:	f002 ff90 	bl	80195a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016686:	4638      	mov	r0, r7
 8016688:	f7f8 f912 	bl	800e8b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801668c:	4680      	mov	r8, r0
 801668e:	4638      	mov	r0, r7
 8016690:	f7f8 f8f2 	bl	800e878 <_ZNK8touchgfx9TypedText7getFontEv>
 8016694:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016698:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801669c:	4642      	mov	r2, r8
 801669e:	9300      	str	r3, [sp, #0]
 80166a0:	4603      	mov	r3, r0
 80166a2:	a804      	add	r0, sp, #16
 80166a4:	f001 f815 	bl	80176d2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80166a8:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80166ac:	b203      	sxth	r3, r0
 80166ae:	18a9      	adds	r1, r5, r2
 80166b0:	2900      	cmp	r1, #0
 80166b2:	dd0b      	ble.n	80166cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 80166b4:	3b01      	subs	r3, #1
 80166b6:	fb13 f302 	smulbb	r3, r3, r2
 80166ba:	fb16 3300 	smlabb	r3, r6, r0, r3
 80166be:	b21d      	sxth	r5, r3
 80166c0:	4628      	mov	r0, r5
 80166c2:	b01b      	add	sp, #108	; 0x6c
 80166c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166c8:	b003      	add	sp, #12
 80166ca:	4770      	bx	lr
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	dcf7      	bgt.n	80166c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 80166d0:	2500      	movs	r5, #0
 80166d2:	e7f5      	b.n	80166c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

080166d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80166d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166dc:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 80166de:	b08d      	sub	sp, #52	; 0x34
 80166e0:	4604      	mov	r4, r0
 80166e2:	429e      	cmp	r6, r3
 80166e4:	4688      	mov	r8, r1
 80166e6:	d04b      	beq.n	8016780 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80166e8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80166ec:	4628      	mov	r0, r5
 80166ee:	f7f8 f8c3 	bl	800e878 <_ZNK8touchgfx9TypedText7getFontEv>
 80166f2:	4607      	mov	r7, r0
 80166f4:	2800      	cmp	r0, #0
 80166f6:	d043      	beq.n	8016780 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80166f8:	4628      	mov	r0, r5
 80166fa:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 80166fe:	f7f8 f8ef 	bl	800e8e0 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016702:	4b21      	ldr	r3, [pc, #132]	; (8016788 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8016704:	4628      	mov	r0, r5
 8016706:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8016710:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8016714:	785e      	ldrb	r6, [r3, #1]
 8016716:	f7f8 f8cb 	bl	800e8b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801671a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801671c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8016720:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8016724:	9309      	str	r3, [sp, #36]	; 0x24
 8016726:	4b19      	ldr	r3, [pc, #100]	; (801678c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8016728:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8016732:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016736:	9707      	str	r7, [sp, #28]
 8016738:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801673c:	f88d 6020 	strb.w	r6, [sp, #32]
 8016740:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016744:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8016748:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801674c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8016750:	b10a      	cbz	r2, 8016756 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8016752:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8016754:	b906      	cbnz	r6, 8016758 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8016756:	689e      	ldr	r6, [r3, #8]
 8016758:	af05      	add	r7, sp, #20
 801675a:	4621      	mov	r1, r4
 801675c:	4638      	mov	r0, r7
 801675e:	f002 f864 	bl	801882a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016762:	4628      	mov	r0, r5
 8016764:	f7f9 fba2 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 8016768:	2300      	movs	r3, #0
 801676a:	9001      	str	r0, [sp, #4]
 801676c:	4630      	mov	r0, r6
 801676e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016772:	ab07      	add	r3, sp, #28
 8016774:	9300      	str	r3, [sp, #0]
 8016776:	4643      	mov	r3, r8
 8016778:	e897 0006 	ldmia.w	r7, {r1, r2}
 801677c:	f000 fd76 	bl	801726c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016780:	b00d      	add	sp, #52	; 0x34
 8016782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016786:	bf00      	nop
 8016788:	2000bcf8 	.word	0x2000bcf8
 801678c:	2000bc68 	.word	0x2000bc68

08016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016790:	b570      	push	{r4, r5, r6, lr}
 8016792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016796:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016798:	4604      	mov	r4, r0
 801679a:	429a      	cmp	r2, r3
 801679c:	d021      	beq.n	80167e2 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801679e:	6803      	ldr	r3, [r0, #0]
 80167a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167a2:	4798      	blx	r3
 80167a4:	6823      	ldr	r3, [r4, #0]
 80167a6:	4605      	mov	r5, r0
 80167a8:	4620      	mov	r0, r4
 80167aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80167ac:	4798      	blx	r3
 80167ae:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80167b2:	4606      	mov	r6, r0
 80167b4:	b22d      	sxth	r5, r5
 80167b6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80167ba:	6823      	ldr	r3, [r4, #0]
 80167bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167be:	d109      	bne.n	80167d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 80167c0:	4629      	mov	r1, r5
 80167c2:	4620      	mov	r0, r4
 80167c4:	4798      	blx	r3
 80167c6:	6823      	ldr	r3, [r4, #0]
 80167c8:	4631      	mov	r1, r6
 80167ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167cc:	4620      	mov	r0, r4
 80167ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167d2:	4718      	bx	r3
 80167d4:	4601      	mov	r1, r0
 80167d6:	4620      	mov	r0, r4
 80167d8:	4798      	blx	r3
 80167da:	6823      	ldr	r3, [r4, #0]
 80167dc:	4629      	mov	r1, r5
 80167de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167e0:	e7f4      	b.n	80167cc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 80167e2:	bd70      	pop	{r4, r5, r6, pc}

080167e4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 80167e4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80167e8:	84c1      	strh	r1, [r0, #38]	; 0x26
 80167ea:	b922      	cbnz	r2, 80167f6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 80167ec:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80167f0:	b90b      	cbnz	r3, 80167f6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 80167f2:	f7ff bfcd 	b.w	8016790 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80167f6:	4770      	bx	lr

080167f8 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80167f8:	2300      	movs	r3, #0
 80167fa:	8003      	strh	r3, [r0, #0]
 80167fc:	8043      	strh	r3, [r0, #2]
 80167fe:	8083      	strh	r3, [r0, #4]
 8016800:	80c3      	strh	r3, [r0, #6]
 8016802:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8016806:	b91b      	cbnz	r3, 8016810 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8016808:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801680c:	2bff      	cmp	r3, #255	; 0xff
 801680e:	d103      	bne.n	8016818 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8016810:	890b      	ldrh	r3, [r1, #8]
 8016812:	8083      	strh	r3, [r0, #4]
 8016814:	894b      	ldrh	r3, [r1, #10]
 8016816:	80c3      	strh	r3, [r0, #6]
 8016818:	4770      	bx	lr
	...

0801681c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801681c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801681e:	4604      	mov	r4, r0
 8016820:	466b      	mov	r3, sp
 8016822:	6808      	ldr	r0, [r1, #0]
 8016824:	6849      	ldr	r1, [r1, #4]
 8016826:	c303      	stmia	r3!, {r0, r1}
 8016828:	6823      	ldr	r3, [r4, #0]
 801682a:	4669      	mov	r1, sp
 801682c:	4620      	mov	r0, r4
 801682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016830:	4798      	blx	r3
 8016832:	4b08      	ldr	r3, [pc, #32]	; (8016854 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801683a:	b10a      	cbz	r2, 8016840 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801683c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801683e:	b900      	cbnz	r0, 8016842 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016840:	6898      	ldr	r0, [r3, #8]
 8016842:	6803      	ldr	r3, [r0, #0]
 8016844:	4669      	mov	r1, sp
 8016846:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016848:	69dd      	ldr	r5, [r3, #28]
 801684a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801684e:	47a8      	blx	r5
 8016850:	b003      	add	sp, #12
 8016852:	bd30      	pop	{r4, r5, pc}
 8016854:	2000bc68 	.word	0x2000bc68

08016858 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8016858:	b570      	push	{r4, r5, r6, lr}
 801685a:	6803      	ldr	r3, [r0, #0]
 801685c:	4604      	mov	r4, r0
 801685e:	4615      	mov	r5, r2
 8016860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016862:	4798      	blx	r3
 8016864:	6823      	ldr	r3, [r4, #0]
 8016866:	4629      	mov	r1, r5
 8016868:	4620      	mov	r0, r4
 801686a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801686c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016870:	4718      	bx	r3

08016872 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8016872:	b570      	push	{r4, r5, r6, lr}
 8016874:	6803      	ldr	r3, [r0, #0]
 8016876:	4604      	mov	r4, r0
 8016878:	460e      	mov	r6, r1
 801687a:	4615      	mov	r5, r2
 801687c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801687e:	4798      	blx	r3
 8016880:	8030      	strh	r0, [r6, #0]
 8016882:	6823      	ldr	r3, [r4, #0]
 8016884:	4620      	mov	r0, r4
 8016886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016888:	4798      	blx	r3
 801688a:	8028      	strh	r0, [r5, #0]
 801688c:	bd70      	pop	{r4, r5, r6, pc}

0801688e <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801688e:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8016892:	4770      	bx	lr

08016894 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8016894:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8016898:	4770      	bx	lr

0801689a <_ZN8touchgfx10TiledImageD1Ev>:
 801689a:	4770      	bx	lr

0801689c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801689c:	b510      	push	{r4, lr}
 801689e:	4604      	mov	r4, r0
 80168a0:	f000 fa40 	bl	8016d24 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80168a4:	6823      	ldr	r3, [r4, #0]
 80168a6:	4620      	mov	r0, r4
 80168a8:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80168ac:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 80168b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80168b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168b6:	4718      	bx	r3

080168b8 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 80168b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ba:	f100 0626 	add.w	r6, r0, #38	; 0x26
 80168be:	4605      	mov	r5, r0
 80168c0:	8541      	strh	r1, [r0, #42]	; 0x2a
 80168c2:	4630      	mov	r0, r6
 80168c4:	f003 fd7e 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80168c8:	b1a0      	cbz	r0, 80168f4 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 80168ca:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 80168ce:	4630      	mov	r0, r6
 80168d0:	f003 fd78 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80168d4:	fb97 f4f0 	sdiv	r4, r7, r0
 80168d8:	fb04 7410 	mls	r4, r4, r0, r7
 80168dc:	4630      	mov	r0, r6
 80168de:	f003 fd71 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80168e2:	4404      	add	r4, r0
 80168e4:	4630      	mov	r0, r6
 80168e6:	f003 fd6d 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80168ea:	fb94 f3f0 	sdiv	r3, r4, r0
 80168ee:	fb03 4010 	mls	r0, r3, r0, r4
 80168f2:	8568      	strh	r0, [r5, #42]	; 0x2a
 80168f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080168f6 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 80168f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168f8:	f100 0626 	add.w	r6, r0, #38	; 0x26
 80168fc:	4605      	mov	r5, r0
 80168fe:	8581      	strh	r1, [r0, #44]	; 0x2c
 8016900:	4630      	mov	r0, r6
 8016902:	f003 fd99 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016906:	b1a0      	cbz	r0, 8016932 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8016908:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801690c:	4630      	mov	r0, r6
 801690e:	f003 fd93 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016912:	fb97 f4f0 	sdiv	r4, r7, r0
 8016916:	fb04 7410 	mls	r4, r4, r0, r7
 801691a:	4630      	mov	r0, r6
 801691c:	f003 fd8c 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016920:	4404      	add	r4, r0
 8016922:	4630      	mov	r0, r6
 8016924:	f003 fd88 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016928:	fb94 f3f0 	sdiv	r3, r4, r0
 801692c:	fb03 4010 	mls	r0, r3, r0, r4
 8016930:	85a8      	strh	r0, [r5, #44]	; 0x2c
 8016932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016934 <_ZN8touchgfx10TiledImageD0Ev>:
 8016934:	b510      	push	{r4, lr}
 8016936:	4604      	mov	r4, r0
 8016938:	2130      	movs	r1, #48	; 0x30
 801693a:	f00d fa6a 	bl	8023e12 <_ZdlPvj>
 801693e:	4620      	mov	r0, r4
 8016940:	bd10      	pop	{r4, pc}
	...

08016944 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8016944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016948:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801694c:	b093      	sub	sp, #76	; 0x4c
 801694e:	4607      	mov	r7, r0
 8016950:	460e      	mov	r6, r1
 8016952:	4658      	mov	r0, fp
 8016954:	f003 fd36 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016958:	4605      	mov	r5, r0
 801695a:	4658      	mov	r0, fp
 801695c:	f003 fd6c 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016960:	4680      	mov	r8, r0
 8016962:	2d00      	cmp	r5, #0
 8016964:	f000 80c5 	beq.w	8016af2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8016968:	2800      	cmp	r0, #0
 801696a:	f000 80c2 	beq.w	8016af2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801696e:	2300      	movs	r3, #0
 8016970:	a90e      	add	r1, sp, #56	; 0x38
 8016972:	4638      	mov	r0, r7
 8016974:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801697c:	4798      	blx	r3
 801697e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8016982:	f9b6 3000 	ldrsh.w	r3, [r6]
 8016986:	88b1      	ldrh	r1, [r6, #4]
 8016988:	189c      	adds	r4, r3, r2
 801698a:	440b      	add	r3, r1
 801698c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8016990:	fa02 f383 	sxtah	r3, r2, r3
 8016994:	3b01      	subs	r3, #1
 8016996:	fb93 f3f5 	sdiv	r3, r3, r5
 801699a:	fb94 f4f5 	sdiv	r4, r4, r5
 801699e:	fb13 f305 	smulbb	r3, r3, r5
 80169a2:	fb14 f405 	smulbb	r4, r4, r5
 80169a6:	b21b      	sxth	r3, r3
 80169a8:	1aa4      	subs	r4, r4, r2
 80169aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80169ac:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80169b0:	b2a4      	uxth	r4, r4
 80169b2:	185a      	adds	r2, r3, r1
 80169b4:	fb92 f2f8 	sdiv	r2, r2, r8
 80169b8:	fb12 f208 	smulbb	r2, r2, r8
 80169bc:	1a52      	subs	r2, r2, r1
 80169be:	b212      	sxth	r2, r2
 80169c0:	920c      	str	r2, [sp, #48]	; 0x30
 80169c2:	88f2      	ldrh	r2, [r6, #6]
 80169c4:	4413      	add	r3, r2
 80169c6:	fa01 f383 	sxtah	r3, r1, r3
 80169ca:	3b01      	subs	r3, #1
 80169cc:	fb93 f3f8 	sdiv	r3, r3, r8
 80169d0:	fb13 f308 	smulbb	r3, r3, r8
 80169d4:	b21b      	sxth	r3, r3
 80169d6:	930d      	str	r3, [sp, #52]	; 0x34
 80169d8:	1963      	adds	r3, r4, r5
 80169da:	fa1f fa83 	uxth.w	sl, r3
 80169de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80169e0:	b223      	sxth	r3, r4
 80169e2:	4293      	cmp	r3, r2
 80169e4:	9305      	str	r3, [sp, #20]
 80169e6:	f300 8084 	bgt.w	8016af2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80169ea:	fa0f f38a 	sxth.w	r3, sl
 80169ee:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80169f2:	9309      	str	r3, [sp, #36]	; 0x24
 80169f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169f6:	4599      	cmp	r9, r3
 80169f8:	dd04      	ble.n	8016a04 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 80169fa:	442c      	add	r4, r5
 80169fc:	eb05 030a 	add.w	r3, r5, sl
 8016a00:	b2a4      	uxth	r4, r4
 8016a02:	e7ea      	b.n	80169da <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8016a04:	f9b6 c000 	ldrsh.w	ip, [r6]
 8016a08:	88b2      	ldrh	r2, [r6, #4]
 8016a0a:	4462      	add	r2, ip
 8016a0c:	b292      	uxth	r2, r2
 8016a0e:	b213      	sxth	r3, r2
 8016a10:	9308      	str	r3, [sp, #32]
 8016a12:	fa1f f389 	uxth.w	r3, r9
 8016a16:	eb08 0103 	add.w	r1, r8, r3
 8016a1a:	9307      	str	r3, [sp, #28]
 8016a1c:	b289      	uxth	r1, r1
 8016a1e:	b208      	sxth	r0, r1
 8016a20:	9006      	str	r0, [sp, #24]
 8016a22:	9805      	ldr	r0, [sp, #20]
 8016a24:	4603      	mov	r3, r0
 8016a26:	9808      	ldr	r0, [sp, #32]
 8016a28:	4283      	cmp	r3, r0
 8016a2a:	da5e      	bge.n	8016aea <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a2e:	4584      	cmp	ip, r0
 8016a30:	da5b      	bge.n	8016aea <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016a32:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8016a36:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8016a3a:	4486      	add	lr, r0
 8016a3c:	fa1f fe8e 	uxth.w	lr, lr
 8016a40:	fa0f f38e 	sxth.w	r3, lr
 8016a44:	4599      	cmp	r9, r3
 8016a46:	930a      	str	r3, [sp, #40]	; 0x28
 8016a48:	da4f      	bge.n	8016aea <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016a4a:	9b06      	ldr	r3, [sp, #24]
 8016a4c:	4298      	cmp	r0, r3
 8016a4e:	da4c      	bge.n	8016aea <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016a50:	9b05      	ldr	r3, [sp, #20]
 8016a52:	459c      	cmp	ip, r3
 8016a54:	bfb8      	it	lt
 8016a56:	469c      	movlt	ip, r3
 8016a58:	4548      	cmp	r0, r9
 8016a5a:	9b08      	ldr	r3, [sp, #32]
 8016a5c:	bfb8      	it	lt
 8016a5e:	4648      	movlt	r0, r9
 8016a60:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8016a64:	4699      	mov	r9, r3
 8016a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a68:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8016a6c:	4599      	cmp	r9, r3
 8016a6e:	bfc8      	it	gt
 8016a70:	4652      	movgt	r2, sl
 8016a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a74:	eba2 020c 	sub.w	r2, r2, ip
 8016a78:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8016a7c:	9a06      	ldr	r2, [sp, #24]
 8016a7e:	4293      	cmp	r3, r2
 8016a80:	bfd8      	it	le
 8016a82:	4671      	movle	r1, lr
 8016a84:	1a09      	subs	r1, r1, r0
 8016a86:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8016a8a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8016a8e:	9b07      	ldr	r3, [sp, #28]
 8016a90:	1b12      	subs	r2, r2, r4
 8016a92:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8016a96:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8016a9a:	1ad2      	subs	r2, r2, r3
 8016a9c:	4b16      	ldr	r3, [pc, #88]	; (8016af8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8016a9e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8016aa2:	681a      	ldr	r2, [r3, #0]
 8016aa4:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8016aa8:	b109      	cbz	r1, 8016aae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8016aaa:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8016aac:	b900      	cbnz	r0, 8016ab0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8016aae:	6890      	ldr	r0, [r2, #8]
 8016ab0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016ab4:	f04f 0c01 	mov.w	ip, #1
 8016ab8:	9b07      	ldr	r3, [sp, #28]
 8016aba:	6801      	ldr	r1, [r0, #0]
 8016abc:	4413      	add	r3, r2
 8016abe:	f8cd c008 	str.w	ip, [sp, #8]
 8016ac2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016ac6:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8016aca:	b21b      	sxth	r3, r3
 8016acc:	4422      	add	r2, r4
 8016ace:	f8cd c004 	str.w	ip, [sp, #4]
 8016ad2:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8016ad6:	b212      	sxth	r2, r2
 8016ad8:	f8cd c000 	str.w	ip, [sp]
 8016adc:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8016ae0:	4659      	mov	r1, fp
 8016ae2:	47c8      	blx	r9
 8016ae4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016ae8:	e784      	b.n	80169f4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8016aea:	2300      	movs	r3, #0
 8016aec:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8016af0:	e7cb      	b.n	8016a8a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8016af2:	b013      	add	sp, #76	; 0x4c
 8016af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016af8:	2000bc68 	.word	0x2000bc68

08016afc <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8016afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b00:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016b04:	4606      	mov	r6, r0
 8016b06:	4689      	mov	r9, r1
 8016b08:	2bff      	cmp	r3, #255	; 0xff
 8016b0a:	d008      	beq.n	8016b1e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	8003      	strh	r3, [r0, #0]
 8016b10:	8043      	strh	r3, [r0, #2]
 8016b12:	8083      	strh	r3, [r0, #4]
 8016b14:	4630      	mov	r0, r6
 8016b16:	80f3      	strh	r3, [r6, #6]
 8016b18:	b003      	add	sp, #12
 8016b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b1e:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 8016b22:	4668      	mov	r0, sp
 8016b24:	4659      	mov	r1, fp
 8016b26:	f003 fcc1 	bl	801a4ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016b2a:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8016b2e:	4658      	mov	r0, fp
 8016b30:	f9bd 7000 	ldrsh.w	r7, [sp]
 8016b34:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8016b38:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8016b3c:	f003 fc42 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016b40:	4284      	cmp	r4, r0
 8016b42:	d10d      	bne.n	8016b60 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8016b44:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8016b48:	4658      	mov	r0, fp
 8016b4a:	f003 fc75 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016b4e:	4580      	cmp	r8, r0
 8016b50:	d12a      	bne.n	8016ba8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8016b52:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 8016b56:	8037      	strh	r7, [r6, #0]
 8016b58:	f8a6 a002 	strh.w	sl, [r6, #2]
 8016b5c:	80b5      	strh	r5, [r6, #4]
 8016b5e:	e7d9      	b.n	8016b14 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8016b60:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 8016b64:	4658      	mov	r0, fp
 8016b66:	f003 fc2d 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016b6a:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8016b6e:	1b7f      	subs	r7, r7, r5
 8016b70:	b2a3      	uxth	r3, r4
 8016b72:	b2bd      	uxth	r5, r7
 8016b74:	b22f      	sxth	r7, r5
 8016b76:	4428      	add	r0, r5
 8016b78:	2f00      	cmp	r7, #0
 8016b7a:	b280      	uxth	r0, r0
 8016b7c:	bfb8      	it	lt
 8016b7e:	18ed      	addlt	r5, r5, r3
 8016b80:	4403      	add	r3, r0
 8016b82:	bfac      	ite	ge
 8016b84:	4625      	movge	r5, r4
 8016b86:	2700      	movlt	r7, #0
 8016b88:	b29b      	uxth	r3, r3
 8016b8a:	bfb8      	it	lt
 8016b8c:	b22d      	sxthlt	r5, r5
 8016b8e:	b219      	sxth	r1, r3
 8016b90:	bfb8      	it	lt
 8016b92:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8016b96:	4291      	cmp	r1, r2
 8016b98:	bfc4      	itt	gt
 8016b9a:	1a9c      	subgt	r4, r3, r2
 8016b9c:	b224      	sxthgt	r4, r4
 8016b9e:	42ac      	cmp	r4, r5
 8016ba0:	bfc4      	itt	gt
 8016ba2:	b207      	sxthgt	r7, r0
 8016ba4:	4625      	movgt	r5, r4
 8016ba6:	e7cf      	b.n	8016b48 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8016ba8:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8016bac:	4658      	mov	r0, fp
 8016bae:	f003 fc43 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016bb2:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8016bb6:	ebaa 0404 	sub.w	r4, sl, r4
 8016bba:	fa1f f288 	uxth.w	r2, r8
 8016bbe:	b2a4      	uxth	r4, r4
 8016bc0:	fa0f fa84 	sxth.w	sl, r4
 8016bc4:	4420      	add	r0, r4
 8016bc6:	f1ba 0f00 	cmp.w	sl, #0
 8016bca:	b280      	uxth	r0, r0
 8016bcc:	bfb8      	it	lt
 8016bce:	18a3      	addlt	r3, r4, r2
 8016bd0:	4402      	add	r2, r0
 8016bd2:	bfac      	ite	ge
 8016bd4:	4643      	movge	r3, r8
 8016bd6:	f04f 0a00 	movlt.w	sl, #0
 8016bda:	b292      	uxth	r2, r2
 8016bdc:	bfb8      	it	lt
 8016bde:	b21b      	sxthlt	r3, r3
 8016be0:	b214      	sxth	r4, r2
 8016be2:	bfb8      	it	lt
 8016be4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016be8:	428c      	cmp	r4, r1
 8016bea:	bfc4      	itt	gt
 8016bec:	eba2 0801 	subgt.w	r8, r2, r1
 8016bf0:	fa0f f888 	sxthgt.w	r8, r8
 8016bf4:	4543      	cmp	r3, r8
 8016bf6:	bfbc      	itt	lt
 8016bf8:	fa0f fa80 	sxthlt.w	sl, r0
 8016bfc:	4643      	movlt	r3, r8
 8016bfe:	e7aa      	b.n	8016b56 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08016c00 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8016c00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c08:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016c0a:	4604      	mov	r4, r0
 8016c0c:	429a      	cmp	r2, r3
 8016c0e:	d018      	beq.n	8016c42 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8016c10:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8016c14:	4628      	mov	r0, r5
 8016c16:	f7f7 fe2f 	bl	800e878 <_ZNK8touchgfx9TypedText7getFontEv>
 8016c1a:	6803      	ldr	r3, [r0, #0]
 8016c1c:	4606      	mov	r6, r0
 8016c1e:	4628      	mov	r0, r5
 8016c20:	69df      	ldr	r7, [r3, #28]
 8016c22:	f7f7 fe45 	bl	800e8b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016c26:	4680      	mov	r8, r0
 8016c28:	4628      	mov	r0, r5
 8016c2a:	f7f9 f93f 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 8016c2e:	2300      	movs	r3, #0
 8016c30:	4602      	mov	r2, r0
 8016c32:	4641      	mov	r1, r8
 8016c34:	9300      	str	r3, [sp, #0]
 8016c36:	4630      	mov	r0, r6
 8016c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016c3a:	47b8      	blx	r7
 8016c3c:	b002      	add	sp, #8
 8016c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c42:	2000      	movs	r0, #0
 8016c44:	e7fa      	b.n	8016c3c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08016c46 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8016c46:	b570      	push	{r4, r5, r6, lr}
 8016c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c4c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016c4e:	4604      	mov	r4, r0
 8016c50:	429a      	cmp	r2, r3
 8016c52:	d00c      	beq.n	8016c6e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8016c54:	f850 3b26 	ldr.w	r3, [r0], #38
 8016c58:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8016c5a:	f7f9 f927 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 8016c5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016c60:	4601      	mov	r1, r0
 8016c62:	46ac      	mov	ip, r5
 8016c64:	4620      	mov	r0, r4
 8016c66:	2300      	movs	r3, #0
 8016c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c6c:	4760      	bx	ip
 8016c6e:	2000      	movs	r0, #0
 8016c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08016c74 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8016c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c7c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8016c7e:	b08d      	sub	sp, #52	; 0x34
 8016c80:	4604      	mov	r4, r0
 8016c82:	429e      	cmp	r6, r3
 8016c84:	460f      	mov	r7, r1
 8016c86:	d048      	beq.n	8016d1a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8016c88:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8016c8c:	4628      	mov	r0, r5
 8016c8e:	f7f7 fdf3 	bl	800e878 <_ZNK8touchgfx9TypedText7getFontEv>
 8016c92:	4680      	mov	r8, r0
 8016c94:	2800      	cmp	r0, #0
 8016c96:	d040      	beq.n	8016d1a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8016c98:	4628      	mov	r0, r5
 8016c9a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8016c9e:	f7f7 fe1f 	bl	800e8e0 <_ZNK8touchgfx9TypedText11assertValidEv>
 8016ca2:	4b1f      	ldr	r3, [pc, #124]	; (8016d20 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8016ca4:	4628      	mov	r0, r5
 8016ca6:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8016cb0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8016cb4:	785e      	ldrb	r6, [r3, #1]
 8016cb6:	f7f7 fdfb 	bl	800e8b0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016cba:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8016cbe:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8016cc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016cc4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8016cc8:	f88d 6020 	strb.w	r6, [sp, #32]
 8016ccc:	ae05      	add	r6, sp, #20
 8016cce:	9309      	str	r3, [sp, #36]	; 0x24
 8016cd0:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8016cd4:	f8cd 801c 	str.w	r8, [sp, #28]
 8016cd8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8016cdc:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8016ce0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016ce4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8016ce8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8016cec:	f7f8 f9a4 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8016cf0:	4621      	mov	r1, r4
 8016cf2:	4680      	mov	r8, r0
 8016cf4:	4630      	mov	r0, r6
 8016cf6:	f001 fd98 	bl	801882a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016cfa:	4628      	mov	r0, r5
 8016cfc:	f7f9 f8d6 	bl	800feac <_ZNK8touchgfx9TypedText7getTextEv>
 8016d00:	2300      	movs	r3, #0
 8016d02:	9303      	str	r3, [sp, #12]
 8016d04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016d06:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8016d0a:	ab07      	add	r3, sp, #28
 8016d0c:	4640      	mov	r0, r8
 8016d0e:	9300      	str	r3, [sp, #0]
 8016d10:	463b      	mov	r3, r7
 8016d12:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016d16:	f000 faa9 	bl	801726c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016d1a:	b00d      	add	sp, #52	; 0x34
 8016d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d20:	2000bcf8 	.word	0x2000bcf8

08016d24 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8016d24:	b570      	push	{r4, r5, r6, lr}
 8016d26:	4605      	mov	r5, r0
 8016d28:	880b      	ldrh	r3, [r1, #0]
 8016d2a:	4604      	mov	r4, r0
 8016d2c:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016d2e:	f855 3b26 	ldr.w	r3, [r5], #38
 8016d32:	4628      	mov	r0, r5
 8016d34:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8016d36:	f003 fb45 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016d3a:	b201      	sxth	r1, r0
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	47b0      	blx	r6
 8016d40:	6823      	ldr	r3, [r4, #0]
 8016d42:	4628      	mov	r0, r5
 8016d44:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8016d46:	f003 fb77 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016d4a:	b201      	sxth	r1, r0
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	47b0      	blx	r6
 8016d50:	4628      	mov	r0, r5
 8016d52:	f003 fc05 	bl	801a560 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8016d56:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8016d5a:	bd70      	pop	{r4, r5, r6, pc}

08016d5c <_ZNK8touchgfx5Image12getSolidRectEv>:
 8016d5c:	b510      	push	{r4, lr}
 8016d5e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016d62:	4604      	mov	r4, r0
 8016d64:	2bff      	cmp	r3, #255	; 0xff
 8016d66:	d006      	beq.n	8016d76 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8016d68:	2300      	movs	r3, #0
 8016d6a:	8003      	strh	r3, [r0, #0]
 8016d6c:	8043      	strh	r3, [r0, #2]
 8016d6e:	8083      	strh	r3, [r0, #4]
 8016d70:	80c3      	strh	r3, [r0, #6]
 8016d72:	4620      	mov	r0, r4
 8016d74:	bd10      	pop	{r4, pc}
 8016d76:	3126      	adds	r1, #38	; 0x26
 8016d78:	f003 fb98 	bl	801a4ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016d7c:	e7f9      	b.n	8016d72 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08016d80 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8016d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d84:	4604      	mov	r4, r0
 8016d86:	b088      	sub	sp, #32
 8016d88:	2500      	movs	r5, #0
 8016d8a:	460f      	mov	r7, r1
 8016d8c:	f854 3b26 	ldr.w	r3, [r4], #38
 8016d90:	a904      	add	r1, sp, #16
 8016d92:	4606      	mov	r6, r0
 8016d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016d9a:	4798      	blx	r3
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	f003 fb11 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016da2:	4680      	mov	r8, r0
 8016da4:	4620      	mov	r0, r4
 8016da6:	f003 fb47 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016daa:	9506      	str	r5, [sp, #24]
 8016dac:	ad06      	add	r5, sp, #24
 8016dae:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016db2:	4639      	mov	r1, r7
 8016db4:	f8ad 801c 	strh.w	r8, [sp, #28]
 8016db8:	4628      	mov	r0, r5
 8016dba:	f7fd fef5 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 8016dbe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016dc2:	b1c3      	cbz	r3, 8016df6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8016dc4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016dc8:	b1ab      	cbz	r3, 8016df6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8016dca:	4b0c      	ldr	r3, [pc, #48]	; (8016dfc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016dd2:	b10a      	cbz	r2, 8016dd8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8016dd4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016dd6:	b900      	cbnz	r0, 8016dda <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8016dd8:	6898      	ldr	r0, [r3, #8]
 8016dda:	2701      	movs	r7, #1
 8016ddc:	6801      	ldr	r1, [r0, #0]
 8016dde:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8016de2:	9702      	str	r7, [sp, #8]
 8016de4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8016de8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016dec:	e9cd 5600 	strd	r5, r6, [sp]
 8016df0:	68cd      	ldr	r5, [r1, #12]
 8016df2:	4621      	mov	r1, r4
 8016df4:	47a8      	blx	r5
 8016df6:	b008      	add	sp, #32
 8016df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dfc:	2000bc68 	.word	0x2000bc68

08016e00 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8016e00:	4b02      	ldr	r3, [pc, #8]	; (8016e0c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8016e02:	6018      	str	r0, [r3, #0]
 8016e04:	4b02      	ldr	r3, [pc, #8]	; (8016e10 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8016e06:	6019      	str	r1, [r3, #0]
 8016e08:	4770      	bx	lr
 8016e0a:	bf00      	nop
 8016e0c:	2000bc70 	.word	0x2000bc70
 8016e10:	2000bc84 	.word	0x2000bc84

08016e14 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8016e14:	b538      	push	{r3, r4, r5, lr}
 8016e16:	4c2b      	ldr	r4, [pc, #172]	; (8016ec4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8016e18:	4b2b      	ldr	r3, [pc, #172]	; (8016ec8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8016e1a:	6821      	ldr	r1, [r4, #0]
 8016e1c:	681a      	ldr	r2, [r3, #0]
 8016e1e:	4281      	cmp	r1, r0
 8016e20:	4d2a      	ldr	r5, [pc, #168]	; (8016ecc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8016e22:	492b      	ldr	r1, [pc, #172]	; (8016ed0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8016e24:	d108      	bne.n	8016e38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8016e26:	682b      	ldr	r3, [r5, #0]
 8016e28:	4293      	cmp	r3, r2
 8016e2a:	d105      	bne.n	8016e38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8016e2c:	6808      	ldr	r0, [r1, #0]
 8016e2e:	280f      	cmp	r0, #15
 8016e30:	bf94      	ite	ls
 8016e32:	2000      	movls	r0, #0
 8016e34:	2001      	movhi	r0, #1
 8016e36:	bd38      	pop	{r3, r4, r5, pc}
 8016e38:	4b26      	ldr	r3, [pc, #152]	; (8016ed4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8016e3a:	6020      	str	r0, [r4, #0]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	602a      	str	r2, [r5, #0]
 8016e40:	4298      	cmp	r0, r3
 8016e42:	d905      	bls.n	8016e50 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8016e44:	4b24      	ldr	r3, [pc, #144]	; (8016ed8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016e46:	2137      	movs	r1, #55	; 0x37
 8016e48:	4a24      	ldr	r2, [pc, #144]	; (8016edc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016e4a:	4825      	ldr	r0, [pc, #148]	; (8016ee0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8016e4c:	f00d f80c 	bl	8023e68 <__assert_func>
 8016e50:	f010 0403 	ands.w	r4, r0, #3
 8016e54:	bf1f      	itttt	ne
 8016e56:	f1c4 0504 	rsbne	r5, r4, #4
 8016e5a:	3b04      	subne	r3, #4
 8016e5c:	1952      	addne	r2, r2, r5
 8016e5e:	191b      	addne	r3, r3, r4
 8016e60:	4d20      	ldr	r5, [pc, #128]	; (8016ee4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8016e62:	4402      	add	r2, r0
 8016e64:	1a1b      	subs	r3, r3, r0
 8016e66:	3001      	adds	r0, #1
 8016e68:	602a      	str	r2, [r5, #0]
 8016e6a:	f020 0401 	bic.w	r4, r0, #1
 8016e6e:	42a3      	cmp	r3, r4
 8016e70:	d203      	bcs.n	8016e7a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8016e72:	4b19      	ldr	r3, [pc, #100]	; (8016ed8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016e74:	214a      	movs	r1, #74	; 0x4a
 8016e76:	4a19      	ldr	r2, [pc, #100]	; (8016edc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016e78:	e7e7      	b.n	8016e4a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8016e7a:	f010 0002 	ands.w	r0, r0, #2
 8016e7e:	bf1f      	itttt	ne
 8016e80:	f1c0 0504 	rsbne	r5, r0, #4
 8016e84:	1952      	addne	r2, r2, r5
 8016e86:	1f05      	subne	r5, r0, #4
 8016e88:	195b      	addne	r3, r3, r5
 8016e8a:	4422      	add	r2, r4
 8016e8c:	4d16      	ldr	r5, [pc, #88]	; (8016ee8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8016e8e:	1b1b      	subs	r3, r3, r4
 8016e90:	602a      	str	r2, [r5, #0]
 8016e92:	429c      	cmp	r4, r3
 8016e94:	d903      	bls.n	8016e9e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8016e96:	4b10      	ldr	r3, [pc, #64]	; (8016ed8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016e98:	215d      	movs	r1, #93	; 0x5d
 8016e9a:	4a10      	ldr	r2, [pc, #64]	; (8016edc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016e9c:	e7d5      	b.n	8016e4a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8016e9e:	b120      	cbz	r0, 8016eaa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8016ea0:	f1c0 0504 	rsb	r5, r0, #4
 8016ea4:	3804      	subs	r0, #4
 8016ea6:	442a      	add	r2, r5
 8016ea8:	4403      	add	r3, r0
 8016eaa:	1b1b      	subs	r3, r3, r4
 8016eac:	4422      	add	r2, r4
 8016eae:	480f      	ldr	r0, [pc, #60]	; (8016eec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8016eb0:	2b0f      	cmp	r3, #15
 8016eb2:	600b      	str	r3, [r1, #0]
 8016eb4:	6002      	str	r2, [r0, #0]
 8016eb6:	d803      	bhi.n	8016ec0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8016eb8:	4b0d      	ldr	r3, [pc, #52]	; (8016ef0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8016eba:	2170      	movs	r1, #112	; 0x70
 8016ebc:	4a07      	ldr	r2, [pc, #28]	; (8016edc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016ebe:	e7c4      	b.n	8016e4a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8016ec0:	2001      	movs	r0, #1
 8016ec2:	e7b8      	b.n	8016e36 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8016ec4:	2000bc78 	.word	0x2000bc78
 8016ec8:	2000bc70 	.word	0x2000bc70
 8016ecc:	2000bc80 	.word	0x2000bc80
 8016ed0:	2000bc88 	.word	0x2000bc88
 8016ed4:	2000bc84 	.word	0x2000bc84
 8016ed8:	0802751c 	.word	0x0802751c
 8016edc:	080275e4 	.word	0x080275e4
 8016ee0:	08027555 	.word	0x08027555
 8016ee4:	2000bc8c 	.word	0x2000bc8c
 8016ee8:	2000bc7c 	.word	0x2000bc7c
 8016eec:	2000bc74 	.word	0x2000bc74
 8016ef0:	0802759f 	.word	0x0802759f

08016ef4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8016ef4:	4b04      	ldr	r3, [pc, #16]	; (8016f08 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8016ef6:	6818      	ldr	r0, [r3, #0]
 8016ef8:	b120      	cbz	r0, 8016f04 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8016efa:	4b04      	ldr	r3, [pc, #16]	; (8016f0c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8016efc:	6818      	ldr	r0, [r3, #0]
 8016efe:	3000      	adds	r0, #0
 8016f00:	bf18      	it	ne
 8016f02:	2001      	movne	r0, #1
 8016f04:	4770      	bx	lr
 8016f06:	bf00      	nop
 8016f08:	2000bc70 	.word	0x2000bc70
 8016f0c:	2000bc84 	.word	0x2000bc84

08016f10 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8016f10:	4b01      	ldr	r3, [pc, #4]	; (8016f18 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8016f12:	6818      	ldr	r0, [r3, #0]
 8016f14:	4770      	bx	lr
 8016f16:	bf00      	nop
 8016f18:	2000bc78 	.word	0x2000bc78

08016f1c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8016f1c:	4b01      	ldr	r3, [pc, #4]	; (8016f24 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8016f1e:	6818      	ldr	r0, [r3, #0]
 8016f20:	4770      	bx	lr
 8016f22:	bf00      	nop
 8016f24:	2000bc80 	.word	0x2000bc80

08016f28 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8016f28:	4b01      	ldr	r3, [pc, #4]	; (8016f30 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8016f2a:	6818      	ldr	r0, [r3, #0]
 8016f2c:	4770      	bx	lr
 8016f2e:	bf00      	nop
 8016f30:	2000bc8c 	.word	0x2000bc8c

08016f34 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8016f34:	4b01      	ldr	r3, [pc, #4]	; (8016f3c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8016f36:	6818      	ldr	r0, [r3, #0]
 8016f38:	4770      	bx	lr
 8016f3a:	bf00      	nop
 8016f3c:	2000bc7c 	.word	0x2000bc7c

08016f40 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8016f40:	4b01      	ldr	r3, [pc, #4]	; (8016f48 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8016f42:	6818      	ldr	r0, [r3, #0]
 8016f44:	4770      	bx	lr
 8016f46:	bf00      	nop
 8016f48:	2000bc74 	.word	0x2000bc74

08016f4c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8016f4c:	4b01      	ldr	r3, [pc, #4]	; (8016f54 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8016f4e:	6818      	ldr	r0, [r3, #0]
 8016f50:	4770      	bx	lr
 8016f52:	bf00      	nop
 8016f54:	2000bc88 	.word	0x2000bc88

08016f58 <_ZN8touchgfx3LCD4initEv>:
 8016f58:	4770      	bx	lr

08016f5a <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016f5a:	2000      	movs	r0, #0
 8016f5c:	4770      	bx	lr

08016f5e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016f5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f62:	b091      	sub	sp, #68	; 0x44
 8016f64:	4699      	mov	r9, r3
 8016f66:	4617      	mov	r7, r2
 8016f68:	2500      	movs	r5, #0
 8016f6a:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8016f6e:	4680      	mov	r8, r0
 8016f70:	a80e      	add	r0, sp, #56	; 0x38
 8016f72:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8016f74:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8016f78:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8016f7c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016f80:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016f84:	910d      	str	r1, [sp, #52]	; 0x34
 8016f86:	950e      	str	r5, [sp, #56]	; 0x38
 8016f88:	f000 fe3a 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016f8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016f8e:	f8d9 6000 	ldr.w	r6, [r9]
 8016f92:	6818      	ldr	r0, [r3, #0]
 8016f94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016f96:	f9b4 b000 	ldrsh.w	fp, [r4]
 8016f9a:	1b80      	subs	r0, r0, r6
 8016f9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016fa0:	eb02 0c06 	add.w	ip, r2, r6
 8016fa4:	ebab 0e0c 	sub.w	lr, fp, ip
 8016fa8:	4570      	cmp	r0, lr
 8016faa:	f340 80bc 	ble.w	8017126 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8016fae:	88a1      	ldrh	r1, [r4, #4]
 8016fb0:	4459      	add	r1, fp
 8016fb2:	b209      	sxth	r1, r1
 8016fb4:	458c      	cmp	ip, r1
 8016fb6:	f300 80b6 	bgt.w	8017126 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8016fba:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8016fbe:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8016fc2:	4283      	cmp	r3, r0
 8016fc4:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8016fc8:	edd9 6a07 	vldr	s13, [r9, #28]
 8016fcc:	bfa8      	it	ge
 8016fce:	4603      	movge	r3, r0
 8016fd0:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8016fd4:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8016fd8:	45e3      	cmp	fp, ip
 8016fda:	ee07 3a90 	vmov	s15, r3
 8016fde:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016fe2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016fe6:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016fea:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016fee:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016ff2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016ff6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016ffa:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016ffe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017002:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017006:	ee61 1a87 	vmul.f32	s3, s3, s14
 801700a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801700e:	f340 808d 	ble.w	801712c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8017012:	fb9e f5f3 	sdiv	r5, lr, r3
 8017016:	ee07 5a10 	vmov	s14, r5
 801701a:	2d00      	cmp	r5, #0
 801701c:	fb03 e415 	mls	r4, r3, r5, lr
 8017020:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017024:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017028:	eee7 0a24 	vfma.f32	s1, s14, s9
 801702c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017030:	dd12      	ble.n	8017058 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8017032:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017036:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801703a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801703e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017046:	bf14      	ite	ne
 8017048:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801704c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017050:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017054:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017058:	fb05 f703 	mul.w	r7, r5, r3
 801705c:	1bc0      	subs	r0, r0, r7
 801705e:	443e      	add	r6, r7
 8017060:	1997      	adds	r7, r2, r6
 8017062:	4407      	add	r7, r0
 8017064:	42b9      	cmp	r1, r7
 8017066:	bfbc      	itt	lt
 8017068:	1a88      	sublt	r0, r1, r2
 801706a:	1b80      	sublt	r0, r0, r6
 801706c:	2800      	cmp	r0, #0
 801706e:	dd5a      	ble.n	8017126 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017070:	fb90 f1f3 	sdiv	r1, r0, r3
 8017074:	fb03 0211 	mls	r2, r3, r1, r0
 8017078:	b90a      	cbnz	r2, 801707e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801707a:	3901      	subs	r1, #1
 801707c:	461a      	mov	r2, r3
 801707e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017082:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8017086:	44a4      	add	ip, r4
 8017088:	2900      	cmp	r1, #0
 801708a:	bfcc      	ite	gt
 801708c:	469e      	movgt	lr, r3
 801708e:	4696      	movle	lr, r2
 8017090:	fb03 c505 	mla	r5, r3, r5, ip
 8017094:	eef0 6a42 	vmov.f32	s13, s4
 8017098:	eeb0 7a61 	vmov.f32	s14, s3
 801709c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80170a0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80170a4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80170a8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80170ac:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80170b0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80170b4:	ee17 0a90 	vmov	r0, s15
 80170b8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80170bc:	fb90 f6f3 	sdiv	r6, r0, r3
 80170c0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80170c4:	ee17 0a90 	vmov	r0, s15
 80170c8:	fb90 f7f3 	sdiv	r7, r0, r3
 80170cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80170d0:	f8d0 8000 	ldr.w	r8, [r0]
 80170d4:	900c      	str	r0, [sp, #48]	; 0x30
 80170d6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80170d8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80170dc:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80170e0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80170e4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80170e8:	f8cd a020 	str.w	sl, [sp, #32]
 80170ec:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80170f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80170f2:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80170f6:	9603      	str	r6, [sp, #12]
 80170f8:	44ca      	add	sl, r9
 80170fa:	9506      	str	r5, [sp, #24]
 80170fc:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8017100:	ee16 0a90 	vmov	r0, s13
 8017104:	f8cd a01c 	str.w	sl, [sp, #28]
 8017108:	fb07 0704 	mla	r7, r7, r4, r0
 801710c:	ee17 0a10 	vmov	r0, s14
 8017110:	fb06 0604 	mla	r6, r6, r4, r0
 8017114:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017116:	9702      	str	r7, [sp, #8]
 8017118:	e9cd 3600 	strd	r3, r6, [sp]
 801711c:	ebae 0304 	sub.w	r3, lr, r4
 8017120:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017124:	47a8      	blx	r5
 8017126:	b011      	add	sp, #68	; 0x44
 8017128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801712c:	462c      	mov	r4, r5
 801712e:	e797      	b.n	8017060 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08017130 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017130:	b570      	push	{r4, r5, r6, lr}
 8017132:	4604      	mov	r4, r0
 8017134:	2500      	movs	r5, #0
 8017136:	9804      	ldr	r0, [sp, #16]
 8017138:	7223      	strb	r3, [r4, #8]
 801713a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801713e:	8025      	strh	r5, [r4, #0]
 8017140:	6061      	str	r1, [r4, #4]
 8017142:	7263      	strb	r3, [r4, #9]
 8017144:	60e0      	str	r0, [r4, #12]
 8017146:	8222      	strh	r2, [r4, #16]
 8017148:	8265      	strh	r5, [r4, #18]
 801714a:	82a5      	strh	r5, [r4, #20]
 801714c:	82e5      	strh	r5, [r4, #22]
 801714e:	8325      	strh	r5, [r4, #24]
 8017150:	8365      	strh	r5, [r4, #26]
 8017152:	83a5      	strh	r5, [r4, #28]
 8017154:	77a5      	strb	r5, [r4, #30]
 8017156:	6803      	ldr	r3, [r0, #0]
 8017158:	695b      	ldr	r3, [r3, #20]
 801715a:	4798      	blx	r3
 801715c:	4606      	mov	r6, r0
 801715e:	b1f8      	cbz	r0, 80171a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017160:	68e0      	ldr	r0, [r4, #12]
 8017162:	4631      	mov	r1, r6
 8017164:	6803      	ldr	r3, [r0, #0]
 8017166:	68db      	ldr	r3, [r3, #12]
 8017168:	4798      	blx	r3
 801716a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801716e:	4605      	mov	r5, r0
 8017170:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017174:	7a83      	ldrb	r3, [r0, #10]
 8017176:	4313      	orrs	r3, r2
 8017178:	83a3      	strh	r3, [r4, #28]
 801717a:	7a63      	ldrb	r3, [r4, #9]
 801717c:	2b04      	cmp	r3, #4
 801717e:	d10f      	bne.n	80171a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017180:	68e0      	ldr	r0, [r4, #12]
 8017182:	462a      	mov	r2, r5
 8017184:	4631      	mov	r1, r6
 8017186:	6803      	ldr	r3, [r0, #0]
 8017188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801718a:	4798      	blx	r3
 801718c:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8017190:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017194:	7aab      	ldrb	r3, [r5, #10]
 8017196:	4313      	orrs	r3, r2
 8017198:	4418      	add	r0, r3
 801719a:	8ba3      	ldrh	r3, [r4, #28]
 801719c:	4418      	add	r0, r3
 801719e:	83a0      	strh	r0, [r4, #28]
 80171a0:	4620      	mov	r0, r4
 80171a2:	bd70      	pop	{r4, r5, r6, pc}

080171a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80171a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171a8:	2400      	movs	r4, #0
 80171aa:	b085      	sub	sp, #20
 80171ac:	4681      	mov	r9, r0
 80171ae:	460f      	mov	r7, r1
 80171b0:	4692      	mov	sl, r2
 80171b2:	469b      	mov	fp, r3
 80171b4:	46a0      	mov	r8, r4
 80171b6:	4626      	mov	r6, r4
 80171b8:	4554      	cmp	r4, sl
 80171ba:	da21      	bge.n	8017200 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80171bc:	2300      	movs	r3, #0
 80171be:	463a      	mov	r2, r7
 80171c0:	4659      	mov	r1, fp
 80171c2:	4648      	mov	r0, r9
 80171c4:	9303      	str	r3, [sp, #12]
 80171c6:	ab03      	add	r3, sp, #12
 80171c8:	f002 fb52 	bl	8019870 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80171cc:	4605      	mov	r5, r0
 80171ce:	b1b8      	cbz	r0, 8017200 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80171d0:	280a      	cmp	r0, #10
 80171d2:	d015      	beq.n	8017200 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80171d4:	9a03      	ldr	r2, [sp, #12]
 80171d6:	b182      	cbz	r2, 80171fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 80171d8:	f992 000d 	ldrsb.w	r0, [r2, #13]
 80171dc:	4641      	mov	r1, r8
 80171de:	7a93      	ldrb	r3, [r2, #10]
 80171e0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80171e4:	8895      	ldrh	r5, [r2, #4]
 80171e6:	4303      	orrs	r3, r0
 80171e8:	4638      	mov	r0, r7
 80171ea:	9301      	str	r3, [sp, #4]
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171f0:	4798      	blx	r3
 80171f2:	9b01      	ldr	r3, [sp, #4]
 80171f4:	4418      	add	r0, r3
 80171f6:	4406      	add	r6, r0
 80171f8:	b2b6      	uxth	r6, r6
 80171fa:	3401      	adds	r4, #1
 80171fc:	46a8      	mov	r8, r5
 80171fe:	e7db      	b.n	80171b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8017200:	4630      	mov	r0, r6
 8017202:	b005      	add	sp, #20
 8017204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017208 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017208:	2a02      	cmp	r2, #2
 801720a:	b530      	push	{r4, r5, lr}
 801720c:	d011      	beq.n	8017232 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801720e:	2a03      	cmp	r2, #3
 8017210:	d01c      	beq.n	801724c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017212:	2a01      	cmp	r2, #1
 8017214:	d10c      	bne.n	8017230 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017216:	888b      	ldrh	r3, [r1, #4]
 8017218:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801721c:	8801      	ldrh	r1, [r0, #0]
 801721e:	1a9b      	subs	r3, r3, r2
 8017220:	8844      	ldrh	r4, [r0, #2]
 8017222:	1a5b      	subs	r3, r3, r1
 8017224:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017228:	8004      	strh	r4, [r0, #0]
 801722a:	8043      	strh	r3, [r0, #2]
 801722c:	8081      	strh	r1, [r0, #4]
 801722e:	80c2      	strh	r2, [r0, #6]
 8017230:	bd30      	pop	{r4, r5, pc}
 8017232:	88cb      	ldrh	r3, [r1, #6]
 8017234:	88c2      	ldrh	r2, [r0, #6]
 8017236:	1a9b      	subs	r3, r3, r2
 8017238:	8842      	ldrh	r2, [r0, #2]
 801723a:	1a9b      	subs	r3, r3, r2
 801723c:	888a      	ldrh	r2, [r1, #4]
 801723e:	8881      	ldrh	r1, [r0, #4]
 8017240:	8043      	strh	r3, [r0, #2]
 8017242:	1a52      	subs	r2, r2, r1
 8017244:	8801      	ldrh	r1, [r0, #0]
 8017246:	1a52      	subs	r2, r2, r1
 8017248:	8002      	strh	r2, [r0, #0]
 801724a:	e7f1      	b.n	8017230 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801724c:	88cb      	ldrh	r3, [r1, #6]
 801724e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017252:	8841      	ldrh	r1, [r0, #2]
 8017254:	1a9b      	subs	r3, r3, r2
 8017256:	f9b0 5000 	ldrsh.w	r5, [r0]
 801725a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801725e:	1a5b      	subs	r3, r3, r1
 8017260:	8045      	strh	r5, [r0, #2]
 8017262:	8082      	strh	r2, [r0, #4]
 8017264:	8003      	strh	r3, [r0, #0]
 8017266:	80c4      	strh	r4, [r0, #6]
 8017268:	e7e2      	b.n	8017230 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801726c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801726c:	b570      	push	{r4, r5, r6, lr}
 801726e:	b086      	sub	sp, #24
 8017270:	ac02      	add	r4, sp, #8
 8017272:	e884 0006 	stmia.w	r4, {r1, r2}
 8017276:	461a      	mov	r2, r3
 8017278:	ab0c      	add	r3, sp, #48	; 0x30
 801727a:	9305      	str	r3, [sp, #20]
 801727c:	4b0a      	ldr	r3, [pc, #40]	; (80172a8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801727e:	685d      	ldr	r5, [r3, #4]
 8017280:	1069      	asrs	r1, r5, #1
 8017282:	07ed      	lsls	r5, r5, #31
 8017284:	eb00 0601 	add.w	r6, r0, r1
 8017288:	bf46      	itte	mi
 801728a:	681b      	ldrmi	r3, [r3, #0]
 801728c:	5841      	ldrmi	r1, [r0, r1]
 801728e:	681d      	ldrpl	r5, [r3, #0]
 8017290:	4630      	mov	r0, r6
 8017292:	bf48      	it	mi
 8017294:	58cd      	ldrmi	r5, [r1, r3]
 8017296:	4621      	mov	r1, r4
 8017298:	9b05      	ldr	r3, [sp, #20]
 801729a:	9301      	str	r3, [sp, #4]
 801729c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801729e:	9300      	str	r3, [sp, #0]
 80172a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172a2:	47a8      	blx	r5
 80172a4:	b006      	add	sp, #24
 80172a6:	bd70      	pop	{r4, r5, r6, pc}
 80172a8:	20000030 	.word	0x20000030

080172ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80172ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b0:	b09d      	sub	sp, #116	; 0x74
 80172b2:	9114      	str	r1, [sp, #80]	; 0x50
 80172b4:	9315      	str	r3, [sp, #84]	; 0x54
 80172b6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80172b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80172ba:	8809      	ldrh	r1, [r1, #0]
 80172bc:	889b      	ldrh	r3, [r3, #4]
 80172be:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80172c0:	440b      	add	r3, r1
 80172c2:	9210      	str	r2, [sp, #64]	; 0x40
 80172c4:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80172c8:	b21b      	sxth	r3, r3
 80172ca:	900f      	str	r0, [sp, #60]	; 0x3c
 80172cc:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 80172d0:	930e      	str	r3, [sp, #56]	; 0x38
 80172d2:	6833      	ldr	r3, [r6, #0]
 80172d4:	7a59      	ldrb	r1, [r3, #9]
 80172d6:	7a1b      	ldrb	r3, [r3, #8]
 80172d8:	9113      	str	r1, [sp, #76]	; 0x4c
 80172da:	9312      	str	r3, [sp, #72]	; 0x48
 80172dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80172de:	f9b3 4000 	ldrsh.w	r4, [r3]
 80172e2:	2a00      	cmp	r2, #0
 80172e4:	d059      	beq.n	801739a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 80172e6:	7c33      	ldrb	r3, [r6, #16]
 80172e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80172ea:	2b04      	cmp	r3, #4
 80172ec:	bf14      	ite	ne
 80172ee:	2301      	movne	r3, #1
 80172f0:	2302      	moveq	r3, #2
 80172f2:	4413      	add	r3, r2
 80172f4:	f04f 0800 	mov.w	r8, #0
 80172f8:	930d      	str	r3, [sp, #52]	; 0x34
 80172fa:	4645      	mov	r5, r8
 80172fc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8017300:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8017304:	4293      	cmp	r3, r2
 8017306:	da75      	bge.n	80173f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8017308:	2300      	movs	r3, #0
 801730a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801730c:	6832      	ldr	r2, [r6, #0]
 801730e:	931a      	str	r3, [sp, #104]	; 0x68
 8017310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017312:	428b      	cmp	r3, r1
 8017314:	db43      	blt.n	801739e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8017316:	6813      	ldr	r3, [r2, #0]
 8017318:	4610      	mov	r0, r2
 801731a:	695b      	ldr	r3, [r3, #20]
 801731c:	4798      	blx	r3
 801731e:	4681      	mov	r9, r0
 8017320:	6830      	ldr	r0, [r6, #0]
 8017322:	aa1b      	add	r2, sp, #108	; 0x6c
 8017324:	4649      	mov	r1, r9
 8017326:	6803      	ldr	r3, [r0, #0]
 8017328:	689f      	ldr	r7, [r3, #8]
 801732a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801732e:	47b8      	blx	r7
 8017330:	901a      	str	r0, [sp, #104]	; 0x68
 8017332:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8017336:	45d1      	cmp	r9, sl
 8017338:	d045      	beq.n	80173c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801733a:	f242 070b 	movw	r7, #8203	; 0x200b
 801733e:	45b9      	cmp	r9, r7
 8017340:	d041      	beq.n	80173c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017342:	f1b9 0f00 	cmp.w	r9, #0
 8017346:	f000 80ee 	beq.w	8017526 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801734a:	f1b9 0f0a 	cmp.w	r9, #10
 801734e:	d057      	beq.n	8017400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017350:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017352:	b383      	cbz	r3, 80173b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8017354:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8017358:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801735a:	2a00      	cmp	r2, #0
 801735c:	f000 80d2 	beq.w	8017504 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8017360:	f1bb 0f00 	cmp.w	fp, #0
 8017364:	d100      	bne.n	8017368 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8017366:	4444      	add	r4, r8
 8017368:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801736c:	f1bb 0f01 	cmp.w	fp, #1
 8017370:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8017374:	f892 800a 	ldrb.w	r8, [r2, #10]
 8017378:	ea48 0803 	orr.w	r8, r8, r3
 801737c:	d128      	bne.n	80173d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801737e:	eba4 0408 	sub.w	r4, r4, r8
 8017382:	2d00      	cmp	r5, #0
 8017384:	d143      	bne.n	801740e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8017386:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017388:	eb08 0304 	add.w	r3, r8, r4
 801738c:	4413      	add	r3, r2
 801738e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017390:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017394:	4293      	cmp	r3, r2
 8017396:	da44      	bge.n	8017422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017398:	e02b      	b.n	80173f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801739a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801739c:	e7aa      	b.n	80172f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801739e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80173a2:	4659      	mov	r1, fp
 80173a4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80173a6:	9301      	str	r3, [sp, #4]
 80173a8:	ab1b      	add	r3, sp, #108	; 0x6c
 80173aa:	9300      	str	r3, [sp, #0]
 80173ac:	ab1a      	add	r3, sp, #104	; 0x68
 80173ae:	f002 fa93 	bl	80198d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80173b2:	4681      	mov	r9, r0
 80173b4:	e7bd      	b.n	8017332 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80173b6:	6830      	ldr	r0, [r6, #0]
 80173b8:	6803      	ldr	r3, [r0, #0]
 80173ba:	691b      	ldr	r3, [r3, #16]
 80173bc:	4798      	blx	r3
 80173be:	4550      	cmp	r0, sl
 80173c0:	d001      	beq.n	80173c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80173c2:	42b8      	cmp	r0, r7
 80173c4:	d1c8      	bne.n	8017358 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 80173c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173c8:	464d      	mov	r5, r9
 80173ca:	3301      	adds	r3, #1
 80173cc:	930c      	str	r3, [sp, #48]	; 0x30
 80173ce:	e797      	b.n	8017300 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 80173d0:	2d00      	cmp	r5, #0
 80173d2:	f000 80aa 	beq.w	801752a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 80173d6:	f1bb 0f00 	cmp.w	fp, #0
 80173da:	d118      	bne.n	801740e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80173dc:	6830      	ldr	r0, [r6, #0]
 80173de:	4629      	mov	r1, r5
 80173e0:	6803      	ldr	r3, [r0, #0]
 80173e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173e4:	4798      	blx	r3
 80173e6:	4404      	add	r4, r0
 80173e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80173ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80173ec:	1ae3      	subs	r3, r4, r3
 80173ee:	4293      	cmp	r3, r2
 80173f0:	dd17      	ble.n	8017422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80173f2:	464d      	mov	r5, r9
 80173f4:	2d00      	cmp	r5, #0
 80173f6:	f000 8096 	beq.w	8017526 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80173fa:	2d0a      	cmp	r5, #10
 80173fc:	f040 8084 	bne.w	8017508 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8017400:	250a      	movs	r5, #10
 8017402:	fab5 f085 	clz	r0, r5
 8017406:	0940      	lsrs	r0, r0, #5
 8017408:	b01d      	add	sp, #116	; 0x74
 801740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801740e:	6830      	ldr	r0, [r6, #0]
 8017410:	4629      	mov	r1, r5
 8017412:	6803      	ldr	r3, [r0, #0]
 8017414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017416:	4798      	blx	r3
 8017418:	f1bb 0f01 	cmp.w	fp, #1
 801741c:	eba4 0400 	sub.w	r4, r4, r0
 8017420:	d0b1      	beq.n	8017386 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8017422:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017424:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017426:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801742a:	f9b3 5000 	ldrsh.w	r5, [r3]
 801742e:	7b43      	ldrb	r3, [r0, #13]
 8017430:	4421      	add	r1, r4
 8017432:	015b      	lsls	r3, r3, #5
 8017434:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017438:	7983      	ldrb	r3, [r0, #6]
 801743a:	4313      	orrs	r3, r2
 801743c:	440b      	add	r3, r1
 801743e:	42ab      	cmp	r3, r5
 8017440:	dbc1      	blt.n	80173c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017444:	4299      	cmp	r1, r3
 8017446:	dabe      	bge.n	80173c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017448:	6830      	ldr	r0, [r6, #0]
 801744a:	42a5      	cmp	r5, r4
 801744c:	6803      	ldr	r3, [r0, #0]
 801744e:	bfcc      	ite	gt
 8017450:	1b2d      	subgt	r5, r5, r4
 8017452:	2500      	movle	r5, #0
 8017454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017456:	bfc8      	it	gt
 8017458:	b2ad      	uxthgt	r5, r5
 801745a:	4798      	blx	r3
 801745c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801745e:	4935      	ldr	r1, [pc, #212]	; (8017534 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8017460:	7b5a      	ldrb	r2, [r3, #13]
 8017462:	f893 e008 	ldrb.w	lr, [r3, #8]
 8017466:	f012 0f40 	tst.w	r2, #64	; 0x40
 801746a:	bf18      	it	ne
 801746c:	468c      	movne	ip, r1
 801746e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017470:	bf08      	it	eq
 8017472:	f04f 0c00 	moveq.w	ip, #0
 8017476:	4408      	add	r0, r1
 8017478:	00d1      	lsls	r1, r2, #3
 801747a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801747e:	ea41 070e 	orr.w	r7, r1, lr
 8017482:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8017484:	ea4c 0707 	orr.w	r7, ip, r7
 8017488:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801748c:	1bc7      	subs	r7, r0, r7
 801748e:	b2bf      	uxth	r7, r7
 8017490:	fa0f fa87 	sxth.w	sl, r7
 8017494:	4551      	cmp	r1, sl
 8017496:	dd33      	ble.n	8017500 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8017498:	0112      	lsls	r2, r2, #4
 801749a:	79d8      	ldrb	r0, [r3, #7]
 801749c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80174a0:	4302      	orrs	r2, r0
 80174a2:	4492      	add	sl, r2
 80174a4:	4551      	cmp	r1, sl
 80174a6:	dc8e      	bgt.n	80173c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80174a8:	1bcf      	subs	r7, r1, r7
 80174aa:	468a      	mov	sl, r1
 80174ac:	b2bf      	uxth	r7, r7
 80174ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80174b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174b2:	6830      	ldr	r0, [r6, #0]
 80174b4:	681a      	ldr	r2, [r3, #0]
 80174b6:	6801      	ldr	r1, [r0, #0]
 80174b8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80174ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80174bc:	9311      	str	r3, [sp, #68]	; 0x44
 80174be:	9216      	str	r2, [sp, #88]	; 0x58
 80174c0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80174c2:	4788      	blx	r1
 80174c4:	79b1      	ldrb	r1, [r6, #6]
 80174c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80174c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80174ca:	7bb1      	ldrb	r1, [r6, #14]
 80174cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80174ce:	910a      	str	r1, [sp, #40]	; 0x28
 80174d0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 80174d4:	9109      	str	r1, [sp, #36]	; 0x24
 80174d6:	68b1      	ldr	r1, [r6, #8]
 80174d8:	9305      	str	r3, [sp, #20]
 80174da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80174dc:	9206      	str	r2, [sp, #24]
 80174de:	e9cd a501 	strd	sl, r5, [sp, #4]
 80174e2:	4425      	add	r5, r4
 80174e4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80174e8:	b22d      	sxth	r5, r5
 80174ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174ec:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80174f0:	9500      	str	r5, [sp, #0]
 80174f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80174f4:	681a      	ldr	r2, [r3, #0]
 80174f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80174f8:	685b      	ldr	r3, [r3, #4]
 80174fa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80174fc:	47a8      	blx	r5
 80174fe:	e762      	b.n	80173c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017500:	2700      	movs	r7, #0
 8017502:	e7d4      	b.n	80174ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8017504:	4690      	mov	r8, r2
 8017506:	e75e      	b.n	80173c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8017508:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801750a:	3401      	adds	r4, #1
 801750c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801750e:	429c      	cmp	r4, r3
 8017510:	f6bf af77 	bge.w	8017402 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8017514:	4659      	mov	r1, fp
 8017516:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8017518:	f002 f96a 	bl	80197f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801751c:	4605      	mov	r5, r0
 801751e:	b110      	cbz	r0, 8017526 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8017520:	280a      	cmp	r0, #10
 8017522:	d1f2      	bne.n	801750a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8017524:	e76c      	b.n	8017400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017526:	2500      	movs	r5, #0
 8017528:	e76b      	b.n	8017402 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801752a:	f1bb 0f00 	cmp.w	fp, #0
 801752e:	f43f af5b 	beq.w	80173e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8017532:	e776      	b.n	8017422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017534:	fffffe00 	.word	0xfffffe00

08017538 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017538:	b530      	push	{r4, r5, lr}
 801753a:	8a44      	ldrh	r4, [r0, #18]
 801753c:	8ac5      	ldrh	r5, [r0, #22]
 801753e:	82c3      	strh	r3, [r0, #22]
 8017540:	442c      	add	r4, r5
 8017542:	1ae4      	subs	r4, r4, r3
 8017544:	8b03      	ldrh	r3, [r0, #24]
 8017546:	8244      	strh	r4, [r0, #18]
 8017548:	8a84      	ldrh	r4, [r0, #20]
 801754a:	4422      	add	r2, r4
 801754c:	440c      	add	r4, r1
 801754e:	1a59      	subs	r1, r3, r1
 8017550:	8342      	strh	r2, [r0, #26]
 8017552:	8284      	strh	r4, [r0, #20]
 8017554:	8301      	strh	r1, [r0, #24]
 8017556:	bd30      	pop	{r4, r5, pc}

08017558 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8017558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801755c:	7a45      	ldrb	r5, [r0, #9]
 801755e:	b085      	sub	sp, #20
 8017560:	4604      	mov	r4, r0
 8017562:	4689      	mov	r9, r1
 8017564:	1eeb      	subs	r3, r5, #3
 8017566:	b2db      	uxtb	r3, r3
 8017568:	b329      	cbz	r1, 80175b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801756a:	2b01      	cmp	r3, #1
 801756c:	d921      	bls.n	80175b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801756e:	1e69      	subs	r1, r5, #1
 8017570:	f1d1 0b00 	rsbs	fp, r1, #0
 8017574:	eb4b 0b01 	adc.w	fp, fp, r1
 8017578:	1eaa      	subs	r2, r5, #2
 801757a:	2500      	movs	r5, #0
 801757c:	4253      	negs	r3, r2
 801757e:	9500      	str	r5, [sp, #0]
 8017580:	4153      	adcs	r3, r2
 8017582:	9301      	str	r3, [sp, #4]
 8017584:	2600      	movs	r6, #0
 8017586:	f242 080b 	movw	r8, #8203	; 0x200b
 801758a:	8266      	strh	r6, [r4, #18]
 801758c:	82a6      	strh	r6, [r4, #20]
 801758e:	2300      	movs	r3, #0
 8017590:	68e2      	ldr	r2, [r4, #12]
 8017592:	7a21      	ldrb	r1, [r4, #8]
 8017594:	9303      	str	r3, [sp, #12]
 8017596:	ab03      	add	r3, sp, #12
 8017598:	6860      	ldr	r0, [r4, #4]
 801759a:	8827      	ldrh	r7, [r4, #0]
 801759c:	f002 f968 	bl	8019870 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80175a0:	8020      	strh	r0, [r4, #0]
 80175a2:	b9b0      	cbnz	r0, 80175d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 80175a4:	8b22      	ldrh	r2, [r4, #24]
 80175a6:	2300      	movs	r3, #0
 80175a8:	4611      	mov	r1, r2
 80175aa:	4620      	mov	r0, r4
 80175ac:	f7ff ffc4 	bl	8017538 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80175b0:	e062      	b.n	8017678 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 80175b2:	468b      	mov	fp, r1
 80175b4:	e7e0      	b.n	8017578 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 80175b6:	2b01      	cmp	r3, #1
 80175b8:	f105 35ff 	add.w	r5, r5, #4294967295
 80175bc:	9101      	str	r1, [sp, #4]
 80175be:	468b      	mov	fp, r1
 80175c0:	bf8c      	ite	hi
 80175c2:	2300      	movhi	r3, #0
 80175c4:	2301      	movls	r3, #1
 80175c6:	2d01      	cmp	r5, #1
 80175c8:	9300      	str	r3, [sp, #0]
 80175ca:	bf8c      	ite	hi
 80175cc:	2500      	movhi	r5, #0
 80175ce:	2501      	movls	r5, #1
 80175d0:	e7d8      	b.n	8017584 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 80175d2:	8ae3      	ldrh	r3, [r4, #22]
 80175d4:	280a      	cmp	r0, #10
 80175d6:	f103 0301 	add.w	r3, r3, #1
 80175da:	82e3      	strh	r3, [r4, #22]
 80175dc:	d0e2      	beq.n	80175a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 80175de:	9a03      	ldr	r2, [sp, #12]
 80175e0:	b972      	cbnz	r2, 8017600 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 80175e2:	4540      	cmp	r0, r8
 80175e4:	d1d3      	bne.n	801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80175e6:	8823      	ldrh	r3, [r4, #0]
 80175e8:	8b21      	ldrh	r1, [r4, #24]
 80175ea:	2b20      	cmp	r3, #32
 80175ec:	d001      	beq.n	80175f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 80175ee:	4543      	cmp	r3, r8
 80175f0:	d11d      	bne.n	801762e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80175f2:	2f20      	cmp	r7, #32
 80175f4:	d002      	beq.n	80175fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80175f6:	4547      	cmp	r7, r8
 80175f8:	bf18      	it	ne
 80175fa:	460e      	movne	r6, r1
 80175fc:	2001      	movs	r0, #1
 80175fe:	e017      	b.n	8017630 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8017600:	4540      	cmp	r0, r8
 8017602:	d012      	beq.n	801762a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8017604:	8893      	ldrh	r3, [r2, #4]
 8017606:	4639      	mov	r1, r7
 8017608:	8023      	strh	r3, [r4, #0]
 801760a:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801760e:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8017612:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8017616:	ea4a 0a00 	orr.w	sl, sl, r0
 801761a:	68e0      	ldr	r0, [r4, #12]
 801761c:	6803      	ldr	r3, [r0, #0]
 801761e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017620:	4798      	blx	r3
 8017622:	eb0a 0200 	add.w	r2, sl, r0
 8017626:	b292      	uxth	r2, r2
 8017628:	e7dd      	b.n	80175e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801762a:	2200      	movs	r2, #0
 801762c:	e7db      	b.n	80175e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801762e:	2000      	movs	r0, #0
 8017630:	440a      	add	r2, r1
 8017632:	8aa3      	ldrh	r3, [r4, #20]
 8017634:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017638:	b292      	uxth	r2, r2
 801763a:	8322      	strh	r2, [r4, #24]
 801763c:	4413      	add	r3, r2
 801763e:	f1b9 0f00 	cmp.w	r9, #0
 8017642:	d022      	beq.n	801768a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8017644:	f1bb 0f00 	cmp.w	fp, #0
 8017648:	d102      	bne.n	8017650 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801764a:	9901      	ldr	r1, [sp, #4]
 801764c:	b149      	cbz	r1, 8017662 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801764e:	b140      	cbz	r0, 8017662 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8017650:	8ba1      	ldrh	r1, [r4, #28]
 8017652:	4419      	add	r1, r3
 8017654:	458c      	cmp	ip, r1
 8017656:	da12      	bge.n	801767e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8017658:	8a61      	ldrh	r1, [r4, #18]
 801765a:	b181      	cbz	r1, 801767e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801765c:	4563      	cmp	r3, ip
 801765e:	dd96      	ble.n	801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017660:	e004      	b.n	801766c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8017662:	4563      	cmp	r3, ip
 8017664:	dd93      	ble.n	801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8017666:	8a63      	ldrh	r3, [r4, #18]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d090      	beq.n	801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801766c:	2301      	movs	r3, #1
 801766e:	8ba2      	ldrh	r2, [r4, #28]
 8017670:	77a3      	strb	r3, [r4, #30]
 8017672:	8b63      	ldrh	r3, [r4, #26]
 8017674:	4413      	add	r3, r2
 8017676:	8363      	strh	r3, [r4, #26]
 8017678:	b005      	add	sp, #20
 801767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767e:	2300      	movs	r3, #0
 8017680:	4611      	mov	r1, r2
 8017682:	4620      	mov	r0, r4
 8017684:	f7ff ff58 	bl	8017538 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017688:	e781      	b.n	801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801768a:	4563      	cmp	r3, ip
 801768c:	dd16      	ble.n	80176bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801768e:	9b00      	ldr	r3, [sp, #0]
 8017690:	b113      	cbz	r3, 8017698 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8017692:	2301      	movs	r3, #1
 8017694:	460a      	mov	r2, r1
 8017696:	e787      	b.n	80175a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8017698:	2d00      	cmp	r5, #0
 801769a:	f43f af78 	beq.w	801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801769e:	2800      	cmp	r0, #0
 80176a0:	f47f af75 	bne.w	801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80176a4:	2f20      	cmp	r7, #32
 80176a6:	d001      	beq.n	80176ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 80176a8:	4547      	cmp	r7, r8
 80176aa:	d102      	bne.n	80176b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 80176ac:	2301      	movs	r3, #1
 80176ae:	4632      	mov	r2, r6
 80176b0:	e77b      	b.n	80175aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 80176b2:	8a63      	ldrh	r3, [r4, #18]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	f43f af6a 	beq.w	801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80176ba:	e7dd      	b.n	8017678 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 80176bc:	2800      	cmp	r0, #0
 80176be:	f47f af66 	bne.w	801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80176c2:	2f20      	cmp	r7, #32
 80176c4:	d002      	beq.n	80176cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 80176c6:	4547      	cmp	r7, r8
 80176c8:	f47f af61 	bne.w	801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80176cc:	2301      	movs	r3, #1
 80176ce:	4632      	mov	r2, r6
 80176d0:	e7d7      	b.n	8017682 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

080176d2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80176d2:	b570      	push	{r4, r5, r6, lr}
 80176d4:	4606      	mov	r6, r0
 80176d6:	b08a      	sub	sp, #40	; 0x28
 80176d8:	4615      	mov	r5, r2
 80176da:	b191      	cbz	r1, 8017702 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 80176dc:	2401      	movs	r4, #1
 80176de:	e9cd 3100 	strd	r3, r1, [sp]
 80176e2:	4613      	mov	r3, r2
 80176e4:	4601      	mov	r1, r0
 80176e6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80176ea:	a802      	add	r0, sp, #8
 80176ec:	f7ff fd20 	bl	8017130 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80176f0:	2100      	movs	r1, #0
 80176f2:	a802      	add	r0, sp, #8
 80176f4:	f7ff ff30 	bl	8017558 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80176f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80176fc:	b173      	cbz	r3, 801771c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80176fe:	3401      	adds	r4, #1
 8017700:	e7f6      	b.n	80176f0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8017702:	2401      	movs	r4, #1
 8017704:	4611      	mov	r1, r2
 8017706:	f002 f873 	bl	80197f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801770a:	280a      	cmp	r0, #10
 801770c:	4629      	mov	r1, r5
 801770e:	4630      	mov	r0, r6
 8017710:	bf08      	it	eq
 8017712:	3401      	addeq	r4, #1
 8017714:	f002 f86c 	bl	80197f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017718:	2800      	cmp	r0, #0
 801771a:	d1f6      	bne.n	801770a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801771c:	b2a0      	uxth	r0, r4
 801771e:	b00a      	add	sp, #40	; 0x28
 8017720:	bd70      	pop	{r4, r5, r6, pc}

08017722 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017726:	b0db      	sub	sp, #364	; 0x16c
 8017728:	468a      	mov	sl, r1
 801772a:	461c      	mov	r4, r3
 801772c:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8017730:	9009      	str	r0, [sp, #36]	; 0x24
 8017732:	f1bb 0f00 	cmp.w	fp, #0
 8017736:	f000 80c7 	beq.w	80178c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	2b00      	cmp	r3, #0
 801773e:	f000 80c3 	beq.w	80178c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017742:	7ba3      	ldrb	r3, [r4, #14]
 8017744:	2b00      	cmp	r3, #0
 8017746:	f000 80bf 	beq.w	80178c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801774a:	af0c      	add	r7, sp, #48	; 0x30
 801774c:	6810      	ldr	r0, [r2, #0]
 801774e:	6851      	ldr	r1, [r2, #4]
 8017750:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8017754:	463b      	mov	r3, r7
 8017756:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801775a:	c303      	stmia	r3!, {r0, r1}
 801775c:	2100      	movs	r1, #0
 801775e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8017762:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017766:	4638      	mov	r0, r7
 8017768:	910e      	str	r1, [sp, #56]	; 0x38
 801776a:	a90e      	add	r1, sp, #56	; 0x38
 801776c:	79a2      	ldrb	r2, [r4, #6]
 801776e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017772:	f7ff fd49 	bl	8017208 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017776:	a90e      	add	r1, sp, #56	; 0x38
 8017778:	79a2      	ldrb	r2, [r4, #6]
 801777a:	4608      	mov	r0, r1
 801777c:	f7ff fd44 	bl	8017208 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017780:	4648      	mov	r0, r9
 8017782:	f001 fef3 	bl	801956c <_ZN8touchgfx12TextProviderC1Ev>
 8017786:	6820      	ldr	r0, [r4, #0]
 8017788:	6803      	ldr	r3, [r0, #0]
 801778a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801778c:	4798      	blx	r3
 801778e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8017790:	4603      	mov	r3, r0
 8017792:	4659      	mov	r1, fp
 8017794:	4648      	mov	r0, r9
 8017796:	f001 ff06 	bl	80195a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801779a:	a82e      	add	r0, sp, #184	; 0xb8
 801779c:	f001 fee6 	bl	801956c <_ZN8touchgfx12TextProviderC1Ev>
 80177a0:	f894 8004 	ldrb.w	r8, [r4, #4]
 80177a4:	f1b8 0f00 	cmp.w	r8, #0
 80177a8:	d009      	beq.n	80177be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 80177aa:	6820      	ldr	r0, [r4, #0]
 80177ac:	6803      	ldr	r3, [r0, #0]
 80177ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177b0:	4798      	blx	r3
 80177b2:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80177b4:	4603      	mov	r3, r0
 80177b6:	4659      	mov	r1, fp
 80177b8:	a82e      	add	r0, sp, #184	; 0xb8
 80177ba:	f001 fef4 	bl	80195a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80177be:	6820      	ldr	r0, [r4, #0]
 80177c0:	6803      	ldr	r3, [r0, #0]
 80177c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177c4:	4798      	blx	r3
 80177c6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80177ca:	182e      	adds	r6, r5, r0
 80177cc:	2e00      	cmp	r6, #0
 80177ce:	dd45      	ble.n	801785c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 80177d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80177d4:	4283      	cmp	r3, r0
 80177d6:	db41      	blt.n	801785c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 80177d8:	441d      	add	r5, r3
 80177da:	fb95 f5f6 	sdiv	r5, r5, r6
 80177de:	a844      	add	r0, sp, #272	; 0x110
 80177e0:	f001 fec4 	bl	801956c <_ZN8touchgfx12TextProviderC1Ev>
 80177e4:	7c23      	ldrb	r3, [r4, #16]
 80177e6:	b14b      	cbz	r3, 80177fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 80177e8:	6820      	ldr	r0, [r4, #0]
 80177ea:	6803      	ldr	r3, [r0, #0]
 80177ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177ee:	4798      	blx	r3
 80177f0:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80177f2:	4603      	mov	r3, r0
 80177f4:	4659      	mov	r1, fp
 80177f6:	a844      	add	r0, sp, #272	; 0x110
 80177f8:	f001 fed5 	bl	80195a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80177fc:	7c21      	ldrb	r1, [r4, #16]
 80177fe:	a810      	add	r0, sp, #64	; 0x40
 8017800:	7963      	ldrb	r3, [r4, #5]
 8017802:	9101      	str	r1, [sp, #4]
 8017804:	6821      	ldr	r1, [r4, #0]
 8017806:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801780a:	9100      	str	r1, [sp, #0]
 801780c:	a944      	add	r1, sp, #272	; 0x110
 801780e:	f7ff fc8f 	bl	8017130 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017812:	7c23      	ldrb	r3, [r4, #16]
 8017814:	bb23      	cbnz	r3, 8017860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8017816:	fa1f fb86 	uxth.w	fp, r6
 801781a:	2d00      	cmp	r5, #0
 801781c:	dd57      	ble.n	80178ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801781e:	7961      	ldrb	r1, [r4, #5]
 8017820:	4648      	mov	r0, r9
 8017822:	f001 ffe5 	bl	80197f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017826:	4603      	mov	r3, r0
 8017828:	f1b8 0f00 	cmp.w	r8, #0
 801782c:	d005      	beq.n	801783a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801782e:	9008      	str	r0, [sp, #32]
 8017830:	a82e      	add	r0, sp, #184	; 0xb8
 8017832:	7961      	ldrb	r1, [r4, #5]
 8017834:	f001 ffdc 	bl	80197f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017838:	9b08      	ldr	r3, [sp, #32]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d044      	beq.n	80178c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801783e:	2b0a      	cmp	r3, #10
 8017840:	d1eb      	bne.n	801781a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8017842:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017846:	3d01      	subs	r5, #1
 8017848:	445b      	add	r3, fp
 801784a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801784e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017852:	eba3 030b 	sub.w	r3, r3, fp
 8017856:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801785a:	e7de      	b.n	801781a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801785c:	2500      	movs	r5, #0
 801785e:	e7be      	b.n	80177de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8017860:	0073      	lsls	r3, r6, #1
 8017862:	9308      	str	r3, [sp, #32]
 8017864:	2d00      	cmp	r5, #0
 8017866:	dd32      	ble.n	80178ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8017868:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801786c:	a810      	add	r0, sp, #64	; 0x40
 801786e:	9b08      	ldr	r3, [sp, #32]
 8017870:	428b      	cmp	r3, r1
 8017872:	bfd4      	ite	le
 8017874:	2100      	movle	r1, #0
 8017876:	2101      	movgt	r1, #1
 8017878:	f7ff fe6e 	bl	8017558 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801787c:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8017880:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017884:	fa1f fb83 	uxth.w	fp, r3
 8017888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801788c:	459b      	cmp	fp, r3
 801788e:	d00b      	beq.n	80178a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8017890:	7961      	ldrb	r1, [r4, #5]
 8017892:	4648      	mov	r0, r9
 8017894:	f001 ffac 	bl	80197f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017898:	f1b8 0f00 	cmp.w	r8, #0
 801789c:	d0f0      	beq.n	8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801789e:	7961      	ldrb	r1, [r4, #5]
 80178a0:	a82e      	add	r0, sp, #184	; 0xb8
 80178a2:	f001 ffa5 	bl	80197f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80178a6:	e7eb      	b.n	8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 80178a8:	b2b3      	uxth	r3, r6
 80178aa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80178ae:	3d01      	subs	r5, #1
 80178b0:	441a      	add	r2, r3
 80178b2:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 80178b6:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80178ba:	1ad3      	subs	r3, r2, r3
 80178bc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80178c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d1cd      	bne.n	8017864 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 80178c8:	b05b      	add	sp, #364	; 0x16c
 80178ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178ce:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 80178d2:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 80178d6:	7c23      	ldrb	r3, [r4, #16]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d05f      	beq.n	801799c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 80178dc:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80178e0:	a810      	add	r0, sp, #64	; 0x40
 80178e2:	458b      	cmp	fp, r1
 80178e4:	bfd4      	ite	le
 80178e6:	2100      	movle	r1, #0
 80178e8:	2101      	movgt	r1, #1
 80178ea:	f7ff fe35 	bl	8017558 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80178ee:	f1b8 0f00 	cmp.w	r8, #0
 80178f2:	d04c      	beq.n	801798e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80178f4:	7c23      	ldrb	r3, [r4, #16]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d053      	beq.n	80179a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 80178fa:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80178fe:	7922      	ldrb	r2, [r4, #4]
 8017900:	2a01      	cmp	r2, #1
 8017902:	d13c      	bne.n	801797e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8017904:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8017908:	1ac0      	subs	r0, r0, r3
 801790a:	2302      	movs	r3, #2
 801790c:	fb90 f0f3 	sdiv	r0, r0, r3
 8017910:	b200      	sxth	r0, r0
 8017912:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017916:	4418      	add	r0, r3
 8017918:	7c23      	ldrb	r3, [r4, #16]
 801791a:	8028      	strh	r0, [r5, #0]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d03a      	beq.n	8017996 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8017920:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8017924:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8017928:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801792c:	f8cd 9010 	str.w	r9, [sp, #16]
 8017930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017932:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017936:	2200      	movs	r2, #0
 8017938:	2100      	movs	r1, #0
 801793a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801793e:	e9cd 5700 	strd	r5, r7, [sp]
 8017942:	4652      	mov	r2, sl
 8017944:	f7ff fcb2 	bl	80172ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017948:	2800      	cmp	r0, #0
 801794a:	d1bd      	bne.n	80178c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801794c:	b2b2      	uxth	r2, r6
 801794e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017952:	4611      	mov	r1, r2
 8017954:	4413      	add	r3, r2
 8017956:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801795a:	b21b      	sxth	r3, r3
 801795c:	1a52      	subs	r2, r2, r1
 801795e:	7c21      	ldrb	r1, [r4, #16]
 8017960:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017964:	b212      	sxth	r2, r2
 8017966:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801796a:	b109      	cbz	r1, 8017970 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801796c:	42b2      	cmp	r2, r6
 801796e:	dbab      	blt.n	80178c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8017970:	887a      	ldrh	r2, [r7, #2]
 8017972:	88f9      	ldrh	r1, [r7, #6]
 8017974:	440a      	add	r2, r1
 8017976:	b212      	sxth	r2, r2
 8017978:	4293      	cmp	r3, r2
 801797a:	ddac      	ble.n	80178d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801797c:	e7a4      	b.n	80178c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801797e:	2a02      	cmp	r2, #2
 8017980:	d107      	bne.n	8017992 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8017982:	7be2      	ldrb	r2, [r4, #15]
 8017984:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8017988:	1a80      	subs	r0, r0, r2
 801798a:	1ac0      	subs	r0, r0, r3
 801798c:	e7c0      	b.n	8017910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801798e:	7be0      	ldrb	r0, [r4, #15]
 8017990:	e7bf      	b.n	8017912 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8017992:	2000      	movs	r0, #0
 8017994:	e7bd      	b.n	8017912 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8017996:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801799a:	e7c3      	b.n	8017924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801799c:	f1b8 0f00 	cmp.w	r8, #0
 80179a0:	d0f5      	beq.n	801798e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80179a2:	2300      	movs	r3, #0
 80179a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80179a8:	6821      	ldr	r1, [r4, #0]
 80179aa:	a82e      	add	r0, sp, #184	; 0xb8
 80179ac:	f7ff fbfa 	bl	80171a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80179b0:	b203      	sxth	r3, r0
 80179b2:	e7a4      	b.n	80178fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

080179b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80179b4:	2b02      	cmp	r3, #2
 80179b6:	b510      	push	{r4, lr}
 80179b8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80179bc:	d00b      	beq.n	80179d6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80179be:	2b03      	cmp	r3, #3
 80179c0:	d00e      	beq.n	80179e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80179c2:	2b01      	cmp	r3, #1
 80179c4:	d001      	beq.n	80179ca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80179c6:	1860      	adds	r0, r4, r1
 80179c8:	bd10      	pop	{r4, pc}
 80179ca:	8880      	ldrh	r0, [r0, #4]
 80179cc:	4420      	add	r0, r4
 80179ce:	b200      	sxth	r0, r0
 80179d0:	1a80      	subs	r0, r0, r2
 80179d2:	3801      	subs	r0, #1
 80179d4:	e7f8      	b.n	80179c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80179d6:	8880      	ldrh	r0, [r0, #4]
 80179d8:	4420      	add	r0, r4
 80179da:	b200      	sxth	r0, r0
 80179dc:	1a40      	subs	r0, r0, r1
 80179de:	e7f8      	b.n	80179d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80179e0:	18a0      	adds	r0, r4, r2
 80179e2:	e7f1      	b.n	80179c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080179e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80179e4:	2b02      	cmp	r3, #2
 80179e6:	b510      	push	{r4, lr}
 80179e8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80179ec:	d006      	beq.n	80179fc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80179ee:	2b03      	cmp	r3, #3
 80179f0:	d00a      	beq.n	8017a08 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80179f2:	2b01      	cmp	r3, #1
 80179f4:	bf14      	ite	ne
 80179f6:	18a0      	addne	r0, r4, r2
 80179f8:	1860      	addeq	r0, r4, r1
 80179fa:	bd10      	pop	{r4, pc}
 80179fc:	88c0      	ldrh	r0, [r0, #6]
 80179fe:	4420      	add	r0, r4
 8017a00:	b200      	sxth	r0, r0
 8017a02:	1a80      	subs	r0, r0, r2
 8017a04:	3801      	subs	r0, #1
 8017a06:	e7f8      	b.n	80179fa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8017a08:	88c0      	ldrh	r0, [r0, #6]
 8017a0a:	4420      	add	r0, r4
 8017a0c:	b200      	sxth	r0, r0
 8017a0e:	1a40      	subs	r0, r0, r1
 8017a10:	e7f8      	b.n	8017a04 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08017a14 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017a14:	4b01      	ldr	r3, [pc, #4]	; (8017a1c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017a16:	2200      	movs	r2, #0
 8017a18:	601a      	str	r2, [r3, #0]
 8017a1a:	4770      	bx	lr
 8017a1c:	2000bc90 	.word	0x2000bc90

08017a20 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8017a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a22:	1e05      	subs	r5, r0, #0
 8017a24:	f04f 0601 	mov.w	r6, #1
 8017a28:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8017a2c:	bfba      	itte	lt
 8017a2e:	f04f 37ff 	movlt.w	r7, #4294967295
 8017a32:	426d      	neglt	r5, r5
 8017a34:	2701      	movge	r7, #1
 8017a36:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8017a3a:	f1be 0f00 	cmp.w	lr, #0
 8017a3e:	bfbc      	itt	lt
 8017a40:	f1ce 0e00 	rsblt	lr, lr, #0
 8017a44:	427f      	neglt	r7, r7
 8017a46:	2c00      	cmp	r4, #0
 8017a48:	fa4e f001 	asr.w	r0, lr, r1
 8017a4c:	fa06 f101 	lsl.w	r1, r6, r1
 8017a50:	bfbc      	itt	lt
 8017a52:	4264      	neglt	r4, r4
 8017a54:	427f      	neglt	r7, r7
 8017a56:	3901      	subs	r1, #1
 8017a58:	ea01 010e 	and.w	r1, r1, lr
 8017a5c:	434d      	muls	r5, r1
 8017a5e:	f8dc 1000 	ldr.w	r1, [ip]
 8017a62:	fb03 1300 	mla	r3, r3, r0, r1
 8017a66:	fb95 f1f4 	sdiv	r1, r5, r4
 8017a6a:	fb04 5511 	mls	r5, r4, r1, r5
 8017a6e:	441d      	add	r5, r3
 8017a70:	fb95 f3f4 	sdiv	r3, r5, r4
 8017a74:	4419      	add	r1, r3
 8017a76:	fb04 5413 	mls	r4, r4, r3, r5
 8017a7a:	fb02 1000 	mla	r0, r2, r0, r1
 8017a7e:	f8cc 4000 	str.w	r4, [ip]
 8017a82:	4378      	muls	r0, r7
 8017a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017a88 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a8c:	4c24      	ldr	r4, [pc, #144]	; (8017b20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8017a8e:	b086      	sub	sp, #24
 8017a90:	4605      	mov	r5, r0
 8017a92:	6807      	ldr	r7, [r0, #0]
 8017a94:	69a3      	ldr	r3, [r4, #24]
 8017a96:	b92b      	cbnz	r3, 8017aa4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8017a98:	6840      	ldr	r0, [r0, #4]
 8017a9a:	e9c5 7000 	strd	r7, r0, [r5]
 8017a9e:	b006      	add	sp, #24
 8017aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aa4:	f04f 0802 	mov.w	r8, #2
 8017aa8:	68a2      	ldr	r2, [r4, #8]
 8017aaa:	ae06      	add	r6, sp, #24
 8017aac:	6820      	ldr	r0, [r4, #0]
 8017aae:	fb93 f1f8 	sdiv	r1, r3, r8
 8017ab2:	440a      	add	r2, r1
 8017ab4:	69e1      	ldr	r1, [r4, #28]
 8017ab6:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017aba:	9700      	str	r7, [sp, #0]
 8017abc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017abe:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8017ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017ac4:	f7ff ffac 	bl	8017a20 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017ac8:	69a3      	ldr	r3, [r4, #24]
 8017aca:	4607      	mov	r7, r0
 8017acc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017ace:	9301      	str	r3, [sp, #4]
 8017ad0:	686b      	ldr	r3, [r5, #4]
 8017ad2:	6a21      	ldr	r1, [r4, #32]
 8017ad4:	9300      	str	r3, [sp, #0]
 8017ad6:	9602      	str	r6, [sp, #8]
 8017ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017ada:	6860      	ldr	r0, [r4, #4]
 8017adc:	f7ff ffa0 	bl	8017a20 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017ae0:	69a2      	ldr	r2, [r4, #24]
 8017ae2:	6963      	ldr	r3, [r4, #20]
 8017ae4:	4407      	add	r7, r0
 8017ae6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017ae8:	68e0      	ldr	r0, [r4, #12]
 8017aea:	fb92 f8f8 	sdiv	r8, r2, r8
 8017aee:	4443      	add	r3, r8
 8017af0:	9305      	str	r3, [sp, #20]
 8017af2:	682b      	ldr	r3, [r5, #0]
 8017af4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8017af8:	9300      	str	r3, [sp, #0]
 8017afa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017afc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017afe:	f7ff ff8f 	bl	8017a20 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017b02:	69a3      	ldr	r3, [r4, #24]
 8017b04:	4680      	mov	r8, r0
 8017b06:	9602      	str	r6, [sp, #8]
 8017b08:	9301      	str	r3, [sp, #4]
 8017b0a:	686b      	ldr	r3, [r5, #4]
 8017b0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017b0e:	9300      	str	r3, [sp, #0]
 8017b10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017b12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8017b14:	6920      	ldr	r0, [r4, #16]
 8017b16:	f7ff ff83 	bl	8017a20 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017b1a:	4440      	add	r0, r8
 8017b1c:	e7bd      	b.n	8017a9a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8017b1e:	bf00      	nop
 8017b20:	2000bc94 	.word	0x2000bc94

08017b24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017b24:	4b07      	ldr	r3, [pc, #28]	; (8017b44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017b26:	b510      	push	{r4, lr}
 8017b28:	781b      	ldrb	r3, [r3, #0]
 8017b2a:	2b01      	cmp	r3, #1
 8017b2c:	d108      	bne.n	8017b40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017b2e:	4b06      	ldr	r3, [pc, #24]	; (8017b48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017b30:	880c      	ldrh	r4, [r1, #0]
 8017b32:	881b      	ldrh	r3, [r3, #0]
 8017b34:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017b38:	3b01      	subs	r3, #1
 8017b3a:	1b1b      	subs	r3, r3, r4
 8017b3c:	8003      	strh	r3, [r0, #0]
 8017b3e:	800a      	strh	r2, [r1, #0]
 8017b40:	bd10      	pop	{r4, pc}
 8017b42:	bf00      	nop
 8017b44:	2000bc60 	.word	0x2000bc60
 8017b48:	2000bc64 	.word	0x2000bc64

08017b4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017b4c:	4b0a      	ldr	r3, [pc, #40]	; (8017b78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017b4e:	b510      	push	{r4, lr}
 8017b50:	781b      	ldrb	r3, [r3, #0]
 8017b52:	2b01      	cmp	r3, #1
 8017b54:	d10e      	bne.n	8017b74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017b56:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017b5a:	8843      	ldrh	r3, [r0, #2]
 8017b5c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017b60:	18ca      	adds	r2, r1, r3
 8017b62:	4b06      	ldr	r3, [pc, #24]	; (8017b7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017b64:	8044      	strh	r4, [r0, #2]
 8017b66:	881b      	ldrh	r3, [r3, #0]
 8017b68:	1a9b      	subs	r3, r3, r2
 8017b6a:	8003      	strh	r3, [r0, #0]
 8017b6c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017b70:	8081      	strh	r1, [r0, #4]
 8017b72:	80c3      	strh	r3, [r0, #6]
 8017b74:	bd10      	pop	{r4, pc}
 8017b76:	bf00      	nop
 8017b78:	2000bc60 	.word	0x2000bc60
 8017b7c:	2000bc5c 	.word	0x2000bc5c

08017b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017b80:	4b07      	ldr	r3, [pc, #28]	; (8017ba0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017b82:	b510      	push	{r4, lr}
 8017b84:	781b      	ldrb	r3, [r3, #0]
 8017b86:	2b01      	cmp	r3, #1
 8017b88:	d108      	bne.n	8017b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017b8a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017b8e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017b92:	8003      	strh	r3, [r0, #0]
 8017b94:	8893      	ldrh	r3, [r2, #4]
 8017b96:	3b01      	subs	r3, #1
 8017b98:	1b1b      	subs	r3, r3, r4
 8017b9a:	800b      	strh	r3, [r1, #0]
 8017b9c:	bd10      	pop	{r4, pc}
 8017b9e:	bf00      	nop
 8017ba0:	2000bc60 	.word	0x2000bc60

08017ba4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017ba4:	4b08      	ldr	r3, [pc, #32]	; (8017bc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017ba6:	b513      	push	{r0, r1, r4, lr}
 8017ba8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017bac:	2400      	movs	r4, #0
 8017bae:	4b07      	ldr	r3, [pc, #28]	; (8017bcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8017bb0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017bb4:	466a      	mov	r2, sp
 8017bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017bba:	9400      	str	r4, [sp, #0]
 8017bbc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017bc0:	f7ff ffde 	bl	8017b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017bc4:	b002      	add	sp, #8
 8017bc6:	bd10      	pop	{r4, pc}
 8017bc8:	2000bc5c 	.word	0x2000bc5c
 8017bcc:	2000bc5e 	.word	0x2000bc5e

08017bd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017bd0:	4b0a      	ldr	r3, [pc, #40]	; (8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017bd2:	460a      	mov	r2, r1
 8017bd4:	b510      	push	{r4, lr}
 8017bd6:	781b      	ldrb	r3, [r3, #0]
 8017bd8:	2b01      	cmp	r3, #1
 8017bda:	d10d      	bne.n	8017bf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017bdc:	8881      	ldrh	r1, [r0, #4]
 8017bde:	8803      	ldrh	r3, [r0, #0]
 8017be0:	440b      	add	r3, r1
 8017be2:	4601      	mov	r1, r0
 8017be4:	3b01      	subs	r3, #1
 8017be6:	f821 3b02 	strh.w	r3, [r1], #2
 8017bea:	f7ff ffc9 	bl	8017b80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017bee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017bf2:	88c2      	ldrh	r2, [r0, #6]
 8017bf4:	80c3      	strh	r3, [r0, #6]
 8017bf6:	8082      	strh	r2, [r0, #4]
 8017bf8:	bd10      	pop	{r4, pc}
 8017bfa:	bf00      	nop
 8017bfc:	2000bc60 	.word	0x2000bc60

08017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017c00:	4b09      	ldr	r3, [pc, #36]	; (8017c28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017c02:	b507      	push	{r0, r1, r2, lr}
 8017c04:	2100      	movs	r1, #0
 8017c06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c0a:	4b08      	ldr	r3, [pc, #32]	; (8017c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8017c0c:	9100      	str	r1, [sp, #0]
 8017c0e:	4669      	mov	r1, sp
 8017c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c14:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017c18:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017c1c:	f7ff ffd8 	bl	8017bd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017c20:	b003      	add	sp, #12
 8017c22:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c26:	bf00      	nop
 8017c28:	2000bc5c 	.word	0x2000bc5c
 8017c2c:	2000bc5e 	.word	0x2000bc5e

08017c30 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017c30:	4b03      	ldr	r3, [pc, #12]	; (8017c40 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017c32:	6818      	ldr	r0, [r3, #0]
 8017c34:	b110      	cbz	r0, 8017c3c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017c36:	6803      	ldr	r3, [r0, #0]
 8017c38:	699b      	ldr	r3, [r3, #24]
 8017c3a:	4718      	bx	r3
 8017c3c:	4770      	bx	lr
 8017c3e:	bf00      	nop
 8017c40:	2000bce4 	.word	0x2000bce4

08017c44 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017c44:	4770      	bx	lr
	...

08017c48 <_ZN8touchgfx11Application4drawEv>:
 8017c48:	4b09      	ldr	r3, [pc, #36]	; (8017c70 <_ZN8touchgfx11Application4drawEv+0x28>)
 8017c4a:	b507      	push	{r0, r1, r2, lr}
 8017c4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c50:	2100      	movs	r1, #0
 8017c52:	4b08      	ldr	r3, [pc, #32]	; (8017c74 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017c54:	9100      	str	r1, [sp, #0]
 8017c56:	4669      	mov	r1, sp
 8017c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c5c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017c60:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017c64:	6803      	ldr	r3, [r0, #0]
 8017c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c68:	4798      	blx	r3
 8017c6a:	b003      	add	sp, #12
 8017c6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c70:	2000bc5c 	.word	0x2000bc5c
 8017c74:	2000bc5e 	.word	0x2000bc5e

08017c78 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017c78:	4b03      	ldr	r3, [pc, #12]	; (8017c88 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017c7a:	6818      	ldr	r0, [r3, #0]
 8017c7c:	b110      	cbz	r0, 8017c84 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017c7e:	6803      	ldr	r3, [r0, #0]
 8017c80:	69db      	ldr	r3, [r3, #28]
 8017c82:	4718      	bx	r3
 8017c84:	4770      	bx	lr
 8017c86:	bf00      	nop
 8017c88:	2000bce4 	.word	0x2000bce4

08017c8c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017c8c:	4b03      	ldr	r3, [pc, #12]	; (8017c9c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017c8e:	6818      	ldr	r0, [r3, #0]
 8017c90:	b110      	cbz	r0, 8017c98 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017c92:	6803      	ldr	r3, [r0, #0]
 8017c94:	6a1b      	ldr	r3, [r3, #32]
 8017c96:	4718      	bx	r3
 8017c98:	4770      	bx	lr
 8017c9a:	bf00      	nop
 8017c9c:	2000bce4 	.word	0x2000bce4

08017ca0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017ca0:	4b03      	ldr	r3, [pc, #12]	; (8017cb0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017ca2:	6818      	ldr	r0, [r3, #0]
 8017ca4:	b110      	cbz	r0, 8017cac <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017ca6:	6803      	ldr	r3, [r0, #0]
 8017ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017caa:	4718      	bx	r3
 8017cac:	4770      	bx	lr
 8017cae:	bf00      	nop
 8017cb0:	2000bce4 	.word	0x2000bce4

08017cb4 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cb8:	4d3a      	ldr	r5, [pc, #232]	; (8017da4 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8017cba:	4604      	mov	r4, r0
 8017cbc:	6828      	ldr	r0, [r5, #0]
 8017cbe:	b140      	cbz	r0, 8017cd2 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8017cc0:	7a03      	ldrb	r3, [r0, #8]
 8017cc2:	b933      	cbnz	r3, 8017cd2 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8017cc4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8017cc8:	6803      	ldr	r3, [r0, #0]
 8017cca:	689b      	ldr	r3, [r3, #8]
 8017ccc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cd0:	4718      	bx	r3
 8017cd2:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8017cd6:	b97b      	cbnz	r3, 8017cf8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8017cd8:	b170      	cbz	r0, 8017cf8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8017cda:	7a03      	ldrb	r3, [r0, #8]
 8017cdc:	b163      	cbz	r3, 8017cf8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8017cde:	4b32      	ldr	r3, [pc, #200]	; (8017da8 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8017ce0:	6818      	ldr	r0, [r3, #0]
 8017ce2:	b110      	cbz	r0, 8017cea <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8017ce4:	6803      	ldr	r3, [r0, #0]
 8017ce6:	691b      	ldr	r3, [r3, #16]
 8017ce8:	4798      	blx	r3
 8017cea:	6828      	ldr	r0, [r5, #0]
 8017cec:	6803      	ldr	r3, [r0, #0]
 8017cee:	68db      	ldr	r3, [r3, #12]
 8017cf0:	4798      	blx	r3
 8017cf2:	2301      	movs	r3, #1
 8017cf4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8017cf8:	2500      	movs	r5, #0
 8017cfa:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8017cfe:	42a8      	cmp	r0, r5
 8017d00:	dd0c      	ble.n	8017d1c <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8017d02:	1963      	adds	r3, r4, r5
 8017d04:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017d08:	b132      	cbz	r2, 8017d18 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8017d0a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8017d0e:	4413      	add	r3, r2
 8017d10:	6858      	ldr	r0, [r3, #4]
 8017d12:	6803      	ldr	r3, [r0, #0]
 8017d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d16:	4798      	blx	r3
 8017d18:	3501      	adds	r5, #1
 8017d1a:	e7ee      	b.n	8017cfa <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8017d1c:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8017d20:	3801      	subs	r0, #1
 8017d22:	f04f 0c00 	mov.w	ip, #0
 8017d26:	3678      	adds	r6, #120	; 0x78
 8017d28:	1c43      	adds	r3, r0, #1
 8017d2a:	d033      	beq.n	8017d94 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8017d2c:	1823      	adds	r3, r4, r0
 8017d2e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017d32:	bb6a      	cbnz	r2, 8017d90 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8017d34:	b281      	uxth	r1, r0
 8017d36:	1d25      	adds	r5, r4, #4
 8017d38:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8017d3c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8017d40:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8017d44:	4293      	cmp	r3, r2
 8017d46:	dc0a      	bgt.n	8017d5e <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8017d48:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8017d4c:	4422      	add	r2, r4
 8017d4e:	18b1      	adds	r1, r6, r2
 8017d50:	b289      	uxth	r1, r1
 8017d52:	428b      	cmp	r3, r1
 8017d54:	d919      	bls.n	8017d8a <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8017d56:	7851      	ldrb	r1, [r2, #1]
 8017d58:	f802 1b01 	strb.w	r1, [r2], #1
 8017d5c:	e7f7      	b.n	8017d4e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8017d5e:	682f      	ldr	r7, [r5, #0]
 8017d60:	f105 0804 	add.w	r8, r5, #4
 8017d64:	45b9      	cmp	r9, r7
 8017d66:	d10d      	bne.n	8017d84 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8017d68:	4696      	mov	lr, r2
 8017d6a:	f1be 0f1e 	cmp.w	lr, #30
 8017d6e:	dc06      	bgt.n	8017d7e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8017d70:	f10e 0e01 	add.w	lr, lr, #1
 8017d74:	686f      	ldr	r7, [r5, #4]
 8017d76:	4573      	cmp	r3, lr
 8017d78:	f845 7b04 	str.w	r7, [r5], #4
 8017d7c:	dcf5      	bgt.n	8017d6a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8017d7e:	3b01      	subs	r3, #1
 8017d80:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8017d84:	3201      	adds	r2, #1
 8017d86:	4645      	mov	r5, r8
 8017d88:	e7da      	b.n	8017d40 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8017d8a:	4423      	add	r3, r4
 8017d8c:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8017d90:	3801      	subs	r0, #1
 8017d92:	e7c9      	b.n	8017d28 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8017d94:	4b04      	ldr	r3, [pc, #16]	; (8017da8 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8017d96:	6818      	ldr	r0, [r3, #0]
 8017d98:	b110      	cbz	r0, 8017da0 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8017d9a:	6803      	ldr	r3, [r0, #0]
 8017d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d9e:	e795      	b.n	8017ccc <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8017da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017da4:	2000bce8 	.word	0x2000bce8
 8017da8:	2000bce4 	.word	0x2000bce4

08017dac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017dac:	b570      	push	{r4, r5, r6, lr}
 8017dae:	4606      	mov	r6, r0
 8017db0:	460c      	mov	r4, r1
 8017db2:	b929      	cbnz	r1, 8017dc0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8017db4:	4b0c      	ldr	r3, [pc, #48]	; (8017de8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8017db6:	2164      	movs	r1, #100	; 0x64
 8017db8:	4a0c      	ldr	r2, [pc, #48]	; (8017dec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8017dba:	480d      	ldr	r0, [pc, #52]	; (8017df0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8017dbc:	f00c f854 	bl	8023e68 <__assert_func>
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	4d0c      	ldr	r5, [pc, #48]	; (8017df4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8017dc4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017dc8:	6828      	ldr	r0, [r5, #0]
 8017dca:	b110      	cbz	r0, 8017dd2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8017dcc:	6803      	ldr	r3, [r0, #0]
 8017dce:	695b      	ldr	r3, [r3, #20]
 8017dd0:	4798      	blx	r3
 8017dd2:	602c      	str	r4, [r5, #0]
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	6823      	ldr	r3, [r4, #0]
 8017dd8:	68db      	ldr	r3, [r3, #12]
 8017dda:	4798      	blx	r3
 8017ddc:	6833      	ldr	r3, [r6, #0]
 8017dde:	4630      	mov	r0, r6
 8017de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017de6:	4718      	bx	r3
 8017de8:	08027680 	.word	0x08027680
 8017dec:	08027748 	.word	0x08027748
 8017df0:	0802768a 	.word	0x0802768a
 8017df4:	2000bce4 	.word	0x2000bce4

08017df8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017df8:	b510      	push	{r4, lr}
 8017dfa:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017dfe:	888a      	ldrh	r2, [r1, #4]
 8017e00:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017e04:	4422      	add	r2, r4
 8017e06:	b212      	sxth	r2, r2
 8017e08:	4293      	cmp	r3, r2
 8017e0a:	da15      	bge.n	8017e38 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017e0c:	8882      	ldrh	r2, [r0, #4]
 8017e0e:	4413      	add	r3, r2
 8017e10:	b21b      	sxth	r3, r3
 8017e12:	429c      	cmp	r4, r3
 8017e14:	da10      	bge.n	8017e38 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017e16:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017e1a:	88c9      	ldrh	r1, [r1, #6]
 8017e1c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017e20:	4419      	add	r1, r3
 8017e22:	b209      	sxth	r1, r1
 8017e24:	428a      	cmp	r2, r1
 8017e26:	da07      	bge.n	8017e38 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017e28:	88c0      	ldrh	r0, [r0, #6]
 8017e2a:	4410      	add	r0, r2
 8017e2c:	b200      	sxth	r0, r0
 8017e2e:	4283      	cmp	r3, r0
 8017e30:	bfac      	ite	ge
 8017e32:	2000      	movge	r0, #0
 8017e34:	2001      	movlt	r0, #1
 8017e36:	bd10      	pop	{r4, pc}
 8017e38:	2000      	movs	r0, #0
 8017e3a:	e7fc      	b.n	8017e36 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08017e3c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017e3c:	b570      	push	{r4, r5, r6, lr}
 8017e3e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017e42:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017e46:	42ac      	cmp	r4, r5
 8017e48:	db18      	blt.n	8017e7c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017e4a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8017e4e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017e52:	429a      	cmp	r2, r3
 8017e54:	db12      	blt.n	8017e7c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017e56:	8886      	ldrh	r6, [r0, #4]
 8017e58:	4435      	add	r5, r6
 8017e5a:	888e      	ldrh	r6, [r1, #4]
 8017e5c:	4434      	add	r4, r6
 8017e5e:	b22d      	sxth	r5, r5
 8017e60:	b224      	sxth	r4, r4
 8017e62:	42a5      	cmp	r5, r4
 8017e64:	db0a      	blt.n	8017e7c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017e66:	88c0      	ldrh	r0, [r0, #6]
 8017e68:	4418      	add	r0, r3
 8017e6a:	88cb      	ldrh	r3, [r1, #6]
 8017e6c:	441a      	add	r2, r3
 8017e6e:	b200      	sxth	r0, r0
 8017e70:	b212      	sxth	r2, r2
 8017e72:	4290      	cmp	r0, r2
 8017e74:	bfb4      	ite	lt
 8017e76:	2000      	movlt	r0, #0
 8017e78:	2001      	movge	r0, #1
 8017e7a:	bd70      	pop	{r4, r5, r6, pc}
 8017e7c:	2000      	movs	r0, #0
 8017e7e:	e7fc      	b.n	8017e7a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08017e80 <_ZN8touchgfx11Application11getInstanceEv>:
 8017e80:	4b01      	ldr	r3, [pc, #4]	; (8017e88 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017e82:	6818      	ldr	r0, [r3, #0]
 8017e84:	4770      	bx	lr
 8017e86:	bf00      	nop
 8017e88:	2000bcf4 	.word	0x2000bcf4

08017e8c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8017e92:	30a8      	adds	r0, #168	; 0xa8
 8017e94:	f820 3c24 	strh.w	r3, [r0, #-36]
 8017e98:	f802 3b01 	strb.w	r3, [r2], #1
 8017e9c:	4282      	cmp	r2, r0
 8017e9e:	d1fb      	bne.n	8017e98 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8017ea0:	4770      	bx	lr

08017ea2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017ea8:	2200      	movs	r2, #0
 8017eaa:	801a      	strh	r2, [r3, #0]
 8017eac:	3308      	adds	r3, #8
 8017eae:	f823 2c06 	strh.w	r2, [r3, #-6]
 8017eb2:	f823 2c04 	strh.w	r2, [r3, #-4]
 8017eb6:	f823 2c02 	strh.w	r2, [r3, #-2]
 8017eba:	428b      	cmp	r3, r1
 8017ebc:	d1f5      	bne.n	8017eaa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017ebe:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017ec2:	4770      	bx	lr

08017ec4 <_ZN8touchgfx11ApplicationC1Ev>:
 8017ec4:	b570      	push	{r4, r5, r6, lr}
 8017ec6:	4b16      	ldr	r3, [pc, #88]	; (8017f20 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8017ec8:	2500      	movs	r5, #0
 8017eca:	4604      	mov	r4, r0
 8017ecc:	30a8      	adds	r0, #168	; 0xa8
 8017ece:	f840 3ca8 	str.w	r3, [r0, #-168]
 8017ed2:	f820 5c24 	strh.w	r5, [r0, #-36]
 8017ed6:	f7ff ffe4 	bl	8017ea2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017eda:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8017ede:	f7ff ffe0 	bl	8017ea2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017ee2:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8017ee6:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8017eea:	490e      	ldr	r1, [pc, #56]	; (8017f24 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8017eec:	480e      	ldr	r0, [pc, #56]	; (8017f28 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8017eee:	f00a faa1 	bl	8022434 <CRC_Lock>
 8017ef2:	4e0e      	ldr	r6, [pc, #56]	; (8017f2c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8017ef4:	4b0e      	ldr	r3, [pc, #56]	; (8017f30 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8017ef6:	b158      	cbz	r0, 8017f10 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8017ef8:	801d      	strh	r5, [r3, #0]
 8017efa:	2300      	movs	r3, #0
 8017efc:	4a0d      	ldr	r2, [pc, #52]	; (8017f34 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8017efe:	4620      	mov	r0, r4
 8017f00:	6013      	str	r3, [r2, #0]
 8017f02:	4a0d      	ldr	r2, [pc, #52]	; (8017f38 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8017f04:	6033      	str	r3, [r6, #0]
 8017f06:	6013      	str	r3, [r2, #0]
 8017f08:	f7ff ffc0 	bl	8017e8c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	bd70      	pop	{r4, r5, r6, pc}
 8017f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017f14:	2002      	movs	r0, #2
 8017f16:	801a      	strh	r2, [r3, #0]
 8017f18:	6030      	str	r0, [r6, #0]
 8017f1a:	f000 ff81 	bl	8018e20 <_ZN8touchgfx6Screen4drawEv>
 8017f1e:	e7ec      	b.n	8017efa <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8017f20:	08027714 	.word	0x08027714
 8017f24:	b5e8b5cd 	.word	0xb5e8b5cd
 8017f28:	f407a5c2 	.word	0xf407a5c2
 8017f2c:	2000bce4 	.word	0x2000bce4
 8017f30:	20000040 	.word	0x20000040
 8017f34:	2000bcf4 	.word	0x2000bcf4
 8017f38:	2000bce8 	.word	0x2000bce8

08017f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	8003      	strh	r3, [r0, #0]
 8017f40:	8043      	strh	r3, [r0, #2]
 8017f42:	8083      	strh	r3, [r0, #4]
 8017f44:	80c3      	strh	r3, [r0, #6]
 8017f46:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8017f4a:	4293      	cmp	r3, r2
 8017f4c:	b530      	push	{r4, r5, lr}
 8017f4e:	d912      	bls.n	8017f76 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8017f50:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8017f54:	3b01      	subs	r3, #1
 8017f56:	6825      	ldr	r5, [r4, #0]
 8017f58:	b29b      	uxth	r3, r3
 8017f5a:	6005      	str	r5, [r0, #0]
 8017f5c:	4293      	cmp	r3, r2
 8017f5e:	6865      	ldr	r5, [r4, #4]
 8017f60:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8017f64:	6045      	str	r5, [r0, #4]
 8017f66:	d906      	bls.n	8017f76 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8017f68:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8017f6c:	681d      	ldr	r5, [r3, #0]
 8017f6e:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8017f72:	685d      	ldr	r5, [r3, #4]
 8017f74:	6065      	str	r5, [r4, #4]
 8017f76:	bd30      	pop	{r4, r5, pc}

08017f78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8017f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f7a:	466b      	mov	r3, sp
 8017f7c:	4604      	mov	r4, r0
 8017f7e:	e883 0006 	stmia.w	r3, {r1, r2}
 8017f82:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8017f86:	2a07      	cmp	r2, #7
 8017f88:	d906      	bls.n	8017f98 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8017f8a:	4b09      	ldr	r3, [pc, #36]	; (8017fb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8017f8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8017f90:	4a08      	ldr	r2, [pc, #32]	; (8017fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8017f92:	4809      	ldr	r0, [pc, #36]	; (8017fb8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8017f94:	f00b ff68 	bl	8023e68 <__assert_func>
 8017f98:	1c51      	adds	r1, r2, #1
 8017f9a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8017f9e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017fa2:	cb03      	ldmia	r3!, {r0, r1}
 8017fa4:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8017fa8:	6069      	str	r1, [r5, #4]
 8017faa:	b003      	add	sp, #12
 8017fac:	bd30      	pop	{r4, r5, pc}
 8017fae:	bf00      	nop
 8017fb0:	080276b4 	.word	0x080276b4
 8017fb4:	0802778c 	.word	0x0802778c
 8017fb8:	080276e3 	.word	0x080276e3

08017fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fc0:	b089      	sub	sp, #36	; 0x24
 8017fc2:	4606      	mov	r6, r0
 8017fc4:	466c      	mov	r4, sp
 8017fc6:	4620      	mov	r0, r4
 8017fc8:	e884 0006 	stmia.w	r4, {r1, r2}
 8017fcc:	f7fc fe30 	bl	8014c30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017fd0:	bbb0      	cbnz	r0, 8018040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8017fd2:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8017fd6:	b1fd      	cbz	r5, 8018018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8017fd8:	3d01      	subs	r5, #1
 8017fda:	af04      	add	r7, sp, #16
 8017fdc:	f04f 090a 	mov.w	r9, #10
 8017fe0:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8017fe4:	ab02      	add	r3, sp, #8
 8017fe6:	fa1f f885 	uxth.w	r8, r5
 8017fea:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017fee:	6851      	ldr	r1, [r2, #4]
 8017ff0:	c303      	stmia	r3!, {r0, r1}
 8017ff2:	4621      	mov	r1, r4
 8017ff4:	a802      	add	r0, sp, #8
 8017ff6:	f7ff ff21 	bl	8017e3c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017ffa:	bb08      	cbnz	r0, 8018040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8017ffc:	a902      	add	r1, sp, #8
 8017ffe:	4620      	mov	r0, r4
 8018000:	f7ff ff1c 	bl	8017e3c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018004:	b1f8      	cbz	r0, 8018046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8018006:	4642      	mov	r2, r8
 8018008:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801800c:	a806      	add	r0, sp, #24
 801800e:	f7ff ff95 	bl	8017f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018012:	f115 35ff 	adds.w	r5, r5, #4294967295
 8018016:	d2e3      	bcs.n	8017fe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8018018:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801801c:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8018020:	2b08      	cmp	r3, #8
 8018022:	d108      	bne.n	8018036 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018024:	4629      	mov	r1, r5
 8018026:	a806      	add	r0, sp, #24
 8018028:	2207      	movs	r2, #7
 801802a:	f7ff ff87 	bl	8017f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801802e:	a906      	add	r1, sp, #24
 8018030:	4620      	mov	r0, r4
 8018032:	f7fd fff8 	bl	8016026 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018036:	4628      	mov	r0, r5
 8018038:	e894 0006 	ldmia.w	r4, {r1, r2}
 801803c:	f7ff ff9c 	bl	8017f78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018040:	b009      	add	sp, #36	; 0x24
 8018042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018046:	4621      	mov	r1, r4
 8018048:	a802      	add	r0, sp, #8
 801804a:	f7ff fed5 	bl	8017df8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801804e:	b150      	cbz	r0, 8018066 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8018050:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018054:	a806      	add	r0, sp, #24
 8018056:	4642      	mov	r2, r8
 8018058:	f7ff ff70 	bl	8017f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801805c:	a902      	add	r1, sp, #8
 801805e:	4620      	mov	r0, r4
 8018060:	f7fd ffe1 	bl	8016026 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018064:	e7d5      	b.n	8018012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018066:	e894 0003 	ldmia.w	r4, {r0, r1}
 801806a:	e887 0003 	stmia.w	r7, {r0, r1}
 801806e:	a902      	add	r1, sp, #8
 8018070:	4638      	mov	r0, r7
 8018072:	f7fd ffd8 	bl	8016026 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018076:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801807a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801807e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018082:	fb13 f302 	smulbb	r3, r3, r2
 8018086:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801808a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801808e:	fb11 f102 	smulbb	r1, r1, r2
 8018092:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8018096:	fb09 f303 	mul.w	r3, r9, r3
 801809a:	fb12 1100 	smlabb	r1, r2, r0, r1
 801809e:	220b      	movs	r2, #11
 80180a0:	434a      	muls	r2, r1
 80180a2:	4293      	cmp	r3, r2
 80180a4:	dab5      	bge.n	8018012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80180a6:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80180aa:	a806      	add	r0, sp, #24
 80180ac:	4642      	mov	r2, r8
 80180ae:	f7ff ff45 	bl	8017f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80180b2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80180b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80180ba:	e7aa      	b.n	8018012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

080180bc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80180bc:	4b1d      	ldr	r3, [pc, #116]	; (8018134 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80180be:	b530      	push	{r4, r5, lr}
 80180c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80180c4:	b085      	sub	sp, #20
 80180c6:	4b1c      	ldr	r3, [pc, #112]	; (8018138 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80180c8:	460c      	mov	r4, r1
 80180ca:	2100      	movs	r1, #0
 80180cc:	4605      	mov	r5, r0
 80180ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80180d2:	6820      	ldr	r0, [r4, #0]
 80180d4:	9100      	str	r1, [sp, #0]
 80180d6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80180da:	ab02      	add	r3, sp, #8
 80180dc:	6861      	ldr	r1, [r4, #4]
 80180de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80180e2:	c303      	stmia	r3!, {r0, r1}
 80180e4:	4669      	mov	r1, sp
 80180e6:	a802      	add	r0, sp, #8
 80180e8:	f7fc fd5e 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 80180ec:	ab02      	add	r3, sp, #8
 80180ee:	cb03      	ldmia	r3!, {r0, r1}
 80180f0:	4b12      	ldr	r3, [pc, #72]	; (801813c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80180f2:	6020      	str	r0, [r4, #0]
 80180f4:	6818      	ldr	r0, [r3, #0]
 80180f6:	6061      	str	r1, [r4, #4]
 80180f8:	b138      	cbz	r0, 801810a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80180fa:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80180fe:	b133      	cbz	r3, 801810e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8018100:	6821      	ldr	r1, [r4, #0]
 8018102:	4628      	mov	r0, r5
 8018104:	6862      	ldr	r2, [r4, #4]
 8018106:	f7ff ff59 	bl	8017fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801810a:	b005      	add	sp, #20
 801810c:	bd30      	pop	{r4, r5, pc}
 801810e:	6803      	ldr	r3, [r0, #0]
 8018110:	4621      	mov	r1, r4
 8018112:	689b      	ldr	r3, [r3, #8]
 8018114:	4798      	blx	r3
 8018116:	4b0a      	ldr	r3, [pc, #40]	; (8018140 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8018118:	6818      	ldr	r0, [r3, #0]
 801811a:	b118      	cbz	r0, 8018124 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801811c:	6803      	ldr	r3, [r0, #0]
 801811e:	4621      	mov	r1, r4
 8018120:	689b      	ldr	r3, [r3, #8]
 8018122:	4798      	blx	r3
 8018124:	4b07      	ldr	r3, [pc, #28]	; (8018144 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8018126:	4621      	mov	r1, r4
 8018128:	6818      	ldr	r0, [r3, #0]
 801812a:	6803      	ldr	r3, [r0, #0]
 801812c:	695b      	ldr	r3, [r3, #20]
 801812e:	4798      	blx	r3
 8018130:	e7eb      	b.n	801810a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8018132:	bf00      	nop
 8018134:	2000bc5c 	.word	0x2000bc5c
 8018138:	2000bc5e 	.word	0x2000bc5e
 801813c:	2000bce4 	.word	0x2000bce4
 8018140:	2000bce0 	.word	0x2000bce0
 8018144:	2000bc68 	.word	0x2000bc68

08018148 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8018148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801814c:	4604      	mov	r4, r0
 801814e:	b09b      	sub	sp, #108	; 0x6c
 8018150:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8018154:	b129      	cbz	r1, 8018162 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8018156:	2300      	movs	r3, #0
 8018158:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801815c:	b01b      	add	sp, #108	; 0x6c
 801815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018162:	4baf      	ldr	r3, [pc, #700]	; (8018420 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	b33b      	cbz	r3, 80181b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018168:	4dae      	ldr	r5, [pc, #696]	; (8018424 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801816a:	4628      	mov	r0, r5
 801816c:	f7fc fd60 	bl	8014c30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018170:	4606      	mov	r6, r0
 8018172:	bb08      	cbnz	r0, 80181b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018174:	4628      	mov	r0, r5
 8018176:	f7ff fce9 	bl	8017b4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801817a:	6829      	ldr	r1, [r5, #0]
 801817c:	686a      	ldr	r2, [r5, #4]
 801817e:	4620      	mov	r0, r4
 8018180:	f7ff ff1c 	bl	8017fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018184:	802e      	strh	r6, [r5, #0]
 8018186:	806e      	strh	r6, [r5, #2]
 8018188:	80ae      	strh	r6, [r5, #4]
 801818a:	80ee      	strh	r6, [r5, #6]
 801818c:	4fa6      	ldr	r7, [pc, #664]	; (8018428 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801818e:	a809      	add	r0, sp, #36	; 0x24
 8018190:	f7ff fe87 	bl	8017ea2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018194:	883d      	ldrh	r5, [r7, #0]
 8018196:	462e      	mov	r6, r5
 8018198:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801819c:	42b3      	cmp	r3, r6
 801819e:	d910      	bls.n	80181c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 80181a0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80181a4:	3601      	adds	r6, #1
 80181a6:	a809      	add	r0, sp, #36	; 0x24
 80181a8:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80181ac:	b2b6      	uxth	r6, r6
 80181ae:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80181b2:	f7ff fee1 	bl	8017f78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80181b6:	e7ef      	b.n	8018198 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 80181b8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d1e5      	bne.n	801818c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 80181c0:	e7cc      	b.n	801815c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80181c2:	462e      	mov	r6, r5
 80181c4:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80181c8:	42b3      	cmp	r3, r6
 80181ca:	d90b      	bls.n	80181e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80181cc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80181d0:	3601      	adds	r6, #1
 80181d2:	4620      	mov	r0, r4
 80181d4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80181d8:	b2b6      	uxth	r6, r6
 80181da:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80181de:	f7ff feed 	bl	8017fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80181e2:	e7ef      	b.n	80181c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 80181e4:	4e91      	ldr	r6, [pc, #580]	; (801842c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80181e6:	6833      	ldr	r3, [r6, #0]
 80181e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80181ec:	2b01      	cmp	r3, #1
 80181ee:	f040 8092 	bne.w	8018316 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 80181f2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80181f6:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80181fa:	f04f 0900 	mov.w	r9, #0
 80181fe:	33aa      	adds	r3, #170	; 0xaa
 8018200:	42a8      	cmp	r0, r5
 8018202:	f103 0308 	add.w	r3, r3, #8
 8018206:	dd0a      	ble.n	801821e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8018208:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801820c:	3501      	adds	r5, #1
 801820e:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8018212:	440a      	add	r2, r1
 8018214:	b212      	sxth	r2, r2
 8018216:	4591      	cmp	r9, r2
 8018218:	bfb8      	it	lt
 801821a:	4691      	movlt	r9, r2
 801821c:	e7f0      	b.n	8018200 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801821e:	4b84      	ldr	r3, [pc, #528]	; (8018430 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8018220:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8018438 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8018224:	881d      	ldrh	r5, [r3, #0]
 8018226:	2300      	movs	r3, #0
 8018228:	2d0f      	cmp	r5, #15
 801822a:	bf8c      	ite	hi
 801822c:	08ed      	lsrhi	r5, r5, #3
 801822e:	2501      	movls	r5, #1
 8018230:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018234:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018238:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801823c:	6830      	ldr	r0, [r6, #0]
 801823e:	440b      	add	r3, r1
 8018240:	6802      	ldr	r2, [r0, #0]
 8018242:	b21b      	sxth	r3, r3
 8018244:	4599      	cmp	r9, r3
 8018246:	dd49      	ble.n	80182dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8018248:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801824c:	4798      	blx	r3
 801824e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018252:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018256:	4413      	add	r3, r2
 8018258:	b21b      	sxth	r3, r3
 801825a:	195a      	adds	r2, r3, r5
 801825c:	4290      	cmp	r0, r2
 801825e:	da07      	bge.n	8018270 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8018260:	4581      	cmp	r9, r0
 8018262:	dd05      	ble.n	8018270 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8018264:	4298      	cmp	r0, r3
 8018266:	da33      	bge.n	80182d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8018268:	2b00      	cmp	r3, #0
 801826a:	dd31      	ble.n	80182d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801826c:	4648      	mov	r0, r9
 801826e:	e004      	b.n	801827a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8018270:	4298      	cmp	r0, r3
 8018272:	dbfb      	blt.n	801826c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8018274:	4548      	cmp	r0, r9
 8018276:	bfa8      	it	ge
 8018278:	4648      	movge	r0, r9
 801827a:	f9b8 2000 	ldrsh.w	r2, [r8]
 801827e:	2100      	movs	r1, #0
 8018280:	1ac0      	subs	r0, r0, r3
 8018282:	f8b7 a000 	ldrh.w	sl, [r7]
 8018286:	f8ad 1014 	strh.w	r1, [sp, #20]
 801828a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801828e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018292:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018296:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801829a:	4553      	cmp	r3, sl
 801829c:	d9ca      	bls.n	8018234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801829e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80182a2:	ab07      	add	r3, sp, #28
 80182a4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80182a8:	6851      	ldr	r1, [r2, #4]
 80182aa:	c303      	stmia	r3!, {r0, r1}
 80182ac:	a807      	add	r0, sp, #28
 80182ae:	a905      	add	r1, sp, #20
 80182b0:	f7fc fc7a 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 80182b4:	a807      	add	r0, sp, #28
 80182b6:	f7fc fcbb 	bl	8014c30 <_ZNK8touchgfx4Rect7isEmptyEv>
 80182ba:	b920      	cbnz	r0, 80182c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 80182bc:	6823      	ldr	r3, [r4, #0]
 80182be:	a907      	add	r1, sp, #28
 80182c0:	4620      	mov	r0, r4
 80182c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182c4:	4798      	blx	r3
 80182c6:	f10a 0a01 	add.w	sl, sl, #1
 80182ca:	fa1f fa8a 	uxth.w	sl, sl
 80182ce:	e7e2      	b.n	8018296 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 80182d0:	6830      	ldr	r0, [r6, #0]
 80182d2:	2101      	movs	r1, #1
 80182d4:	6803      	ldr	r3, [r0, #0]
 80182d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80182d8:	4798      	blx	r3
 80182da:	e7ab      	b.n	8018234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 80182dc:	69d3      	ldr	r3, [r2, #28]
 80182de:	4798      	blx	r3
 80182e0:	4b54      	ldr	r3, [pc, #336]	; (8018434 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80182e2:	781b      	ldrb	r3, [r3, #0]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	f43f af39 	beq.w	801815c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80182ea:	2300      	movs	r3, #0
 80182ec:	883d      	ldrh	r5, [r7, #0]
 80182ee:	34ea      	adds	r4, #234	; 0xea
 80182f0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80182f4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80182f8:	42ab      	cmp	r3, r5
 80182fa:	f67f af2f 	bls.w	801815c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80182fe:	ab1a      	add	r3, sp, #104	; 0x68
 8018300:	4620      	mov	r0, r4
 8018302:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018306:	3501      	adds	r5, #1
 8018308:	3b44      	subs	r3, #68	; 0x44
 801830a:	b2ad      	uxth	r5, r5
 801830c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018310:	f7ff fe32 	bl	8017f78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018314:	e7ee      	b.n	80182f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8018316:	2b02      	cmp	r3, #2
 8018318:	d16a      	bne.n	80183f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801831a:	f8df a120 	ldr.w	sl, [pc, #288]	; 801843c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801831e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018322:	42ab      	cmp	r3, r5
 8018324:	d9dc      	bls.n	80182e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8018326:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801832a:	ab03      	add	r3, sp, #12
 801832c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018330:	6851      	ldr	r1, [r2, #4]
 8018332:	c303      	stmia	r3!, {r0, r1}
 8018334:	f89a 3000 	ldrb.w	r3, [sl]
 8018338:	2b01      	cmp	r3, #1
 801833a:	d102      	bne.n	8018342 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801833c:	a803      	add	r0, sp, #12
 801833e:	f7ff fc5f 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018342:	a803      	add	r0, sp, #12
 8018344:	f7fc fc74 	bl	8014c30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018348:	2800      	cmp	r0, #0
 801834a:	d14a      	bne.n	80183e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801834c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018350:	f10d 0914 	add.w	r9, sp, #20
 8018354:	f10d 081c 	add.w	r8, sp, #28
 8018358:	f8ad 001a 	strh.w	r0, [sp, #26]
 801835c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018360:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018364:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018368:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801836c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018370:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8018374:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8018378:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801837c:	44dc      	add	ip, fp
 801837e:	6830      	ldr	r0, [r6, #0]
 8018380:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8018384:	ebac 0c02 	sub.w	ip, ip, r2
 8018388:	f8d0 e000 	ldr.w	lr, [r0]
 801838c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8018390:	fa1f fc8c 	uxth.w	ip, ip
 8018394:	f8cd c000 	str.w	ip, [sp]
 8018398:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801839c:	47d8      	blx	fp
 801839e:	f89a 3000 	ldrb.w	r3, [sl]
 80183a2:	f8ad 001a 	strh.w	r0, [sp, #26]
 80183a6:	2b01      	cmp	r3, #1
 80183a8:	d11e      	bne.n	80183e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 80183aa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80183ae:	e888 0003 	stmia.w	r8, {r0, r1}
 80183b2:	4640      	mov	r0, r8
 80183b4:	f7ff fbca 	bl	8017b4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80183b8:	6823      	ldr	r3, [r4, #0]
 80183ba:	4641      	mov	r1, r8
 80183bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183be:	4620      	mov	r0, r4
 80183c0:	4798      	blx	r3
 80183c2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80183c6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80183ca:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80183ce:	4413      	add	r3, r2
 80183d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80183d4:	440a      	add	r2, r1
 80183d6:	b21b      	sxth	r3, r3
 80183d8:	b212      	sxth	r2, r2
 80183da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80183de:	4293      	cmp	r3, r2
 80183e0:	dbc6      	blt.n	8018370 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 80183e2:	3501      	adds	r5, #1
 80183e4:	b2ad      	uxth	r5, r5
 80183e6:	e79a      	b.n	801831e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 80183e8:	6823      	ldr	r3, [r4, #0]
 80183ea:	4649      	mov	r1, r9
 80183ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183ee:	e7e6      	b.n	80183be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80183f0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80183f4:	42ab      	cmp	r3, r5
 80183f6:	f67f af73 	bls.w	80182e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80183fa:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80183fe:	ab07      	add	r3, sp, #28
 8018400:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018404:	6851      	ldr	r1, [r2, #4]
 8018406:	c303      	stmia	r3!, {r0, r1}
 8018408:	a807      	add	r0, sp, #28
 801840a:	f7fc fc11 	bl	8014c30 <_ZNK8touchgfx4Rect7isEmptyEv>
 801840e:	b920      	cbnz	r0, 801841a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8018410:	6823      	ldr	r3, [r4, #0]
 8018412:	a907      	add	r1, sp, #28
 8018414:	4620      	mov	r0, r4
 8018416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018418:	4798      	blx	r3
 801841a:	3501      	adds	r5, #1
 801841c:	b2ad      	uxth	r5, r5
 801841e:	e7e7      	b.n	80183f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8018420:	2000bce0 	.word	0x2000bce0
 8018424:	2000bcec 	.word	0x2000bcec
 8018428:	20000040 	.word	0x20000040
 801842c:	2000bc68 	.word	0x2000bc68
 8018430:	2000bc5e 	.word	0x2000bc5e
 8018434:	2000bc66 	.word	0x2000bc66
 8018438:	2000bc5c 	.word	0x2000bc5c
 801843c:	2000bc60 	.word	0x2000bc60

08018440 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018440:	4b03      	ldr	r3, [pc, #12]	; (8018450 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018442:	2200      	movs	r2, #0
 8018444:	801a      	strh	r2, [r3, #0]
 8018446:	805a      	strh	r2, [r3, #2]
 8018448:	809a      	strh	r2, [r3, #4]
 801844a:	80da      	strh	r2, [r3, #6]
 801844c:	4770      	bx	lr
 801844e:	bf00      	nop
 8018450:	2000bcec 	.word	0x2000bcec

08018454 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8018454:	2000      	movs	r0, #0
 8018456:	4770      	bx	lr

08018458 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8018458:	2000      	movs	r0, #0
 801845a:	4770      	bx	lr

0801845c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801845c:	b508      	push	{r3, lr}
 801845e:	6803      	ldr	r3, [r0, #0]
 8018460:	68db      	ldr	r3, [r3, #12]
 8018462:	4798      	blx	r3
 8018464:	b128      	cbz	r0, 8018472 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018466:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801846a:	7a80      	ldrb	r0, [r0, #10]
 801846c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018470:	4318      	orrs	r0, r3
 8018472:	bd08      	pop	{r3, pc}

08018474 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8018474:	b40e      	push	{r1, r2, r3}
 8018476:	b533      	push	{r0, r1, r4, r5, lr}
 8018478:	ab05      	add	r3, sp, #20
 801847a:	f853 2b04 	ldr.w	r2, [r3], #4
 801847e:	9301      	str	r3, [sp, #4]
 8018480:	4b0a      	ldr	r3, [pc, #40]	; (80184ac <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8018482:	685c      	ldr	r4, [r3, #4]
 8018484:	1061      	asrs	r1, r4, #1
 8018486:	07e4      	lsls	r4, r4, #31
 8018488:	eb00 0501 	add.w	r5, r0, r1
 801848c:	bf46      	itte	mi
 801848e:	681b      	ldrmi	r3, [r3, #0]
 8018490:	5841      	ldrmi	r1, [r0, r1]
 8018492:	681c      	ldrpl	r4, [r3, #0]
 8018494:	4628      	mov	r0, r5
 8018496:	bf48      	it	mi
 8018498:	58cc      	ldrmi	r4, [r1, r3]
 801849a:	2100      	movs	r1, #0
 801849c:	9b01      	ldr	r3, [sp, #4]
 801849e:	47a0      	blx	r4
 80184a0:	b002      	add	sp, #8
 80184a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184a6:	b003      	add	sp, #12
 80184a8:	4770      	bx	lr
 80184aa:	bf00      	nop
 80184ac:	20000028 	.word	0x20000028

080184b0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 80184b0:	b40c      	push	{r2, r3}
 80184b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80184b4:	ab06      	add	r3, sp, #24
 80184b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80184ba:	9301      	str	r3, [sp, #4]
 80184bc:	4b09      	ldr	r3, [pc, #36]	; (80184e4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 80184be:	685d      	ldr	r5, [r3, #4]
 80184c0:	106c      	asrs	r4, r5, #1
 80184c2:	07ed      	lsls	r5, r5, #31
 80184c4:	eb00 0604 	add.w	r6, r0, r4
 80184c8:	bf45      	ittet	mi
 80184ca:	681b      	ldrmi	r3, [r3, #0]
 80184cc:	5900      	ldrmi	r0, [r0, r4]
 80184ce:	681c      	ldrpl	r4, [r3, #0]
 80184d0:	58c4      	ldrmi	r4, [r0, r3]
 80184d2:	4630      	mov	r0, r6
 80184d4:	9b01      	ldr	r3, [sp, #4]
 80184d6:	47a0      	blx	r4
 80184d8:	b002      	add	sp, #8
 80184da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184de:	b002      	add	sp, #8
 80184e0:	4770      	bx	lr
 80184e2:	bf00      	nop
 80184e4:	20000028 	.word	0x20000028

080184e8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80184e8:	b40e      	push	{r1, r2, r3}
 80184ea:	b530      	push	{r4, r5, lr}
 80184ec:	b098      	sub	sp, #96	; 0x60
 80184ee:	4604      	mov	r4, r0
 80184f0:	ab1b      	add	r3, sp, #108	; 0x6c
 80184f2:	a802      	add	r0, sp, #8
 80184f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80184f8:	9301      	str	r3, [sp, #4]
 80184fa:	f001 f837 	bl	801956c <_ZN8touchgfx12TextProviderC1Ev>
 80184fe:	6823      	ldr	r3, [r4, #0]
 8018500:	4620      	mov	r0, r4
 8018502:	2401      	movs	r4, #1
 8018504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018506:	4798      	blx	r3
 8018508:	9a01      	ldr	r2, [sp, #4]
 801850a:	4603      	mov	r3, r0
 801850c:	4629      	mov	r1, r5
 801850e:	a802      	add	r0, sp, #8
 8018510:	f001 f849 	bl	80195a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018514:	a802      	add	r0, sp, #8
 8018516:	f001 f87f 	bl	8019618 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801851a:	b2a3      	uxth	r3, r4
 801851c:	b138      	cbz	r0, 801852e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801851e:	280a      	cmp	r0, #10
 8018520:	a802      	add	r0, sp, #8
 8018522:	bf04      	itt	eq
 8018524:	3301      	addeq	r3, #1
 8018526:	b21c      	sxtheq	r4, r3
 8018528:	f001 f876 	bl	8019618 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801852c:	e7f5      	b.n	801851a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801852e:	4618      	mov	r0, r3
 8018530:	b018      	add	sp, #96	; 0x60
 8018532:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018536:	b003      	add	sp, #12
 8018538:	4770      	bx	lr
	...

0801853c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801853c:	b40e      	push	{r1, r2, r3}
 801853e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018540:	b098      	sub	sp, #96	; 0x60
 8018542:	4605      	mov	r5, r0
 8018544:	4f25      	ldr	r7, [pc, #148]	; (80185dc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8018546:	ab1d      	add	r3, sp, #116	; 0x74
 8018548:	a802      	add	r0, sp, #8
 801854a:	ae18      	add	r6, sp, #96	; 0x60
 801854c:	f853 4b04 	ldr.w	r4, [r3], #4
 8018550:	9300      	str	r3, [sp, #0]
 8018552:	f001 f80b 	bl	801956c <_ZN8touchgfx12TextProviderC1Ev>
 8018556:	682b      	ldr	r3, [r5, #0]
 8018558:	4628      	mov	r0, r5
 801855a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801855c:	4798      	blx	r3
 801855e:	4621      	mov	r1, r4
 8018560:	2400      	movs	r4, #0
 8018562:	4603      	mov	r3, r0
 8018564:	9a00      	ldr	r2, [sp, #0]
 8018566:	a802      	add	r0, sp, #8
 8018568:	f001 f81d 	bl	80195a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801856c:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8018570:	462a      	mov	r2, r5
 8018572:	4633      	mov	r3, r6
 8018574:	4621      	mov	r1, r4
 8018576:	a802      	add	r0, sp, #8
 8018578:	f001 f97a 	bl	8019870 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801857c:	b340      	cbz	r0, 80185d0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801857e:	280a      	cmp	r0, #10
 8018580:	d01f      	beq.n	80185c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018582:	9901      	ldr	r1, [sp, #4]
 8018584:	b1e9      	cbz	r1, 80185c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018586:	7b4b      	ldrb	r3, [r1, #13]
 8018588:	f891 c008 	ldrb.w	ip, [r1, #8]
 801858c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018590:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8018594:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018598:	79c9      	ldrb	r1, [r1, #7]
 801859a:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801859e:	bf18      	it	ne
 80185a0:	4638      	movne	r0, r7
 80185a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80185a6:	bf08      	it	eq
 80185a8:	2000      	moveq	r0, #0
 80185aa:	88aa      	ldrh	r2, [r5, #4]
 80185ac:	ea41 010e 	orr.w	r1, r1, lr
 80185b0:	ea43 030c 	orr.w	r3, r3, ip
 80185b4:	440a      	add	r2, r1
 80185b6:	4303      	orrs	r3, r0
 80185b8:	1ad3      	subs	r3, r2, r3
 80185ba:	b29b      	uxth	r3, r3
 80185bc:	42a3      	cmp	r3, r4
 80185be:	bfc8      	it	gt
 80185c0:	b21c      	sxthgt	r4, r3
 80185c2:	4633      	mov	r3, r6
 80185c4:	462a      	mov	r2, r5
 80185c6:	2100      	movs	r1, #0
 80185c8:	a802      	add	r0, sp, #8
 80185ca:	f001 f951 	bl	8019870 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80185ce:	e7d5      	b.n	801857c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 80185d0:	b2a0      	uxth	r0, r4
 80185d2:	b018      	add	sp, #96	; 0x60
 80185d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80185d8:	b003      	add	sp, #12
 80185da:	4770      	bx	lr
 80185dc:	fffffe00 	.word	0xfffffe00

080185e0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80185e0:	b40e      	push	{r1, r2, r3}
 80185e2:	b570      	push	{r4, r5, r6, lr}
 80185e4:	b099      	sub	sp, #100	; 0x64
 80185e6:	4604      	mov	r4, r0
 80185e8:	26ff      	movs	r6, #255	; 0xff
 80185ea:	ab1d      	add	r3, sp, #116	; 0x74
 80185ec:	a802      	add	r0, sp, #8
 80185ee:	f853 5b04 	ldr.w	r5, [r3], #4
 80185f2:	9300      	str	r3, [sp, #0]
 80185f4:	f000 ffba 	bl	801956c <_ZN8touchgfx12TextProviderC1Ev>
 80185f8:	6823      	ldr	r3, [r4, #0]
 80185fa:	4620      	mov	r0, r4
 80185fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185fe:	4798      	blx	r3
 8018600:	4629      	mov	r1, r5
 8018602:	4603      	mov	r3, r0
 8018604:	9a00      	ldr	r2, [sp, #0]
 8018606:	a802      	add	r0, sp, #8
 8018608:	ad18      	add	r5, sp, #96	; 0x60
 801860a:	f000 ffcc 	bl	80195a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801860e:	2100      	movs	r1, #0
 8018610:	4622      	mov	r2, r4
 8018612:	a802      	add	r0, sp, #8
 8018614:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8018618:	462b      	mov	r3, r5
 801861a:	f001 f929 	bl	8019870 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801861e:	b190      	cbz	r0, 8018646 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8018620:	280a      	cmp	r0, #10
 8018622:	d009      	beq.n	8018638 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8018624:	9a01      	ldr	r2, [sp, #4]
 8018626:	b13a      	cbz	r2, 8018638 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8018628:	7923      	ldrb	r3, [r4, #4]
 801862a:	7a12      	ldrb	r2, [r2, #8]
 801862c:	1a9b      	subs	r3, r3, r2
 801862e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8018632:	429e      	cmp	r6, r3
 8018634:	bf28      	it	cs
 8018636:	461e      	movcs	r6, r3
 8018638:	462b      	mov	r3, r5
 801863a:	4622      	mov	r2, r4
 801863c:	2100      	movs	r1, #0
 801863e:	a802      	add	r0, sp, #8
 8018640:	f001 f916 	bl	8019870 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018644:	e7eb      	b.n	801861e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8018646:	4630      	mov	r0, r6
 8018648:	b019      	add	sp, #100	; 0x64
 801864a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801864e:	b003      	add	sp, #12
 8018650:	4770      	bx	lr

08018652 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018656:	b099      	sub	sp, #100	; 0x64
 8018658:	4606      	mov	r6, r0
 801865a:	4614      	mov	r4, r2
 801865c:	4688      	mov	r8, r1
 801865e:	a802      	add	r0, sp, #8
 8018660:	461d      	mov	r5, r3
 8018662:	f04f 0b00 	mov.w	fp, #0
 8018666:	f000 ff81 	bl	801956c <_ZN8touchgfx12TextProviderC1Ev>
 801866a:	6833      	ldr	r3, [r6, #0]
 801866c:	4630      	mov	r0, r6
 801866e:	465f      	mov	r7, fp
 8018670:	46da      	mov	sl, fp
 8018672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018674:	46d9      	mov	r9, fp
 8018676:	4798      	blx	r3
 8018678:	462a      	mov	r2, r5
 801867a:	4603      	mov	r3, r0
 801867c:	4621      	mov	r1, r4
 801867e:	a802      	add	r0, sp, #8
 8018680:	f000 ff91 	bl	80195a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018684:	ab01      	add	r3, sp, #4
 8018686:	4632      	mov	r2, r6
 8018688:	4641      	mov	r1, r8
 801868a:	a802      	add	r0, sp, #8
 801868c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018690:	f001 f8ee 	bl	8019870 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018694:	4605      	mov	r5, r0
 8018696:	b108      	cbz	r0, 801869c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8018698:	280a      	cmp	r0, #10
 801869a:	d10b      	bne.n	80186b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801869c:	4557      	cmp	r7, sl
 801869e:	bf38      	it	cc
 80186a0:	4657      	movcc	r7, sl
 80186a2:	f04f 0a00 	mov.w	sl, #0
 80186a6:	b91d      	cbnz	r5, 80186b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 80186a8:	4638      	mov	r0, r7
 80186aa:	b019      	add	sp, #100	; 0x64
 80186ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186b0:	46ab      	mov	fp, r5
 80186b2:	e7e7      	b.n	8018684 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 80186b4:	9a01      	ldr	r2, [sp, #4]
 80186b6:	2a00      	cmp	r2, #0
 80186b8:	d0fa      	beq.n	80186b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 80186ba:	f992 400d 	ldrsb.w	r4, [r2, #13]
 80186be:	4659      	mov	r1, fp
 80186c0:	6833      	ldr	r3, [r6, #0]
 80186c2:	f404 7080 	and.w	r0, r4, #256	; 0x100
 80186c6:	7a94      	ldrb	r4, [r2, #10]
 80186c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186ca:	4304      	orrs	r4, r0
 80186cc:	4630      	mov	r0, r6
 80186ce:	8895      	ldrh	r5, [r2, #4]
 80186d0:	4798      	blx	r3
 80186d2:	4420      	add	r0, r4
 80186d4:	4450      	add	r0, sl
 80186d6:	fa1f fa80 	uxth.w	sl, r0
 80186da:	e7e4      	b.n	80186a6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

080186dc <_ZNK8touchgfx8Drawable10invalidateEv>:
 80186dc:	b513      	push	{r0, r1, r4, lr}
 80186de:	1d01      	adds	r1, r0, #4
 80186e0:	4603      	mov	r3, r0
 80186e2:	466a      	mov	r2, sp
 80186e4:	c903      	ldmia	r1, {r0, r1}
 80186e6:	e882 0003 	stmia.w	r2, {r0, r1}
 80186ea:	2100      	movs	r1, #0
 80186ec:	4618      	mov	r0, r3
 80186ee:	9100      	str	r1, [sp, #0]
 80186f0:	6819      	ldr	r1, [r3, #0]
 80186f2:	690c      	ldr	r4, [r1, #16]
 80186f4:	4611      	mov	r1, r2
 80186f6:	47a0      	blx	r4
 80186f8:	b002      	add	sp, #8
 80186fa:	bd10      	pop	{r4, pc}

080186fc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80186fc:	b538      	push	{r3, r4, r5, lr}
 80186fe:	680b      	ldr	r3, [r1, #0]
 8018700:	460c      	mov	r4, r1
 8018702:	4605      	mov	r5, r0
 8018704:	68db      	ldr	r3, [r3, #12]
 8018706:	4798      	blx	r3
 8018708:	6823      	ldr	r3, [r4, #0]
 801870a:	4620      	mov	r0, r4
 801870c:	4629      	mov	r1, r5
 801870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018710:	4798      	blx	r3
 8018712:	4628      	mov	r0, r5
 8018714:	bd38      	pop	{r3, r4, r5, pc}

08018716 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018716:	b410      	push	{r4}
 8018718:	880a      	ldrh	r2, [r1, #0]
 801871a:	8884      	ldrh	r4, [r0, #4]
 801871c:	4422      	add	r2, r4
 801871e:	800a      	strh	r2, [r1, #0]
 8018720:	884a      	ldrh	r2, [r1, #2]
 8018722:	88c4      	ldrh	r4, [r0, #6]
 8018724:	4422      	add	r2, r4
 8018726:	804a      	strh	r2, [r1, #2]
 8018728:	6940      	ldr	r0, [r0, #20]
 801872a:	b120      	cbz	r0, 8018736 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801872c:	6803      	ldr	r3, [r0, #0]
 801872e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018734:	4718      	bx	r3
 8018736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801873a:	4770      	bx	lr

0801873c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801873c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801873e:	460b      	mov	r3, r1
 8018740:	b085      	sub	sp, #20
 8018742:	4604      	mov	r4, r0
 8018744:	b901      	cbnz	r1, 8018748 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018746:	b1fa      	cbz	r2, 8018788 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8018748:	1d27      	adds	r7, r4, #4
 801874a:	466e      	mov	r6, sp
 801874c:	ad02      	add	r5, sp, #8
 801874e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018752:	e886 0003 	stmia.w	r6, {r0, r1}
 8018756:	88e1      	ldrh	r1, [r4, #6]
 8018758:	4620      	mov	r0, r4
 801875a:	440a      	add	r2, r1
 801875c:	88a1      	ldrh	r1, [r4, #4]
 801875e:	4419      	add	r1, r3
 8018760:	6823      	ldr	r3, [r4, #0]
 8018762:	b212      	sxth	r2, r2
 8018764:	b209      	sxth	r1, r1
 8018766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018768:	4798      	blx	r3
 801876a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801876e:	e885 0003 	stmia.w	r5, {r0, r1}
 8018772:	6960      	ldr	r0, [r4, #20]
 8018774:	b150      	cbz	r0, 801878c <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8018776:	6803      	ldr	r3, [r0, #0]
 8018778:	4631      	mov	r1, r6
 801877a:	691b      	ldr	r3, [r3, #16]
 801877c:	4798      	blx	r3
 801877e:	6960      	ldr	r0, [r4, #20]
 8018780:	6803      	ldr	r3, [r0, #0]
 8018782:	691b      	ldr	r3, [r3, #16]
 8018784:	4629      	mov	r1, r5
 8018786:	4798      	blx	r3
 8018788:	b005      	add	sp, #20
 801878a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801878c:	f7ff fb78 	bl	8017e80 <_ZN8touchgfx11Application11getInstanceEv>
 8018790:	6803      	ldr	r3, [r0, #0]
 8018792:	4631      	mov	r1, r6
 8018794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018796:	4798      	blx	r3
 8018798:	f7ff fb72 	bl	8017e80 <_ZN8touchgfx11Application11getInstanceEv>
 801879c:	6803      	ldr	r3, [r0, #0]
 801879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187a0:	e7f0      	b.n	8018784 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

080187a2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80187a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80187a4:	8882      	ldrh	r2, [r0, #4]
 80187a6:	4605      	mov	r5, r0
 80187a8:	880b      	ldrh	r3, [r1, #0]
 80187aa:	460c      	mov	r4, r1
 80187ac:	4413      	add	r3, r2
 80187ae:	800b      	strh	r3, [r1, #0]
 80187b0:	884b      	ldrh	r3, [r1, #2]
 80187b2:	88c2      	ldrh	r2, [r0, #6]
 80187b4:	4413      	add	r3, r2
 80187b6:	4602      	mov	r2, r0
 80187b8:	804b      	strh	r3, [r1, #2]
 80187ba:	466b      	mov	r3, sp
 80187bc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80187c0:	6851      	ldr	r1, [r2, #4]
 80187c2:	c303      	stmia	r3!, {r0, r1}
 80187c4:	4621      	mov	r1, r4
 80187c6:	4668      	mov	r0, sp
 80187c8:	f7fc f9ee 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 80187cc:	466b      	mov	r3, sp
 80187ce:	cb03      	ldmia	r3!, {r0, r1}
 80187d0:	6020      	str	r0, [r4, #0]
 80187d2:	6061      	str	r1, [r4, #4]
 80187d4:	6968      	ldr	r0, [r5, #20]
 80187d6:	b128      	cbz	r0, 80187e4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 80187d8:	6803      	ldr	r3, [r0, #0]
 80187da:	691b      	ldr	r3, [r3, #16]
 80187dc:	4621      	mov	r1, r4
 80187de:	4798      	blx	r3
 80187e0:	b003      	add	sp, #12
 80187e2:	bd30      	pop	{r4, r5, pc}
 80187e4:	f7ff fb4c 	bl	8017e80 <_ZN8touchgfx11Application11getInstanceEv>
 80187e8:	6803      	ldr	r3, [r0, #0]
 80187ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187ec:	e7f6      	b.n	80187dc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

080187ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80187ee:	b570      	push	{r4, r5, r6, lr}
 80187f0:	8882      	ldrh	r2, [r0, #4]
 80187f2:	460c      	mov	r4, r1
 80187f4:	880b      	ldrh	r3, [r1, #0]
 80187f6:	4605      	mov	r5, r0
 80187f8:	4413      	add	r3, r2
 80187fa:	800b      	strh	r3, [r1, #0]
 80187fc:	884b      	ldrh	r3, [r1, #2]
 80187fe:	88c2      	ldrh	r2, [r0, #6]
 8018800:	4413      	add	r3, r2
 8018802:	804b      	strh	r3, [r1, #2]
 8018804:	1d01      	adds	r1, r0, #4
 8018806:	4620      	mov	r0, r4
 8018808:	f7fc f9ce 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 801880c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018810:	b153      	cbz	r3, 8018828 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018812:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018816:	b13b      	cbz	r3, 8018828 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8018818:	6968      	ldr	r0, [r5, #20]
 801881a:	b128      	cbz	r0, 8018828 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801881c:	6803      	ldr	r3, [r0, #0]
 801881e:	4621      	mov	r1, r4
 8018820:	6a1b      	ldr	r3, [r3, #32]
 8018822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018826:	4718      	bx	r3
 8018828:	bd70      	pop	{r4, r5, r6, pc}

0801882a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801882a:	b510      	push	{r4, lr}
 801882c:	2300      	movs	r3, #0
 801882e:	4604      	mov	r4, r0
 8018830:	4608      	mov	r0, r1
 8018832:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018836:	8023      	strh	r3, [r4, #0]
 8018838:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801883c:	8063      	strh	r3, [r4, #2]
 801883e:	6803      	ldr	r3, [r0, #0]
 8018840:	80a1      	strh	r1, [r4, #4]
 8018842:	4621      	mov	r1, r4
 8018844:	80e2      	strh	r2, [r4, #6]
 8018846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018848:	4798      	blx	r3
 801884a:	4620      	mov	r0, r4
 801884c:	bd10      	pop	{r4, pc}
	...

08018850 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018850:	b530      	push	{r4, r5, lr}
 8018852:	8083      	strh	r3, [r0, #4]
 8018854:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018858:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801885c:	7183      	strb	r3, [r0, #6]
 801885e:	79c3      	ldrb	r3, [r0, #7]
 8018860:	6101      	str	r1, [r0, #16]
 8018862:	f365 0306 	bfi	r3, r5, #0, #7
 8018866:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801886a:	8282      	strh	r2, [r0, #20]
 801886c:	f365 13c7 	bfi	r3, r5, #7, #1
 8018870:	71c3      	strb	r3, [r0, #7]
 8018872:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018876:	7203      	strb	r3, [r0, #8]
 8018878:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801887c:	7243      	strb	r3, [r0, #9]
 801887e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018882:	8143      	strh	r3, [r0, #10]
 8018884:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018888:	8183      	strh	r3, [r0, #12]
 801888a:	4b01      	ldr	r3, [pc, #4]	; (8018890 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801888c:	6003      	str	r3, [r0, #0]
 801888e:	bd30      	pop	{r4, r5, pc}
 8018890:	080278b4 	.word	0x080278b4

08018894 <_ZNK8touchgfx9ConstFont4findEt>:
 8018894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018896:	8a84      	ldrh	r4, [r0, #20]
 8018898:	2500      	movs	r5, #0
 801889a:	260e      	movs	r6, #14
 801889c:	3c01      	subs	r4, #1
 801889e:	42a5      	cmp	r5, r4
 80188a0:	dc0c      	bgt.n	80188bc <_ZNK8touchgfx9ConstFont4findEt+0x28>
 80188a2:	192a      	adds	r2, r5, r4
 80188a4:	6903      	ldr	r3, [r0, #16]
 80188a6:	1052      	asrs	r2, r2, #1
 80188a8:	fb06 3302 	mla	r3, r6, r2, r3
 80188ac:	889f      	ldrh	r7, [r3, #4]
 80188ae:	428f      	cmp	r7, r1
 80188b0:	d901      	bls.n	80188b6 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 80188b2:	1e54      	subs	r4, r2, #1
 80188b4:	e7f3      	b.n	801889e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 80188b6:	d202      	bcs.n	80188be <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 80188b8:	1c55      	adds	r5, r2, #1
 80188ba:	e7f0      	b.n	801889e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 80188bc:	2300      	movs	r3, #0
 80188be:	4618      	mov	r0, r3
 80188c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188c2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80188c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188c4:	4605      	mov	r5, r0
 80188c6:	4617      	mov	r7, r2
 80188c8:	461e      	mov	r6, r3
 80188ca:	f7ff ffe3 	bl	8018894 <_ZNK8touchgfx9ConstFont4findEt>
 80188ce:	b9e0      	cbnz	r0, 801890a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 80188d0:	b911      	cbnz	r1, 80188d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 80188d2:	2400      	movs	r4, #0
 80188d4:	4620      	mov	r0, r4
 80188d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188d8:	290a      	cmp	r1, #10
 80188da:	d0fa      	beq.n	80188d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80188dc:	682b      	ldr	r3, [r5, #0]
 80188de:	4628      	mov	r0, r5
 80188e0:	691b      	ldr	r3, [r3, #16]
 80188e2:	4798      	blx	r3
 80188e4:	4601      	mov	r1, r0
 80188e6:	4628      	mov	r0, r5
 80188e8:	f7ff ffd4 	bl	8018894 <_ZNK8touchgfx9ConstFont4findEt>
 80188ec:	4604      	mov	r4, r0
 80188ee:	2800      	cmp	r0, #0
 80188f0:	d0ef      	beq.n	80188d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80188f2:	682b      	ldr	r3, [r5, #0]
 80188f4:	4621      	mov	r1, r4
 80188f6:	4628      	mov	r0, r5
 80188f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80188fa:	4798      	blx	r3
 80188fc:	6038      	str	r0, [r7, #0]
 80188fe:	682b      	ldr	r3, [r5, #0]
 8018900:	4628      	mov	r0, r5
 8018902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018904:	4798      	blx	r3
 8018906:	7030      	strb	r0, [r6, #0]
 8018908:	e7e4      	b.n	80188d4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801890a:	4604      	mov	r4, r0
 801890c:	e7f1      	b.n	80188f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801890e <_ZN8touchgfx6memsetEPvhm>:
 801890e:	4402      	add	r2, r0
 8018910:	4290      	cmp	r0, r2
 8018912:	d002      	beq.n	801891a <_ZN8touchgfx6memsetEPvhm+0xc>
 8018914:	f800 1b01 	strb.w	r1, [r0], #1
 8018918:	e7fa      	b.n	8018910 <_ZN8touchgfx6memsetEPvhm+0x2>
 801891a:	4770      	bx	lr

0801891c <_ZN8touchgfx3clzEl>:
 801891c:	b1e8      	cbz	r0, 801895a <_ZN8touchgfx3clzEl+0x3e>
 801891e:	2800      	cmp	r0, #0
 8018920:	bfb8      	it	lt
 8018922:	4240      	neglt	r0, r0
 8018924:	0c03      	lsrs	r3, r0, #16
 8018926:	041b      	lsls	r3, r3, #16
 8018928:	b9ab      	cbnz	r3, 8018956 <_ZN8touchgfx3clzEl+0x3a>
 801892a:	0400      	lsls	r0, r0, #16
 801892c:	2310      	movs	r3, #16
 801892e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018932:	bf04      	itt	eq
 8018934:	0200      	lsleq	r0, r0, #8
 8018936:	3308      	addeq	r3, #8
 8018938:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801893c:	bf04      	itt	eq
 801893e:	0100      	lsleq	r0, r0, #4
 8018940:	3304      	addeq	r3, #4
 8018942:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018946:	bf04      	itt	eq
 8018948:	0080      	lsleq	r0, r0, #2
 801894a:	3302      	addeq	r3, #2
 801894c:	2800      	cmp	r0, #0
 801894e:	bfa8      	it	ge
 8018950:	3301      	addge	r3, #1
 8018952:	1e58      	subs	r0, r3, #1
 8018954:	4770      	bx	lr
 8018956:	2300      	movs	r3, #0
 8018958:	e7e9      	b.n	801892e <_ZN8touchgfx3clzEl+0x12>
 801895a:	201f      	movs	r0, #31
 801895c:	4770      	bx	lr

0801895e <_ZN8touchgfx6muldivElllRl>:
 801895e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018962:	4604      	mov	r4, r0
 8018964:	4698      	mov	r8, r3
 8018966:	2601      	movs	r6, #1
 8018968:	f7ff ffd8 	bl	801891c <_ZN8touchgfx3clzEl>
 801896c:	2c00      	cmp	r4, #0
 801896e:	fa04 f500 	lsl.w	r5, r4, r0
 8018972:	fa06 f600 	lsl.w	r6, r6, r0
 8018976:	bfba      	itte	lt
 8018978:	f04f 37ff 	movlt.w	r7, #4294967295
 801897c:	4264      	neglt	r4, r4
 801897e:	2701      	movge	r7, #1
 8018980:	2900      	cmp	r1, #0
 8018982:	f106 36ff 	add.w	r6, r6, #4294967295
 8018986:	bfbc      	itt	lt
 8018988:	4249      	neglt	r1, r1
 801898a:	427f      	neglt	r7, r7
 801898c:	2a00      	cmp	r2, #0
 801898e:	fa41 fc00 	asr.w	ip, r1, r0
 8018992:	ea01 0106 	and.w	r1, r1, r6
 8018996:	bfb8      	it	lt
 8018998:	427f      	neglt	r7, r7
 801899a:	fb04 f401 	mul.w	r4, r4, r1
 801899e:	fb95 f3f2 	sdiv	r3, r5, r2
 80189a2:	fb02 5513 	mls	r5, r2, r3, r5
 80189a6:	bfb8      	it	lt
 80189a8:	4252      	neglt	r2, r2
 80189aa:	fb94 f0f2 	sdiv	r0, r4, r2
 80189ae:	fb02 4410 	mls	r4, r2, r0, r4
 80189b2:	fb0c 4405 	mla	r4, ip, r5, r4
 80189b6:	fb94 f1f2 	sdiv	r1, r4, r2
 80189ba:	4408      	add	r0, r1
 80189bc:	fb02 4211 	mls	r2, r2, r1, r4
 80189c0:	fb0c 0003 	mla	r0, ip, r3, r0
 80189c4:	f8c8 2000 	str.w	r2, [r8]
 80189c8:	4378      	muls	r0, r7
 80189ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080189ce <_ZN8touchgfx10ClickEventD1Ev>:
 80189ce:	4770      	bx	lr

080189d0 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80189d0:	2000      	movs	r0, #0
 80189d2:	4770      	bx	lr

080189d4 <_ZN8touchgfx9DragEventD1Ev>:
 80189d4:	4770      	bx	lr

080189d6 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80189d6:	2001      	movs	r0, #1
 80189d8:	4770      	bx	lr

080189da <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80189da:	2002      	movs	r0, #2
 80189dc:	4770      	bx	lr

080189de <_ZN8touchgfx12GestureEventD1Ev>:
 80189de:	4770      	bx	lr

080189e0 <_ZN8touchgfx10ClickEventD0Ev>:
 80189e0:	b510      	push	{r4, lr}
 80189e2:	4604      	mov	r4, r0
 80189e4:	210c      	movs	r1, #12
 80189e6:	f00b fa14 	bl	8023e12 <_ZdlPvj>
 80189ea:	4620      	mov	r0, r4
 80189ec:	bd10      	pop	{r4, pc}

080189ee <_ZN8touchgfx9DragEventD0Ev>:
 80189ee:	b510      	push	{r4, lr}
 80189f0:	4604      	mov	r4, r0
 80189f2:	2110      	movs	r1, #16
 80189f4:	f00b fa0d 	bl	8023e12 <_ZdlPvj>
 80189f8:	4620      	mov	r0, r4
 80189fa:	bd10      	pop	{r4, pc}

080189fc <_ZN8touchgfx12GestureEventD0Ev>:
 80189fc:	b510      	push	{r4, lr}
 80189fe:	4604      	mov	r4, r0
 8018a00:	210c      	movs	r1, #12
 8018a02:	f00b fa06 	bl	8023e12 <_ZdlPvj>
 8018a06:	4620      	mov	r0, r4
 8018a08:	bd10      	pop	{r4, pc}
	...

08018a0c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018a0c:	b530      	push	{r4, r5, lr}
 8018a0e:	460d      	mov	r5, r1
 8018a10:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018a12:	b087      	sub	sp, #28
 8018a14:	4604      	mov	r4, r0
 8018a16:	b301      	cbz	r1, 8018a5a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018a18:	a801      	add	r0, sp, #4
 8018a1a:	f7ff ff06 	bl	801882a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018a1e:	892a      	ldrh	r2, [r5, #8]
 8018a20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018a24:	7928      	ldrb	r0, [r5, #4]
 8018a26:	1ad2      	subs	r2, r2, r3
 8018a28:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018a2a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018a2e:	441a      	add	r2, r3
 8018a30:	896b      	ldrh	r3, [r5, #10]
 8018a32:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018a36:	f88d 0010 	strb.w	r0, [sp, #16]
 8018a3a:	1b5b      	subs	r3, r3, r5
 8018a3c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018a3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018a40:	442b      	add	r3, r5
 8018a42:	4d07      	ldr	r5, [pc, #28]	; (8018a60 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018a44:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018a48:	a903      	add	r1, sp, #12
 8018a4a:	9503      	str	r5, [sp, #12]
 8018a4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018a50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018a54:	6803      	ldr	r3, [r0, #0]
 8018a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018a58:	4798      	blx	r3
 8018a5a:	b007      	add	sp, #28
 8018a5c:	bd30      	pop	{r4, r5, pc}
 8018a5e:	bf00      	nop
 8018a60:	08027930 	.word	0x08027930

08018a64 <_ZNK8touchgfx4Rect9intersectEss>:
 8018a64:	b510      	push	{r4, lr}
 8018a66:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018a6a:	428b      	cmp	r3, r1
 8018a6c:	dc10      	bgt.n	8018a90 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018a6e:	8884      	ldrh	r4, [r0, #4]
 8018a70:	4423      	add	r3, r4
 8018a72:	b21b      	sxth	r3, r3
 8018a74:	4299      	cmp	r1, r3
 8018a76:	da0b      	bge.n	8018a90 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018a78:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018a7c:	4293      	cmp	r3, r2
 8018a7e:	dc07      	bgt.n	8018a90 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018a80:	88c0      	ldrh	r0, [r0, #6]
 8018a82:	4418      	add	r0, r3
 8018a84:	b200      	sxth	r0, r0
 8018a86:	4282      	cmp	r2, r0
 8018a88:	bfac      	ite	ge
 8018a8a:	2000      	movge	r0, #0
 8018a8c:	2001      	movlt	r0, #1
 8018a8e:	bd10      	pop	{r4, pc}
 8018a90:	2000      	movs	r0, #0
 8018a92:	e7fc      	b.n	8018a8e <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08018a94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a96:	460c      	mov	r4, r1
 8018a98:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018a9a:	b089      	sub	sp, #36	; 0x24
 8018a9c:	4605      	mov	r5, r0
 8018a9e:	2900      	cmp	r1, #0
 8018aa0:	d054      	beq.n	8018b4c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8018aa2:	4668      	mov	r0, sp
 8018aa4:	f7ff fec1 	bl	801882a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018aa8:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8018aaa:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8018aac:	4668      	mov	r0, sp
 8018aae:	8922      	ldrh	r2, [r4, #8]
 8018ab0:	88e1      	ldrh	r1, [r4, #6]
 8018ab2:	443a      	add	r2, r7
 8018ab4:	4431      	add	r1, r6
 8018ab6:	b212      	sxth	r2, r2
 8018ab8:	b209      	sxth	r1, r1
 8018aba:	f7ff ffd3 	bl	8018a64 <_ZNK8touchgfx4Rect9intersectEss>
 8018abe:	b1d0      	cbz	r0, 8018af6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8018ac0:	89a2      	ldrh	r2, [r4, #12]
 8018ac2:	4668      	mov	r0, sp
 8018ac4:	8961      	ldrh	r1, [r4, #10]
 8018ac6:	443a      	add	r2, r7
 8018ac8:	4431      	add	r1, r6
 8018aca:	b212      	sxth	r2, r2
 8018acc:	b209      	sxth	r1, r1
 8018ace:	f7ff ffc9 	bl	8018a64 <_ZNK8touchgfx4Rect9intersectEss>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	b978      	cbnz	r0, 8018af6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8018ad6:	4a1e      	ldr	r2, [pc, #120]	; (8018b50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8018ad8:	a904      	add	r1, sp, #16
 8018ada:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018adc:	9204      	str	r2, [sp, #16]
 8018ade:	2202      	movs	r2, #2
 8018ae0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018ae4:	f88d 2014 	strb.w	r2, [sp, #20]
 8018ae8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018aec:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018af0:	6803      	ldr	r3, [r0, #0]
 8018af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018af4:	4798      	blx	r3
 8018af6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8018af8:	a802      	add	r0, sp, #8
 8018afa:	f7ff fe96 	bl	801882a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018afe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018b02:	88e0      	ldrh	r0, [r4, #6]
 8018b04:	8961      	ldrh	r1, [r4, #10]
 8018b06:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018b0a:	1a80      	subs	r0, r0, r2
 8018b0c:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8018b10:	1a89      	subs	r1, r1, r2
 8018b12:	8923      	ldrh	r3, [r4, #8]
 8018b14:	4460      	add	r0, ip
 8018b16:	89a2      	ldrh	r2, [r4, #12]
 8018b18:	4461      	add	r1, ip
 8018b1a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018b1c:	eba3 030e 	sub.w	r3, r3, lr
 8018b20:	eba2 020e 	sub.w	r2, r2, lr
 8018b24:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018b28:	7927      	ldrb	r7, [r4, #4]
 8018b2a:	4433      	add	r3, r6
 8018b2c:	4432      	add	r2, r6
 8018b2e:	4c09      	ldr	r4, [pc, #36]	; (8018b54 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8018b30:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018b32:	f8ad 101a 	strh.w	r1, [sp, #26]
 8018b36:	a904      	add	r1, sp, #16
 8018b38:	9404      	str	r4, [sp, #16]
 8018b3a:	f88d 7014 	strb.w	r7, [sp, #20]
 8018b3e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018b42:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018b46:	6803      	ldr	r3, [r0, #0]
 8018b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b4a:	4798      	blx	r3
 8018b4c:	b009      	add	sp, #36	; 0x24
 8018b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b50:	08027908 	.word	0x08027908
 8018b54:	0802791c 	.word	0x0802791c

08018b58 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b5c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8018b60:	b0a1      	sub	sp, #132	; 0x84
 8018b62:	4604      	mov	r4, r0
 8018b64:	460d      	mov	r5, r1
 8018b66:	790b      	ldrb	r3, [r1, #4]
 8018b68:	f1b9 0f00 	cmp.w	r9, #0
 8018b6c:	d00f      	beq.n	8018b8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	f040 80a2 	bne.w	8018cb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8018b74:	b021      	add	sp, #132	; 0x84
 8018b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b7a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018b7e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8018b82:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018b86:	1d20      	adds	r0, r4, #4
 8018b88:	f7fb ff5c 	bl	8014a44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018b8c:	e094      	b.n	8018cb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d1f0      	bne.n	8018b74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8018b92:	4b5f      	ldr	r3, [pc, #380]	; (8018d10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8018b9a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8018b9e:	f1ba 0f03 	cmp.w	sl, #3
 8018ba2:	ddea      	ble.n	8018b7a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8018ba4:	f1ba 0f0c 	cmp.w	sl, #12
 8018ba8:	f04f 0303 	mov.w	r3, #3
 8018bac:	f04f 0600 	mov.w	r6, #0
 8018bb0:	4958      	ldr	r1, [pc, #352]	; (8018d14 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8018bb2:	bfd8      	it	le
 8018bb4:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8018bb8:	960a      	str	r6, [sp, #40]	; 0x28
 8018bba:	bfd8      	it	le
 8018bbc:	fb92 f3f3 	sdivle	r3, r2, r3
 8018bc0:	9301      	str	r3, [sp, #4]
 8018bc2:	4b55      	ldr	r3, [pc, #340]	; (8018d18 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8018bc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018bc8:	4b54      	ldr	r3, [pc, #336]	; (8018d1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8018bca:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8018bce:	2248      	movs	r2, #72	; 0x48
 8018bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bd4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8018bd8:	ab0e      	add	r3, sp, #56	; 0x38
 8018bda:	4618      	mov	r0, r3
 8018bdc:	f00b f9c2 	bl	8023f64 <memcpy>
 8018be0:	f04f 32ff 	mov.w	r2, #4294967295
 8018be4:	f8cd a008 	str.w	sl, [sp, #8]
 8018be8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8018bec:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018bf0:	46b3      	mov	fp, r6
 8018bf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8018bf6:	b29b      	uxth	r3, r3
 8018bf8:	9303      	str	r3, [sp, #12]
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	9a03      	ldr	r2, [sp, #12]
 8018bfe:	88ef      	ldrh	r7, [r5, #6]
 8018c00:	a80a      	add	r0, sp, #40	; 0x28
 8018c02:	9309      	str	r3, [sp, #36]	; 0x24
 8018c04:	9b07      	ldr	r3, [sp, #28]
 8018c06:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8018c0a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8018c0e:	fb13 f302 	smulbb	r3, r3, r2
 8018c12:	b29b      	uxth	r3, r3
 8018c14:	9304      	str	r3, [sp, #16]
 8018c16:	9b07      	ldr	r3, [sp, #28]
 8018c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018c1c:	685b      	ldr	r3, [r3, #4]
 8018c1e:	fb13 f302 	smulbb	r3, r3, r2
 8018c22:	b29b      	uxth	r3, r3
 8018c24:	9305      	str	r3, [sp, #20]
 8018c26:	9b04      	ldr	r3, [sp, #16]
 8018c28:	441f      	add	r7, r3
 8018c2a:	9b05      	ldr	r3, [sp, #20]
 8018c2c:	4498      	add	r8, r3
 8018c2e:	b23f      	sxth	r7, r7
 8018c30:	fa0f f888 	sxth.w	r8, r8
 8018c34:	4639      	mov	r1, r7
 8018c36:	4642      	mov	r2, r8
 8018c38:	f7ff ff14 	bl	8018a64 <_ZNK8touchgfx4Rect9intersectEss>
 8018c3c:	b380      	cbz	r0, 8018ca0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8018c3e:	4639      	mov	r1, r7
 8018c40:	ab09      	add	r3, sp, #36	; 0x24
 8018c42:	4642      	mov	r2, r8
 8018c44:	1d20      	adds	r0, r4, #4
 8018c46:	f7fb fefd 	bl	8014a44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018c4c:	b341      	cbz	r1, 8018ca0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8018c4e:	4549      	cmp	r1, r9
 8018c50:	d026      	beq.n	8018ca0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8018c52:	a80c      	add	r0, sp, #48	; 0x30
 8018c54:	f7ff fde9 	bl	801882a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018c58:	2002      	movs	r0, #2
 8018c5a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8018c5e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8018c62:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018c66:	fb92 f2f0 	sdiv	r2, r2, r0
 8018c6a:	440a      	add	r2, r1
 8018c6c:	1a99      	subs	r1, r3, r2
 8018c6e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018c72:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8018c76:	fb93 f3f0 	sdiv	r3, r3, r0
 8018c7a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8018c7e:	4403      	add	r3, r0
 8018c80:	1ad3      	subs	r3, r2, r3
 8018c82:	9a06      	ldr	r2, [sp, #24]
 8018c84:	435b      	muls	r3, r3
 8018c86:	fb01 3301 	mla	r3, r1, r1, r3
 8018c8a:	4293      	cmp	r3, r2
 8018c8c:	d208      	bcs.n	8018ca0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8018c8e:	9a04      	ldr	r2, [sp, #16]
 8018c90:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018c94:	86a2      	strh	r2, [r4, #52]	; 0x34
 8018c96:	9a05      	ldr	r2, [sp, #20]
 8018c98:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8018c9c:	86e2      	strh	r2, [r4, #54]	; 0x36
 8018c9e:	9306      	str	r3, [sp, #24]
 8018ca0:	f10b 0b02 	add.w	fp, fp, #2
 8018ca4:	f1bb 0f08 	cmp.w	fp, #8
 8018ca8:	dda7      	ble.n	8018bfa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8018caa:	9b02      	ldr	r3, [sp, #8]
 8018cac:	3601      	adds	r6, #1
 8018cae:	4453      	add	r3, sl
 8018cb0:	9302      	str	r3, [sp, #8]
 8018cb2:	9b01      	ldr	r3, [sp, #4]
 8018cb4:	42b3      	cmp	r3, r6
 8018cb6:	d199      	bne.n	8018bec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8018cb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018cba:	2900      	cmp	r1, #0
 8018cbc:	f43f af5a 	beq.w	8018b74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8018cc0:	a80c      	add	r0, sp, #48	; 0x30
 8018cc2:	2600      	movs	r6, #0
 8018cc4:	f7ff fdb1 	bl	801882a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018cc8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8018ccc:	88ea      	ldrh	r2, [r5, #6]
 8018cce:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8018cd2:	1ad2      	subs	r2, r2, r3
 8018cd4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018cd6:	7929      	ldrb	r1, [r5, #4]
 8018cd8:	441a      	add	r2, r3
 8018cda:	892b      	ldrh	r3, [r5, #8]
 8018cdc:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8018ce0:	a90e      	add	r1, sp, #56	; 0x38
 8018ce2:	1a1b      	subs	r3, r3, r0
 8018ce4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8018ce6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8018cea:	4403      	add	r3, r0
 8018cec:	480c      	ldr	r0, [pc, #48]	; (8018d20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8018cee:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8018cf2:	900e      	str	r0, [sp, #56]	; 0x38
 8018cf4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018cf6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8018cfa:	6803      	ldr	r3, [r0, #0]
 8018cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018cfe:	4798      	blx	r3
 8018d00:	792b      	ldrb	r3, [r5, #4]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	f43f af36 	beq.w	8018b74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8018d08:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8018d0c:	e732      	b.n	8018b74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8018d0e:	bf00      	nop
 8018d10:	2000bc68 	.word	0x2000bc68
 8018d14:	08025500 	.word	0x08025500
 8018d18:	2000bc5c 	.word	0x2000bc5c
 8018d1c:	2000bc5e 	.word	0x2000bc5e
 8018d20:	08027908 	.word	0x08027908

08018d24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d26:	4604      	mov	r4, r0
 8018d28:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018d2c:	3201      	adds	r2, #1
 8018d2e:	d112      	bne.n	8018d56 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018d30:	2500      	movs	r5, #0
 8018d32:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018d36:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018d3a:	6803      	ldr	r3, [r0, #0]
 8018d3c:	9500      	str	r5, [sp, #0]
 8018d3e:	466d      	mov	r5, sp
 8018d40:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018d44:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018d48:	4629      	mov	r1, r5
 8018d4a:	6a1b      	ldr	r3, [r3, #32]
 8018d4c:	4798      	blx	r3
 8018d4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018d52:	e884 0003 	stmia.w	r4, {r0, r1}
 8018d56:	4620      	mov	r0, r4
 8018d58:	b003      	add	sp, #12
 8018d5a:	bd30      	pop	{r4, r5, pc}

08018d5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018d5c:	b513      	push	{r0, r1, r4, lr}
 8018d5e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018d62:	4604      	mov	r4, r0
 8018d64:	3301      	adds	r3, #1
 8018d66:	d109      	bne.n	8018d7c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018d68:	4601      	mov	r1, r0
 8018d6a:	4668      	mov	r0, sp
 8018d6c:	f7ff fd5d 	bl	801882a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d70:	f8bd 3000 	ldrh.w	r3, [sp]
 8018d74:	8423      	strh	r3, [r4, #32]
 8018d76:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018d7a:	8463      	strh	r3, [r4, #34]	; 0x22
 8018d7c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018d80:	b002      	add	sp, #8
 8018d82:	bd10      	pop	{r4, pc}

08018d84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018d84:	b513      	push	{r0, r1, r4, lr}
 8018d86:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	3301      	adds	r3, #1
 8018d8e:	d109      	bne.n	8018da4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018d90:	4601      	mov	r1, r0
 8018d92:	4668      	mov	r0, sp
 8018d94:	f7ff fd49 	bl	801882a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d98:	f8bd 3000 	ldrh.w	r3, [sp]
 8018d9c:	8423      	strh	r3, [r4, #32]
 8018d9e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018da2:	8463      	strh	r3, [r4, #34]	; 0x22
 8018da4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018da8:	b002      	add	sp, #8
 8018daa:	bd10      	pop	{r4, pc}

08018dac <_ZN8touchgfx6ScreenC1Ev>:
 8018dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dae:	4605      	mov	r5, r0
 8018db0:	4b17      	ldr	r3, [pc, #92]	; (8018e10 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018db2:	2200      	movs	r2, #0
 8018db4:	4917      	ldr	r1, [pc, #92]	; (8018e14 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018db6:	f845 3b04 	str.w	r3, [r5], #4
 8018dba:	2301      	movs	r3, #1
 8018dbc:	8102      	strh	r2, [r0, #8]
 8018dbe:	4604      	mov	r4, r0
 8018dc0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8018dc4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018dc8:	4b13      	ldr	r3, [pc, #76]	; (8018e18 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018dca:	8142      	strh	r2, [r0, #10]
 8018dcc:	f9b3 7000 	ldrsh.w	r7, [r3]
 8018dd0:	4b12      	ldr	r3, [pc, #72]	; (8018e1c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8018dd2:	8182      	strh	r2, [r0, #12]
 8018dd4:	81c2      	strh	r2, [r0, #14]
 8018dd6:	8202      	strh	r2, [r0, #16]
 8018dd8:	8242      	strh	r2, [r0, #18]
 8018dda:	8282      	strh	r2, [r0, #20]
 8018ddc:	82c2      	strh	r2, [r0, #22]
 8018dde:	6202      	str	r2, [r0, #32]
 8018de0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8018de4:	6342      	str	r2, [r0, #52]	; 0x34
 8018de6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018dea:	6041      	str	r1, [r0, #4]
 8018dec:	4611      	mov	r1, r2
 8018dee:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8018df2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8018df6:	4628      	mov	r0, r5
 8018df8:	f7f6 fe2d 	bl	800fa56 <_ZN8touchgfx8Drawable5setXYEss>
 8018dfc:	4639      	mov	r1, r7
 8018dfe:	4628      	mov	r0, r5
 8018e00:	f7f6 fe47 	bl	800fa92 <_ZN8touchgfx8Drawable8setWidthEs>
 8018e04:	4628      	mov	r0, r5
 8018e06:	4631      	mov	r1, r6
 8018e08:	f7f6 fe52 	bl	800fab0 <_ZN8touchgfx8Drawable9setHeightEs>
 8018e0c:	4620      	mov	r0, r4
 8018e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e10:	08027944 	.word	0x08027944
 8018e14:	08026618 	.word	0x08026618
 8018e18:	2000bc5c 	.word	0x2000bc5c
 8018e1c:	2000bc5e 	.word	0x2000bc5e

08018e20 <_ZN8touchgfx6Screen4drawEv>:
 8018e20:	4b09      	ldr	r3, [pc, #36]	; (8018e48 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018e22:	b507      	push	{r0, r1, r2, lr}
 8018e24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e28:	2100      	movs	r1, #0
 8018e2a:	4b08      	ldr	r3, [pc, #32]	; (8018e4c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018e2c:	9100      	str	r1, [sp, #0]
 8018e2e:	4669      	mov	r1, sp
 8018e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e34:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018e38:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018e3c:	6803      	ldr	r3, [r0, #0]
 8018e3e:	689b      	ldr	r3, [r3, #8]
 8018e40:	4798      	blx	r3
 8018e42:	b003      	add	sp, #12
 8018e44:	f85d fb04 	ldr.w	pc, [sp], #4
 8018e48:	2000bc5c 	.word	0x2000bc5c
 8018e4c:	2000bc5e 	.word	0x2000bc5e

08018e50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e54:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018e58:	b089      	sub	sp, #36	; 0x24
 8018e5a:	4680      	mov	r8, r0
 8018e5c:	460c      	mov	r4, r1
 8018e5e:	4615      	mov	r5, r2
 8018e60:	b16b      	cbz	r3, 8018e7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018e62:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018e66:	b153      	cbz	r3, 8018e7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018e68:	4628      	mov	r0, r5
 8018e6a:	f7ff ff5b 	bl	8018d24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018e6e:	4621      	mov	r1, r4
 8018e70:	f7fe ffc2 	bl	8017df8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018e74:	69eb      	ldr	r3, [r5, #28]
 8018e76:	b928      	cbnz	r0, 8018e84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8018e78:	461d      	mov	r5, r3
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d1f4      	bne.n	8018e68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8018e7e:	b009      	add	sp, #36	; 0x24
 8018e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e84:	ae04      	add	r6, sp, #16
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d051      	beq.n	8018f2e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8018e8a:	682b      	ldr	r3, [r5, #0]
 8018e8c:	4629      	mov	r1, r5
 8018e8e:	a802      	add	r0, sp, #8
 8018e90:	68db      	ldr	r3, [r3, #12]
 8018e92:	4798      	blx	r3
 8018e94:	4628      	mov	r0, r5
 8018e96:	f7ff ff61 	bl	8018d5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018e9a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8018e9e:	4407      	add	r7, r0
 8018ea0:	4628      	mov	r0, r5
 8018ea2:	f7ff ff6f 	bl	8018d84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018ea6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018eaa:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018eae:	b23f      	sxth	r7, r7
 8018eb0:	4418      	add	r0, r3
 8018eb2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018eb6:	4621      	mov	r1, r4
 8018eb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018ebc:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018ec0:	4630      	mov	r0, r6
 8018ec2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018ec6:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018eca:	f7fb fe6d 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 8018ece:	4628      	mov	r0, r5
 8018ed0:	f7ff ff28 	bl	8018d24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018ed4:	ab06      	add	r3, sp, #24
 8018ed6:	4602      	mov	r2, r0
 8018ed8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018edc:	e883 0003 	stmia.w	r3, {r0, r1}
 8018ee0:	4611      	mov	r1, r2
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	f7fb fe60 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 8018ee8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018eec:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018ef0:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018ef4:	4299      	cmp	r1, r3
 8018ef6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018efa:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018efe:	d10b      	bne.n	8018f18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8018f00:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018f04:	4552      	cmp	r2, sl
 8018f06:	d107      	bne.n	8018f18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8018f08:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018f0c:	455a      	cmp	r2, fp
 8018f0e:	d103      	bne.n	8018f18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8018f10:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018f14:	454a      	cmp	r2, r9
 8018f16:	d00a      	beq.n	8018f2e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8018f18:	f1bb 0f00 	cmp.w	fp, #0
 8018f1c:	d002      	beq.n	8018f24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8018f1e:	f1b9 0f00 	cmp.w	r9, #0
 8018f22:	d12e      	bne.n	8018f82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8018f24:	69ea      	ldr	r2, [r5, #28]
 8018f26:	4621      	mov	r1, r4
 8018f28:	4640      	mov	r0, r8
 8018f2a:	f7ff ff91 	bl	8018e50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018f2e:	4628      	mov	r0, r5
 8018f30:	f7ff fef8 	bl	8018d24 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018f34:	6861      	ldr	r1, [r4, #4]
 8018f36:	4602      	mov	r2, r0
 8018f38:	4633      	mov	r3, r6
 8018f3a:	6820      	ldr	r0, [r4, #0]
 8018f3c:	c303      	stmia	r3!, {r0, r1}
 8018f3e:	4611      	mov	r1, r2
 8018f40:	4630      	mov	r0, r6
 8018f42:	f7fb fe31 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 8018f46:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d097      	beq.n	8018e7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018f4e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d093      	beq.n	8018e7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018f56:	4628      	mov	r0, r5
 8018f58:	f7ff ff00 	bl	8018d5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018f5c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018f60:	1a18      	subs	r0, r3, r0
 8018f62:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018f66:	4628      	mov	r0, r5
 8018f68:	f7ff ff0c 	bl	8018d84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018f6c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018f70:	4631      	mov	r1, r6
 8018f72:	1a18      	subs	r0, r3, r0
 8018f74:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018f78:	4628      	mov	r0, r5
 8018f7a:	682b      	ldr	r3, [r5, #0]
 8018f7c:	689b      	ldr	r3, [r3, #8]
 8018f7e:	4798      	blx	r3
 8018f80:	e77d      	b.n	8018e7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018f82:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018f86:	fa1f f08a 	uxth.w	r0, sl
 8018f8a:	4552      	cmp	r2, sl
 8018f8c:	9000      	str	r0, [sp, #0]
 8018f8e:	da12      	bge.n	8018fb6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8018f90:	9301      	str	r3, [sp, #4]
 8018f92:	9b00      	ldr	r3, [sp, #0]
 8018f94:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018f98:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018f9c:	1a9a      	subs	r2, r3, r2
 8018f9e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018fa2:	4631      	mov	r1, r6
 8018fa4:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018fa8:	4640      	mov	r0, r8
 8018faa:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018fae:	69ea      	ldr	r2, [r5, #28]
 8018fb0:	f7ff ff4e 	bl	8018e50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018fb4:	9b01      	ldr	r3, [sp, #4]
 8018fb6:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018fba:	b29f      	uxth	r7, r3
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	da0d      	bge.n	8018fdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8018fc0:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018fc4:	1aba      	subs	r2, r7, r2
 8018fc6:	f8ad a012 	strh.w	sl, [sp, #18]
 8018fca:	4631      	mov	r1, r6
 8018fcc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018fd0:	4640      	mov	r0, r8
 8018fd2:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018fd6:	69ea      	ldr	r2, [r5, #28]
 8018fd8:	f7ff ff3a 	bl	8018e50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018fdc:	8822      	ldrh	r2, [r4, #0]
 8018fde:	445f      	add	r7, fp
 8018fe0:	88a3      	ldrh	r3, [r4, #4]
 8018fe2:	b2bf      	uxth	r7, r7
 8018fe4:	4413      	add	r3, r2
 8018fe6:	b23a      	sxth	r2, r7
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	b219      	sxth	r1, r3
 8018fec:	4291      	cmp	r1, r2
 8018fee:	dd0d      	ble.n	801900c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8018ff0:	1bdb      	subs	r3, r3, r7
 8018ff2:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018ff6:	f8ad a012 	strh.w	sl, [sp, #18]
 8018ffa:	4631      	mov	r1, r6
 8018ffc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019000:	4640      	mov	r0, r8
 8019002:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019006:	69ea      	ldr	r2, [r5, #28]
 8019008:	f7ff ff22 	bl	8018e50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801900c:	88e2      	ldrh	r2, [r4, #6]
 801900e:	8863      	ldrh	r3, [r4, #2]
 8019010:	4413      	add	r3, r2
 8019012:	9a00      	ldr	r2, [sp, #0]
 8019014:	444a      	add	r2, r9
 8019016:	b29b      	uxth	r3, r3
 8019018:	fa1f f982 	uxth.w	r9, r2
 801901c:	b219      	sxth	r1, r3
 801901e:	fa0f f289 	sxth.w	r2, r9
 8019022:	428a      	cmp	r2, r1
 8019024:	da83      	bge.n	8018f2e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019026:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801902a:	eba3 0309 	sub.w	r3, r3, r9
 801902e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019032:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019036:	4631      	mov	r1, r6
 8019038:	f8ad 0010 	strh.w	r0, [sp, #16]
 801903c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019040:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019044:	69ea      	ldr	r2, [r5, #28]
 8019046:	e76f      	b.n	8018f28 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08019048 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801904a:	2300      	movs	r3, #0
 801904c:	aa02      	add	r2, sp, #8
 801904e:	4604      	mov	r4, r0
 8019050:	3004      	adds	r0, #4
 8019052:	f842 3d04 	str.w	r3, [r2, #-4]!
 8019056:	460d      	mov	r5, r1
 8019058:	f7fb fe7d 	bl	8014d56 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801905c:	9a01      	ldr	r2, [sp, #4]
 801905e:	b11a      	cbz	r2, 8019068 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8019060:	4629      	mov	r1, r5
 8019062:	4620      	mov	r0, r4
 8019064:	f7ff fef4 	bl	8018e50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019068:	b003      	add	sp, #12
 801906a:	bd30      	pop	{r4, r5, pc}

0801906c <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801906c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801906e:	4602      	mov	r2, r0
 8019070:	4604      	mov	r4, r0
 8019072:	460d      	mov	r5, r1
 8019074:	466b      	mov	r3, sp
 8019076:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801907a:	6851      	ldr	r1, [r2, #4]
 801907c:	c303      	stmia	r3!, {r0, r1}
 801907e:	4629      	mov	r1, r5
 8019080:	4668      	mov	r0, sp
 8019082:	f7fb fd91 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 8019086:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801908a:	4669      	mov	r1, sp
 801908c:	b123      	cbz	r3, 8019098 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801908e:	4620      	mov	r0, r4
 8019090:	f7ff ffda 	bl	8019048 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019094:	b003      	add	sp, #12
 8019096:	bd30      	pop	{r4, r5, pc}
 8019098:	1d20      	adds	r0, r4, #4
 801909a:	f7fb fe23 	bl	8014ce4 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801909e:	e7f9      	b.n	8019094 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

080190a0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80190a0:	460b      	mov	r3, r1
 80190a2:	680a      	ldr	r2, [r1, #0]
 80190a4:	1d01      	adds	r1, r0, #4
 80190a6:	6952      	ldr	r2, [r2, #20]
 80190a8:	4618      	mov	r0, r3
 80190aa:	4710      	bx	r2

080190ac <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 80190ac:	f011 0f40 	tst.w	r1, #64	; 0x40
 80190b0:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 80190b4:	4b03      	ldr	r3, [pc, #12]	; (80190c4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 80190b6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80190ba:	bf08      	it	eq
 80190bc:	2300      	moveq	r3, #0
 80190be:	4308      	orrs	r0, r1
 80190c0:	4318      	orrs	r0, r3
 80190c2:	4770      	bx	lr
 80190c4:	fffffe00 	.word	0xfffffe00

080190c8 <_ZN8touchgfx9GlyphNode6setTopEs>:
 80190c8:	7b43      	ldrb	r3, [r0, #13]
 80190ca:	7201      	strb	r1, [r0, #8]
 80190cc:	b289      	uxth	r1, r1
 80190ce:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80190d2:	05ca      	lsls	r2, r1, #23
 80190d4:	bf48      	it	mi
 80190d6:	f043 0320 	orrmi.w	r3, r3, #32
 80190da:	7343      	strb	r3, [r0, #13]
 80190dc:	058b      	lsls	r3, r1, #22
 80190de:	bf42      	ittt	mi
 80190e0:	7b43      	ldrbmi	r3, [r0, #13]
 80190e2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80190e6:	7343      	strbmi	r3, [r0, #13]
 80190e8:	4770      	bx	lr

080190ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80190ea:	b530      	push	{r4, r5, lr}
 80190ec:	2500      	movs	r5, #0
 80190ee:	2401      	movs	r4, #1
 80190f0:	6843      	ldr	r3, [r0, #4]
 80190f2:	b913      	cbnz	r3, 80190fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80190f4:	6803      	ldr	r3, [r0, #0]
 80190f6:	b1f3      	cbz	r3, 8019136 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80190f8:	6043      	str	r3, [r0, #4]
 80190fa:	7c03      	ldrb	r3, [r0, #16]
 80190fc:	b143      	cbz	r3, 8019110 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80190fe:	68c3      	ldr	r3, [r0, #12]
 8019100:	b12b      	cbz	r3, 801910e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019102:	881a      	ldrh	r2, [r3, #0]
 8019104:	b11a      	cbz	r2, 801910e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019106:	1c9a      	adds	r2, r3, #2
 8019108:	60c2      	str	r2, [r0, #12]
 801910a:	8818      	ldrh	r0, [r3, #0]
 801910c:	bd30      	pop	{r4, r5, pc}
 801910e:	7405      	strb	r5, [r0, #16]
 8019110:	6843      	ldr	r3, [r0, #4]
 8019112:	8819      	ldrh	r1, [r3, #0]
 8019114:	b179      	cbz	r1, 8019136 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019116:	1c9a      	adds	r2, r3, #2
 8019118:	2902      	cmp	r1, #2
 801911a:	6042      	str	r2, [r0, #4]
 801911c:	d1f5      	bne.n	801910a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801911e:	6883      	ldr	r3, [r0, #8]
 8019120:	1d1a      	adds	r2, r3, #4
 8019122:	6082      	str	r2, [r0, #8]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	60c3      	str	r3, [r0, #12]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d0e1      	beq.n	80190f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801912c:	881b      	ldrh	r3, [r3, #0]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d0de      	beq.n	80190f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019132:	7404      	strb	r4, [r0, #16]
 8019134:	e7dc      	b.n	80190f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019136:	2000      	movs	r0, #0
 8019138:	e7e8      	b.n	801910c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801913a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801913a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801913c:	4605      	mov	r5, r0
 801913e:	4608      	mov	r0, r1
 8019140:	b1f1      	cbz	r1, 8019180 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019142:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8019146:	460b      	mov	r3, r1
 8019148:	f101 0708 	add.w	r7, r1, #8
 801914c:	4622      	mov	r2, r4
 801914e:	6818      	ldr	r0, [r3, #0]
 8019150:	3308      	adds	r3, #8
 8019152:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019156:	4626      	mov	r6, r4
 8019158:	42bb      	cmp	r3, r7
 801915a:	c603      	stmia	r6!, {r0, r1}
 801915c:	4634      	mov	r4, r6
 801915e:	d1f6      	bne.n	801914e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019160:	6818      	ldr	r0, [r3, #0]
 8019162:	6030      	str	r0, [r6, #0]
 8019164:	4610      	mov	r0, r2
 8019166:	889b      	ldrh	r3, [r3, #4]
 8019168:	80b3      	strh	r3, [r6, #4]
 801916a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801916e:	015b      	lsls	r3, r3, #5
 8019170:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019174:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8019178:	430b      	orrs	r3, r1
 801917a:	425b      	negs	r3, r3
 801917c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8019180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019182 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019182:	b538      	push	{r3, r4, r5, lr}
 8019184:	460c      	mov	r4, r1
 8019186:	6811      	ldr	r1, [r2, #0]
 8019188:	4610      	mov	r0, r2
 801918a:	68cd      	ldr	r5, [r1, #12]
 801918c:	4619      	mov	r1, r3
 801918e:	47a8      	blx	r5
 8019190:	2800      	cmp	r0, #0
 8019192:	bf08      	it	eq
 8019194:	4620      	moveq	r0, r4
 8019196:	bd38      	pop	{r3, r4, r5, pc}

08019198 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019198:	b570      	push	{r4, r5, r6, lr}
 801919a:	8810      	ldrh	r0, [r2, #0]
 801919c:	4298      	cmp	r0, r3
 801919e:	d817      	bhi.n	80191d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80191a0:	1e48      	subs	r0, r1, #1
 80191a2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80191a6:	4298      	cmp	r0, r3
 80191a8:	d312      	bcc.n	80191d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80191aa:	2400      	movs	r4, #0
 80191ac:	428c      	cmp	r4, r1
 80191ae:	d20f      	bcs.n	80191d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80191b0:	1860      	adds	r0, r4, r1
 80191b2:	1040      	asrs	r0, r0, #1
 80191b4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80191b8:	0085      	lsls	r5, r0, #2
 80191ba:	42b3      	cmp	r3, r6
 80191bc:	d902      	bls.n	80191c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80191be:	3001      	adds	r0, #1
 80191c0:	b284      	uxth	r4, r0
 80191c2:	e7f3      	b.n	80191ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80191c4:	d102      	bne.n	80191cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 80191c6:	442a      	add	r2, r5
 80191c8:	8850      	ldrh	r0, [r2, #2]
 80191ca:	bd70      	pop	{r4, r5, r6, pc}
 80191cc:	b281      	uxth	r1, r0
 80191ce:	e7ed      	b.n	80191ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80191d0:	2000      	movs	r0, #0
 80191d2:	e7fa      	b.n	80191ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

080191d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 80191d4:	b510      	push	{r4, lr}
 80191d6:	8ac3      	ldrh	r3, [r0, #22]
 80191d8:	428b      	cmp	r3, r1
 80191da:	d805      	bhi.n	80191e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 80191dc:	4b07      	ldr	r3, [pc, #28]	; (80191fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 80191de:	21fd      	movs	r1, #253	; 0xfd
 80191e0:	4a07      	ldr	r2, [pc, #28]	; (8019200 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 80191e2:	4808      	ldr	r0, [pc, #32]	; (8019204 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 80191e4:	f00a fe40 	bl	8023e68 <__assert_func>
 80191e8:	8a83      	ldrh	r3, [r0, #20]
 80191ea:	240a      	movs	r4, #10
 80191ec:	4419      	add	r1, r3
 80191ee:	fbb1 f3f4 	udiv	r3, r1, r4
 80191f2:	fb04 1113 	mls	r1, r4, r3, r1
 80191f6:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 80191fa:	bd10      	pop	{r4, pc}
 80191fc:	08027991 	.word	0x08027991
 8019200:	08027dc0 	.word	0x08027dc0
 8019204:	0802799f 	.word	0x0802799f

08019208 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8019208:	b508      	push	{r3, lr}
 801920a:	8ac3      	ldrh	r3, [r0, #22]
 801920c:	428b      	cmp	r3, r1
 801920e:	d805      	bhi.n	801921c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8019210:	4b07      	ldr	r3, [pc, #28]	; (8019230 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8019212:	21d3      	movs	r1, #211	; 0xd3
 8019214:	4a07      	ldr	r2, [pc, #28]	; (8019234 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8019216:	4808      	ldr	r0, [pc, #32]	; (8019238 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8019218:	f00a fe26 	bl	8023e68 <__assert_func>
 801921c:	8a83      	ldrh	r3, [r0, #20]
 801921e:	220a      	movs	r2, #10
 8019220:	4419      	add	r1, r3
 8019222:	fbb1 f3f2 	udiv	r3, r1, r2
 8019226:	fb02 1113 	mls	r1, r2, r3, r1
 801922a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801922e:	bd08      	pop	{r3, pc}
 8019230:	08027991 	.word	0x08027991
 8019234:	08027b10 	.word	0x08027b10
 8019238:	0802799f 	.word	0x0802799f

0801923c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801923c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019240:	4604      	mov	r4, r0
 8019242:	4688      	mov	r8, r1
 8019244:	4615      	mov	r5, r2
 8019246:	b94a      	cbnz	r2, 801925c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8019248:	4691      	mov	r9, r2
 801924a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801924e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8019252:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8019256:	4648      	mov	r0, r9
 8019258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801925c:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8019260:	8892      	ldrh	r2, [r2, #4]
 8019262:	462b      	mov	r3, r5
 8019264:	f105 0c08 	add.w	ip, r5, #8
 8019268:	46b3      	mov	fp, r6
 801926a:	6818      	ldr	r0, [r3, #0]
 801926c:	3308      	adds	r3, #8
 801926e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019272:	4637      	mov	r7, r6
 8019274:	4563      	cmp	r3, ip
 8019276:	c703      	stmia	r7!, {r0, r1}
 8019278:	463e      	mov	r6, r7
 801927a:	d1f6      	bne.n	801926a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801927c:	6818      	ldr	r0, [r3, #0]
 801927e:	46d9      	mov	r9, fp
 8019280:	6038      	str	r0, [r7, #0]
 8019282:	889b      	ldrh	r3, [r3, #4]
 8019284:	80bb      	strh	r3, [r7, #4]
 8019286:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801928a:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801928e:	18d3      	adds	r3, r2, r3
 8019290:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8019294:	b298      	uxth	r0, r3
 8019296:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801929a:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801929e:	281d      	cmp	r0, #29
 80192a0:	ea4a 0a01 	orr.w	sl, sl, r1
 80192a4:	fa1f f68a 	uxth.w	r6, sl
 80192a8:	d842      	bhi.n	8019330 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 80192aa:	2301      	movs	r3, #1
 80192ac:	4950      	ldr	r1, [pc, #320]	; (80193f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 80192ae:	ea4f 0aea 	mov.w	sl, sl, asr #3
 80192b2:	4083      	lsls	r3, r0
 80192b4:	420b      	tst	r3, r1
 80192b6:	d114      	bne.n	80192e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80192b8:	f413 7f60 	tst.w	r3, #896	; 0x380
 80192bc:	d03c      	beq.n	8019338 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 80192be:	fa1f fa8a 	uxth.w	sl, sl
 80192c2:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80192c6:	4658      	mov	r0, fp
 80192c8:	eba1 010a 	sub.w	r1, r1, sl
 80192cc:	b209      	sxth	r1, r1
 80192ce:	f7ff fefb 	bl	80190c8 <_ZN8touchgfx9GlyphNode6setTopEs>
 80192d2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80192d6:	1b86      	subs	r6, r0, r6
 80192d8:	eba6 0a0a 	sub.w	sl, r6, sl
 80192dc:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 80192e0:	e7b9      	b.n	8019256 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80192e2:	2100      	movs	r1, #0
 80192e4:	f104 001a 	add.w	r0, r4, #26
 80192e8:	f7ff ff8e 	bl	8019208 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80192ec:	f640 6333 	movw	r3, #3635	; 0xe33
 80192f0:	4601      	mov	r1, r0
 80192f2:	4298      	cmp	r0, r3
 80192f4:	d10a      	bne.n	801930c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 80192f6:	f8d8 3000 	ldr.w	r3, [r8]
 80192fa:	4640      	mov	r0, r8
 80192fc:	68db      	ldr	r3, [r3, #12]
 80192fe:	4798      	blx	r3
 8019300:	7b41      	ldrb	r1, [r0, #13]
 8019302:	7a00      	ldrb	r0, [r0, #8]
 8019304:	f7ff fed2 	bl	80190ac <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019308:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801930c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8019310:	4658      	mov	r0, fp
 8019312:	4431      	add	r1, r6
 8019314:	4451      	add	r1, sl
 8019316:	b209      	sxth	r1, r1
 8019318:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801931c:	f7ff fed4 	bl	80190c8 <_ZN8touchgfx9GlyphNode6setTopEs>
 8019320:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019324:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8019328:	1a9b      	subs	r3, r3, r2
 801932a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801932e:	e792      	b.n	8019256 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019330:	f640 631b 	movw	r3, #3611	; 0xe1b
 8019334:	429a      	cmp	r2, r3
 8019336:	d005      	beq.n	8019344 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8019338:	f022 0302 	bic.w	r3, r2, #2
 801933c:	f640 611d 	movw	r1, #3613	; 0xe1d
 8019340:	428b      	cmp	r3, r1
 8019342:	d119      	bne.n	8019378 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 8019344:	1e53      	subs	r3, r2, #1
 8019346:	4629      	mov	r1, r5
 8019348:	4642      	mov	r2, r8
 801934a:	4620      	mov	r0, r4
 801934c:	b29b      	uxth	r3, r3
 801934e:	f7ff ff18 	bl	8019182 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019352:	7b41      	ldrb	r1, [r0, #13]
 8019354:	7a00      	ldrb	r0, [r0, #8]
 8019356:	f7ff fea9 	bl	80190ac <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801935a:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801935e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8019362:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019366:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801936a:	4313      	orrs	r3, r2
 801936c:	115a      	asrs	r2, r3, #5
 801936e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019372:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019376:	e02e      	b.n	80193d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8019378:	4639      	mov	r1, r7
 801937a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801937e:	f7ff fe95 	bl	80190ac <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8019382:	f640 6109 	movw	r1, #3593	; 0xe09
 8019386:	f022 0310 	bic.w	r3, r2, #16
 801938a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801938e:	428b      	cmp	r3, r1
 8019390:	d003      	beq.n	801939a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 8019392:	f640 6313 	movw	r3, #3603	; 0xe13
 8019396:	429a      	cmp	r2, r3
 8019398:	d127      	bne.n	80193ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801939a:	b27f      	sxtb	r7, r7
 801939c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80193a0:	4629      	mov	r1, r5
 80193a2:	4620      	mov	r0, r4
 80193a4:	f407 7780 	and.w	r7, r7, #256	; 0x100
 80193a8:	431f      	orrs	r7, r3
 80193aa:	f640 6313 	movw	r3, #3603	; 0xe13
 80193ae:	429a      	cmp	r2, r3
 80193b0:	bf14      	ite	ne
 80193b2:	f102 33ff 	addne.w	r3, r2, #4294967295
 80193b6:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80193ba:	4642      	mov	r2, r8
 80193bc:	bf18      	it	ne
 80193be:	b29b      	uxthne	r3, r3
 80193c0:	f7ff fedf 	bl	8019182 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80193c4:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80193c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80193cc:	7a83      	ldrb	r3, [r0, #10]
 80193ce:	4313      	orrs	r3, r2
 80193d0:	1aff      	subs	r7, r7, r3
 80193d2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 80193d6:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80193da:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80193de:	f7ff fe65 	bl	80190ac <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80193e2:	1b80      	subs	r0, r0, r6
 80193e4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 80193e8:	e735      	b.n	8019256 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80193ea:	2300      	movs	r3, #0
 80193ec:	e7c1      	b.n	8019372 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 80193ee:	bf00      	nop
 80193f0:	3fc00079 	.word	0x3fc00079

080193f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80193f4:	3a01      	subs	r2, #1
 80193f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193fa:	b292      	uxth	r2, r2
 80193fc:	460c      	mov	r4, r1
 80193fe:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019402:	42b2      	cmp	r2, r6
 8019404:	d018      	beq.n	8019438 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8019406:	8b01      	ldrh	r1, [r0, #24]
 8019408:	f834 5b02 	ldrh.w	r5, [r4], #2
 801940c:	4291      	cmp	r1, r2
 801940e:	d805      	bhi.n	801941c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 8019410:	4b13      	ldr	r3, [pc, #76]	; (8019460 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 8019412:	21d3      	movs	r1, #211	; 0xd3
 8019414:	4a13      	ldr	r2, [pc, #76]	; (8019464 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 8019416:	4814      	ldr	r0, [pc, #80]	; (8019468 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8019418:	f00a fd26 	bl	8023e68 <__assert_func>
 801941c:	8ac1      	ldrh	r1, [r0, #22]
 801941e:	4411      	add	r1, r2
 8019420:	3a01      	subs	r2, #1
 8019422:	f001 0101 	and.w	r1, r1, #1
 8019426:	b292      	uxth	r2, r2
 8019428:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801942c:	8a49      	ldrh	r1, [r1, #18]
 801942e:	428d      	cmp	r5, r1
 8019430:	d0e7      	beq.n	8019402 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 8019432:	2000      	movs	r0, #0
 8019434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019438:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801943c:	2600      	movs	r6, #0
 801943e:	f100 051a 	add.w	r5, r0, #26
 8019442:	441f      	add	r7, r3
 8019444:	b2b1      	uxth	r1, r6
 8019446:	42b9      	cmp	r1, r7
 8019448:	da08      	bge.n	801945c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801944a:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801944e:	4628      	mov	r0, r5
 8019450:	f7ff feda 	bl	8019208 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8019454:	3601      	adds	r6, #1
 8019456:	4540      	cmp	r0, r8
 8019458:	d0f4      	beq.n	8019444 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801945a:	e7ea      	b.n	8019432 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801945c:	2001      	movs	r0, #1
 801945e:	e7e9      	b.n	8019434 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8019460:	08027991 	.word	0x08027991
 8019464:	08027f20 	.word	0x08027f20
 8019468:	0802799f 	.word	0x0802799f

0801946c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801946c:	b538      	push	{r3, r4, r5, lr}
 801946e:	8ac3      	ldrh	r3, [r0, #22]
 8019470:	428b      	cmp	r3, r1
 8019472:	d205      	bcs.n	8019480 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8019474:	4b08      	ldr	r3, [pc, #32]	; (8019498 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8019476:	21d8      	movs	r1, #216	; 0xd8
 8019478:	4a08      	ldr	r2, [pc, #32]	; (801949c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801947a:	4809      	ldr	r0, [pc, #36]	; (80194a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801947c:	f00a fcf4 	bl	8023e68 <__assert_func>
 8019480:	8a82      	ldrh	r2, [r0, #20]
 8019482:	250a      	movs	r5, #10
 8019484:	1a5b      	subs	r3, r3, r1
 8019486:	440a      	add	r2, r1
 8019488:	82c3      	strh	r3, [r0, #22]
 801948a:	fbb2 f4f5 	udiv	r4, r2, r5
 801948e:	fb05 2214 	mls	r2, r5, r4, r2
 8019492:	8282      	strh	r2, [r0, #20]
 8019494:	bd38      	pop	{r3, r4, r5, pc}
 8019496:	bf00      	nop
 8019498:	08027985 	.word	0x08027985
 801949c:	08027d3c 	.word	0x08027d3c
 80194a0:	0802799f 	.word	0x0802799f

080194a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 80194a4:	b538      	push	{r3, r4, r5, lr}
 80194a6:	8ac3      	ldrh	r3, [r0, #22]
 80194a8:	2b09      	cmp	r3, #9
 80194aa:	d905      	bls.n	80194b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 80194ac:	4b08      	ldr	r3, [pc, #32]	; (80194d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 80194ae:	21f7      	movs	r1, #247	; 0xf7
 80194b0:	4a08      	ldr	r2, [pc, #32]	; (80194d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 80194b2:	4809      	ldr	r0, [pc, #36]	; (80194d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 80194b4:	f00a fcd8 	bl	8023e68 <__assert_func>
 80194b8:	8a82      	ldrh	r2, [r0, #20]
 80194ba:	250a      	movs	r5, #10
 80194bc:	441a      	add	r2, r3
 80194be:	3301      	adds	r3, #1
 80194c0:	fbb2 f4f5 	udiv	r4, r2, r5
 80194c4:	fb05 2214 	mls	r2, r5, r4, r2
 80194c8:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 80194cc:	82c3      	strh	r3, [r0, #22]
 80194ce:	bd38      	pop	{r3, r4, r5, pc}
 80194d0:	08027979 	.word	0x08027979
 80194d4:	08027c8d 	.word	0x08027c8d
 80194d8:	0802799f 	.word	0x0802799f

080194dc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80194dc:	b538      	push	{r3, r4, r5, lr}
 80194de:	4604      	mov	r4, r0
 80194e0:	f100 051a 	add.w	r5, r0, #26
 80194e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80194e6:	2b0a      	cmp	r3, #10
 80194e8:	d01c      	beq.n	8019524 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 80194ea:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80194ec:	b962      	cbnz	r2, 8019508 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80194ee:	f104 051a 	add.w	r5, r4, #26
 80194f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80194f4:	2b0a      	cmp	r3, #10
 80194f6:	d015      	beq.n	8019524 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 80194f8:	4620      	mov	r0, r4
 80194fa:	f7ff fdf6 	bl	80190ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80194fe:	4601      	mov	r1, r0
 8019500:	4628      	mov	r0, r5
 8019502:	f7ff ffcf 	bl	80194a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8019506:	e7f4      	b.n	80194f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8019508:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801950a:	3a01      	subs	r2, #1
 801950c:	4628      	mov	r0, r5
 801950e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8019512:	3301      	adds	r3, #1
 8019514:	f003 0301 	and.w	r3, r3, #1
 8019518:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801951a:	8722      	strh	r2, [r4, #56]	; 0x38
 801951c:	86e3      	strh	r3, [r4, #54]	; 0x36
 801951e:	f7ff ffc1 	bl	80194a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8019522:	e7df      	b.n	80194e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8019524:	bd38      	pop	{r3, r4, r5, pc}
	...

08019528 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8019528:	2300      	movs	r3, #0
 801952a:	b510      	push	{r4, lr}
 801952c:	6043      	str	r3, [r0, #4]
 801952e:	4604      	mov	r4, r0
 8019530:	60c3      	str	r3, [r0, #12]
 8019532:	7403      	strb	r3, [r0, #16]
 8019534:	8603      	strh	r3, [r0, #48]	; 0x30
 8019536:	8303      	strh	r3, [r0, #24]
 8019538:	8703      	strh	r3, [r0, #56]	; 0x38
 801953a:	f7ff ffcf 	bl	80194dc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801953e:	4a0a      	ldr	r2, [pc, #40]	; (8019568 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 8019540:	6813      	ldr	r3, [r2, #0]
 8019542:	4611      	mov	r1, r2
 8019544:	b913      	cbnz	r3, 801954c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8019546:	6852      	ldr	r2, [r2, #4]
 8019548:	07d0      	lsls	r0, r2, #31
 801954a:	d50b      	bpl.n	8019564 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801954c:	6849      	ldr	r1, [r1, #4]
 801954e:	104a      	asrs	r2, r1, #1
 8019550:	07c9      	lsls	r1, r1, #31
 8019552:	eb04 0002 	add.w	r0, r4, r2
 8019556:	bf48      	it	mi
 8019558:	58a2      	ldrmi	r2, [r4, r2]
 801955a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801955e:	bf48      	it	mi
 8019560:	58d3      	ldrmi	r3, [r2, r3]
 8019562:	4718      	bx	r3
 8019564:	bd10      	pop	{r4, pc}
 8019566:	bf00      	nop
 8019568:	2000861c 	.word	0x2000861c

0801956c <_ZN8touchgfx12TextProviderC1Ev>:
 801956c:	2300      	movs	r3, #0
 801956e:	2201      	movs	r2, #1
 8019570:	b510      	push	{r4, lr}
 8019572:	4604      	mov	r4, r0
 8019574:	60c3      	str	r3, [r0, #12]
 8019576:	7403      	strb	r3, [r0, #16]
 8019578:	82c3      	strh	r3, [r0, #22]
 801957a:	8303      	strh	r3, [r0, #24]
 801957c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801957e:	8603      	strh	r3, [r0, #48]	; 0x30
 8019580:	86c3      	strh	r3, [r0, #54]	; 0x36
 8019582:	8703      	strh	r3, [r0, #56]	; 0x38
 8019584:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019586:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801958a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801958e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8019592:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8019596:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801959a:	e9c0 3300 	strd	r3, r3, [r0]
 801959e:	f7ff ffc3 	bl	8019528 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80195a2:	4620      	mov	r0, r4
 80195a4:	bd10      	pop	{r4, pc}

080195a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80195a6:	b410      	push	{r4}
 80195a8:	6082      	str	r2, [r0, #8]
 80195aa:	6001      	str	r1, [r0, #0]
 80195ac:	63c3      	str	r3, [r0, #60]	; 0x3c
 80195ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195b2:	f7ff bfb9 	b.w	8019528 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

080195b8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 80195b8:	b508      	push	{r3, lr}
 80195ba:	88c2      	ldrh	r2, [r0, #6]
 80195bc:	440a      	add	r2, r1
 80195be:	2a02      	cmp	r2, #2
 80195c0:	dd05      	ble.n	80195ce <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 80195c2:	4b06      	ldr	r3, [pc, #24]	; (80195dc <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 80195c4:	21ec      	movs	r1, #236	; 0xec
 80195c6:	4a06      	ldr	r2, [pc, #24]	; (80195e0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 80195c8:	4806      	ldr	r0, [pc, #24]	; (80195e4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 80195ca:	f00a fc4d 	bl	8023e68 <__assert_func>
 80195ce:	8883      	ldrh	r3, [r0, #4]
 80195d0:	80c2      	strh	r2, [r0, #6]
 80195d2:	1a59      	subs	r1, r3, r1
 80195d4:	f001 0101 	and.w	r1, r1, #1
 80195d8:	8081      	strh	r1, [r0, #4]
 80195da:	bd08      	pop	{r3, pc}
 80195dc:	080279cb 	.word	0x080279cb
 80195e0:	08027e99 	.word	0x08027e99
 80195e4:	0802799f 	.word	0x0802799f

080195e8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 80195e8:	b508      	push	{r3, lr}
 80195ea:	88c3      	ldrh	r3, [r0, #6]
 80195ec:	428b      	cmp	r3, r1
 80195ee:	d805      	bhi.n	80195fc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 80195f0:	4b06      	ldr	r3, [pc, #24]	; (801960c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 80195f2:	21fd      	movs	r1, #253	; 0xfd
 80195f4:	4a06      	ldr	r2, [pc, #24]	; (8019610 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 80195f6:	4807      	ldr	r0, [pc, #28]	; (8019614 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 80195f8:	f00a fc36 	bl	8023e68 <__assert_func>
 80195fc:	8883      	ldrh	r3, [r0, #4]
 80195fe:	4419      	add	r1, r3
 8019600:	f001 0101 	and.w	r1, r1, #1
 8019604:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8019608:	bd08      	pop	{r3, pc}
 801960a:	bf00      	nop
 801960c:	08027991 	.word	0x08027991
 8019610:	08027ff1 	.word	0x08027ff1
 8019614:	0802799f 	.word	0x0802799f

08019618 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019618:	b570      	push	{r4, r5, r6, lr}
 801961a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801961c:	4604      	mov	r4, r0
 801961e:	b92a      	cbnz	r2, 801962c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8019620:	4b12      	ldr	r3, [pc, #72]	; (801966c <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8019622:	21de      	movs	r1, #222	; 0xde
 8019624:	4a12      	ldr	r2, [pc, #72]	; (8019670 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8019626:	4813      	ldr	r0, [pc, #76]	; (8019674 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8019628:	f00a fc1e 	bl	8023e68 <__assert_func>
 801962c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801962e:	260a      	movs	r6, #10
 8019630:	3a01      	subs	r2, #1
 8019632:	3412      	adds	r4, #18
 8019634:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8019638:	3301      	adds	r3, #1
 801963a:	8b4d      	ldrh	r5, [r1, #26]
 801963c:	8602      	strh	r2, [r0, #48]	; 0x30
 801963e:	fbb3 f1f6 	udiv	r1, r3, r6
 8019642:	fb06 3311 	mls	r3, r6, r1, r3
 8019646:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019648:	f7ff ff48 	bl	80194dc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801964c:	88e3      	ldrh	r3, [r4, #6]
 801964e:	2101      	movs	r1, #1
 8019650:	2b02      	cmp	r3, #2
 8019652:	bf04      	itt	eq
 8019654:	2301      	moveq	r3, #1
 8019656:	80e3      	strheq	r3, [r4, #6]
 8019658:	4620      	mov	r0, r4
 801965a:	f7ff ffad 	bl	80195b8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801965e:	4620      	mov	r0, r4
 8019660:	462a      	mov	r2, r5
 8019662:	2100      	movs	r1, #0
 8019664:	f7ff ffc0 	bl	80195e8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8019668:	4628      	mov	r0, r5
 801966a:	bd70      	pop	{r4, r5, r6, pc}
 801966c:	08027970 	.word	0x08027970
 8019670:	08027be2 	.word	0x08027be2
 8019674:	0802799f 	.word	0x0802799f

08019678 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019678:	428a      	cmp	r2, r1
 801967a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801967e:	4604      	mov	r4, r0
 8019680:	460e      	mov	r6, r1
 8019682:	4615      	mov	r5, r2
 8019684:	469a      	mov	sl, r3
 8019686:	d92b      	bls.n	80196e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8019688:	1a57      	subs	r7, r2, r1
 801968a:	f04f 0800 	mov.w	r8, #0
 801968e:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8019692:	f04f 0b0a 	mov.w	fp, #10
 8019696:	b2bf      	uxth	r7, r7
 8019698:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801969a:	b92b      	cbnz	r3, 80196a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801969c:	4b24      	ldr	r3, [pc, #144]	; (8019730 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801969e:	21e6      	movs	r1, #230	; 0xe6
 80196a0:	4a24      	ldr	r2, [pc, #144]	; (8019734 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 80196a2:	4825      	ldr	r0, [pc, #148]	; (8019738 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 80196a4:	f00a fbe0 	bl	8023e68 <__assert_func>
 80196a8:	3b01      	subs	r3, #1
 80196aa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80196ac:	2101      	movs	r1, #1
 80196ae:	4648      	mov	r0, r9
 80196b0:	b29b      	uxth	r3, r3
 80196b2:	f108 0801 	add.w	r8, r8, #1
 80196b6:	441a      	add	r2, r3
 80196b8:	8623      	strh	r3, [r4, #48]	; 0x30
 80196ba:	fbb2 f3fb 	udiv	r3, r2, fp
 80196be:	fb0b 2313 	mls	r3, fp, r3, r2
 80196c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80196c6:	8b5a      	ldrh	r2, [r3, #26]
 80196c8:	9201      	str	r2, [sp, #4]
 80196ca:	f7ff ff75 	bl	80195b8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 80196ce:	9a01      	ldr	r2, [sp, #4]
 80196d0:	2100      	movs	r1, #0
 80196d2:	4648      	mov	r0, r9
 80196d4:	f7ff ff88 	bl	80195e8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 80196d8:	fa1f f388 	uxth.w	r3, r8
 80196dc:	429f      	cmp	r7, r3
 80196de:	d8db      	bhi.n	8019698 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 80196e0:	f104 071a 	add.w	r7, r4, #26
 80196e4:	4631      	mov	r1, r6
 80196e6:	260a      	movs	r6, #10
 80196e8:	4638      	mov	r0, r7
 80196ea:	f7ff febf 	bl	801946c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 80196ee:	b1c5      	cbz	r5, 8019722 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80196f0:	3d01      	subs	r5, #1
 80196f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80196f4:	b2ad      	uxth	r5, r5
 80196f6:	2b09      	cmp	r3, #9
 80196f8:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 80196fc:	d903      	bls.n	8019706 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 80196fe:	4b0f      	ldr	r3, [pc, #60]	; (801973c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8019700:	21ec      	movs	r1, #236	; 0xec
 8019702:	4a0f      	ldr	r2, [pc, #60]	; (8019740 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8019704:	e7cd      	b.n	80196a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8019706:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8019708:	3301      	adds	r3, #1
 801970a:	3109      	adds	r1, #9
 801970c:	8623      	strh	r3, [r4, #48]	; 0x30
 801970e:	fbb1 f0f6 	udiv	r0, r1, r6
 8019712:	fb06 1110 	mls	r1, r6, r0, r1
 8019716:	4638      	mov	r0, r7
 8019718:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801971a:	2100      	movs	r1, #0
 801971c:	f7ff fd5a 	bl	80191d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019720:	e7e5      	b.n	80196ee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8019722:	4620      	mov	r0, r4
 8019724:	b003      	add	sp, #12
 8019726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801972a:	f7ff bed7 	b.w	80194dc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801972e:	bf00      	nop
 8019730:	08027970 	.word	0x08027970
 8019734:	08027a66 	.word	0x08027a66
 8019738:	0802799f 	.word	0x0802799f
 801973c:	080279cb 	.word	0x080279cb
 8019740:	080279de 	.word	0x080279de

08019744 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019748:	4605      	mov	r5, r0
 801974a:	4616      	mov	r6, r2
 801974c:	1c8c      	adds	r4, r1, #2
 801974e:	8809      	ldrh	r1, [r1, #0]
 8019750:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019754:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019758:	42b3      	cmp	r3, r6
 801975a:	d124      	bne.n	80197a6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801975c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019760:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019764:	f001 070f 	and.w	r7, r1, #15
 8019768:	4652      	mov	r2, sl
 801976a:	f8cd 8000 	str.w	r8, [sp]
 801976e:	464b      	mov	r3, r9
 8019770:	4621      	mov	r1, r4
 8019772:	4628      	mov	r0, r5
 8019774:	f7ff fe3e 	bl	80193f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019778:	4683      	mov	fp, r0
 801977a:	b168      	cbz	r0, 8019798 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801977c:	eb0a 0109 	add.w	r1, sl, r9
 8019780:	463a      	mov	r2, r7
 8019782:	4628      	mov	r0, r5
 8019784:	4441      	add	r1, r8
 8019786:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801978a:	4649      	mov	r1, r9
 801978c:	f7ff ff74 	bl	8019678 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019790:	4658      	mov	r0, fp
 8019792:	b003      	add	sp, #12
 8019794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019798:	eb07 010a 	add.w	r1, r7, sl
 801979c:	4449      	add	r1, r9
 801979e:	4441      	add	r1, r8
 80197a0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80197a4:	e7d2      	b.n	801974c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80197a6:	f04f 0b00 	mov.w	fp, #0
 80197aa:	e7f1      	b.n	8019790 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080197ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80197ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197b0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80197b2:	4604      	mov	r4, r0
 80197b4:	260b      	movs	r6, #11
 80197b6:	f100 091a 	add.w	r9, r0, #26
 80197ba:	886f      	ldrh	r7, [r5, #2]
 80197bc:	087f      	lsrs	r7, r7, #1
 80197be:	3e01      	subs	r6, #1
 80197c0:	d013      	beq.n	80197ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 80197c2:	2100      	movs	r1, #0
 80197c4:	4648      	mov	r0, r9
 80197c6:	f7ff fd1f 	bl	8019208 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80197ca:	462a      	mov	r2, r5
 80197cc:	4680      	mov	r8, r0
 80197ce:	4603      	mov	r3, r0
 80197d0:	4639      	mov	r1, r7
 80197d2:	4620      	mov	r0, r4
 80197d4:	f7ff fce0 	bl	8019198 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80197d8:	b138      	cbz	r0, 80197ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 80197da:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80197de:	4642      	mov	r2, r8
 80197e0:	4620      	mov	r0, r4
 80197e2:	f7ff ffaf 	bl	8019744 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80197e6:	2800      	cmp	r0, #0
 80197e8:	d1e9      	bne.n	80197be <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 80197ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080197f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 80197f0:	4b1e      	ldr	r3, [pc, #120]	; (801986c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80197f2:	b570      	push	{r4, r5, r6, lr}
 80197f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197f8:	4604      	mov	r4, r0
 80197fa:	f003 0501 	and.w	r5, r3, #1
 80197fe:	b902      	cbnz	r2, 8019802 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8019800:	b165      	cbz	r5, 801981c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 8019802:	105b      	asrs	r3, r3, #1
 8019804:	f104 061a 	add.w	r6, r4, #26
 8019808:	18e0      	adds	r0, r4, r3
 801980a:	b10d      	cbz	r5, 8019810 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801980c:	58e3      	ldr	r3, [r4, r3]
 801980e:	589a      	ldr	r2, [r3, r2]
 8019810:	4790      	blx	r2
 8019812:	2100      	movs	r1, #0
 8019814:	4602      	mov	r2, r0
 8019816:	4630      	mov	r0, r6
 8019818:	f7ff fcdc 	bl	80191d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801981c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801981e:	b303      	cbz	r3, 8019862 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019820:	f104 051a 	add.w	r5, r4, #26
 8019824:	2100      	movs	r1, #0
 8019826:	4628      	mov	r0, r5
 8019828:	f7ff fcee 	bl	8019208 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801982c:	b1c8      	cbz	r0, 8019862 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801982e:	4620      	mov	r0, r4
 8019830:	f7ff ffbc 	bl	80197ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8019834:	2101      	movs	r1, #1
 8019836:	4628      	mov	r0, r5
 8019838:	f7ff fce6 	bl	8019208 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801983c:	f640 133f 	movw	r3, #2367	; 0x93f
 8019840:	4606      	mov	r6, r0
 8019842:	4298      	cmp	r0, r3
 8019844:	d10d      	bne.n	8019862 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8019846:	2100      	movs	r1, #0
 8019848:	4628      	mov	r0, r5
 801984a:	f7ff fcdd 	bl	8019208 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801984e:	2101      	movs	r1, #1
 8019850:	4602      	mov	r2, r0
 8019852:	4628      	mov	r0, r5
 8019854:	f7ff fcbe 	bl	80191d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019858:	4632      	mov	r2, r6
 801985a:	2100      	movs	r1, #0
 801985c:	4628      	mov	r0, r5
 801985e:	f7ff fcb9 	bl	80191d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8019862:	4620      	mov	r0, r4
 8019864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019868:	f7ff bed6 	b.w	8019618 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801986c:	20008624 	.word	0x20008624

08019870 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019872:	4617      	mov	r7, r2
 8019874:	461e      	mov	r6, r3
 8019876:	4605      	mov	r5, r0
 8019878:	f7ff ffba 	bl	80197f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	4604      	mov	r4, r0
 8019880:	4601      	mov	r1, r0
 8019882:	4638      	mov	r0, r7
 8019884:	68db      	ldr	r3, [r3, #12]
 8019886:	4798      	blx	r3
 8019888:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801988c:	4602      	mov	r2, r0
 801988e:	6030      	str	r0, [r6, #0]
 8019890:	b29b      	uxth	r3, r3
 8019892:	2b7f      	cmp	r3, #127	; 0x7f
 8019894:	d813      	bhi.n	80198be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8019896:	4639      	mov	r1, r7
 8019898:	4628      	mov	r0, r5
 801989a:	f7ff fccf 	bl	801923c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801989e:	6030      	str	r0, [r6, #0]
 80198a0:	6833      	ldr	r3, [r6, #0]
 80198a2:	b143      	cbz	r3, 80198b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80198a4:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80198a8:	7a9b      	ldrb	r3, [r3, #10]
 80198aa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80198ae:	4313      	orrs	r3, r2
 80198b0:	bf0c      	ite	eq
 80198b2:	2301      	moveq	r3, #1
 80198b4:	2300      	movne	r3, #0
 80198b6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80198ba:	4620      	mov	r0, r4
 80198bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198be:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d0ec      	beq.n	80198a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80198c6:	f640 1302 	movw	r3, #2306	; 0x902
 80198ca:	429c      	cmp	r4, r3
 80198cc:	d1e8      	bne.n	80198a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80198ce:	4601      	mov	r1, r0
 80198d0:	4628      	mov	r0, r5
 80198d2:	f7ff fc32 	bl	801913a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80198d6:	e7e2      	b.n	801989e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

080198d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80198d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198dc:	4617      	mov	r7, r2
 80198de:	461e      	mov	r6, r3
 80198e0:	4605      	mov	r5, r0
 80198e2:	f7ff ff85 	bl	80197f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80198e6:	683b      	ldr	r3, [r7, #0]
 80198e8:	4604      	mov	r4, r0
 80198ea:	4601      	mov	r1, r0
 80198ec:	4638      	mov	r0, r7
 80198ee:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80198f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80198f6:	47c0      	blx	r8
 80198f8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 80198fc:	4602      	mov	r2, r0
 80198fe:	6030      	str	r0, [r6, #0]
 8019900:	b29b      	uxth	r3, r3
 8019902:	2b7f      	cmp	r3, #127	; 0x7f
 8019904:	d814      	bhi.n	8019930 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8019906:	4639      	mov	r1, r7
 8019908:	4628      	mov	r0, r5
 801990a:	f7ff fc97 	bl	801923c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801990e:	6030      	str	r0, [r6, #0]
 8019910:	6833      	ldr	r3, [r6, #0]
 8019912:	b143      	cbz	r3, 8019926 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019914:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8019918:	7a9b      	ldrb	r3, [r3, #10]
 801991a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801991e:	4313      	orrs	r3, r2
 8019920:	bf0c      	ite	eq
 8019922:	2301      	moveq	r3, #1
 8019924:	2300      	movne	r3, #0
 8019926:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801992a:	4620      	mov	r0, r4
 801992c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019930:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8019934:	2b00      	cmp	r3, #0
 8019936:	d0eb      	beq.n	8019910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8019938:	f640 1302 	movw	r3, #2306	; 0x902
 801993c:	429c      	cmp	r4, r3
 801993e:	d1e7      	bne.n	8019910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8019940:	4601      	mov	r1, r0
 8019942:	4628      	mov	r0, r5
 8019944:	f7ff fbf9 	bl	801913a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019948:	e7e1      	b.n	801990e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801994a <_ZN8touchgfx7Unicode6strlenEPKt>:
 801994a:	4602      	mov	r2, r0
 801994c:	b148      	cbz	r0, 8019962 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801994e:	2300      	movs	r3, #0
 8019950:	b298      	uxth	r0, r3
 8019952:	3301      	adds	r3, #1
 8019954:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019958:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801995c:	2900      	cmp	r1, #0
 801995e:	d1f7      	bne.n	8019950 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8019960:	4770      	bx	lr
 8019962:	4770      	bx	lr

08019964 <_ZN8touchgfx7Unicode6strlenEPKc>:
 8019964:	b140      	cbz	r0, 8019978 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 8019966:	4602      	mov	r2, r0
 8019968:	1a13      	subs	r3, r2, r0
 801996a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801996e:	b29b      	uxth	r3, r3
 8019970:	2900      	cmp	r1, #0
 8019972:	d1f9      	bne.n	8019968 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 8019974:	4618      	mov	r0, r3
 8019976:	4770      	bx	lr
 8019978:	4603      	mov	r3, r0
 801997a:	e7fb      	b.n	8019974 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801997c <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801997c:	b530      	push	{r4, r5, lr}
 801997e:	4604      	mov	r4, r0
 8019980:	b159      	cbz	r1, 801999a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8019982:	b148      	cbz	r0, 8019998 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8019984:	2300      	movs	r3, #0
 8019986:	b298      	uxth	r0, r3
 8019988:	4282      	cmp	r2, r0
 801998a:	d905      	bls.n	8019998 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801998c:	5ccd      	ldrb	r5, [r1, r3]
 801998e:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8019992:	3301      	adds	r3, #1
 8019994:	2d00      	cmp	r5, #0
 8019996:	d1f6      	bne.n	8019986 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8019998:	bd30      	pop	{r4, r5, pc}
 801999a:	4608      	mov	r0, r1
 801999c:	e7fc      	b.n	8019998 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801999e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801999e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199a0:	468c      	mov	ip, r1
 80199a2:	b08b      	sub	sp, #44	; 0x2c
 80199a4:	2100      	movs	r1, #0
 80199a6:	ae01      	add	r6, sp, #4
 80199a8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80199ac:	211f      	movs	r1, #31
 80199ae:	fbb0 f7f3 	udiv	r7, r0, r3
 80199b2:	fb03 0517 	mls	r5, r3, r7, r0
 80199b6:	4638      	mov	r0, r7
 80199b8:	b2ec      	uxtb	r4, r5
 80199ba:	2d09      	cmp	r5, #9
 80199bc:	bfd4      	ite	le
 80199be:	3430      	addle	r4, #48	; 0x30
 80199c0:	3457      	addgt	r4, #87	; 0x57
 80199c2:	b2e4      	uxtb	r4, r4
 80199c4:	558c      	strb	r4, [r1, r6]
 80199c6:	1e4c      	subs	r4, r1, #1
 80199c8:	b92f      	cbnz	r7, 80199d6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 80199ca:	4431      	add	r1, r6
 80199cc:	4660      	mov	r0, ip
 80199ce:	f7ff ffd5 	bl	801997c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80199d2:	b00b      	add	sp, #44	; 0x2c
 80199d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199d6:	4621      	mov	r1, r4
 80199d8:	e7e9      	b.n	80199ae <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

080199da <_ZN8touchgfx7Unicode4itoaElPtti>:
 80199da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199dc:	4607      	mov	r7, r0
 80199de:	b08b      	sub	sp, #44	; 0x2c
 80199e0:	4608      	mov	r0, r1
 80199e2:	b341      	cbz	r1, 8019a36 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80199e4:	1e99      	subs	r1, r3, #2
 80199e6:	290e      	cmp	r1, #14
 80199e8:	d825      	bhi.n	8019a36 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80199ea:	2100      	movs	r1, #0
 80199ec:	463c      	mov	r4, r7
 80199ee:	261f      	movs	r6, #31
 80199f0:	f10d 0c04 	add.w	ip, sp, #4
 80199f4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80199f8:	1e71      	subs	r1, r6, #1
 80199fa:	fb94 fef3 	sdiv	lr, r4, r3
 80199fe:	fb03 441e 	mls	r4, r3, lr, r4
 8019a02:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8019a06:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8019a0a:	b2ec      	uxtb	r4, r5
 8019a0c:	2d09      	cmp	r5, #9
 8019a0e:	bfd4      	ite	le
 8019a10:	3430      	addle	r4, #48	; 0x30
 8019a12:	3457      	addgt	r4, #87	; 0x57
 8019a14:	b2e4      	uxtb	r4, r4
 8019a16:	f80c 4006 	strb.w	r4, [ip, r6]
 8019a1a:	4674      	mov	r4, lr
 8019a1c:	b96c      	cbnz	r4, 8019a3a <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8019a1e:	2f00      	cmp	r7, #0
 8019a20:	da05      	bge.n	8019a2e <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8019a22:	ab0a      	add	r3, sp, #40	; 0x28
 8019a24:	4419      	add	r1, r3
 8019a26:	232d      	movs	r3, #45	; 0x2d
 8019a28:	f801 3c24 	strb.w	r3, [r1, #-36]
 8019a2c:	1eb1      	subs	r1, r6, #2
 8019a2e:	3101      	adds	r1, #1
 8019a30:	4461      	add	r1, ip
 8019a32:	f7ff ffa3 	bl	801997c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019a36:	b00b      	add	sp, #44	; 0x2c
 8019a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a3a:	460e      	mov	r6, r1
 8019a3c:	e7dc      	b.n	80199f8 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08019a3e <_ZN8touchgfx7Unicode4atoiEPKt>:
 8019a3e:	b510      	push	{r4, lr}
 8019a40:	b158      	cbz	r0, 8019a5a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8019a42:	1e82      	subs	r2, r0, #2
 8019a44:	210a      	movs	r1, #10
 8019a46:	2000      	movs	r0, #0
 8019a48:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019a4c:	3b30      	subs	r3, #48	; 0x30
 8019a4e:	b29c      	uxth	r4, r3
 8019a50:	2c09      	cmp	r4, #9
 8019a52:	d802      	bhi.n	8019a5a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8019a54:	fb01 3000 	mla	r0, r1, r0, r3
 8019a58:	e7f6      	b.n	8019a48 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 8019a5a:	bd10      	pop	{r4, pc}

08019a5c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 8019a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a60:	b085      	sub	sp, #20
 8019a62:	f8d0 8000 	ldr.w	r8, [r0]
 8019a66:	468a      	mov	sl, r1
 8019a68:	461c      	mov	r4, r3
 8019a6a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8019a6e:	4681      	mov	r9, r0
 8019a70:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019a74:	4640      	mov	r0, r8
 8019a76:	9203      	str	r2, [sp, #12]
 8019a78:	9102      	str	r1, [sp, #8]
 8019a7a:	9301      	str	r3, [sp, #4]
 8019a7c:	f7ff ff65 	bl	801994a <_ZN8touchgfx7Unicode6strlenEPKt>
 8019a80:	9a03      	ldr	r2, [sp, #12]
 8019a82:	f1ba 0f00 	cmp.w	sl, #0
 8019a86:	bf0c      	ite	eq
 8019a88:	4684      	moveq	ip, r0
 8019a8a:	f100 0c01 	addne.w	ip, r0, #1
 8019a8e:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8019a92:	8812      	ldrh	r2, [r2, #0]
 8019a94:	fa1f fc8c 	uxth.w	ip, ip
 8019a98:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019a9a:	2a69      	cmp	r2, #105	; 0x69
 8019a9c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019a9e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8019aa0:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8019aa4:	d004      	beq.n	8019ab0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8019aa6:	d844      	bhi.n	8019b32 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 8019aa8:	2a58      	cmp	r2, #88	; 0x58
 8019aaa:	d001      	beq.n	8019ab0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8019aac:	2a64      	cmp	r2, #100	; 0x64
 8019aae:	d14b      	bne.n	8019b48 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8019ab0:	b1a4      	cbz	r4, 8019adc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8019ab2:	b956      	cbnz	r6, 8019aca <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8019ab4:	2801      	cmp	r0, #1
 8019ab6:	d108      	bne.n	8019aca <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8019ab8:	f8b8 2000 	ldrh.w	r2, [r8]
 8019abc:	2a30      	cmp	r2, #48	; 0x30
 8019abe:	bf02      	ittt	eq
 8019ac0:	f108 0202 	addeq.w	r2, r8, #2
 8019ac4:	4630      	moveq	r0, r6
 8019ac6:	f8c9 2000 	streq.w	r2, [r9]
 8019aca:	45b4      	cmp	ip, r6
 8019acc:	da3e      	bge.n	8019b4c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 8019ace:	b2b6      	uxth	r6, r6
 8019ad0:	eba6 040c 	sub.w	r4, r6, ip
 8019ad4:	46b4      	mov	ip, r6
 8019ad6:	b2a4      	uxth	r4, r4
 8019ad8:	f04f 0b00 	mov.w	fp, #0
 8019adc:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8019ae0:	3a01      	subs	r2, #1
 8019ae2:	b169      	cbz	r1, 8019b00 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019ae4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019ae6:	458c      	cmp	ip, r1
 8019ae8:	da09      	bge.n	8019afe <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8019aea:	eba1 010c 	sub.w	r1, r1, ip
 8019aee:	b289      	uxth	r1, r1
 8019af0:	b933      	cbnz	r3, 8019b00 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019af2:	f1bb 0f00 	cmp.w	fp, #0
 8019af6:	d02b      	beq.n	8019b50 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8019af8:	b350      	cbz	r0, 8019b50 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8019afa:	440c      	add	r4, r1
 8019afc:	b2a4      	uxth	r4, r4
 8019afe:	2100      	movs	r1, #0
 8019b00:	682b      	ldr	r3, [r5, #0]
 8019b02:	4293      	cmp	r3, r2
 8019b04:	da07      	bge.n	8019b16 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8019b06:	f1ba 0f00 	cmp.w	sl, #0
 8019b0a:	d004      	beq.n	8019b16 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8019b0c:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 8019b10:	682b      	ldr	r3, [r5, #0]
 8019b12:	3301      	adds	r3, #1
 8019b14:	602b      	str	r3, [r5, #0]
 8019b16:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8019b1a:	b354      	cbz	r4, 8019b72 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8019b1c:	682e      	ldr	r6, [r5, #0]
 8019b1e:	3c01      	subs	r4, #1
 8019b20:	42b2      	cmp	r2, r6
 8019b22:	b2a4      	uxth	r4, r4
 8019b24:	dd25      	ble.n	8019b72 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8019b26:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8019b2a:	682b      	ldr	r3, [r5, #0]
 8019b2c:	3301      	adds	r3, #1
 8019b2e:	602b      	str	r3, [r5, #0]
 8019b30:	e7f3      	b.n	8019b1a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 8019b32:	2a73      	cmp	r2, #115	; 0x73
 8019b34:	d003      	beq.n	8019b3e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 8019b36:	2a78      	cmp	r2, #120	; 0x78
 8019b38:	d0ba      	beq.n	8019ab0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8019b3a:	2a6f      	cmp	r2, #111	; 0x6f
 8019b3c:	e7b7      	b.n	8019aae <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 8019b3e:	2c00      	cmp	r4, #0
 8019b40:	d0cc      	beq.n	8019adc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8019b42:	42b0      	cmp	r0, r6
 8019b44:	dd00      	ble.n	8019b48 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8019b46:	b2b0      	uxth	r0, r6
 8019b48:	2400      	movs	r4, #0
 8019b4a:	e7c7      	b.n	8019adc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8019b4c:	2400      	movs	r4, #0
 8019b4e:	e7c3      	b.n	8019ad8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 8019b50:	2900      	cmp	r1, #0
 8019b52:	d0d5      	beq.n	8019b00 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019b54:	f04f 0c20 	mov.w	ip, #32
 8019b58:	682e      	ldr	r6, [r5, #0]
 8019b5a:	2900      	cmp	r1, #0
 8019b5c:	d0d0      	beq.n	8019b00 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019b5e:	3901      	subs	r1, #1
 8019b60:	4296      	cmp	r6, r2
 8019b62:	b289      	uxth	r1, r1
 8019b64:	dacb      	bge.n	8019afe <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8019b66:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8019b6a:	682b      	ldr	r3, [r5, #0]
 8019b6c:	3301      	adds	r3, #1
 8019b6e:	602b      	str	r3, [r5, #0]
 8019b70:	e7f2      	b.n	8019b58 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 8019b72:	b198      	cbz	r0, 8019b9c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8019b74:	f8d9 3000 	ldr.w	r3, [r9]
 8019b78:	881c      	ldrh	r4, [r3, #0]
 8019b7a:	b17c      	cbz	r4, 8019b9c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8019b7c:	682c      	ldr	r4, [r5, #0]
 8019b7e:	3801      	subs	r0, #1
 8019b80:	42a2      	cmp	r2, r4
 8019b82:	b280      	uxth	r0, r0
 8019b84:	dd0a      	ble.n	8019b9c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8019b86:	1c9c      	adds	r4, r3, #2
 8019b88:	f8c9 4000 	str.w	r4, [r9]
 8019b8c:	881c      	ldrh	r4, [r3, #0]
 8019b8e:	682b      	ldr	r3, [r5, #0]
 8019b90:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 8019b94:	682b      	ldr	r3, [r5, #0]
 8019b96:	3301      	adds	r3, #1
 8019b98:	602b      	str	r3, [r5, #0]
 8019b9a:	e7ea      	b.n	8019b72 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8019b9c:	2620      	movs	r6, #32
 8019b9e:	b151      	cbz	r1, 8019bb6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 8019ba0:	6828      	ldr	r0, [r5, #0]
 8019ba2:	3901      	subs	r1, #1
 8019ba4:	4282      	cmp	r2, r0
 8019ba6:	b289      	uxth	r1, r1
 8019ba8:	dd05      	ble.n	8019bb6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 8019baa:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 8019bae:	682b      	ldr	r3, [r5, #0]
 8019bb0:	3301      	adds	r3, #1
 8019bb2:	602b      	str	r3, [r5, #0]
 8019bb4:	e7f3      	b.n	8019b9e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 8019bb6:	b005      	add	sp, #20
 8019bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019bbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 8019bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019bc2:	4604      	mov	r4, r0
 8019bc4:	f04f 0801 	mov.w	r8, #1
 8019bc8:	2000      	movs	r0, #0
 8019bca:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 8019bce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8019bd2:	8008      	strh	r0, [r1, #0]
 8019bd4:	7010      	strb	r0, [r2, #0]
 8019bd6:	7018      	strb	r0, [r3, #0]
 8019bd8:	f88c 0000 	strb.w	r0, [ip]
 8019bdc:	f88e 0000 	strb.w	r0, [lr]
 8019be0:	7030      	strb	r0, [r6, #0]
 8019be2:	6820      	ldr	r0, [r4, #0]
 8019be4:	8800      	ldrh	r0, [r0, #0]
 8019be6:	b190      	cbz	r0, 8019c0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8019be8:	282b      	cmp	r0, #43	; 0x2b
 8019bea:	d001      	beq.n	8019bf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 8019bec:	2820      	cmp	r0, #32
 8019bee:	d104      	bne.n	8019bfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 8019bf0:	8008      	strh	r0, [r1, #0]
 8019bf2:	6820      	ldr	r0, [r4, #0]
 8019bf4:	3002      	adds	r0, #2
 8019bf6:	6020      	str	r0, [r4, #0]
 8019bf8:	e7f3      	b.n	8019be2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 8019bfa:	282d      	cmp	r0, #45	; 0x2d
 8019bfc:	d102      	bne.n	8019c04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 8019bfe:	f882 8000 	strb.w	r8, [r2]
 8019c02:	e7f6      	b.n	8019bf2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8019c04:	2823      	cmp	r0, #35	; 0x23
 8019c06:	d102      	bne.n	8019c0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8019c08:	f883 8000 	strb.w	r8, [r3]
 8019c0c:	e7f1      	b.n	8019bf2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8019c0e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019c12:	2b09      	cmp	r3, #9
 8019c14:	d901      	bls.n	8019c1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 8019c16:	282a      	cmp	r0, #42	; 0x2a
 8019c18:	d114      	bne.n	8019c44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8019c1a:	2201      	movs	r2, #1
 8019c1c:	f88e 2000 	strb.w	r2, [lr]
 8019c20:	6823      	ldr	r3, [r4, #0]
 8019c22:	8819      	ldrh	r1, [r3, #0]
 8019c24:	2930      	cmp	r1, #48	; 0x30
 8019c26:	bf02      	ittt	eq
 8019c28:	3302      	addeq	r3, #2
 8019c2a:	6023      	streq	r3, [r4, #0]
 8019c2c:	f88c 2000 	strbeq.w	r2, [ip]
 8019c30:	6820      	ldr	r0, [r4, #0]
 8019c32:	8803      	ldrh	r3, [r0, #0]
 8019c34:	2b2a      	cmp	r3, #42	; 0x2a
 8019c36:	d11e      	bne.n	8019c76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 8019c38:	f04f 33ff 	mov.w	r3, #4294967295
 8019c3c:	603b      	str	r3, [r7, #0]
 8019c3e:	6823      	ldr	r3, [r4, #0]
 8019c40:	3302      	adds	r3, #2
 8019c42:	6023      	str	r3, [r4, #0]
 8019c44:	6823      	ldr	r3, [r4, #0]
 8019c46:	881b      	ldrh	r3, [r3, #0]
 8019c48:	2b2e      	cmp	r3, #46	; 0x2e
 8019c4a:	d112      	bne.n	8019c72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 8019c4c:	2301      	movs	r3, #1
 8019c4e:	7033      	strb	r3, [r6, #0]
 8019c50:	6823      	ldr	r3, [r4, #0]
 8019c52:	1c98      	adds	r0, r3, #2
 8019c54:	6020      	str	r0, [r4, #0]
 8019c56:	885b      	ldrh	r3, [r3, #2]
 8019c58:	2b2a      	cmp	r3, #42	; 0x2a
 8019c5a:	d117      	bne.n	8019c8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 8019c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8019c60:	602b      	str	r3, [r5, #0]
 8019c62:	6823      	ldr	r3, [r4, #0]
 8019c64:	3302      	adds	r3, #2
 8019c66:	6023      	str	r3, [r4, #0]
 8019c68:	682b      	ldr	r3, [r5, #0]
 8019c6a:	2b06      	cmp	r3, #6
 8019c6c:	bfa8      	it	ge
 8019c6e:	2306      	movge	r3, #6
 8019c70:	602b      	str	r3, [r5, #0]
 8019c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c76:	f7ff fee2 	bl	8019a3e <_ZN8touchgfx7Unicode4atoiEPKt>
 8019c7a:	6038      	str	r0, [r7, #0]
 8019c7c:	6823      	ldr	r3, [r4, #0]
 8019c7e:	881a      	ldrh	r2, [r3, #0]
 8019c80:	3a30      	subs	r2, #48	; 0x30
 8019c82:	2a09      	cmp	r2, #9
 8019c84:	d8de      	bhi.n	8019c44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8019c86:	3302      	adds	r3, #2
 8019c88:	6023      	str	r3, [r4, #0]
 8019c8a:	e7f7      	b.n	8019c7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 8019c8c:	f7ff fed7 	bl	8019a3e <_ZN8touchgfx7Unicode4atoiEPKt>
 8019c90:	6028      	str	r0, [r5, #0]
 8019c92:	6823      	ldr	r3, [r4, #0]
 8019c94:	881a      	ldrh	r2, [r3, #0]
 8019c96:	3a30      	subs	r2, #48	; 0x30
 8019c98:	2a09      	cmp	r2, #9
 8019c9a:	d8e5      	bhi.n	8019c68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 8019c9c:	3302      	adds	r3, #2
 8019c9e:	6023      	str	r3, [r4, #0]
 8019ca0:	e7f7      	b.n	8019c92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

08019ca2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 8019ca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ca6:	b0a2      	sub	sp, #136	; 0x88
 8019ca8:	2500      	movs	r5, #0
 8019caa:	4606      	mov	r6, r0
 8019cac:	460f      	mov	r7, r1
 8019cae:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8019cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8019cb4:	4629      	mov	r1, r5
 8019cb6:	2242      	movs	r2, #66	; 0x42
 8019cb8:	4640      	mov	r0, r8
 8019cba:	461c      	mov	r4, r3
 8019cbc:	950d      	str	r5, [sp, #52]	; 0x34
 8019cbe:	f7fe fe26 	bl	801890e <_ZN8touchgfx6memsetEPvhm>
 8019cc2:	b30e      	cbz	r6, 8019d08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8019cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cc6:	b1f3      	cbz	r3, 8019d06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 8019cc8:	f107 3aff 	add.w	sl, r7, #4294967295
 8019ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019cd0:	8812      	ldrh	r2, [r2, #0]
 8019cd2:	2a00      	cmp	r2, #0
 8019cd4:	f000 80b3 	beq.w	8019e3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 8019cd8:	459a      	cmp	sl, r3
 8019cda:	f340 80b0 	ble.w	8019e3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 8019cde:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ce4:	f8b9 2000 	ldrh.w	r2, [r9]
 8019ce8:	2a00      	cmp	r2, #0
 8019cea:	d0ef      	beq.n	8019ccc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8019cec:	2a25      	cmp	r2, #37	; 0x25
 8019cee:	f000 80aa 	beq.w	8019e46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 8019cf2:	459a      	cmp	sl, r3
 8019cf4:	ddea      	ble.n	8019ccc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8019cf6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019cfa:	f109 0202 	add.w	r2, r9, #2
 8019cfe:	3301      	adds	r3, #1
 8019d00:	9209      	str	r2, [sp, #36]	; 0x24
 8019d02:	930d      	str	r3, [sp, #52]	; 0x34
 8019d04:	e7eb      	b.n	8019cde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 8019d06:	8033      	strh	r3, [r6, #0]
 8019d08:	4630      	mov	r0, r6
 8019d0a:	b022      	add	sp, #136	; 0x88
 8019d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d10:	3b63      	subs	r3, #99	; 0x63
 8019d12:	2b01      	cmp	r3, #1
 8019d14:	f200 80df 	bhi.w	8019ed6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 8019d18:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8019d1c:	8813      	ldrh	r3, [r2, #0]
 8019d1e:	2b69      	cmp	r3, #105	; 0x69
 8019d20:	d058      	beq.n	8019dd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 8019d22:	d81b      	bhi.n	8019d5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 8019d24:	2b63      	cmp	r3, #99	; 0x63
 8019d26:	d02e      	beq.n	8019d86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 8019d28:	2b64      	cmp	r3, #100	; 0x64
 8019d2a:	d053      	beq.n	8019dd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 8019d2c:	2b58      	cmp	r3, #88	; 0x58
 8019d2e:	d06f      	beq.n	8019e10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 8019d30:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8019d34:	46a1      	mov	r9, r4
 8019d36:	e02d      	b.n	8019d94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019d38:	2b73      	cmp	r3, #115	; 0x73
 8019d3a:	d0ed      	beq.n	8019d18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8019d3c:	d803      	bhi.n	8019d46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 8019d3e:	2b6f      	cmp	r3, #111	; 0x6f
 8019d40:	f040 80c9 	bne.w	8019ed6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 8019d44:	e7e8      	b.n	8019d18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8019d46:	2b75      	cmp	r3, #117	; 0x75
 8019d48:	d0e6      	beq.n	8019d18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8019d4a:	2b78      	cmp	r3, #120	; 0x78
 8019d4c:	e7f8      	b.n	8019d40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 8019d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019d50:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8019d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d56:	3302      	adds	r3, #2
 8019d58:	9309      	str	r3, [sp, #36]	; 0x24
 8019d5a:	e7b7      	b.n	8019ccc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8019d5c:	2b73      	cmp	r3, #115	; 0x73
 8019d5e:	d034      	beq.n	8019dca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 8019d60:	d807      	bhi.n	8019d72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 8019d62:	2b6f      	cmp	r3, #111	; 0x6f
 8019d64:	d1e4      	bne.n	8019d30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 8019d66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019d68:	f104 0904 	add.w	r9, r4, #4
 8019d6c:	2308      	movs	r3, #8
 8019d6e:	1aba      	subs	r2, r7, r2
 8019d70:	e048      	b.n	8019e04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 8019d72:	2b75      	cmp	r3, #117	; 0x75
 8019d74:	d041      	beq.n	8019dfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 8019d76:	2b78      	cmp	r3, #120	; 0x78
 8019d78:	d1da      	bne.n	8019d30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 8019d7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019d7c:	f104 0904 	add.w	r9, r4, #4
 8019d80:	2310      	movs	r3, #16
 8019d82:	1aba      	subs	r2, r7, r2
 8019d84:	e03e      	b.n	8019e04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 8019d86:	7823      	ldrb	r3, [r4, #0]
 8019d88:	f104 0904 	add.w	r9, r4, #4
 8019d8c:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8019d90:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8019d94:	aa0d      	add	r2, sp, #52	; 0x34
 8019d96:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8019d9a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8019d9e:	a810      	add	r0, sp, #64	; 0x40
 8019da0:	9205      	str	r2, [sp, #20]
 8019da2:	464c      	mov	r4, r9
 8019da4:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8019da8:	9204      	str	r2, [sp, #16]
 8019daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019dac:	9203      	str	r2, [sp, #12]
 8019dae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8019db2:	9202      	str	r2, [sp, #8]
 8019db4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019db6:	9201      	str	r2, [sp, #4]
 8019db8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8019dbc:	e9cd 7606 	strd	r7, r6, [sp, #24]
 8019dc0:	9200      	str	r2, [sp, #0]
 8019dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019dc4:	f7ff fe4a 	bl	8019a5c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8019dc8:	e7c4      	b.n	8019d54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 8019dca:	f104 0904 	add.w	r9, r4, #4
 8019dce:	6823      	ldr	r3, [r4, #0]
 8019dd0:	9310      	str	r3, [sp, #64]	; 0x40
 8019dd2:	e7df      	b.n	8019d94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019dd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019dd6:	230a      	movs	r3, #10
 8019dd8:	4641      	mov	r1, r8
 8019dda:	6820      	ldr	r0, [r4, #0]
 8019ddc:	1aba      	subs	r2, r7, r2
 8019dde:	f104 0904 	add.w	r9, r4, #4
 8019de2:	b292      	uxth	r2, r2
 8019de4:	f7ff fdf9 	bl	80199da <_ZN8touchgfx7Unicode4itoaElPtti>
 8019de8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019dec:	2b2d      	cmp	r3, #45	; 0x2d
 8019dee:	d1d1      	bne.n	8019d94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019df0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019df6:	3302      	adds	r3, #2
 8019df8:	e7ea      	b.n	8019dd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 8019dfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019dfc:	f104 0904 	add.w	r9, r4, #4
 8019e00:	230a      	movs	r3, #10
 8019e02:	1aba      	subs	r2, r7, r2
 8019e04:	b292      	uxth	r2, r2
 8019e06:	4641      	mov	r1, r8
 8019e08:	6820      	ldr	r0, [r4, #0]
 8019e0a:	f7ff fdc8 	bl	801999e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8019e0e:	e7c1      	b.n	8019d94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019e12:	2310      	movs	r3, #16
 8019e14:	4641      	mov	r1, r8
 8019e16:	6820      	ldr	r0, [r4, #0]
 8019e18:	1aba      	subs	r2, r7, r2
 8019e1a:	f104 0904 	add.w	r9, r4, #4
 8019e1e:	b292      	uxth	r2, r2
 8019e20:	f7ff fdbd 	bl	801999e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8019e24:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8019e28:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d0b1      	beq.n	8019d94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019e30:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8019e34:	2919      	cmp	r1, #25
 8019e36:	d8f7      	bhi.n	8019e28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8019e38:	3b20      	subs	r3, #32
 8019e3a:	8013      	strh	r3, [r2, #0]
 8019e3c:	e7f4      	b.n	8019e28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8019e3e:	2200      	movs	r2, #0
 8019e40:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019e44:	e760      	b.n	8019d08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8019e46:	459a      	cmp	sl, r3
 8019e48:	f77f af40 	ble.w	8019ccc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8019e4c:	f109 0302 	add.w	r3, r9, #2
 8019e50:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8019e54:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8019e58:	a809      	add	r0, sp, #36	; 0x24
 8019e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8019e5c:	ab0f      	add	r3, sp, #60	; 0x3c
 8019e5e:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 8019e62:	9304      	str	r3, [sp, #16]
 8019e64:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8019e68:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 8019e6c:	9303      	str	r3, [sp, #12]
 8019e6e:	ab0e      	add	r3, sp, #56	; 0x38
 8019e70:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 8019e74:	9302      	str	r3, [sp, #8]
 8019e76:	ab0c      	add	r3, sp, #48	; 0x30
 8019e78:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8019e7c:	9301      	str	r3, [sp, #4]
 8019e7e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8019e82:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 8019e86:	9300      	str	r3, [sp, #0]
 8019e88:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8019e8c:	950e      	str	r5, [sp, #56]	; 0x38
 8019e8e:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 8019e92:	950f      	str	r5, [sp, #60]	; 0x3c
 8019e94:	f7ff fe92 	bl	8019bbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8019e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	bfbf      	itttt	lt
 8019ea0:	6823      	ldrlt	r3, [r4, #0]
 8019ea2:	3404      	addlt	r4, #4
 8019ea4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019ea8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	bfbf      	itttt	lt
 8019eb0:	6823      	ldrlt	r3, [r4, #0]
 8019eb2:	3404      	addlt	r4, #4
 8019eb4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019eb8:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8019eba:	8813      	ldrh	r3, [r2, #0]
 8019ebc:	2b69      	cmp	r3, #105	; 0x69
 8019ebe:	f43f af2b 	beq.w	8019d18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8019ec2:	f63f af39 	bhi.w	8019d38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 8019ec6:	2b58      	cmp	r3, #88	; 0x58
 8019ec8:	f43f af26 	beq.w	8019d18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8019ecc:	f63f af20 	bhi.w	8019d10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 8019ed0:	2b25      	cmp	r3, #37	; 0x25
 8019ed2:	f43f af3c 	beq.w	8019d4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 8019ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ed8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8019edc:	f8b9 2000 	ldrh.w	r2, [r9]
 8019ee0:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019ee4:	3301      	adds	r3, #1
 8019ee6:	930d      	str	r3, [sp, #52]	; 0x34
 8019ee8:	e734      	b.n	8019d54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

08019eec <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8019eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019eee:	4605      	mov	r5, r0
 8019ef0:	b0a1      	sub	sp, #132	; 0x84
 8019ef2:	4610      	mov	r0, r2
 8019ef4:	460e      	mov	r6, r1
 8019ef6:	4614      	mov	r4, r2
 8019ef8:	461f      	mov	r7, r3
 8019efa:	f7ff fd33 	bl	8019964 <_ZN8touchgfx7Unicode6strlenEPKc>
 8019efe:	283f      	cmp	r0, #63	; 0x3f
 8019f00:	d906      	bls.n	8019f10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 8019f02:	4b0a      	ldr	r3, [pc, #40]	; (8019f2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 8019f04:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8019f08:	4a09      	ldr	r2, [pc, #36]	; (8019f30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8019f0a:	480a      	ldr	r0, [pc, #40]	; (8019f34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8019f0c:	f009 ffac 	bl	8023e68 <__assert_func>
 8019f10:	4621      	mov	r1, r4
 8019f12:	2240      	movs	r2, #64	; 0x40
 8019f14:	4668      	mov	r0, sp
 8019f16:	f7ff fd31 	bl	801997c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019f1a:	463b      	mov	r3, r7
 8019f1c:	466a      	mov	r2, sp
 8019f1e:	4631      	mov	r1, r6
 8019f20:	4628      	mov	r0, r5
 8019f22:	f7ff febe 	bl	8019ca2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 8019f26:	b021      	add	sp, #132	; 0x84
 8019f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f2a:	bf00      	nop
 8019f2c:	080280c9 	.word	0x080280c9
 8019f30:	0802819b 	.word	0x0802819b
 8019f34:	080280e6 	.word	0x080280e6

08019f38 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019f38:	b40c      	push	{r2, r3}
 8019f3a:	b507      	push	{r0, r1, r2, lr}
 8019f3c:	ab04      	add	r3, sp, #16
 8019f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f42:	9301      	str	r3, [sp, #4]
 8019f44:	f7ff ffd2 	bl	8019eec <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8019f48:	b003      	add	sp, #12
 8019f4a:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f4e:	b002      	add	sp, #8
 8019f50:	4770      	bx	lr
	...

08019f54 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 8019f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f58:	b0c3      	sub	sp, #268	; 0x10c
 8019f5a:	2400      	movs	r4, #0
 8019f5c:	4606      	mov	r6, r0
 8019f5e:	4689      	mov	r9, r1
 8019f60:	af10      	add	r7, sp, #64	; 0x40
 8019f62:	9209      	str	r2, [sp, #36]	; 0x24
 8019f64:	4621      	mov	r1, r4
 8019f66:	22c8      	movs	r2, #200	; 0xc8
 8019f68:	4638      	mov	r0, r7
 8019f6a:	469a      	mov	sl, r3
 8019f6c:	940c      	str	r4, [sp, #48]	; 0x30
 8019f6e:	f7fe fcce 	bl	801890e <_ZN8touchgfx6memsetEPvhm>
 8019f72:	b116      	cbz	r6, 8019f7a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 8019f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f76:	b923      	cbnz	r3, 8019f82 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 8019f78:	8033      	strh	r3, [r6, #0]
 8019f7a:	4630      	mov	r0, r6
 8019f7c:	b043      	add	sp, #268	; 0x10c
 8019f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f82:	f109 3bff 	add.w	fp, r9, #4294967295
 8019f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f8a:	8812      	ldrh	r2, [r2, #0]
 8019f8c:	2a00      	cmp	r2, #0
 8019f8e:	f000 80d1 	beq.w	801a134 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 8019f92:	459b      	cmp	fp, r3
 8019f94:	f340 80ce 	ble.w	801a134 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 8019f98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f9c:	882a      	ldrh	r2, [r5, #0]
 8019f9e:	2a00      	cmp	r2, #0
 8019fa0:	d0f1      	beq.n	8019f86 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8019fa2:	2a25      	cmp	r2, #37	; 0x25
 8019fa4:	f000 80ca 	beq.w	801a13c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 8019fa8:	459b      	cmp	fp, r3
 8019faa:	ddec      	ble.n	8019f86 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8019fac:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019fb0:	3502      	adds	r5, #2
 8019fb2:	3301      	adds	r3, #1
 8019fb4:	9509      	str	r5, [sp, #36]	; 0x24
 8019fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8019fb8:	e7ee      	b.n	8019f98 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 8019fba:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8019fbe:	3202      	adds	r2, #2
 8019fc0:	920c      	str	r2, [sp, #48]	; 0x30
 8019fc2:	e0ac      	b.n	801a11e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 8019fc4:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8019fc8:	970f      	str	r7, [sp, #60]	; 0x3c
 8019fca:	3401      	adds	r4, #1
 8019fcc:	edd3 7a00 	vldr	s15, [r3]
 8019fd0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8019fd4:	b923      	cbnz	r3, 8019fe0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 8019fd6:	2301      	movs	r3, #1
 8019fd8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8019fdc:	2303      	movs	r3, #3
 8019fde:	930e      	str	r3, [sp, #56]	; 0x38
 8019fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019fe4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019fe6:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8019fea:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801a1e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 8019fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ff2:	bf42      	ittt	mi
 8019ff4:	232d      	movmi	r3, #45	; 0x2d
 8019ff6:	eef1 7a67 	vnegmi.f32	s15, s15
 8019ffa:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 8019ffe:	2300      	movs	r3, #0
 801a000:	4298      	cmp	r0, r3
 801a002:	dd03      	ble.n	801a00c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801a004:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801a008:	3301      	adds	r3, #1
 801a00a:	e7f9      	b.n	801a000 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801a00c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a014:	eeb0 7a67 	vmov.f32	s14, s15
 801a018:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801a01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a020:	da26      	bge.n	801a070 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801a022:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801a026:	eba9 0202 	sub.w	r2, r9, r2
 801a02a:	2100      	movs	r1, #0
 801a02c:	eef4 6ae5 	vcmpe.f32	s13, s11
 801a030:	b28d      	uxth	r5, r1
 801a032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a036:	db21      	blt.n	801a07c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801a038:	1a53      	subs	r3, r2, r1
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	dd1e      	ble.n	801a07c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801a03e:	2963      	cmp	r1, #99	; 0x63
 801a040:	d01b      	beq.n	801a07a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801a042:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a046:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801a04a:	ee17 3a10 	vmov	r3, s14
 801a04e:	2b09      	cmp	r3, #9
 801a050:	bfa8      	it	ge
 801a052:	2309      	movge	r3, #9
 801a054:	ee07 3a10 	vmov	s14, r3
 801a058:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801a05c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a060:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801a064:	3101      	adds	r1, #1
 801a066:	eee7 7a66 	vfms.f32	s15, s14, s13
 801a06a:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801a06e:	e7dd      	b.n	801a02c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801a070:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a074:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801a078:	e7ce      	b.n	801a018 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801a07a:	460d      	mov	r5, r1
 801a07c:	2a63      	cmp	r2, #99	; 0x63
 801a07e:	bfd4      	ite	le
 801a080:	ebc5 0202 	rsble	r2, r5, r2
 801a084:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801a088:	2a00      	cmp	r2, #0
 801a08a:	dd4e      	ble.n	801a12a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801a08c:	4603      	mov	r3, r0
 801a08e:	f04f 0801 	mov.w	r8, #1
 801a092:	2b00      	cmp	r3, #0
 801a094:	dd0e      	ble.n	801a0b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801a096:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a09a:	210a      	movs	r1, #10
 801a09c:	3b01      	subs	r3, #1
 801a09e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a0a2:	ee17 ca10 	vmov	ip, s14
 801a0a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a0aa:	fb01 c808 	mla	r8, r1, r8, ip
 801a0ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0b2:	e7ee      	b.n	801a092 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801a0b4:	2800      	cmp	r0, #0
 801a0b6:	f100 33ff 	add.w	r3, r0, #4294967295
 801a0ba:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801a0be:	bfac      	ite	ge
 801a0c0:	1a18      	subge	r0, r3, r0
 801a0c2:	4618      	movlt	r0, r3
 801a0c4:	b292      	uxth	r2, r2
 801a0c6:	230a      	movs	r3, #10
 801a0c8:	900e      	str	r0, [sp, #56]	; 0x38
 801a0ca:	1979      	adds	r1, r7, r5
 801a0cc:	4640      	mov	r0, r8
 801a0ce:	f7ff fc84 	bl	80199da <_ZN8touchgfx7Unicode4itoaElPtti>
 801a0d2:	f1b8 0f01 	cmp.w	r8, #1
 801a0d6:	dc26      	bgt.n	801a126 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801a0d8:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	bf0c      	ite	eq
 801a0e0:	2300      	moveq	r3, #0
 801a0e2:	232e      	movne	r3, #46	; 0x2e
 801a0e4:	aa42      	add	r2, sp, #264	; 0x108
 801a0e6:	4415      	add	r5, r2
 801a0e8:	aa0c      	add	r2, sp, #48	; 0x30
 801a0ea:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801a0ee:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a0f2:	a80f      	add	r0, sp, #60	; 0x3c
 801a0f4:	9205      	str	r2, [sp, #20]
 801a0f6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801a0fa:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801a0fe:	9204      	str	r2, [sp, #16]
 801a100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a102:	9203      	str	r2, [sp, #12]
 801a104:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801a108:	9202      	str	r2, [sp, #8]
 801a10a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a10c:	9201      	str	r2, [sp, #4]
 801a10e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801a112:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801a116:	9200      	str	r2, [sp, #0]
 801a118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a11a:	f7ff fc9f 	bl	8019a5c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801a11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a120:	3302      	adds	r3, #2
 801a122:	9309      	str	r3, [sp, #36]	; 0x24
 801a124:	e72f      	b.n	8019f86 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a126:	232e      	movs	r3, #46	; 0x2e
 801a128:	e7dc      	b.n	801a0e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801a12a:	ab42      	add	r3, sp, #264	; 0x108
 801a12c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801a130:	2300      	movs	r3, #0
 801a132:	e7d9      	b.n	801a0e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801a134:	2200      	movs	r2, #0
 801a136:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801a13a:	e71e      	b.n	8019f7a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801a13c:	459b      	cmp	fp, r3
 801a13e:	f77f af22 	ble.w	8019f86 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801a142:	2300      	movs	r3, #0
 801a144:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801a148:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801a14c:	a809      	add	r0, sp, #36	; 0x24
 801a14e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a15a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801a15e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801a162:	930d      	str	r3, [sp, #52]	; 0x34
 801a164:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801a168:	930e      	str	r3, [sp, #56]	; 0x38
 801a16a:	1cab      	adds	r3, r5, #2
 801a16c:	9309      	str	r3, [sp, #36]	; 0x24
 801a16e:	ab0e      	add	r3, sp, #56	; 0x38
 801a170:	9304      	str	r3, [sp, #16]
 801a172:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801a176:	9303      	str	r3, [sp, #12]
 801a178:	ab0d      	add	r3, sp, #52	; 0x34
 801a17a:	9302      	str	r3, [sp, #8]
 801a17c:	ab0b      	add	r3, sp, #44	; 0x2c
 801a17e:	9301      	str	r3, [sp, #4]
 801a180:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801a184:	9300      	str	r3, [sp, #0]
 801a186:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801a18a:	f7ff fd17 	bl	8019bbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801a18e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a190:	2b00      	cmp	r3, #0
 801a192:	da0b      	bge.n	801a1ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801a194:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a198:	3401      	adds	r4, #1
 801a19a:	edd3 7a00 	vldr	s15, [r3]
 801a19e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a1a2:	ee17 3a90 	vmov	r3, s15
 801a1a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1aa:	930d      	str	r3, [sp, #52]	; 0x34
 801a1ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	da0b      	bge.n	801a1ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801a1b2:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801a1b6:	3401      	adds	r4, #1
 801a1b8:	edd3 7a00 	vldr	s15, [r3]
 801a1bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a1c0:	ee17 3a90 	vmov	r3, s15
 801a1c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1c8:	930e      	str	r3, [sp, #56]	; 0x38
 801a1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a1ce:	881b      	ldrh	r3, [r3, #0]
 801a1d0:	2b25      	cmp	r3, #37	; 0x25
 801a1d2:	f43f aef2 	beq.w	8019fba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801a1d6:	2b66      	cmp	r3, #102	; 0x66
 801a1d8:	f43f aef4 	beq.w	8019fc4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801a1dc:	9509      	str	r5, [sp, #36]	; 0x24
 801a1de:	882b      	ldrh	r3, [r5, #0]
 801a1e0:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801a1e4:	3201      	adds	r2, #1
 801a1e6:	e6eb      	b.n	8019fc0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801a1e8:	3f000002 	.word	0x3f000002

0801a1ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801a1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1ee:	4605      	mov	r5, r0
 801a1f0:	b0a1      	sub	sp, #132	; 0x84
 801a1f2:	4610      	mov	r0, r2
 801a1f4:	460e      	mov	r6, r1
 801a1f6:	4614      	mov	r4, r2
 801a1f8:	461f      	mov	r7, r3
 801a1fa:	f7ff fbb3 	bl	8019964 <_ZN8touchgfx7Unicode6strlenEPKc>
 801a1fe:	283f      	cmp	r0, #63	; 0x3f
 801a200:	d906      	bls.n	801a210 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801a202:	4b0a      	ldr	r3, [pc, #40]	; (801a22c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801a204:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801a208:	4a09      	ldr	r2, [pc, #36]	; (801a230 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801a20a:	480a      	ldr	r0, [pc, #40]	; (801a234 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801a20c:	f009 fe2c 	bl	8023e68 <__assert_func>
 801a210:	4621      	mov	r1, r4
 801a212:	2240      	movs	r2, #64	; 0x40
 801a214:	4668      	mov	r0, sp
 801a216:	f7ff fbb1 	bl	801997c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a21a:	463b      	mov	r3, r7
 801a21c:	466a      	mov	r2, sp
 801a21e:	4631      	mov	r1, r6
 801a220:	4628      	mov	r0, r5
 801a222:	f7ff fe97 	bl	8019f54 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801a226:	b021      	add	sp, #132	; 0x84
 801a228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a22a:	bf00      	nop
 801a22c:	080280c9 	.word	0x080280c9
 801a230:	0802810c 	.word	0x0802810c
 801a234:	080280e6 	.word	0x080280e6

0801a238 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a238:	4b01      	ldr	r3, [pc, #4]	; (801a240 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a23a:	6018      	str	r0, [r3, #0]
 801a23c:	4770      	bx	lr
 801a23e:	bf00      	nop
 801a240:	2000bd08 	.word	0x2000bd08

0801a244 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a244:	4b07      	ldr	r3, [pc, #28]	; (801a264 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801a246:	881a      	ldrh	r2, [r3, #0]
 801a248:	4282      	cmp	r2, r0
 801a24a:	d809      	bhi.n	801a260 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801a24c:	4b06      	ldr	r3, [pc, #24]	; (801a268 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801a24e:	881b      	ldrh	r3, [r3, #0]
 801a250:	4413      	add	r3, r2
 801a252:	4298      	cmp	r0, r3
 801a254:	da04      	bge.n	801a260 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801a256:	4b05      	ldr	r3, [pc, #20]	; (801a26c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a25e:	4770      	bx	lr
 801a260:	2000      	movs	r0, #0
 801a262:	4770      	bx	lr
 801a264:	2000bd28 	.word	0x2000bd28
 801a268:	2000bd2c 	.word	0x2000bd2c
 801a26c:	2000bd0c 	.word	0x2000bd0c

0801a270 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a274:	4d26      	ldr	r5, [pc, #152]	; (801a310 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a276:	682b      	ldr	r3, [r5, #0]
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d046      	beq.n	801a30a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801a27c:	4a25      	ldr	r2, [pc, #148]	; (801a314 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a27e:	4f26      	ldr	r7, [pc, #152]	; (801a318 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a280:	8810      	ldrh	r0, [r2, #0]
 801a282:	883c      	ldrh	r4, [r7, #0]
 801a284:	4e25      	ldr	r6, [pc, #148]	; (801a31c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a286:	4420      	add	r0, r4
 801a288:	1c42      	adds	r2, r0, #1
 801a28a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801a28e:	f022 0201 	bic.w	r2, r2, #1
 801a292:	0412      	lsls	r2, r2, #16
 801a294:	0c12      	lsrs	r2, r2, #16
 801a296:	0051      	lsls	r1, r2, #1
 801a298:	220e      	movs	r2, #14
 801a29a:	eb08 0e01 	add.w	lr, r8, r1
 801a29e:	fb02 fc04 	mul.w	ip, r2, r4
 801a2a2:	eb03 0208 	add.w	r2, r3, r8
 801a2a6:	4c1e      	ldr	r4, [pc, #120]	; (801a320 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a2a8:	6022      	str	r2, [r4, #0]
 801a2aa:	eb03 020e 	add.w	r2, r3, lr
 801a2ae:	44e6      	add	lr, ip
 801a2b0:	6032      	str	r2, [r6, #0]
 801a2b2:	4473      	add	r3, lr
 801a2b4:	4a1b      	ldr	r2, [pc, #108]	; (801a324 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a2b6:	6013      	str	r3, [r2, #0]
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	4a1b      	ldr	r2, [pc, #108]	; (801a328 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a2bc:	8013      	strh	r3, [r2, #0]
 801a2be:	4a1b      	ldr	r2, [pc, #108]	; (801a32c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801a2c0:	6812      	ldr	r2, [r2, #0]
 801a2c2:	eba2 0208 	sub.w	r2, r2, r8
 801a2c6:	1a52      	subs	r2, r2, r1
 801a2c8:	4919      	ldr	r1, [pc, #100]	; (801a330 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801a2ca:	eba2 020c 	sub.w	r2, r2, ip
 801a2ce:	469c      	mov	ip, r3
 801a2d0:	600a      	str	r2, [r1, #0]
 801a2d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a2d6:	4a17      	ldr	r2, [pc, #92]	; (801a334 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801a2d8:	8013      	strh	r3, [r2, #0]
 801a2da:	4283      	cmp	r3, r0
 801a2dc:	d10d      	bne.n	801a2fa <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801a2de:	883d      	ldrh	r5, [r7, #0]
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	6830      	ldr	r0, [r6, #0]
 801a2e4:	240e      	movs	r4, #14
 801a2e6:	429d      	cmp	r5, r3
 801a2e8:	d90f      	bls.n	801a30a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801a2ea:	fb04 0203 	mla	r2, r4, r3, r0
 801a2ee:	3301      	adds	r3, #1
 801a2f0:	7b11      	ldrb	r1, [r2, #12]
 801a2f2:	f36f 1145 	bfc	r1, #5, #1
 801a2f6:	7311      	strb	r1, [r2, #12]
 801a2f8:	e7f5      	b.n	801a2e6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801a2fa:	682a      	ldr	r2, [r5, #0]
 801a2fc:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a300:	6822      	ldr	r2, [r4, #0]
 801a302:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801a306:	3301      	adds	r3, #1
 801a308:	e7e7      	b.n	801a2da <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801a30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a30e:	bf00      	nop
 801a310:	2000bd0c 	.word	0x2000bd0c
 801a314:	2000bd28 	.word	0x2000bd28
 801a318:	2000bd2c 	.word	0x2000bd2c
 801a31c:	2000bd10 	.word	0x2000bd10
 801a320:	2000bd20 	.word	0x2000bd20
 801a324:	2000bd18 	.word	0x2000bd18
 801a328:	2000bd2a 	.word	0x2000bd2a
 801a32c:	2000bd14 	.word	0x2000bd14
 801a330:	2000bd24 	.word	0x2000bd24
 801a334:	2000bd1c 	.word	0x2000bd1c

0801a338 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a338:	4b10      	ldr	r3, [pc, #64]	; (801a37c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801a33a:	b510      	push	{r4, lr}
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	b9db      	cbnz	r3, 801a378 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801a340:	b1d1      	cbz	r1, 801a378 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801a342:	4b0f      	ldr	r3, [pc, #60]	; (801a380 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801a344:	240e      	movs	r4, #14
 801a346:	801a      	strh	r2, [r3, #0]
 801a348:	b292      	uxth	r2, r2
 801a34a:	4b0e      	ldr	r3, [pc, #56]	; (801a384 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801a34c:	881b      	ldrh	r3, [r3, #0]
 801a34e:	4413      	add	r3, r2
 801a350:	4362      	muls	r2, r4
 801a352:	2406      	movs	r4, #6
 801a354:	fb04 2203 	mla	r2, r4, r3, r2
 801a358:	428a      	cmp	r2, r1
 801a35a:	d305      	bcc.n	801a368 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801a35c:	4b0a      	ldr	r3, [pc, #40]	; (801a388 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801a35e:	2137      	movs	r1, #55	; 0x37
 801a360:	4a0a      	ldr	r2, [pc, #40]	; (801a38c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801a362:	480b      	ldr	r0, [pc, #44]	; (801a390 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801a364:	f009 fd80 	bl	8023e68 <__assert_func>
 801a368:	4b0a      	ldr	r3, [pc, #40]	; (801a394 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801a36a:	6019      	str	r1, [r3, #0]
 801a36c:	4b0a      	ldr	r3, [pc, #40]	; (801a398 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801a36e:	6018      	str	r0, [r3, #0]
 801a370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a374:	f7ff bf7c 	b.w	801a270 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a378:	bd10      	pop	{r4, pc}
 801a37a:	bf00      	nop
 801a37c:	2000bd18 	.word	0x2000bd18
 801a380:	2000bd2c 	.word	0x2000bd2c
 801a384:	2000bd28 	.word	0x2000bd28
 801a388:	0802827d 	.word	0x0802827d
 801a38c:	080282d6 	.word	0x080282d6
 801a390:	08028258 	.word	0x08028258
 801a394:	2000bd14 	.word	0x2000bd14
 801a398:	2000bd0c 	.word	0x2000bd0c

0801a39c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a39c:	b470      	push	{r4, r5, r6}
 801a39e:	4c07      	ldr	r4, [pc, #28]	; (801a3bc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a3a0:	4605      	mov	r5, r0
 801a3a2:	4610      	mov	r0, r2
 801a3a4:	9a03      	ldr	r2, [sp, #12]
 801a3a6:	6826      	ldr	r6, [r4, #0]
 801a3a8:	b936      	cbnz	r6, 801a3b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a3aa:	6025      	str	r5, [r4, #0]
 801a3ac:	4c04      	ldr	r4, [pc, #16]	; (801a3c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a3ae:	8021      	strh	r1, [r4, #0]
 801a3b0:	4619      	mov	r1, r3
 801a3b2:	bc70      	pop	{r4, r5, r6}
 801a3b4:	f7ff bfc0 	b.w	801a338 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a3b8:	bc70      	pop	{r4, r5, r6}
 801a3ba:	4770      	bx	lr
 801a3bc:	2000bd30 	.word	0x2000bd30
 801a3c0:	2000bd28 	.word	0x2000bd28

0801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a3c4:	b508      	push	{r3, lr}
 801a3c6:	4b14      	ldr	r3, [pc, #80]	; (801a418 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a3c8:	6819      	ldr	r1, [r3, #0]
 801a3ca:	b931      	cbnz	r1, 801a3da <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801a3cc:	4b13      	ldr	r3, [pc, #76]	; (801a41c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a3ce:	f240 21e6 	movw	r1, #742	; 0x2e6
 801a3d2:	4a13      	ldr	r2, [pc, #76]	; (801a420 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a3d4:	4813      	ldr	r0, [pc, #76]	; (801a424 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a3d6:	f009 fd47 	bl	8023e68 <__assert_func>
 801a3da:	4a13      	ldr	r2, [pc, #76]	; (801a428 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a3dc:	8803      	ldrh	r3, [r0, #0]
 801a3de:	8812      	ldrh	r2, [r2, #0]
 801a3e0:	4293      	cmp	r3, r2
 801a3e2:	d204      	bcs.n	801a3ee <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801a3e4:	2214      	movs	r2, #20
 801a3e6:	fb02 1303 	mla	r3, r2, r3, r1
 801a3ea:	8918      	ldrh	r0, [r3, #8]
 801a3ec:	bd08      	pop	{r3, pc}
 801a3ee:	490f      	ldr	r1, [pc, #60]	; (801a42c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801a3f0:	8809      	ldrh	r1, [r1, #0]
 801a3f2:	4411      	add	r1, r2
 801a3f4:	428b      	cmp	r3, r1
 801a3f6:	da06      	bge.n	801a406 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801a3f8:	1a9b      	subs	r3, r3, r2
 801a3fa:	4a0d      	ldr	r2, [pc, #52]	; (801a430 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801a3fc:	210e      	movs	r1, #14
 801a3fe:	6812      	ldr	r2, [r2, #0]
 801a400:	fb01 2303 	mla	r3, r1, r3, r2
 801a404:	e7f1      	b.n	801a3ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801a406:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a40a:	4293      	cmp	r3, r2
 801a40c:	bf0a      	itet	eq
 801a40e:	4b09      	ldreq	r3, [pc, #36]	; (801a434 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801a410:	2000      	movne	r0, #0
 801a412:	8818      	ldrheq	r0, [r3, #0]
 801a414:	e7ea      	b.n	801a3ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801a416:	bf00      	nop
 801a418:	2000bd30 	.word	0x2000bd30
 801a41c:	08026230 	.word	0x08026230
 801a420:	08028383 	.word	0x08028383
 801a424:	08028258 	.word	0x08028258
 801a428:	2000bd28 	.word	0x2000bd28
 801a42c:	2000bd2c 	.word	0x2000bd2c
 801a430:	2000bd10 	.word	0x2000bd10
 801a434:	2000bc5c 	.word	0x2000bc5c

0801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a438:	b508      	push	{r3, lr}
 801a43a:	4b14      	ldr	r3, [pc, #80]	; (801a48c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a43c:	6819      	ldr	r1, [r3, #0]
 801a43e:	b931      	cbnz	r1, 801a44e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801a440:	4b13      	ldr	r3, [pc, #76]	; (801a490 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a442:	f240 21fa 	movw	r1, #762	; 0x2fa
 801a446:	4a13      	ldr	r2, [pc, #76]	; (801a494 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a448:	4813      	ldr	r0, [pc, #76]	; (801a498 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a44a:	f009 fd0d 	bl	8023e68 <__assert_func>
 801a44e:	4a13      	ldr	r2, [pc, #76]	; (801a49c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a450:	8803      	ldrh	r3, [r0, #0]
 801a452:	8812      	ldrh	r2, [r2, #0]
 801a454:	4293      	cmp	r3, r2
 801a456:	d204      	bcs.n	801a462 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801a458:	2214      	movs	r2, #20
 801a45a:	fb02 1303 	mla	r3, r2, r3, r1
 801a45e:	8958      	ldrh	r0, [r3, #10]
 801a460:	bd08      	pop	{r3, pc}
 801a462:	490f      	ldr	r1, [pc, #60]	; (801a4a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801a464:	8809      	ldrh	r1, [r1, #0]
 801a466:	4411      	add	r1, r2
 801a468:	428b      	cmp	r3, r1
 801a46a:	da06      	bge.n	801a47a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801a46c:	1a9b      	subs	r3, r3, r2
 801a46e:	4a0d      	ldr	r2, [pc, #52]	; (801a4a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801a470:	210e      	movs	r1, #14
 801a472:	6812      	ldr	r2, [r2, #0]
 801a474:	fb01 2303 	mla	r3, r1, r3, r2
 801a478:	e7f1      	b.n	801a45e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801a47a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a47e:	4293      	cmp	r3, r2
 801a480:	bf0a      	itet	eq
 801a482:	4b09      	ldreq	r3, [pc, #36]	; (801a4a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801a484:	2000      	movne	r0, #0
 801a486:	8818      	ldrheq	r0, [r3, #0]
 801a488:	e7ea      	b.n	801a460 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801a48a:	bf00      	nop
 801a48c:	2000bd30 	.word	0x2000bd30
 801a490:	08026230 	.word	0x08026230
 801a494:	080283af 	.word	0x080283af
 801a498:	08028258 	.word	0x08028258
 801a49c:	2000bd28 	.word	0x2000bd28
 801a4a0:	2000bd2c 	.word	0x2000bd2c
 801a4a4:	2000bd10 	.word	0x2000bd10
 801a4a8:	2000bc5e 	.word	0x2000bc5e

0801a4ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801a4ac:	4b23      	ldr	r3, [pc, #140]	; (801a53c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801a4ae:	b510      	push	{r4, lr}
 801a4b0:	681c      	ldr	r4, [r3, #0]
 801a4b2:	b934      	cbnz	r4, 801a4c2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801a4b4:	4b22      	ldr	r3, [pc, #136]	; (801a540 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801a4b6:	f240 310e 	movw	r1, #782	; 0x30e
 801a4ba:	4a22      	ldr	r2, [pc, #136]	; (801a544 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801a4bc:	4822      	ldr	r0, [pc, #136]	; (801a548 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801a4be:	f009 fcd3 	bl	8023e68 <__assert_func>
 801a4c2:	4a22      	ldr	r2, [pc, #136]	; (801a54c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801a4c4:	880b      	ldrh	r3, [r1, #0]
 801a4c6:	8812      	ldrh	r2, [r2, #0]
 801a4c8:	4293      	cmp	r3, r2
 801a4ca:	d211      	bcs.n	801a4f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801a4cc:	2214      	movs	r2, #20
 801a4ce:	fb02 4303 	mla	r3, r2, r3, r4
 801a4d2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a4d6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801a4da:	8a1a      	ldrh	r2, [r3, #16]
 801a4dc:	8a5b      	ldrh	r3, [r3, #18]
 801a4de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a4e2:	8004      	strh	r4, [r0, #0]
 801a4e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a4e8:	8041      	strh	r1, [r0, #2]
 801a4ea:	8082      	strh	r2, [r0, #4]
 801a4ec:	80c3      	strh	r3, [r0, #6]
 801a4ee:	e00e      	b.n	801a50e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801a4f0:	4917      	ldr	r1, [pc, #92]	; (801a550 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801a4f2:	8809      	ldrh	r1, [r1, #0]
 801a4f4:	4411      	add	r1, r2
 801a4f6:	428b      	cmp	r3, r1
 801a4f8:	da0a      	bge.n	801a510 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801a4fa:	1a9b      	subs	r3, r3, r2
 801a4fc:	4a15      	ldr	r2, [pc, #84]	; (801a554 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801a4fe:	210e      	movs	r1, #14
 801a500:	6812      	ldr	r2, [r2, #0]
 801a502:	fb01 2303 	mla	r3, r1, r3, r2
 801a506:	681a      	ldr	r2, [r3, #0]
 801a508:	6002      	str	r2, [r0, #0]
 801a50a:	685a      	ldr	r2, [r3, #4]
 801a50c:	6042      	str	r2, [r0, #4]
 801a50e:	bd10      	pop	{r4, pc}
 801a510:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a514:	4293      	cmp	r3, r2
 801a516:	d10b      	bne.n	801a530 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801a518:	4b0f      	ldr	r3, [pc, #60]	; (801a558 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801a51a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a51e:	4b0f      	ldr	r3, [pc, #60]	; (801a55c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801a520:	8081      	strh	r1, [r0, #4]
 801a522:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a526:	2300      	movs	r3, #0
 801a528:	80c2      	strh	r2, [r0, #6]
 801a52a:	8003      	strh	r3, [r0, #0]
 801a52c:	8043      	strh	r3, [r0, #2]
 801a52e:	e7ee      	b.n	801a50e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801a530:	2300      	movs	r3, #0
 801a532:	8003      	strh	r3, [r0, #0]
 801a534:	8043      	strh	r3, [r0, #2]
 801a536:	8083      	strh	r3, [r0, #4]
 801a538:	e7d8      	b.n	801a4ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801a53a:	bf00      	nop
 801a53c:	2000bd30 	.word	0x2000bd30
 801a540:	08026230 	.word	0x08026230
 801a544:	0802831c 	.word	0x0802831c
 801a548:	08028258 	.word	0x08028258
 801a54c:	2000bd28 	.word	0x2000bd28
 801a550:	2000bd2c 	.word	0x2000bd2c
 801a554:	2000bd10 	.word	0x2000bd10
 801a558:	2000bc5c 	.word	0x2000bc5c
 801a55c:	2000bc5e 	.word	0x2000bc5e

0801a560 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801a560:	4b18      	ldr	r3, [pc, #96]	; (801a5c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	b34b      	cbz	r3, 801a5ba <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801a566:	4a18      	ldr	r2, [pc, #96]	; (801a5c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801a568:	8800      	ldrh	r0, [r0, #0]
 801a56a:	8812      	ldrh	r2, [r2, #0]
 801a56c:	4290      	cmp	r0, r2
 801a56e:	d211      	bcs.n	801a594 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801a570:	2214      	movs	r2, #20
 801a572:	fb02 3300 	mla	r3, r2, r0, r3
 801a576:	8a1a      	ldrh	r2, [r3, #16]
 801a578:	8919      	ldrh	r1, [r3, #8]
 801a57a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a57e:	428a      	cmp	r2, r1
 801a580:	db1d      	blt.n	801a5be <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801a582:	8a58      	ldrh	r0, [r3, #18]
 801a584:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801a588:	895b      	ldrh	r3, [r3, #10]
 801a58a:	4298      	cmp	r0, r3
 801a58c:	bfac      	ite	ge
 801a58e:	2000      	movge	r0, #0
 801a590:	2001      	movlt	r0, #1
 801a592:	4770      	bx	lr
 801a594:	4b0d      	ldr	r3, [pc, #52]	; (801a5cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801a596:	881b      	ldrh	r3, [r3, #0]
 801a598:	4413      	add	r3, r2
 801a59a:	4298      	cmp	r0, r3
 801a59c:	da0d      	bge.n	801a5ba <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801a59e:	4b0c      	ldr	r3, [pc, #48]	; (801a5d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801a5a0:	1a80      	subs	r0, r0, r2
 801a5a2:	220e      	movs	r2, #14
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	fb02 3300 	mla	r3, r2, r0, r3
 801a5aa:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801a5ae:	891a      	ldrh	r2, [r3, #8]
 801a5b0:	4291      	cmp	r1, r2
 801a5b2:	db04      	blt.n	801a5be <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801a5b4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801a5b8:	e7e6      	b.n	801a588 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801a5ba:	2000      	movs	r0, #0
 801a5bc:	4770      	bx	lr
 801a5be:	2001      	movs	r0, #1
 801a5c0:	4770      	bx	lr
 801a5c2:	bf00      	nop
 801a5c4:	2000bd30 	.word	0x2000bd30
 801a5c8:	2000bd28 	.word	0x2000bd28
 801a5cc:	2000bd2c 	.word	0x2000bd2c
 801a5d0:	2000bd10 	.word	0x2000bd10

0801a5d4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a5d4:	b508      	push	{r3, lr}
 801a5d6:	4b12      	ldr	r3, [pc, #72]	; (801a620 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a5d8:	6819      	ldr	r1, [r3, #0]
 801a5da:	b931      	cbnz	r1, 801a5ea <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a5dc:	4b11      	ldr	r3, [pc, #68]	; (801a624 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a5de:	f240 3132 	movw	r1, #818	; 0x332
 801a5e2:	4a11      	ldr	r2, [pc, #68]	; (801a628 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a5e4:	4811      	ldr	r0, [pc, #68]	; (801a62c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a5e6:	f009 fc3f 	bl	8023e68 <__assert_func>
 801a5ea:	8803      	ldrh	r3, [r0, #0]
 801a5ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5f0:	4293      	cmp	r3, r2
 801a5f2:	d012      	beq.n	801a61a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a5f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a5f8:	4293      	cmp	r3, r2
 801a5fa:	d103      	bne.n	801a604 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801a5fc:	4b0c      	ldr	r3, [pc, #48]	; (801a630 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801a602:	bd08      	pop	{r3, pc}
 801a604:	4a0b      	ldr	r2, [pc, #44]	; (801a634 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801a606:	6812      	ldr	r2, [r2, #0]
 801a608:	b11a      	cbz	r2, 801a612 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801a60a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a60e:	2800      	cmp	r0, #0
 801a610:	d1f7      	bne.n	801a602 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801a612:	2214      	movs	r2, #20
 801a614:	4353      	muls	r3, r2
 801a616:	58c8      	ldr	r0, [r1, r3]
 801a618:	e7f3      	b.n	801a602 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801a61a:	2000      	movs	r0, #0
 801a61c:	e7f1      	b.n	801a602 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801a61e:	bf00      	nop
 801a620:	2000bd30 	.word	0x2000bd30
 801a624:	08026230 	.word	0x08026230
 801a628:	08028352 	.word	0x08028352
 801a62c:	08028258 	.word	0x08028258
 801a630:	2000bc68 	.word	0x2000bc68
 801a634:	2000bd0c 	.word	0x2000bd0c

0801a638 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a638:	8802      	ldrh	r2, [r0, #0]
 801a63a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801a63e:	429a      	cmp	r2, r3
 801a640:	d840      	bhi.n	801a6c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801a642:	4b21      	ldr	r3, [pc, #132]	; (801a6c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801a644:	881b      	ldrh	r3, [r3, #0]
 801a646:	429a      	cmp	r2, r3
 801a648:	d220      	bcs.n	801a68c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801a64a:	4b20      	ldr	r3, [pc, #128]	; (801a6cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a64c:	6819      	ldr	r1, [r3, #0]
 801a64e:	2314      	movs	r3, #20
 801a650:	fb03 1302 	mla	r3, r3, r2, r1
 801a654:	6858      	ldr	r0, [r3, #4]
 801a656:	2800      	cmp	r0, #0
 801a658:	d035      	beq.n	801a6c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a65a:	491d      	ldr	r1, [pc, #116]	; (801a6d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a65c:	6809      	ldr	r1, [r1, #0]
 801a65e:	2900      	cmp	r1, #0
 801a660:	d031      	beq.n	801a6c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a662:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a666:	b371      	cbz	r1, 801a6c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a668:	895a      	ldrh	r2, [r3, #10]
 801a66a:	8918      	ldrh	r0, [r3, #8]
 801a66c:	4350      	muls	r0, r2
 801a66e:	7c5a      	ldrb	r2, [r3, #17]
 801a670:	7cdb      	ldrb	r3, [r3, #19]
 801a672:	0952      	lsrs	r2, r2, #5
 801a674:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a678:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a67c:	2b0b      	cmp	r3, #11
 801a67e:	bf18      	it	ne
 801a680:	0040      	lslne	r0, r0, #1
 801a682:	3003      	adds	r0, #3
 801a684:	f020 0003 	bic.w	r0, r0, #3
 801a688:	4408      	add	r0, r1
 801a68a:	4770      	bx	lr
 801a68c:	4911      	ldr	r1, [pc, #68]	; (801a6d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a68e:	8809      	ldrh	r1, [r1, #0]
 801a690:	4419      	add	r1, r3
 801a692:	428a      	cmp	r2, r1
 801a694:	da16      	bge.n	801a6c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801a696:	4910      	ldr	r1, [pc, #64]	; (801a6d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a698:	1ad3      	subs	r3, r2, r3
 801a69a:	200e      	movs	r0, #14
 801a69c:	6809      	ldr	r1, [r1, #0]
 801a69e:	fb00 1303 	mla	r3, r0, r3, r1
 801a6a2:	7b19      	ldrb	r1, [r3, #12]
 801a6a4:	f001 011f 	and.w	r1, r1, #31
 801a6a8:	290b      	cmp	r1, #11
 801a6aa:	d10b      	bne.n	801a6c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801a6ac:	8919      	ldrh	r1, [r3, #8]
 801a6ae:	8958      	ldrh	r0, [r3, #10]
 801a6b0:	4b07      	ldr	r3, [pc, #28]	; (801a6d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a6b2:	4348      	muls	r0, r1
 801a6b4:	6819      	ldr	r1, [r3, #0]
 801a6b6:	3003      	adds	r0, #3
 801a6b8:	f020 0303 	bic.w	r3, r0, #3
 801a6bc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a6c0:	4418      	add	r0, r3
 801a6c2:	4770      	bx	lr
 801a6c4:	2000      	movs	r0, #0
 801a6c6:	4770      	bx	lr
 801a6c8:	2000bd28 	.word	0x2000bd28
 801a6cc:	2000bd30 	.word	0x2000bd30
 801a6d0:	2000bd0c 	.word	0x2000bd0c
 801a6d4:	2000bd2c 	.word	0x2000bd2c
 801a6d8:	2000bd10 	.word	0x2000bd10

0801a6dc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a6dc:	4b19      	ldr	r3, [pc, #100]	; (801a744 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801a6de:	6819      	ldr	r1, [r3, #0]
 801a6e0:	8803      	ldrh	r3, [r0, #0]
 801a6e2:	b1e9      	cbz	r1, 801a720 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801a6e4:	4a18      	ldr	r2, [pc, #96]	; (801a748 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801a6e6:	8812      	ldrh	r2, [r2, #0]
 801a6e8:	429a      	cmp	r2, r3
 801a6ea:	d90a      	bls.n	801a702 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801a6ec:	2214      	movs	r2, #20
 801a6ee:	fb02 1303 	mla	r3, r2, r3, r1
 801a6f2:	7c58      	ldrb	r0, [r3, #17]
 801a6f4:	0942      	lsrs	r2, r0, #5
 801a6f6:	7cd8      	ldrb	r0, [r3, #19]
 801a6f8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801a6fc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801a700:	4770      	bx	lr
 801a702:	4912      	ldr	r1, [pc, #72]	; (801a74c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801a704:	8809      	ldrh	r1, [r1, #0]
 801a706:	4411      	add	r1, r2
 801a708:	428b      	cmp	r3, r1
 801a70a:	da09      	bge.n	801a720 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801a70c:	1a9b      	subs	r3, r3, r2
 801a70e:	4a10      	ldr	r2, [pc, #64]	; (801a750 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801a710:	210e      	movs	r1, #14
 801a712:	6812      	ldr	r2, [r2, #0]
 801a714:	fb01 2303 	mla	r3, r1, r3, r2
 801a718:	7b18      	ldrb	r0, [r3, #12]
 801a71a:	f000 001f 	and.w	r0, r0, #31
 801a71e:	4770      	bx	lr
 801a720:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a724:	4293      	cmp	r3, r2
 801a726:	d10a      	bne.n	801a73e <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801a728:	4b0a      	ldr	r3, [pc, #40]	; (801a754 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a730:	b10a      	cbz	r2, 801a736 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801a732:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a734:	b900      	cbnz	r0, 801a738 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801a736:	6898      	ldr	r0, [r3, #8]
 801a738:	6803      	ldr	r3, [r0, #0]
 801a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a73c:	4718      	bx	r3
 801a73e:	2000      	movs	r0, #0
 801a740:	4770      	bx	lr
 801a742:	bf00      	nop
 801a744:	2000bd30 	.word	0x2000bd30
 801a748:	2000bd28 	.word	0x2000bd28
 801a74c:	2000bd2c 	.word	0x2000bd2c
 801a750:	2000bd10 	.word	0x2000bd10
 801a754:	2000bc68 	.word	0x2000bc68

0801a758 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801a758:	2018      	movs	r0, #24
 801a75a:	4770      	bx	lr

0801a75c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801a75c:	2001      	movs	r0, #1
 801a75e:	4770      	bx	lr

0801a760 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801a760:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801a764:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801a768:	4770      	bx	lr

0801a76a <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801a76a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801a76e:	4770      	bx	lr

0801a770 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801a770:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801a774:	4770      	bx	lr

0801a776 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801a776:	b2c8      	uxtb	r0, r1
 801a778:	4770      	bx	lr

0801a77a <_ZN8touchgfx8LCD24bpp4initEv>:
 801a77a:	4770      	bx	lr

0801a77c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a780:	b085      	sub	sp, #20
 801a782:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801a784:	9203      	str	r2, [sp, #12]
 801a786:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801a78a:	6878      	ldr	r0, [r7, #4]
 801a78c:	9201      	str	r2, [sp, #4]
 801a78e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801a790:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801a794:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801a798:	fa1f fc84 	uxth.w	ip, r4
 801a79c:	43e4      	mvns	r4, r4
 801a79e:	9100      	str	r1, [sp, #0]
 801a7a0:	b2e4      	uxtb	r4, r4
 801a7a2:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801a7a6:	fb00 2505 	mla	r5, r0, r5, r2
 801a7aa:	683a      	ldr	r2, [r7, #0]
 801a7ac:	6877      	ldr	r7, [r6, #4]
 801a7ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a7b2:	3704      	adds	r7, #4
 801a7b4:	4415      	add	r5, r2
 801a7b6:	6832      	ldr	r2, [r6, #0]
 801a7b8:	9202      	str	r2, [sp, #8]
 801a7ba:	9a00      	ldr	r2, [sp, #0]
 801a7bc:	2a00      	cmp	r2, #0
 801a7be:	dc03      	bgt.n	801a7c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801a7c0:	9a03      	ldr	r2, [sp, #12]
 801a7c2:	2a00      	cmp	r2, #0
 801a7c4:	f340 8116 	ble.w	801a9f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801a7c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a7ca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a7ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a7d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	dd0f      	ble.n	801a7f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801a7d8:	1406      	asrs	r6, r0, #16
 801a7da:	d406      	bmi.n	801a7ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a7dc:	4546      	cmp	r6, r8
 801a7de:	da04      	bge.n	801a7ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a7e0:	1416      	asrs	r6, r2, #16
 801a7e2:	d402      	bmi.n	801a7ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a7e4:	9901      	ldr	r1, [sp, #4]
 801a7e6:	428e      	cmp	r6, r1
 801a7e8:	db07      	blt.n	801a7fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801a7ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a7ec:	3b01      	subs	r3, #1
 801a7ee:	3503      	adds	r5, #3
 801a7f0:	4408      	add	r0, r1
 801a7f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a7f4:	440a      	add	r2, r1
 801a7f6:	e7ed      	b.n	801a7d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801a7f8:	d011      	beq.n	801a81e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801a7fa:	1e5e      	subs	r6, r3, #1
 801a7fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a7fe:	fb01 0e06 	mla	lr, r1, r6, r0
 801a802:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801a806:	d548      	bpl.n	801a89a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801a808:	4699      	mov	r9, r3
 801a80a:	462e      	mov	r6, r5
 801a80c:	f1b9 0f00 	cmp.w	r9, #0
 801a810:	f300 809e 	bgt.w	801a950 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801a814:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a818:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a81c:	441d      	add	r5, r3
 801a81e:	9b00      	ldr	r3, [sp, #0]
 801a820:	2b00      	cmp	r3, #0
 801a822:	f340 80e7 	ble.w	801a9f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801a826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a82a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a82c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a830:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a834:	eef0 6a62 	vmov.f32	s13, s5
 801a838:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a83c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a840:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a844:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801a848:	eef0 6a43 	vmov.f32	s13, s6
 801a84c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a850:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801a854:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a858:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a85c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a860:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a864:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a868:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a86c:	ee12 2a90 	vmov	r2, s5
 801a870:	eef0 2a47 	vmov.f32	s5, s14
 801a874:	fb92 f3f3 	sdiv	r3, r2, r3
 801a878:	ee13 2a10 	vmov	r2, s6
 801a87c:	9311      	str	r3, [sp, #68]	; 0x44
 801a87e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a880:	eeb0 3a67 	vmov.f32	s6, s15
 801a884:	fb92 f3f3 	sdiv	r3, r2, r3
 801a888:	9312      	str	r3, [sp, #72]	; 0x48
 801a88a:	9b00      	ldr	r3, [sp, #0]
 801a88c:	9a03      	ldr	r2, [sp, #12]
 801a88e:	3b01      	subs	r3, #1
 801a890:	9300      	str	r3, [sp, #0]
 801a892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a894:	bf08      	it	eq
 801a896:	4613      	moveq	r3, r2
 801a898:	e78f      	b.n	801a7ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801a89a:	45c6      	cmp	lr, r8
 801a89c:	dab4      	bge.n	801a808 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801a89e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a8a0:	fb01 2606 	mla	r6, r1, r6, r2
 801a8a4:	1436      	asrs	r6, r6, #16
 801a8a6:	d4af      	bmi.n	801a808 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801a8a8:	9901      	ldr	r1, [sp, #4]
 801a8aa:	428e      	cmp	r6, r1
 801a8ac:	daac      	bge.n	801a808 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801a8ae:	1cee      	adds	r6, r5, #3
 801a8b0:	4699      	mov	r9, r3
 801a8b2:	f1b9 0f00 	cmp.w	r9, #0
 801a8b6:	f106 0603 	add.w	r6, r6, #3
 801a8ba:	ddab      	ble.n	801a814 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801a8bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801a8c0:	9902      	ldr	r1, [sp, #8]
 801a8c2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a8c6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a8ca:	fb08 1e0e 	mla	lr, r8, lr, r1
 801a8ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a8d0:	fb1b fb04 	smulbb	fp, fp, r4
 801a8d4:	f109 39ff 	add.w	r9, r9, #4294967295
 801a8d8:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801a8dc:	4408      	add	r0, r1
 801a8de:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a8e0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a8e4:	440a      	add	r2, r1
 801a8e6:	eb07 0a0e 	add.w	sl, r7, lr
 801a8ea:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a8ee:	fb0e be0c 	mla	lr, lr, ip, fp
 801a8f2:	fa1f fe8e 	uxth.w	lr, lr
 801a8f6:	f10e 0b01 	add.w	fp, lr, #1
 801a8fa:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801a8fe:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a902:	fb1b fb04 	smulbb	fp, fp, r4
 801a906:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a90a:	f806 ec06 	strb.w	lr, [r6, #-6]
 801a90e:	f89a e001 	ldrb.w	lr, [sl, #1]
 801a912:	fb0e be0c 	mla	lr, lr, ip, fp
 801a916:	fa1f fe8e 	uxth.w	lr, lr
 801a91a:	f10e 0b01 	add.w	fp, lr, #1
 801a91e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801a922:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a926:	f806 ec05 	strb.w	lr, [r6, #-5]
 801a92a:	f89a e002 	ldrb.w	lr, [sl, #2]
 801a92e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a932:	fb1a fa04 	smulbb	sl, sl, r4
 801a936:	fb0e ae0c 	mla	lr, lr, ip, sl
 801a93a:	fa1f fe8e 	uxth.w	lr, lr
 801a93e:	f10e 0a01 	add.w	sl, lr, #1
 801a942:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801a946:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a94a:	f806 ec04 	strb.w	lr, [r6, #-4]
 801a94e:	e7b0      	b.n	801a8b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801a950:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801a954:	d446      	bmi.n	801a9e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801a956:	45c2      	cmp	sl, r8
 801a958:	da44      	bge.n	801a9e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801a95a:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801a95e:	d441      	bmi.n	801a9e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801a960:	9901      	ldr	r1, [sp, #4]
 801a962:	458e      	cmp	lr, r1
 801a964:	da3e      	bge.n	801a9e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801a966:	9902      	ldr	r1, [sp, #8]
 801a968:	f896 b000 	ldrb.w	fp, [r6]
 801a96c:	fb08 1e0e 	mla	lr, r8, lr, r1
 801a970:	fb1b fb04 	smulbb	fp, fp, r4
 801a974:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801a978:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a97c:	eb07 0a0e 	add.w	sl, r7, lr
 801a980:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a984:	fb0e be0c 	mla	lr, lr, ip, fp
 801a988:	fa1f fe8e 	uxth.w	lr, lr
 801a98c:	f10e 0b01 	add.w	fp, lr, #1
 801a990:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801a994:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a998:	fb1b fb04 	smulbb	fp, fp, r4
 801a99c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a9a0:	f886 e000 	strb.w	lr, [r6]
 801a9a4:	f89a e001 	ldrb.w	lr, [sl, #1]
 801a9a8:	fb0e be0c 	mla	lr, lr, ip, fp
 801a9ac:	fa1f fe8e 	uxth.w	lr, lr
 801a9b0:	f10e 0b01 	add.w	fp, lr, #1
 801a9b4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801a9b8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a9bc:	f886 e001 	strb.w	lr, [r6, #1]
 801a9c0:	f89a e002 	ldrb.w	lr, [sl, #2]
 801a9c4:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a9c8:	fb1a fa04 	smulbb	sl, sl, r4
 801a9cc:	fb0e ae0c 	mla	lr, lr, ip, sl
 801a9d0:	fa1f fe8e 	uxth.w	lr, lr
 801a9d4:	f10e 0a01 	add.w	sl, lr, #1
 801a9d8:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801a9dc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a9e0:	f886 e002 	strb.w	lr, [r6, #2]
 801a9e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a9e6:	3603      	adds	r6, #3
 801a9e8:	f109 39ff 	add.w	r9, r9, #4294967295
 801a9ec:	4408      	add	r0, r1
 801a9ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a9f0:	440a      	add	r2, r1
 801a9f2:	e70b      	b.n	801a80c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801a9f4:	b005      	add	sp, #20
 801a9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a9fa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a9fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9fe:	b085      	sub	sp, #20
 801aa00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aa04:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801aa06:	9203      	str	r2, [sp, #12]
 801aa08:	6870      	ldr	r0, [r6, #4]
 801aa0a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801aa0c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801aa10:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801aa14:	9101      	str	r1, [sp, #4]
 801aa16:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801aa1a:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801aa1e:	fb00 2404 	mla	r4, r0, r4, r2
 801aa22:	6832      	ldr	r2, [r6, #0]
 801aa24:	686e      	ldr	r6, [r5, #4]
 801aa26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aa2a:	3604      	adds	r6, #4
 801aa2c:	4414      	add	r4, r2
 801aa2e:	682a      	ldr	r2, [r5, #0]
 801aa30:	9202      	str	r2, [sp, #8]
 801aa32:	9a01      	ldr	r2, [sp, #4]
 801aa34:	2a00      	cmp	r2, #0
 801aa36:	dc03      	bgt.n	801aa40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801aa38:	9a03      	ldr	r2, [sp, #12]
 801aa3a:	2a00      	cmp	r2, #0
 801aa3c:	f340 80b2 	ble.w	801aba4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801aa40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aa42:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801aa46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aa48:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	dd0c      	ble.n	801aa6a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801aa50:	1405      	asrs	r5, r0, #16
 801aa52:	d405      	bmi.n	801aa60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801aa54:	4575      	cmp	r5, lr
 801aa56:	da03      	bge.n	801aa60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801aa58:	1415      	asrs	r5, r2, #16
 801aa5a:	d401      	bmi.n	801aa60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801aa5c:	4545      	cmp	r5, r8
 801aa5e:	db05      	blt.n	801aa6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801aa60:	4460      	add	r0, ip
 801aa62:	443a      	add	r2, r7
 801aa64:	3b01      	subs	r3, #1
 801aa66:	3403      	adds	r4, #3
 801aa68:	e7f0      	b.n	801aa4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801aa6a:	d03d      	beq.n	801aae8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801aa6c:	1e5d      	subs	r5, r3, #1
 801aa6e:	fb0c 0905 	mla	r9, ip, r5, r0
 801aa72:	ea5f 4929 	movs.w	r9, r9, asr #16
 801aa76:	d42c      	bmi.n	801aad2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801aa78:	45f1      	cmp	r9, lr
 801aa7a:	da2a      	bge.n	801aad2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801aa7c:	fb07 2505 	mla	r5, r7, r5, r2
 801aa80:	142d      	asrs	r5, r5, #16
 801aa82:	d426      	bmi.n	801aad2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801aa84:	4545      	cmp	r5, r8
 801aa86:	da24      	bge.n	801aad2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801aa88:	1ce5      	adds	r5, r4, #3
 801aa8a:	469a      	mov	sl, r3
 801aa8c:	f1ba 0f00 	cmp.w	sl, #0
 801aa90:	f105 0503 	add.w	r5, r5, #3
 801aa94:	dd23      	ble.n	801aade <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801aa96:	ea4f 4922 	mov.w	r9, r2, asr #16
 801aa9a:	9902      	ldr	r1, [sp, #8]
 801aa9c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801aaa0:	443a      	add	r2, r7
 801aaa2:	fb0e 1909 	mla	r9, lr, r9, r1
 801aaa6:	4460      	add	r0, ip
 801aaa8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aaac:	f819 900b 	ldrb.w	r9, [r9, fp]
 801aab0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801aab4:	eb06 0b09 	add.w	fp, r6, r9
 801aab8:	f816 9009 	ldrb.w	r9, [r6, r9]
 801aabc:	f805 9c06 	strb.w	r9, [r5, #-6]
 801aac0:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801aac4:	f805 9c05 	strb.w	r9, [r5, #-5]
 801aac8:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801aacc:	f805 9c04 	strb.w	r9, [r5, #-4]
 801aad0:	e7dc      	b.n	801aa8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801aad2:	2500      	movs	r5, #0
 801aad4:	eba3 0905 	sub.w	r9, r3, r5
 801aad8:	f1b9 0f00 	cmp.w	r9, #0
 801aadc:	dc3c      	bgt.n	801ab58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801aade:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aae2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aae6:	441c      	add	r4, r3
 801aae8:	9b01      	ldr	r3, [sp, #4]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	dd5a      	ble.n	801aba4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801aaee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aaf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aaf4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aaf8:	eeb0 6a62 	vmov.f32	s12, s5
 801aafc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ab00:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab08:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ab0c:	eeb0 6a43 	vmov.f32	s12, s6
 801ab10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab14:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ab18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab20:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab30:	ee12 2a90 	vmov	r2, s5
 801ab34:	eef0 2a47 	vmov.f32	s5, s14
 801ab38:	fb92 fcf3 	sdiv	ip, r2, r3
 801ab3c:	ee13 2a10 	vmov	r2, s6
 801ab40:	eeb0 3a67 	vmov.f32	s6, s15
 801ab44:	fb92 f7f3 	sdiv	r7, r2, r3
 801ab48:	9b01      	ldr	r3, [sp, #4]
 801ab4a:	9a03      	ldr	r2, [sp, #12]
 801ab4c:	3b01      	subs	r3, #1
 801ab4e:	9301      	str	r3, [sp, #4]
 801ab50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab52:	bf08      	it	eq
 801ab54:	4613      	moveq	r3, r2
 801ab56:	e76c      	b.n	801aa32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801ab58:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ab5c:	d41e      	bmi.n	801ab9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ab5e:	45f2      	cmp	sl, lr
 801ab60:	da1c      	bge.n	801ab9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ab62:	ea5f 4922 	movs.w	r9, r2, asr #16
 801ab66:	d419      	bmi.n	801ab9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ab68:	45c1      	cmp	r9, r8
 801ab6a:	da17      	bge.n	801ab9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ab6c:	9902      	ldr	r1, [sp, #8]
 801ab6e:	fb0e 1909 	mla	r9, lr, r9, r1
 801ab72:	f819 900a 	ldrb.w	r9, [r9, sl]
 801ab76:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ab7a:	f816 b009 	ldrb.w	fp, [r6, r9]
 801ab7e:	eb06 0a09 	add.w	sl, r6, r9
 801ab82:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801ab86:	f804 b009 	strb.w	fp, [r4, r9]
 801ab8a:	44a1      	add	r9, r4
 801ab8c:	f89a b001 	ldrb.w	fp, [sl, #1]
 801ab90:	f889 b001 	strb.w	fp, [r9, #1]
 801ab94:	f89a a002 	ldrb.w	sl, [sl, #2]
 801ab98:	f889 a002 	strb.w	sl, [r9, #2]
 801ab9c:	4460      	add	r0, ip
 801ab9e:	443a      	add	r2, r7
 801aba0:	3501      	adds	r5, #1
 801aba2:	e797      	b.n	801aad4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801aba4:	b005      	add	sp, #20
 801aba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801abaa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801abaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abae:	b087      	sub	sp, #28
 801abb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801abb4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801abb6:	9204      	str	r2, [sp, #16]
 801abb8:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801abbc:	6870      	ldr	r0, [r6, #4]
 801abbe:	9205      	str	r2, [sp, #20]
 801abc0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801abc2:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801abc6:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801abca:	9101      	str	r1, [sp, #4]
 801abcc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801abd0:	fb00 2505 	mla	r5, r0, r5, r2
 801abd4:	6832      	ldr	r2, [r6, #0]
 801abd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801abda:	4415      	add	r5, r2
 801abdc:	6822      	ldr	r2, [r4, #0]
 801abde:	9202      	str	r2, [sp, #8]
 801abe0:	6862      	ldr	r2, [r4, #4]
 801abe2:	3204      	adds	r2, #4
 801abe4:	9203      	str	r2, [sp, #12]
 801abe6:	9a01      	ldr	r2, [sp, #4]
 801abe8:	2a00      	cmp	r2, #0
 801abea:	dc03      	bgt.n	801abf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801abec:	9a04      	ldr	r2, [sp, #16]
 801abee:	2a00      	cmp	r2, #0
 801abf0:	f340 8124 	ble.w	801ae3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801abf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801abf6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801abfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801abfc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	dd0e      	ble.n	801ac22 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801ac04:	1422      	asrs	r2, r4, #16
 801ac06:	d405      	bmi.n	801ac14 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ac08:	4572      	cmp	r2, lr
 801ac0a:	da03      	bge.n	801ac14 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ac0c:	1402      	asrs	r2, r0, #16
 801ac0e:	d401      	bmi.n	801ac14 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ac10:	4542      	cmp	r2, r8
 801ac12:	db07      	blt.n	801ac24 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ac14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ac16:	3b01      	subs	r3, #1
 801ac18:	3503      	adds	r5, #3
 801ac1a:	4414      	add	r4, r2
 801ac1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac1e:	4410      	add	r0, r2
 801ac20:	e7ee      	b.n	801ac00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801ac22:	d010      	beq.n	801ac46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801ac24:	1e5a      	subs	r2, r3, #1
 801ac26:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ac28:	fb06 4602 	mla	r6, r6, r2, r4
 801ac2c:	1436      	asrs	r6, r6, #16
 801ac2e:	d546      	bpl.n	801acbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801ac30:	4699      	mov	r9, r3
 801ac32:	462f      	mov	r7, r5
 801ac34:	f1b9 0f00 	cmp.w	r9, #0
 801ac38:	f300 80a5 	bgt.w	801ad86 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801ac3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ac40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ac44:	441d      	add	r5, r3
 801ac46:	9b01      	ldr	r3, [sp, #4]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	f340 80f7 	ble.w	801ae3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ac4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ac52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ac54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ac58:	eeb0 6a62 	vmov.f32	s12, s5
 801ac5c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ac60:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ac64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac68:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ac6c:	eeb0 6a43 	vmov.f32	s12, s6
 801ac70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac74:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ac78:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ac7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ac80:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac84:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ac88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ac8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ac90:	ee12 2a90 	vmov	r2, s5
 801ac94:	eef0 2a47 	vmov.f32	s5, s14
 801ac98:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac9c:	ee13 2a10 	vmov	r2, s6
 801aca0:	9313      	str	r3, [sp, #76]	; 0x4c
 801aca2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aca4:	eeb0 3a67 	vmov.f32	s6, s15
 801aca8:	fb92 f3f3 	sdiv	r3, r2, r3
 801acac:	9314      	str	r3, [sp, #80]	; 0x50
 801acae:	9b01      	ldr	r3, [sp, #4]
 801acb0:	9a04      	ldr	r2, [sp, #16]
 801acb2:	3b01      	subs	r3, #1
 801acb4:	9301      	str	r3, [sp, #4]
 801acb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acb8:	bf08      	it	eq
 801acba:	4613      	moveq	r3, r2
 801acbc:	e793      	b.n	801abe6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801acbe:	4576      	cmp	r6, lr
 801acc0:	dab6      	bge.n	801ac30 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801acc2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801acc4:	fb06 0202 	mla	r2, r6, r2, r0
 801acc8:	1412      	asrs	r2, r2, #16
 801acca:	d4b1      	bmi.n	801ac30 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801accc:	4542      	cmp	r2, r8
 801acce:	daaf      	bge.n	801ac30 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801acd0:	1cef      	adds	r7, r5, #3
 801acd2:	4699      	mov	r9, r3
 801acd4:	f1b9 0f00 	cmp.w	r9, #0
 801acd8:	ddb0      	ble.n	801ac3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801acda:	9902      	ldr	r1, [sp, #8]
 801acdc:	1402      	asrs	r2, r0, #16
 801acde:	1426      	asrs	r6, r4, #16
 801ace0:	fb0e 1202 	mla	r2, lr, r2, r1
 801ace4:	9903      	ldr	r1, [sp, #12]
 801ace6:	5d92      	ldrb	r2, [r2, r6]
 801ace8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801acec:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801acf0:	d041      	beq.n	801ad76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801acf2:	9a05      	ldr	r2, [sp, #20]
 801acf4:	fa5f fb86 	uxtb.w	fp, r6
 801acf8:	fb02 fc0c 	mul.w	ip, r2, ip
 801acfc:	f10c 0201 	add.w	r2, ip, #1
 801ad00:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801ad04:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801ad08:	1212      	asrs	r2, r2, #8
 801ad0a:	fa1f fa82 	uxth.w	sl, r2
 801ad0e:	43d2      	mvns	r2, r2
 801ad10:	fb1b fb0a 	smulbb	fp, fp, sl
 801ad14:	b2d2      	uxtb	r2, r2
 801ad16:	fb0c bc02 	mla	ip, ip, r2, fp
 801ad1a:	fa1f fc8c 	uxth.w	ip, ip
 801ad1e:	f10c 0b01 	add.w	fp, ip, #1
 801ad22:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ad26:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ad2a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ad2e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ad32:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ad36:	fb16 fa0a 	smulbb	sl, r6, sl
 801ad3a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ad3e:	f807 cc03 	strb.w	ip, [r7, #-3]
 801ad42:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801ad46:	fb06 aa02 	mla	sl, r6, r2, sl
 801ad4a:	fb0c bc02 	mla	ip, ip, r2, fp
 801ad4e:	fa1f fa8a 	uxth.w	sl, sl
 801ad52:	fa1f fc8c 	uxth.w	ip, ip
 801ad56:	f10a 0601 	add.w	r6, sl, #1
 801ad5a:	f10c 0b01 	add.w	fp, ip, #1
 801ad5e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ad62:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ad66:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ad6a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ad6e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ad72:	f807 cc02 	strb.w	ip, [r7, #-2]
 801ad76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ad78:	3703      	adds	r7, #3
 801ad7a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ad7e:	4414      	add	r4, r2
 801ad80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ad82:	4410      	add	r0, r2
 801ad84:	e7a6      	b.n	801acd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801ad86:	1426      	asrs	r6, r4, #16
 801ad88:	d450      	bmi.n	801ae2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801ad8a:	4576      	cmp	r6, lr
 801ad8c:	da4e      	bge.n	801ae2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801ad8e:	1402      	asrs	r2, r0, #16
 801ad90:	d44c      	bmi.n	801ae2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801ad92:	4542      	cmp	r2, r8
 801ad94:	da4a      	bge.n	801ae2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801ad96:	9902      	ldr	r1, [sp, #8]
 801ad98:	fb0e 1202 	mla	r2, lr, r2, r1
 801ad9c:	9903      	ldr	r1, [sp, #12]
 801ad9e:	5d92      	ldrb	r2, [r2, r6]
 801ada0:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801ada4:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801ada8:	d040      	beq.n	801ae2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801adaa:	9a05      	ldr	r2, [sp, #20]
 801adac:	fa5f fb86 	uxtb.w	fp, r6
 801adb0:	fb02 fc0c 	mul.w	ip, r2, ip
 801adb4:	f10c 0201 	add.w	r2, ip, #1
 801adb8:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801adbc:	f897 c000 	ldrb.w	ip, [r7]
 801adc0:	1212      	asrs	r2, r2, #8
 801adc2:	fa1f fa82 	uxth.w	sl, r2
 801adc6:	43d2      	mvns	r2, r2
 801adc8:	fb1b fb0a 	smulbb	fp, fp, sl
 801adcc:	b2d2      	uxtb	r2, r2
 801adce:	fb0c bc02 	mla	ip, ip, r2, fp
 801add2:	fa1f fc8c 	uxth.w	ip, ip
 801add6:	f10c 0b01 	add.w	fp, ip, #1
 801adda:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801adde:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ade2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ade6:	fb1b fb0a 	smulbb	fp, fp, sl
 801adea:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801adee:	fb16 fa0a 	smulbb	sl, r6, sl
 801adf2:	78be      	ldrb	r6, [r7, #2]
 801adf4:	f887 c000 	strb.w	ip, [r7]
 801adf8:	f897 c001 	ldrb.w	ip, [r7, #1]
 801adfc:	fb06 aa02 	mla	sl, r6, r2, sl
 801ae00:	fb0c bc02 	mla	ip, ip, r2, fp
 801ae04:	fa1f fa8a 	uxth.w	sl, sl
 801ae08:	fa1f fc8c 	uxth.w	ip, ip
 801ae0c:	f10a 0601 	add.w	r6, sl, #1
 801ae10:	f10c 0b01 	add.w	fp, ip, #1
 801ae14:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ae18:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ae1c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ae20:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ae24:	f887 a002 	strb.w	sl, [r7, #2]
 801ae28:	f887 c001 	strb.w	ip, [r7, #1]
 801ae2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ae2e:	3703      	adds	r7, #3
 801ae30:	f109 39ff 	add.w	r9, r9, #4294967295
 801ae34:	4414      	add	r4, r2
 801ae36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ae38:	4410      	add	r0, r2
 801ae3a:	e6fb      	b.n	801ac34 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ae3c:	b007      	add	sp, #28
 801ae3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae42 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ae42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae46:	b085      	sub	sp, #20
 801ae48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ae4c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ae4e:	9203      	str	r2, [sp, #12]
 801ae50:	6870      	ldr	r0, [r6, #4]
 801ae52:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801ae54:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ae58:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801ae5c:	9100      	str	r1, [sp, #0]
 801ae5e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ae62:	fb00 2404 	mla	r4, r0, r4, r2
 801ae66:	6832      	ldr	r2, [r6, #0]
 801ae68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ae6c:	4414      	add	r4, r2
 801ae6e:	682a      	ldr	r2, [r5, #0]
 801ae70:	9201      	str	r2, [sp, #4]
 801ae72:	686a      	ldr	r2, [r5, #4]
 801ae74:	3204      	adds	r2, #4
 801ae76:	9202      	str	r2, [sp, #8]
 801ae78:	9a00      	ldr	r2, [sp, #0]
 801ae7a:	2a00      	cmp	r2, #0
 801ae7c:	dc03      	bgt.n	801ae86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801ae7e:	9a03      	ldr	r2, [sp, #12]
 801ae80:	2a00      	cmp	r2, #0
 801ae82:	f340 8131 	ble.w	801b0e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801ae86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae88:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ae8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ae8e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	dd0e      	ble.n	801aeb4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801ae96:	1405      	asrs	r5, r0, #16
 801ae98:	d405      	bmi.n	801aea6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801ae9a:	4575      	cmp	r5, lr
 801ae9c:	da03      	bge.n	801aea6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801ae9e:	1415      	asrs	r5, r2, #16
 801aea0:	d401      	bmi.n	801aea6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801aea2:	4545      	cmp	r5, r8
 801aea4:	db07      	blt.n	801aeb6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801aea6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801aea8:	3b01      	subs	r3, #1
 801aeaa:	3403      	adds	r4, #3
 801aeac:	4428      	add	r0, r5
 801aeae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801aeb0:	442a      	add	r2, r5
 801aeb2:	e7ee      	b.n	801ae92 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801aeb4:	d06f      	beq.n	801af96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801aeb6:	1e5d      	subs	r5, r3, #1
 801aeb8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801aeba:	fb06 0605 	mla	r6, r6, r5, r0
 801aebe:	1436      	asrs	r6, r6, #16
 801aec0:	d460      	bmi.n	801af84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801aec2:	4576      	cmp	r6, lr
 801aec4:	da5e      	bge.n	801af84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801aec6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801aec8:	fb06 2505 	mla	r5, r6, r5, r2
 801aecc:	142d      	asrs	r5, r5, #16
 801aece:	d459      	bmi.n	801af84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801aed0:	4545      	cmp	r5, r8
 801aed2:	da57      	bge.n	801af84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801aed4:	1ce5      	adds	r5, r4, #3
 801aed6:	469a      	mov	sl, r3
 801aed8:	f1ba 0f00 	cmp.w	sl, #0
 801aedc:	dd56      	ble.n	801af8c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801aede:	9901      	ldr	r1, [sp, #4]
 801aee0:	1416      	asrs	r6, r2, #16
 801aee2:	1407      	asrs	r7, r0, #16
 801aee4:	fb0e 1606 	mla	r6, lr, r6, r1
 801aee8:	9902      	ldr	r1, [sp, #8]
 801aeea:	5df6      	ldrb	r6, [r6, r7]
 801aeec:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801aef0:	0e37      	lsrs	r7, r6, #24
 801aef2:	2fff      	cmp	r7, #255	; 0xff
 801aef4:	f000 80ef 	beq.w	801b0d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801aef8:	fa5f fc87 	uxtb.w	ip, r7
 801aefc:	b3d7      	cbz	r7, 801af74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801aefe:	fa1f f78c 	uxth.w	r7, ip
 801af02:	ea6f 0c0c 	mvn.w	ip, ip
 801af06:	fa5f fb86 	uxtb.w	fp, r6
 801af0a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801af0e:	fa5f fc8c 	uxtb.w	ip, ip
 801af12:	fb1b fb07 	smulbb	fp, fp, r7
 801af16:	fb09 b90c 	mla	r9, r9, ip, fp
 801af1a:	fa1f f989 	uxth.w	r9, r9
 801af1e:	f109 0b01 	add.w	fp, r9, #1
 801af22:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801af26:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801af2a:	fb1b fb0c 	smulbb	fp, fp, ip
 801af2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801af32:	f805 9c03 	strb.w	r9, [r5, #-3]
 801af36:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801af3a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801af3e:	fb09 b907 	mla	r9, r9, r7, fp
 801af42:	fa1f f989 	uxth.w	r9, r9
 801af46:	f109 0b01 	add.w	fp, r9, #1
 801af4a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801af4e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801af52:	f805 9c02 	strb.w	r9, [r5, #-2]
 801af56:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801af5a:	fb19 fc0c 	smulbb	ip, r9, ip
 801af5e:	fb06 c607 	mla	r6, r6, r7, ip
 801af62:	b2b6      	uxth	r6, r6
 801af64:	f106 0c01 	add.w	ip, r6, #1
 801af68:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801af6c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801af70:	f805 cc01 	strb.w	ip, [r5, #-1]
 801af74:	9911      	ldr	r1, [sp, #68]	; 0x44
 801af76:	3503      	adds	r5, #3
 801af78:	f10a 3aff 	add.w	sl, sl, #4294967295
 801af7c:	4408      	add	r0, r1
 801af7e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801af80:	440a      	add	r2, r1
 801af82:	e7a9      	b.n	801aed8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801af84:	2600      	movs	r6, #0
 801af86:	1b9d      	subs	r5, r3, r6
 801af88:	2d00      	cmp	r5, #0
 801af8a:	dc40      	bgt.n	801b00e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801af8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801af90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801af94:	441c      	add	r4, r3
 801af96:	9b00      	ldr	r3, [sp, #0]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	f340 80a5 	ble.w	801b0e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801af9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801afa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801afa4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801afa8:	eeb0 6a62 	vmov.f32	s12, s5
 801afac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801afb0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801afb4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801afb8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801afbc:	eeb0 6a43 	vmov.f32	s12, s6
 801afc0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801afc4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801afc8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801afcc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801afd0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801afd4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801afd8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801afdc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801afe0:	ee12 2a90 	vmov	r2, s5
 801afe4:	eef0 2a47 	vmov.f32	s5, s14
 801afe8:	fb92 f3f3 	sdiv	r3, r2, r3
 801afec:	ee13 2a10 	vmov	r2, s6
 801aff0:	9311      	str	r3, [sp, #68]	; 0x44
 801aff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aff4:	eeb0 3a67 	vmov.f32	s6, s15
 801aff8:	fb92 f3f3 	sdiv	r3, r2, r3
 801affc:	9312      	str	r3, [sp, #72]	; 0x48
 801affe:	9b00      	ldr	r3, [sp, #0]
 801b000:	9a03      	ldr	r2, [sp, #12]
 801b002:	3b01      	subs	r3, #1
 801b004:	9300      	str	r3, [sp, #0]
 801b006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b008:	bf08      	it	eq
 801b00a:	4613      	moveq	r3, r2
 801b00c:	e734      	b.n	801ae78 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801b00e:	1407      	asrs	r7, r0, #16
 801b010:	d450      	bmi.n	801b0b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b012:	4577      	cmp	r7, lr
 801b014:	da4e      	bge.n	801b0b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b016:	1415      	asrs	r5, r2, #16
 801b018:	d44c      	bmi.n	801b0b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b01a:	4545      	cmp	r5, r8
 801b01c:	da4a      	bge.n	801b0b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b01e:	9901      	ldr	r1, [sp, #4]
 801b020:	fb0e 1505 	mla	r5, lr, r5, r1
 801b024:	9902      	ldr	r1, [sp, #8]
 801b026:	5ded      	ldrb	r5, [r5, r7]
 801b028:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801b02c:	0e2f      	lsrs	r7, r5, #24
 801b02e:	2fff      	cmp	r7, #255	; 0xff
 801b030:	d046      	beq.n	801b0c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801b032:	fa5f f987 	uxtb.w	r9, r7
 801b036:	b3ef      	cbz	r7, 801b0b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b038:	fa1f fc89 	uxth.w	ip, r9
 801b03c:	ea6f 0909 	mvn.w	r9, r9
 801b040:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b044:	fa5f fb85 	uxtb.w	fp, r5
 801b048:	f814 a007 	ldrb.w	sl, [r4, r7]
 801b04c:	fa5f f989 	uxtb.w	r9, r9
 801b050:	fb1b fb0c 	smulbb	fp, fp, ip
 801b054:	fb0a ba09 	mla	sl, sl, r9, fp
 801b058:	fa1f fa8a 	uxth.w	sl, sl
 801b05c:	f10a 0b01 	add.w	fp, sl, #1
 801b060:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b064:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b068:	f804 a007 	strb.w	sl, [r4, r7]
 801b06c:	4427      	add	r7, r4
 801b06e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b072:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801b076:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b07a:	fb1b fb09 	smulbb	fp, fp, r9
 801b07e:	fb0a ba0c 	mla	sl, sl, ip, fp
 801b082:	fa1f fa8a 	uxth.w	sl, sl
 801b086:	f10a 0b01 	add.w	fp, sl, #1
 801b08a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b08e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b092:	f887 a001 	strb.w	sl, [r7, #1]
 801b096:	f897 a002 	ldrb.w	sl, [r7, #2]
 801b09a:	fb1a f909 	smulbb	r9, sl, r9
 801b09e:	fb05 950c 	mla	r5, r5, ip, r9
 801b0a2:	b2ad      	uxth	r5, r5
 801b0a4:	f105 0901 	add.w	r9, r5, #1
 801b0a8:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801b0ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b0b0:	f887 9002 	strb.w	r9, [r7, #2]
 801b0b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b0b6:	3601      	adds	r6, #1
 801b0b8:	4408      	add	r0, r1
 801b0ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b0bc:	440a      	add	r2, r1
 801b0be:	e762      	b.n	801af86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801b0c0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b0c4:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801b0c8:	55e5      	strb	r5, [r4, r7]
 801b0ca:	4427      	add	r7, r4
 801b0cc:	0c2d      	lsrs	r5, r5, #16
 801b0ce:	f887 c001 	strb.w	ip, [r7, #1]
 801b0d2:	70bd      	strb	r5, [r7, #2]
 801b0d4:	e7ee      	b.n	801b0b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b0d6:	0a37      	lsrs	r7, r6, #8
 801b0d8:	f805 6c03 	strb.w	r6, [r5, #-3]
 801b0dc:	0c36      	lsrs	r6, r6, #16
 801b0de:	f805 7c02 	strb.w	r7, [r5, #-2]
 801b0e2:	f805 6c01 	strb.w	r6, [r5, #-1]
 801b0e6:	e745      	b.n	801af74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801b0e8:	b005      	add	sp, #20
 801b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b0ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b0ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0f2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b0f4:	9201      	str	r2, [sp, #4]
 801b0f6:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801b0fa:	6870      	ldr	r0, [r6, #4]
 801b0fc:	9200      	str	r2, [sp, #0]
 801b0fe:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801b102:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801b106:	fa1f fc85 	uxth.w	ip, r5
 801b10a:	43ed      	mvns	r5, r5
 801b10c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b110:	b2ed      	uxtb	r5, r5
 801b112:	fb00 2404 	mla	r4, r0, r4, r2
 801b116:	6832      	ldr	r2, [r6, #0]
 801b118:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b11c:	4414      	add	r4, r2
 801b11e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b120:	f8d2 8000 	ldr.w	r8, [r2]
 801b124:	2900      	cmp	r1, #0
 801b126:	dc03      	bgt.n	801b130 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801b128:	9a01      	ldr	r2, [sp, #4]
 801b12a:	2a00      	cmp	r2, #0
 801b12c:	f340 8104 	ble.w	801b338 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801b130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b132:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b136:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b138:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	dd0f      	ble.n	801b160 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b140:	1406      	asrs	r6, r0, #16
 801b142:	d406      	bmi.n	801b152 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b144:	4576      	cmp	r6, lr
 801b146:	da04      	bge.n	801b152 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b148:	1416      	asrs	r6, r2, #16
 801b14a:	d402      	bmi.n	801b152 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b14c:	9f00      	ldr	r7, [sp, #0]
 801b14e:	42be      	cmp	r6, r7
 801b150:	db07      	blt.n	801b162 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b152:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b154:	3b01      	subs	r3, #1
 801b156:	3403      	adds	r4, #3
 801b158:	4430      	add	r0, r6
 801b15a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b15c:	4432      	add	r2, r6
 801b15e:	e7ed      	b.n	801b13c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801b160:	d05f      	beq.n	801b222 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801b162:	1e5e      	subs	r6, r3, #1
 801b164:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b166:	fb07 0706 	mla	r7, r7, r6, r0
 801b16a:	143f      	asrs	r7, r7, #16
 801b16c:	d450      	bmi.n	801b210 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b16e:	4577      	cmp	r7, lr
 801b170:	da4e      	bge.n	801b210 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b172:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b174:	fb07 2606 	mla	r6, r7, r6, r2
 801b178:	1436      	asrs	r6, r6, #16
 801b17a:	d449      	bmi.n	801b210 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b17c:	9f00      	ldr	r7, [sp, #0]
 801b17e:	42be      	cmp	r6, r7
 801b180:	da46      	bge.n	801b210 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801b182:	1ce6      	adds	r6, r4, #3
 801b184:	4699      	mov	r9, r3
 801b186:	f1b9 0f00 	cmp.w	r9, #0
 801b18a:	f106 0603 	add.w	r6, r6, #3
 801b18e:	dd43      	ble.n	801b218 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801b190:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b194:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b198:	1417      	asrs	r7, r2, #16
 801b19a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b19e:	fb1b fb05 	smulbb	fp, fp, r5
 801b1a2:	fb0e a707 	mla	r7, lr, r7, sl
 801b1a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b1aa:	eb08 0a07 	add.w	sl, r8, r7
 801b1ae:	f818 7007 	ldrb.w	r7, [r8, r7]
 801b1b2:	fb07 b70c 	mla	r7, r7, ip, fp
 801b1b6:	b2bf      	uxth	r7, r7
 801b1b8:	f107 0b01 	add.w	fp, r7, #1
 801b1bc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b1c0:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b1c4:	fb1b fb05 	smulbb	fp, fp, r5
 801b1c8:	123f      	asrs	r7, r7, #8
 801b1ca:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b1ce:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b1d2:	fb07 b70c 	mla	r7, r7, ip, fp
 801b1d6:	b2bf      	uxth	r7, r7
 801b1d8:	f107 0b01 	add.w	fp, r7, #1
 801b1dc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b1e0:	123f      	asrs	r7, r7, #8
 801b1e2:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b1e6:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b1ea:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b1ee:	fb1a fa05 	smulbb	sl, sl, r5
 801b1f2:	fb07 a70c 	mla	r7, r7, ip, sl
 801b1f6:	b2bf      	uxth	r7, r7
 801b1f8:	f107 0a01 	add.w	sl, r7, #1
 801b1fc:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b200:	123f      	asrs	r7, r7, #8
 801b202:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b206:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b208:	4438      	add	r0, r7
 801b20a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b20c:	443a      	add	r2, r7
 801b20e:	e7ba      	b.n	801b186 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b210:	2700      	movs	r7, #0
 801b212:	1bde      	subs	r6, r3, r7
 801b214:	2e00      	cmp	r6, #0
 801b216:	dc3f      	bgt.n	801b298 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b218:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b21c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b220:	441c      	add	r4, r3
 801b222:	2900      	cmp	r1, #0
 801b224:	f340 8088 	ble.w	801b338 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801b228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b22c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b22e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b232:	3901      	subs	r1, #1
 801b234:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b238:	eef0 6a62 	vmov.f32	s13, s5
 801b23c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b240:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b244:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b248:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801b24c:	eef0 6a43 	vmov.f32	s13, s6
 801b250:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b254:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801b258:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b25c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b260:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b264:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b268:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b26c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b270:	ee12 2a90 	vmov	r2, s5
 801b274:	eef0 2a47 	vmov.f32	s5, s14
 801b278:	fb92 f3f3 	sdiv	r3, r2, r3
 801b27c:	ee13 2a10 	vmov	r2, s6
 801b280:	930f      	str	r3, [sp, #60]	; 0x3c
 801b282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b284:	eeb0 3a67 	vmov.f32	s6, s15
 801b288:	fb92 f3f3 	sdiv	r3, r2, r3
 801b28c:	9a01      	ldr	r2, [sp, #4]
 801b28e:	9310      	str	r3, [sp, #64]	; 0x40
 801b290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b292:	bf08      	it	eq
 801b294:	4613      	moveq	r3, r2
 801b296:	e745      	b.n	801b124 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801b298:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b29c:	d446      	bmi.n	801b32c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801b29e:	45f2      	cmp	sl, lr
 801b2a0:	da44      	bge.n	801b32c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801b2a2:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b2a6:	d441      	bmi.n	801b32c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801b2a8:	9e00      	ldr	r6, [sp, #0]
 801b2aa:	45b1      	cmp	r9, r6
 801b2ac:	da3e      	bge.n	801b32c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801b2ae:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b2b2:	fb0e a909 	mla	r9, lr, r9, sl
 801b2b6:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b2ba:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b2be:	fb1b fb05 	smulbb	fp, fp, r5
 801b2c2:	eb08 0a09 	add.w	sl, r8, r9
 801b2c6:	f818 9009 	ldrb.w	r9, [r8, r9]
 801b2ca:	fb09 b90c 	mla	r9, r9, ip, fp
 801b2ce:	fa1f f989 	uxth.w	r9, r9
 801b2d2:	f109 0b01 	add.w	fp, r9, #1
 801b2d6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b2da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b2de:	f804 9006 	strb.w	r9, [r4, r6]
 801b2e2:	4426      	add	r6, r4
 801b2e4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b2e8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b2ec:	fb1b fb05 	smulbb	fp, fp, r5
 801b2f0:	fb09 b90c 	mla	r9, r9, ip, fp
 801b2f4:	fa1f f989 	uxth.w	r9, r9
 801b2f8:	f109 0b01 	add.w	fp, r9, #1
 801b2fc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b300:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b304:	f886 9001 	strb.w	r9, [r6, #1]
 801b308:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b30c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b310:	fb1a fa05 	smulbb	sl, sl, r5
 801b314:	fb09 a90c 	mla	r9, r9, ip, sl
 801b318:	fa1f f989 	uxth.w	r9, r9
 801b31c:	f109 0a01 	add.w	sl, r9, #1
 801b320:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b324:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b328:	f886 9002 	strb.w	r9, [r6, #2]
 801b32c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b32e:	3701      	adds	r7, #1
 801b330:	4430      	add	r0, r6
 801b332:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b334:	4432      	add	r2, r6
 801b336:	e76c      	b.n	801b212 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801b338:	b003      	add	sp, #12
 801b33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b33e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b33e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b342:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b344:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b348:	9201      	str	r2, [sp, #4]
 801b34a:	6868      	ldr	r0, [r5, #4]
 801b34c:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801b350:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801b354:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b358:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801b35c:	fb00 2404 	mla	r4, r0, r4, r2
 801b360:	682a      	ldr	r2, [r5, #0]
 801b362:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b366:	4414      	add	r4, r2
 801b368:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b36a:	f8d2 9000 	ldr.w	r9, [r2]
 801b36e:	2900      	cmp	r1, #0
 801b370:	dc03      	bgt.n	801b37a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801b372:	9a01      	ldr	r2, [sp, #4]
 801b374:	2a00      	cmp	r2, #0
 801b376:	f340 80a8 	ble.w	801b4ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801b37a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b37c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b382:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b386:	2b00      	cmp	r3, #0
 801b388:	dd0c      	ble.n	801b3a4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b38a:	1405      	asrs	r5, r0, #16
 801b38c:	d405      	bmi.n	801b39a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801b38e:	4565      	cmp	r5, ip
 801b390:	da03      	bge.n	801b39a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801b392:	1415      	asrs	r5, r2, #16
 801b394:	d401      	bmi.n	801b39a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801b396:	4575      	cmp	r5, lr
 801b398:	db05      	blt.n	801b3a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801b39a:	4438      	add	r0, r7
 801b39c:	4432      	add	r2, r6
 801b39e:	3b01      	subs	r3, #1
 801b3a0:	3403      	adds	r4, #3
 801b3a2:	e7f0      	b.n	801b386 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801b3a4:	d03a      	beq.n	801b41c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801b3a6:	1e5d      	subs	r5, r3, #1
 801b3a8:	fb07 0805 	mla	r8, r7, r5, r0
 801b3ac:	ea5f 4828 	movs.w	r8, r8, asr #16
 801b3b0:	d429      	bmi.n	801b406 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801b3b2:	45e0      	cmp	r8, ip
 801b3b4:	da27      	bge.n	801b406 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801b3b6:	fb06 2505 	mla	r5, r6, r5, r2
 801b3ba:	142d      	asrs	r5, r5, #16
 801b3bc:	d423      	bmi.n	801b406 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801b3be:	4575      	cmp	r5, lr
 801b3c0:	da21      	bge.n	801b406 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801b3c2:	f104 0803 	add.w	r8, r4, #3
 801b3c6:	469a      	mov	sl, r3
 801b3c8:	f1ba 0f00 	cmp.w	sl, #0
 801b3cc:	f108 0803 	add.w	r8, r8, #3
 801b3d0:	dd1f      	ble.n	801b412 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801b3d2:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801b3d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b3da:	1415      	asrs	r5, r2, #16
 801b3dc:	4438      	add	r0, r7
 801b3de:	4432      	add	r2, r6
 801b3e0:	fb0c b505 	mla	r5, ip, r5, fp
 801b3e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b3e8:	eb09 0b05 	add.w	fp, r9, r5
 801b3ec:	f819 5005 	ldrb.w	r5, [r9, r5]
 801b3f0:	f808 5c06 	strb.w	r5, [r8, #-6]
 801b3f4:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801b3f8:	f808 5c05 	strb.w	r5, [r8, #-5]
 801b3fc:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801b400:	f808 5c04 	strb.w	r5, [r8, #-4]
 801b404:	e7e0      	b.n	801b3c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801b406:	2500      	movs	r5, #0
 801b408:	eba3 0805 	sub.w	r8, r3, r5
 801b40c:	f1b8 0f00 	cmp.w	r8, #0
 801b410:	dc38      	bgt.n	801b484 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801b412:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b416:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b41a:	441c      	add	r4, r3
 801b41c:	2900      	cmp	r1, #0
 801b41e:	dd54      	ble.n	801b4ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801b420:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b426:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b42a:	3901      	subs	r1, #1
 801b42c:	eeb0 6a62 	vmov.f32	s12, s5
 801b430:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b434:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b438:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b43c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b440:	eeb0 6a43 	vmov.f32	s12, s6
 801b444:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b448:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801b44c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b450:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b454:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b458:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b45c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b460:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b464:	ee12 2a90 	vmov	r2, s5
 801b468:	eef0 2a47 	vmov.f32	s5, s14
 801b46c:	fb92 f7f3 	sdiv	r7, r2, r3
 801b470:	ee13 2a10 	vmov	r2, s6
 801b474:	eeb0 3a67 	vmov.f32	s6, s15
 801b478:	fb92 f6f3 	sdiv	r6, r2, r3
 801b47c:	9a01      	ldr	r2, [sp, #4]
 801b47e:	bf08      	it	eq
 801b480:	4613      	moveq	r3, r2
 801b482:	e774      	b.n	801b36e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801b484:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b488:	d41b      	bmi.n	801b4c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801b48a:	45e2      	cmp	sl, ip
 801b48c:	da19      	bge.n	801b4c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801b48e:	ea5f 4822 	movs.w	r8, r2, asr #16
 801b492:	d416      	bmi.n	801b4c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801b494:	45f0      	cmp	r8, lr
 801b496:	da14      	bge.n	801b4c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801b498:	fb0c a808 	mla	r8, ip, r8, sl
 801b49c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b4a0:	f819 b008 	ldrb.w	fp, [r9, r8]
 801b4a4:	eb09 0a08 	add.w	sl, r9, r8
 801b4a8:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801b4ac:	f804 b008 	strb.w	fp, [r4, r8]
 801b4b0:	44a0      	add	r8, r4
 801b4b2:	f89a b001 	ldrb.w	fp, [sl, #1]
 801b4b6:	f888 b001 	strb.w	fp, [r8, #1]
 801b4ba:	f89a a002 	ldrb.w	sl, [sl, #2]
 801b4be:	f888 a002 	strb.w	sl, [r8, #2]
 801b4c2:	4438      	add	r0, r7
 801b4c4:	4432      	add	r2, r6
 801b4c6:	3501      	adds	r5, #1
 801b4c8:	e79e      	b.n	801b408 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801b4ca:	b003      	add	sp, #12
 801b4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4d4:	b085      	sub	sp, #20
 801b4d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b4da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b4dc:	9202      	str	r2, [sp, #8]
 801b4de:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b4e2:	6860      	ldr	r0, [r4, #4]
 801b4e4:	9203      	str	r2, [sp, #12]
 801b4e6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b4ea:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b4ee:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b4f2:	fb00 2505 	mla	r5, r0, r5, r2
 801b4f6:	6822      	ldr	r2, [r4, #0]
 801b4f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b4fc:	4415      	add	r5, r2
 801b4fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b500:	6812      	ldr	r2, [r2, #0]
 801b502:	9201      	str	r2, [sp, #4]
 801b504:	2900      	cmp	r1, #0
 801b506:	dc03      	bgt.n	801b510 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801b508:	9a02      	ldr	r2, [sp, #8]
 801b50a:	2a00      	cmp	r2, #0
 801b50c:	f340 811c 	ble.w	801b748 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b510:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b512:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b516:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b518:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	dd0e      	ble.n	801b53e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b520:	1422      	asrs	r2, r4, #16
 801b522:	d405      	bmi.n	801b530 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b524:	4572      	cmp	r2, lr
 801b526:	da03      	bge.n	801b530 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b528:	1402      	asrs	r2, r0, #16
 801b52a:	d401      	bmi.n	801b530 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801b52c:	4542      	cmp	r2, r8
 801b52e:	db07      	blt.n	801b540 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b530:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b532:	3b01      	subs	r3, #1
 801b534:	3503      	adds	r5, #3
 801b536:	4414      	add	r4, r2
 801b538:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b53a:	4410      	add	r0, r2
 801b53c:	e7ee      	b.n	801b51c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801b53e:	d072      	beq.n	801b626 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801b540:	1e5a      	subs	r2, r3, #1
 801b542:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b544:	fb06 4602 	mla	r6, r6, r2, r4
 801b548:	1436      	asrs	r6, r6, #16
 801b54a:	d461      	bmi.n	801b610 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801b54c:	4576      	cmp	r6, lr
 801b54e:	da5f      	bge.n	801b610 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801b550:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b552:	fb06 0202 	mla	r2, r6, r2, r0
 801b556:	1412      	asrs	r2, r2, #16
 801b558:	d45a      	bmi.n	801b610 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801b55a:	4542      	cmp	r2, r8
 801b55c:	da58      	bge.n	801b610 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801b55e:	1cef      	adds	r7, r5, #3
 801b560:	4699      	mov	r9, r3
 801b562:	f1b9 0f00 	cmp.w	r9, #0
 801b566:	dd59      	ble.n	801b61c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801b568:	1426      	asrs	r6, r4, #16
 801b56a:	1402      	asrs	r2, r0, #16
 801b56c:	fb0e 6202 	mla	r2, lr, r2, r6
 801b570:	9e01      	ldr	r6, [sp, #4]
 801b572:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801b576:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801b57a:	d041      	beq.n	801b600 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801b57c:	9a03      	ldr	r2, [sp, #12]
 801b57e:	fa5f fb86 	uxtb.w	fp, r6
 801b582:	fb02 fc0c 	mul.w	ip, r2, ip
 801b586:	f10c 0201 	add.w	r2, ip, #1
 801b58a:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801b58e:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801b592:	1212      	asrs	r2, r2, #8
 801b594:	fa1f fa82 	uxth.w	sl, r2
 801b598:	43d2      	mvns	r2, r2
 801b59a:	fb1b fb0a 	smulbb	fp, fp, sl
 801b59e:	b2d2      	uxtb	r2, r2
 801b5a0:	fb0c bc02 	mla	ip, ip, r2, fp
 801b5a4:	fa1f fc8c 	uxth.w	ip, ip
 801b5a8:	f10c 0b01 	add.w	fp, ip, #1
 801b5ac:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b5b0:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b5b4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b5b8:	fb1b fb0a 	smulbb	fp, fp, sl
 801b5bc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b5c0:	fb16 fa0a 	smulbb	sl, r6, sl
 801b5c4:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b5c8:	f807 cc03 	strb.w	ip, [r7, #-3]
 801b5cc:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801b5d0:	fb06 aa02 	mla	sl, r6, r2, sl
 801b5d4:	fb0c bc02 	mla	ip, ip, r2, fp
 801b5d8:	fa1f fa8a 	uxth.w	sl, sl
 801b5dc:	fa1f fc8c 	uxth.w	ip, ip
 801b5e0:	f10a 0601 	add.w	r6, sl, #1
 801b5e4:	f10c 0b01 	add.w	fp, ip, #1
 801b5e8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b5ec:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b5f0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b5f4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b5f8:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b5fc:	f807 cc02 	strb.w	ip, [r7, #-2]
 801b600:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b602:	3703      	adds	r7, #3
 801b604:	f109 39ff 	add.w	r9, r9, #4294967295
 801b608:	4414      	add	r4, r2
 801b60a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b60c:	4410      	add	r0, r2
 801b60e:	e7a8      	b.n	801b562 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b610:	f04f 0c00 	mov.w	ip, #0
 801b614:	eba3 020c 	sub.w	r2, r3, ip
 801b618:	2a00      	cmp	r2, #0
 801b61a:	dc3d      	bgt.n	801b698 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801b61c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b620:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b624:	441d      	add	r5, r3
 801b626:	2900      	cmp	r1, #0
 801b628:	f340 808e 	ble.w	801b748 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b62c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b632:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b636:	3901      	subs	r1, #1
 801b638:	eeb0 6a62 	vmov.f32	s12, s5
 801b63c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b640:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b644:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b648:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b64c:	eeb0 6a43 	vmov.f32	s12, s6
 801b650:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b654:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b658:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b65c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b660:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b664:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b668:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b66c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b670:	ee12 2a90 	vmov	r2, s5
 801b674:	eef0 2a47 	vmov.f32	s5, s14
 801b678:	fb92 f3f3 	sdiv	r3, r2, r3
 801b67c:	ee13 2a10 	vmov	r2, s6
 801b680:	9311      	str	r3, [sp, #68]	; 0x44
 801b682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b684:	eeb0 3a67 	vmov.f32	s6, s15
 801b688:	fb92 f3f3 	sdiv	r3, r2, r3
 801b68c:	9a02      	ldr	r2, [sp, #8]
 801b68e:	9312      	str	r3, [sp, #72]	; 0x48
 801b690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b692:	bf08      	it	eq
 801b694:	4613      	moveq	r3, r2
 801b696:	e735      	b.n	801b504 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801b698:	1426      	asrs	r6, r4, #16
 801b69a:	d44e      	bmi.n	801b73a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801b69c:	4576      	cmp	r6, lr
 801b69e:	da4c      	bge.n	801b73a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801b6a0:	1402      	asrs	r2, r0, #16
 801b6a2:	d44a      	bmi.n	801b73a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801b6a4:	4542      	cmp	r2, r8
 801b6a6:	da48      	bge.n	801b73a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801b6a8:	fb0e 6202 	mla	r2, lr, r2, r6
 801b6ac:	9e01      	ldr	r6, [sp, #4]
 801b6ae:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801b6b2:	0e3a      	lsrs	r2, r7, #24
 801b6b4:	d041      	beq.n	801b73a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801b6b6:	9e03      	ldr	r6, [sp, #12]
 801b6b8:	fa5f fb87 	uxtb.w	fp, r7
 801b6bc:	4372      	muls	r2, r6
 801b6be:	1c56      	adds	r6, r2, #1
 801b6c0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b6c4:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801b6c8:	1212      	asrs	r2, r2, #8
 801b6ca:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b6ce:	fa1f fa82 	uxth.w	sl, r2
 801b6d2:	43d2      	mvns	r2, r2
 801b6d4:	fb1b fb0a 	smulbb	fp, fp, sl
 801b6d8:	b2d2      	uxtb	r2, r2
 801b6da:	fb09 b902 	mla	r9, r9, r2, fp
 801b6de:	fa1f f989 	uxth.w	r9, r9
 801b6e2:	f109 0b01 	add.w	fp, r9, #1
 801b6e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b6ea:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b6ee:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b6f2:	fb1b fb0a 	smulbb	fp, fp, sl
 801b6f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6fa:	fb17 fa0a 	smulbb	sl, r7, sl
 801b6fe:	f805 9006 	strb.w	r9, [r5, r6]
 801b702:	442e      	add	r6, r5
 801b704:	78b7      	ldrb	r7, [r6, #2]
 801b706:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b70a:	fb07 aa02 	mla	sl, r7, r2, sl
 801b70e:	fb09 b902 	mla	r9, r9, r2, fp
 801b712:	fa1f fa8a 	uxth.w	sl, sl
 801b716:	fa1f f989 	uxth.w	r9, r9
 801b71a:	f10a 0701 	add.w	r7, sl, #1
 801b71e:	f109 0b01 	add.w	fp, r9, #1
 801b722:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b726:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b72a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b72e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b732:	f886 a002 	strb.w	sl, [r6, #2]
 801b736:	f886 9001 	strb.w	r9, [r6, #1]
 801b73a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b73c:	f10c 0c01 	add.w	ip, ip, #1
 801b740:	4414      	add	r4, r2
 801b742:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b744:	4410      	add	r0, r2
 801b746:	e765      	b.n	801b614 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801b748:	b005      	add	sp, #20
 801b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b74e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b74e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b752:	b085      	sub	sp, #20
 801b754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b758:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b75a:	9203      	str	r2, [sp, #12]
 801b75c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801b760:	6860      	ldr	r0, [r4, #4]
 801b762:	9201      	str	r2, [sp, #4]
 801b764:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b768:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b76c:	fb00 2505 	mla	r5, r0, r5, r2
 801b770:	6822      	ldr	r2, [r4, #0]
 801b772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b776:	4415      	add	r5, r2
 801b778:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b77a:	6812      	ldr	r2, [r2, #0]
 801b77c:	9202      	str	r2, [sp, #8]
 801b77e:	2900      	cmp	r1, #0
 801b780:	dc03      	bgt.n	801b78a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801b782:	9a03      	ldr	r2, [sp, #12]
 801b784:	2a00      	cmp	r2, #0
 801b786:	f340 8122 	ble.w	801b9ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801b78a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b78c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b790:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b792:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b796:	2b00      	cmp	r3, #0
 801b798:	dd0f      	ble.n	801b7ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801b79a:	1422      	asrs	r2, r4, #16
 801b79c:	d406      	bmi.n	801b7ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801b79e:	4572      	cmp	r2, lr
 801b7a0:	da04      	bge.n	801b7ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801b7a2:	1402      	asrs	r2, r0, #16
 801b7a4:	d402      	bmi.n	801b7ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801b7a6:	9e01      	ldr	r6, [sp, #4]
 801b7a8:	42b2      	cmp	r2, r6
 801b7aa:	db07      	blt.n	801b7bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b7ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b7ae:	3b01      	subs	r3, #1
 801b7b0:	3503      	adds	r5, #3
 801b7b2:	4414      	add	r4, r2
 801b7b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b7b6:	4410      	add	r0, r2
 801b7b8:	e7ed      	b.n	801b796 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801b7ba:	d06e      	beq.n	801b89a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801b7bc:	1e5a      	subs	r2, r3, #1
 801b7be:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b7c0:	fb06 4602 	mla	r6, r6, r2, r4
 801b7c4:	1436      	asrs	r6, r6, #16
 801b7c6:	d45d      	bmi.n	801b884 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b7c8:	4576      	cmp	r6, lr
 801b7ca:	da5b      	bge.n	801b884 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b7cc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b7ce:	fb06 0202 	mla	r2, r6, r2, r0
 801b7d2:	1412      	asrs	r2, r2, #16
 801b7d4:	d456      	bmi.n	801b884 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b7d6:	9e01      	ldr	r6, [sp, #4]
 801b7d8:	42b2      	cmp	r2, r6
 801b7da:	da53      	bge.n	801b884 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b7dc:	1cee      	adds	r6, r5, #3
 801b7de:	469a      	mov	sl, r3
 801b7e0:	f1ba 0f00 	cmp.w	sl, #0
 801b7e4:	dd54      	ble.n	801b890 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b7e6:	1427      	asrs	r7, r4, #16
 801b7e8:	1402      	asrs	r2, r0, #16
 801b7ea:	fb0e 7202 	mla	r2, lr, r2, r7
 801b7ee:	9f02      	ldr	r7, [sp, #8]
 801b7f0:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801b7f4:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801b7f8:	d03c      	beq.n	801b874 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801b7fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b7fe:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b802:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b806:	fa5f f28c 	uxtb.w	r2, ip
 801b80a:	b2ff      	uxtb	r7, r7
 801b80c:	f000 80d8 	beq.w	801b9c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801b810:	fa1f f882 	uxth.w	r8, r2
 801b814:	43d2      	mvns	r2, r2
 801b816:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801b81a:	fb17 f708 	smulbb	r7, r7, r8
 801b81e:	b2d2      	uxtb	r2, r2
 801b820:	fb19 f908 	smulbb	r9, r9, r8
 801b824:	fb0c 7702 	mla	r7, ip, r2, r7
 801b828:	fb1b f808 	smulbb	r8, fp, r8
 801b82c:	b2bf      	uxth	r7, r7
 801b82e:	f107 0c01 	add.w	ip, r7, #1
 801b832:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801b836:	123f      	asrs	r7, r7, #8
 801b838:	f806 7c03 	strb.w	r7, [r6, #-3]
 801b83c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801b840:	fb07 9902 	mla	r9, r7, r2, r9
 801b844:	fa1f f989 	uxth.w	r9, r9
 801b848:	f109 0701 	add.w	r7, r9, #1
 801b84c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801b850:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801b854:	fb07 8802 	mla	r8, r7, r2, r8
 801b858:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b85c:	fa1f f888 	uxth.w	r8, r8
 801b860:	f806 9c02 	strb.w	r9, [r6, #-2]
 801b864:	f108 0201 	add.w	r2, r8, #1
 801b868:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b86c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b870:	f806 8c01 	strb.w	r8, [r6, #-1]
 801b874:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b876:	3603      	adds	r6, #3
 801b878:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b87c:	4414      	add	r4, r2
 801b87e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b880:	4410      	add	r0, r2
 801b882:	e7ad      	b.n	801b7e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b884:	f04f 0c00 	mov.w	ip, #0
 801b888:	eba3 020c 	sub.w	r2, r3, ip
 801b88c:	2a00      	cmp	r2, #0
 801b88e:	dc3d      	bgt.n	801b90c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801b890:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b894:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b898:	441d      	add	r5, r3
 801b89a:	2900      	cmp	r1, #0
 801b89c:	f340 8097 	ble.w	801b9ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801b8a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8aa:	3901      	subs	r1, #1
 801b8ac:	eeb0 6a62 	vmov.f32	s12, s5
 801b8b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b8b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8bc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b8c0:	eeb0 6a43 	vmov.f32	s12, s6
 801b8c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8c8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b8cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b8dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b8e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b8e4:	ee12 2a90 	vmov	r2, s5
 801b8e8:	eef0 2a47 	vmov.f32	s5, s14
 801b8ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8f0:	ee13 2a10 	vmov	r2, s6
 801b8f4:	9311      	str	r3, [sp, #68]	; 0x44
 801b8f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8f8:	eeb0 3a67 	vmov.f32	s6, s15
 801b8fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b900:	9a03      	ldr	r2, [sp, #12]
 801b902:	9312      	str	r3, [sp, #72]	; 0x48
 801b904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b906:	bf08      	it	eq
 801b908:	4613      	moveq	r3, r2
 801b90a:	e738      	b.n	801b77e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801b90c:	1426      	asrs	r6, r4, #16
 801b90e:	d448      	bmi.n	801b9a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801b910:	4576      	cmp	r6, lr
 801b912:	da46      	bge.n	801b9a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801b914:	1402      	asrs	r2, r0, #16
 801b916:	d444      	bmi.n	801b9a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801b918:	9f01      	ldr	r7, [sp, #4]
 801b91a:	42ba      	cmp	r2, r7
 801b91c:	da41      	bge.n	801b9a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801b91e:	fb0e 6202 	mla	r2, lr, r2, r6
 801b922:	9e02      	ldr	r6, [sp, #8]
 801b924:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801b928:	0e3a      	lsrs	r2, r7, #24
 801b92a:	d03a      	beq.n	801b9a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801b92c:	2aff      	cmp	r2, #255	; 0xff
 801b92e:	b2d6      	uxtb	r6, r2
 801b930:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b934:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801b938:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801b93c:	b2ff      	uxtb	r7, r7
 801b93e:	d037      	beq.n	801b9b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801b940:	fa1f f986 	uxth.w	r9, r6
 801b944:	4462      	add	r2, ip
 801b946:	43f6      	mvns	r6, r6
 801b948:	f815 8002 	ldrb.w	r8, [r5, r2]
 801b94c:	fb17 f709 	smulbb	r7, r7, r9
 801b950:	fb1a fa09 	smulbb	sl, sl, r9
 801b954:	b2f6      	uxtb	r6, r6
 801b956:	fb1b f909 	smulbb	r9, fp, r9
 801b95a:	fb08 7706 	mla	r7, r8, r6, r7
 801b95e:	b2bf      	uxth	r7, r7
 801b960:	f107 0801 	add.w	r8, r7, #1
 801b964:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801b968:	123f      	asrs	r7, r7, #8
 801b96a:	54af      	strb	r7, [r5, r2]
 801b96c:	442a      	add	r2, r5
 801b96e:	7857      	ldrb	r7, [r2, #1]
 801b970:	fb07 aa06 	mla	sl, r7, r6, sl
 801b974:	fa1f fa8a 	uxth.w	sl, sl
 801b978:	f10a 0701 	add.w	r7, sl, #1
 801b97c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b980:	7897      	ldrb	r7, [r2, #2]
 801b982:	fb07 9906 	mla	r9, r7, r6, r9
 801b986:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b98a:	fa1f f989 	uxth.w	r9, r9
 801b98e:	f882 a001 	strb.w	sl, [r2, #1]
 801b992:	f109 0601 	add.w	r6, r9, #1
 801b996:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801b99a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b99e:	f882 9002 	strb.w	r9, [r2, #2]
 801b9a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b9a4:	f10c 0c01 	add.w	ip, ip, #1
 801b9a8:	4414      	add	r4, r2
 801b9aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9ac:	4410      	add	r0, r2
 801b9ae:	e76b      	b.n	801b888 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801b9b0:	4462      	add	r2, ip
 801b9b2:	54af      	strb	r7, [r5, r2]
 801b9b4:	442a      	add	r2, r5
 801b9b6:	f882 a001 	strb.w	sl, [r2, #1]
 801b9ba:	f882 b002 	strb.w	fp, [r2, #2]
 801b9be:	e7f0      	b.n	801b9a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801b9c0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801b9c4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801b9c8:	f806 bc01 	strb.w	fp, [r6, #-1]
 801b9cc:	e752      	b.n	801b874 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801b9ce:	b005      	add	sp, #20
 801b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9d8:	b087      	sub	sp, #28
 801b9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b9de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b9e0:	9204      	str	r2, [sp, #16]
 801b9e2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801b9e6:	6860      	ldr	r0, [r4, #4]
 801b9e8:	9205      	str	r2, [sp, #20]
 801b9ea:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801b9ee:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801b9f2:	9101      	str	r1, [sp, #4]
 801b9f4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b9f8:	fb00 2505 	mla	r5, r0, r5, r2
 801b9fc:	6822      	ldr	r2, [r4, #0]
 801b9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba02:	4415      	add	r5, r2
 801ba04:	f10e 0201 	add.w	r2, lr, #1
 801ba08:	f022 0201 	bic.w	r2, r2, #1
 801ba0c:	9202      	str	r2, [sp, #8]
 801ba0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ba10:	6812      	ldr	r2, [r2, #0]
 801ba12:	9203      	str	r2, [sp, #12]
 801ba14:	9a01      	ldr	r2, [sp, #4]
 801ba16:	2a00      	cmp	r2, #0
 801ba18:	dc03      	bgt.n	801ba22 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801ba1a:	9a04      	ldr	r2, [sp, #16]
 801ba1c:	2a00      	cmp	r2, #0
 801ba1e:	f340 8132 	ble.w	801bc86 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801ba22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ba24:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ba28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ba2a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	dd0e      	ble.n	801ba50 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801ba32:	1422      	asrs	r2, r4, #16
 801ba34:	d405      	bmi.n	801ba42 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ba36:	4596      	cmp	lr, r2
 801ba38:	dd03      	ble.n	801ba42 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ba3a:	1402      	asrs	r2, r0, #16
 801ba3c:	d401      	bmi.n	801ba42 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ba3e:	4542      	cmp	r2, r8
 801ba40:	db07      	blt.n	801ba52 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801ba42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba44:	3b01      	subs	r3, #1
 801ba46:	3503      	adds	r5, #3
 801ba48:	4414      	add	r4, r2
 801ba4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba4c:	4410      	add	r0, r2
 801ba4e:	e7ee      	b.n	801ba2e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801ba50:	d010      	beq.n	801ba74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ba52:	1e5a      	subs	r2, r3, #1
 801ba54:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ba56:	fb06 4602 	mla	r6, r6, r2, r4
 801ba5a:	1436      	asrs	r6, r6, #16
 801ba5c:	d546      	bpl.n	801baec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ba5e:	4699      	mov	r9, r3
 801ba60:	462e      	mov	r6, r5
 801ba62:	f1b9 0f00 	cmp.w	r9, #0
 801ba66:	f300 80ac 	bgt.w	801bbc2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801ba6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba72:	441d      	add	r5, r3
 801ba74:	9b01      	ldr	r3, [sp, #4]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	f340 8105 	ble.w	801bc86 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801ba7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba86:	eeb0 6a62 	vmov.f32	s12, s5
 801ba8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba96:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ba9a:	eeb0 6a43 	vmov.f32	s12, s6
 801ba9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801baa2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801baa6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801baaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801baae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bab2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bab6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801baba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801babe:	ee12 2a90 	vmov	r2, s5
 801bac2:	eef0 2a47 	vmov.f32	s5, s14
 801bac6:	fb92 f3f3 	sdiv	r3, r2, r3
 801baca:	ee13 2a10 	vmov	r2, s6
 801bace:	9313      	str	r3, [sp, #76]	; 0x4c
 801bad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bad2:	eeb0 3a67 	vmov.f32	s6, s15
 801bad6:	fb92 f3f3 	sdiv	r3, r2, r3
 801bada:	9314      	str	r3, [sp, #80]	; 0x50
 801badc:	9b01      	ldr	r3, [sp, #4]
 801bade:	9a04      	ldr	r2, [sp, #16]
 801bae0:	3b01      	subs	r3, #1
 801bae2:	9301      	str	r3, [sp, #4]
 801bae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bae6:	bf08      	it	eq
 801bae8:	4613      	moveq	r3, r2
 801baea:	e793      	b.n	801ba14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801baec:	45b6      	cmp	lr, r6
 801baee:	ddb6      	ble.n	801ba5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801baf0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801baf2:	fb06 0202 	mla	r2, r6, r2, r0
 801baf6:	1412      	asrs	r2, r2, #16
 801baf8:	d4b1      	bmi.n	801ba5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801bafa:	4542      	cmp	r2, r8
 801bafc:	daaf      	bge.n	801ba5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801bafe:	1cee      	adds	r6, r5, #3
 801bb00:	4699      	mov	r9, r3
 801bb02:	f1b9 0f00 	cmp.w	r9, #0
 801bb06:	ddb0      	ble.n	801ba6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801bb08:	1422      	asrs	r2, r4, #16
 801bb0a:	9902      	ldr	r1, [sp, #8]
 801bb0c:	1407      	asrs	r7, r0, #16
 801bb0e:	fb01 2707 	mla	r7, r1, r7, r2
 801bb12:	9903      	ldr	r1, [sp, #12]
 801bb14:	087a      	lsrs	r2, r7, #1
 801bb16:	5c8a      	ldrb	r2, [r1, r2]
 801bb18:	07f9      	lsls	r1, r7, #31
 801bb1a:	bf54      	ite	pl
 801bb1c:	f002 020f 	andpl.w	r2, r2, #15
 801bb20:	1112      	asrmi	r2, r2, #4
 801bb22:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bb26:	b2d2      	uxtb	r2, r2
 801bb28:	2a00      	cmp	r2, #0
 801bb2a:	d042      	beq.n	801bbb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801bb2c:	4957      	ldr	r1, [pc, #348]	; (801bc8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801bb2e:	680f      	ldr	r7, [r1, #0]
 801bb30:	9905      	ldr	r1, [sp, #20]
 801bb32:	fa5f fb87 	uxtb.w	fp, r7
 801bb36:	434a      	muls	r2, r1
 801bb38:	f102 0c01 	add.w	ip, r2, #1
 801bb3c:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801bb40:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801bb44:	1212      	asrs	r2, r2, #8
 801bb46:	fa1f fa82 	uxth.w	sl, r2
 801bb4a:	43d2      	mvns	r2, r2
 801bb4c:	fb1b fb0a 	smulbb	fp, fp, sl
 801bb50:	b2d2      	uxtb	r2, r2
 801bb52:	fb0c bc02 	mla	ip, ip, r2, fp
 801bb56:	fa1f fc8c 	uxth.w	ip, ip
 801bb5a:	f10c 0b01 	add.w	fp, ip, #1
 801bb5e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bb62:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bb66:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bb6a:	fb1b fb0a 	smulbb	fp, fp, sl
 801bb6e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bb72:	fb17 fa0a 	smulbb	sl, r7, sl
 801bb76:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801bb7a:	f806 cc03 	strb.w	ip, [r6, #-3]
 801bb7e:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801bb82:	fb07 aa02 	mla	sl, r7, r2, sl
 801bb86:	fb0c bc02 	mla	ip, ip, r2, fp
 801bb8a:	fa1f fa8a 	uxth.w	sl, sl
 801bb8e:	fa1f fc8c 	uxth.w	ip, ip
 801bb92:	f10a 0701 	add.w	r7, sl, #1
 801bb96:	f10c 0b01 	add.w	fp, ip, #1
 801bb9a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bb9e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bba2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bba6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bbaa:	f806 ac01 	strb.w	sl, [r6, #-1]
 801bbae:	f806 cc02 	strb.w	ip, [r6, #-2]
 801bbb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bbb4:	3603      	adds	r6, #3
 801bbb6:	f109 39ff 	add.w	r9, r9, #4294967295
 801bbba:	4414      	add	r4, r2
 801bbbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bbbe:	4410      	add	r0, r2
 801bbc0:	e79f      	b.n	801bb02 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801bbc2:	1422      	asrs	r2, r4, #16
 801bbc4:	d457      	bmi.n	801bc76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801bbc6:	4596      	cmp	lr, r2
 801bbc8:	dd55      	ble.n	801bc76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801bbca:	1407      	asrs	r7, r0, #16
 801bbcc:	d453      	bmi.n	801bc76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801bbce:	4547      	cmp	r7, r8
 801bbd0:	da51      	bge.n	801bc76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801bbd2:	9902      	ldr	r1, [sp, #8]
 801bbd4:	fb07 2701 	mla	r7, r7, r1, r2
 801bbd8:	9903      	ldr	r1, [sp, #12]
 801bbda:	087a      	lsrs	r2, r7, #1
 801bbdc:	07ff      	lsls	r7, r7, #31
 801bbde:	5c8a      	ldrb	r2, [r1, r2]
 801bbe0:	bf54      	ite	pl
 801bbe2:	f002 020f 	andpl.w	r2, r2, #15
 801bbe6:	1112      	asrmi	r2, r2, #4
 801bbe8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bbec:	b2d2      	uxtb	r2, r2
 801bbee:	2a00      	cmp	r2, #0
 801bbf0:	d041      	beq.n	801bc76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801bbf2:	4926      	ldr	r1, [pc, #152]	; (801bc8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801bbf4:	680f      	ldr	r7, [r1, #0]
 801bbf6:	9905      	ldr	r1, [sp, #20]
 801bbf8:	fa5f fb87 	uxtb.w	fp, r7
 801bbfc:	434a      	muls	r2, r1
 801bbfe:	f102 0c01 	add.w	ip, r2, #1
 801bc02:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801bc06:	f896 c000 	ldrb.w	ip, [r6]
 801bc0a:	1212      	asrs	r2, r2, #8
 801bc0c:	fa1f fa82 	uxth.w	sl, r2
 801bc10:	43d2      	mvns	r2, r2
 801bc12:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc16:	b2d2      	uxtb	r2, r2
 801bc18:	fb0c bc02 	mla	ip, ip, r2, fp
 801bc1c:	fa1f fc8c 	uxth.w	ip, ip
 801bc20:	f10c 0b01 	add.w	fp, ip, #1
 801bc24:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bc28:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bc2c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bc30:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc34:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bc38:	fb17 fa0a 	smulbb	sl, r7, sl
 801bc3c:	78b7      	ldrb	r7, [r6, #2]
 801bc3e:	f886 c000 	strb.w	ip, [r6]
 801bc42:	f896 c001 	ldrb.w	ip, [r6, #1]
 801bc46:	fb07 aa02 	mla	sl, r7, r2, sl
 801bc4a:	fb0c bc02 	mla	ip, ip, r2, fp
 801bc4e:	fa1f fa8a 	uxth.w	sl, sl
 801bc52:	fa1f fc8c 	uxth.w	ip, ip
 801bc56:	f10a 0701 	add.w	r7, sl, #1
 801bc5a:	f10c 0b01 	add.w	fp, ip, #1
 801bc5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bc62:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bc66:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bc6a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bc6e:	f886 a002 	strb.w	sl, [r6, #2]
 801bc72:	f886 c001 	strb.w	ip, [r6, #1]
 801bc76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc78:	3603      	adds	r6, #3
 801bc7a:	f109 39ff 	add.w	r9, r9, #4294967295
 801bc7e:	4414      	add	r4, r2
 801bc80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc82:	4410      	add	r0, r2
 801bc84:	e6ed      	b.n	801ba62 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801bc86:	b007      	add	sp, #28
 801bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc8c:	2000bc90 	.word	0x2000bc90

0801bc90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc94:	b087      	sub	sp, #28
 801bc96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc9a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bc9c:	9205      	str	r2, [sp, #20]
 801bc9e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801bca2:	6860      	ldr	r0, [r4, #4]
 801bca4:	9202      	str	r2, [sp, #8]
 801bca6:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801bcaa:	9101      	str	r1, [sp, #4]
 801bcac:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801bcb0:	fb00 2606 	mla	r6, r0, r6, r2
 801bcb4:	6822      	ldr	r2, [r4, #0]
 801bcb6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801bcba:	4416      	add	r6, r2
 801bcbc:	f108 0201 	add.w	r2, r8, #1
 801bcc0:	f022 0201 	bic.w	r2, r2, #1
 801bcc4:	9203      	str	r2, [sp, #12]
 801bcc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801bcc8:	6812      	ldr	r2, [r2, #0]
 801bcca:	9204      	str	r2, [sp, #16]
 801bccc:	9a01      	ldr	r2, [sp, #4]
 801bcce:	2a00      	cmp	r2, #0
 801bcd0:	dc03      	bgt.n	801bcda <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801bcd2:	9a05      	ldr	r2, [sp, #20]
 801bcd4:	2a00      	cmp	r2, #0
 801bcd6:	f340 813a 	ble.w	801bf4e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801bcda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bcdc:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801bce0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bce2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	dd0f      	ble.n	801bd0a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801bcea:	142a      	asrs	r2, r5, #16
 801bcec:	d406      	bmi.n	801bcfc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801bcee:	4590      	cmp	r8, r2
 801bcf0:	dd04      	ble.n	801bcfc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801bcf2:	1422      	asrs	r2, r4, #16
 801bcf4:	d402      	bmi.n	801bcfc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801bcf6:	9802      	ldr	r0, [sp, #8]
 801bcf8:	4282      	cmp	r2, r0
 801bcfa:	db07      	blt.n	801bd0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801bcfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bcfe:	3b01      	subs	r3, #1
 801bd00:	3603      	adds	r6, #3
 801bd02:	4415      	add	r5, r2
 801bd04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bd06:	4414      	add	r4, r2
 801bd08:	e7ed      	b.n	801bce6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801bd0a:	d073      	beq.n	801bdf4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801bd0c:	1e5a      	subs	r2, r3, #1
 801bd0e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bd10:	fb00 5002 	mla	r0, r0, r2, r5
 801bd14:	1400      	asrs	r0, r0, #16
 801bd16:	d464      	bmi.n	801bde2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801bd18:	4580      	cmp	r8, r0
 801bd1a:	dd62      	ble.n	801bde2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801bd1c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bd1e:	fb00 4202 	mla	r2, r0, r2, r4
 801bd22:	1412      	asrs	r2, r2, #16
 801bd24:	d45d      	bmi.n	801bde2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801bd26:	9802      	ldr	r0, [sp, #8]
 801bd28:	4282      	cmp	r2, r0
 801bd2a:	da5a      	bge.n	801bde2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801bd2c:	1cf0      	adds	r0, r6, #3
 801bd2e:	469a      	mov	sl, r3
 801bd30:	f1ba 0f00 	cmp.w	sl, #0
 801bd34:	dd59      	ble.n	801bdea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801bd36:	142a      	asrs	r2, r5, #16
 801bd38:	9903      	ldr	r1, [sp, #12]
 801bd3a:	1427      	asrs	r7, r4, #16
 801bd3c:	fb01 2707 	mla	r7, r1, r7, r2
 801bd40:	9904      	ldr	r1, [sp, #16]
 801bd42:	087a      	lsrs	r2, r7, #1
 801bd44:	5c8a      	ldrb	r2, [r1, r2]
 801bd46:	07f9      	lsls	r1, r7, #31
 801bd48:	bf54      	ite	pl
 801bd4a:	f002 020f 	andpl.w	r2, r2, #15
 801bd4e:	1112      	asrmi	r2, r2, #4
 801bd50:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bd54:	b2d2      	uxtb	r2, r2
 801bd56:	2a00      	cmp	r2, #0
 801bd58:	d03b      	beq.n	801bdd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bd5a:	497e      	ldr	r1, [pc, #504]	; (801bf54 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801bd5c:	2aff      	cmp	r2, #255	; 0xff
 801bd5e:	680f      	ldr	r7, [r1, #0]
 801bd60:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801bd64:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801bd68:	b2ff      	uxtb	r7, r7
 801bd6a:	f000 80e9 	beq.w	801bf40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801bd6e:	fa1f fe82 	uxth.w	lr, r2
 801bd72:	43d2      	mvns	r2, r2
 801bd74:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801bd78:	fb17 f70e 	smulbb	r7, r7, lr
 801bd7c:	b2d2      	uxtb	r2, r2
 801bd7e:	fb19 f90e 	smulbb	r9, r9, lr
 801bd82:	fb0c 7702 	mla	r7, ip, r2, r7
 801bd86:	fb1b fe0e 	smulbb	lr, fp, lr
 801bd8a:	b2bf      	uxth	r7, r7
 801bd8c:	f107 0c01 	add.w	ip, r7, #1
 801bd90:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801bd94:	123f      	asrs	r7, r7, #8
 801bd96:	f800 7c03 	strb.w	r7, [r0, #-3]
 801bd9a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801bd9e:	fb07 9902 	mla	r9, r7, r2, r9
 801bda2:	fa1f f989 	uxth.w	r9, r9
 801bda6:	f109 0701 	add.w	r7, r9, #1
 801bdaa:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801bdae:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801bdb2:	fb07 ee02 	mla	lr, r7, r2, lr
 801bdb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bdba:	fa1f fe8e 	uxth.w	lr, lr
 801bdbe:	f800 9c02 	strb.w	r9, [r0, #-2]
 801bdc2:	f10e 0201 	add.w	r2, lr, #1
 801bdc6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801bdca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bdce:	f800 ec01 	strb.w	lr, [r0, #-1]
 801bdd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bdd4:	3003      	adds	r0, #3
 801bdd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bdda:	4415      	add	r5, r2
 801bddc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bdde:	4414      	add	r4, r2
 801bde0:	e7a6      	b.n	801bd30 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801bde2:	2700      	movs	r7, #0
 801bde4:	1bda      	subs	r2, r3, r7
 801bde6:	2a00      	cmp	r2, #0
 801bde8:	dc40      	bgt.n	801be6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801bdea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bdee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bdf2:	441e      	add	r6, r3
 801bdf4:	9b01      	ldr	r3, [sp, #4]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	f340 80a9 	ble.w	801bf4e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801bdfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be06:	eeb0 6a62 	vmov.f32	s12, s5
 801be0a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801be0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be16:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801be1a:	eeb0 6a43 	vmov.f32	s12, s6
 801be1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be22:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801be26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be2a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be2e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be3e:	ee12 2a90 	vmov	r2, s5
 801be42:	eef0 2a47 	vmov.f32	s5, s14
 801be46:	fb92 f3f3 	sdiv	r3, r2, r3
 801be4a:	ee13 2a10 	vmov	r2, s6
 801be4e:	9313      	str	r3, [sp, #76]	; 0x4c
 801be50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be52:	eeb0 3a67 	vmov.f32	s6, s15
 801be56:	fb92 f3f3 	sdiv	r3, r2, r3
 801be5a:	9314      	str	r3, [sp, #80]	; 0x50
 801be5c:	9b01      	ldr	r3, [sp, #4]
 801be5e:	9a05      	ldr	r2, [sp, #20]
 801be60:	3b01      	subs	r3, #1
 801be62:	9301      	str	r3, [sp, #4]
 801be64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be66:	bf08      	it	eq
 801be68:	4613      	moveq	r3, r2
 801be6a:	e72f      	b.n	801bccc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801be6c:	142a      	asrs	r2, r5, #16
 801be6e:	d458      	bmi.n	801bf22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801be70:	4590      	cmp	r8, r2
 801be72:	dd56      	ble.n	801bf22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801be74:	1420      	asrs	r0, r4, #16
 801be76:	d454      	bmi.n	801bf22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801be78:	9902      	ldr	r1, [sp, #8]
 801be7a:	4288      	cmp	r0, r1
 801be7c:	da51      	bge.n	801bf22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801be7e:	9903      	ldr	r1, [sp, #12]
 801be80:	fb00 2001 	mla	r0, r0, r1, r2
 801be84:	9904      	ldr	r1, [sp, #16]
 801be86:	0842      	lsrs	r2, r0, #1
 801be88:	07c0      	lsls	r0, r0, #31
 801be8a:	5c8a      	ldrb	r2, [r1, r2]
 801be8c:	bf54      	ite	pl
 801be8e:	f002 020f 	andpl.w	r2, r2, #15
 801be92:	1112      	asrmi	r2, r2, #4
 801be94:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801be98:	b2d2      	uxtb	r2, r2
 801be9a:	2a00      	cmp	r2, #0
 801be9c:	d041      	beq.n	801bf22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801be9e:	492d      	ldr	r1, [pc, #180]	; (801bf54 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801bea0:	2aff      	cmp	r2, #255	; 0xff
 801bea2:	6808      	ldr	r0, [r1, #0]
 801bea4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801bea8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801beac:	fa5f fc80 	uxtb.w	ip, r0
 801beb0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801beb4:	d03b      	beq.n	801bf2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801beb6:	fa1f f982 	uxth.w	r9, r2
 801beba:	4438      	add	r0, r7
 801bebc:	43d2      	mvns	r2, r2
 801bebe:	f816 e000 	ldrb.w	lr, [r6, r0]
 801bec2:	fb1c fc09 	smulbb	ip, ip, r9
 801bec6:	fb1a fa09 	smulbb	sl, sl, r9
 801beca:	b2d2      	uxtb	r2, r2
 801becc:	fb1b f909 	smulbb	r9, fp, r9
 801bed0:	fb0e cc02 	mla	ip, lr, r2, ip
 801bed4:	fa1f fc8c 	uxth.w	ip, ip
 801bed8:	f10c 0e01 	add.w	lr, ip, #1
 801bedc:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801bee0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bee4:	f806 c000 	strb.w	ip, [r6, r0]
 801bee8:	4430      	add	r0, r6
 801beea:	f890 c001 	ldrb.w	ip, [r0, #1]
 801beee:	fb0c aa02 	mla	sl, ip, r2, sl
 801bef2:	fa1f fa8a 	uxth.w	sl, sl
 801bef6:	f10a 0c01 	add.w	ip, sl, #1
 801befa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801befe:	f890 c002 	ldrb.w	ip, [r0, #2]
 801bf02:	fb0c 9902 	mla	r9, ip, r2, r9
 801bf06:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bf0a:	fa1f f989 	uxth.w	r9, r9
 801bf0e:	f880 a001 	strb.w	sl, [r0, #1]
 801bf12:	f109 0201 	add.w	r2, r9, #1
 801bf16:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801bf1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf1e:	f880 9002 	strb.w	r9, [r0, #2]
 801bf22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bf24:	3701      	adds	r7, #1
 801bf26:	4415      	add	r5, r2
 801bf28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bf2a:	4414      	add	r4, r2
 801bf2c:	e75a      	b.n	801bde4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801bf2e:	4438      	add	r0, r7
 801bf30:	f806 c000 	strb.w	ip, [r6, r0]
 801bf34:	4430      	add	r0, r6
 801bf36:	f880 a001 	strb.w	sl, [r0, #1]
 801bf3a:	f880 b002 	strb.w	fp, [r0, #2]
 801bf3e:	e7f0      	b.n	801bf22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801bf40:	f800 7c03 	strb.w	r7, [r0, #-3]
 801bf44:	f800 9c02 	strb.w	r9, [r0, #-2]
 801bf48:	f800 bc01 	strb.w	fp, [r0, #-1]
 801bf4c:	e741      	b.n	801bdd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bf4e:	b007      	add	sp, #28
 801bf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf54:	2000bc90 	.word	0x2000bc90

0801bf58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bf58:	4770      	bx	lr

0801bf5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bf5a:	4770      	bx	lr

0801bf5c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bf5c:	4770      	bx	lr

0801bf5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bf5e:	4770      	bx	lr

0801bf60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf60:	4770      	bx	lr

0801bf62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf62:	4770      	bx	lr

0801bf64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf64:	4770      	bx	lr

0801bf66 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf66:	4770      	bx	lr

0801bf68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf68:	4770      	bx	lr

0801bf6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf6a:	4770      	bx	lr

0801bf6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf6c:	4770      	bx	lr

0801bf6e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bf6e:	4770      	bx	lr

0801bf70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bf70:	4770      	bx	lr

0801bf72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bf72:	4770      	bx	lr

0801bf74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bf74:	4770      	bx	lr

0801bf76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bf76:	4770      	bx	lr

0801bf78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bf78:	4770      	bx	lr

0801bf7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bf7a:	4770      	bx	lr

0801bf7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bf7c:	4770      	bx	lr

0801bf7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bf7e:	4770      	bx	lr

0801bf80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801bf80:	2bff      	cmp	r3, #255	; 0xff
 801bf82:	b508      	push	{r3, lr}
 801bf84:	d04f      	beq.n	801c026 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801bf86:	2a2c      	cmp	r2, #44	; 0x2c
 801bf88:	d032      	beq.n	801bff0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801bf8a:	d80f      	bhi.n	801bfac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801bf8c:	2a08      	cmp	r2, #8
 801bf8e:	d046      	beq.n	801c01e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801bf90:	d805      	bhi.n	801bf9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801bf92:	2a04      	cmp	r2, #4
 801bf94:	d041      	beq.n	801c01a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801bf96:	2a05      	cmp	r2, #5
 801bf98:	d03d      	beq.n	801c016 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801bf9a:	2000      	movs	r0, #0
 801bf9c:	e027      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801bf9e:	2a0a      	cmp	r2, #10
 801bfa0:	d03d      	beq.n	801c01e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801bfa2:	d301      	bcc.n	801bfa8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801bfa4:	2a0b      	cmp	r2, #11
 801bfa6:	d1f8      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801bfa8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801bfaa:	e020      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801bfac:	2a30      	cmp	r2, #48	; 0x30
 801bfae:	d038      	beq.n	801c022 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801bfb0:	d808      	bhi.n	801bfc4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801bfb2:	2a2e      	cmp	r2, #46	; 0x2e
 801bfb4:	684b      	ldr	r3, [r1, #4]
 801bfb6:	d029      	beq.n	801c00c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801bfb8:	d90b      	bls.n	801bfd2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801bfba:	781b      	ldrb	r3, [r3, #0]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d1ec      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801bfc0:	6a00      	ldr	r0, [r0, #32]
 801bfc2:	e014      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801bfc4:	2a32      	cmp	r2, #50	; 0x32
 801bfc6:	d02c      	beq.n	801c022 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801bfc8:	d301      	bcc.n	801bfce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801bfca:	2a33      	cmp	r2, #51	; 0x33
 801bfcc:	d1e5      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801bfce:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801bfd0:	e00d      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801bfd2:	781b      	ldrb	r3, [r3, #0]
 801bfd4:	2b01      	cmp	r3, #1
 801bfd6:	d009      	beq.n	801bfec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801bfd8:	d3f2      	bcc.n	801bfc0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801bfda:	2b02      	cmp	r3, #2
 801bfdc:	d1dd      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801bfde:	4b39      	ldr	r3, [pc, #228]	; (801c0c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801bfe0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801bfe4:	4a38      	ldr	r2, [pc, #224]	; (801c0c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801bfe6:	4839      	ldr	r0, [pc, #228]	; (801c0cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801bfe8:	f007 ff3e 	bl	8023e68 <__assert_func>
 801bfec:	6900      	ldr	r0, [r0, #16]
 801bfee:	bd08      	pop	{r3, pc}
 801bff0:	684b      	ldr	r3, [r1, #4]
 801bff2:	781b      	ldrb	r3, [r3, #0]
 801bff4:	2b01      	cmp	r3, #1
 801bff6:	d007      	beq.n	801c008 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801bff8:	d30b      	bcc.n	801c012 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801bffa:	2b02      	cmp	r3, #2
 801bffc:	d1cd      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801bffe:	4b31      	ldr	r3, [pc, #196]	; (801c0c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c000:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801c004:	4a30      	ldr	r2, [pc, #192]	; (801c0c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c006:	e7ee      	b.n	801bfe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c008:	6880      	ldr	r0, [r0, #8]
 801c00a:	e7f0      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c00c:	781b      	ldrb	r3, [r3, #0]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d1c3      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c012:	6980      	ldr	r0, [r0, #24]
 801c014:	e7eb      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c016:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c018:	e7e9      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c01a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c01c:	e7e7      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c01e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c020:	e7e5      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c022:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801c024:	e7e3      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c026:	2a2c      	cmp	r2, #44	; 0x2c
 801c028:	d030      	beq.n	801c08c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801c02a:	d80f      	bhi.n	801c04c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801c02c:	2a08      	cmp	r2, #8
 801c02e:	d044      	beq.n	801c0ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c030:	d805      	bhi.n	801c03e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801c032:	2a04      	cmp	r2, #4
 801c034:	d03f      	beq.n	801c0b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801c036:	2a05      	cmp	r2, #5
 801c038:	d1af      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c03a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801c03c:	e7d7      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c03e:	2a0a      	cmp	r2, #10
 801c040:	d03b      	beq.n	801c0ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c042:	d301      	bcc.n	801c048 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801c044:	2a0b      	cmp	r2, #11
 801c046:	d1a8      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c048:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801c04a:	e7d0      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c04c:	2a30      	cmp	r2, #48	; 0x30
 801c04e:	d036      	beq.n	801c0be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c050:	d808      	bhi.n	801c064 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801c052:	2a2e      	cmp	r2, #46	; 0x2e
 801c054:	684b      	ldr	r3, [r1, #4]
 801c056:	d028      	beq.n	801c0aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801c058:	d90b      	bls.n	801c072 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801c05a:	781b      	ldrb	r3, [r3, #0]
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d19c      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c060:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c062:	e7c4      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c064:	2a32      	cmp	r2, #50	; 0x32
 801c066:	d02a      	beq.n	801c0be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c068:	d301      	bcc.n	801c06e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801c06a:	2a33      	cmp	r2, #51	; 0x33
 801c06c:	d195      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c06e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801c070:	e7bd      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c072:	781b      	ldrb	r3, [r3, #0]
 801c074:	2b01      	cmp	r3, #1
 801c076:	d007      	beq.n	801c088 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801c078:	d3f2      	bcc.n	801c060 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801c07a:	2b02      	cmp	r3, #2
 801c07c:	d18d      	bne.n	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c07e:	4b11      	ldr	r3, [pc, #68]	; (801c0c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c080:	f240 31e1 	movw	r1, #993	; 0x3e1
 801c084:	4a10      	ldr	r2, [pc, #64]	; (801c0c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c086:	e7ae      	b.n	801bfe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c088:	6940      	ldr	r0, [r0, #20]
 801c08a:	e7b0      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c08c:	684b      	ldr	r3, [r1, #4]
 801c08e:	781b      	ldrb	r3, [r3, #0]
 801c090:	2b01      	cmp	r3, #1
 801c092:	d008      	beq.n	801c0a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801c094:	d30d      	bcc.n	801c0b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801c096:	2b02      	cmp	r3, #2
 801c098:	f47f af7f 	bne.w	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c09c:	4b09      	ldr	r3, [pc, #36]	; (801c0c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801c09e:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801c0a2:	4a09      	ldr	r2, [pc, #36]	; (801c0c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801c0a4:	e79f      	b.n	801bfe6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801c0a6:	68c0      	ldr	r0, [r0, #12]
 801c0a8:	e7a1      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c0aa:	781b      	ldrb	r3, [r3, #0]
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	f47f af74 	bne.w	801bf9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c0b2:	69c0      	ldr	r0, [r0, #28]
 801c0b4:	e79b      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c0b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801c0b8:	e799      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c0ba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801c0bc:	e797      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c0be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c0c0:	e795      	b.n	801bfee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c0c2:	bf00      	nop
 801c0c4:	0802856b 	.word	0x0802856b
 801c0c8:	08028d1f 	.word	0x08028d1f
 801c0cc:	080285b7 	.word	0x080285b7

0801c0d0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801c0d0:	b508      	push	{r3, lr}
 801c0d2:	4b06      	ldr	r3, [pc, #24]	; (801c0ec <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801c0d4:	8818      	ldrh	r0, [r3, #0]
 801c0d6:	b928      	cbnz	r0, 801c0e4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801c0d8:	4b05      	ldr	r3, [pc, #20]	; (801c0f0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801c0da:	21d7      	movs	r1, #215	; 0xd7
 801c0dc:	4a05      	ldr	r2, [pc, #20]	; (801c0f4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801c0de:	4806      	ldr	r0, [pc, #24]	; (801c0f8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801c0e0:	f007 fec2 	bl	8023e68 <__assert_func>
 801c0e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c0e8:	b280      	uxth	r0, r0
 801c0ea:	bd08      	pop	{r3, pc}
 801c0ec:	2000bc62 	.word	0x2000bc62
 801c0f0:	08028806 	.word	0x08028806
 801c0f4:	08028ce4 	.word	0x08028ce4
 801c0f8:	08028848 	.word	0x08028848

0801c0fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c100:	4616      	mov	r6, r2
 801c102:	b087      	sub	sp, #28
 801c104:	461f      	mov	r7, r3
 801c106:	b33b      	cbz	r3, 801c158 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c108:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c10c:	b323      	cbz	r3, 801c158 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c10e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c112:	b30b      	cbz	r3, 801c158 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c114:	6808      	ldr	r0, [r1, #0]
 801c116:	ab04      	add	r3, sp, #16
 801c118:	6849      	ldr	r1, [r1, #4]
 801c11a:	4c5a      	ldr	r4, [pc, #360]	; (801c284 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801c11c:	c303      	stmia	r3!, {r0, r1}
 801c11e:	a804      	add	r0, sp, #16
 801c120:	f7fb fd6e 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c124:	6820      	ldr	r0, [r4, #0]
 801c126:	6803      	ldr	r3, [r0, #0]
 801c128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c12a:	4798      	blx	r3
 801c12c:	2fff      	cmp	r7, #255	; 0xff
 801c12e:	4623      	mov	r3, r4
 801c130:	d015      	beq.n	801c15e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c132:	f010 0f08 	tst.w	r0, #8
 801c136:	d015      	beq.n	801c164 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801c138:	6818      	ldr	r0, [r3, #0]
 801c13a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c13e:	6801      	ldr	r1, [r0, #0]
 801c140:	9401      	str	r4, [sp, #4]
 801c142:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c146:	9702      	str	r7, [sp, #8]
 801c148:	9400      	str	r4, [sp, #0]
 801c14a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c14e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801c150:	4631      	mov	r1, r6
 801c152:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c156:	47a0      	blx	r4
 801c158:	b007      	add	sp, #28
 801c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c15e:	f010 0f02 	tst.w	r0, #2
 801c162:	e7e8      	b.n	801c136 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801c164:	6818      	ldr	r0, [r3, #0]
 801c166:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801c16a:	6803      	ldr	r3, [r0, #0]
 801c16c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801c170:	6a1b      	ldr	r3, [r3, #32]
 801c172:	4798      	blx	r3
 801c174:	4944      	ldr	r1, [pc, #272]	; (801c288 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801c176:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c17a:	2fff      	cmp	r7, #255	; 0xff
 801c17c:	f8b1 c000 	ldrh.w	ip, [r1]
 801c180:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801c184:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c188:	4688      	mov	r8, r1
 801c18a:	fb0c 2303 	mla	r3, ip, r3, r2
 801c18e:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801c192:	b2f2      	uxtb	r2, r6
 801c194:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801c198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c19c:	4418      	add	r0, r3
 801c19e:	d112      	bne.n	801c1c6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801c1a0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c1a4:	2100      	movs	r1, #0
 801c1a6:	42a9      	cmp	r1, r5
 801c1a8:	da66      	bge.n	801c278 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801c1aa:	4603      	mov	r3, r0
 801c1ac:	2700      	movs	r7, #0
 801c1ae:	42a7      	cmp	r7, r4
 801c1b0:	f103 0303 	add.w	r3, r3, #3
 801c1b4:	da57      	bge.n	801c266 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801c1b6:	f803 2c03 	strb.w	r2, [r3, #-3]
 801c1ba:	3701      	adds	r7, #1
 801c1bc:	f803 ec02 	strb.w	lr, [r3, #-2]
 801c1c0:	f803 cc01 	strb.w	ip, [r3, #-1]
 801c1c4:	e7f3      	b.n	801c1ae <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801c1c6:	b2bb      	uxth	r3, r7
 801c1c8:	f04f 0800 	mov.w	r8, #0
 801c1cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c1d0:	fb0c fc03 	mul.w	ip, ip, r3
 801c1d4:	fb0e fe03 	mul.w	lr, lr, r3
 801c1d8:	435a      	muls	r2, r3
 801c1da:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801c1de:	460f      	mov	r7, r1
 801c1e0:	b29b      	uxth	r3, r3
 801c1e2:	45a8      	cmp	r8, r5
 801c1e4:	da48      	bge.n	801c278 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801c1e6:	4601      	mov	r1, r0
 801c1e8:	f04f 0a00 	mov.w	sl, #0
 801c1ec:	45a2      	cmp	sl, r4
 801c1ee:	f101 0103 	add.w	r1, r1, #3
 801c1f2:	da2f      	bge.n	801c254 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801c1f4:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801c1f8:	f10a 0a01 	add.w	sl, sl, #1
 801c1fc:	fb19 f903 	smulbb	r9, r9, r3
 801c200:	4491      	add	r9, r2
 801c202:	fa1f f989 	uxth.w	r9, r9
 801c206:	f109 0b01 	add.w	fp, r9, #1
 801c20a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c20e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c212:	f801 9c03 	strb.w	r9, [r1, #-3]
 801c216:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801c21a:	fb19 f903 	smulbb	r9, r9, r3
 801c21e:	44f1      	add	r9, lr
 801c220:	fa1f f989 	uxth.w	r9, r9
 801c224:	f109 0b01 	add.w	fp, r9, #1
 801c228:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c22c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c230:	f801 9c02 	strb.w	r9, [r1, #-2]
 801c234:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801c238:	fb19 f903 	smulbb	r9, r9, r3
 801c23c:	44e1      	add	r9, ip
 801c23e:	fa1f f989 	uxth.w	r9, r9
 801c242:	f109 0b01 	add.w	fp, r9, #1
 801c246:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c24a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c24e:	f801 9c01 	strb.w	r9, [r1, #-1]
 801c252:	e7cb      	b.n	801c1ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801c254:	8839      	ldrh	r1, [r7, #0]
 801c256:	f108 0801 	add.w	r8, r8, #1
 801c25a:	1b09      	subs	r1, r1, r4
 801c25c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c260:	4431      	add	r1, r6
 801c262:	4408      	add	r0, r1
 801c264:	e7bd      	b.n	801c1e2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801c266:	f8b8 3000 	ldrh.w	r3, [r8]
 801c26a:	3101      	adds	r1, #1
 801c26c:	1b1b      	subs	r3, r3, r4
 801c26e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c272:	4433      	add	r3, r6
 801c274:	4418      	add	r0, r3
 801c276:	e796      	b.n	801c1a6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801c278:	4b02      	ldr	r3, [pc, #8]	; (801c284 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801c27a:	6818      	ldr	r0, [r3, #0]
 801c27c:	6803      	ldr	r3, [r0, #0]
 801c27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c280:	4798      	blx	r3
 801c282:	e769      	b.n	801c158 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c284:	2000bc68 	.word	0x2000bc68
 801c288:	2000bc62 	.word	0x2000bc62

0801c28c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c290:	b08d      	sub	sp, #52	; 0x34
 801c292:	460c      	mov	r4, r1
 801c294:	4617      	mov	r7, r2
 801c296:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801c29a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801c29e:	2e00      	cmp	r6, #0
 801c2a0:	d04a      	beq.n	801c338 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c2a2:	6810      	ldr	r0, [r2, #0]
 801c2a4:	ad08      	add	r5, sp, #32
 801c2a6:	6851      	ldr	r1, [r2, #4]
 801c2a8:	c503      	stmia	r5!, {r0, r1}
 801c2aa:	6818      	ldr	r0, [r3, #0]
 801c2ac:	ad0a      	add	r5, sp, #40	; 0x28
 801c2ae:	6859      	ldr	r1, [r3, #4]
 801c2b0:	c503      	stmia	r5!, {r0, r1}
 801c2b2:	a808      	add	r0, sp, #32
 801c2b4:	f7fb fca4 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c2b8:	4639      	mov	r1, r7
 801c2ba:	a80a      	add	r0, sp, #40	; 0x28
 801c2bc:	4f59      	ldr	r7, [pc, #356]	; (801c424 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801c2be:	f7fb fc87 	bl	8017bd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c2c2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c2c6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801c2ca:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c2ce:	6838      	ldr	r0, [r7, #0]
 801c2d0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c2d4:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801c2d8:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801c2dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c2e0:	440c      	add	r4, r1
 801c2e2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801c2e6:	440a      	add	r2, r1
 801c2e8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c2ec:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c2f0:	4413      	add	r3, r2
 801c2f2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c2f6:	6803      	ldr	r3, [r0, #0]
 801c2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2fa:	4798      	blx	r3
 801c2fc:	2eff      	cmp	r6, #255	; 0xff
 801c2fe:	f000 8089 	beq.w	801c414 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801c302:	0743      	lsls	r3, r0, #29
 801c304:	d405      	bmi.n	801c312 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801c306:	f1b9 0f00 	cmp.w	r9, #0
 801c30a:	d018      	beq.n	801c33e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c30c:	f010 0f10 	tst.w	r0, #16
 801c310:	d015      	beq.n	801c33e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801c312:	6838      	ldr	r0, [r7, #0]
 801c314:	b2ad      	uxth	r5, r5
 801c316:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c31a:	6801      	ldr	r1, [r0, #0]
 801c31c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c320:	9500      	str	r5, [sp, #0]
 801c322:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801c326:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801c32a:	9602      	str	r6, [sp, #8]
 801c32c:	fa1f f688 	uxth.w	r6, r8
 801c330:	9601      	str	r6, [sp, #4]
 801c332:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801c334:	4621      	mov	r1, r4
 801c336:	47a8      	blx	r5
 801c338:	b00d      	add	sp, #52	; 0x34
 801c33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c33e:	6838      	ldr	r0, [r7, #0]
 801c340:	6803      	ldr	r3, [r0, #0]
 801c342:	6a1b      	ldr	r3, [r3, #32]
 801c344:	4798      	blx	r3
 801c346:	4a38      	ldr	r2, [pc, #224]	; (801c428 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801c348:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c34c:	2eff      	cmp	r6, #255	; 0xff
 801c34e:	8813      	ldrh	r3, [r2, #0]
 801c350:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801c354:	fb0c 1303 	mla	r3, ip, r3, r1
 801c358:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801c35c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c360:	4418      	add	r0, r3
 801c362:	d032      	beq.n	801c3ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801c364:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801c368:	f04f 0c00 	mov.w	ip, #0
 801c36c:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801c370:	9306      	str	r3, [sp, #24]
 801c372:	45c4      	cmp	ip, r8
 801c374:	da49      	bge.n	801c40a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801c376:	4686      	mov	lr, r0
 801c378:	46a1      	mov	r9, r4
 801c37a:	eba9 0304 	sub.w	r3, r9, r4
 801c37e:	428b      	cmp	r3, r1
 801c380:	da13      	bge.n	801c3aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801c382:	f819 3b01 	ldrb.w	r3, [r9], #1
 801c386:	f89e b000 	ldrb.w	fp, [lr]
 801c38a:	9307      	str	r3, [sp, #28]
 801c38c:	9b06      	ldr	r3, [sp, #24]
 801c38e:	fb1b fb03 	smulbb	fp, fp, r3
 801c392:	9b07      	ldr	r3, [sp, #28]
 801c394:	fb03 b306 	mla	r3, r3, r6, fp
 801c398:	b29b      	uxth	r3, r3
 801c39a:	f103 0b01 	add.w	fp, r3, #1
 801c39e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801c3a2:	121b      	asrs	r3, r3, #8
 801c3a4:	f80e 3b01 	strb.w	r3, [lr], #1
 801c3a8:	e7e7      	b.n	801c37a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801c3aa:	8813      	ldrh	r3, [r2, #0]
 801c3ac:	f10c 0c01 	add.w	ip, ip, #1
 801c3b0:	1b5b      	subs	r3, r3, r5
 801c3b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3b6:	4453      	add	r3, sl
 801c3b8:	4418      	add	r0, r3
 801c3ba:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801c3be:	1b5b      	subs	r3, r3, r5
 801c3c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3c4:	4453      	add	r3, sl
 801c3c6:	441c      	add	r4, r3
 801c3c8:	e7d3      	b.n	801c372 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801c3ca:	2600      	movs	r6, #0
 801c3cc:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801c3d0:	4546      	cmp	r6, r8
 801c3d2:	da1a      	bge.n	801c40a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801c3d4:	f100 3eff 	add.w	lr, r0, #4294967295
 801c3d8:	4623      	mov	r3, r4
 801c3da:	eba3 0904 	sub.w	r9, r3, r4
 801c3de:	4589      	cmp	r9, r1
 801c3e0:	da04      	bge.n	801c3ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801c3e2:	f813 9b01 	ldrb.w	r9, [r3], #1
 801c3e6:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801c3ea:	e7f6      	b.n	801c3da <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801c3ec:	8813      	ldrh	r3, [r2, #0]
 801c3ee:	3601      	adds	r6, #1
 801c3f0:	1b5b      	subs	r3, r3, r5
 801c3f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3f6:	4463      	add	r3, ip
 801c3f8:	4418      	add	r0, r3
 801c3fa:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801c3fe:	1b5b      	subs	r3, r3, r5
 801c400:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c404:	4463      	add	r3, ip
 801c406:	441c      	add	r4, r3
 801c408:	e7e2      	b.n	801c3d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801c40a:	6838      	ldr	r0, [r7, #0]
 801c40c:	6803      	ldr	r3, [r0, #0]
 801c40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c410:	4798      	blx	r3
 801c412:	e791      	b.n	801c338 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801c414:	f1b9 0f00 	cmp.w	r9, #0
 801c418:	f47f af78 	bne.w	801c30c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801c41c:	f010 0f01 	tst.w	r0, #1
 801c420:	e776      	b.n	801c310 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801c422:	bf00      	nop
 801c424:	2000bc68 	.word	0x2000bc68
 801c428:	2000bc62 	.word	0x2000bc62

0801c42c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c42c:	b510      	push	{r4, lr}
 801c42e:	4604      	mov	r4, r0
 801c430:	2104      	movs	r1, #4
 801c432:	f007 fcee 	bl	8023e12 <_ZdlPvj>
 801c436:	4620      	mov	r0, r4
 801c438:	bd10      	pop	{r4, pc}

0801c43a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c43a:	b510      	push	{r4, lr}
 801c43c:	4604      	mov	r4, r0
 801c43e:	2104      	movs	r1, #4
 801c440:	f007 fce7 	bl	8023e12 <_ZdlPvj>
 801c444:	4620      	mov	r0, r4
 801c446:	bd10      	pop	{r4, pc}

0801c448 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c448:	b510      	push	{r4, lr}
 801c44a:	4604      	mov	r4, r0
 801c44c:	2104      	movs	r1, #4
 801c44e:	f007 fce0 	bl	8023e12 <_ZdlPvj>
 801c452:	4620      	mov	r0, r4
 801c454:	bd10      	pop	{r4, pc}

0801c456 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c456:	b510      	push	{r4, lr}
 801c458:	4604      	mov	r4, r0
 801c45a:	2104      	movs	r1, #4
 801c45c:	f007 fcd9 	bl	8023e12 <_ZdlPvj>
 801c460:	4620      	mov	r0, r4
 801c462:	bd10      	pop	{r4, pc}

0801c464 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c464:	b510      	push	{r4, lr}
 801c466:	4604      	mov	r4, r0
 801c468:	2104      	movs	r1, #4
 801c46a:	f007 fcd2 	bl	8023e12 <_ZdlPvj>
 801c46e:	4620      	mov	r0, r4
 801c470:	bd10      	pop	{r4, pc}

0801c472 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c472:	b510      	push	{r4, lr}
 801c474:	4604      	mov	r4, r0
 801c476:	2104      	movs	r1, #4
 801c478:	f007 fccb 	bl	8023e12 <_ZdlPvj>
 801c47c:	4620      	mov	r0, r4
 801c47e:	bd10      	pop	{r4, pc}

0801c480 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c480:	b510      	push	{r4, lr}
 801c482:	4604      	mov	r4, r0
 801c484:	2104      	movs	r1, #4
 801c486:	f007 fcc4 	bl	8023e12 <_ZdlPvj>
 801c48a:	4620      	mov	r0, r4
 801c48c:	bd10      	pop	{r4, pc}

0801c48e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c48e:	b510      	push	{r4, lr}
 801c490:	4604      	mov	r4, r0
 801c492:	2104      	movs	r1, #4
 801c494:	f007 fcbd 	bl	8023e12 <_ZdlPvj>
 801c498:	4620      	mov	r0, r4
 801c49a:	bd10      	pop	{r4, pc}

0801c49c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c49c:	b510      	push	{r4, lr}
 801c49e:	4604      	mov	r4, r0
 801c4a0:	2104      	movs	r1, #4
 801c4a2:	f007 fcb6 	bl	8023e12 <_ZdlPvj>
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	bd10      	pop	{r4, pc}

0801c4aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c4aa:	b510      	push	{r4, lr}
 801c4ac:	4604      	mov	r4, r0
 801c4ae:	2104      	movs	r1, #4
 801c4b0:	f007 fcaf 	bl	8023e12 <_ZdlPvj>
 801c4b4:	4620      	mov	r0, r4
 801c4b6:	bd10      	pop	{r4, pc}

0801c4b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c4b8:	b510      	push	{r4, lr}
 801c4ba:	4604      	mov	r4, r0
 801c4bc:	2104      	movs	r1, #4
 801c4be:	f007 fca8 	bl	8023e12 <_ZdlPvj>
 801c4c2:	4620      	mov	r0, r4
 801c4c4:	bd10      	pop	{r4, pc}

0801c4c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c4c6:	b510      	push	{r4, lr}
 801c4c8:	4604      	mov	r4, r0
 801c4ca:	2104      	movs	r1, #4
 801c4cc:	f007 fca1 	bl	8023e12 <_ZdlPvj>
 801c4d0:	4620      	mov	r0, r4
 801c4d2:	bd10      	pop	{r4, pc}

0801c4d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c4d4:	b510      	push	{r4, lr}
 801c4d6:	4604      	mov	r4, r0
 801c4d8:	2104      	movs	r1, #4
 801c4da:	f007 fc9a 	bl	8023e12 <_ZdlPvj>
 801c4de:	4620      	mov	r0, r4
 801c4e0:	bd10      	pop	{r4, pc}

0801c4e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c4e2:	b510      	push	{r4, lr}
 801c4e4:	4604      	mov	r4, r0
 801c4e6:	2104      	movs	r1, #4
 801c4e8:	f007 fc93 	bl	8023e12 <_ZdlPvj>
 801c4ec:	4620      	mov	r0, r4
 801c4ee:	bd10      	pop	{r4, pc}

0801c4f0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c4f0:	b510      	push	{r4, lr}
 801c4f2:	4604      	mov	r4, r0
 801c4f4:	2104      	movs	r1, #4
 801c4f6:	f007 fc8c 	bl	8023e12 <_ZdlPvj>
 801c4fa:	4620      	mov	r0, r4
 801c4fc:	bd10      	pop	{r4, pc}

0801c4fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c4fe:	b510      	push	{r4, lr}
 801c500:	4604      	mov	r4, r0
 801c502:	2104      	movs	r1, #4
 801c504:	f007 fc85 	bl	8023e12 <_ZdlPvj>
 801c508:	4620      	mov	r0, r4
 801c50a:	bd10      	pop	{r4, pc}

0801c50c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c50c:	b510      	push	{r4, lr}
 801c50e:	4604      	mov	r4, r0
 801c510:	2104      	movs	r1, #4
 801c512:	f007 fc7e 	bl	8023e12 <_ZdlPvj>
 801c516:	4620      	mov	r0, r4
 801c518:	bd10      	pop	{r4, pc}

0801c51a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c51a:	b510      	push	{r4, lr}
 801c51c:	4604      	mov	r4, r0
 801c51e:	2104      	movs	r1, #4
 801c520:	f007 fc77 	bl	8023e12 <_ZdlPvj>
 801c524:	4620      	mov	r0, r4
 801c526:	bd10      	pop	{r4, pc}

0801c528 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c528:	b510      	push	{r4, lr}
 801c52a:	4604      	mov	r4, r0
 801c52c:	2104      	movs	r1, #4
 801c52e:	f007 fc70 	bl	8023e12 <_ZdlPvj>
 801c532:	4620      	mov	r0, r4
 801c534:	bd10      	pop	{r4, pc}

0801c536 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c536:	b510      	push	{r4, lr}
 801c538:	4604      	mov	r4, r0
 801c53a:	2104      	movs	r1, #4
 801c53c:	f007 fc69 	bl	8023e12 <_ZdlPvj>
 801c540:	4620      	mov	r0, r4
 801c542:	bd10      	pop	{r4, pc}

0801c544 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c548:	4d9e      	ldr	r5, [pc, #632]	; (801c7c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801c54a:	4690      	mov	r8, r2
 801c54c:	b08f      	sub	sp, #60	; 0x3c
 801c54e:	4604      	mov	r4, r0
 801c550:	682a      	ldr	r2, [r5, #0]
 801c552:	4689      	mov	r9, r1
 801c554:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801c558:	2a02      	cmp	r2, #2
 801c55a:	d106      	bne.n	801c56a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801c55c:	4b9a      	ldr	r3, [pc, #616]	; (801c7c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801c55e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801c562:	4a9a      	ldr	r2, [pc, #616]	; (801c7cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801c564:	489a      	ldr	r0, [pc, #616]	; (801c7d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801c566:	f007 fc7f 	bl	8023e68 <__assert_func>
 801c56a:	ae0e      	add	r6, sp, #56	; 0x38
 801c56c:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801c570:	4630      	mov	r0, r6
 801c572:	f7fe f8b3 	bl	801a6dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c576:	6823      	ldr	r3, [r4, #0]
 801c578:	4607      	mov	r7, r0
 801c57a:	4620      	mov	r0, r4
 801c57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c57e:	4798      	blx	r3
 801c580:	4287      	cmp	r7, r0
 801c582:	d004      	beq.n	801c58e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801c584:	4b93      	ldr	r3, [pc, #588]	; (801c7d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801c586:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801c58a:	4a90      	ldr	r2, [pc, #576]	; (801c7cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801c58c:	e7ea      	b.n	801c564 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c58e:	4630      	mov	r0, r6
 801c590:	f7fe f820 	bl	801a5d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c594:	4607      	mov	r7, r0
 801c596:	b920      	cbnz	r0, 801c5a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801c598:	4b8f      	ldr	r3, [pc, #572]	; (801c7d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801c59a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801c59e:	4a8b      	ldr	r2, [pc, #556]	; (801c7cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801c5a0:	e7e0      	b.n	801c564 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c5a2:	f8d8 0000 	ldr.w	r0, [r8]
 801c5a6:	ab06      	add	r3, sp, #24
 801c5a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c5ac:	f9b8 a000 	ldrsh.w	sl, [r8]
 801c5b0:	c303      	stmia	r3!, {r0, r1}
 801c5b2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c5b6:	ab08      	add	r3, sp, #32
 801c5b8:	f8d9 0000 	ldr.w	r0, [r9]
 801c5bc:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801c5c0:	c303      	stmia	r3!, {r0, r1}
 801c5c2:	4630      	mov	r0, r6
 801c5c4:	f7fd fefe 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c5c8:	4680      	mov	r8, r0
 801c5ca:	4630      	mov	r0, r6
 801c5cc:	4e83      	ldr	r6, [pc, #524]	; (801c7dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801c5ce:	f7fd ff33 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c5d2:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801c5d6:	f10d 0920 	add.w	r9, sp, #32
 801c5da:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801c5de:	a806      	add	r0, sp, #24
 801c5e0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c5e4:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801c5e8:	f7fb fb0a 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c5ec:	4648      	mov	r0, r9
 801c5ee:	f7fb fb07 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c5f2:	a80a      	add	r0, sp, #40	; 0x28
 801c5f4:	f7fb fb04 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c5f8:	4b79      	ldr	r3, [pc, #484]	; (801c7e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801c5fa:	2100      	movs	r1, #0
 801c5fc:	f9b6 2000 	ldrsh.w	r2, [r6]
 801c600:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c604:	4648      	mov	r0, r9
 801c606:	910c      	str	r1, [sp, #48]	; 0x30
 801c608:	a90c      	add	r1, sp, #48	; 0x30
 801c60a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801c60e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c612:	f7f8 fac9 	bl	8014ba8 <_ZN8touchgfx4RectaNERKS0_>
 801c616:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801c61a:	9602      	str	r6, [sp, #8]
 801c61c:	f1bc 0f00 	cmp.w	ip, #0
 801c620:	f000 80a4 	beq.w	801c76c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801c624:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801c628:	2e00      	cmp	r6, #0
 801c62a:	f000 809f 	beq.w	801c76c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801c62e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801c632:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801c636:	4288      	cmp	r0, r1
 801c638:	db36      	blt.n	801c6a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801c63a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801c63e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801c642:	429a      	cmp	r2, r3
 801c644:	db30      	blt.n	801c6a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801c646:	4460      	add	r0, ip
 801c648:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801c64c:	4461      	add	r1, ip
 801c64e:	b200      	sxth	r0, r0
 801c650:	b209      	sxth	r1, r1
 801c652:	4288      	cmp	r0, r1
 801c654:	dc28      	bgt.n	801c6a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801c656:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801c65a:	4432      	add	r2, r6
 801c65c:	440b      	add	r3, r1
 801c65e:	b212      	sxth	r2, r2
 801c660:	b21b      	sxth	r3, r3
 801c662:	429a      	cmp	r2, r3
 801c664:	dc20      	bgt.n	801c6a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801c666:	6823      	ldr	r3, [r4, #0]
 801c668:	4620      	mov	r0, r4
 801c66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c66c:	4798      	blx	r3
 801c66e:	4682      	mov	sl, r0
 801c670:	6828      	ldr	r0, [r5, #0]
 801c672:	6803      	ldr	r3, [r0, #0]
 801c674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c676:	4798      	blx	r3
 801c678:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801c67c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c680:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801c684:	9303      	str	r3, [sp, #12]
 801c686:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c68a:	1a9b      	subs	r3, r3, r2
 801c68c:	b29b      	uxth	r3, r3
 801c68e:	b21c      	sxth	r4, r3
 801c690:	2c00      	cmp	r4, #0
 801c692:	dc0e      	bgt.n	801c6b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801c694:	b134      	cbz	r4, 801c6a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801c696:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c69a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c69e:	4413      	add	r3, r2
 801c6a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801c6a4:	463c      	mov	r4, r7
 801c6a6:	e00b      	b.n	801c6c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801c6a8:	4b4e      	ldr	r3, [pc, #312]	; (801c7e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801c6aa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c6ae:	4a47      	ldr	r2, [pc, #284]	; (801c7cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801c6b0:	e758      	b.n	801c564 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801c6b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c6b6:	ebab 0303 	sub.w	r3, fp, r3
 801c6ba:	443c      	add	r4, r7
 801c6bc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c6c0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c6c4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c6c8:	1a9b      	subs	r3, r3, r2
 801c6ca:	b29b      	uxth	r3, r3
 801c6cc:	b219      	sxth	r1, r3
 801c6ce:	2900      	cmp	r1, #0
 801c6d0:	dd50      	ble.n	801c774 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801c6d2:	9a03      	ldr	r2, [sp, #12]
 801c6d4:	fb02 4401 	mla	r4, r2, r1, r4
 801c6d8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801c6dc:	1ad3      	subs	r3, r2, r3
 801c6de:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c6e2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801c6e6:	f1bc 0f00 	cmp.w	ip, #0
 801c6ea:	dd3f      	ble.n	801c76c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801c6ec:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801c6f0:	2e00      	cmp	r6, #0
 801c6f2:	dd3b      	ble.n	801c76c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801c6f4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801c6f8:	2203      	movs	r2, #3
 801c6fa:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c6fe:	fb0a f801 	mul.w	r8, sl, r1
 801c702:	fb13 8802 	smlabb	r8, r3, r2, r8
 801c706:	9a02      	ldr	r2, [sp, #8]
 801c708:	4480      	add	r8, r0
 801c70a:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801c70e:	8812      	ldrh	r2, [r2, #0]
 801c710:	4584      	cmp	ip, r0
 801c712:	eba2 0303 	sub.w	r3, r2, r3
 801c716:	bfa8      	it	ge
 801c718:	4684      	movge	ip, r0
 801c71a:	459c      	cmp	ip, r3
 801c71c:	bfa8      	it	ge
 801c71e:	469c      	movge	ip, r3
 801c720:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801c724:	429e      	cmp	r6, r3
 801c726:	bfa8      	it	ge
 801c728:	461e      	movge	r6, r3
 801c72a:	4b2d      	ldr	r3, [pc, #180]	; (801c7e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801c72c:	881b      	ldrh	r3, [r3, #0]
 801c72e:	1a59      	subs	r1, r3, r1
 801c730:	4633      	mov	r3, r6
 801c732:	428e      	cmp	r6, r1
 801c734:	bfa8      	it	ge
 801c736:	460b      	movge	r3, r1
 801c738:	4562      	cmp	r2, ip
 801c73a:	9302      	str	r3, [sp, #8]
 801c73c:	d12d      	bne.n	801c79a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801c73e:	455a      	cmp	r2, fp
 801c740:	d12b      	bne.n	801c79a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801c742:	6828      	ldr	r0, [r5, #0]
 801c744:	6803      	ldr	r3, [r0, #0]
 801c746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c748:	4798      	blx	r3
 801c74a:	07c3      	lsls	r3, r0, #31
 801c74c:	d51b      	bpl.n	801c786 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801c74e:	6828      	ldr	r0, [r5, #0]
 801c750:	9b02      	ldr	r3, [sp, #8]
 801c752:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801c756:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c75a:	6803      	ldr	r3, [r0, #0]
 801c75c:	f8cd b000 	str.w	fp, [sp]
 801c760:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801c762:	4623      	mov	r3, r4
 801c764:	e899 0006 	ldmia.w	r9, {r1, r2}
 801c768:	47a8      	blx	r5
 801c76a:	4607      	mov	r7, r0
 801c76c:	4638      	mov	r0, r7
 801c76e:	b00f      	add	sp, #60	; 0x3c
 801c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c774:	bf1f      	itttt	ne
 801c776:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801c77a:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801c77e:	189b      	addne	r3, r3, r2
 801c780:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801c784:	e7ad      	b.n	801c6e2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801c786:	6828      	ldr	r0, [r5, #0]
 801c788:	4642      	mov	r2, r8
 801c78a:	4621      	mov	r1, r4
 801c78c:	6803      	ldr	r3, [r0, #0]
 801c78e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801c790:	9b02      	ldr	r3, [sp, #8]
 801c792:	fb03 f30a 	mul.w	r3, r3, sl
 801c796:	47a8      	blx	r5
 801c798:	e7e8      	b.n	801c76c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801c79a:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801c79e:	f04f 0900 	mov.w	r9, #0
 801c7a2:	9b02      	ldr	r3, [sp, #8]
 801c7a4:	454b      	cmp	r3, r9
 801c7a6:	dde1      	ble.n	801c76c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801c7a8:	6828      	ldr	r0, [r5, #0]
 801c7aa:	4642      	mov	r2, r8
 801c7ac:	4621      	mov	r1, r4
 801c7ae:	44d0      	add	r8, sl
 801c7b0:	6803      	ldr	r3, [r0, #0]
 801c7b2:	f109 0901 	add.w	r9, r9, #1
 801c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7b8:	461e      	mov	r6, r3
 801c7ba:	465b      	mov	r3, fp
 801c7bc:	47b0      	blx	r6
 801c7be:	9b03      	ldr	r3, [sp, #12]
 801c7c0:	441c      	add	r4, r3
 801c7c2:	e7ee      	b.n	801c7a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801c7c4:	2000bc68 	.word	0x2000bc68
 801c7c8:	080285e9 	.word	0x080285e9
 801c7cc:	08028dc9 	.word	0x08028dc9
 801c7d0:	080285b7 	.word	0x080285b7
 801c7d4:	0802869d 	.word	0x0802869d
 801c7d8:	080286f2 	.word	0x080286f2
 801c7dc:	2000bc62 	.word	0x2000bc62
 801c7e0:	2000bc64 	.word	0x2000bc64
 801c7e4:	08028730 	.word	0x08028730

0801c7e8 <_ZN8touchgfx8LCD24bppC1Ev>:
 801c7e8:	4a0b      	ldr	r2, [pc, #44]	; (801c818 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801c7ea:	6002      	str	r2, [r0, #0]
 801c7ec:	2200      	movs	r2, #0
 801c7ee:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c7f2:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c7f6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c7fa:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c7fe:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801c802:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801c806:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801c80a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801c80e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801c812:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801c816:	4770      	bx	lr
 801c818:	08028a14 	.word	0x08028a14

0801c81c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801c81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c820:	b093      	sub	sp, #76	; 0x4c
 801c822:	880c      	ldrh	r4, [r1, #0]
 801c824:	4605      	mov	r5, r0
 801c826:	460f      	mov	r7, r1
 801c828:	4691      	mov	r9, r2
 801c82a:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801c82e:	b12c      	cbz	r4, 801c83c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801c830:	4b71      	ldr	r3, [pc, #452]	; (801c9f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801c832:	2167      	movs	r1, #103	; 0x67
 801c834:	4a71      	ldr	r2, [pc, #452]	; (801c9fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801c836:	4872      	ldr	r0, [pc, #456]	; (801ca00 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801c838:	f007 fb16 	bl	8023e68 <__assert_func>
 801c83c:	6810      	ldr	r0, [r2, #0]
 801c83e:	ae0e      	add	r6, sp, #56	; 0x38
 801c840:	6851      	ldr	r1, [r2, #4]
 801c842:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801ca08 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801c846:	c603      	stmia	r6!, {r0, r1}
 801c848:	6818      	ldr	r0, [r3, #0]
 801c84a:	ae10      	add	r6, sp, #64	; 0x40
 801c84c:	6859      	ldr	r1, [r3, #4]
 801c84e:	c603      	stmia	r6!, {r0, r1}
 801c850:	a80e      	add	r0, sp, #56	; 0x38
 801c852:	f7fb f9d5 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c856:	4649      	mov	r1, r9
 801c858:	a810      	add	r0, sp, #64	; 0x40
 801c85a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801ca04 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801c85e:	f7fb f9b7 	bl	8017bd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c862:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c866:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c86a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801c86e:	f8d9 0000 	ldr.w	r0, [r9]
 801c872:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c876:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801c87a:	440d      	add	r5, r1
 801c87c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801c880:	440a      	add	r2, r1
 801c882:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c886:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c88a:	4413      	add	r3, r2
 801c88c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c890:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801c894:	930b      	str	r3, [sp, #44]	; 0x2c
 801c896:	6803      	ldr	r3, [r0, #0]
 801c898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c89c:	4798      	blx	r3
 801c89e:	2801      	cmp	r0, #1
 801c8a0:	d11e      	bne.n	801c8e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801c8a2:	220b      	movs	r2, #11
 801c8a4:	9008      	str	r0, [sp, #32]
 801c8a6:	b2b6      	uxth	r6, r6
 801c8a8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c8ac:	9207      	str	r2, [sp, #28]
 801c8ae:	4629      	mov	r1, r5
 801c8b0:	f8ba 2000 	ldrh.w	r2, [sl]
 801c8b4:	f8cd 8010 	str.w	r8, [sp, #16]
 801c8b8:	9601      	str	r6, [sp, #4]
 801c8ba:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801c8be:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801c8c2:	9203      	str	r2, [sp, #12]
 801c8c4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801c8c8:	9202      	str	r2, [sp, #8]
 801c8ca:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c8ce:	9200      	str	r2, [sp, #0]
 801c8d0:	463a      	mov	r2, r7
 801c8d2:	f8d9 0000 	ldr.w	r0, [r9]
 801c8d6:	f7f8 fdb5 	bl	8015444 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c8da:	b013      	add	sp, #76	; 0x4c
 801c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8e0:	f8d9 0000 	ldr.w	r0, [r9]
 801c8e4:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801c8e8:	6803      	ldr	r3, [r0, #0]
 801c8ea:	6a1b      	ldr	r3, [r3, #32]
 801c8ec:	4798      	blx	r3
 801c8ee:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801c8f2:	f8ba 3000 	ldrh.w	r3, [sl]
 801c8f6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c8fa:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801c8fe:	fb01 2303 	mla	r3, r1, r3, r2
 801c902:	4621      	mov	r1, r4
 801c904:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c908:	4418      	add	r0, r3
 801c90a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801c90e:	930c      	str	r3, [sp, #48]	; 0x30
 801c910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c912:	4299      	cmp	r1, r3
 801c914:	da6a      	bge.n	801c9ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801c916:	1cc2      	adds	r2, r0, #3
 801c918:	46aa      	mov	sl, r5
 801c91a:	ebaa 0305 	sub.w	r3, sl, r5
 801c91e:	429e      	cmp	r6, r3
 801c920:	dd55      	ble.n	801c9ce <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801c922:	2404      	movs	r4, #4
 801c924:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801c928:	fb14 4303 	smlabb	r3, r4, r3, r4
 801c92c:	eb07 0e03 	add.w	lr, r7, r3
 801c930:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801c934:	b184      	cbz	r4, 801c958 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801c936:	2cff      	cmp	r4, #255	; 0xff
 801c938:	f817 b003 	ldrb.w	fp, [r7, r3]
 801c93c:	d10e      	bne.n	801c95c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801c93e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c942:	d10b      	bne.n	801c95c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801c944:	f802 bc03 	strb.w	fp, [r2, #-3]
 801c948:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801c94c:	f802 3c02 	strb.w	r3, [r2, #-2]
 801c950:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801c954:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c958:	3203      	adds	r2, #3
 801c95a:	e7de      	b.n	801c91a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801c95c:	fb08 f404 	mul.w	r4, r8, r4
 801c960:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801c964:	1c63      	adds	r3, r4, #1
 801c966:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801c96a:	121b      	asrs	r3, r3, #8
 801c96c:	b29c      	uxth	r4, r3
 801c96e:	43db      	mvns	r3, r3
 801c970:	fb1b fb04 	smulbb	fp, fp, r4
 801c974:	b2db      	uxtb	r3, r3
 801c976:	fb0c bc03 	mla	ip, ip, r3, fp
 801c97a:	fa1f fc8c 	uxth.w	ip, ip
 801c97e:	f10c 0b01 	add.w	fp, ip, #1
 801c982:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c986:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801c98a:	fb1b fb03 	smulbb	fp, fp, r3
 801c98e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c992:	f802 cc03 	strb.w	ip, [r2, #-3]
 801c996:	f89e c001 	ldrb.w	ip, [lr, #1]
 801c99a:	fb0c bc04 	mla	ip, ip, r4, fp
 801c99e:	fa1f fc8c 	uxth.w	ip, ip
 801c9a2:	f10c 0b01 	add.w	fp, ip, #1
 801c9a6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c9aa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c9ae:	f802 cc02 	strb.w	ip, [r2, #-2]
 801c9b2:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801c9b6:	f89e e002 	ldrb.w	lr, [lr, #2]
 801c9ba:	fb1c f303 	smulbb	r3, ip, r3
 801c9be:	fb0e 3304 	mla	r3, lr, r4, r3
 801c9c2:	b29b      	uxth	r3, r3
 801c9c4:	1c5c      	adds	r4, r3, #1
 801c9c6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c9ca:	121b      	asrs	r3, r3, #8
 801c9cc:	e7c2      	b.n	801c954 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801c9ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c9d0:	3101      	adds	r1, #1
 801c9d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c9d4:	881b      	ldrh	r3, [r3, #0]
 801c9d6:	1b9b      	subs	r3, r3, r6
 801c9d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9dc:	4413      	add	r3, r2
 801c9de:	4418      	add	r0, r3
 801c9e0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801c9e4:	1b9b      	subs	r3, r3, r6
 801c9e6:	444b      	add	r3, r9
 801c9e8:	441d      	add	r5, r3
 801c9ea:	e791      	b.n	801c910 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801c9ec:	4b05      	ldr	r3, [pc, #20]	; (801ca04 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801c9ee:	6818      	ldr	r0, [r3, #0]
 801c9f0:	6803      	ldr	r3, [r0, #0]
 801c9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9f4:	4798      	blx	r3
 801c9f6:	e770      	b.n	801c8da <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801c9f8:	0802851b 	.word	0x0802851b
 801c9fc:	08028beb 	.word	0x08028beb
 801ca00:	080285b7 	.word	0x080285b7
 801ca04:	2000bc68 	.word	0x2000bc68
 801ca08:	2000bc62 	.word	0x2000bc62

0801ca0c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801ca0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca10:	4614      	mov	r4, r2
 801ca12:	880a      	ldrh	r2, [r1, #0]
 801ca14:	b091      	sub	sp, #68	; 0x44
 801ca16:	4680      	mov	r8, r0
 801ca18:	2a01      	cmp	r2, #1
 801ca1a:	460e      	mov	r6, r1
 801ca1c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801ca20:	d005      	beq.n	801ca2e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801ca22:	4b6d      	ldr	r3, [pc, #436]	; (801cbd8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801ca24:	21b5      	movs	r1, #181	; 0xb5
 801ca26:	4a6d      	ldr	r2, [pc, #436]	; (801cbdc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801ca28:	486d      	ldr	r0, [pc, #436]	; (801cbe0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801ca2a:	f007 fa1d 	bl	8023e68 <__assert_func>
 801ca2e:	6820      	ldr	r0, [r4, #0]
 801ca30:	ad0c      	add	r5, sp, #48	; 0x30
 801ca32:	6861      	ldr	r1, [r4, #4]
 801ca34:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801cbe4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801ca38:	c503      	stmia	r5!, {r0, r1}
 801ca3a:	6818      	ldr	r0, [r3, #0]
 801ca3c:	ad0e      	add	r5, sp, #56	; 0x38
 801ca3e:	6859      	ldr	r1, [r3, #4]
 801ca40:	c503      	stmia	r5!, {r0, r1}
 801ca42:	a80c      	add	r0, sp, #48	; 0x30
 801ca44:	f7fb f8dc 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca48:	4621      	mov	r1, r4
 801ca4a:	a80e      	add	r0, sp, #56	; 0x38
 801ca4c:	f7fb f8c0 	bl	8017bd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca50:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ca54:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ca58:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ca5c:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801ca60:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ca64:	eb08 0401 	add.w	r4, r8, r1
 801ca68:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ca6c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801cbe8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801ca70:	440a      	add	r2, r1
 801ca72:	f8d8 0000 	ldr.w	r0, [r8]
 801ca76:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ca7a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ca7e:	4413      	add	r3, r2
 801ca80:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ca84:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801ca88:	930a      	str	r3, [sp, #40]	; 0x28
 801ca8a:	6803      	ldr	r3, [r0, #0]
 801ca8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ca90:	4798      	blx	r3
 801ca92:	2801      	cmp	r0, #1
 801ca94:	d11e      	bne.n	801cad4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801ca96:	220b      	movs	r2, #11
 801ca98:	9008      	str	r0, [sp, #32]
 801ca9a:	b2ad      	uxth	r5, r5
 801ca9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801caa0:	9207      	str	r2, [sp, #28]
 801caa2:	4621      	mov	r1, r4
 801caa4:	f8b9 2000 	ldrh.w	r2, [r9]
 801caa8:	9501      	str	r5, [sp, #4]
 801caaa:	9206      	str	r2, [sp, #24]
 801caac:	2200      	movs	r2, #0
 801caae:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801cab2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801cab6:	9203      	str	r2, [sp, #12]
 801cab8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801cabc:	9202      	str	r2, [sp, #8]
 801cabe:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cac2:	9200      	str	r2, [sp, #0]
 801cac4:	4632      	mov	r2, r6
 801cac6:	f8d8 0000 	ldr.w	r0, [r8]
 801caca:	f7f8 fcbb 	bl	8015444 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801cace:	b011      	add	sp, #68	; 0x44
 801cad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cad4:	f8d8 0000 	ldr.w	r0, [r8]
 801cad8:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801cadc:	6803      	ldr	r3, [r0, #0]
 801cade:	6a1b      	ldr	r3, [r3, #32]
 801cae0:	4798      	blx	r3
 801cae2:	f8b9 3000 	ldrh.w	r3, [r9]
 801cae6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801caea:	f04f 0e00 	mov.w	lr, #0
 801caee:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801caf2:	fa1f f987 	uxth.w	r9, r7
 801caf6:	fb01 2303 	mla	r3, r1, r3, r2
 801cafa:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801cafe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb02:	b289      	uxth	r1, r1
 801cb04:	4418      	add	r0, r3
 801cb06:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801cb0a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb0e:	459e      	cmp	lr, r3
 801cb10:	da5c      	bge.n	801cbcc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801cb12:	1cc3      	adds	r3, r0, #3
 801cb14:	46a2      	mov	sl, r4
 801cb16:	ebaa 0204 	sub.w	r2, sl, r4
 801cb1a:	4295      	cmp	r5, r2
 801cb1c:	dd46      	ble.n	801cbac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801cb1e:	f04f 0c03 	mov.w	ip, #3
 801cb22:	f04f 0b04 	mov.w	fp, #4
 801cb26:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801cb2a:	2fff      	cmp	r7, #255	; 0xff
 801cb2c:	fb1c b202 	smlabb	r2, ip, r2, fp
 801cb30:	eb06 0c02 	add.w	ip, r6, r2
 801cb34:	f816 b002 	ldrb.w	fp, [r6, r2]
 801cb38:	d02f      	beq.n	801cb9a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801cb3a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801cb3e:	fb12 f201 	smulbb	r2, r2, r1
 801cb42:	fb0b 2209 	mla	r2, fp, r9, r2
 801cb46:	b292      	uxth	r2, r2
 801cb48:	f102 0b01 	add.w	fp, r2, #1
 801cb4c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801cb50:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801cb54:	fb1b fb01 	smulbb	fp, fp, r1
 801cb58:	1212      	asrs	r2, r2, #8
 801cb5a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801cb5e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801cb62:	fb02 b209 	mla	r2, r2, r9, fp
 801cb66:	b292      	uxth	r2, r2
 801cb68:	f102 0b01 	add.w	fp, r2, #1
 801cb6c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801cb70:	1212      	asrs	r2, r2, #8
 801cb72:	f803 2c02 	strb.w	r2, [r3, #-2]
 801cb76:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801cb7a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801cb7e:	fb1c fc01 	smulbb	ip, ip, r1
 801cb82:	fb02 c209 	mla	r2, r2, r9, ip
 801cb86:	b292      	uxth	r2, r2
 801cb88:	f102 0c01 	add.w	ip, r2, #1
 801cb8c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cb90:	1212      	asrs	r2, r2, #8
 801cb92:	f803 2c01 	strb.w	r2, [r3, #-1]
 801cb96:	3303      	adds	r3, #3
 801cb98:	e7bd      	b.n	801cb16 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801cb9a:	f803 bc03 	strb.w	fp, [r3, #-3]
 801cb9e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801cba2:	f803 2c02 	strb.w	r2, [r3, #-2]
 801cba6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801cbaa:	e7f2      	b.n	801cb92 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801cbac:	4b0d      	ldr	r3, [pc, #52]	; (801cbe4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801cbae:	f10e 0e01 	add.w	lr, lr, #1
 801cbb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cbb4:	881b      	ldrh	r3, [r3, #0]
 801cbb6:	1b5b      	subs	r3, r3, r5
 801cbb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cbbc:	4413      	add	r3, r2
 801cbbe:	4418      	add	r0, r3
 801cbc0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801cbc4:	1b5b      	subs	r3, r3, r5
 801cbc6:	4443      	add	r3, r8
 801cbc8:	441c      	add	r4, r3
 801cbca:	e79f      	b.n	801cb0c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801cbcc:	4b06      	ldr	r3, [pc, #24]	; (801cbe8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801cbce:	6818      	ldr	r0, [r3, #0]
 801cbd0:	6803      	ldr	r3, [r0, #0]
 801cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbd4:	4798      	blx	r3
 801cbd6:	e77a      	b.n	801cace <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801cbd8:	08028427 	.word	0x08028427
 801cbdc:	08028ade 	.word	0x08028ade
 801cbe0:	080285b7 	.word	0x080285b7
 801cbe4:	2000bc62 	.word	0x2000bc62
 801cbe8:	2000bc68 	.word	0x2000bc68

0801cbec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801cbec:	b570      	push	{r4, r5, r6, lr}
 801cbee:	780d      	ldrb	r5, [r1, #0]
 801cbf0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801cbf4:	2d01      	cmp	r5, #1
 801cbf6:	d00d      	beq.n	801cc14 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801cbf8:	d307      	bcc.n	801cc0a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801cbfa:	2d02      	cmp	r5, #2
 801cbfc:	d10f      	bne.n	801cc1e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801cbfe:	4b08      	ldr	r3, [pc, #32]	; (801cc20 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801cc00:	215a      	movs	r1, #90	; 0x5a
 801cc02:	4a08      	ldr	r2, [pc, #32]	; (801cc24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801cc04:	4808      	ldr	r0, [pc, #32]	; (801cc28 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801cc06:	f007 f92f 	bl	8023e68 <__assert_func>
 801cc0a:	9404      	str	r4, [sp, #16]
 801cc0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc10:	f7ff be04 	b.w	801c81c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801cc14:	9404      	str	r4, [sp, #16]
 801cc16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc1a:	f7ff bef7 	b.w	801ca0c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801cc1e:	bd70      	pop	{r4, r5, r6, pc}
 801cc20:	080283dc 	.word	0x080283dc
 801cc24:	08028a5c 	.word	0x08028a5c
 801cc28:	080285b7 	.word	0x080285b7

0801cc2c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc30:	b08b      	sub	sp, #44	; 0x2c
 801cc32:	460c      	mov	r4, r1
 801cc34:	4680      	mov	r8, r0
 801cc36:	469a      	mov	sl, r3
 801cc38:	6808      	ldr	r0, [r1, #0]
 801cc3a:	ab06      	add	r3, sp, #24
 801cc3c:	6849      	ldr	r1, [r1, #4]
 801cc3e:	c303      	stmia	r3!, {r0, r1}
 801cc40:	6810      	ldr	r0, [r2, #0]
 801cc42:	ab08      	add	r3, sp, #32
 801cc44:	6851      	ldr	r1, [r2, #4]
 801cc46:	c303      	stmia	r3!, {r0, r1}
 801cc48:	a806      	add	r0, sp, #24
 801cc4a:	f7fa ffd9 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc4e:	4621      	mov	r1, r4
 801cc50:	a808      	add	r0, sp, #32
 801cc52:	4c61      	ldr	r4, [pc, #388]	; (801cdd8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801cc54:	f7fa ffbc 	bl	8017bd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cc58:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801cc5c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801cc60:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cc64:	6820      	ldr	r0, [r4, #0]
 801cc66:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cc6a:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801cc6e:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801cc72:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801cc76:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801cc7a:	440a      	add	r2, r1
 801cc7c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801cc80:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801cc84:	4413      	add	r3, r2
 801cc86:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801cc8a:	6803      	ldr	r3, [r0, #0]
 801cc8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc8e:	4798      	blx	r3
 801cc90:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801cc94:	d118      	bne.n	801ccc8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801cc96:	f010 0f20 	tst.w	r0, #32
 801cc9a:	6820      	ldr	r0, [r4, #0]
 801cc9c:	d017      	beq.n	801ccce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801cc9e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801cca2:	b2bf      	uxth	r7, r7
 801cca4:	6801      	ldr	r1, [r0, #0]
 801cca6:	9402      	str	r4, [sp, #8]
 801cca8:	fa1f f489 	uxth.w	r4, r9
 801ccac:	f8cd a00c 	str.w	sl, [sp, #12]
 801ccb0:	9401      	str	r4, [sp, #4]
 801ccb2:	9700      	str	r7, [sp, #0]
 801ccb4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ccb8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801ccba:	4641      	mov	r1, r8
 801ccbc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ccc0:	47a0      	blx	r4
 801ccc2:	b00b      	add	sp, #44	; 0x2c
 801ccc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 801cccc:	e7e5      	b.n	801cc9a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801ccce:	6803      	ldr	r3, [r0, #0]
 801ccd0:	6a1b      	ldr	r3, [r3, #32]
 801ccd2:	4798      	blx	r3
 801ccd4:	4b41      	ldr	r3, [pc, #260]	; (801cddc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801ccd6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801ccda:	f04f 0c00 	mov.w	ip, #0
 801ccde:	881a      	ldrh	r2, [r3, #0]
 801cce0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801cce4:	fb04 1202 	mla	r2, r4, r2, r1
 801cce8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ccec:	4410      	add	r0, r2
 801ccee:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801ccf2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801ccf6:	0092      	lsls	r2, r2, #2
 801ccf8:	9105      	str	r1, [sp, #20]
 801ccfa:	9204      	str	r2, [sp, #16]
 801ccfc:	45cc      	cmp	ip, r9
 801ccfe:	da65      	bge.n	801cdcc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801cd00:	1cc4      	adds	r4, r0, #3
 801cd02:	f108 0504 	add.w	r5, r8, #4
 801cd06:	f04f 0e00 	mov.w	lr, #0
 801cd0a:	45be      	cmp	lr, r7
 801cd0c:	da4d      	bge.n	801cdaa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801cd0e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801cd12:	b181      	cbz	r1, 801cd36 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801cd14:	29ff      	cmp	r1, #255	; 0xff
 801cd16:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801cd1a:	d111      	bne.n	801cd40 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801cd1c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801cd20:	d10e      	bne.n	801cd40 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801cd22:	f804 bc03 	strb.w	fp, [r4, #-3]
 801cd26:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801cd2a:	f804 2c02 	strb.w	r2, [r4, #-2]
 801cd2e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801cd32:	f804 2c01 	strb.w	r2, [r4, #-1]
 801cd36:	f10e 0e01 	add.w	lr, lr, #1
 801cd3a:	3403      	adds	r4, #3
 801cd3c:	3504      	adds	r5, #4
 801cd3e:	e7e4      	b.n	801cd0a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801cd40:	fb0a f101 	mul.w	r1, sl, r1
 801cd44:	1c4a      	adds	r2, r1, #1
 801cd46:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801cd4a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801cd4e:	1212      	asrs	r2, r2, #8
 801cd50:	b296      	uxth	r6, r2
 801cd52:	43d2      	mvns	r2, r2
 801cd54:	fb1b fb06 	smulbb	fp, fp, r6
 801cd58:	b2d2      	uxtb	r2, r2
 801cd5a:	fb01 b102 	mla	r1, r1, r2, fp
 801cd5e:	b289      	uxth	r1, r1
 801cd60:	f101 0b01 	add.w	fp, r1, #1
 801cd64:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801cd68:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801cd6c:	fb1b fb02 	smulbb	fp, fp, r2
 801cd70:	1209      	asrs	r1, r1, #8
 801cd72:	f804 1c03 	strb.w	r1, [r4, #-3]
 801cd76:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801cd7a:	fb01 b106 	mla	r1, r1, r6, fp
 801cd7e:	b289      	uxth	r1, r1
 801cd80:	f101 0b01 	add.w	fp, r1, #1
 801cd84:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801cd88:	1209      	asrs	r1, r1, #8
 801cd8a:	f804 1c02 	strb.w	r1, [r4, #-2]
 801cd8e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801cd92:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801cd96:	fb11 f202 	smulbb	r2, r1, r2
 801cd9a:	fb0b 2206 	mla	r2, fp, r6, r2
 801cd9e:	b292      	uxth	r2, r2
 801cda0:	1c56      	adds	r6, r2, #1
 801cda2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801cda6:	1212      	asrs	r2, r2, #8
 801cda8:	e7c3      	b.n	801cd32 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801cdaa:	881a      	ldrh	r2, [r3, #0]
 801cdac:	f10c 0c01 	add.w	ip, ip, #1
 801cdb0:	9905      	ldr	r1, [sp, #20]
 801cdb2:	1bd2      	subs	r2, r2, r7
 801cdb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cdb8:	440a      	add	r2, r1
 801cdba:	9904      	ldr	r1, [sp, #16]
 801cdbc:	4410      	add	r0, r2
 801cdbe:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801cdc2:	1bd2      	subs	r2, r2, r7
 801cdc4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801cdc8:	4490      	add	r8, r2
 801cdca:	e797      	b.n	801ccfc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801cdcc:	4b02      	ldr	r3, [pc, #8]	; (801cdd8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801cdce:	6818      	ldr	r0, [r3, #0]
 801cdd0:	6803      	ldr	r3, [r0, #0]
 801cdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdd4:	4798      	blx	r3
 801cdd6:	e774      	b.n	801ccc2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801cdd8:	2000bc68 	.word	0x2000bc68
 801cddc:	2000bc62 	.word	0x2000bc62

0801cde0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801cde0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cde4:	b085      	sub	sp, #20
 801cde6:	4606      	mov	r6, r0
 801cde8:	460c      	mov	r4, r1
 801cdea:	4691      	mov	r9, r2
 801cdec:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801cdf0:	4698      	mov	r8, r3
 801cdf2:	b385      	cbz	r5, 801ce56 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801cdf4:	4608      	mov	r0, r1
 801cdf6:	f7fd fae5 	bl	801a3c4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cdfa:	4607      	mov	r7, r0
 801cdfc:	4620      	mov	r0, r4
 801cdfe:	f7fd fb1b 	bl	801a438 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ce02:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ce06:	4620      	mov	r0, r4
 801ce08:	f8ad 9008 	strh.w	r9, [sp, #8]
 801ce0c:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ce10:	f8ad 700c 	strh.w	r7, [sp, #12]
 801ce14:	f7fd fc62 	bl	801a6dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ce18:	2801      	cmp	r0, #1
 801ce1a:	d00f      	beq.n	801ce3c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ce1c:	4620      	mov	r0, r4
 801ce1e:	f7fd fc5d 	bl	801a6dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ce22:	2802      	cmp	r0, #2
 801ce24:	d00a      	beq.n	801ce3c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ce26:	4620      	mov	r0, r4
 801ce28:	f7fd fc58 	bl	801a6dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ce2c:	280b      	cmp	r0, #11
 801ce2e:	d005      	beq.n	801ce3c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ce30:	4b1b      	ldr	r3, [pc, #108]	; (801cea0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801ce32:	2142      	movs	r1, #66	; 0x42
 801ce34:	4a1b      	ldr	r2, [pc, #108]	; (801cea4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801ce36:	481c      	ldr	r0, [pc, #112]	; (801cea8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801ce38:	f007 f816 	bl	8023e68 <__assert_func>
 801ce3c:	4620      	mov	r0, r4
 801ce3e:	f7fd fc4d 	bl	801a6dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ce42:	2802      	cmp	r0, #2
 801ce44:	4620      	mov	r0, r4
 801ce46:	d109      	bne.n	801ce5c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801ce48:	f7fd fbc4 	bl	801a5d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ce4c:	462b      	mov	r3, r5
 801ce4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ce50:	a902      	add	r1, sp, #8
 801ce52:	f7ff feeb 	bl	801cc2c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ce56:	b005      	add	sp, #20
 801ce58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce5c:	f7fd fc3e 	bl	801a6dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ce60:	280b      	cmp	r0, #11
 801ce62:	d10e      	bne.n	801ce82 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801ce64:	4620      	mov	r0, r4
 801ce66:	f7fd fbb5 	bl	801a5d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ce6a:	4606      	mov	r6, r0
 801ce6c:	4620      	mov	r0, r4
 801ce6e:	f7fd fbe3 	bl	801a638 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ce72:	9500      	str	r5, [sp, #0]
 801ce74:	4601      	mov	r1, r0
 801ce76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce78:	aa02      	add	r2, sp, #8
 801ce7a:	4630      	mov	r0, r6
 801ce7c:	f7ff feb6 	bl	801cbec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ce80:	e7e9      	b.n	801ce56 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801ce82:	6833      	ldr	r3, [r6, #0]
 801ce84:	4620      	mov	r0, r4
 801ce86:	691f      	ldr	r7, [r3, #16]
 801ce88:	f7fd fba4 	bl	801a5d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	4601      	mov	r1, r0
 801ce90:	aa02      	add	r2, sp, #8
 801ce92:	4630      	mov	r0, r6
 801ce94:	e9cd 5300 	strd	r5, r3, [sp]
 801ce98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce9a:	47b8      	blx	r7
 801ce9c:	e7db      	b.n	801ce56 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801ce9e:	bf00      	nop
 801cea0:	08028475 	.word	0x08028475
 801cea4:	08028b67 	.word	0x08028b67
 801cea8:	080285b7 	.word	0x080285b7

0801ceac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ceac:	b570      	push	{r4, r5, r6, lr}
 801ceae:	9d04      	ldr	r5, [sp, #16]
 801ceb0:	460c      	mov	r4, r1
 801ceb2:	4619      	mov	r1, r3
 801ceb4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ceb8:	2a0c      	cmp	r2, #12
 801ceba:	d826      	bhi.n	801cf0a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801cebc:	e8df f002 	tbb	[pc, r2]
 801cec0:	200e1407 	.word	0x200e1407
 801cec4:	20202020 	.word	0x20202020
 801cec8:	20202020 	.word	0x20202020
 801cecc:	20          	.byte	0x20
 801cecd:	00          	.byte	0x00
 801cece:	4b0f      	ldr	r3, [pc, #60]	; (801cf0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801ced0:	f240 117f 	movw	r1, #383	; 0x17f
 801ced4:	4a0e      	ldr	r2, [pc, #56]	; (801cf10 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801ced6:	480f      	ldr	r0, [pc, #60]	; (801cf14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801ced8:	f006 ffc6 	bl	8023e68 <__assert_func>
 801cedc:	462a      	mov	r2, r5
 801cede:	4620      	mov	r0, r4
 801cee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cee4:	f7ff bea2 	b.w	801cc2c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cee8:	6802      	ldr	r2, [r0, #0]
 801ceea:	2600      	movs	r6, #0
 801ceec:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801cef0:	6916      	ldr	r6, [r2, #16]
 801cef2:	462b      	mov	r3, r5
 801cef4:	460a      	mov	r2, r1
 801cef6:	4621      	mov	r1, r4
 801cef8:	46b4      	mov	ip, r6
 801cefa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cefe:	4760      	bx	ip
 801cf00:	4b05      	ldr	r3, [pc, #20]	; (801cf18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801cf02:	f240 1191 	movw	r1, #401	; 0x191
 801cf06:	4a02      	ldr	r2, [pc, #8]	; (801cf10 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801cf08:	e7e5      	b.n	801ced6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801cf0a:	bd70      	pop	{r4, r5, r6, pc}
 801cf0c:	08028790 	.word	0x08028790
 801cf10:	08028e4f 	.word	0x08028e4f
 801cf14:	080285b7 	.word	0x080285b7
 801cf18:	080287d1 	.word	0x080287d1

0801cf1c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801cf1c:	b158      	cbz	r0, 801cf36 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801cf1e:	2902      	cmp	r1, #2
 801cf20:	d00f      	beq.n	801cf42 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801cf22:	2903      	cmp	r1, #3
 801cf24:	d010      	beq.n	801cf48 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801cf26:	2901      	cmp	r1, #1
 801cf28:	d101      	bne.n	801cf2e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801cf2a:	2001      	movs	r0, #1
 801cf2c:	4770      	bx	lr
 801cf2e:	4b08      	ldr	r3, [pc, #32]	; (801cf50 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801cf30:	8819      	ldrh	r1, [r3, #0]
 801cf32:	4248      	negs	r0, r1
 801cf34:	4770      	bx	lr
 801cf36:	2902      	cmp	r1, #2
 801cf38:	d006      	beq.n	801cf48 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801cf3a:	2903      	cmp	r1, #3
 801cf3c:	d0f7      	beq.n	801cf2e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801cf3e:	2901      	cmp	r1, #1
 801cf40:	d1f3      	bne.n	801cf2a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801cf42:	4b03      	ldr	r3, [pc, #12]	; (801cf50 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801cf44:	8818      	ldrh	r0, [r3, #0]
 801cf46:	4770      	bx	lr
 801cf48:	f04f 30ff 	mov.w	r0, #4294967295
 801cf4c:	4770      	bx	lr
 801cf4e:	bf00      	nop
 801cf50:	2000bc62 	.word	0x2000bc62

0801cf54 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801cf54:	b170      	cbz	r0, 801cf74 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801cf56:	2902      	cmp	r1, #2
 801cf58:	d012      	beq.n	801cf80 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801cf5a:	2903      	cmp	r1, #3
 801cf5c:	d006      	beq.n	801cf6c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801cf5e:	2901      	cmp	r1, #1
 801cf60:	d001      	beq.n	801cf66 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801cf62:	2001      	movs	r0, #1
 801cf64:	4770      	bx	lr
 801cf66:	4b08      	ldr	r3, [pc, #32]	; (801cf88 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801cf68:	8818      	ldrh	r0, [r3, #0]
 801cf6a:	4770      	bx	lr
 801cf6c:	4b06      	ldr	r3, [pc, #24]	; (801cf88 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801cf6e:	8818      	ldrh	r0, [r3, #0]
 801cf70:	4240      	negs	r0, r0
 801cf72:	4770      	bx	lr
 801cf74:	2902      	cmp	r1, #2
 801cf76:	d0f9      	beq.n	801cf6c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801cf78:	2903      	cmp	r1, #3
 801cf7a:	d0f2      	beq.n	801cf62 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801cf7c:	2901      	cmp	r1, #1
 801cf7e:	d1f2      	bne.n	801cf66 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801cf80:	f04f 30ff 	mov.w	r0, #4294967295
 801cf84:	4770      	bx	lr
 801cf86:	bf00      	nop
 801cf88:	2000bc62 	.word	0x2000bc62

0801cf8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801cf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf90:	b095      	sub	sp, #84	; 0x54
 801cf92:	9109      	str	r1, [sp, #36]	; 0x24
 801cf94:	a910      	add	r1, sp, #64	; 0x40
 801cf96:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801cf9a:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801cf9e:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801cfa2:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801cfa6:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801cfaa:	e881 000c 	stmia.w	r1, {r2, r3}
 801cfae:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801cfb2:	9306      	str	r3, [sp, #24]
 801cfb4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801cfb8:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801cfbc:	930e      	str	r3, [sp, #56]	; 0x38
 801cfbe:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801cfc2:	798f      	ldrb	r7, [r1, #6]
 801cfc4:	930a      	str	r3, [sp, #40]	; 0x28
 801cfc6:	7b4b      	ldrb	r3, [r1, #13]
 801cfc8:	0158      	lsls	r0, r3, #5
 801cfca:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801cfce:	4338      	orrs	r0, r7
 801cfd0:	9008      	str	r0, [sp, #32]
 801cfd2:	f000 8174 	beq.w	801d2be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801cfd6:	011b      	lsls	r3, r3, #4
 801cfd8:	79c8      	ldrb	r0, [r1, #7]
 801cfda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cfde:	4303      	orrs	r3, r0
 801cfe0:	9307      	str	r3, [sp, #28]
 801cfe2:	f000 816c 	beq.w	801d2be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801cfe6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801cfea:	b29b      	uxth	r3, r3
 801cfec:	2e00      	cmp	r6, #0
 801cfee:	f000 8112 	beq.w	801d216 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801cff2:	1af6      	subs	r6, r6, r3
 801cff4:	b2b6      	uxth	r6, r6
 801cff6:	0433      	lsls	r3, r6, #16
 801cff8:	d502      	bpl.n	801d000 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801cffa:	1bad      	subs	r5, r5, r6
 801cffc:	2600      	movs	r6, #0
 801cffe:	b22d      	sxth	r5, r5
 801d000:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d004:	a810      	add	r0, sp, #64	; 0x40
 801d006:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801d00a:	428d      	cmp	r5, r1
 801d00c:	b28b      	uxth	r3, r1
 801d00e:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801d012:	bfbf      	itttt	lt
 801d014:	18f6      	addlt	r6, r6, r3
 801d016:	1b75      	sublt	r5, r6, r5
 801d018:	b2ae      	uxthlt	r6, r5
 801d01a:	460d      	movlt	r5, r1
 801d01c:	8891      	ldrh	r1, [r2, #4]
 801d01e:	440b      	add	r3, r1
 801d020:	4629      	mov	r1, r5
 801d022:	b21b      	sxth	r3, r3
 801d024:	930d      	str	r3, [sp, #52]	; 0x34
 801d026:	88d3      	ldrh	r3, [r2, #6]
 801d028:	9a06      	ldr	r2, [sp, #24]
 801d02a:	449a      	add	sl, r3
 801d02c:	fa0f f38a 	sxth.w	r3, sl
 801d030:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801d034:	930c      	str	r3, [sp, #48]	; 0x30
 801d036:	4bb8      	ldr	r3, [pc, #736]	; (801d318 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801d038:	f893 b000 	ldrb.w	fp, [r3]
 801d03c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d040:	f1dc 0300 	rsbs	r3, ip, #0
 801d044:	eb43 030c 	adc.w	r3, r3, ip
 801d048:	930b      	str	r3, [sp, #44]	; 0x2c
 801d04a:	464b      	mov	r3, r9
 801d04c:	f7fa fcb2 	bl	80179b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d050:	4629      	mov	r1, r5
 801d052:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801d056:	464b      	mov	r3, r9
 801d058:	9a06      	ldr	r2, [sp, #24]
 801d05a:	a810      	add	r0, sp, #64	; 0x40
 801d05c:	f7fa fcc2 	bl	80179e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d060:	a914      	add	r1, sp, #80	; 0x50
 801d062:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d066:	a813      	add	r0, sp, #76	; 0x4c
 801d068:	f7fa fd9c 	bl	8017ba4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d06c:	f1b9 0f00 	cmp.w	r9, #0
 801d070:	f040 80d4 	bne.w	801d21c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801d074:	f1bb 0f01 	cmp.w	fp, #1
 801d078:	f040 80d8 	bne.w	801d22c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801d07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d07e:	2b00      	cmp	r3, #0
 801d080:	f040 8122 	bne.w	801d2c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801d084:	4ba5      	ldr	r3, [pc, #660]	; (801d31c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801d086:	6818      	ldr	r0, [r3, #0]
 801d088:	6803      	ldr	r3, [r0, #0]
 801d08a:	6a1b      	ldr	r3, [r3, #32]
 801d08c:	4798      	blx	r3
 801d08e:	4aa4      	ldr	r2, [pc, #656]	; (801d320 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801d090:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801d094:	8811      	ldrh	r1, [r2, #0]
 801d096:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801d09a:	fb01 2303 	mla	r3, r1, r3, r2
 801d09e:	2201      	movs	r2, #1
 801d0a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0a4:	4590      	cmp	r8, r2
 801d0a6:	4403      	add	r3, r0
 801d0a8:	9307      	str	r3, [sp, #28]
 801d0aa:	fa02 f308 	lsl.w	r3, r2, r8
 801d0ae:	f103 33ff 	add.w	r3, r3, #4294967295
 801d0b2:	b2db      	uxtb	r3, r3
 801d0b4:	930f      	str	r3, [sp, #60]	; 0x3c
 801d0b6:	f000 8109 	beq.w	801d2cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801d0ba:	f1b8 0f02 	cmp.w	r8, #2
 801d0be:	f000 813e 	beq.w	801d33e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801d0c2:	f1b8 0f04 	cmp.w	r8, #4
 801d0c6:	f000 8132 	beq.w	801d32e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801d0ca:	b906      	cbnz	r6, 801d0ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801d0cc:	b174      	cbz	r4, 801d0ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801d0ce:	fb17 6304 	smlabb	r3, r7, r4, r6
 801d0d2:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d0d4:	ebaa 0a04 	sub.w	sl, sl, r4
 801d0d8:	fb13 f308 	smulbb	r3, r3, r8
 801d0dc:	fa1f fa8a 	uxth.w	sl, sl
 801d0e0:	b29b      	uxth	r3, r3
 801d0e2:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801d0e6:	f003 0407 	and.w	r4, r3, #7
 801d0ea:	9124      	str	r1, [sp, #144]	; 0x90
 801d0ec:	4649      	mov	r1, r9
 801d0ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d0f0:	f7ff ff14 	bl	801cf1c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801d0f4:	4649      	mov	r1, r9
 801d0f6:	4683      	mov	fp, r0
 801d0f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d0fa:	f7ff ff2b 	bl	801cf54 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801d0fe:	9906      	ldr	r1, [sp, #24]
 801d100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d102:	1bad      	subs	r5, r5, r6
 801d104:	1a5b      	subs	r3, r3, r1
 801d106:	459a      	cmp	sl, r3
 801d108:	bfa8      	it	ge
 801d10a:	469a      	movge	sl, r3
 801d10c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d10e:	1b5d      	subs	r5, r3, r5
 801d110:	9b08      	ldr	r3, [sp, #32]
 801d112:	429d      	cmp	r5, r3
 801d114:	bfd4      	ite	le
 801d116:	ebc6 0605 	rsble	r6, r6, r5
 801d11a:	ebc6 0603 	rsbgt	r6, r6, r3
 801d11e:	1bbf      	subs	r7, r7, r6
 801d120:	fb0b 0016 	mls	r0, fp, r6, r0
 801d124:	fb08 f307 	mul.w	r3, r8, r7
 801d128:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d12c:	9308      	str	r3, [sp, #32]
 801d12e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d130:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d134:	930b      	str	r3, [sp, #44]	; 0x2c
 801d136:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d138:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d13c:	930c      	str	r3, [sp, #48]	; 0x30
 801d13e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d140:	b2db      	uxtb	r3, r3
 801d142:	930d      	str	r3, [sp, #52]	; 0x34
 801d144:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d146:	7819      	ldrb	r1, [r3, #0]
 801d148:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d14c:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801d150:	4121      	asrs	r1, r4
 801d152:	9306      	str	r3, [sp, #24]
 801d154:	fb03 0b0b 	mla	fp, r3, fp, r0
 801d158:	b2c9      	uxtb	r1, r1
 801d15a:	f1ba 0f00 	cmp.w	sl, #0
 801d15e:	f340 80d1 	ble.w	801d304 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801d162:	46b6      	mov	lr, r6
 801d164:	9807      	ldr	r0, [sp, #28]
 801d166:	f1be 0f00 	cmp.w	lr, #0
 801d16a:	f340 80b8 	ble.w	801d2de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801d16e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d170:	400b      	ands	r3, r1
 801d172:	d03e      	beq.n	801d1f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801d174:	fb13 f302 	smulbb	r3, r3, r2
 801d178:	2bfe      	cmp	r3, #254	; 0xfe
 801d17a:	dd03      	ble.n	801d184 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801d17c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d17e:	2dff      	cmp	r5, #255	; 0xff
 801d180:	f000 80a6 	beq.w	801d2d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801d184:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d186:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d188:	fb15 f303 	smulbb	r3, r5, r3
 801d18c:	b29b      	uxth	r3, r3
 801d18e:	1c5d      	adds	r5, r3, #1
 801d190:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801d194:	7805      	ldrb	r5, [r0, #0]
 801d196:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d19a:	fa1f fc83 	uxth.w	ip, r3
 801d19e:	43db      	mvns	r3, r3
 801d1a0:	fb17 f90c 	smulbb	r9, r7, ip
 801d1a4:	b2db      	uxtb	r3, r3
 801d1a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d1a8:	fb05 9503 	mla	r5, r5, r3, r9
 801d1ac:	b2ad      	uxth	r5, r5
 801d1ae:	f105 0901 	add.w	r9, r5, #1
 801d1b2:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d1b6:	fb17 f90c 	smulbb	r9, r7, ip
 801d1ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d1bc:	122d      	asrs	r5, r5, #8
 801d1be:	fb17 fc0c 	smulbb	ip, r7, ip
 801d1c2:	7005      	strb	r5, [r0, #0]
 801d1c4:	7845      	ldrb	r5, [r0, #1]
 801d1c6:	fb05 9503 	mla	r5, r5, r3, r9
 801d1ca:	b2ad      	uxth	r5, r5
 801d1cc:	f105 0901 	add.w	r9, r5, #1
 801d1d0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d1d4:	122d      	asrs	r5, r5, #8
 801d1d6:	7045      	strb	r5, [r0, #1]
 801d1d8:	7885      	ldrb	r5, [r0, #2]
 801d1da:	fb05 cc03 	mla	ip, r5, r3, ip
 801d1de:	fa1f fc8c 	uxth.w	ip, ip
 801d1e2:	f10c 0301 	add.w	r3, ip, #1
 801d1e6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d1ea:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d1ee:	f880 c002 	strb.w	ip, [r0, #2]
 801d1f2:	4444      	add	r4, r8
 801d1f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d1f8:	b2a4      	uxth	r4, r4
 801d1fa:	2c07      	cmp	r4, #7
 801d1fc:	bf89      	itett	hi
 801d1fe:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801d200:	fa41 f108 	asrls.w	r1, r1, r8
 801d204:	2400      	movhi	r4, #0
 801d206:	7859      	ldrbhi	r1, [r3, #1]
 801d208:	bf8a      	itet	hi
 801d20a:	3301      	addhi	r3, #1
 801d20c:	b2c9      	uxtbls	r1, r1
 801d20e:	9324      	strhi	r3, [sp, #144]	; 0x90
 801d210:	9b06      	ldr	r3, [sp, #24]
 801d212:	4418      	add	r0, r3
 801d214:	e7a7      	b.n	801d166 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801d216:	441d      	add	r5, r3
 801d218:	b22d      	sxth	r5, r5
 801d21a:	e6f1      	b.n	801d000 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d21c:	f1b9 0f01 	cmp.w	r9, #1
 801d220:	f47f af2c 	bne.w	801d07c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d224:	f1bb 0f01 	cmp.w	fp, #1
 801d228:	f47f af28 	bne.w	801d07c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d22c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801d31c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801d230:	f8db 0000 	ldr.w	r0, [fp]
 801d234:	6803      	ldr	r3, [r0, #0]
 801d236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d238:	4798      	blx	r3
 801d23a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801d23e:	465a      	mov	r2, fp
 801d240:	d006      	beq.n	801d250 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801d242:	f1b8 0f04 	cmp.w	r8, #4
 801d246:	d13d      	bne.n	801d2c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801d248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d24a:	3300      	adds	r3, #0
 801d24c:	bf18      	it	ne
 801d24e:	2301      	movne	r3, #1
 801d250:	05c0      	lsls	r0, r0, #23
 801d252:	d567      	bpl.n	801d324 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801d254:	f1b8 0f08 	cmp.w	r8, #8
 801d258:	d164      	bne.n	801d324 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	bf0c      	ite	eq
 801d25e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801d262:	2180      	movne	r1, #128	; 0x80
 801d264:	2e00      	cmp	r6, #0
 801d266:	f47f af09 	bne.w	801d07c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d26a:	2c00      	cmp	r4, #0
 801d26c:	f47f af06 	bne.w	801d07c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d270:	9b08      	ldr	r3, [sp, #32]
 801d272:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d274:	442b      	add	r3, r5
 801d276:	4283      	cmp	r3, r0
 801d278:	f73f af00 	bgt.w	801d07c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d27c:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801d280:	4403      	add	r3, r0
 801d282:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d284:	4283      	cmp	r3, r0
 801d286:	f73f aef9 	bgt.w	801d07c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d28a:	f1b8 0f08 	cmp.w	r8, #8
 801d28e:	6810      	ldr	r0, [r2, #0]
 801d290:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801d294:	bf18      	it	ne
 801d296:	3701      	addne	r7, #1
 801d298:	6804      	ldr	r4, [r0, #0]
 801d29a:	9105      	str	r1, [sp, #20]
 801d29c:	bf18      	it	ne
 801d29e:	f027 0701 	bicne.w	r7, r7, #1
 801d2a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d2a4:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801d2a8:	bf18      	it	ne
 801d2aa:	b2bf      	uxthne	r7, r7
 801d2ac:	9104      	str	r1, [sp, #16]
 801d2ae:	9926      	ldr	r1, [sp, #152]	; 0x98
 801d2b0:	e9cd 7a00 	strd	r7, sl, [sp]
 801d2b4:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801d2b8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d2ba:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801d2bc:	47a0      	blx	r4
 801d2be:	b015      	add	sp, #84	; 0x54
 801d2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2c4:	2300      	movs	r3, #0
 801d2c6:	e7c3      	b.n	801d250 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801d2c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d2ca:	e6e0      	b.n	801d08e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801d2cc:	22ff      	movs	r2, #255	; 0xff
 801d2ce:	e6fc      	b.n	801d0ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d2d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d2d2:	7003      	strb	r3, [r0, #0]
 801d2d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d2d6:	7043      	strb	r3, [r0, #1]
 801d2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2da:	7083      	strb	r3, [r0, #2]
 801d2dc:	e789      	b.n	801d1f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801d2de:	9b08      	ldr	r3, [sp, #32]
 801d2e0:	b153      	cbz	r3, 801d2f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801d2e2:	441c      	add	r4, r3
 801d2e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d2e6:	b2a4      	uxth	r4, r4
 801d2e8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801d2ec:	f004 0407 	and.w	r4, r4, #7
 801d2f0:	7819      	ldrb	r1, [r3, #0]
 801d2f2:	9324      	str	r3, [sp, #144]	; 0x90
 801d2f4:	4121      	asrs	r1, r4
 801d2f6:	b2c9      	uxtb	r1, r1
 801d2f8:	9b07      	ldr	r3, [sp, #28]
 801d2fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d2fe:	445b      	add	r3, fp
 801d300:	9307      	str	r3, [sp, #28]
 801d302:	e72a      	b.n	801d15a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801d304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d306:	2b00      	cmp	r3, #0
 801d308:	d1d9      	bne.n	801d2be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801d30a:	4b04      	ldr	r3, [pc, #16]	; (801d31c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801d30c:	6818      	ldr	r0, [r3, #0]
 801d30e:	6803      	ldr	r3, [r0, #0]
 801d310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d312:	4798      	blx	r3
 801d314:	e7d3      	b.n	801d2be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801d316:	bf00      	nop
 801d318:	2000bc60 	.word	0x2000bc60
 801d31c:	2000bc68 	.word	0x2000bc68
 801d320:	2000bc62 	.word	0x2000bc62
 801d324:	2b00      	cmp	r3, #0
 801d326:	f43f aea9 	beq.w	801d07c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d32a:	2180      	movs	r1, #128	; 0x80
 801d32c:	e79a      	b.n	801d264 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801d32e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d330:	b11b      	cbz	r3, 801d33a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801d332:	07fb      	lsls	r3, r7, #31
 801d334:	d501      	bpl.n	801d33a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801d336:	3701      	adds	r7, #1
 801d338:	b2bf      	uxth	r7, r7
 801d33a:	2211      	movs	r2, #17
 801d33c:	e6c5      	b.n	801d0ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d33e:	2255      	movs	r2, #85	; 0x55
 801d340:	e6c3      	b.n	801d0ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801d342:	bf00      	nop

0801d344 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801d344:	b538      	push	{r3, r4, r5, lr}
 801d346:	4c15      	ldr	r4, [pc, #84]	; (801d39c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801d348:	4605      	mov	r5, r0
 801d34a:	7823      	ldrb	r3, [r4, #0]
 801d34c:	f3bf 8f5b 	dmb	ish
 801d350:	07da      	lsls	r2, r3, #31
 801d352:	d40b      	bmi.n	801d36c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d354:	4620      	mov	r0, r4
 801d356:	f006 fd5e 	bl	8023e16 <__cxa_guard_acquire>
 801d35a:	b138      	cbz	r0, 801d36c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d35c:	4620      	mov	r0, r4
 801d35e:	f006 fd66 	bl	8023e2e <__cxa_guard_release>
 801d362:	4a0f      	ldr	r2, [pc, #60]	; (801d3a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d364:	490f      	ldr	r1, [pc, #60]	; (801d3a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801d366:	4810      	ldr	r0, [pc, #64]	; (801d3a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d368:	f006 fd4b 	bl	8023e02 <__aeabi_atexit>
 801d36c:	4c0f      	ldr	r4, [pc, #60]	; (801d3ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801d36e:	7823      	ldrb	r3, [r4, #0]
 801d370:	f3bf 8f5b 	dmb	ish
 801d374:	07db      	lsls	r3, r3, #31
 801d376:	d40b      	bmi.n	801d390 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d378:	4620      	mov	r0, r4
 801d37a:	f006 fd4c 	bl	8023e16 <__cxa_guard_acquire>
 801d37e:	b138      	cbz	r0, 801d390 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d380:	4620      	mov	r0, r4
 801d382:	f006 fd54 	bl	8023e2e <__cxa_guard_release>
 801d386:	4a06      	ldr	r2, [pc, #24]	; (801d3a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d388:	4909      	ldr	r1, [pc, #36]	; (801d3b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801d38a:	480a      	ldr	r0, [pc, #40]	; (801d3b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d38c:	f006 fd39 	bl	8023e02 <__aeabi_atexit>
 801d390:	4b05      	ldr	r3, [pc, #20]	; (801d3a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d392:	612b      	str	r3, [r5, #16]
 801d394:	4b07      	ldr	r3, [pc, #28]	; (801d3b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d396:	616b      	str	r3, [r5, #20]
 801d398:	bd38      	pop	{r3, r4, r5, pc}
 801d39a:	bf00      	nop
 801d39c:	2000bd74 	.word	0x2000bd74
 801d3a0:	20000000 	.word	0x20000000
 801d3a4:	0801bf7b 	.word	0x0801bf7b
 801d3a8:	20000084 	.word	0x20000084
 801d3ac:	2000bd78 	.word	0x2000bd78
 801d3b0:	0801bf79 	.word	0x0801bf79
 801d3b4:	20000088 	.word	0x20000088

0801d3b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801d3b8:	b538      	push	{r3, r4, r5, lr}
 801d3ba:	4c15      	ldr	r4, [pc, #84]	; (801d410 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801d3bc:	4605      	mov	r5, r0
 801d3be:	7823      	ldrb	r3, [r4, #0]
 801d3c0:	f3bf 8f5b 	dmb	ish
 801d3c4:	07da      	lsls	r2, r3, #31
 801d3c6:	d40b      	bmi.n	801d3e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d3c8:	4620      	mov	r0, r4
 801d3ca:	f006 fd24 	bl	8023e16 <__cxa_guard_acquire>
 801d3ce:	b138      	cbz	r0, 801d3e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d3d0:	4620      	mov	r0, r4
 801d3d2:	f006 fd2c 	bl	8023e2e <__cxa_guard_release>
 801d3d6:	4a0f      	ldr	r2, [pc, #60]	; (801d414 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d3d8:	490f      	ldr	r1, [pc, #60]	; (801d418 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801d3da:	4810      	ldr	r0, [pc, #64]	; (801d41c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d3dc:	f006 fd11 	bl	8023e02 <__aeabi_atexit>
 801d3e0:	4c0f      	ldr	r4, [pc, #60]	; (801d420 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801d3e2:	7823      	ldrb	r3, [r4, #0]
 801d3e4:	f3bf 8f5b 	dmb	ish
 801d3e8:	07db      	lsls	r3, r3, #31
 801d3ea:	d40b      	bmi.n	801d404 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d3ec:	4620      	mov	r0, r4
 801d3ee:	f006 fd12 	bl	8023e16 <__cxa_guard_acquire>
 801d3f2:	b138      	cbz	r0, 801d404 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d3f4:	4620      	mov	r0, r4
 801d3f6:	f006 fd1a 	bl	8023e2e <__cxa_guard_release>
 801d3fa:	4a06      	ldr	r2, [pc, #24]	; (801d414 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d3fc:	4909      	ldr	r1, [pc, #36]	; (801d424 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801d3fe:	480a      	ldr	r0, [pc, #40]	; (801d428 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d400:	f006 fcff 	bl	8023e02 <__aeabi_atexit>
 801d404:	4b05      	ldr	r3, [pc, #20]	; (801d41c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d406:	60ab      	str	r3, [r5, #8]
 801d408:	4b07      	ldr	r3, [pc, #28]	; (801d428 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d40a:	60eb      	str	r3, [r5, #12]
 801d40c:	bd38      	pop	{r3, r4, r5, pc}
 801d40e:	bf00      	nop
 801d410:	2000bd54 	.word	0x2000bd54
 801d414:	20000000 	.word	0x20000000
 801d418:	0801bf7f 	.word	0x0801bf7f
 801d41c:	20000064 	.word	0x20000064
 801d420:	2000bd58 	.word	0x2000bd58
 801d424:	0801bf7d 	.word	0x0801bf7d
 801d428:	20000068 	.word	0x20000068

0801d42c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801d42c:	b510      	push	{r4, lr}
 801d42e:	4604      	mov	r4, r0
 801d430:	f7ff ff88 	bl	801d344 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801d434:	4620      	mov	r0, r4
 801d436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d43a:	f7ff bfbd 	b.w	801d3b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801d440 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801d440:	b538      	push	{r3, r4, r5, lr}
 801d442:	4c15      	ldr	r4, [pc, #84]	; (801d498 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801d444:	4605      	mov	r5, r0
 801d446:	7823      	ldrb	r3, [r4, #0]
 801d448:	f3bf 8f5b 	dmb	ish
 801d44c:	07da      	lsls	r2, r3, #31
 801d44e:	d40b      	bmi.n	801d468 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d450:	4620      	mov	r0, r4
 801d452:	f006 fce0 	bl	8023e16 <__cxa_guard_acquire>
 801d456:	b138      	cbz	r0, 801d468 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d458:	4620      	mov	r0, r4
 801d45a:	f006 fce8 	bl	8023e2e <__cxa_guard_release>
 801d45e:	4a0f      	ldr	r2, [pc, #60]	; (801d49c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d460:	490f      	ldr	r1, [pc, #60]	; (801d4a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801d462:	4810      	ldr	r0, [pc, #64]	; (801d4a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d464:	f006 fccd 	bl	8023e02 <__aeabi_atexit>
 801d468:	4c0f      	ldr	r4, [pc, #60]	; (801d4a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801d46a:	7823      	ldrb	r3, [r4, #0]
 801d46c:	f3bf 8f5b 	dmb	ish
 801d470:	07db      	lsls	r3, r3, #31
 801d472:	d40b      	bmi.n	801d48c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d474:	4620      	mov	r0, r4
 801d476:	f006 fcce 	bl	8023e16 <__cxa_guard_acquire>
 801d47a:	b138      	cbz	r0, 801d48c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d47c:	4620      	mov	r0, r4
 801d47e:	f006 fcd6 	bl	8023e2e <__cxa_guard_release>
 801d482:	4a06      	ldr	r2, [pc, #24]	; (801d49c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d484:	4909      	ldr	r1, [pc, #36]	; (801d4ac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801d486:	480a      	ldr	r0, [pc, #40]	; (801d4b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d488:	f006 fcbb 	bl	8023e02 <__aeabi_atexit>
 801d48c:	4b05      	ldr	r3, [pc, #20]	; (801d4a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d48e:	622b      	str	r3, [r5, #32]
 801d490:	4b07      	ldr	r3, [pc, #28]	; (801d4b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d492:	626b      	str	r3, [r5, #36]	; 0x24
 801d494:	bd38      	pop	{r3, r4, r5, pc}
 801d496:	bf00      	nop
 801d498:	2000bd7c 	.word	0x2000bd7c
 801d49c:	20000000 	.word	0x20000000
 801d4a0:	0801bf73 	.word	0x0801bf73
 801d4a4:	2000008c 	.word	0x2000008c
 801d4a8:	2000bd80 	.word	0x2000bd80
 801d4ac:	0801bf71 	.word	0x0801bf71
 801d4b0:	20000090 	.word	0x20000090

0801d4b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801d4b4:	b538      	push	{r3, r4, r5, lr}
 801d4b6:	4c15      	ldr	r4, [pc, #84]	; (801d50c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801d4b8:	4605      	mov	r5, r0
 801d4ba:	7823      	ldrb	r3, [r4, #0]
 801d4bc:	f3bf 8f5b 	dmb	ish
 801d4c0:	07da      	lsls	r2, r3, #31
 801d4c2:	d40b      	bmi.n	801d4dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d4c4:	4620      	mov	r0, r4
 801d4c6:	f006 fca6 	bl	8023e16 <__cxa_guard_acquire>
 801d4ca:	b138      	cbz	r0, 801d4dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d4cc:	4620      	mov	r0, r4
 801d4ce:	f006 fcae 	bl	8023e2e <__cxa_guard_release>
 801d4d2:	4a0f      	ldr	r2, [pc, #60]	; (801d510 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d4d4:	490f      	ldr	r1, [pc, #60]	; (801d514 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801d4d6:	4810      	ldr	r0, [pc, #64]	; (801d518 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d4d8:	f006 fc93 	bl	8023e02 <__aeabi_atexit>
 801d4dc:	4c0f      	ldr	r4, [pc, #60]	; (801d51c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801d4de:	7823      	ldrb	r3, [r4, #0]
 801d4e0:	f3bf 8f5b 	dmb	ish
 801d4e4:	07db      	lsls	r3, r3, #31
 801d4e6:	d40b      	bmi.n	801d500 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d4e8:	4620      	mov	r0, r4
 801d4ea:	f006 fc94 	bl	8023e16 <__cxa_guard_acquire>
 801d4ee:	b138      	cbz	r0, 801d500 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d4f0:	4620      	mov	r0, r4
 801d4f2:	f006 fc9c 	bl	8023e2e <__cxa_guard_release>
 801d4f6:	4a06      	ldr	r2, [pc, #24]	; (801d510 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d4f8:	4909      	ldr	r1, [pc, #36]	; (801d520 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801d4fa:	480a      	ldr	r0, [pc, #40]	; (801d524 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d4fc:	f006 fc81 	bl	8023e02 <__aeabi_atexit>
 801d500:	4b05      	ldr	r3, [pc, #20]	; (801d518 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d502:	61ab      	str	r3, [r5, #24]
 801d504:	4b07      	ldr	r3, [pc, #28]	; (801d524 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d506:	61eb      	str	r3, [r5, #28]
 801d508:	bd38      	pop	{r3, r4, r5, pc}
 801d50a:	bf00      	nop
 801d50c:	2000bd5c 	.word	0x2000bd5c
 801d510:	20000000 	.word	0x20000000
 801d514:	0801bf77 	.word	0x0801bf77
 801d518:	2000006c 	.word	0x2000006c
 801d51c:	2000bd60 	.word	0x2000bd60
 801d520:	0801bf75 	.word	0x0801bf75
 801d524:	20000070 	.word	0x20000070

0801d528 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801d528:	b510      	push	{r4, lr}
 801d52a:	4604      	mov	r4, r0
 801d52c:	f7ff ff88 	bl	801d440 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801d530:	4620      	mov	r0, r4
 801d532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d536:	f7ff bfbd 	b.w	801d4b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801d53c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801d53c:	b538      	push	{r3, r4, r5, lr}
 801d53e:	4c15      	ldr	r4, [pc, #84]	; (801d594 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801d540:	4605      	mov	r5, r0
 801d542:	7823      	ldrb	r3, [r4, #0]
 801d544:	f3bf 8f5b 	dmb	ish
 801d548:	07da      	lsls	r2, r3, #31
 801d54a:	d40b      	bmi.n	801d564 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801d54c:	4620      	mov	r0, r4
 801d54e:	f006 fc62 	bl	8023e16 <__cxa_guard_acquire>
 801d552:	b138      	cbz	r0, 801d564 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801d554:	4620      	mov	r0, r4
 801d556:	f006 fc6a 	bl	8023e2e <__cxa_guard_release>
 801d55a:	4a0f      	ldr	r2, [pc, #60]	; (801d598 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801d55c:	490f      	ldr	r1, [pc, #60]	; (801d59c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801d55e:	4810      	ldr	r0, [pc, #64]	; (801d5a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801d560:	f006 fc4f 	bl	8023e02 <__aeabi_atexit>
 801d564:	4c0f      	ldr	r4, [pc, #60]	; (801d5a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801d566:	7823      	ldrb	r3, [r4, #0]
 801d568:	f3bf 8f5b 	dmb	ish
 801d56c:	07db      	lsls	r3, r3, #31
 801d56e:	d40b      	bmi.n	801d588 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801d570:	4620      	mov	r0, r4
 801d572:	f006 fc50 	bl	8023e16 <__cxa_guard_acquire>
 801d576:	b138      	cbz	r0, 801d588 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801d578:	4620      	mov	r0, r4
 801d57a:	f006 fc58 	bl	8023e2e <__cxa_guard_release>
 801d57e:	4a06      	ldr	r2, [pc, #24]	; (801d598 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801d580:	4909      	ldr	r1, [pc, #36]	; (801d5a8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801d582:	480a      	ldr	r0, [pc, #40]	; (801d5ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801d584:	f006 fc3d 	bl	8023e02 <__aeabi_atexit>
 801d588:	4b05      	ldr	r3, [pc, #20]	; (801d5a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801d58a:	632b      	str	r3, [r5, #48]	; 0x30
 801d58c:	4b07      	ldr	r3, [pc, #28]	; (801d5ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801d58e:	636b      	str	r3, [r5, #52]	; 0x34
 801d590:	bd38      	pop	{r3, r4, r5, pc}
 801d592:	bf00      	nop
 801d594:	2000bd64 	.word	0x2000bd64
 801d598:	20000000 	.word	0x20000000
 801d59c:	0801bf6b 	.word	0x0801bf6b
 801d5a0:	20000074 	.word	0x20000074
 801d5a4:	2000bd68 	.word	0x2000bd68
 801d5a8:	0801bf69 	.word	0x0801bf69
 801d5ac:	20000078 	.word	0x20000078

0801d5b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801d5b0:	b538      	push	{r3, r4, r5, lr}
 801d5b2:	4c15      	ldr	r4, [pc, #84]	; (801d608 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801d5b4:	4605      	mov	r5, r0
 801d5b6:	7823      	ldrb	r3, [r4, #0]
 801d5b8:	f3bf 8f5b 	dmb	ish
 801d5bc:	07da      	lsls	r2, r3, #31
 801d5be:	d40b      	bmi.n	801d5d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801d5c0:	4620      	mov	r0, r4
 801d5c2:	f006 fc28 	bl	8023e16 <__cxa_guard_acquire>
 801d5c6:	b138      	cbz	r0, 801d5d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801d5c8:	4620      	mov	r0, r4
 801d5ca:	f006 fc30 	bl	8023e2e <__cxa_guard_release>
 801d5ce:	4a0f      	ldr	r2, [pc, #60]	; (801d60c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801d5d0:	490f      	ldr	r1, [pc, #60]	; (801d610 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801d5d2:	4810      	ldr	r0, [pc, #64]	; (801d614 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801d5d4:	f006 fc15 	bl	8023e02 <__aeabi_atexit>
 801d5d8:	4c0f      	ldr	r4, [pc, #60]	; (801d618 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801d5da:	7823      	ldrb	r3, [r4, #0]
 801d5dc:	f3bf 8f5b 	dmb	ish
 801d5e0:	07db      	lsls	r3, r3, #31
 801d5e2:	d40b      	bmi.n	801d5fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801d5e4:	4620      	mov	r0, r4
 801d5e6:	f006 fc16 	bl	8023e16 <__cxa_guard_acquire>
 801d5ea:	b138      	cbz	r0, 801d5fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801d5ec:	4620      	mov	r0, r4
 801d5ee:	f006 fc1e 	bl	8023e2e <__cxa_guard_release>
 801d5f2:	4a06      	ldr	r2, [pc, #24]	; (801d60c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801d5f4:	4909      	ldr	r1, [pc, #36]	; (801d61c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801d5f6:	480a      	ldr	r0, [pc, #40]	; (801d620 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801d5f8:	f006 fc03 	bl	8023e02 <__aeabi_atexit>
 801d5fc:	4b05      	ldr	r3, [pc, #20]	; (801d614 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801d5fe:	62ab      	str	r3, [r5, #40]	; 0x28
 801d600:	4b07      	ldr	r3, [pc, #28]	; (801d620 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801d602:	62eb      	str	r3, [r5, #44]	; 0x2c
 801d604:	bd38      	pop	{r3, r4, r5, pc}
 801d606:	bf00      	nop
 801d608:	2000bd3c 	.word	0x2000bd3c
 801d60c:	20000000 	.word	0x20000000
 801d610:	0801bf6f 	.word	0x0801bf6f
 801d614:	2000004c 	.word	0x2000004c
 801d618:	2000bd40 	.word	0x2000bd40
 801d61c:	0801bf6d 	.word	0x0801bf6d
 801d620:	20000050 	.word	0x20000050

0801d624 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801d624:	b510      	push	{r4, lr}
 801d626:	4604      	mov	r4, r0
 801d628:	f7ff ff88 	bl	801d53c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801d62c:	4620      	mov	r0, r4
 801d62e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d632:	f7ff bfbd 	b.w	801d5b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801d638 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801d638:	b538      	push	{r3, r4, r5, lr}
 801d63a:	4c15      	ldr	r4, [pc, #84]	; (801d690 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801d63c:	4605      	mov	r5, r0
 801d63e:	7823      	ldrb	r3, [r4, #0]
 801d640:	f3bf 8f5b 	dmb	ish
 801d644:	07da      	lsls	r2, r3, #31
 801d646:	d40b      	bmi.n	801d660 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d648:	4620      	mov	r0, r4
 801d64a:	f006 fbe4 	bl	8023e16 <__cxa_guard_acquire>
 801d64e:	b138      	cbz	r0, 801d660 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d650:	4620      	mov	r0, r4
 801d652:	f006 fbec 	bl	8023e2e <__cxa_guard_release>
 801d656:	4a0f      	ldr	r2, [pc, #60]	; (801d694 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d658:	490f      	ldr	r1, [pc, #60]	; (801d698 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801d65a:	4810      	ldr	r0, [pc, #64]	; (801d69c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d65c:	f006 fbd1 	bl	8023e02 <__aeabi_atexit>
 801d660:	4c0f      	ldr	r4, [pc, #60]	; (801d6a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801d662:	7823      	ldrb	r3, [r4, #0]
 801d664:	f3bf 8f5b 	dmb	ish
 801d668:	07db      	lsls	r3, r3, #31
 801d66a:	d40b      	bmi.n	801d684 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d66c:	4620      	mov	r0, r4
 801d66e:	f006 fbd2 	bl	8023e16 <__cxa_guard_acquire>
 801d672:	b138      	cbz	r0, 801d684 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d674:	4620      	mov	r0, r4
 801d676:	f006 fbda 	bl	8023e2e <__cxa_guard_release>
 801d67a:	4a06      	ldr	r2, [pc, #24]	; (801d694 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d67c:	4909      	ldr	r1, [pc, #36]	; (801d6a4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801d67e:	480a      	ldr	r0, [pc, #40]	; (801d6a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d680:	f006 fbbf 	bl	8023e02 <__aeabi_atexit>
 801d684:	4b05      	ldr	r3, [pc, #20]	; (801d69c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d686:	642b      	str	r3, [r5, #64]	; 0x40
 801d688:	4b07      	ldr	r3, [pc, #28]	; (801d6a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d68a:	646b      	str	r3, [r5, #68]	; 0x44
 801d68c:	bd38      	pop	{r3, r4, r5, pc}
 801d68e:	bf00      	nop
 801d690:	2000bd6c 	.word	0x2000bd6c
 801d694:	20000000 	.word	0x20000000
 801d698:	0801bf63 	.word	0x0801bf63
 801d69c:	2000007c 	.word	0x2000007c
 801d6a0:	2000bd70 	.word	0x2000bd70
 801d6a4:	0801bf61 	.word	0x0801bf61
 801d6a8:	20000080 	.word	0x20000080

0801d6ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801d6ac:	b538      	push	{r3, r4, r5, lr}
 801d6ae:	4c15      	ldr	r4, [pc, #84]	; (801d704 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801d6b0:	4605      	mov	r5, r0
 801d6b2:	7823      	ldrb	r3, [r4, #0]
 801d6b4:	f3bf 8f5b 	dmb	ish
 801d6b8:	07da      	lsls	r2, r3, #31
 801d6ba:	d40b      	bmi.n	801d6d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d6bc:	4620      	mov	r0, r4
 801d6be:	f006 fbaa 	bl	8023e16 <__cxa_guard_acquire>
 801d6c2:	b138      	cbz	r0, 801d6d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d6c4:	4620      	mov	r0, r4
 801d6c6:	f006 fbb2 	bl	8023e2e <__cxa_guard_release>
 801d6ca:	4a0f      	ldr	r2, [pc, #60]	; (801d708 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d6cc:	490f      	ldr	r1, [pc, #60]	; (801d70c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801d6ce:	4810      	ldr	r0, [pc, #64]	; (801d710 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d6d0:	f006 fb97 	bl	8023e02 <__aeabi_atexit>
 801d6d4:	4c0f      	ldr	r4, [pc, #60]	; (801d714 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801d6d6:	7823      	ldrb	r3, [r4, #0]
 801d6d8:	f3bf 8f5b 	dmb	ish
 801d6dc:	07db      	lsls	r3, r3, #31
 801d6de:	d40b      	bmi.n	801d6f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d6e0:	4620      	mov	r0, r4
 801d6e2:	f006 fb98 	bl	8023e16 <__cxa_guard_acquire>
 801d6e6:	b138      	cbz	r0, 801d6f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d6e8:	4620      	mov	r0, r4
 801d6ea:	f006 fba0 	bl	8023e2e <__cxa_guard_release>
 801d6ee:	4a06      	ldr	r2, [pc, #24]	; (801d708 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d6f0:	4909      	ldr	r1, [pc, #36]	; (801d718 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801d6f2:	480a      	ldr	r0, [pc, #40]	; (801d71c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d6f4:	f006 fb85 	bl	8023e02 <__aeabi_atexit>
 801d6f8:	4b05      	ldr	r3, [pc, #20]	; (801d710 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d6fa:	63ab      	str	r3, [r5, #56]	; 0x38
 801d6fc:	4b07      	ldr	r3, [pc, #28]	; (801d71c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d6fe:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d700:	bd38      	pop	{r3, r4, r5, pc}
 801d702:	bf00      	nop
 801d704:	2000bd4c 	.word	0x2000bd4c
 801d708:	20000000 	.word	0x20000000
 801d70c:	0801bf67 	.word	0x0801bf67
 801d710:	2000005c 	.word	0x2000005c
 801d714:	2000bd50 	.word	0x2000bd50
 801d718:	0801bf65 	.word	0x0801bf65
 801d71c:	20000060 	.word	0x20000060

0801d720 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801d720:	b510      	push	{r4, lr}
 801d722:	4604      	mov	r4, r0
 801d724:	f7ff ff88 	bl	801d638 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801d728:	4620      	mov	r0, r4
 801d72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d72e:	f7ff bfbd 	b.w	801d6ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801d734 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801d734:	b538      	push	{r3, r4, r5, lr}
 801d736:	4c15      	ldr	r4, [pc, #84]	; (801d78c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801d738:	4605      	mov	r5, r0
 801d73a:	7823      	ldrb	r3, [r4, #0]
 801d73c:	f3bf 8f5b 	dmb	ish
 801d740:	07da      	lsls	r2, r3, #31
 801d742:	d40b      	bmi.n	801d75c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801d744:	4620      	mov	r0, r4
 801d746:	f006 fb66 	bl	8023e16 <__cxa_guard_acquire>
 801d74a:	b138      	cbz	r0, 801d75c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801d74c:	4620      	mov	r0, r4
 801d74e:	f006 fb6e 	bl	8023e2e <__cxa_guard_release>
 801d752:	4a0f      	ldr	r2, [pc, #60]	; (801d790 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801d754:	490f      	ldr	r1, [pc, #60]	; (801d794 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801d756:	4810      	ldr	r0, [pc, #64]	; (801d798 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801d758:	f006 fb53 	bl	8023e02 <__aeabi_atexit>
 801d75c:	4c0f      	ldr	r4, [pc, #60]	; (801d79c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801d75e:	7823      	ldrb	r3, [r4, #0]
 801d760:	f3bf 8f5b 	dmb	ish
 801d764:	07db      	lsls	r3, r3, #31
 801d766:	d40b      	bmi.n	801d780 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801d768:	4620      	mov	r0, r4
 801d76a:	f006 fb54 	bl	8023e16 <__cxa_guard_acquire>
 801d76e:	b138      	cbz	r0, 801d780 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801d770:	4620      	mov	r0, r4
 801d772:	f006 fb5c 	bl	8023e2e <__cxa_guard_release>
 801d776:	4a06      	ldr	r2, [pc, #24]	; (801d790 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801d778:	4909      	ldr	r1, [pc, #36]	; (801d7a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801d77a:	480a      	ldr	r0, [pc, #40]	; (801d7a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d77c:	f006 fb41 	bl	8023e02 <__aeabi_atexit>
 801d780:	4b05      	ldr	r3, [pc, #20]	; (801d798 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801d782:	652b      	str	r3, [r5, #80]	; 0x50
 801d784:	4b07      	ldr	r3, [pc, #28]	; (801d7a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d786:	656b      	str	r3, [r5, #84]	; 0x54
 801d788:	bd38      	pop	{r3, r4, r5, pc}
 801d78a:	bf00      	nop
 801d78c:	2000bd44 	.word	0x2000bd44
 801d790:	20000000 	.word	0x20000000
 801d794:	0801bf5b 	.word	0x0801bf5b
 801d798:	20000054 	.word	0x20000054
 801d79c:	2000bd48 	.word	0x2000bd48
 801d7a0:	0801bf59 	.word	0x0801bf59
 801d7a4:	20000058 	.word	0x20000058

0801d7a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801d7a8:	b538      	push	{r3, r4, r5, lr}
 801d7aa:	4c15      	ldr	r4, [pc, #84]	; (801d800 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801d7ac:	4605      	mov	r5, r0
 801d7ae:	7823      	ldrb	r3, [r4, #0]
 801d7b0:	f3bf 8f5b 	dmb	ish
 801d7b4:	07da      	lsls	r2, r3, #31
 801d7b6:	d40b      	bmi.n	801d7d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d7b8:	4620      	mov	r0, r4
 801d7ba:	f006 fb2c 	bl	8023e16 <__cxa_guard_acquire>
 801d7be:	b138      	cbz	r0, 801d7d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d7c0:	4620      	mov	r0, r4
 801d7c2:	f006 fb34 	bl	8023e2e <__cxa_guard_release>
 801d7c6:	4a0f      	ldr	r2, [pc, #60]	; (801d804 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d7c8:	490f      	ldr	r1, [pc, #60]	; (801d808 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801d7ca:	4810      	ldr	r0, [pc, #64]	; (801d80c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d7cc:	f006 fb19 	bl	8023e02 <__aeabi_atexit>
 801d7d0:	4c0f      	ldr	r4, [pc, #60]	; (801d810 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801d7d2:	7823      	ldrb	r3, [r4, #0]
 801d7d4:	f3bf 8f5b 	dmb	ish
 801d7d8:	07db      	lsls	r3, r3, #31
 801d7da:	d40b      	bmi.n	801d7f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d7dc:	4620      	mov	r0, r4
 801d7de:	f006 fb1a 	bl	8023e16 <__cxa_guard_acquire>
 801d7e2:	b138      	cbz	r0, 801d7f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d7e4:	4620      	mov	r0, r4
 801d7e6:	f006 fb22 	bl	8023e2e <__cxa_guard_release>
 801d7ea:	4a06      	ldr	r2, [pc, #24]	; (801d804 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d7ec:	4909      	ldr	r1, [pc, #36]	; (801d814 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801d7ee:	480a      	ldr	r0, [pc, #40]	; (801d818 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d7f0:	f006 fb07 	bl	8023e02 <__aeabi_atexit>
 801d7f4:	4b05      	ldr	r3, [pc, #20]	; (801d80c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d7f6:	64ab      	str	r3, [r5, #72]	; 0x48
 801d7f8:	4b07      	ldr	r3, [pc, #28]	; (801d818 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d7fa:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d7fc:	bd38      	pop	{r3, r4, r5, pc}
 801d7fe:	bf00      	nop
 801d800:	2000bd34 	.word	0x2000bd34
 801d804:	20000000 	.word	0x20000000
 801d808:	0801bf5f 	.word	0x0801bf5f
 801d80c:	20000044 	.word	0x20000044
 801d810:	2000bd38 	.word	0x2000bd38
 801d814:	0801bf5d 	.word	0x0801bf5d
 801d818:	20000048 	.word	0x20000048

0801d81c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801d81c:	b510      	push	{r4, lr}
 801d81e:	4604      	mov	r4, r0
 801d820:	f7ff ff88 	bl	801d734 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801d824:	4620      	mov	r0, r4
 801d826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d82a:	f7ff bfbd 	b.w	801d7a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801d82e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801d82e:	b510      	push	{r4, lr}
 801d830:	4604      	mov	r4, r0
 801d832:	f7ff fff3 	bl	801d81c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801d836:	4620      	mov	r0, r4
 801d838:	f7ff ff72 	bl	801d720 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801d83c:	4620      	mov	r0, r4
 801d83e:	f7ff fe73 	bl	801d528 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801d842:	4620      	mov	r0, r4
 801d844:	f7ff fdf2 	bl	801d42c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801d848:	4620      	mov	r0, r4
 801d84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d84e:	f7ff bee9 	b.w	801d624 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801d854 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d858:	b087      	sub	sp, #28
 801d85a:	7888      	ldrb	r0, [r1, #2]
 801d85c:	4616      	mov	r6, r2
 801d85e:	9001      	str	r0, [sp, #4]
 801d860:	7848      	ldrb	r0, [r1, #1]
 801d862:	9100      	str	r1, [sp, #0]
 801d864:	9002      	str	r0, [sp, #8]
 801d866:	7808      	ldrb	r0, [r1, #0]
 801d868:	9901      	ldr	r1, [sp, #4]
 801d86a:	9003      	str	r0, [sp, #12]
 801d86c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801d870:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801d874:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801d878:	9902      	ldr	r1, [sp, #8]
 801d87a:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801d87e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801d882:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801d886:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801d88a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801d88e:	9005      	str	r0, [sp, #20]
 801d890:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801d894:	fb05 ca0e 	mla	sl, r5, lr, ip
 801d898:	2d00      	cmp	r5, #0
 801d89a:	eb06 080a 	add.w	r8, r6, sl
 801d89e:	db4a      	blt.n	801d936 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801d8a0:	45a9      	cmp	r9, r5
 801d8a2:	dd48      	ble.n	801d936 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801d8a4:	f1bc 0f00 	cmp.w	ip, #0
 801d8a8:	db43      	blt.n	801d932 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801d8aa:	45e6      	cmp	lr, ip
 801d8ac:	dd41      	ble.n	801d932 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801d8ae:	f816 600a 	ldrb.w	r6, [r6, sl]
 801d8b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d8b6:	441e      	add	r6, r3
 801d8b8:	f11c 0001 	adds.w	r0, ip, #1
 801d8bc:	d43e      	bmi.n	801d93c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801d8be:	4586      	cmp	lr, r0
 801d8c0:	dd3c      	ble.n	801d93c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801d8c2:	2a00      	cmp	r2, #0
 801d8c4:	d03a      	beq.n	801d93c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801d8c6:	f898 0001 	ldrb.w	r0, [r8, #1]
 801d8ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d8ce:	4418      	add	r0, r3
 801d8d0:	3501      	adds	r5, #1
 801d8d2:	d437      	bmi.n	801d944 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801d8d4:	45a9      	cmp	r9, r5
 801d8d6:	dd35      	ble.n	801d944 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801d8d8:	b3a4      	cbz	r4, 801d944 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801d8da:	f1bc 0f00 	cmp.w	ip, #0
 801d8de:	db2f      	blt.n	801d940 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801d8e0:	45e6      	cmp	lr, ip
 801d8e2:	dd2d      	ble.n	801d940 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801d8e4:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d8e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d8ec:	441d      	add	r5, r3
 801d8ee:	f11c 0c01 	adds.w	ip, ip, #1
 801d8f2:	d42a      	bmi.n	801d94a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801d8f4:	45e6      	cmp	lr, ip
 801d8f6:	dd28      	ble.n	801d94a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801d8f8:	b33a      	cbz	r2, 801d94a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801d8fa:	44c6      	add	lr, r8
 801d8fc:	f89e c001 	ldrb.w	ip, [lr, #1]
 801d900:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d904:	4463      	add	r3, ip
 801d906:	ea6f 0c07 	mvn.w	ip, r7
 801d90a:	2a0f      	cmp	r2, #15
 801d90c:	f896 a000 	ldrb.w	sl, [r6]
 801d910:	fa5f fc8c 	uxtb.w	ip, ip
 801d914:	f890 b000 	ldrb.w	fp, [r0]
 801d918:	f895 9000 	ldrb.w	r9, [r5]
 801d91c:	7819      	ldrb	r1, [r3, #0]
 801d91e:	d801      	bhi.n	801d924 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801d920:	2c0f      	cmp	r4, #15
 801d922:	d914      	bls.n	801d94e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801d924:	4b40      	ldr	r3, [pc, #256]	; (801da28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801d926:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801d92a:	4a40      	ldr	r2, [pc, #256]	; (801da2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801d92c:	4840      	ldr	r0, [pc, #256]	; (801da30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801d92e:	f006 fa9b 	bl	8023e68 <__assert_func>
 801d932:	ae05      	add	r6, sp, #20
 801d934:	e7c0      	b.n	801d8b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801d936:	a805      	add	r0, sp, #20
 801d938:	4606      	mov	r6, r0
 801d93a:	e7c9      	b.n	801d8d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801d93c:	a805      	add	r0, sp, #20
 801d93e:	e7c7      	b.n	801d8d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801d940:	ad05      	add	r5, sp, #20
 801d942:	e7d4      	b.n	801d8ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801d944:	ab05      	add	r3, sp, #20
 801d946:	461d      	mov	r5, r3
 801d948:	e7dd      	b.n	801d906 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801d94a:	ab05      	add	r3, sp, #20
 801d94c:	e7db      	b.n	801d906 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801d94e:	b292      	uxth	r2, r2
 801d950:	b2a4      	uxth	r4, r4
 801d952:	fa1f fc8c 	uxth.w	ip, ip
 801d956:	fb02 f804 	mul.w	r8, r2, r4
 801d95a:	0112      	lsls	r2, r2, #4
 801d95c:	b2bf      	uxth	r7, r7
 801d95e:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801d962:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801d966:	eba2 0208 	sub.w	r2, r2, r8
 801d96a:	b2a4      	uxth	r4, r4
 801d96c:	b292      	uxth	r2, r2
 801d96e:	ebae 0e04 	sub.w	lr, lr, r4
 801d972:	fb02 fb0b 	mul.w	fp, r2, fp
 801d976:	fa1f fe8e 	uxth.w	lr, lr
 801d97a:	fb0e ba0a 	mla	sl, lr, sl, fp
 801d97e:	fb04 aa09 	mla	sl, r4, r9, sl
 801d982:	fb08 aa01 	mla	sl, r8, r1, sl
 801d986:	9903      	ldr	r1, [sp, #12]
 801d988:	fb11 f90c 	smulbb	r9, r1, ip
 801d98c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801d990:	9900      	ldr	r1, [sp, #0]
 801d992:	fb0a 9a07 	mla	sl, sl, r7, r9
 801d996:	fa1f fa8a 	uxth.w	sl, sl
 801d99a:	f10a 0901 	add.w	r9, sl, #1
 801d99e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801d9a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d9a6:	f881 a000 	strb.w	sl, [r1]
 801d9aa:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d9ae:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d9b2:	fb02 fa0a 	mul.w	sl, r2, sl
 801d9b6:	9902      	ldr	r1, [sp, #8]
 801d9b8:	fb0e aa09 	mla	sl, lr, r9, sl
 801d9bc:	f895 9001 	ldrb.w	r9, [r5, #1]
 801d9c0:	fb04 aa09 	mla	sl, r4, r9, sl
 801d9c4:	f893 9001 	ldrb.w	r9, [r3, #1]
 801d9c8:	fb08 a909 	mla	r9, r8, r9, sl
 801d9cc:	fb11 fa0c 	smulbb	sl, r1, ip
 801d9d0:	9900      	ldr	r1, [sp, #0]
 801d9d2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d9d6:	fb09 a907 	mla	r9, r9, r7, sl
 801d9da:	fa1f f989 	uxth.w	r9, r9
 801d9de:	f109 0a01 	add.w	sl, r9, #1
 801d9e2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801d9e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d9ea:	f881 9001 	strb.w	r9, [r1, #1]
 801d9ee:	7880      	ldrb	r0, [r0, #2]
 801d9f0:	78b6      	ldrb	r6, [r6, #2]
 801d9f2:	4342      	muls	r2, r0
 801d9f4:	78a8      	ldrb	r0, [r5, #2]
 801d9f6:	789b      	ldrb	r3, [r3, #2]
 801d9f8:	fb0e 2206 	mla	r2, lr, r6, r2
 801d9fc:	fb04 2400 	mla	r4, r4, r0, r2
 801da00:	fb08 4803 	mla	r8, r8, r3, r4
 801da04:	9b01      	ldr	r3, [sp, #4]
 801da06:	fb13 fc0c 	smulbb	ip, r3, ip
 801da0a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801da0e:	fb08 c707 	mla	r7, r8, r7, ip
 801da12:	b2bf      	uxth	r7, r7
 801da14:	f107 0c01 	add.w	ip, r7, #1
 801da18:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801da1c:	123f      	asrs	r7, r7, #8
 801da1e:	708f      	strb	r7, [r1, #2]
 801da20:	b007      	add	sp, #28
 801da22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da26:	bf00      	nop
 801da28:	0802877f 	.word	0x0802877f
 801da2c:	08028c76 	.word	0x08028c76
 801da30:	08028848 	.word	0x08028848

0801da34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da38:	ed2d 8b08 	vpush	{d8-d11}
 801da3c:	b095      	sub	sp, #84	; 0x54
 801da3e:	eeb0 aa40 	vmov.f32	s20, s0
 801da42:	eef0 9a60 	vmov.f32	s19, s1
 801da46:	930a      	str	r3, [sp, #40]	; 0x28
 801da48:	eeb0 9a41 	vmov.f32	s18, s2
 801da4c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801da50:	eeb0 8a62 	vmov.f32	s16, s5
 801da54:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801da56:	eef0 8a43 	vmov.f32	s17, s6
 801da5a:	930c      	str	r3, [sp, #48]	; 0x30
 801da5c:	eef0 ba44 	vmov.f32	s23, s8
 801da60:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801da64:	eeb0 ba64 	vmov.f32	s22, s9
 801da68:	9013      	str	r0, [sp, #76]	; 0x4c
 801da6a:	eef0 aa45 	vmov.f32	s21, s10
 801da6e:	9310      	str	r3, [sp, #64]	; 0x40
 801da70:	6860      	ldr	r0, [r4, #4]
 801da72:	910f      	str	r1, [sp, #60]	; 0x3c
 801da74:	9212      	str	r2, [sp, #72]	; 0x48
 801da76:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801da78:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801da7c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801da80:	fb00 1303 	mla	r3, r0, r3, r1
 801da84:	6821      	ldr	r1, [r4, #0]
 801da86:	6854      	ldr	r4, [r2, #4]
 801da88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da8c:	18cb      	adds	r3, r1, r3
 801da8e:	930b      	str	r3, [sp, #44]	; 0x2c
 801da90:	6813      	ldr	r3, [r2, #0]
 801da92:	930e      	str	r3, [sp, #56]	; 0x38
 801da94:	1d23      	adds	r3, r4, #4
 801da96:	9309      	str	r3, [sp, #36]	; 0x24
 801da98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801da9a:	43db      	mvns	r3, r3
 801da9c:	b2db      	uxtb	r3, r3
 801da9e:	930d      	str	r3, [sp, #52]	; 0x34
 801daa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	dc03      	bgt.n	801daae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801daa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	f340 823c 	ble.w	801df26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801daae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	f340 8115 	ble.w	801dce0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801dab6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801dab8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801daba:	1412      	asrs	r2, r2, #16
 801dabc:	ea4f 4323 	mov.w	r3, r3, asr #16
 801dac0:	d431      	bmi.n	801db26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801dac2:	1c51      	adds	r1, r2, #1
 801dac4:	428d      	cmp	r5, r1
 801dac6:	dd31      	ble.n	801db2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dac8:	2b00      	cmp	r3, #0
 801daca:	db2f      	blt.n	801db2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dacc:	1c59      	adds	r1, r3, #1
 801dace:	980c      	ldr	r0, [sp, #48]	; 0x30
 801dad0:	4288      	cmp	r0, r1
 801dad2:	dd2b      	ble.n	801db2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dad6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dad8:	3b01      	subs	r3, #1
 801dada:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801dadc:	fb02 1203 	mla	r2, r2, r3, r1
 801dae0:	1412      	asrs	r2, r2, #16
 801dae2:	d42d      	bmi.n	801db40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801dae4:	3201      	adds	r2, #1
 801dae6:	4295      	cmp	r5, r2
 801dae8:	dd2a      	ble.n	801db40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801daea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801daec:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801daee:	fb02 1303 	mla	r3, r2, r3, r1
 801daf2:	141b      	asrs	r3, r3, #16
 801daf4:	d424      	bmi.n	801db40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801daf6:	3301      	adds	r3, #1
 801daf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dafa:	429a      	cmp	r2, r3
 801dafc:	dd20      	ble.n	801db40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801dafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db00:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801db04:	f103 0c03 	add.w	ip, r3, #3
 801db08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db0a:	9311      	str	r3, [sp, #68]	; 0x44
 801db0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db0e:	2b00      	cmp	r3, #0
 801db10:	f300 814f 	bgt.w	801ddb2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801db14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801db18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801db1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db20:	441a      	add	r2, r3
 801db22:	920b      	str	r2, [sp, #44]	; 0x2c
 801db24:	e0de      	b.n	801dce4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801db26:	1c51      	adds	r1, r2, #1
 801db28:	f040 80cb 	bne.w	801dcc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801db2c:	42aa      	cmp	r2, r5
 801db2e:	f280 80c8 	bge.w	801dcc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801db32:	1c5f      	adds	r7, r3, #1
 801db34:	f2c0 80c5 	blt.w	801dcc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801db38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801db3a:	4293      	cmp	r3, r2
 801db3c:	f280 80c1 	bge.w	801dcc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801db40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db42:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801db44:	9311      	str	r3, [sp, #68]	; 0x44
 801db46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db48:	2b00      	cmp	r3, #0
 801db4a:	dde3      	ble.n	801db14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801db4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db4e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801db50:	141a      	asrs	r2, r3, #16
 801db52:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801db54:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801db56:	1400      	asrs	r0, r0, #16
 801db58:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801db5c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801db60:	f100 810e 	bmi.w	801dd80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801db64:	1c46      	adds	r6, r0, #1
 801db66:	42b5      	cmp	r5, r6
 801db68:	f340 810c 	ble.w	801dd84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801db6c:	2a00      	cmp	r2, #0
 801db6e:	f2c0 8109 	blt.w	801dd84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801db72:	1c56      	adds	r6, r2, #1
 801db74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801db76:	42b4      	cmp	r4, r6
 801db78:	f340 8104 	ble.w	801dd84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801db7c:	fb02 0005 	mla	r0, r2, r5, r0
 801db80:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801db82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801db84:	f814 e000 	ldrb.w	lr, [r4, r0]
 801db88:	4402      	add	r2, r0
 801db8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801db8c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801db90:	eb00 080e 	add.w	r8, r0, lr
 801db94:	2b00      	cmp	r3, #0
 801db96:	f000 80e4 	beq.w	801dd62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801db9a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801db9e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dba2:	4484      	add	ip, r0
 801dba4:	2900      	cmp	r1, #0
 801dba6:	f000 80e5 	beq.w	801dd74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801dbaa:	1950      	adds	r0, r2, r5
 801dbac:	5d52      	ldrb	r2, [r2, r5]
 801dbae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801dbb0:	7840      	ldrb	r0, [r0, #1]
 801dbb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dbb6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dbba:	4422      	add	r2, r4
 801dbbc:	4420      	add	r0, r4
 801dbbe:	b29b      	uxth	r3, r3
 801dbc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801dbc2:	b289      	uxth	r1, r1
 801dbc4:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801dbc8:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801dbcc:	fb03 fa01 	mul.w	sl, r3, r1
 801dbd0:	011b      	lsls	r3, r3, #4
 801dbd2:	f89c e000 	ldrb.w	lr, [ip]
 801dbd6:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801dbda:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801dbde:	eba3 030a 	sub.w	r3, r3, sl
 801dbe2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dbe4:	b289      	uxth	r1, r1
 801dbe6:	b29b      	uxth	r3, r3
 801dbe8:	eba9 0901 	sub.w	r9, r9, r1
 801dbec:	fb03 fe0e 	mul.w	lr, r3, lr
 801dbf0:	fa1f f989 	uxth.w	r9, r9
 801dbf4:	fb09 ee0b 	mla	lr, r9, fp, lr
 801dbf8:	f892 b000 	ldrb.w	fp, [r2]
 801dbfc:	fb01 ee0b 	mla	lr, r1, fp, lr
 801dc00:	f890 b000 	ldrb.w	fp, [r0]
 801dc04:	fb0a ee0b 	mla	lr, sl, fp, lr
 801dc08:	f897 b000 	ldrb.w	fp, [r7]
 801dc0c:	fb1b fb04 	smulbb	fp, fp, r4
 801dc10:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801dc14:	fb0e be06 	mla	lr, lr, r6, fp
 801dc18:	fa1f fe8e 	uxth.w	lr, lr
 801dc1c:	f10e 0b01 	add.w	fp, lr, #1
 801dc20:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801dc24:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801dc28:	f887 b000 	strb.w	fp, [r7]
 801dc2c:	f89c e001 	ldrb.w	lr, [ip, #1]
 801dc30:	f898 b001 	ldrb.w	fp, [r8, #1]
 801dc34:	fb03 fe0e 	mul.w	lr, r3, lr
 801dc38:	fb09 ee0b 	mla	lr, r9, fp, lr
 801dc3c:	f892 b001 	ldrb.w	fp, [r2, #1]
 801dc40:	fb01 ee0b 	mla	lr, r1, fp, lr
 801dc44:	f890 b001 	ldrb.w	fp, [r0, #1]
 801dc48:	fb0a ee0b 	mla	lr, sl, fp, lr
 801dc4c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801dc50:	fb1b fb04 	smulbb	fp, fp, r4
 801dc54:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801dc58:	fb0e be06 	mla	lr, lr, r6, fp
 801dc5c:	fa1f fe8e 	uxth.w	lr, lr
 801dc60:	f10e 0b01 	add.w	fp, lr, #1
 801dc64:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801dc68:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801dc6c:	f887 e001 	strb.w	lr, [r7, #1]
 801dc70:	f89c c002 	ldrb.w	ip, [ip, #2]
 801dc74:	f898 e002 	ldrb.w	lr, [r8, #2]
 801dc78:	fb03 f30c 	mul.w	r3, r3, ip
 801dc7c:	fb09 330e 	mla	r3, r9, lr, r3
 801dc80:	f892 e002 	ldrb.w	lr, [r2, #2]
 801dc84:	7882      	ldrb	r2, [r0, #2]
 801dc86:	fb01 310e 	mla	r1, r1, lr, r3
 801dc8a:	fb0a 1a02 	mla	sl, sl, r2, r1
 801dc8e:	78b9      	ldrb	r1, [r7, #2]
 801dc90:	fb11 f104 	smulbb	r1, r1, r4
 801dc94:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801dc98:	fb0a 1606 	mla	r6, sl, r6, r1
 801dc9c:	b2b6      	uxth	r6, r6
 801dc9e:	1c73      	adds	r3, r6, #1
 801dca0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801dca4:	1236      	asrs	r6, r6, #8
 801dca6:	70be      	strb	r6, [r7, #2]
 801dca8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dcaa:	3703      	adds	r7, #3
 801dcac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dcae:	4413      	add	r3, r2
 801dcb0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801dcb2:	9327      	str	r3, [sp, #156]	; 0x9c
 801dcb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dcb6:	4413      	add	r3, r2
 801dcb8:	9328      	str	r3, [sp, #160]	; 0xa0
 801dcba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dcbc:	3b01      	subs	r3, #1
 801dcbe:	9311      	str	r3, [sp, #68]	; 0x44
 801dcc0:	e741      	b.n	801db46 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801dcc2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dcc4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dcc6:	4413      	add	r3, r2
 801dcc8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801dcca:	9327      	str	r3, [sp, #156]	; 0x9c
 801dccc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dcce:	4413      	add	r3, r2
 801dcd0:	9328      	str	r3, [sp, #160]	; 0xa0
 801dcd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dcd4:	3b01      	subs	r3, #1
 801dcd6:	930a      	str	r3, [sp, #40]	; 0x28
 801dcd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dcda:	3303      	adds	r3, #3
 801dcdc:	930b      	str	r3, [sp, #44]	; 0x2c
 801dcde:	e6e6      	b.n	801daae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801dce0:	f47f aef8 	bne.w	801dad4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801dce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	f340 811d 	ble.w	801df26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801dcec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dcf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dcf2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801dcf6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801dcfa:	eef0 6a48 	vmov.f32	s13, s16
 801dcfe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801dd02:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801dd06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd0a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801dd0e:	eef0 6a68 	vmov.f32	s13, s17
 801dd12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd16:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801dd1a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801dd1e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801dd22:	ee37 8a48 	vsub.f32	s16, s14, s16
 801dd26:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801dd2a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801dd2e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801dd32:	ee18 2a10 	vmov	r2, s16
 801dd36:	eeb0 8a47 	vmov.f32	s16, s14
 801dd3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd3e:	ee18 2a90 	vmov	r2, s17
 801dd42:	9329      	str	r3, [sp, #164]	; 0xa4
 801dd44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dd46:	eef0 8a67 	vmov.f32	s17, s15
 801dd4a:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd4e:	932a      	str	r3, [sp, #168]	; 0xa8
 801dd50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dd54:	3b01      	subs	r3, #1
 801dd56:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dd5a:	bf08      	it	eq
 801dd5c:	4613      	moveq	r3, r2
 801dd5e:	930a      	str	r3, [sp, #40]	; 0x28
 801dd60:	e69e      	b.n	801daa0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801dd62:	b151      	cbz	r1, 801dd7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801dd64:	5d52      	ldrb	r2, [r2, r5]
 801dd66:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dd6c:	4402      	add	r2, r0
 801dd6e:	4640      	mov	r0, r8
 801dd70:	46c4      	mov	ip, r8
 801dd72:	e724      	b.n	801dbbe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801dd74:	4640      	mov	r0, r8
 801dd76:	4642      	mov	r2, r8
 801dd78:	e721      	b.n	801dbbe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801dd7a:	4640      	mov	r0, r8
 801dd7c:	4642      	mov	r2, r8
 801dd7e:	e7f7      	b.n	801dd70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801dd80:	1c46      	adds	r6, r0, #1
 801dd82:	d191      	bne.n	801dca8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801dd84:	4285      	cmp	r5, r0
 801dd86:	dd8f      	ble.n	801dca8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801dd88:	1c54      	adds	r4, r2, #1
 801dd8a:	db8d      	blt.n	801dca8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801dd8c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801dd8e:	4294      	cmp	r4, r2
 801dd90:	dd8a      	ble.n	801dca8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801dd92:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dd94:	9002      	str	r0, [sp, #8]
 801dd96:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dd98:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801dd9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dda0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801dda4:	e9cd 5300 	strd	r5, r3, [sp]
 801dda8:	4639      	mov	r1, r7
 801ddaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddac:	f7ff fd52 	bl	801d854 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801ddb0:	e77a      	b.n	801dca8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ddb2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ddb4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ddb6:	1410      	asrs	r0, r2, #16
 801ddb8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ddbc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ddbe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ddc0:	1412      	asrs	r2, r2, #16
 801ddc2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ddc6:	fb05 2000 	mla	r0, r5, r0, r2
 801ddca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ddcc:	f814 8000 	ldrb.w	r8, [r4, r0]
 801ddd0:	4402      	add	r2, r0
 801ddd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ddd4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ddd8:	eb00 0708 	add.w	r7, r0, r8
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	f000 8093 	beq.w	801df08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801dde2:	7856      	ldrb	r6, [r2, #1]
 801dde4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dde8:	4406      	add	r6, r0
 801ddea:	2900      	cmp	r1, #0
 801ddec:	f000 8095 	beq.w	801df1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801ddf0:	1950      	adds	r0, r2, r5
 801ddf2:	5d52      	ldrb	r2, [r2, r5]
 801ddf4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ddf6:	7840      	ldrb	r0, [r0, #1]
 801ddf8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ddfc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801de00:	4422      	add	r2, r4
 801de02:	4420      	add	r0, r4
 801de04:	b29b      	uxth	r3, r3
 801de06:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801de08:	b289      	uxth	r1, r1
 801de0a:	f10c 0c03 	add.w	ip, ip, #3
 801de0e:	f814 b008 	ldrb.w	fp, [r4, r8]
 801de12:	fb03 f901 	mul.w	r9, r3, r1
 801de16:	011b      	lsls	r3, r3, #4
 801de18:	f896 8000 	ldrb.w	r8, [r6]
 801de1c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801de20:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801de24:	eba3 0309 	sub.w	r3, r3, r9
 801de28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801de2a:	b289      	uxth	r1, r1
 801de2c:	b29b      	uxth	r3, r3
 801de2e:	ebae 0e01 	sub.w	lr, lr, r1
 801de32:	fb03 f808 	mul.w	r8, r3, r8
 801de36:	fa1f fe8e 	uxth.w	lr, lr
 801de3a:	fb0e 880b 	mla	r8, lr, fp, r8
 801de3e:	f892 b000 	ldrb.w	fp, [r2]
 801de42:	fb01 880b 	mla	r8, r1, fp, r8
 801de46:	f890 b000 	ldrb.w	fp, [r0]
 801de4a:	fb09 880b 	mla	r8, r9, fp, r8
 801de4e:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801de52:	fb1b fb04 	smulbb	fp, fp, r4
 801de56:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801de5a:	fb08 b80a 	mla	r8, r8, sl, fp
 801de5e:	fa1f f888 	uxth.w	r8, r8
 801de62:	f108 0b01 	add.w	fp, r8, #1
 801de66:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801de6a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801de6e:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801de72:	f896 8001 	ldrb.w	r8, [r6, #1]
 801de76:	f897 b001 	ldrb.w	fp, [r7, #1]
 801de7a:	fb03 f808 	mul.w	r8, r3, r8
 801de7e:	fb0e 880b 	mla	r8, lr, fp, r8
 801de82:	f892 b001 	ldrb.w	fp, [r2, #1]
 801de86:	fb01 880b 	mla	r8, r1, fp, r8
 801de8a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801de8e:	fb09 880b 	mla	r8, r9, fp, r8
 801de92:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801de96:	fb1b fb04 	smulbb	fp, fp, r4
 801de9a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801de9e:	fb08 b80a 	mla	r8, r8, sl, fp
 801dea2:	fa1f f888 	uxth.w	r8, r8
 801dea6:	f108 0b01 	add.w	fp, r8, #1
 801deaa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801deae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801deb2:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801deb6:	78b6      	ldrb	r6, [r6, #2]
 801deb8:	78bf      	ldrb	r7, [r7, #2]
 801deba:	4373      	muls	r3, r6
 801debc:	7896      	ldrb	r6, [r2, #2]
 801debe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dec0:	fb0e 3307 	mla	r3, lr, r7, r3
 801dec4:	fb01 3306 	mla	r3, r1, r6, r3
 801dec8:	7886      	ldrb	r6, [r0, #2]
 801deca:	fb09 3906 	mla	r9, r9, r6, r3
 801dece:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801ded2:	fb13 f304 	smulbb	r3, r3, r4
 801ded6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801deda:	fb09 390a 	mla	r9, r9, sl, r3
 801dede:	fa1f f989 	uxth.w	r9, r9
 801dee2:	f109 0301 	add.w	r3, r9, #1
 801dee6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801deea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801deec:	4413      	add	r3, r2
 801deee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801def0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801def4:	9327      	str	r3, [sp, #156]	; 0x9c
 801def6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801def8:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801defc:	4413      	add	r3, r2
 801defe:	9328      	str	r3, [sp, #160]	; 0xa0
 801df00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801df02:	3b01      	subs	r3, #1
 801df04:	9311      	str	r3, [sp, #68]	; 0x44
 801df06:	e601      	b.n	801db0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801df08:	b151      	cbz	r1, 801df20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801df0a:	5d52      	ldrb	r2, [r2, r5]
 801df0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801df12:	4402      	add	r2, r0
 801df14:	4638      	mov	r0, r7
 801df16:	463e      	mov	r6, r7
 801df18:	e774      	b.n	801de04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801df1a:	4638      	mov	r0, r7
 801df1c:	463a      	mov	r2, r7
 801df1e:	e771      	b.n	801de04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801df20:	4638      	mov	r0, r7
 801df22:	463a      	mov	r2, r7
 801df24:	e7f7      	b.n	801df16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801df26:	b015      	add	sp, #84	; 0x54
 801df28:	ecbd 8b08 	vpop	{d8-d11}
 801df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801df30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801df30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df34:	780d      	ldrb	r5, [r1, #0]
 801df36:	f891 9002 	ldrb.w	r9, [r1, #2]
 801df3a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801df3e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801df42:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801df46:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801df4a:	f891 9001 	ldrb.w	r9, [r1, #1]
 801df4e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801df52:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801df56:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801df5a:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801df5e:	9501      	str	r5, [sp, #4]
 801df60:	fb06 470c 	mla	r7, r6, ip, r4
 801df64:	2e00      	cmp	r6, #0
 801df66:	eb02 0e07 	add.w	lr, r2, r7
 801df6a:	db46      	blt.n	801dffa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801df6c:	45b0      	cmp	r8, r6
 801df6e:	dd44      	ble.n	801dffa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801df70:	2c00      	cmp	r4, #0
 801df72:	db40      	blt.n	801dff6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801df74:	45a4      	cmp	ip, r4
 801df76:	dd3e      	ble.n	801dff6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801df78:	5dd7      	ldrb	r7, [r2, r7]
 801df7a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801df7e:	441f      	add	r7, r3
 801df80:	1c62      	adds	r2, r4, #1
 801df82:	d43d      	bmi.n	801e000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801df84:	4594      	cmp	ip, r2
 801df86:	dd3b      	ble.n	801e000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801df88:	f1ba 0f00 	cmp.w	sl, #0
 801df8c:	d038      	beq.n	801e000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801df8e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801df92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801df96:	441d      	add	r5, r3
 801df98:	3601      	adds	r6, #1
 801df9a:	d435      	bmi.n	801e008 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801df9c:	45b0      	cmp	r8, r6
 801df9e:	dd33      	ble.n	801e008 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801dfa0:	b390      	cbz	r0, 801e008 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801dfa2:	2c00      	cmp	r4, #0
 801dfa4:	db2e      	blt.n	801e004 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801dfa6:	45a4      	cmp	ip, r4
 801dfa8:	dd2c      	ble.n	801e004 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801dfaa:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801dfae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dfb2:	441e      	add	r6, r3
 801dfb4:	1c62      	adds	r2, r4, #1
 801dfb6:	d42a      	bmi.n	801e00e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801dfb8:	4594      	cmp	ip, r2
 801dfba:	dd28      	ble.n	801e00e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801dfbc:	f1ba 0f00 	cmp.w	sl, #0
 801dfc0:	d025      	beq.n	801e00e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801dfc2:	44f4      	add	ip, lr
 801dfc4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801dfc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dfcc:	4413      	add	r3, r2
 801dfce:	f1ba 0f0f 	cmp.w	sl, #15
 801dfd2:	f897 8000 	ldrb.w	r8, [r7]
 801dfd6:	f895 9000 	ldrb.w	r9, [r5]
 801dfda:	f896 e000 	ldrb.w	lr, [r6]
 801dfde:	f893 c000 	ldrb.w	ip, [r3]
 801dfe2:	d801      	bhi.n	801dfe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801dfe4:	280f      	cmp	r0, #15
 801dfe6:	d914      	bls.n	801e012 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801dfe8:	4b29      	ldr	r3, [pc, #164]	; (801e090 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801dfea:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801dfee:	4a29      	ldr	r2, [pc, #164]	; (801e094 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801dff0:	4829      	ldr	r0, [pc, #164]	; (801e098 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801dff2:	f005 ff39 	bl	8023e68 <__assert_func>
 801dff6:	af01      	add	r7, sp, #4
 801dff8:	e7c2      	b.n	801df80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801dffa:	ad01      	add	r5, sp, #4
 801dffc:	462f      	mov	r7, r5
 801dffe:	e7cb      	b.n	801df98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e000:	ad01      	add	r5, sp, #4
 801e002:	e7c9      	b.n	801df98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e004:	ae01      	add	r6, sp, #4
 801e006:	e7d5      	b.n	801dfb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801e008:	ab01      	add	r3, sp, #4
 801e00a:	461e      	mov	r6, r3
 801e00c:	e7df      	b.n	801dfce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801e00e:	ab01      	add	r3, sp, #4
 801e010:	e7dd      	b.n	801dfce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801e012:	fa1f f48a 	uxth.w	r4, sl
 801e016:	b280      	uxth	r0, r0
 801e018:	fb04 fa00 	mul.w	sl, r4, r0
 801e01c:	0124      	lsls	r4, r4, #4
 801e01e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801e022:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801e026:	b282      	uxth	r2, r0
 801e028:	eba4 000a 	sub.w	r0, r4, sl
 801e02c:	ebab 0b02 	sub.w	fp, fp, r2
 801e030:	b280      	uxth	r0, r0
 801e032:	fa1f fb8b 	uxth.w	fp, fp
 801e036:	fb00 f909 	mul.w	r9, r0, r9
 801e03a:	fb0b 9808 	mla	r8, fp, r8, r9
 801e03e:	fb02 8e0e 	mla	lr, r2, lr, r8
 801e042:	fb0a ec0c 	mla	ip, sl, ip, lr
 801e046:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e04a:	f881 c000 	strb.w	ip, [r1]
 801e04e:	786c      	ldrb	r4, [r5, #1]
 801e050:	f897 c001 	ldrb.w	ip, [r7, #1]
 801e054:	4344      	muls	r4, r0
 801e056:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801e05a:	7874      	ldrb	r4, [r6, #1]
 801e05c:	fb02 cc04 	mla	ip, r2, r4, ip
 801e060:	785c      	ldrb	r4, [r3, #1]
 801e062:	fb0a c404 	mla	r4, sl, r4, ip
 801e066:	1224      	asrs	r4, r4, #8
 801e068:	704c      	strb	r4, [r1, #1]
 801e06a:	78ad      	ldrb	r5, [r5, #2]
 801e06c:	78bc      	ldrb	r4, [r7, #2]
 801e06e:	4368      	muls	r0, r5
 801e070:	fb0b 0b04 	mla	fp, fp, r4, r0
 801e074:	78b0      	ldrb	r0, [r6, #2]
 801e076:	fb02 b000 	mla	r0, r2, r0, fp
 801e07a:	789a      	ldrb	r2, [r3, #2]
 801e07c:	fb0a 0a02 	mla	sl, sl, r2, r0
 801e080:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e084:	f881 a002 	strb.w	sl, [r1, #2]
 801e088:	b003      	add	sp, #12
 801e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e08e:	bf00      	nop
 801e090:	0802877f 	.word	0x0802877f
 801e094:	08028c76 	.word	0x08028c76
 801e098:	08028848 	.word	0x08028848

0801e09c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0a0:	ed2d 8b0a 	vpush	{d8-d12}
 801e0a4:	b08f      	sub	sp, #60	; 0x3c
 801e0a6:	eeb0 aa40 	vmov.f32	s20, s0
 801e0aa:	eef0 9a60 	vmov.f32	s19, s1
 801e0ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801e0b0:	eeb0 9a41 	vmov.f32	s18, s2
 801e0b4:	9307      	str	r3, [sp, #28]
 801e0b6:	eeb0 8a62 	vmov.f32	s16, s5
 801e0ba:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801e0be:	eef0 8a43 	vmov.f32	s17, s6
 801e0c2:	900d      	str	r0, [sp, #52]	; 0x34
 801e0c4:	eeb0 ca44 	vmov.f32	s24, s8
 801e0c8:	6860      	ldr	r0, [r4, #4]
 801e0ca:	eef0 ba64 	vmov.f32	s23, s9
 801e0ce:	9309      	str	r3, [sp, #36]	; 0x24
 801e0d0:	eeb0 ba45 	vmov.f32	s22, s10
 801e0d4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801e0d8:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801e0dc:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801e0e0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801e0e4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e0e6:	fb00 1303 	mla	r3, r0, r3, r1
 801e0ea:	6821      	ldr	r1, [r4, #0]
 801e0ec:	6854      	ldr	r4, [r2, #4]
 801e0ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0f2:	3404      	adds	r4, #4
 801e0f4:	18cb      	adds	r3, r1, r3
 801e0f6:	9308      	str	r3, [sp, #32]
 801e0f8:	6813      	ldr	r3, [r2, #0]
 801e0fa:	930a      	str	r3, [sp, #40]	; 0x28
 801e0fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	dc03      	bgt.n	801e10a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e104:	2b00      	cmp	r3, #0
 801e106:	f340 81d2 	ble.w	801e4ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801e10a:	9b07      	ldr	r3, [sp, #28]
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	f340 80e3 	ble.w	801e2d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801e112:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e114:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e116:	1412      	asrs	r2, r2, #16
 801e118:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e11c:	d42f      	bmi.n	801e17e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801e11e:	1c51      	adds	r1, r2, #1
 801e120:	428d      	cmp	r5, r1
 801e122:	dd2f      	ble.n	801e184 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e124:	2b00      	cmp	r3, #0
 801e126:	db2d      	blt.n	801e184 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e128:	1c59      	adds	r1, r3, #1
 801e12a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e12c:	4288      	cmp	r0, r1
 801e12e:	dd29      	ble.n	801e184 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801e130:	9b07      	ldr	r3, [sp, #28]
 801e132:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e134:	3b01      	subs	r3, #1
 801e136:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e138:	fb02 1203 	mla	r2, r2, r3, r1
 801e13c:	1412      	asrs	r2, r2, #16
 801e13e:	d42b      	bmi.n	801e198 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e140:	3201      	adds	r2, #1
 801e142:	4295      	cmp	r5, r2
 801e144:	dd28      	ble.n	801e198 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e146:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e148:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e14a:	fb02 1303 	mla	r3, r2, r3, r1
 801e14e:	141b      	asrs	r3, r3, #16
 801e150:	d422      	bmi.n	801e198 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e152:	3301      	adds	r3, #1
 801e154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e156:	429a      	cmp	r2, r3
 801e158:	dd1e      	ble.n	801e198 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e15a:	9b08      	ldr	r3, [sp, #32]
 801e15c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e160:	f103 0803 	add.w	r8, r3, #3
 801e164:	f1ba 0f00 	cmp.w	sl, #0
 801e168:	f300 8119 	bgt.w	801e39e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801e16c:	9b07      	ldr	r3, [sp, #28]
 801e16e:	9a08      	ldr	r2, [sp, #32]
 801e170:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e178:	441a      	add	r2, r3
 801e17a:	9208      	str	r2, [sp, #32]
 801e17c:	e0ae      	b.n	801e2dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801e17e:	1c51      	adds	r1, r2, #1
 801e180:	f040 809b 	bne.w	801e2ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e184:	42aa      	cmp	r2, r5
 801e186:	f280 8098 	bge.w	801e2ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e18a:	1c5a      	adds	r2, r3, #1
 801e18c:	f2c0 8095 	blt.w	801e2ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e192:	4293      	cmp	r3, r2
 801e194:	f280 8091 	bge.w	801e2ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801e198:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801e19c:	f1bb 0f00 	cmp.w	fp, #0
 801e1a0:	dde4      	ble.n	801e16c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801e1a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e1a4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e1a6:	141a      	asrs	r2, r3, #16
 801e1a8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e1aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e1ac:	1400      	asrs	r0, r0, #16
 801e1ae:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801e1b2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e1b6:	f100 80dc 	bmi.w	801e372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801e1ba:	1c47      	adds	r7, r0, #1
 801e1bc:	42bd      	cmp	r5, r7
 801e1be:	f340 80da 	ble.w	801e376 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e1c2:	2a00      	cmp	r2, #0
 801e1c4:	f2c0 80d7 	blt.w	801e376 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e1c8:	f102 0c01 	add.w	ip, r2, #1
 801e1cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e1ce:	4567      	cmp	r7, ip
 801e1d0:	f340 80d1 	ble.w	801e376 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801e1d4:	fb02 0005 	mla	r0, r2, r5, r0
 801e1d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e1da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e1dc:	f817 8000 	ldrb.w	r8, [r7, r0]
 801e1e0:	4402      	add	r2, r0
 801e1e2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e1e6:	eb04 0c08 	add.w	ip, r4, r8
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	f000 80b3 	beq.w	801e356 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801e1f0:	7857      	ldrb	r7, [r2, #1]
 801e1f2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e1f6:	4427      	add	r7, r4
 801e1f8:	2900      	cmp	r1, #0
 801e1fa:	f000 80b4 	beq.w	801e366 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801e1fe:	1950      	adds	r0, r2, r5
 801e200:	5d52      	ldrb	r2, [r2, r5]
 801e202:	7840      	ldrb	r0, [r0, #1]
 801e204:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e208:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e20c:	4422      	add	r2, r4
 801e20e:	4420      	add	r0, r4
 801e210:	b29b      	uxth	r3, r3
 801e212:	f814 a008 	ldrb.w	sl, [r4, r8]
 801e216:	b289      	uxth	r1, r1
 801e218:	f897 8000 	ldrb.w	r8, [r7]
 801e21c:	fb03 f901 	mul.w	r9, r3, r1
 801e220:	011b      	lsls	r3, r3, #4
 801e222:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e226:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e22a:	eba3 0309 	sub.w	r3, r3, r9
 801e22e:	b289      	uxth	r1, r1
 801e230:	b29b      	uxth	r3, r3
 801e232:	ebae 0e01 	sub.w	lr, lr, r1
 801e236:	fb03 f808 	mul.w	r8, r3, r8
 801e23a:	fa1f fe8e 	uxth.w	lr, lr
 801e23e:	fb0e 880a 	mla	r8, lr, sl, r8
 801e242:	f892 a000 	ldrb.w	sl, [r2]
 801e246:	fb01 880a 	mla	r8, r1, sl, r8
 801e24a:	f890 a000 	ldrb.w	sl, [r0]
 801e24e:	fb09 880a 	mla	r8, r9, sl, r8
 801e252:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e256:	f886 8000 	strb.w	r8, [r6]
 801e25a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e25e:	f89c a001 	ldrb.w	sl, [ip, #1]
 801e262:	fb03 f808 	mul.w	r8, r3, r8
 801e266:	fb0e 880a 	mla	r8, lr, sl, r8
 801e26a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801e26e:	fb01 880a 	mla	r8, r1, sl, r8
 801e272:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e276:	fb09 880a 	mla	r8, r9, sl, r8
 801e27a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e27e:	f886 8001 	strb.w	r8, [r6, #1]
 801e282:	78bf      	ldrb	r7, [r7, #2]
 801e284:	f89c c002 	ldrb.w	ip, [ip, #2]
 801e288:	437b      	muls	r3, r7
 801e28a:	7892      	ldrb	r2, [r2, #2]
 801e28c:	fb0e 330c 	mla	r3, lr, ip, r3
 801e290:	fb01 3102 	mla	r1, r1, r2, r3
 801e294:	7882      	ldrb	r2, [r0, #2]
 801e296:	fb09 1902 	mla	r9, r9, r2, r1
 801e29a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e29e:	f886 9002 	strb.w	r9, [r6, #2]
 801e2a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e2a4:	3603      	adds	r6, #3
 801e2a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e2a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e2ac:	4413      	add	r3, r2
 801e2ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e2b0:	9323      	str	r3, [sp, #140]	; 0x8c
 801e2b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e2b4:	4413      	add	r3, r2
 801e2b6:	9324      	str	r3, [sp, #144]	; 0x90
 801e2b8:	e770      	b.n	801e19c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801e2ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e2bc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e2be:	4413      	add	r3, r2
 801e2c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e2c2:	9323      	str	r3, [sp, #140]	; 0x8c
 801e2c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e2c6:	4413      	add	r3, r2
 801e2c8:	9324      	str	r3, [sp, #144]	; 0x90
 801e2ca:	9b07      	ldr	r3, [sp, #28]
 801e2cc:	3b01      	subs	r3, #1
 801e2ce:	9307      	str	r3, [sp, #28]
 801e2d0:	9b08      	ldr	r3, [sp, #32]
 801e2d2:	3303      	adds	r3, #3
 801e2d4:	9308      	str	r3, [sp, #32]
 801e2d6:	e718      	b.n	801e10a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e2d8:	f47f af2a 	bne.w	801e130 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801e2dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	f340 80e5 	ble.w	801e4ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801e2e4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801e2e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e2ea:	ee79 9aab 	vadd.f32	s19, s19, s23
 801e2ee:	eef0 6a48 	vmov.f32	s13, s16
 801e2f2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801e2f6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801e2fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e2fe:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801e302:	eef0 6a68 	vmov.f32	s13, s17
 801e306:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e30a:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801e30e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e312:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e316:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e31a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e31e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e322:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e326:	ee18 2a10 	vmov	r2, s16
 801e32a:	eeb0 8a47 	vmov.f32	s16, s14
 801e32e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e332:	ee18 2a90 	vmov	r2, s17
 801e336:	9325      	str	r3, [sp, #148]	; 0x94
 801e338:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e33a:	eef0 8a67 	vmov.f32	s17, s15
 801e33e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e342:	9326      	str	r3, [sp, #152]	; 0x98
 801e344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e348:	3b01      	subs	r3, #1
 801e34a:	930b      	str	r3, [sp, #44]	; 0x2c
 801e34c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e34e:	bf08      	it	eq
 801e350:	4613      	moveq	r3, r2
 801e352:	9307      	str	r3, [sp, #28]
 801e354:	e6d2      	b.n	801e0fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e356:	b149      	cbz	r1, 801e36c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801e358:	5d52      	ldrb	r2, [r2, r5]
 801e35a:	4660      	mov	r0, ip
 801e35c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e360:	4422      	add	r2, r4
 801e362:	4667      	mov	r7, ip
 801e364:	e754      	b.n	801e210 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801e366:	4660      	mov	r0, ip
 801e368:	4662      	mov	r2, ip
 801e36a:	e751      	b.n	801e210 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801e36c:	4660      	mov	r0, ip
 801e36e:	4662      	mov	r2, ip
 801e370:	e7f7      	b.n	801e362 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801e372:	1c47      	adds	r7, r0, #1
 801e374:	d195      	bne.n	801e2a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e376:	4285      	cmp	r5, r0
 801e378:	dd93      	ble.n	801e2a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e37a:	1c57      	adds	r7, r2, #1
 801e37c:	db91      	blt.n	801e2a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e37e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e380:	4297      	cmp	r7, r2
 801e382:	dd8e      	ble.n	801e2a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e384:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801e388:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801e38c:	e9cd 5700 	strd	r5, r7, [sp]
 801e390:	4623      	mov	r3, r4
 801e392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e394:	4631      	mov	r1, r6
 801e396:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e398:	f7ff fdca 	bl	801df30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801e39c:	e781      	b.n	801e2a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e39e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e3a0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e3a2:	1410      	asrs	r0, r2, #16
 801e3a4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e3a8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e3aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e3ac:	1412      	asrs	r2, r2, #16
 801e3ae:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e3b2:	fb05 2000 	mla	r0, r5, r0, r2
 801e3b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e3b8:	f816 e000 	ldrb.w	lr, [r6, r0]
 801e3bc:	4402      	add	r2, r0
 801e3be:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e3c2:	eb04 070e 	add.w	r7, r4, lr
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d063      	beq.n	801e492 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801e3ca:	7856      	ldrb	r6, [r2, #1]
 801e3cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e3d0:	4426      	add	r6, r4
 801e3d2:	2900      	cmp	r1, #0
 801e3d4:	d065      	beq.n	801e4a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801e3d6:	1950      	adds	r0, r2, r5
 801e3d8:	5d52      	ldrb	r2, [r2, r5]
 801e3da:	7840      	ldrb	r0, [r0, #1]
 801e3dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e3e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e3e4:	4422      	add	r2, r4
 801e3e6:	4420      	add	r0, r4
 801e3e8:	b29b      	uxth	r3, r3
 801e3ea:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801e3ee:	b289      	uxth	r1, r1
 801e3f0:	f896 e000 	ldrb.w	lr, [r6]
 801e3f4:	f108 0803 	add.w	r8, r8, #3
 801e3f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e3fc:	fb03 f901 	mul.w	r9, r3, r1
 801e400:	011b      	lsls	r3, r3, #4
 801e402:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e406:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801e40a:	eba3 0309 	sub.w	r3, r3, r9
 801e40e:	b289      	uxth	r1, r1
 801e410:	b29b      	uxth	r3, r3
 801e412:	ebac 0c01 	sub.w	ip, ip, r1
 801e416:	fb03 fe0e 	mul.w	lr, r3, lr
 801e41a:	fa1f fc8c 	uxth.w	ip, ip
 801e41e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e422:	f892 b000 	ldrb.w	fp, [r2]
 801e426:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e42a:	f890 b000 	ldrb.w	fp, [r0]
 801e42e:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e432:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e436:	f808 ec06 	strb.w	lr, [r8, #-6]
 801e43a:	f896 e001 	ldrb.w	lr, [r6, #1]
 801e43e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e442:	fb03 fe0e 	mul.w	lr, r3, lr
 801e446:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e44a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e44e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e452:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e456:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e45a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e45e:	f808 ec05 	strb.w	lr, [r8, #-5]
 801e462:	78b6      	ldrb	r6, [r6, #2]
 801e464:	78bf      	ldrb	r7, [r7, #2]
 801e466:	4373      	muls	r3, r6
 801e468:	7896      	ldrb	r6, [r2, #2]
 801e46a:	7882      	ldrb	r2, [r0, #2]
 801e46c:	fb0c 3307 	mla	r3, ip, r7, r3
 801e470:	fb01 3306 	mla	r3, r1, r6, r3
 801e474:	fb09 3902 	mla	r9, r9, r2, r3
 801e478:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e47a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e47c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e480:	4413      	add	r3, r2
 801e482:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e484:	f808 9c04 	strb.w	r9, [r8, #-4]
 801e488:	9323      	str	r3, [sp, #140]	; 0x8c
 801e48a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e48c:	4413      	add	r3, r2
 801e48e:	9324      	str	r3, [sp, #144]	; 0x90
 801e490:	e668      	b.n	801e164 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e492:	b149      	cbz	r1, 801e4a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801e494:	5d52      	ldrb	r2, [r2, r5]
 801e496:	4638      	mov	r0, r7
 801e498:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e49c:	4422      	add	r2, r4
 801e49e:	463e      	mov	r6, r7
 801e4a0:	e7a2      	b.n	801e3e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801e4a2:	4638      	mov	r0, r7
 801e4a4:	463a      	mov	r2, r7
 801e4a6:	e79f      	b.n	801e3e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801e4a8:	4638      	mov	r0, r7
 801e4aa:	463a      	mov	r2, r7
 801e4ac:	e7f7      	b.n	801e49e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801e4ae:	b00f      	add	sp, #60	; 0x3c
 801e4b0:	ecbd 8b0a 	vpop	{d8-d12}
 801e4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e4b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4bc:	b087      	sub	sp, #28
 801e4be:	7888      	ldrb	r0, [r1, #2]
 801e4c0:	9002      	str	r0, [sp, #8]
 801e4c2:	7848      	ldrb	r0, [r1, #1]
 801e4c4:	9e02      	ldr	r6, [sp, #8]
 801e4c6:	9003      	str	r0, [sp, #12]
 801e4c8:	7808      	ldrb	r0, [r1, #0]
 801e4ca:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801e4ce:	9004      	str	r0, [sp, #16]
 801e4d0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e4d4:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801e4d8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801e4dc:	9e03      	ldr	r6, [sp, #12]
 801e4de:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801e4e2:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801e4e6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801e4ea:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801e4ee:	fb04 7508 	mla	r5, r4, r8, r7
 801e4f2:	2c00      	cmp	r4, #0
 801e4f4:	eb02 0905 	add.w	r9, r2, r5
 801e4f8:	db45      	blt.n	801e586 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801e4fa:	45a2      	cmp	sl, r4
 801e4fc:	dd43      	ble.n	801e586 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801e4fe:	2f00      	cmp	r7, #0
 801e500:	db3f      	blt.n	801e582 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801e502:	45b8      	cmp	r8, r7
 801e504:	dd3d      	ble.n	801e582 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801e506:	5d52      	ldrb	r2, [r2, r5]
 801e508:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e50c:	1c7a      	adds	r2, r7, #1
 801e50e:	d43d      	bmi.n	801e58c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801e510:	4590      	cmp	r8, r2
 801e512:	dd3b      	ble.n	801e58c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801e514:	f1bc 0f00 	cmp.w	ip, #0
 801e518:	d038      	beq.n	801e58c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801e51a:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e51e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801e522:	3401      	adds	r4, #1
 801e524:	d436      	bmi.n	801e594 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801e526:	45a2      	cmp	sl, r4
 801e528:	dd34      	ble.n	801e594 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801e52a:	f1be 0f00 	cmp.w	lr, #0
 801e52e:	d031      	beq.n	801e594 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801e530:	2f00      	cmp	r7, #0
 801e532:	db2d      	blt.n	801e590 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801e534:	45b8      	cmp	r8, r7
 801e536:	dd2b      	ble.n	801e590 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801e538:	f819 2008 	ldrb.w	r2, [r9, r8]
 801e53c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801e540:	3701      	adds	r7, #1
 801e542:	d409      	bmi.n	801e558 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801e544:	45b8      	cmp	r8, r7
 801e546:	dd07      	ble.n	801e558 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801e548:	f1bc 0f00 	cmp.w	ip, #0
 801e54c:	d004      	beq.n	801e558 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801e54e:	44c8      	add	r8, r9
 801e550:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e554:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e558:	f1bc 0f0f 	cmp.w	ip, #15
 801e55c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e560:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801e564:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e568:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801e56c:	d802      	bhi.n	801e574 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801e56e:	f1be 0f0f 	cmp.w	lr, #15
 801e572:	d911      	bls.n	801e598 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801e574:	4b77      	ldr	r3, [pc, #476]	; (801e754 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801e576:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e57a:	4a77      	ldr	r2, [pc, #476]	; (801e758 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801e57c:	4877      	ldr	r0, [pc, #476]	; (801e75c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801e57e:	f005 fc73 	bl	8023e68 <__assert_func>
 801e582:	4606      	mov	r6, r0
 801e584:	e7c2      	b.n	801e50c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801e586:	4605      	mov	r5, r0
 801e588:	4606      	mov	r6, r0
 801e58a:	e7ca      	b.n	801e522 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801e58c:	4605      	mov	r5, r0
 801e58e:	e7c8      	b.n	801e522 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801e590:	4604      	mov	r4, r0
 801e592:	e7d5      	b.n	801e540 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801e594:	4604      	mov	r4, r0
 801e596:	e7df      	b.n	801e558 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801e598:	fa1f fc8c 	uxth.w	ip, ip
 801e59c:	fa1f f28e 	uxth.w	r2, lr
 801e5a0:	fb02 fe0c 	mul.w	lr, r2, ip
 801e5a4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e5a8:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801e5ac:	ebac 070e 	sub.w	r7, ip, lr
 801e5b0:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801e5b4:	b292      	uxth	r2, r2
 801e5b6:	b2bf      	uxth	r7, r7
 801e5b8:	1a9b      	subs	r3, r3, r2
 801e5ba:	fb07 fc0a 	mul.w	ip, r7, sl
 801e5be:	b29b      	uxth	r3, r3
 801e5c0:	fb03 cc0b 	mla	ip, r3, fp, ip
 801e5c4:	9301      	str	r3, [sp, #4]
 801e5c6:	fb02 cc09 	mla	ip, r2, r9, ip
 801e5ca:	fb0e cc08 	mla	ip, lr, r8, ip
 801e5ce:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e5d2:	9305      	str	r3, [sp, #20]
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	f000 80b9 	beq.w	801e74c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801e5da:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e5de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e5e2:	fb0b fc0c 	mul.w	ip, fp, ip
 801e5e6:	fb0b f606 	mul.w	r6, fp, r6
 801e5ea:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e5ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e5f2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801e5f6:	44dc      	add	ip, fp
 801e5f8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801e5fc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e600:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e604:	fb0a fb0b 	mul.w	fp, sl, fp
 801e608:	fb0a fa05 	mul.w	sl, sl, r5
 801e60c:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801e610:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801e614:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801e618:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e61c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e620:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e624:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801e628:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e62c:	0a36      	lsrs	r6, r6, #8
 801e62e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e632:	44dc      	add	ip, fp
 801e634:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e638:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e63c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e640:	fb09 fb0b 	mul.w	fp, r9, fp
 801e644:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e648:	fb09 f904 	mul.w	r9, r9, r4
 801e64c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e650:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801e654:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e658:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801e65c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e660:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e664:	fb0c fc07 	mul.w	ip, ip, r7
 801e668:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801e66c:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801e670:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e674:	445d      	add	r5, fp
 801e676:	fb08 f404 	mul.w	r4, r8, r4
 801e67a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e67e:	fb08 f800 	mul.w	r8, r8, r0
 801e682:	0a2d      	lsrs	r5, r5, #8
 801e684:	0a20      	lsrs	r0, r4, #8
 801e686:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801e68a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e68e:	fb07 f70a 	mul.w	r7, r7, sl
 801e692:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e696:	4404      	add	r4, r0
 801e698:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801e69c:	0a24      	lsrs	r4, r4, #8
 801e69e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801e6a2:	9801      	ldr	r0, [sp, #4]
 801e6a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e6a8:	fb03 cc00 	mla	ip, r3, r0, ip
 801e6ac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e6b0:	fb00 7606 	mla	r6, r0, r6, r7
 801e6b4:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801e6b8:	fb04 cc0e 	mla	ip, r4, lr, ip
 801e6bc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e6c0:	b280      	uxth	r0, r0
 801e6c2:	9c04      	ldr	r4, [sp, #16]
 801e6c4:	fb05 cc02 	mla	ip, r5, r2, ip
 801e6c8:	fb0e 6e08 	mla	lr, lr, r8, r6
 801e6cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6d0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801e6d4:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801e6d8:	fb02 ec0c 	mla	ip, r2, ip, lr
 801e6dc:	9a05      	ldr	r2, [sp, #20]
 801e6de:	4342      	muls	r2, r0
 801e6e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6e4:	1c53      	adds	r3, r2, #1
 801e6e6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e6ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e6ee:	ea45 0c0c 	orr.w	ip, r5, ip
 801e6f2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801e6f6:	fa5f f28c 	uxtb.w	r2, ip
 801e6fa:	b2db      	uxtb	r3, r3
 801e6fc:	fb14 f403 	smulbb	r4, r4, r3
 801e700:	fb02 4200 	mla	r2, r2, r0, r4
 801e704:	b292      	uxth	r2, r2
 801e706:	1c54      	adds	r4, r2, #1
 801e708:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801e70c:	9c03      	ldr	r4, [sp, #12]
 801e70e:	fb14 f403 	smulbb	r4, r4, r3
 801e712:	1212      	asrs	r2, r2, #8
 801e714:	700a      	strb	r2, [r1, #0]
 801e716:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801e71a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e71e:	fb02 4200 	mla	r2, r2, r0, r4
 801e722:	b292      	uxth	r2, r2
 801e724:	1c54      	adds	r4, r2, #1
 801e726:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801e72a:	1212      	asrs	r2, r2, #8
 801e72c:	704a      	strb	r2, [r1, #1]
 801e72e:	9a02      	ldr	r2, [sp, #8]
 801e730:	fb12 f303 	smulbb	r3, r2, r3
 801e734:	fb0c 3c00 	mla	ip, ip, r0, r3
 801e738:	fa1f fc8c 	uxth.w	ip, ip
 801e73c:	f10c 0301 	add.w	r3, ip, #1
 801e740:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e744:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e748:	f881 c002 	strb.w	ip, [r1, #2]
 801e74c:	b007      	add	sp, #28
 801e74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e752:	bf00      	nop
 801e754:	0802877f 	.word	0x0802877f
 801e758:	08028c76 	.word	0x08028c76
 801e75c:	08028848 	.word	0x08028848

0801e760 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e764:	ed2d 8b08 	vpush	{d8-d11}
 801e768:	b09b      	sub	sp, #108	; 0x6c
 801e76a:	eeb0 aa40 	vmov.f32	s20, s0
 801e76e:	eef0 9a60 	vmov.f32	s19, s1
 801e772:	930a      	str	r3, [sp, #40]	; 0x28
 801e774:	eeb0 9a41 	vmov.f32	s18, s2
 801e778:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801e77c:	eeb0 8a62 	vmov.f32	s16, s5
 801e780:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801e782:	eef0 8a43 	vmov.f32	s17, s6
 801e786:	9312      	str	r3, [sp, #72]	; 0x48
 801e788:	eef0 ba44 	vmov.f32	s23, s8
 801e78c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801e790:	eeb0 ba64 	vmov.f32	s22, s9
 801e794:	9019      	str	r0, [sp, #100]	; 0x64
 801e796:	eef0 aa45 	vmov.f32	s21, s10
 801e79a:	9114      	str	r1, [sp, #80]	; 0x50
 801e79c:	9317      	str	r3, [sp, #92]	; 0x5c
 801e79e:	6868      	ldr	r0, [r5, #4]
 801e7a0:	9218      	str	r2, [sp, #96]	; 0x60
 801e7a2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801e7a4:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801e7a8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801e7ac:	fb00 1303 	mla	r3, r0, r3, r1
 801e7b0:	6829      	ldr	r1, [r5, #0]
 801e7b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e7b6:	18cb      	adds	r3, r1, r3
 801e7b8:	930d      	str	r3, [sp, #52]	; 0x34
 801e7ba:	6813      	ldr	r3, [r2, #0]
 801e7bc:	9313      	str	r3, [sp, #76]	; 0x4c
 801e7be:	6853      	ldr	r3, [r2, #4]
 801e7c0:	3304      	adds	r3, #4
 801e7c2:	9309      	str	r3, [sp, #36]	; 0x24
 801e7c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	dc03      	bgt.n	801e7d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801e7ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	f340 8352 	ble.w	801ee76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801e7d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	f340 81a2 	ble.w	801eb1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801e7da:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e7dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e7de:	1412      	asrs	r2, r2, #16
 801e7e0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e7e4:	d431      	bmi.n	801e84a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801e7e6:	1c51      	adds	r1, r2, #1
 801e7e8:	428c      	cmp	r4, r1
 801e7ea:	dd31      	ble.n	801e850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	db2f      	blt.n	801e850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801e7f0:	1c59      	adds	r1, r3, #1
 801e7f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e7f4:	4288      	cmp	r0, r1
 801e7f6:	dd2b      	ble.n	801e850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801e7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7fa:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e7fc:	3b01      	subs	r3, #1
 801e7fe:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801e800:	fb02 1203 	mla	r2, r2, r3, r1
 801e804:	1412      	asrs	r2, r2, #16
 801e806:	d42d      	bmi.n	801e864 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801e808:	3201      	adds	r2, #1
 801e80a:	4294      	cmp	r4, r2
 801e80c:	dd2a      	ble.n	801e864 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801e80e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e810:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801e812:	fb02 1303 	mla	r3, r2, r3, r1
 801e816:	141b      	asrs	r3, r3, #16
 801e818:	d424      	bmi.n	801e864 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801e81a:	3301      	adds	r3, #1
 801e81c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e81e:	429a      	cmp	r2, r3
 801e820:	dd20      	ble.n	801e864 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801e822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e824:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801e828:	f103 0e03 	add.w	lr, r3, #3
 801e82c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e82e:	9315      	str	r3, [sp, #84]	; 0x54
 801e830:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e832:	2b00      	cmp	r3, #0
 801e834:	f300 81de 	bgt.w	801ebf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801e838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e83a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e83c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e840:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e844:	441a      	add	r2, r3
 801e846:	920d      	str	r2, [sp, #52]	; 0x34
 801e848:	e16b      	b.n	801eb22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801e84a:	1c51      	adds	r1, r2, #1
 801e84c:	f040 8158 	bne.w	801eb00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801e850:	42a2      	cmp	r2, r4
 801e852:	f280 8155 	bge.w	801eb00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801e856:	1c5a      	adds	r2, r3, #1
 801e858:	f2c0 8152 	blt.w	801eb00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801e85c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e85e:	4293      	cmp	r3, r2
 801e860:	f280 814e 	bge.w	801eb00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801e864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e866:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801e868:	9316      	str	r3, [sp, #88]	; 0x58
 801e86a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801e86e:	9315      	str	r3, [sp, #84]	; 0x54
 801e870:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e872:	2b00      	cmp	r3, #0
 801e874:	dde0      	ble.n	801e838 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801e876:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e878:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e87a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801e87e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801e880:	141b      	asrs	r3, r3, #16
 801e882:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e886:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e888:	1412      	asrs	r2, r2, #16
 801e88a:	f100 819a 	bmi.w	801ebc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801e88e:	1c55      	adds	r5, r2, #1
 801e890:	42ac      	cmp	r4, r5
 801e892:	f340 8198 	ble.w	801ebc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801e896:	2b00      	cmp	r3, #0
 801e898:	f2c0 8195 	blt.w	801ebc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801e89c:	1c5d      	adds	r5, r3, #1
 801e89e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801e8a0:	42af      	cmp	r7, r5
 801e8a2:	f340 8190 	ble.w	801ebc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801e8a6:	fb03 2304 	mla	r3, r3, r4, r2
 801e8aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e8ac:	18d5      	adds	r5, r2, r3
 801e8ae:	5cd3      	ldrb	r3, [r2, r3]
 801e8b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e8b6:	0e1f      	lsrs	r7, r3, #24
 801e8b8:	2800      	cmp	r0, #0
 801e8ba:	f000 8171 	beq.w	801eba0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801e8be:	f895 c001 	ldrb.w	ip, [r5, #1]
 801e8c2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801e8c6:	920e      	str	r2, [sp, #56]	; 0x38
 801e8c8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801e8cc:	2900      	cmp	r1, #0
 801e8ce:	f000 8172 	beq.w	801ebb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801e8d2:	eb05 0c04 	add.w	ip, r5, r4
 801e8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8d8:	5d2d      	ldrb	r5, [r5, r4]
 801e8da:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801e8de:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e8e2:	950b      	str	r5, [sp, #44]	; 0x2c
 801e8e4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e8e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e8ea:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e8ee:	0e15      	lsrs	r5, r2, #24
 801e8f0:	920f      	str	r2, [sp, #60]	; 0x3c
 801e8f2:	b280      	uxth	r0, r0
 801e8f4:	b289      	uxth	r1, r1
 801e8f6:	fb00 fa01 	mul.w	sl, r0, r1
 801e8fa:	0100      	lsls	r0, r0, #4
 801e8fc:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801e900:	eba0 080a 	sub.w	r8, r0, sl
 801e904:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801e908:	b289      	uxth	r1, r1
 801e90a:	fa1f f888 	uxth.w	r8, r8
 801e90e:	1a52      	subs	r2, r2, r1
 801e910:	fb08 f00e 	mul.w	r0, r8, lr
 801e914:	b292      	uxth	r2, r2
 801e916:	fb02 0007 	mla	r0, r2, r7, r0
 801e91a:	fb01 0009 	mla	r0, r1, r9, r0
 801e91e:	fb0a 0005 	mla	r0, sl, r5, r0
 801e922:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e926:	2800      	cmp	r0, #0
 801e928:	f000 80dd 	beq.w	801eae6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801e92c:	2fff      	cmp	r7, #255	; 0xff
 801e92e:	d01a      	beq.n	801e966 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801e930:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e934:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e938:	fb07 fc0c 	mul.w	ip, r7, ip
 801e93c:	435f      	muls	r7, r3
 801e93e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e942:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e946:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801e94a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e94e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801e952:	4463      	add	r3, ip
 801e954:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801e958:	0a1b      	lsrs	r3, r3, #8
 801e95a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801e95e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e962:	ea43 030b 	orr.w	r3, r3, fp
 801e966:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e96a:	d01e      	beq.n	801e9aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801e96c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801e96e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801e972:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e976:	fb0e fb0b 	mul.w	fp, lr, fp
 801e97a:	fb0e fe07 	mul.w	lr, lr, r7
 801e97e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e982:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e986:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801e98a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e98e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801e992:	44dc      	add	ip, fp
 801e994:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e998:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e99c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e9a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9a4:	ea4c 070e 	orr.w	r7, ip, lr
 801e9a8:	970e      	str	r7, [sp, #56]	; 0x38
 801e9aa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e9ae:	d01e      	beq.n	801e9ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e9b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e9b2:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801e9b6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e9ba:	fb09 fe0e 	mul.w	lr, r9, lr
 801e9be:	fb09 f907 	mul.w	r9, r9, r7
 801e9c2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e9c6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e9ca:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801e9ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9d2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e9d6:	44f4      	add	ip, lr
 801e9d8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e9dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9e0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e9e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e9e8:	ea4c 0709 	orr.w	r7, ip, r9
 801e9ec:	970b      	str	r7, [sp, #44]	; 0x2c
 801e9ee:	2dff      	cmp	r5, #255	; 0xff
 801e9f0:	d01c      	beq.n	801ea2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801e9f2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e9f4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801e9f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e9fc:	fb05 fe0e 	mul.w	lr, r5, lr
 801ea00:	437d      	muls	r5, r7
 801ea02:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ea06:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ea0a:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801ea0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea12:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801ea16:	44f4      	add	ip, lr
 801ea18:	0a2d      	lsrs	r5, r5, #8
 801ea1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea1e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ea22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ea26:	ea4c 0505 	orr.w	r5, ip, r5
 801ea2a:	950f      	str	r5, [sp, #60]	; 0x3c
 801ea2c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ea2e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801ea32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ea36:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ea3a:	fb08 f505 	mul.w	r5, r8, r5
 801ea3e:	fb02 5507 	mla	r5, r2, r7, r5
 801ea42:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ea44:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ea48:	fb01 5507 	mla	r5, r1, r7, r5
 801ea4c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ea4e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ea52:	fb0a 5507 	mla	r5, sl, r7, r5
 801ea56:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801ea58:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ea5c:	0a2d      	lsrs	r5, r5, #8
 801ea5e:	fb08 f807 	mul.w	r8, r8, r7
 801ea62:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ea66:	fb02 8303 	mla	r3, r2, r3, r8
 801ea6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ea6c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ea70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea72:	fb01 330c 	mla	r3, r1, ip, r3
 801ea76:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801ea7a:	fb0a 3a01 	mla	sl, sl, r1, r3
 801ea7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ea80:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ea82:	4343      	muls	r3, r0
 801ea84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea88:	1c58      	adds	r0, r3, #1
 801ea8a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea8e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ea92:	ea45 050a 	orr.w	r5, r5, sl
 801ea96:	7833      	ldrb	r3, [r6, #0]
 801ea98:	b2ea      	uxtb	r2, r5
 801ea9a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ea9e:	fb12 f201 	smulbb	r2, r2, r1
 801eaa2:	b2c0      	uxtb	r0, r0
 801eaa4:	fb03 2300 	mla	r3, r3, r0, r2
 801eaa8:	b29b      	uxth	r3, r3
 801eaaa:	1c5a      	adds	r2, r3, #1
 801eaac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801eab0:	7872      	ldrb	r2, [r6, #1]
 801eab2:	fb12 f200 	smulbb	r2, r2, r0
 801eab6:	121b      	asrs	r3, r3, #8
 801eab8:	7033      	strb	r3, [r6, #0]
 801eaba:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801eabe:	0c2d      	lsrs	r5, r5, #16
 801eac0:	fb03 2301 	mla	r3, r3, r1, r2
 801eac4:	b29b      	uxth	r3, r3
 801eac6:	1c5a      	adds	r2, r3, #1
 801eac8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801eacc:	121b      	asrs	r3, r3, #8
 801eace:	7073      	strb	r3, [r6, #1]
 801ead0:	78b3      	ldrb	r3, [r6, #2]
 801ead2:	fb13 f000 	smulbb	r0, r3, r0
 801ead6:	fb05 0501 	mla	r5, r5, r1, r0
 801eada:	b2ad      	uxth	r5, r5
 801eadc:	1c6b      	adds	r3, r5, #1
 801eade:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801eae2:	122d      	asrs	r5, r5, #8
 801eae4:	70b5      	strb	r5, [r6, #2]
 801eae6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801eae8:	3603      	adds	r6, #3
 801eaea:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801eaec:	4413      	add	r3, r2
 801eaee:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801eaf0:	932d      	str	r3, [sp, #180]	; 0xb4
 801eaf2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801eaf4:	4413      	add	r3, r2
 801eaf6:	932e      	str	r3, [sp, #184]	; 0xb8
 801eaf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801eafa:	3b01      	subs	r3, #1
 801eafc:	9316      	str	r3, [sp, #88]	; 0x58
 801eafe:	e6b7      	b.n	801e870 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801eb00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801eb02:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801eb04:	4413      	add	r3, r2
 801eb06:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801eb08:	932d      	str	r3, [sp, #180]	; 0xb4
 801eb0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801eb0c:	4413      	add	r3, r2
 801eb0e:	932e      	str	r3, [sp, #184]	; 0xb8
 801eb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb12:	3b01      	subs	r3, #1
 801eb14:	930a      	str	r3, [sp, #40]	; 0x28
 801eb16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb18:	3303      	adds	r3, #3
 801eb1a:	930d      	str	r3, [sp, #52]	; 0x34
 801eb1c:	e659      	b.n	801e7d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801eb1e:	f47f ae6b 	bne.w	801e7f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801eb22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	f340 81a6 	ble.w	801ee76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801eb2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eb2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb30:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801eb34:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801eb38:	eef0 6a48 	vmov.f32	s13, s16
 801eb3c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801eb40:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801eb44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb48:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801eb4c:	eef0 6a68 	vmov.f32	s13, s17
 801eb50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb54:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801eb58:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801eb5c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801eb60:	ee37 8a48 	vsub.f32	s16, s14, s16
 801eb64:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801eb68:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801eb6c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eb70:	ee18 2a10 	vmov	r2, s16
 801eb74:	eeb0 8a47 	vmov.f32	s16, s14
 801eb78:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb7c:	ee18 2a90 	vmov	r2, s17
 801eb80:	932f      	str	r3, [sp, #188]	; 0xbc
 801eb82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb84:	eef0 8a67 	vmov.f32	s17, s15
 801eb88:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb8c:	9330      	str	r3, [sp, #192]	; 0xc0
 801eb8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eb90:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801eb92:	3b01      	subs	r3, #1
 801eb94:	9314      	str	r3, [sp, #80]	; 0x50
 801eb96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb98:	bf08      	it	eq
 801eb9a:	4613      	moveq	r3, r2
 801eb9c:	930a      	str	r3, [sp, #40]	; 0x28
 801eb9e:	e611      	b.n	801e7c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801eba0:	b161      	cbz	r1, 801ebbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801eba2:	5d2a      	ldrb	r2, [r5, r4]
 801eba4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801eba6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ebaa:	25ff      	movs	r5, #255	; 0xff
 801ebac:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801ebb0:	920b      	str	r2, [sp, #44]	; 0x2c
 801ebb2:	46ae      	mov	lr, r5
 801ebb4:	e69d      	b.n	801e8f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801ebb6:	25ff      	movs	r5, #255	; 0xff
 801ebb8:	46a9      	mov	r9, r5
 801ebba:	e69a      	b.n	801e8f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801ebbc:	25ff      	movs	r5, #255	; 0xff
 801ebbe:	46a9      	mov	r9, r5
 801ebc0:	e7f7      	b.n	801ebb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801ebc2:	1c57      	adds	r7, r2, #1
 801ebc4:	d18f      	bne.n	801eae6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801ebc6:	4294      	cmp	r4, r2
 801ebc8:	dd8d      	ble.n	801eae6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801ebca:	1c5d      	adds	r5, r3, #1
 801ebcc:	db8b      	blt.n	801eae6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801ebce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ebd0:	429d      	cmp	r5, r3
 801ebd2:	dd88      	ble.n	801eae6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801ebd4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801ebd6:	9202      	str	r2, [sp, #8]
 801ebd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ebda:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801ebde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ebe0:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ebe2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801ebe6:	e9cd 4300 	strd	r4, r3, [sp]
 801ebea:	4631      	mov	r1, r6
 801ebec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ebee:	f7ff fc63 	bl	801e4b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801ebf2:	e778      	b.n	801eae6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801ebf4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ebf6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ebf8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801ebfc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ebfe:	1412      	asrs	r2, r2, #16
 801ec00:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801ec04:	141b      	asrs	r3, r3, #16
 801ec06:	fb04 2303 	mla	r3, r4, r3, r2
 801ec0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ec0c:	18d5      	adds	r5, r2, r3
 801ec0e:	5cd3      	ldrb	r3, [r2, r3]
 801ec10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ec16:	0e1e      	lsrs	r6, r3, #24
 801ec18:	2900      	cmp	r1, #0
 801ec1a:	f000 811b 	beq.w	801ee54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801ec1e:	786a      	ldrb	r2, [r5, #1]
 801ec20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ec22:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801ec26:	9210      	str	r2, [sp, #64]	; 0x40
 801ec28:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801ec2c:	2800      	cmp	r0, #0
 801ec2e:	f000 811c 	beq.w	801ee6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801ec32:	192a      	adds	r2, r5, r4
 801ec34:	5d2d      	ldrb	r5, [r5, r4]
 801ec36:	7852      	ldrb	r2, [r2, #1]
 801ec38:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801ec3c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801ec40:	950c      	str	r5, [sp, #48]	; 0x30
 801ec42:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801ec46:	0e15      	lsrs	r5, r2, #24
 801ec48:	9211      	str	r2, [sp, #68]	; 0x44
 801ec4a:	b289      	uxth	r1, r1
 801ec4c:	b280      	uxth	r0, r0
 801ec4e:	fb01 fa00 	mul.w	sl, r1, r0
 801ec52:	0109      	lsls	r1, r1, #4
 801ec54:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ec58:	eba1 080a 	sub.w	r8, r1, sl
 801ec5c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801ec60:	b280      	uxth	r0, r0
 801ec62:	fa1f f888 	uxth.w	r8, r8
 801ec66:	1a12      	subs	r2, r2, r0
 801ec68:	fb08 f10c 	mul.w	r1, r8, ip
 801ec6c:	b292      	uxth	r2, r2
 801ec6e:	fb02 1106 	mla	r1, r2, r6, r1
 801ec72:	fb00 1109 	mla	r1, r0, r9, r1
 801ec76:	fb0a 1105 	mla	r1, sl, r5, r1
 801ec7a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ec7e:	2900      	cmp	r1, #0
 801ec80:	f000 80da 	beq.w	801ee38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801ec84:	2eff      	cmp	r6, #255	; 0xff
 801ec86:	d016      	beq.n	801ecb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801ec88:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801ec8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ec90:	4377      	muls	r7, r6
 801ec92:	435e      	muls	r6, r3
 801ec94:	0a3b      	lsrs	r3, r7, #8
 801ec96:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ec9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ec9e:	443b      	add	r3, r7
 801eca0:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801eca4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801eca8:	0a1b      	lsrs	r3, r3, #8
 801ecaa:	0a3f      	lsrs	r7, r7, #8
 801ecac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ecb0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ecb4:	433b      	orrs	r3, r7
 801ecb6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ecba:	d01d      	beq.n	801ecf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801ecbc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ecbe:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ecc0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ecc4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ecc8:	fb0c f606 	mul.w	r6, ip, r6
 801eccc:	fb0c fc07 	mul.w	ip, ip, r7
 801ecd0:	0a37      	lsrs	r7, r6, #8
 801ecd2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ecd6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ecda:	4437      	add	r7, r6
 801ecdc:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801ece0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801ece4:	0a3f      	lsrs	r7, r7, #8
 801ece6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ecea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ecee:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ecf2:	ea47 060c 	orr.w	r6, r7, ip
 801ecf6:	9610      	str	r6, [sp, #64]	; 0x40
 801ecf8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ecfc:	d01d      	beq.n	801ed3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801ecfe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ed00:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801ed04:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ed08:	fb09 fc0c 	mul.w	ip, r9, ip
 801ed0c:	fb09 f906 	mul.w	r9, r9, r6
 801ed10:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801ed14:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ed18:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801ed1c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ed20:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801ed24:	4467      	add	r7, ip
 801ed26:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ed2a:	0a3f      	lsrs	r7, r7, #8
 801ed2c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ed30:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ed34:	ea47 0609 	orr.w	r6, r7, r9
 801ed38:	960c      	str	r6, [sp, #48]	; 0x30
 801ed3a:	2dff      	cmp	r5, #255	; 0xff
 801ed3c:	d01a      	beq.n	801ed74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801ed3e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ed40:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801ed44:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ed48:	fb05 fc0c 	mul.w	ip, r5, ip
 801ed4c:	4375      	muls	r5, r6
 801ed4e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801ed52:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ed56:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801ed5a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ed5e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801ed62:	4467      	add	r7, ip
 801ed64:	0a2d      	lsrs	r5, r5, #8
 801ed66:	0a3f      	lsrs	r7, r7, #8
 801ed68:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ed6c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ed70:	433d      	orrs	r5, r7
 801ed72:	9511      	str	r5, [sp, #68]	; 0x44
 801ed74:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801ed76:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801ed7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ed7e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ed82:	fb08 f505 	mul.w	r5, r8, r5
 801ed86:	fb02 5506 	mla	r5, r2, r6, r5
 801ed8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ed8c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ed90:	fb00 5506 	mla	r5, r0, r6, r5
 801ed94:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ed96:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ed9a:	fb0a 5506 	mla	r5, sl, r6, r5
 801ed9e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801eda0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801eda4:	0a2d      	lsrs	r5, r5, #8
 801eda6:	fb08 f806 	mul.w	r8, r8, r6
 801edaa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801edae:	fb02 8303 	mla	r3, r2, r3, r8
 801edb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801edb4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801edb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801edba:	fb00 3307 	mla	r3, r0, r7, r3
 801edbe:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801edc2:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801edc6:	fb01 f30b 	mul.w	r3, r1, fp
 801edca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801edce:	1c59      	adds	r1, r3, #1
 801edd0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801edd4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801edd8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801eddc:	ea45 050c 	orr.w	r5, r5, ip
 801ede0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ede4:	b2ea      	uxtb	r2, r5
 801ede6:	b2c9      	uxtb	r1, r1
 801ede8:	fb12 f20b 	smulbb	r2, r2, fp
 801edec:	fb03 2301 	mla	r3, r3, r1, r2
 801edf0:	b29b      	uxth	r3, r3
 801edf2:	1c5a      	adds	r2, r3, #1
 801edf4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801edf8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801edfc:	fb12 f201 	smulbb	r2, r2, r1
 801ee00:	121b      	asrs	r3, r3, #8
 801ee02:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ee06:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801ee0a:	0c2d      	lsrs	r5, r5, #16
 801ee0c:	fb03 230b 	mla	r3, r3, fp, r2
 801ee10:	b29b      	uxth	r3, r3
 801ee12:	1c5a      	adds	r2, r3, #1
 801ee14:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ee18:	121b      	asrs	r3, r3, #8
 801ee1a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ee1e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ee22:	fb13 f101 	smulbb	r1, r3, r1
 801ee26:	fb05 150b 	mla	r5, r5, fp, r1
 801ee2a:	b2ad      	uxth	r5, r5
 801ee2c:	1c69      	adds	r1, r5, #1
 801ee2e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801ee32:	122d      	asrs	r5, r5, #8
 801ee34:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ee38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ee3a:	f10e 0e03 	add.w	lr, lr, #3
 801ee3e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ee40:	4413      	add	r3, r2
 801ee42:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ee44:	932d      	str	r3, [sp, #180]	; 0xb4
 801ee46:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ee48:	4413      	add	r3, r2
 801ee4a:	932e      	str	r3, [sp, #184]	; 0xb8
 801ee4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ee4e:	3b01      	subs	r3, #1
 801ee50:	9315      	str	r3, [sp, #84]	; 0x54
 801ee52:	e4ed      	b.n	801e830 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801ee54:	b160      	cbz	r0, 801ee70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801ee56:	5d2a      	ldrb	r2, [r5, r4]
 801ee58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ee5a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ee5e:	25ff      	movs	r5, #255	; 0xff
 801ee60:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801ee64:	920c      	str	r2, [sp, #48]	; 0x30
 801ee66:	46ac      	mov	ip, r5
 801ee68:	e6ef      	b.n	801ec4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801ee6a:	25ff      	movs	r5, #255	; 0xff
 801ee6c:	46a9      	mov	r9, r5
 801ee6e:	e6ec      	b.n	801ec4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801ee70:	25ff      	movs	r5, #255	; 0xff
 801ee72:	46a9      	mov	r9, r5
 801ee74:	e7f7      	b.n	801ee66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801ee76:	b01b      	add	sp, #108	; 0x6c
 801ee78:	ecbd 8b08 	vpop	{d8-d11}
 801ee7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee84:	b085      	sub	sp, #20
 801ee86:	7888      	ldrb	r0, [r1, #2]
 801ee88:	4692      	mov	sl, r2
 801ee8a:	4698      	mov	r8, r3
 801ee8c:	9000      	str	r0, [sp, #0]
 801ee8e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801ee92:	7848      	ldrb	r0, [r1, #1]
 801ee94:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801ee98:	9001      	str	r0, [sp, #4]
 801ee9a:	7808      	ldrb	r0, [r1, #0]
 801ee9c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801eea0:	9002      	str	r0, [sp, #8]
 801eea2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801eea6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801eeaa:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801eeae:	fb04 560c 	mla	r6, r4, ip, r5
 801eeb2:	2c00      	cmp	r4, #0
 801eeb4:	eb02 0e06 	add.w	lr, r2, r6
 801eeb8:	9a00      	ldr	r2, [sp, #0]
 801eeba:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801eebe:	9a01      	ldr	r2, [sp, #4]
 801eec0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801eec4:	db3e      	blt.n	801ef44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801eec6:	45a1      	cmp	r9, r4
 801eec8:	dd3c      	ble.n	801ef44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801eeca:	2d00      	cmp	r5, #0
 801eecc:	db38      	blt.n	801ef40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801eece:	45ac      	cmp	ip, r5
 801eed0:	dd36      	ble.n	801ef40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801eed2:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801eed6:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801eeda:	1c6e      	adds	r6, r5, #1
 801eedc:	d435      	bmi.n	801ef4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801eede:	45b4      	cmp	ip, r6
 801eee0:	dd33      	ble.n	801ef4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801eee2:	b393      	cbz	r3, 801ef4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801eee4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801eee8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801eeec:	3401      	adds	r4, #1
 801eeee:	d430      	bmi.n	801ef52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801eef0:	45a1      	cmp	r9, r4
 801eef2:	dd2e      	ble.n	801ef52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801eef4:	b36f      	cbz	r7, 801ef52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801eef6:	2d00      	cmp	r5, #0
 801eef8:	db29      	blt.n	801ef4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801eefa:	45ac      	cmp	ip, r5
 801eefc:	dd27      	ble.n	801ef4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801eefe:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801ef02:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801ef06:	3501      	adds	r5, #1
 801ef08:	d407      	bmi.n	801ef1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801ef0a:	45ac      	cmp	ip, r5
 801ef0c:	dd05      	ble.n	801ef1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801ef0e:	b123      	cbz	r3, 801ef1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801ef10:	44f4      	add	ip, lr
 801ef12:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801ef16:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801ef1a:	2b0f      	cmp	r3, #15
 801ef1c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801ef20:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ef24:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ef28:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ef2c:	d801      	bhi.n	801ef32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801ef2e:	2f0f      	cmp	r7, #15
 801ef30:	d911      	bls.n	801ef56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801ef32:	4b76      	ldr	r3, [pc, #472]	; (801f10c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801ef34:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ef38:	4a75      	ldr	r2, [pc, #468]	; (801f110 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801ef3a:	4876      	ldr	r0, [pc, #472]	; (801f114 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801ef3c:	f004 ff94 	bl	8023e68 <__assert_func>
 801ef40:	4602      	mov	r2, r0
 801ef42:	e7ca      	b.n	801eeda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801ef44:	4606      	mov	r6, r0
 801ef46:	4602      	mov	r2, r0
 801ef48:	e7d0      	b.n	801eeec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801ef4a:	4606      	mov	r6, r0
 801ef4c:	e7ce      	b.n	801eeec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801ef4e:	4604      	mov	r4, r0
 801ef50:	e7d9      	b.n	801ef06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801ef52:	4604      	mov	r4, r0
 801ef54:	e7e1      	b.n	801ef1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801ef56:	b29b      	uxth	r3, r3
 801ef58:	b2bf      	uxth	r7, r7
 801ef5a:	fb07 fe03 	mul.w	lr, r7, r3
 801ef5e:	011b      	lsls	r3, r3, #4
 801ef60:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801ef64:	eba3 0c0e 	sub.w	ip, r3, lr
 801ef68:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801ef6c:	b2bf      	uxth	r7, r7
 801ef6e:	fa1f fc8c 	uxth.w	ip, ip
 801ef72:	1bed      	subs	r5, r5, r7
 801ef74:	fb0c f30a 	mul.w	r3, ip, sl
 801ef78:	b2ad      	uxth	r5, r5
 801ef7a:	fb05 330b 	mla	r3, r5, fp, r3
 801ef7e:	fb07 3309 	mla	r3, r7, r9, r3
 801ef82:	fb0e 3308 	mla	r3, lr, r8, r3
 801ef86:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ef8a:	9303      	str	r3, [sp, #12]
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	f000 80b9 	beq.w	801f104 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801ef92:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ef96:	d018      	beq.n	801efca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801ef98:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801ef9c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801efa0:	fb0b f303 	mul.w	r3, fp, r3
 801efa4:	fb0b fb02 	mul.w	fp, fp, r2
 801efa8:	0a1a      	lsrs	r2, r3, #8
 801efaa:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801efae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801efb2:	441a      	add	r2, r3
 801efb4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801efb8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801efbc:	0a12      	lsrs	r2, r2, #8
 801efbe:	0a1b      	lsrs	r3, r3, #8
 801efc0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801efc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801efc8:	431a      	orrs	r2, r3
 801efca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801efce:	d019      	beq.n	801f004 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801efd0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801efd4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801efd8:	fb0a fb0b 	mul.w	fp, sl, fp
 801efdc:	fb0a fa06 	mul.w	sl, sl, r6
 801efe0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801efe4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801efe8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801efec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801eff0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801eff4:	445e      	add	r6, fp
 801eff6:	0a1b      	lsrs	r3, r3, #8
 801eff8:	0a36      	lsrs	r6, r6, #8
 801effa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801effe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f002:	431e      	orrs	r6, r3
 801f004:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f008:	d019      	beq.n	801f03e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801f00a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f00e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f012:	fb09 fa0a 	mul.w	sl, r9, sl
 801f016:	fb09 f904 	mul.w	r9, r9, r4
 801f01a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f01e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f022:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801f026:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f02a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801f02e:	4454      	add	r4, sl
 801f030:	0a1b      	lsrs	r3, r3, #8
 801f032:	0a24      	lsrs	r4, r4, #8
 801f034:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f038:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f03c:	431c      	orrs	r4, r3
 801f03e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f042:	d019      	beq.n	801f078 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801f044:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801f048:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f04c:	fb08 f909 	mul.w	r9, r8, r9
 801f050:	fb08 f800 	mul.w	r8, r8, r0
 801f054:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801f058:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f05c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801f060:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f064:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801f068:	4448      	add	r0, r9
 801f06a:	0a1b      	lsrs	r3, r3, #8
 801f06c:	0a00      	lsrs	r0, r0, #8
 801f06e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f072:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f076:	4318      	orrs	r0, r3
 801f078:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f07c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f080:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f084:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f088:	fb0c f808 	mul.w	r8, ip, r8
 801f08c:	fb0c f606 	mul.w	r6, ip, r6
 801f090:	fb05 8803 	mla	r8, r5, r3, r8
 801f094:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801f098:	fb05 6202 	mla	r2, r5, r2, r6
 801f09c:	fb07 8803 	mla	r8, r7, r3, r8
 801f0a0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801f0a4:	fb0e 8303 	mla	r3, lr, r3, r8
 801f0a8:	0a1b      	lsrs	r3, r3, #8
 801f0aa:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801f0ae:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801f0b2:	9c02      	ldr	r4, [sp, #8]
 801f0b4:	fb07 2703 	mla	r7, r7, r3, r2
 801f0b8:	9a03      	ldr	r2, [sp, #12]
 801f0ba:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801f0be:	43d2      	mvns	r2, r2
 801f0c0:	fb0e 7303 	mla	r3, lr, r3, r7
 801f0c4:	b2d2      	uxtb	r2, r2
 801f0c6:	0a1b      	lsrs	r3, r3, #8
 801f0c8:	4354      	muls	r4, r2
 801f0ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f0ce:	1c60      	adds	r0, r4, #1
 801f0d0:	ea48 0303 	orr.w	r3, r8, r3
 801f0d4:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801f0d8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f0dc:	7008      	strb	r0, [r1, #0]
 801f0de:	9801      	ldr	r0, [sp, #4]
 801f0e0:	4350      	muls	r0, r2
 801f0e2:	1c44      	adds	r4, r0, #1
 801f0e4:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801f0e8:	0a18      	lsrs	r0, r3, #8
 801f0ea:	0c1b      	lsrs	r3, r3, #16
 801f0ec:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801f0f0:	7048      	strb	r0, [r1, #1]
 801f0f2:	9800      	ldr	r0, [sp, #0]
 801f0f4:	4350      	muls	r0, r2
 801f0f6:	4602      	mov	r2, r0
 801f0f8:	3001      	adds	r0, #1
 801f0fa:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f0fe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f102:	708b      	strb	r3, [r1, #2]
 801f104:	b005      	add	sp, #20
 801f106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f10a:	bf00      	nop
 801f10c:	0802877f 	.word	0x0802877f
 801f110:	08028c76 	.word	0x08028c76
 801f114:	08028848 	.word	0x08028848

0801f118 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f11c:	ed2d 8b08 	vpush	{d8-d11}
 801f120:	b097      	sub	sp, #92	; 0x5c
 801f122:	eeb0 aa40 	vmov.f32	s20, s0
 801f126:	eef0 9a60 	vmov.f32	s19, s1
 801f12a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801f12c:	eeb0 9a41 	vmov.f32	s18, s2
 801f130:	9308      	str	r3, [sp, #32]
 801f132:	eeb0 8a62 	vmov.f32	s16, s5
 801f136:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801f13a:	eef0 8a43 	vmov.f32	s17, s6
 801f13e:	9015      	str	r0, [sp, #84]	; 0x54
 801f140:	eef0 ba44 	vmov.f32	s23, s8
 801f144:	6868      	ldr	r0, [r5, #4]
 801f146:	eeb0 ba64 	vmov.f32	s22, s9
 801f14a:	9112      	str	r1, [sp, #72]	; 0x48
 801f14c:	eef0 aa45 	vmov.f32	s21, s10
 801f150:	9310      	str	r3, [sp, #64]	; 0x40
 801f152:	9214      	str	r2, [sp, #80]	; 0x50
 801f154:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801f156:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801f15a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801f15e:	fb00 1303 	mla	r3, r0, r3, r1
 801f162:	6829      	ldr	r1, [r5, #0]
 801f164:	6855      	ldr	r5, [r2, #4]
 801f166:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f16a:	3504      	adds	r5, #4
 801f16c:	18cb      	adds	r3, r1, r3
 801f16e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f170:	6813      	ldr	r3, [r2, #0]
 801f172:	9311      	str	r3, [sp, #68]	; 0x44
 801f174:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f176:	2b00      	cmp	r3, #0
 801f178:	dc03      	bgt.n	801f182 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f17a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	f340 8333 	ble.w	801f7e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801f182:	9b08      	ldr	r3, [sp, #32]
 801f184:	2b00      	cmp	r3, #0
 801f186:	f340 8190 	ble.w	801f4aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f18a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f18c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f18e:	1412      	asrs	r2, r2, #16
 801f190:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f194:	d42f      	bmi.n	801f1f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801f196:	1c51      	adds	r1, r2, #1
 801f198:	428c      	cmp	r4, r1
 801f19a:	dd2f      	ble.n	801f1fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	db2d      	blt.n	801f1fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f1a0:	1c59      	adds	r1, r3, #1
 801f1a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f1a4:	4288      	cmp	r0, r1
 801f1a6:	dd29      	ble.n	801f1fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801f1a8:	9b08      	ldr	r3, [sp, #32]
 801f1aa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f1ac:	3b01      	subs	r3, #1
 801f1ae:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801f1b0:	fb02 1203 	mla	r2, r2, r3, r1
 801f1b4:	1412      	asrs	r2, r2, #16
 801f1b6:	d42b      	bmi.n	801f210 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f1b8:	3201      	adds	r2, #1
 801f1ba:	4294      	cmp	r4, r2
 801f1bc:	dd28      	ble.n	801f210 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f1be:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f1c0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f1c2:	fb02 1303 	mla	r3, r2, r3, r1
 801f1c6:	141b      	asrs	r3, r3, #16
 801f1c8:	d422      	bmi.n	801f210 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f1ca:	3301      	adds	r3, #1
 801f1cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f1ce:	429a      	cmp	r2, r3
 801f1d0:	dd1e      	ble.n	801f210 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f1d4:	f103 0803 	add.w	r8, r3, #3
 801f1d8:	9b08      	ldr	r3, [sp, #32]
 801f1da:	9307      	str	r3, [sp, #28]
 801f1dc:	9b07      	ldr	r3, [sp, #28]
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	f300 81ca 	bgt.w	801f578 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801f1e4:	9b08      	ldr	r3, [sp, #32]
 801f1e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f1e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f1f0:	441a      	add	r2, r3
 801f1f2:	920b      	str	r2, [sp, #44]	; 0x2c
 801f1f4:	e15b      	b.n	801f4ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801f1f6:	1c51      	adds	r1, r2, #1
 801f1f8:	f040 8148 	bne.w	801f48c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f1fc:	42a2      	cmp	r2, r4
 801f1fe:	f280 8145 	bge.w	801f48c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f202:	1c5a      	adds	r2, r3, #1
 801f204:	f2c0 8142 	blt.w	801f48c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f208:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f20a:	4293      	cmp	r3, r2
 801f20c:	f280 813e 	bge.w	801f48c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801f210:	9b08      	ldr	r3, [sp, #32]
 801f212:	9313      	str	r3, [sp, #76]	; 0x4c
 801f214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f216:	9307      	str	r3, [sp, #28]
 801f218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	dde2      	ble.n	801f1e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801f21e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f220:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f222:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f226:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f228:	141b      	asrs	r3, r3, #16
 801f22a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f22e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f230:	1412      	asrs	r2, r2, #16
 801f232:	f100 818b 	bmi.w	801f54c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801f236:	1c56      	adds	r6, r2, #1
 801f238:	42b4      	cmp	r4, r6
 801f23a:	f340 8189 	ble.w	801f550 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f23e:	2b00      	cmp	r3, #0
 801f240:	f2c0 8186 	blt.w	801f550 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f244:	1c5e      	adds	r6, r3, #1
 801f246:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f248:	42b7      	cmp	r7, r6
 801f24a:	f340 8181 	ble.w	801f550 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801f24e:	fb03 2304 	mla	r3, r3, r4, r2
 801f252:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f254:	18d6      	adds	r6, r2, r3
 801f256:	5cd3      	ldrb	r3, [r2, r3]
 801f258:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f25c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f260:	2900      	cmp	r1, #0
 801f262:	f000 8163 	beq.w	801f52c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801f266:	7872      	ldrb	r2, [r6, #1]
 801f268:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f26c:	920c      	str	r2, [sp, #48]	; 0x30
 801f26e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f272:	2800      	cmp	r0, #0
 801f274:	f000 8164 	beq.w	801f540 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 801f278:	1932      	adds	r2, r6, r4
 801f27a:	5d36      	ldrb	r6, [r6, r4]
 801f27c:	7852      	ldrb	r2, [r2, #1]
 801f27e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801f282:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f286:	9609      	str	r6, [sp, #36]	; 0x24
 801f288:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f28c:	0e16      	lsrs	r6, r2, #24
 801f28e:	920d      	str	r2, [sp, #52]	; 0x34
 801f290:	b289      	uxth	r1, r1
 801f292:	b280      	uxth	r0, r0
 801f294:	fb01 fb00 	mul.w	fp, r1, r0
 801f298:	0109      	lsls	r1, r1, #4
 801f29a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801f29e:	eba1 090b 	sub.w	r9, r1, fp
 801f2a2:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801f2a6:	b280      	uxth	r0, r0
 801f2a8:	fa1f f989 	uxth.w	r9, r9
 801f2ac:	1a12      	subs	r2, r2, r0
 801f2ae:	fb09 f108 	mul.w	r1, r9, r8
 801f2b2:	b292      	uxth	r2, r2
 801f2b4:	fb02 110c 	mla	r1, r2, ip, r1
 801f2b8:	fb00 110a 	mla	r1, r0, sl, r1
 801f2bc:	fb0b 1106 	mla	r1, fp, r6, r1
 801f2c0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f2c4:	2900      	cmp	r1, #0
 801f2c6:	f000 80d2 	beq.w	801f46e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f2ca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f2ce:	d01b      	beq.n	801f308 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 801f2d0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f2d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f2d8:	fb0c fe0e 	mul.w	lr, ip, lr
 801f2dc:	fb0c fc03 	mul.w	ip, ip, r3
 801f2e0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801f2e4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f2e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f2ec:	4473      	add	r3, lr
 801f2ee:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801f2f2:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801f2f6:	0a1b      	lsrs	r3, r3, #8
 801f2f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f2fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f300:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f304:	ea43 030e 	orr.w	r3, r3, lr
 801f308:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f30c:	d01e      	beq.n	801f34c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 801f30e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f310:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f314:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801f318:	fb08 fc0c 	mul.w	ip, r8, ip
 801f31c:	fb08 f80e 	mul.w	r8, r8, lr
 801f320:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f324:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f328:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f32c:	44e6      	add	lr, ip
 801f32e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801f332:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801f336:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f33a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f33e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f342:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f346:	ea4e 0708 	orr.w	r7, lr, r8
 801f34a:	970c      	str	r7, [sp, #48]	; 0x30
 801f34c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f350:	d01e      	beq.n	801f390 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801f352:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f354:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801f358:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f35c:	fb0a f808 	mul.w	r8, sl, r8
 801f360:	fb0a fa0c 	mul.w	sl, sl, ip
 801f364:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801f368:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801f36c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f370:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f374:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f378:	44c6      	add	lr, r8
 801f37a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f37e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f382:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f386:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f38a:	ea4e 070a 	orr.w	r7, lr, sl
 801f38e:	9709      	str	r7, [sp, #36]	; 0x24
 801f390:	2eff      	cmp	r6, #255	; 0xff
 801f392:	d01d      	beq.n	801f3d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801f394:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f396:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801f39a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f39e:	fb06 f808 	mul.w	r8, r6, r8
 801f3a2:	fb06 f60c 	mul.w	r6, r6, ip
 801f3a6:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801f3aa:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801f3ae:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f3b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f3b6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f3ba:	44c6      	add	lr, r8
 801f3bc:	0a36      	lsrs	r6, r6, #8
 801f3be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f3c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f3c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f3ca:	ea4e 0606 	orr.w	r6, lr, r6
 801f3ce:	960d      	str	r6, [sp, #52]	; 0x34
 801f3d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f3d2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f3d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f3d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f3dc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f3e0:	43c9      	mvns	r1, r1
 801f3e2:	fb09 f606 	mul.w	r6, r9, r6
 801f3e6:	b2c9      	uxtb	r1, r1
 801f3e8:	fb02 660c 	mla	r6, r2, ip, r6
 801f3ec:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f3f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f3f2:	fb00 660c 	mla	r6, r0, ip, r6
 801f3f6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f3fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f3fc:	fb0b 660c 	mla	r6, fp, ip, r6
 801f400:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f404:	fb09 f90c 	mul.w	r9, r9, ip
 801f408:	0a36      	lsrs	r6, r6, #8
 801f40a:	fb02 9303 	mla	r3, r2, r3, r9
 801f40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f410:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f414:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801f418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f41a:	fb00 330e 	mla	r3, r0, lr, r3
 801f41e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801f422:	fb0b 3b00 	mla	fp, fp, r0, r3
 801f426:	9b07      	ldr	r3, [sp, #28]
 801f428:	781b      	ldrb	r3, [r3, #0]
 801f42a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f42e:	fb03 f201 	mul.w	r2, r3, r1
 801f432:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f436:	1c53      	adds	r3, r2, #1
 801f438:	ea46 060b 	orr.w	r6, r6, fp
 801f43c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f440:	9a07      	ldr	r2, [sp, #28]
 801f442:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801f446:	7013      	strb	r3, [r2, #0]
 801f448:	7853      	ldrb	r3, [r2, #1]
 801f44a:	434b      	muls	r3, r1
 801f44c:	1c5a      	adds	r2, r3, #1
 801f44e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f452:	0a33      	lsrs	r3, r6, #8
 801f454:	0c36      	lsrs	r6, r6, #16
 801f456:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f45a:	9a07      	ldr	r2, [sp, #28]
 801f45c:	7053      	strb	r3, [r2, #1]
 801f45e:	7893      	ldrb	r3, [r2, #2]
 801f460:	4359      	muls	r1, r3
 801f462:	1c4b      	adds	r3, r1, #1
 801f464:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801f468:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801f46c:	7096      	strb	r6, [r2, #2]
 801f46e:	9b07      	ldr	r3, [sp, #28]
 801f470:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f472:	3303      	adds	r3, #3
 801f474:	9307      	str	r3, [sp, #28]
 801f476:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f478:	4413      	add	r3, r2
 801f47a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f47c:	9329      	str	r3, [sp, #164]	; 0xa4
 801f47e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f480:	4413      	add	r3, r2
 801f482:	932a      	str	r3, [sp, #168]	; 0xa8
 801f484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f486:	3b01      	subs	r3, #1
 801f488:	9313      	str	r3, [sp, #76]	; 0x4c
 801f48a:	e6c5      	b.n	801f218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801f48c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f48e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f490:	4413      	add	r3, r2
 801f492:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f494:	9329      	str	r3, [sp, #164]	; 0xa4
 801f496:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f498:	4413      	add	r3, r2
 801f49a:	932a      	str	r3, [sp, #168]	; 0xa8
 801f49c:	9b08      	ldr	r3, [sp, #32]
 801f49e:	3b01      	subs	r3, #1
 801f4a0:	9308      	str	r3, [sp, #32]
 801f4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4a4:	3303      	adds	r3, #3
 801f4a6:	930b      	str	r3, [sp, #44]	; 0x2c
 801f4a8:	e66b      	b.n	801f182 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801f4aa:	f47f ae7d 	bne.w	801f1a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801f4ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	f340 8199 	ble.w	801f7e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801f4b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f4ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f4bc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f4c0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f4c4:	eef0 6a48 	vmov.f32	s13, s16
 801f4c8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f4cc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f4d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f4d4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801f4d8:	eef0 6a68 	vmov.f32	s13, s17
 801f4dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f4e0:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801f4e4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f4e8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f4ec:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f4f0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f4f4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f4f8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f4fc:	ee18 2a10 	vmov	r2, s16
 801f500:	eeb0 8a47 	vmov.f32	s16, s14
 801f504:	fb92 f3f3 	sdiv	r3, r2, r3
 801f508:	ee18 2a90 	vmov	r2, s17
 801f50c:	932b      	str	r3, [sp, #172]	; 0xac
 801f50e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f510:	eef0 8a67 	vmov.f32	s17, s15
 801f514:	fb92 f3f3 	sdiv	r3, r2, r3
 801f518:	932c      	str	r3, [sp, #176]	; 0xb0
 801f51a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f51c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f51e:	3b01      	subs	r3, #1
 801f520:	9312      	str	r3, [sp, #72]	; 0x48
 801f522:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f524:	bf08      	it	eq
 801f526:	4613      	moveq	r3, r2
 801f528:	9308      	str	r3, [sp, #32]
 801f52a:	e623      	b.n	801f174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f52c:	b158      	cbz	r0, 801f546 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801f52e:	5d32      	ldrb	r2, [r6, r4]
 801f530:	26ff      	movs	r6, #255	; 0xff
 801f532:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f536:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801f53a:	9209      	str	r2, [sp, #36]	; 0x24
 801f53c:	46b0      	mov	r8, r6
 801f53e:	e6a7      	b.n	801f290 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801f540:	26ff      	movs	r6, #255	; 0xff
 801f542:	46b2      	mov	sl, r6
 801f544:	e6a4      	b.n	801f290 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801f546:	26ff      	movs	r6, #255	; 0xff
 801f548:	46b2      	mov	sl, r6
 801f54a:	e7f7      	b.n	801f53c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 801f54c:	1c57      	adds	r7, r2, #1
 801f54e:	d18e      	bne.n	801f46e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f550:	4294      	cmp	r4, r2
 801f552:	dd8c      	ble.n	801f46e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f554:	1c5e      	adds	r6, r3, #1
 801f556:	db8a      	blt.n	801f46e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f558:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f55a:	429e      	cmp	r6, r3
 801f55c:	dd87      	ble.n	801f46e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f55e:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801f562:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f566:	e9cd 4600 	strd	r4, r6, [sp]
 801f56a:	462b      	mov	r3, r5
 801f56c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f56e:	9907      	ldr	r1, [sp, #28]
 801f570:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f572:	f7ff fc85 	bl	801ee80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801f576:	e77a      	b.n	801f46e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801f578:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f57a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801f57c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f580:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f582:	1409      	asrs	r1, r1, #16
 801f584:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801f588:	141b      	asrs	r3, r3, #16
 801f58a:	fb04 1303 	mla	r3, r4, r3, r1
 801f58e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f590:	18ce      	adds	r6, r1, r3
 801f592:	5ccb      	ldrb	r3, [r1, r3]
 801f594:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f598:	0e1f      	lsrs	r7, r3, #24
 801f59a:	2a00      	cmp	r2, #0
 801f59c:	f000 8114 	beq.w	801f7c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 801f5a0:	7871      	ldrb	r1, [r6, #1]
 801f5a2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801f5a6:	910e      	str	r1, [sp, #56]	; 0x38
 801f5a8:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801f5ac:	2800      	cmp	r0, #0
 801f5ae:	f000 8115 	beq.w	801f7dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 801f5b2:	1931      	adds	r1, r6, r4
 801f5b4:	5d36      	ldrb	r6, [r6, r4]
 801f5b6:	7849      	ldrb	r1, [r1, #1]
 801f5b8:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801f5bc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801f5c0:	960a      	str	r6, [sp, #40]	; 0x28
 801f5c2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f5c6:	0e0e      	lsrs	r6, r1, #24
 801f5c8:	910f      	str	r1, [sp, #60]	; 0x3c
 801f5ca:	b292      	uxth	r2, r2
 801f5cc:	b280      	uxth	r0, r0
 801f5ce:	fb02 fb00 	mul.w	fp, r2, r0
 801f5d2:	0112      	lsls	r2, r2, #4
 801f5d4:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801f5d8:	eba2 090b 	sub.w	r9, r2, fp
 801f5dc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801f5e0:	b280      	uxth	r0, r0
 801f5e2:	fa1f f989 	uxth.w	r9, r9
 801f5e6:	1a09      	subs	r1, r1, r0
 801f5e8:	fb09 f20e 	mul.w	r2, r9, lr
 801f5ec:	b289      	uxth	r1, r1
 801f5ee:	fb01 2207 	mla	r2, r1, r7, r2
 801f5f2:	fb00 220a 	mla	r2, r0, sl, r2
 801f5f6:	fb0b 2206 	mla	r2, fp, r6, r2
 801f5fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f5fe:	9213      	str	r2, [sp, #76]	; 0x4c
 801f600:	2a00      	cmp	r2, #0
 801f602:	f000 80d4 	beq.w	801f7ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 801f606:	2fff      	cmp	r7, #255	; 0xff
 801f608:	d01a      	beq.n	801f640 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 801f60a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f60e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f612:	fb07 fc0c 	mul.w	ip, r7, ip
 801f616:	435f      	muls	r7, r3
 801f618:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f61c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f620:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f624:	4463      	add	r3, ip
 801f626:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801f62a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801f62e:	0a1b      	lsrs	r3, r3, #8
 801f630:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f634:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f638:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f63c:	ea43 030c 	orr.w	r3, r3, ip
 801f640:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f644:	d01f      	beq.n	801f686 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 801f646:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f64a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f64e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f652:	fb0e f707 	mul.w	r7, lr, r7
 801f656:	fb0e fe0c 	mul.w	lr, lr, ip
 801f65a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f65e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f662:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f666:	44bc      	add	ip, r7
 801f668:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f66c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801f670:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f674:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f678:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f67c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f680:	ea4c 020e 	orr.w	r2, ip, lr
 801f684:	920e      	str	r2, [sp, #56]	; 0x38
 801f686:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f68a:	d01e      	beq.n	801f6ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 801f68c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f68e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801f692:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801f696:	fb0a fe0e 	mul.w	lr, sl, lr
 801f69a:	fb0a fa07 	mul.w	sl, sl, r7
 801f69e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f6a2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f6a6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f6aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f6ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f6b2:	44f4      	add	ip, lr
 801f6b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f6b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f6bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f6c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f6c4:	ea4c 020a 	orr.w	r2, ip, sl
 801f6c8:	920a      	str	r2, [sp, #40]	; 0x28
 801f6ca:	2eff      	cmp	r6, #255	; 0xff
 801f6cc:	d01c      	beq.n	801f708 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 801f6ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f6d0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801f6d4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801f6d8:	fb06 fe0e 	mul.w	lr, r6, lr
 801f6dc:	437e      	muls	r6, r7
 801f6de:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f6e2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f6e6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801f6ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f6ee:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801f6f2:	44f4      	add	ip, lr
 801f6f4:	0a36      	lsrs	r6, r6, #8
 801f6f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f6fa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f6fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f702:	ea4c 0206 	orr.w	r2, ip, r6
 801f706:	920f      	str	r2, [sp, #60]	; 0x3c
 801f708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f70a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f70e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f712:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801f716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f718:	fb09 f606 	mul.w	r6, r9, r6
 801f71c:	fb01 6607 	mla	r6, r1, r7, r6
 801f720:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801f724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f726:	fb00 6607 	mla	r6, r0, r7, r6
 801f72a:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801f72e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f730:	fb0b 6607 	mla	r6, fp, r7, r6
 801f734:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801f738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f73a:	fb09 f907 	mul.w	r9, r9, r7
 801f73e:	0a36      	lsrs	r6, r6, #8
 801f740:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f744:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f746:	fb01 9303 	mla	r3, r1, r3, r9
 801f74a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f74e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801f752:	fb00 330c 	mla	r3, r0, ip, r3
 801f756:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801f75a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f75c:	43da      	mvns	r2, r3
 801f75e:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 801f762:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f766:	b2d2      	uxtb	r2, r2
 801f768:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f76c:	fb03 f102 	mul.w	r1, r3, r2
 801f770:	ea46 060e 	orr.w	r6, r6, lr
 801f774:	1c4b      	adds	r3, r1, #1
 801f776:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f77a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801f77e:	f808 3c03 	strb.w	r3, [r8, #-3]
 801f782:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 801f786:	4353      	muls	r3, r2
 801f788:	1c59      	adds	r1, r3, #1
 801f78a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f78e:	0a33      	lsrs	r3, r6, #8
 801f790:	0c36      	lsrs	r6, r6, #16
 801f792:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f796:	f808 3c02 	strb.w	r3, [r8, #-2]
 801f79a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801f79e:	435a      	muls	r2, r3
 801f7a0:	1c53      	adds	r3, r2, #1
 801f7a2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f7a6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801f7aa:	f808 6c01 	strb.w	r6, [r8, #-1]
 801f7ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f7b0:	f108 0803 	add.w	r8, r8, #3
 801f7b4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f7b6:	4413      	add	r3, r2
 801f7b8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f7ba:	9329      	str	r3, [sp, #164]	; 0xa4
 801f7bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f7be:	4413      	add	r3, r2
 801f7c0:	932a      	str	r3, [sp, #168]	; 0xa8
 801f7c2:	9b07      	ldr	r3, [sp, #28]
 801f7c4:	3b01      	subs	r3, #1
 801f7c6:	e508      	b.n	801f1da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 801f7c8:	b158      	cbz	r0, 801f7e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 801f7ca:	5d31      	ldrb	r1, [r6, r4]
 801f7cc:	26ff      	movs	r6, #255	; 0xff
 801f7ce:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801f7d2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801f7d6:	910a      	str	r1, [sp, #40]	; 0x28
 801f7d8:	46b6      	mov	lr, r6
 801f7da:	e6f6      	b.n	801f5ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801f7dc:	26ff      	movs	r6, #255	; 0xff
 801f7de:	46b2      	mov	sl, r6
 801f7e0:	e6f3      	b.n	801f5ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801f7e2:	26ff      	movs	r6, #255	; 0xff
 801f7e4:	46b2      	mov	sl, r6
 801f7e6:	e7f7      	b.n	801f7d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 801f7e8:	b017      	add	sp, #92	; 0x5c
 801f7ea:	ecbd 8b08 	vpop	{d8-d11}
 801f7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f7f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801f7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7f8:	b08d      	sub	sp, #52	; 0x34
 801f7fa:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801f7fe:	9103      	str	r1, [sp, #12]
 801f800:	fb07 5803 	mla	r8, r7, r3, r5
 801f804:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801f808:	9803      	ldr	r0, [sp, #12]
 801f80a:	2f00      	cmp	r7, #0
 801f80c:	910b      	str	r1, [sp, #44]	; 0x2c
 801f80e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f812:	9903      	ldr	r1, [sp, #12]
 801f814:	9c03      	ldr	r4, [sp, #12]
 801f816:	eb02 0608 	add.w	r6, r2, r8
 801f81a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f81e:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801f822:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801f826:	7809      	ldrb	r1, [r1, #0]
 801f828:	7840      	ldrb	r0, [r0, #1]
 801f82a:	78a4      	ldrb	r4, [r4, #2]
 801f82c:	db51      	blt.n	801f8d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801f82e:	45be      	cmp	lr, r7
 801f830:	dd4f      	ble.n	801f8d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801f832:	2d00      	cmp	r5, #0
 801f834:	db49      	blt.n	801f8ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801f836:	42ab      	cmp	r3, r5
 801f838:	dd47      	ble.n	801f8ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801f83a:	f812 2008 	ldrb.w	r2, [r2, r8]
 801f83e:	9204      	str	r2, [sp, #16]
 801f840:	7872      	ldrb	r2, [r6, #1]
 801f842:	9205      	str	r2, [sp, #20]
 801f844:	78b2      	ldrb	r2, [r6, #2]
 801f846:	9206      	str	r2, [sp, #24]
 801f848:	1c6a      	adds	r2, r5, #1
 801f84a:	d449      	bmi.n	801f8e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801f84c:	4293      	cmp	r3, r2
 801f84e:	dd47      	ble.n	801f8e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801f850:	f1bc 0f00 	cmp.w	ip, #0
 801f854:	d044      	beq.n	801f8e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801f856:	7972      	ldrb	r2, [r6, #5]
 801f858:	f896 b003 	ldrb.w	fp, [r6, #3]
 801f85c:	f896 a004 	ldrb.w	sl, [r6, #4]
 801f860:	9201      	str	r2, [sp, #4]
 801f862:	3701      	adds	r7, #1
 801f864:	d444      	bmi.n	801f8f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801f866:	45be      	cmp	lr, r7
 801f868:	dd42      	ble.n	801f8f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801f86a:	f1b9 0f00 	cmp.w	r9, #0
 801f86e:	f000 80c1 	beq.w	801f9f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801f872:	2d00      	cmp	r5, #0
 801f874:	db38      	blt.n	801f8e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801f876:	42ab      	cmp	r3, r5
 801f878:	dd36      	ble.n	801f8e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801f87a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f87e:	f816 8002 	ldrb.w	r8, [r6, r2]
 801f882:	2203      	movs	r2, #3
 801f884:	fb03 6702 	mla	r7, r3, r2, r6
 801f888:	fb03 6202 	mla	r2, r3, r2, r6
 801f88c:	787f      	ldrb	r7, [r7, #1]
 801f88e:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f892:	9702      	str	r7, [sp, #8]
 801f894:	3501      	adds	r5, #1
 801f896:	d432      	bmi.n	801f8fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801f898:	42ab      	cmp	r3, r5
 801f89a:	dd30      	ble.n	801f8fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801f89c:	f1bc 0f00 	cmp.w	ip, #0
 801f8a0:	d031      	beq.n	801f906 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801f8a2:	2703      	movs	r7, #3
 801f8a4:	fb13 7207 	smlabb	r2, r3, r7, r7
 801f8a8:	5cb5      	ldrb	r5, [r6, r2]
 801f8aa:	fb03 6207 	mla	r2, r3, r7, r6
 801f8ae:	fb03 6307 	mla	r3, r3, r7, r6
 801f8b2:	7912      	ldrb	r2, [r2, #4]
 801f8b4:	795e      	ldrb	r6, [r3, #5]
 801f8b6:	f1bc 0f0f 	cmp.w	ip, #15
 801f8ba:	d927      	bls.n	801f90c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801f8bc:	4b53      	ldr	r3, [pc, #332]	; (801fa0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801f8be:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f8c2:	4a53      	ldr	r2, [pc, #332]	; (801fa10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801f8c4:	4853      	ldr	r0, [pc, #332]	; (801fa14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801f8c6:	f004 facf 	bl	8023e68 <__assert_func>
 801f8ca:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801f8ce:	9104      	str	r1, [sp, #16]
 801f8d0:	e7ba      	b.n	801f848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801f8d2:	9401      	str	r4, [sp, #4]
 801f8d4:	4682      	mov	sl, r0
 801f8d6:	468b      	mov	fp, r1
 801f8d8:	9104      	str	r1, [sp, #16]
 801f8da:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801f8de:	e7c0      	b.n	801f862 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801f8e0:	9401      	str	r4, [sp, #4]
 801f8e2:	4682      	mov	sl, r0
 801f8e4:	468b      	mov	fp, r1
 801f8e6:	e7bc      	b.n	801f862 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801f8e8:	46a6      	mov	lr, r4
 801f8ea:	9002      	str	r0, [sp, #8]
 801f8ec:	4688      	mov	r8, r1
 801f8ee:	e7d1      	b.n	801f894 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801f8f0:	4626      	mov	r6, r4
 801f8f2:	4602      	mov	r2, r0
 801f8f4:	460d      	mov	r5, r1
 801f8f6:	46a6      	mov	lr, r4
 801f8f8:	9002      	str	r0, [sp, #8]
 801f8fa:	4688      	mov	r8, r1
 801f8fc:	e7db      	b.n	801f8b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801f8fe:	4626      	mov	r6, r4
 801f900:	4602      	mov	r2, r0
 801f902:	460d      	mov	r5, r1
 801f904:	e7d7      	b.n	801f8b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801f906:	4626      	mov	r6, r4
 801f908:	4602      	mov	r2, r0
 801f90a:	460d      	mov	r5, r1
 801f90c:	f1b9 0f0f 	cmp.w	r9, #15
 801f910:	d8d4      	bhi.n	801f8bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801f912:	fa1f f38c 	uxth.w	r3, ip
 801f916:	fa1f fc89 	uxth.w	ip, r9
 801f91a:	fb03 f70c 	mul.w	r7, r3, ip
 801f91e:	011b      	lsls	r3, r3, #4
 801f920:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801f924:	9707      	str	r7, [sp, #28]
 801f926:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801f92a:	fa1f fc8c 	uxth.w	ip, ip
 801f92e:	eba7 070c 	sub.w	r7, r7, ip
 801f932:	b2bf      	uxth	r7, r7
 801f934:	9709      	str	r7, [sp, #36]	; 0x24
 801f936:	9f07      	ldr	r7, [sp, #28]
 801f938:	1bdb      	subs	r3, r3, r7
 801f93a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801f93e:	b29b      	uxth	r3, r3
 801f940:	9708      	str	r7, [sp, #32]
 801f942:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f944:	930a      	str	r3, [sp, #40]	; 0x28
 801f946:	ea6f 0907 	mvn.w	r9, r7
 801f94a:	fb03 fb0b 	mul.w	fp, r3, fp
 801f94e:	9f04      	ldr	r7, [sp, #16]
 801f950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f952:	fa5f f989 	uxtb.w	r9, r9
 801f956:	fb03 bb07 	mla	fp, r3, r7, fp
 801f95a:	9f07      	ldr	r7, [sp, #28]
 801f95c:	fb11 f109 	smulbb	r1, r1, r9
 801f960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f962:	fb0c b808 	mla	r8, ip, r8, fp
 801f966:	fb10 f009 	smulbb	r0, r0, r9
 801f96a:	fb14 f409 	smulbb	r4, r4, r9
 801f96e:	fb07 8805 	mla	r8, r7, r5, r8
 801f972:	9d08      	ldr	r5, [sp, #32]
 801f974:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f976:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f97a:	fb08 1805 	mla	r8, r8, r5, r1
 801f97e:	9d05      	ldr	r5, [sp, #20]
 801f980:	fa1f f888 	uxth.w	r8, r8
 801f984:	f108 0101 	add.w	r1, r8, #1
 801f988:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801f98c:	9903      	ldr	r1, [sp, #12]
 801f98e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f992:	f881 8000 	strb.w	r8, [r1]
 801f996:	fb03 f10a 	mul.w	r1, r3, sl
 801f99a:	fb07 1105 	mla	r1, r7, r5, r1
 801f99e:	9d02      	ldr	r5, [sp, #8]
 801f9a0:	fb0c 1105 	mla	r1, ip, r5, r1
 801f9a4:	9d07      	ldr	r5, [sp, #28]
 801f9a6:	fb05 1102 	mla	r1, r5, r2, r1
 801f9aa:	9a08      	ldr	r2, [sp, #32]
 801f9ac:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f9b0:	fb01 0102 	mla	r1, r1, r2, r0
 801f9b4:	9a03      	ldr	r2, [sp, #12]
 801f9b6:	b289      	uxth	r1, r1
 801f9b8:	1c48      	adds	r0, r1, #1
 801f9ba:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801f9be:	1209      	asrs	r1, r1, #8
 801f9c0:	7051      	strb	r1, [r2, #1]
 801f9c2:	9a01      	ldr	r2, [sp, #4]
 801f9c4:	4353      	muls	r3, r2
 801f9c6:	9a06      	ldr	r2, [sp, #24]
 801f9c8:	fb07 3702 	mla	r7, r7, r2, r3
 801f9cc:	9b08      	ldr	r3, [sp, #32]
 801f9ce:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801f9d2:	fb05 c606 	mla	r6, r5, r6, ip
 801f9d6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f9da:	fb06 4603 	mla	r6, r6, r3, r4
 801f9de:	9b03      	ldr	r3, [sp, #12]
 801f9e0:	b2b6      	uxth	r6, r6
 801f9e2:	f106 0e01 	add.w	lr, r6, #1
 801f9e6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801f9ea:	1236      	asrs	r6, r6, #8
 801f9ec:	709e      	strb	r6, [r3, #2]
 801f9ee:	b00d      	add	sp, #52	; 0x34
 801f9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9f4:	f1bc 0f0f 	cmp.w	ip, #15
 801f9f8:	f63f af60 	bhi.w	801f8bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801f9fc:	4626      	mov	r6, r4
 801f9fe:	4602      	mov	r2, r0
 801fa00:	460d      	mov	r5, r1
 801fa02:	46a6      	mov	lr, r4
 801fa04:	9002      	str	r0, [sp, #8]
 801fa06:	4688      	mov	r8, r1
 801fa08:	e783      	b.n	801f912 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801fa0a:	bf00      	nop
 801fa0c:	0802877f 	.word	0x0802877f
 801fa10:	08028c76 	.word	0x08028c76
 801fa14:	08028848 	.word	0x08028848

0801fa18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa1c:	ed2d 8b08 	vpush	{d8-d11}
 801fa20:	b0a1      	sub	sp, #132	; 0x84
 801fa22:	eeb0 aa40 	vmov.f32	s20, s0
 801fa26:	eef0 9a60 	vmov.f32	s19, s1
 801fa2a:	9307      	str	r3, [sp, #28]
 801fa2c:	eeb0 9a41 	vmov.f32	s18, s2
 801fa30:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 801fa34:	eeb0 8a62 	vmov.f32	s16, s5
 801fa38:	9210      	str	r2, [sp, #64]	; 0x40
 801fa3a:	eef0 8a43 	vmov.f32	s17, s6
 801fa3e:	9308      	str	r3, [sp, #32]
 801fa40:	eef0 ba44 	vmov.f32	s23, s8
 801fa44:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 801fa48:	eeb0 ba64 	vmov.f32	s22, s9
 801fa4c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801fa4e:	eef0 aa45 	vmov.f32	s21, s10
 801fa52:	930a      	str	r3, [sp, #40]	; 0x28
 801fa54:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 801fa58:	901f      	str	r0, [sp, #124]	; 0x7c
 801fa5a:	930f      	str	r3, [sp, #60]	; 0x3c
 801fa5c:	6850      	ldr	r0, [r2, #4]
 801fa5e:	910e      	str	r1, [sp, #56]	; 0x38
 801fa60:	6812      	ldr	r2, [r2, #0]
 801fa62:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 801fa66:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 801fa6a:	fb00 1303 	mla	r3, r0, r3, r1
 801fa6e:	9908      	ldr	r1, [sp, #32]
 801fa70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa74:	18d3      	adds	r3, r2, r3
 801fa76:	2203      	movs	r2, #3
 801fa78:	9309      	str	r3, [sp, #36]	; 0x24
 801fa7a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801fa7c:	681b      	ldr	r3, [r3, #0]
 801fa7e:	930c      	str	r3, [sp, #48]	; 0x30
 801fa80:	f06f 0304 	mvn.w	r3, #4
 801fa84:	fb11 3302 	smlabb	r3, r1, r2, r3
 801fa88:	930d      	str	r3, [sp, #52]	; 0x34
 801fa8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa8c:	43db      	mvns	r3, r3
 801fa8e:	b2db      	uxtb	r3, r3
 801fa90:	930b      	str	r3, [sp, #44]	; 0x2c
 801fa92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa94:	2b00      	cmp	r3, #0
 801fa96:	dc03      	bgt.n	801faa0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801fa98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	f340 81df 	ble.w	801fe5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801faa0:	9b07      	ldr	r3, [sp, #28]
 801faa2:	2b00      	cmp	r3, #0
 801faa4:	f340 80f2 	ble.w	801fc8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801faa8:	ea5f 4228 	movs.w	r2, r8, asr #16
 801faac:	ea4f 432b 	mov.w	r3, fp, asr #16
 801fab0:	d430      	bmi.n	801fb14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fab2:	1c51      	adds	r1, r2, #1
 801fab4:	9808      	ldr	r0, [sp, #32]
 801fab6:	4281      	cmp	r1, r0
 801fab8:	da2f      	bge.n	801fb1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801faba:	2b00      	cmp	r3, #0
 801fabc:	db2d      	blt.n	801fb1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801fabe:	1c59      	adds	r1, r3, #1
 801fac0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fac2:	4288      	cmp	r0, r1
 801fac4:	dd29      	ble.n	801fb1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801fac6:	9b07      	ldr	r3, [sp, #28]
 801fac8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801faca:	3b01      	subs	r3, #1
 801facc:	fb02 8203 	mla	r2, r2, r3, r8
 801fad0:	1412      	asrs	r2, r2, #16
 801fad2:	d42d      	bmi.n	801fb30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801fad4:	3201      	adds	r2, #1
 801fad6:	9908      	ldr	r1, [sp, #32]
 801fad8:	4291      	cmp	r1, r2
 801fada:	dd29      	ble.n	801fb30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801fadc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801fade:	fb02 b303 	mla	r3, r2, r3, fp
 801fae2:	141b      	asrs	r3, r3, #16
 801fae4:	d424      	bmi.n	801fb30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801fae6:	3301      	adds	r3, #1
 801fae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801faea:	429a      	cmp	r2, r3
 801faec:	dd20      	ble.n	801fb30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801faee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801faf0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801faf4:	1cde      	adds	r6, r3, #3
 801faf6:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 801fafa:	f1bc 0f00 	cmp.w	ip, #0
 801fafe:	f300 811f 	bgt.w	801fd40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 801fb02:	9b07      	ldr	r3, [sp, #28]
 801fb04:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fb0e:	4423      	add	r3, r4
 801fb10:	9309      	str	r3, [sp, #36]	; 0x24
 801fb12:	e0bd      	b.n	801fc90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801fb14:	1c57      	adds	r7, r2, #1
 801fb16:	f040 80ae 	bne.w	801fc76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801fb1a:	9908      	ldr	r1, [sp, #32]
 801fb1c:	428a      	cmp	r2, r1
 801fb1e:	f280 80aa 	bge.w	801fc76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801fb22:	1c5e      	adds	r6, r3, #1
 801fb24:	f2c0 80a7 	blt.w	801fc76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801fb28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb2a:	4293      	cmp	r3, r2
 801fb2c:	f280 80a3 	bge.w	801fc76 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801fb30:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801fb34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801fb36:	f1ba 0f00 	cmp.w	sl, #0
 801fb3a:	dde2      	ble.n	801fb02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801fb3c:	ea5f 4028 	movs.w	r0, r8, asr #16
 801fb40:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801fb44:	ea4f 412b 	mov.w	r1, fp, asr #16
 801fb48:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801fb4c:	f100 80df 	bmi.w	801fd0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801fb50:	1c45      	adds	r5, r0, #1
 801fb52:	9f08      	ldr	r7, [sp, #32]
 801fb54:	42af      	cmp	r7, r5
 801fb56:	f340 80dc 	ble.w	801fd12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801fb5a:	2900      	cmp	r1, #0
 801fb5c:	f2c0 80d9 	blt.w	801fd12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801fb60:	1c4d      	adds	r5, r1, #1
 801fb62:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fb64:	42af      	cmp	r7, r5
 801fb66:	f340 80d4 	ble.w	801fd12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801fb6a:	9d08      	ldr	r5, [sp, #32]
 801fb6c:	fb05 0101 	mla	r1, r5, r1, r0
 801fb70:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fb72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fb76:	1845      	adds	r5, r0, r1
 801fb78:	5c40      	ldrb	r0, [r0, r1]
 801fb7a:	792f      	ldrb	r7, [r5, #4]
 801fb7c:	7869      	ldrb	r1, [r5, #1]
 801fb7e:	9711      	str	r7, [sp, #68]	; 0x44
 801fb80:	796f      	ldrb	r7, [r5, #5]
 801fb82:	f895 e002 	ldrb.w	lr, [r5, #2]
 801fb86:	f895 9003 	ldrb.w	r9, [r5, #3]
 801fb8a:	9712      	str	r7, [sp, #72]	; 0x48
 801fb8c:	b17a      	cbz	r2, 801fbae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 801fb8e:	3505      	adds	r5, #5
 801fb90:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fb92:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fb94:	19ef      	adds	r7, r5, r7
 801fb96:	5d2d      	ldrb	r5, [r5, r4]
 801fb98:	787c      	ldrb	r4, [r7, #1]
 801fb9a:	9513      	str	r5, [sp, #76]	; 0x4c
 801fb9c:	9415      	str	r4, [sp, #84]	; 0x54
 801fb9e:	78bc      	ldrb	r4, [r7, #2]
 801fba0:	9417      	str	r4, [sp, #92]	; 0x5c
 801fba2:	78fc      	ldrb	r4, [r7, #3]
 801fba4:	9414      	str	r4, [sp, #80]	; 0x50
 801fba6:	793c      	ldrb	r4, [r7, #4]
 801fba8:	9416      	str	r4, [sp, #88]	; 0x58
 801fbaa:	797c      	ldrb	r4, [r7, #5]
 801fbac:	9418      	str	r4, [sp, #96]	; 0x60
 801fbae:	b29b      	uxth	r3, r3
 801fbb0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fbb2:	b292      	uxth	r2, r2
 801fbb4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801fbb8:	fb03 f702 	mul.w	r7, r3, r2
 801fbbc:	011b      	lsls	r3, r3, #4
 801fbbe:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 801fbc2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801fbc6:	1bdb      	subs	r3, r3, r7
 801fbc8:	b292      	uxth	r2, r2
 801fbca:	b29b      	uxth	r3, r3
 801fbcc:	ebac 0c02 	sub.w	ip, ip, r2
 801fbd0:	fb03 f909 	mul.w	r9, r3, r9
 801fbd4:	fa1f fc8c 	uxth.w	ip, ip
 801fbd8:	fb0c 9000 	mla	r0, ip, r0, r9
 801fbdc:	f896 9000 	ldrb.w	r9, [r6]
 801fbe0:	fb02 0004 	mla	r0, r2, r4, r0
 801fbe4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fbe6:	fb07 0004 	mla	r0, r7, r4, r0
 801fbea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fbec:	fb19 f904 	smulbb	r9, r9, r4
 801fbf0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fbf4:	fb00 9005 	mla	r0, r0, r5, r9
 801fbf8:	b280      	uxth	r0, r0
 801fbfa:	f100 0901 	add.w	r9, r0, #1
 801fbfe:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801fc02:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fc04:	4358      	muls	r0, r3
 801fc06:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc0a:	fb0c 0101 	mla	r1, ip, r1, r0
 801fc0e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fc10:	f886 9000 	strb.w	r9, [r6]
 801fc14:	fb02 1100 	mla	r1, r2, r0, r1
 801fc18:	9816      	ldr	r0, [sp, #88]	; 0x58
 801fc1a:	fb07 1100 	mla	r1, r7, r0, r1
 801fc1e:	7870      	ldrb	r0, [r6, #1]
 801fc20:	fb10 f004 	smulbb	r0, r0, r4
 801fc24:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fc28:	fb01 0105 	mla	r1, r1, r5, r0
 801fc2c:	b289      	uxth	r1, r1
 801fc2e:	1c48      	adds	r0, r1, #1
 801fc30:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801fc34:	1209      	asrs	r1, r1, #8
 801fc36:	7071      	strb	r1, [r6, #1]
 801fc38:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fc3a:	434b      	muls	r3, r1
 801fc3c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801fc3e:	fb0c 330e 	mla	r3, ip, lr, r3
 801fc42:	fb02 3201 	mla	r2, r2, r1, r3
 801fc46:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fc48:	fb07 2703 	mla	r7, r7, r3, r2
 801fc4c:	78b2      	ldrb	r2, [r6, #2]
 801fc4e:	fb12 f204 	smulbb	r2, r2, r4
 801fc52:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fc56:	fb07 2505 	mla	r5, r7, r5, r2
 801fc5a:	b2ad      	uxth	r5, r5
 801fc5c:	1c6f      	adds	r7, r5, #1
 801fc5e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801fc62:	122d      	asrs	r5, r5, #8
 801fc64:	70b5      	strb	r5, [r6, #2]
 801fc66:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801fc68:	3603      	adds	r6, #3
 801fc6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fc6e:	4498      	add	r8, r3
 801fc70:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801fc72:	449b      	add	fp, r3
 801fc74:	e75f      	b.n	801fb36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801fc76:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801fc78:	4498      	add	r8, r3
 801fc7a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801fc7c:	449b      	add	fp, r3
 801fc7e:	9b07      	ldr	r3, [sp, #28]
 801fc80:	3b01      	subs	r3, #1
 801fc82:	9307      	str	r3, [sp, #28]
 801fc84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc86:	3303      	adds	r3, #3
 801fc88:	9309      	str	r3, [sp, #36]	; 0x24
 801fc8a:	e709      	b.n	801faa0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801fc8c:	f47f af1b 	bne.w	801fac6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 801fc90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	f340 80e3 	ble.w	801fe5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801fc98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fc9c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fc9e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fca2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fca6:	eef0 6a48 	vmov.f32	s13, s16
 801fcaa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fcae:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fcb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fcb6:	ee16 8a90 	vmov	r8, s13
 801fcba:	eef0 6a68 	vmov.f32	s13, s17
 801fcbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fcc2:	ee16 ba90 	vmov	fp, s13
 801fcc6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fcca:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fcce:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fcd2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fcd6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fcda:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fcde:	ee18 2a10 	vmov	r2, s16
 801fce2:	eeb0 8a47 	vmov.f32	s16, s14
 801fce6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcea:	ee18 2a90 	vmov	r2, s17
 801fcee:	9335      	str	r3, [sp, #212]	; 0xd4
 801fcf0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fcf2:	eef0 8a67 	vmov.f32	s17, s15
 801fcf6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcfa:	9336      	str	r3, [sp, #216]	; 0xd8
 801fcfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fd00:	3b01      	subs	r3, #1
 801fd02:	930e      	str	r3, [sp, #56]	; 0x38
 801fd04:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fd06:	bf08      	it	eq
 801fd08:	4613      	moveq	r3, r2
 801fd0a:	9307      	str	r3, [sp, #28]
 801fd0c:	e6c1      	b.n	801fa92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801fd0e:	1c45      	adds	r5, r0, #1
 801fd10:	d1a9      	bne.n	801fc66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801fd12:	9c08      	ldr	r4, [sp, #32]
 801fd14:	42a0      	cmp	r0, r4
 801fd16:	daa6      	bge.n	801fc66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801fd18:	1c4c      	adds	r4, r1, #1
 801fd1a:	dba4      	blt.n	801fc66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801fd1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fd1e:	428c      	cmp	r4, r1
 801fd20:	dda1      	ble.n	801fc66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801fd22:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fd24:	9001      	str	r0, [sp, #4]
 801fd26:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fd28:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801fd2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd2e:	4631      	mov	r1, r6
 801fd30:	e9cd 2404 	strd	r2, r4, [sp, #16]
 801fd34:	9300      	str	r3, [sp, #0]
 801fd36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fd38:	9b08      	ldr	r3, [sp, #32]
 801fd3a:	f7ff fd5b 	bl	801f7f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801fd3e:	e792      	b.n	801fc66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801fd40:	ea4f 4228 	mov.w	r2, r8, asr #16
 801fd44:	9c08      	ldr	r4, [sp, #32]
 801fd46:	ea4f 402b 	mov.w	r0, fp, asr #16
 801fd4a:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801fd4e:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801fd52:	fb04 2000 	mla	r0, r4, r0, r2
 801fd56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fd58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fd5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fd5e:	4402      	add	r2, r0
 801fd60:	5c25      	ldrb	r5, [r4, r0]
 801fd62:	7894      	ldrb	r4, [r2, #2]
 801fd64:	7850      	ldrb	r0, [r2, #1]
 801fd66:	9411      	str	r4, [sp, #68]	; 0x44
 801fd68:	7954      	ldrb	r4, [r2, #5]
 801fd6a:	f892 a003 	ldrb.w	sl, [r2, #3]
 801fd6e:	f892 9004 	ldrb.w	r9, [r2, #4]
 801fd72:	9412      	str	r4, [sp, #72]	; 0x48
 801fd74:	b171      	cbz	r1, 801fd94 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801fd76:	3205      	adds	r2, #5
 801fd78:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fd7a:	1917      	adds	r7, r2, r4
 801fd7c:	5d12      	ldrb	r2, [r2, r4]
 801fd7e:	9219      	str	r2, [sp, #100]	; 0x64
 801fd80:	787a      	ldrb	r2, [r7, #1]
 801fd82:	921b      	str	r2, [sp, #108]	; 0x6c
 801fd84:	78ba      	ldrb	r2, [r7, #2]
 801fd86:	921d      	str	r2, [sp, #116]	; 0x74
 801fd88:	78fa      	ldrb	r2, [r7, #3]
 801fd8a:	921a      	str	r2, [sp, #104]	; 0x68
 801fd8c:	793a      	ldrb	r2, [r7, #4]
 801fd8e:	921c      	str	r2, [sp, #112]	; 0x70
 801fd90:	797a      	ldrb	r2, [r7, #5]
 801fd92:	921e      	str	r2, [sp, #120]	; 0x78
 801fd94:	b29b      	uxth	r3, r3
 801fd96:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801fd98:	b289      	uxth	r1, r1
 801fd9a:	3603      	adds	r6, #3
 801fd9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fda0:	fb03 f201 	mul.w	r2, r3, r1
 801fda4:	011b      	lsls	r3, r3, #4
 801fda6:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 801fdaa:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801fdae:	1a9b      	subs	r3, r3, r2
 801fdb0:	b289      	uxth	r1, r1
 801fdb2:	b29b      	uxth	r3, r3
 801fdb4:	1a7f      	subs	r7, r7, r1
 801fdb6:	fb03 fa0a 	mul.w	sl, r3, sl
 801fdba:	b2bf      	uxth	r7, r7
 801fdbc:	fb03 f909 	mul.w	r9, r3, r9
 801fdc0:	fb07 a505 	mla	r5, r7, r5, sl
 801fdc4:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 801fdc8:	fb07 9000 	mla	r0, r7, r0, r9
 801fdcc:	fb01 5504 	mla	r5, r1, r4, r5
 801fdd0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801fdd2:	fb02 5504 	mla	r5, r2, r4, r5
 801fdd6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fdd8:	fb1a fa04 	smulbb	sl, sl, r4
 801fddc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801fde0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801fde2:	fb05 a50e 	mla	r5, r5, lr, sl
 801fde6:	fb01 0004 	mla	r0, r1, r4, r0
 801fdea:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801fdec:	b2ad      	uxth	r5, r5
 801fdee:	fb02 0004 	mla	r0, r2, r4, r0
 801fdf2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fdf4:	f105 0a01 	add.w	sl, r5, #1
 801fdf8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fdfc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801fe00:	122d      	asrs	r5, r5, #8
 801fe02:	f806 5c06 	strb.w	r5, [r6, #-6]
 801fe06:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 801fe0a:	fb15 f504 	smulbb	r5, r5, r4
 801fe0e:	fb00 500e 	mla	r0, r0, lr, r5
 801fe12:	b280      	uxth	r0, r0
 801fe14:	1c45      	adds	r5, r0, #1
 801fe16:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fe1a:	1200      	asrs	r0, r0, #8
 801fe1c:	f806 0c05 	strb.w	r0, [r6, #-5]
 801fe20:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fe22:	4343      	muls	r3, r0
 801fe24:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fe26:	fb07 3300 	mla	r3, r7, r0, r3
 801fe2a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801fe2c:	fb01 3100 	mla	r1, r1, r0, r3
 801fe30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fe32:	fb02 1203 	mla	r2, r2, r3, r1
 801fe36:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 801fe3a:	fb11 f104 	smulbb	r1, r1, r4
 801fe3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fe42:	fb02 120e 	mla	r2, r2, lr, r1
 801fe46:	b292      	uxth	r2, r2
 801fe48:	1c53      	adds	r3, r2, #1
 801fe4a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fe4e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801fe50:	1212      	asrs	r2, r2, #8
 801fe52:	4498      	add	r8, r3
 801fe54:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801fe56:	f806 2c04 	strb.w	r2, [r6, #-4]
 801fe5a:	449b      	add	fp, r3
 801fe5c:	e64d      	b.n	801fafa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801fe5e:	b021      	add	sp, #132	; 0x84
 801fe60:	ecbd 8b08 	vpop	{d8-d11}
 801fe64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801fe68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe6c:	b085      	sub	sp, #20
 801fe6e:	784d      	ldrb	r5, [r1, #1]
 801fe70:	788e      	ldrb	r6, [r1, #2]
 801fe72:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801fe76:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801fe7a:	9403      	str	r4, [sp, #12]
 801fe7c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801fe80:	780c      	ldrb	r4, [r1, #0]
 801fe82:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801fe86:	fb07 ce03 	mla	lr, r7, r3, ip
 801fe8a:	2f00      	cmp	r7, #0
 801fe8c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fe90:	eb02 0b0e 	add.w	fp, r2, lr
 801fe94:	db56      	blt.n	801ff44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801fe96:	45b9      	cmp	r9, r7
 801fe98:	dd54      	ble.n	801ff44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801fe9a:	f1bc 0f00 	cmp.w	ip, #0
 801fe9e:	db4d      	blt.n	801ff3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801fea0:	4563      	cmp	r3, ip
 801fea2:	dd4b      	ble.n	801ff3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801fea4:	f812 200e 	ldrb.w	r2, [r2, lr]
 801fea8:	9200      	str	r2, [sp, #0]
 801feaa:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801feae:	9201      	str	r2, [sp, #4]
 801feb0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801feb4:	9202      	str	r2, [sp, #8]
 801feb6:	f11c 0201 	adds.w	r2, ip, #1
 801feba:	d44a      	bmi.n	801ff52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801febc:	4293      	cmp	r3, r2
 801febe:	dd48      	ble.n	801ff52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801fec0:	2800      	cmp	r0, #0
 801fec2:	d046      	beq.n	801ff52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801fec4:	f89b e003 	ldrb.w	lr, [fp, #3]
 801fec8:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801fecc:	f89b a005 	ldrb.w	sl, [fp, #5]
 801fed0:	3701      	adds	r7, #1
 801fed2:	d446      	bmi.n	801ff62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801fed4:	45b9      	cmp	r9, r7
 801fed6:	dd44      	ble.n	801ff62 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801fed8:	9a03      	ldr	r2, [sp, #12]
 801feda:	2a00      	cmp	r2, #0
 801fedc:	d045      	beq.n	801ff6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801fede:	f1bc 0f00 	cmp.w	ip, #0
 801fee2:	db3a      	blt.n	801ff5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801fee4:	4563      	cmp	r3, ip
 801fee6:	dd38      	ble.n	801ff5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801fee8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801feec:	f04f 0903 	mov.w	r9, #3
 801fef0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801fef4:	fb03 b209 	mla	r2, r3, r9, fp
 801fef8:	fb03 b909 	mla	r9, r3, r9, fp
 801fefc:	7852      	ldrb	r2, [r2, #1]
 801fefe:	f899 9002 	ldrb.w	r9, [r9, #2]
 801ff02:	f11c 0c01 	adds.w	ip, ip, #1
 801ff06:	d40d      	bmi.n	801ff24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801ff08:	4563      	cmp	r3, ip
 801ff0a:	dd0b      	ble.n	801ff24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801ff0c:	b160      	cbz	r0, 801ff28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801ff0e:	2603      	movs	r6, #3
 801ff10:	fb13 6406 	smlabb	r4, r3, r6, r6
 801ff14:	fb03 b506 	mla	r5, r3, r6, fp
 801ff18:	fb03 b306 	mla	r3, r3, r6, fp
 801ff1c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801ff20:	792d      	ldrb	r5, [r5, #4]
 801ff22:	795e      	ldrb	r6, [r3, #5]
 801ff24:	280f      	cmp	r0, #15
 801ff26:	d802      	bhi.n	801ff2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801ff28:	9b03      	ldr	r3, [sp, #12]
 801ff2a:	2b0f      	cmp	r3, #15
 801ff2c:	d922      	bls.n	801ff74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801ff2e:	4b2f      	ldr	r3, [pc, #188]	; (801ffec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801ff30:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ff34:	4a2e      	ldr	r2, [pc, #184]	; (801fff0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801ff36:	482f      	ldr	r0, [pc, #188]	; (801fff4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801ff38:	f003 ff96 	bl	8023e68 <__assert_func>
 801ff3c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801ff40:	9400      	str	r4, [sp, #0]
 801ff42:	e7b8      	b.n	801feb6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801ff44:	46b2      	mov	sl, r6
 801ff46:	46a8      	mov	r8, r5
 801ff48:	46a6      	mov	lr, r4
 801ff4a:	9400      	str	r4, [sp, #0]
 801ff4c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801ff50:	e7be      	b.n	801fed0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801ff52:	46b2      	mov	sl, r6
 801ff54:	46a8      	mov	r8, r5
 801ff56:	46a6      	mov	lr, r4
 801ff58:	e7ba      	b.n	801fed0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801ff5a:	46b1      	mov	r9, r6
 801ff5c:	462a      	mov	r2, r5
 801ff5e:	4627      	mov	r7, r4
 801ff60:	e7cf      	b.n	801ff02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801ff62:	46b1      	mov	r9, r6
 801ff64:	462a      	mov	r2, r5
 801ff66:	4627      	mov	r7, r4
 801ff68:	e7dc      	b.n	801ff24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801ff6a:	280f      	cmp	r0, #15
 801ff6c:	d8df      	bhi.n	801ff2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801ff6e:	46b1      	mov	r9, r6
 801ff70:	462a      	mov	r2, r5
 801ff72:	4627      	mov	r7, r4
 801ff74:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801ff78:	b280      	uxth	r0, r0
 801ff7a:	fb00 f30b 	mul.w	r3, r0, fp
 801ff7e:	0100      	lsls	r0, r0, #4
 801ff80:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801ff84:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801ff88:	1ac0      	subs	r0, r0, r3
 801ff8a:	fa1f fb8b 	uxth.w	fp, fp
 801ff8e:	b280      	uxth	r0, r0
 801ff90:	ebac 0c0b 	sub.w	ip, ip, fp
 801ff94:	9003      	str	r0, [sp, #12]
 801ff96:	fa1f fc8c 	uxth.w	ip, ip
 801ff9a:	fb00 fe0e 	mul.w	lr, r0, lr
 801ff9e:	9800      	ldr	r0, [sp, #0]
 801ffa0:	fb0c ee00 	mla	lr, ip, r0, lr
 801ffa4:	9803      	ldr	r0, [sp, #12]
 801ffa6:	fb00 f808 	mul.w	r8, r0, r8
 801ffaa:	9801      	ldr	r0, [sp, #4]
 801ffac:	fb0b ee07 	mla	lr, fp, r7, lr
 801ffb0:	fb0c 8800 	mla	r8, ip, r0, r8
 801ffb4:	fb03 ee04 	mla	lr, r3, r4, lr
 801ffb8:	fb0b 8202 	mla	r2, fp, r2, r8
 801ffbc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ffc0:	fb03 2505 	mla	r5, r3, r5, r2
 801ffc4:	9a03      	ldr	r2, [sp, #12]
 801ffc6:	f881 e000 	strb.w	lr, [r1]
 801ffca:	fb02 f00a 	mul.w	r0, r2, sl
 801ffce:	9a02      	ldr	r2, [sp, #8]
 801ffd0:	122d      	asrs	r5, r5, #8
 801ffd2:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ffd6:	704d      	strb	r5, [r1, #1]
 801ffd8:	fb0b c909 	mla	r9, fp, r9, ip
 801ffdc:	fb03 9606 	mla	r6, r3, r6, r9
 801ffe0:	1236      	asrs	r6, r6, #8
 801ffe2:	708e      	strb	r6, [r1, #2]
 801ffe4:	b005      	add	sp, #20
 801ffe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffea:	bf00      	nop
 801ffec:	0802877f 	.word	0x0802877f
 801fff0:	08028c76 	.word	0x08028c76
 801fff4:	08028848 	.word	0x08028848

0801fff8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fffc:	ed2d 8b0a 	vpush	{d8-d12}
 8020000:	b09d      	sub	sp, #116	; 0x74
 8020002:	eeb0 aa40 	vmov.f32	s20, s0
 8020006:	eef0 9a60 	vmov.f32	s19, s1
 802000a:	9306      	str	r3, [sp, #24]
 802000c:	eeb0 9a41 	vmov.f32	s18, s2
 8020010:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8020014:	eeb0 8a62 	vmov.f32	s16, s5
 8020018:	901b      	str	r0, [sp, #108]	; 0x6c
 802001a:	eef0 8a43 	vmov.f32	s17, s6
 802001e:	9307      	str	r3, [sp, #28]
 8020020:	eeb0 ca44 	vmov.f32	s24, s8
 8020024:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8020028:	eef0 ba64 	vmov.f32	s23, s9
 802002c:	eeb0 ba45 	vmov.f32	s22, s10
 8020030:	9309      	str	r3, [sp, #36]	; 0x24
 8020032:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020036:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 802003a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802003c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020040:	6850      	ldr	r0, [r2, #4]
 8020042:	6812      	ldr	r2, [r2, #0]
 8020044:	fb00 1303 	mla	r3, r0, r3, r1
 8020048:	9907      	ldr	r1, [sp, #28]
 802004a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802004e:	18d3      	adds	r3, r2, r3
 8020050:	2203      	movs	r2, #3
 8020052:	9308      	str	r3, [sp, #32]
 8020054:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8020056:	681b      	ldr	r3, [r3, #0]
 8020058:	930a      	str	r3, [sp, #40]	; 0x28
 802005a:	f06f 0304 	mvn.w	r3, #4
 802005e:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8020062:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020066:	930b      	str	r3, [sp, #44]	; 0x2c
 8020068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802006a:	2b00      	cmp	r3, #0
 802006c:	dc03      	bgt.n	8020076 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802006e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020070:	2b00      	cmp	r3, #0
 8020072:	f340 8193 	ble.w	802039c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8020076:	9b06      	ldr	r3, [sp, #24]
 8020078:	2b00      	cmp	r3, #0
 802007a:	f340 80d0 	ble.w	802021e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 802007e:	1432      	asrs	r2, r6, #16
 8020080:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020084:	d42f      	bmi.n	80200e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8020086:	1c51      	adds	r1, r2, #1
 8020088:	9807      	ldr	r0, [sp, #28]
 802008a:	4281      	cmp	r1, r0
 802008c:	da2e      	bge.n	80200ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802008e:	2b00      	cmp	r3, #0
 8020090:	db2c      	blt.n	80200ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020092:	1c59      	adds	r1, r3, #1
 8020094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020096:	4288      	cmp	r0, r1
 8020098:	dd28      	ble.n	80200ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802009a:	9b06      	ldr	r3, [sp, #24]
 802009c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802009e:	3b01      	subs	r3, #1
 80200a0:	fb02 6203 	mla	r2, r2, r3, r6
 80200a4:	1412      	asrs	r2, r2, #16
 80200a6:	d42c      	bmi.n	8020102 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80200a8:	3201      	adds	r2, #1
 80200aa:	9907      	ldr	r1, [sp, #28]
 80200ac:	4291      	cmp	r1, r2
 80200ae:	dd28      	ble.n	8020102 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80200b0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80200b2:	fb02 5303 	mla	r3, r2, r3, r5
 80200b6:	141b      	asrs	r3, r3, #16
 80200b8:	d423      	bmi.n	8020102 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80200ba:	3301      	adds	r3, #1
 80200bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80200be:	429a      	cmp	r2, r3
 80200c0:	dd1f      	ble.n	8020102 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80200c2:	9b08      	ldr	r3, [sp, #32]
 80200c4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80200c8:	f103 0c03 	add.w	ip, r3, #3
 80200cc:	f1be 0f00 	cmp.w	lr, #0
 80200d0:	f300 80fa 	bgt.w	80202c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80200d4:	9b06      	ldr	r3, [sp, #24]
 80200d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80200da:	9b08      	ldr	r3, [sp, #32]
 80200dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80200e0:	4423      	add	r3, r4
 80200e2:	9308      	str	r3, [sp, #32]
 80200e4:	e09d      	b.n	8020222 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80200e6:	1c51      	adds	r1, r2, #1
 80200e8:	f040 808e 	bne.w	8020208 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80200ec:	9907      	ldr	r1, [sp, #28]
 80200ee:	428a      	cmp	r2, r1
 80200f0:	f280 808a 	bge.w	8020208 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80200f4:	1c5f      	adds	r7, r3, #1
 80200f6:	f2c0 8087 	blt.w	8020208 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80200fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80200fc:	4293      	cmp	r3, r2
 80200fe:	f280 8083 	bge.w	8020208 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020102:	9f06      	ldr	r7, [sp, #24]
 8020104:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020108:	2f00      	cmp	r7, #0
 802010a:	dde3      	ble.n	80200d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 802010c:	1432      	asrs	r2, r6, #16
 802010e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020112:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020116:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 802011a:	f100 80bf 	bmi.w	802029c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 802011e:	1c50      	adds	r0, r2, #1
 8020120:	9c07      	ldr	r4, [sp, #28]
 8020122:	4284      	cmp	r4, r0
 8020124:	f340 80bc 	ble.w	80202a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020128:	2b00      	cmp	r3, #0
 802012a:	f2c0 80b9 	blt.w	80202a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 802012e:	1c58      	adds	r0, r3, #1
 8020130:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020132:	4284      	cmp	r4, r0
 8020134:	f340 80b4 	ble.w	80202a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020138:	9807      	ldr	r0, [sp, #28]
 802013a:	fb00 2303 	mla	r3, r0, r3, r2
 802013e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020140:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020142:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020146:	441a      	add	r2, r3
 8020148:	f810 c003 	ldrb.w	ip, [r0, r3]
 802014c:	7953      	ldrb	r3, [r2, #5]
 802014e:	7850      	ldrb	r0, [r2, #1]
 8020150:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020154:	f892 9003 	ldrb.w	r9, [r2, #3]
 8020158:	f892 8004 	ldrb.w	r8, [r2, #4]
 802015c:	930e      	str	r3, [sp, #56]	; 0x38
 802015e:	f1bb 0f00 	cmp.w	fp, #0
 8020162:	d00f      	beq.n	8020184 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8020164:	3205      	adds	r2, #5
 8020166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020168:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802016a:	18d3      	adds	r3, r2, r3
 802016c:	5d12      	ldrb	r2, [r2, r4]
 802016e:	920f      	str	r2, [sp, #60]	; 0x3c
 8020170:	785a      	ldrb	r2, [r3, #1]
 8020172:	9211      	str	r2, [sp, #68]	; 0x44
 8020174:	789a      	ldrb	r2, [r3, #2]
 8020176:	9213      	str	r2, [sp, #76]	; 0x4c
 8020178:	78da      	ldrb	r2, [r3, #3]
 802017a:	9210      	str	r2, [sp, #64]	; 0x40
 802017c:	791a      	ldrb	r2, [r3, #4]
 802017e:	795b      	ldrb	r3, [r3, #5]
 8020180:	9212      	str	r2, [sp, #72]	; 0x48
 8020182:	9314      	str	r3, [sp, #80]	; 0x50
 8020184:	b28b      	uxth	r3, r1
 8020186:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020188:	fa1f f28b 	uxth.w	r2, fp
 802018c:	fb03 fb02 	mul.w	fp, r3, r2
 8020190:	011b      	lsls	r3, r3, #4
 8020192:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8020196:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 802019a:	eba3 030b 	sub.w	r3, r3, fp
 802019e:	b292      	uxth	r2, r2
 80201a0:	b29b      	uxth	r3, r3
 80201a2:	1a89      	subs	r1, r1, r2
 80201a4:	fb03 f808 	mul.w	r8, r3, r8
 80201a8:	b289      	uxth	r1, r1
 80201aa:	fb03 f909 	mul.w	r9, r3, r9
 80201ae:	fb01 8800 	mla	r8, r1, r0, r8
 80201b2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80201b4:	fb01 990c 	mla	r9, r1, ip, r9
 80201b8:	fb02 8800 	mla	r8, r2, r0, r8
 80201bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80201be:	fb02 9904 	mla	r9, r2, r4, r9
 80201c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80201c4:	fb0b 8800 	mla	r8, fp, r0, r8
 80201c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80201ca:	fb0b 9904 	mla	r9, fp, r4, r9
 80201ce:	4343      	muls	r3, r0
 80201d0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80201d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80201d8:	fb01 330e 	mla	r3, r1, lr, r3
 80201dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80201de:	f88a 9000 	strb.w	r9, [sl]
 80201e2:	fb02 3201 	mla	r2, r2, r1, r3
 80201e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80201e8:	f88a 8001 	strb.w	r8, [sl, #1]
 80201ec:	fb0b 2b03 	mla	fp, fp, r3, r2
 80201f0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80201f4:	f88a b002 	strb.w	fp, [sl, #2]
 80201f8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80201fa:	f10a 0a03 	add.w	sl, sl, #3
 80201fe:	3f01      	subs	r7, #1
 8020200:	441e      	add	r6, r3
 8020202:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020204:	441d      	add	r5, r3
 8020206:	e77f      	b.n	8020108 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020208:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802020a:	441e      	add	r6, r3
 802020c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802020e:	441d      	add	r5, r3
 8020210:	9b06      	ldr	r3, [sp, #24]
 8020212:	3b01      	subs	r3, #1
 8020214:	9306      	str	r3, [sp, #24]
 8020216:	9b08      	ldr	r3, [sp, #32]
 8020218:	3303      	adds	r3, #3
 802021a:	9308      	str	r3, [sp, #32]
 802021c:	e72b      	b.n	8020076 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802021e:	f47f af3c 	bne.w	802009a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8020222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020224:	2b00      	cmp	r3, #0
 8020226:	f340 80b9 	ble.w	802039c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802022a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802022e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020230:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020234:	eef0 6a48 	vmov.f32	s13, s16
 8020238:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802023c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020240:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020244:	ee16 6a90 	vmov	r6, s13
 8020248:	eef0 6a68 	vmov.f32	s13, s17
 802024c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020250:	ee16 5a90 	vmov	r5, s13
 8020254:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020258:	ee69 7a27 	vmul.f32	s15, s18, s15
 802025c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020260:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020264:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020268:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802026c:	ee18 2a10 	vmov	r2, s16
 8020270:	eeb0 8a47 	vmov.f32	s16, s14
 8020274:	fb92 f3f3 	sdiv	r3, r2, r3
 8020278:	ee18 2a90 	vmov	r2, s17
 802027c:	9333      	str	r3, [sp, #204]	; 0xcc
 802027e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020280:	eef0 8a67 	vmov.f32	s17, s15
 8020284:	fb92 f3f3 	sdiv	r3, r2, r3
 8020288:	9334      	str	r3, [sp, #208]	; 0xd0
 802028a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802028c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802028e:	3b01      	subs	r3, #1
 8020290:	930c      	str	r3, [sp, #48]	; 0x30
 8020292:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020294:	bf08      	it	eq
 8020296:	4613      	moveq	r3, r2
 8020298:	9306      	str	r3, [sp, #24]
 802029a:	e6e5      	b.n	8020068 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802029c:	1c54      	adds	r4, r2, #1
 802029e:	d1ab      	bne.n	80201f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80202a0:	9807      	ldr	r0, [sp, #28]
 80202a2:	4282      	cmp	r2, r0
 80202a4:	daa8      	bge.n	80201f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80202a6:	1c58      	adds	r0, r3, #1
 80202a8:	dba6      	blt.n	80201f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80202aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80202ac:	4298      	cmp	r0, r3
 80202ae:	dda3      	ble.n	80201f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80202b0:	9000      	str	r0, [sp, #0]
 80202b2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80202b4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80202b8:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 80202bc:	9b07      	ldr	r3, [sp, #28]
 80202be:	4651      	mov	r1, sl
 80202c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80202c2:	f7ff fdd1 	bl	801fe68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80202c6:	e797      	b.n	80201f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80202c8:	1431      	asrs	r1, r6, #16
 80202ca:	9c07      	ldr	r4, [sp, #28]
 80202cc:	1428      	asrs	r0, r5, #16
 80202ce:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80202d2:	f3c6 3303 	ubfx	r3, r6, #12, #4
 80202d6:	fb04 1000 	mla	r0, r4, r0, r1
 80202da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80202dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80202de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80202e2:	4401      	add	r1, r0
 80202e4:	5c20      	ldrb	r0, [r4, r0]
 80202e6:	f891 8002 	ldrb.w	r8, [r1, #2]
 80202ea:	900e      	str	r0, [sp, #56]	; 0x38
 80202ec:	f891 a003 	ldrb.w	sl, [r1, #3]
 80202f0:	7848      	ldrb	r0, [r1, #1]
 80202f2:	f891 9004 	ldrb.w	r9, [r1, #4]
 80202f6:	f891 b005 	ldrb.w	fp, [r1, #5]
 80202fa:	b172      	cbz	r2, 802031a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 80202fc:	3105      	adds	r1, #5
 80202fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020300:	190f      	adds	r7, r1, r4
 8020302:	5d09      	ldrb	r1, [r1, r4]
 8020304:	9115      	str	r1, [sp, #84]	; 0x54
 8020306:	7879      	ldrb	r1, [r7, #1]
 8020308:	9117      	str	r1, [sp, #92]	; 0x5c
 802030a:	78b9      	ldrb	r1, [r7, #2]
 802030c:	9119      	str	r1, [sp, #100]	; 0x64
 802030e:	78f9      	ldrb	r1, [r7, #3]
 8020310:	9116      	str	r1, [sp, #88]	; 0x58
 8020312:	7939      	ldrb	r1, [r7, #4]
 8020314:	9118      	str	r1, [sp, #96]	; 0x60
 8020316:	7979      	ldrb	r1, [r7, #5]
 8020318:	911a      	str	r1, [sp, #104]	; 0x68
 802031a:	b29b      	uxth	r3, r3
 802031c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802031e:	b292      	uxth	r2, r2
 8020320:	f10c 0c03 	add.w	ip, ip, #3
 8020324:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020328:	fb03 f102 	mul.w	r1, r3, r2
 802032c:	011b      	lsls	r3, r3, #4
 802032e:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8020332:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020336:	1a5b      	subs	r3, r3, r1
 8020338:	b292      	uxth	r2, r2
 802033a:	b29b      	uxth	r3, r3
 802033c:	1abf      	subs	r7, r7, r2
 802033e:	fb03 f909 	mul.w	r9, r3, r9
 8020342:	b2bf      	uxth	r7, r7
 8020344:	fb03 fa0a 	mul.w	sl, r3, sl
 8020348:	fb03 f30b 	mul.w	r3, r3, fp
 802034c:	fb07 9900 	mla	r9, r7, r0, r9
 8020350:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020352:	fb07 aa04 	mla	sl, r7, r4, sl
 8020356:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020358:	fb02 9900 	mla	r9, r2, r0, r9
 802035c:	9818      	ldr	r0, [sp, #96]	; 0x60
 802035e:	fb07 3308 	mla	r3, r7, r8, r3
 8020362:	fb01 9900 	mla	r9, r1, r0, r9
 8020366:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020368:	fb02 aa04 	mla	sl, r2, r4, sl
 802036c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802036e:	fb02 3200 	mla	r2, r2, r0, r3
 8020372:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020374:	fb01 aa04 	mla	sl, r1, r4, sl
 8020378:	ea4f 2929 	mov.w	r9, r9, asr #8
 802037c:	fb01 2103 	mla	r1, r1, r3, r2
 8020380:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020382:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020386:	f80c 9c05 	strb.w	r9, [ip, #-5]
 802038a:	1209      	asrs	r1, r1, #8
 802038c:	441e      	add	r6, r3
 802038e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020390:	f80c ac06 	strb.w	sl, [ip, #-6]
 8020394:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8020398:	441d      	add	r5, r3
 802039a:	e697      	b.n	80200cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802039c:	b01d      	add	sp, #116	; 0x74
 802039e:	ecbd 8b0a 	vpop	{d8-d12}
 80203a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080203a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80203a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203ac:	b085      	sub	sp, #20
 80203ae:	7888      	ldrb	r0, [r1, #2]
 80203b0:	4691      	mov	r9, r2
 80203b2:	9000      	str	r0, [sp, #0]
 80203b4:	7848      	ldrb	r0, [r1, #1]
 80203b6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80203ba:	9001      	str	r0, [sp, #4]
 80203bc:	7808      	ldrb	r0, [r1, #0]
 80203be:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80203c2:	9002      	str	r0, [sp, #8]
 80203c4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80203c8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80203cc:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80203d0:	fb04 c603 	mla	r6, r4, r3, ip
 80203d4:	2c00      	cmp	r4, #0
 80203d6:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80203da:	9a00      	ldr	r2, [sp, #0]
 80203dc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80203e0:	9a01      	ldr	r2, [sp, #4]
 80203e2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80203e6:	db3a      	blt.n	802045e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80203e8:	45a0      	cmp	r8, r4
 80203ea:	dd38      	ble.n	802045e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80203ec:	f1bc 0f00 	cmp.w	ip, #0
 80203f0:	db33      	blt.n	802045a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80203f2:	4563      	cmp	r3, ip
 80203f4:	dd31      	ble.n	802045a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80203f6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80203fa:	f11c 0601 	adds.w	r6, ip, #1
 80203fe:	d431      	bmi.n	8020464 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8020400:	42b3      	cmp	r3, r6
 8020402:	dd2f      	ble.n	8020464 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8020404:	b375      	cbz	r5, 8020464 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8020406:	f8de 6004 	ldr.w	r6, [lr, #4]
 802040a:	3401      	adds	r4, #1
 802040c:	d42e      	bmi.n	802046c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 802040e:	45a0      	cmp	r8, r4
 8020410:	dd2c      	ble.n	802046c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8020412:	b35f      	cbz	r7, 802046c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8020414:	f1bc 0f00 	cmp.w	ip, #0
 8020418:	db26      	blt.n	8020468 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802041a:	4563      	cmp	r3, ip
 802041c:	dd24      	ble.n	8020468 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802041e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8020422:	f11c 0c01 	adds.w	ip, ip, #1
 8020426:	d405      	bmi.n	8020434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020428:	4563      	cmp	r3, ip
 802042a:	dd03      	ble.n	8020434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802042c:	b115      	cbz	r5, 8020434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802042e:	3301      	adds	r3, #1
 8020430:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8020434:	2d0f      	cmp	r5, #15
 8020436:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802043a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802043e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020442:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020446:	d801      	bhi.n	802044c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8020448:	2f0f      	cmp	r7, #15
 802044a:	d911      	bls.n	8020470 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 802044c:	4b80      	ldr	r3, [pc, #512]	; (8020650 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802044e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020452:	4a80      	ldr	r2, [pc, #512]	; (8020654 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8020454:	4880      	ldr	r0, [pc, #512]	; (8020658 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8020456:	f003 fd07 	bl	8023e68 <__assert_func>
 802045a:	4602      	mov	r2, r0
 802045c:	e7cd      	b.n	80203fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 802045e:	4606      	mov	r6, r0
 8020460:	4602      	mov	r2, r0
 8020462:	e7d2      	b.n	802040a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8020464:	4606      	mov	r6, r0
 8020466:	e7d0      	b.n	802040a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8020468:	4604      	mov	r4, r0
 802046a:	e7da      	b.n	8020422 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 802046c:	4604      	mov	r4, r0
 802046e:	e7e1      	b.n	8020434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020470:	b2ab      	uxth	r3, r5
 8020472:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020476:	b2bf      	uxth	r7, r7
 8020478:	fb03 fe07 	mul.w	lr, r3, r7
 802047c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8020480:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020484:	eba3 0c0e 	sub.w	ip, r3, lr
 8020488:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802048c:	b2bf      	uxth	r7, r7
 802048e:	fa1f fc8c 	uxth.w	ip, ip
 8020492:	eba5 0507 	sub.w	r5, r5, r7
 8020496:	fb0c f30a 	mul.w	r3, ip, sl
 802049a:	b2ad      	uxth	r5, r5
 802049c:	fb05 330b 	mla	r3, r5, fp, r3
 80204a0:	fb07 3309 	mla	r3, r7, r9, r3
 80204a4:	fb0e 3308 	mla	r3, lr, r8, r3
 80204a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80204ac:	9303      	str	r3, [sp, #12]
 80204ae:	d018      	beq.n	80204e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 80204b0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80204b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80204b8:	fb0b f303 	mul.w	r3, fp, r3
 80204bc:	fb0b fb02 	mul.w	fp, fp, r2
 80204c0:	0a1a      	lsrs	r2, r3, #8
 80204c2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80204c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80204ca:	441a      	add	r2, r3
 80204cc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80204d0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80204d4:	0a12      	lsrs	r2, r2, #8
 80204d6:	0a1b      	lsrs	r3, r3, #8
 80204d8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80204dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80204e0:	431a      	orrs	r2, r3
 80204e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80204e6:	d019      	beq.n	802051c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 80204e8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80204ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80204f0:	fb0a fb0b 	mul.w	fp, sl, fp
 80204f4:	fb0a fa06 	mul.w	sl, sl, r6
 80204f8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80204fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020500:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020504:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020508:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802050c:	445e      	add	r6, fp
 802050e:	0a1b      	lsrs	r3, r3, #8
 8020510:	0a36      	lsrs	r6, r6, #8
 8020512:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020516:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802051a:	431e      	orrs	r6, r3
 802051c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020520:	d019      	beq.n	8020556 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8020522:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020526:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802052a:	fb09 fa0a 	mul.w	sl, r9, sl
 802052e:	fb09 f904 	mul.w	r9, r9, r4
 8020532:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020536:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802053a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802053e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020542:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8020546:	4454      	add	r4, sl
 8020548:	0a1b      	lsrs	r3, r3, #8
 802054a:	0a24      	lsrs	r4, r4, #8
 802054c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020550:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020554:	431c      	orrs	r4, r3
 8020556:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802055a:	d019      	beq.n	8020590 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 802055c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8020560:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020564:	fb08 f909 	mul.w	r9, r8, r9
 8020568:	fb08 f800 	mul.w	r8, r8, r0
 802056c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8020570:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020574:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8020578:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802057c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8020580:	4448      	add	r0, r9
 8020582:	0a1b      	lsrs	r3, r3, #8
 8020584:	0a00      	lsrs	r0, r0, #8
 8020586:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802058a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802058e:	4318      	orrs	r0, r3
 8020590:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020594:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020598:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802059c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80205a0:	fb0c f808 	mul.w	r8, ip, r8
 80205a4:	fb0c f606 	mul.w	r6, ip, r6
 80205a8:	fb05 8803 	mla	r8, r5, r3, r8
 80205ac:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80205b0:	fb05 6202 	mla	r2, r5, r2, r6
 80205b4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80205b8:	fb07 8803 	mla	r8, r7, r3, r8
 80205bc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80205c0:	fb07 2704 	mla	r7, r7, r4, r2
 80205c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80205c8:	fb0e 8303 	mla	r3, lr, r3, r8
 80205cc:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80205d0:	fb0e 7e00 	mla	lr, lr, r0, r7
 80205d4:	9803      	ldr	r0, [sp, #12]
 80205d6:	b292      	uxth	r2, r2
 80205d8:	9c02      	ldr	r4, [sp, #8]
 80205da:	0a1b      	lsrs	r3, r3, #8
 80205dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80205e0:	4350      	muls	r0, r2
 80205e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80205e6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80205ea:	ea43 0e0e 	orr.w	lr, r3, lr
 80205ee:	1c43      	adds	r3, r0, #1
 80205f0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80205f4:	fa5f f08e 	uxtb.w	r0, lr
 80205f8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80205fc:	b2db      	uxtb	r3, r3
 80205fe:	fb14 f403 	smulbb	r4, r4, r3
 8020602:	fb00 4002 	mla	r0, r0, r2, r4
 8020606:	b280      	uxth	r0, r0
 8020608:	1c44      	adds	r4, r0, #1
 802060a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802060e:	9c01      	ldr	r4, [sp, #4]
 8020610:	fb14 f403 	smulbb	r4, r4, r3
 8020614:	1200      	asrs	r0, r0, #8
 8020616:	7008      	strb	r0, [r1, #0]
 8020618:	f3ce 2007 	ubfx	r0, lr, #8, #8
 802061c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020620:	fb00 4002 	mla	r0, r0, r2, r4
 8020624:	b280      	uxth	r0, r0
 8020626:	1c44      	adds	r4, r0, #1
 8020628:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802062c:	1200      	asrs	r0, r0, #8
 802062e:	7048      	strb	r0, [r1, #1]
 8020630:	9800      	ldr	r0, [sp, #0]
 8020632:	fb10 f303 	smulbb	r3, r0, r3
 8020636:	fb0e 3202 	mla	r2, lr, r2, r3
 802063a:	b292      	uxth	r2, r2
 802063c:	f102 0e01 	add.w	lr, r2, #1
 8020640:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8020644:	1212      	asrs	r2, r2, #8
 8020646:	708a      	strb	r2, [r1, #2]
 8020648:	b005      	add	sp, #20
 802064a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802064e:	bf00      	nop
 8020650:	0802877f 	.word	0x0802877f
 8020654:	08028c76 	.word	0x08028c76
 8020658:	08028848 	.word	0x08028848

0802065c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802065c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020660:	ed2d 8b08 	vpush	{d8-d11}
 8020664:	b099      	sub	sp, #100	; 0x64
 8020666:	eeb0 aa40 	vmov.f32	s20, s0
 802066a:	eef0 9a60 	vmov.f32	s19, s1
 802066e:	9306      	str	r3, [sp, #24]
 8020670:	eeb0 9a41 	vmov.f32	s18, s2
 8020674:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8020678:	eeb0 8a62 	vmov.f32	s16, s5
 802067c:	9216      	str	r2, [sp, #88]	; 0x58
 802067e:	eef0 8a43 	vmov.f32	s17, s6
 8020682:	9307      	str	r3, [sp, #28]
 8020684:	eef0 ba44 	vmov.f32	s23, s8
 8020688:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802068c:	eeb0 ba64 	vmov.f32	s22, s9
 8020690:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020692:	eef0 aa45 	vmov.f32	s21, s10
 8020696:	9310      	str	r3, [sp, #64]	; 0x40
 8020698:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802069c:	9017      	str	r0, [sp, #92]	; 0x5c
 802069e:	9112      	str	r1, [sp, #72]	; 0x48
 80206a0:	6850      	ldr	r0, [r2, #4]
 80206a2:	9315      	str	r3, [sp, #84]	; 0x54
 80206a4:	6812      	ldr	r2, [r2, #0]
 80206a6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80206a8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80206ac:	fb00 1303 	mla	r3, r0, r3, r1
 80206b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80206b4:	18d3      	adds	r3, r2, r3
 80206b6:	930a      	str	r3, [sp, #40]	; 0x28
 80206b8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80206ba:	681b      	ldr	r3, [r3, #0]
 80206bc:	9311      	str	r3, [sp, #68]	; 0x44
 80206be:	9b07      	ldr	r3, [sp, #28]
 80206c0:	009b      	lsls	r3, r3, #2
 80206c2:	930e      	str	r3, [sp, #56]	; 0x38
 80206c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	dc03      	bgt.n	80206d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80206ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	f340 833b 	ble.w	8020d48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80206d2:	9b06      	ldr	r3, [sp, #24]
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	f340 8197 	ble.w	8020a08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 80206da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80206dc:	1423      	asrs	r3, r4, #16
 80206de:	1412      	asrs	r2, r2, #16
 80206e0:	d432      	bmi.n	8020748 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80206e2:	1c51      	adds	r1, r2, #1
 80206e4:	9807      	ldr	r0, [sp, #28]
 80206e6:	4288      	cmp	r0, r1
 80206e8:	dd31      	ble.n	802074e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80206ea:	2b00      	cmp	r3, #0
 80206ec:	db2f      	blt.n	802074e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80206ee:	1c59      	adds	r1, r3, #1
 80206f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80206f2:	4288      	cmp	r0, r1
 80206f4:	dd2b      	ble.n	802074e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80206f6:	9b06      	ldr	r3, [sp, #24]
 80206f8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80206fa:	3b01      	subs	r3, #1
 80206fc:	992b      	ldr	r1, [sp, #172]	; 0xac
 80206fe:	fb02 1203 	mla	r2, r2, r3, r1
 8020702:	1412      	asrs	r2, r2, #16
 8020704:	d42e      	bmi.n	8020764 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020706:	3201      	adds	r2, #1
 8020708:	9907      	ldr	r1, [sp, #28]
 802070a:	4291      	cmp	r1, r2
 802070c:	dd2a      	ble.n	8020764 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802070e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020710:	fb02 4303 	mla	r3, r2, r3, r4
 8020714:	141b      	asrs	r3, r3, #16
 8020716:	d425      	bmi.n	8020764 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020718:	3301      	adds	r3, #1
 802071a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802071c:	429a      	cmp	r2, r3
 802071e:	dd21      	ble.n	8020764 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8020720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020722:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8020726:	f103 0e03 	add.w	lr, r3, #3
 802072a:	9b06      	ldr	r3, [sp, #24]
 802072c:	9313      	str	r3, [sp, #76]	; 0x4c
 802072e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020730:	2b00      	cmp	r3, #0
 8020732:	f300 81d2 	bgt.w	8020ada <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8020736:	9b06      	ldr	r3, [sp, #24]
 8020738:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802073c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802073e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020742:	4423      	add	r3, r4
 8020744:	930a      	str	r3, [sp, #40]	; 0x28
 8020746:	e161      	b.n	8020a0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8020748:	1c51      	adds	r1, r2, #1
 802074a:	f040 8150 	bne.w	80209ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802074e:	9907      	ldr	r1, [sp, #28]
 8020750:	428a      	cmp	r2, r1
 8020752:	f280 814c 	bge.w	80209ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020756:	1c5a      	adds	r2, r3, #1
 8020758:	f2c0 8149 	blt.w	80209ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802075c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802075e:	4293      	cmp	r3, r2
 8020760:	f280 8145 	bge.w	80209ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8020764:	9b06      	ldr	r3, [sp, #24]
 8020766:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020768:	9314      	str	r3, [sp, #80]	; 0x50
 802076a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 802076e:	9313      	str	r3, [sp, #76]	; 0x4c
 8020770:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020772:	2b00      	cmp	r3, #0
 8020774:	dddf      	ble.n	8020736 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8020776:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020778:	1423      	asrs	r3, r4, #16
 802077a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802077e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8020782:	1412      	asrs	r2, r2, #16
 8020784:	f100 8190 	bmi.w	8020aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8020788:	1c55      	adds	r5, r2, #1
 802078a:	9f07      	ldr	r7, [sp, #28]
 802078c:	42af      	cmp	r7, r5
 802078e:	f340 818d 	ble.w	8020aac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020792:	2b00      	cmp	r3, #0
 8020794:	f2c0 818a 	blt.w	8020aac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8020798:	1c5d      	adds	r5, r3, #1
 802079a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802079c:	42af      	cmp	r7, r5
 802079e:	f340 8185 	ble.w	8020aac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80207a2:	9d07      	ldr	r5, [sp, #28]
 80207a4:	fb03 2305 	mla	r3, r3, r5, r2
 80207a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80207aa:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80207ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80207b2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80207b6:	2800      	cmp	r0, #0
 80207b8:	f000 8167 	beq.w	8020a8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80207bc:	686a      	ldr	r2, [r5, #4]
 80207be:	920b      	str	r2, [sp, #44]	; 0x2c
 80207c0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80207c4:	2900      	cmp	r1, #0
 80207c6:	f000 8169 	beq.w	8020a9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 80207ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80207cc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80207ce:	18aa      	adds	r2, r5, r2
 80207d0:	59ed      	ldr	r5, [r5, r7]
 80207d2:	6852      	ldr	r2, [r2, #4]
 80207d4:	9508      	str	r5, [sp, #32]
 80207d6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80207da:	0e15      	lsrs	r5, r2, #24
 80207dc:	920c      	str	r2, [sp, #48]	; 0x30
 80207de:	b280      	uxth	r0, r0
 80207e0:	b289      	uxth	r1, r1
 80207e2:	fb00 fb01 	mul.w	fp, r0, r1
 80207e6:	0100      	lsls	r0, r0, #4
 80207e8:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 80207ec:	eba0 090b 	sub.w	r9, r0, fp
 80207f0:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80207f4:	b289      	uxth	r1, r1
 80207f6:	fa1f f989 	uxth.w	r9, r9
 80207fa:	1a52      	subs	r2, r2, r1
 80207fc:	fb09 f008 	mul.w	r0, r9, r8
 8020800:	b292      	uxth	r2, r2
 8020802:	fb02 000c 	mla	r0, r2, ip, r0
 8020806:	fb01 000a 	mla	r0, r1, sl, r0
 802080a:	fb0b 0005 	mla	r0, fp, r5, r0
 802080e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020812:	2800      	cmp	r0, #0
 8020814:	f000 80e0 	beq.w	80209d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020818:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802081c:	d01b      	beq.n	8020856 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 802081e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020826:	fb0c fe0e 	mul.w	lr, ip, lr
 802082a:	fb0c fc03 	mul.w	ip, ip, r3
 802082e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020832:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020836:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802083a:	4473      	add	r3, lr
 802083c:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020840:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8020844:	0a1b      	lsrs	r3, r3, #8
 8020846:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802084a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802084e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020852:	ea43 030e 	orr.w	r3, r3, lr
 8020856:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802085a:	d01e      	beq.n	802089a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 802085c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802085e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020862:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020866:	fb08 fc0c 	mul.w	ip, r8, ip
 802086a:	fb08 f80e 	mul.w	r8, r8, lr
 802086e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020872:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020876:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802087a:	44e6      	add	lr, ip
 802087c:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020880:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020884:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020888:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802088c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020890:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020894:	ea4e 0708 	orr.w	r7, lr, r8
 8020898:	970b      	str	r7, [sp, #44]	; 0x2c
 802089a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802089e:	d01e      	beq.n	80208de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80208a0:	9f08      	ldr	r7, [sp, #32]
 80208a2:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80208a6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80208aa:	fb0a f808 	mul.w	r8, sl, r8
 80208ae:	fb0a fa0c 	mul.w	sl, sl, ip
 80208b2:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80208b6:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80208ba:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80208be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80208c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80208c6:	44c6      	add	lr, r8
 80208c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80208d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80208d8:	ea4e 070a 	orr.w	r7, lr, sl
 80208dc:	9708      	str	r7, [sp, #32]
 80208de:	2dff      	cmp	r5, #255	; 0xff
 80208e0:	d01d      	beq.n	802091e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 80208e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80208e4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80208e8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80208ec:	fb05 f808 	mul.w	r8, r5, r8
 80208f0:	fb05 f50c 	mul.w	r5, r5, ip
 80208f4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80208f8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80208fc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020900:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020904:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020908:	44c6      	add	lr, r8
 802090a:	0a2d      	lsrs	r5, r5, #8
 802090c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020910:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020914:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020918:	ea4e 0505 	orr.w	r5, lr, r5
 802091c:	950c      	str	r5, [sp, #48]	; 0x30
 802091e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020920:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020924:	9f08      	ldr	r7, [sp, #32]
 8020926:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802092a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802092e:	fb09 f505 	mul.w	r5, r9, r5
 8020932:	fb02 550c 	mla	r5, r2, ip, r5
 8020936:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802093a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802093c:	fb01 550c 	mla	r5, r1, ip, r5
 8020940:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020944:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020946:	fb0b 550c 	mla	r5, fp, ip, r5
 802094a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802094e:	fb09 f90c 	mul.w	r9, r9, ip
 8020952:	0a2d      	lsrs	r5, r5, #8
 8020954:	fb02 9303 	mla	r3, r2, r3, r9
 8020958:	9a08      	ldr	r2, [sp, #32]
 802095a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802095e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020964:	fb01 330e 	mla	r3, r1, lr, r3
 8020968:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802096c:	fb0b 3b01 	mla	fp, fp, r1, r3
 8020970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020972:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020974:	4343      	muls	r3, r0
 8020976:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802097a:	1c58      	adds	r0, r3, #1
 802097c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020980:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020984:	ea45 050b 	orr.w	r5, r5, fp
 8020988:	7833      	ldrb	r3, [r6, #0]
 802098a:	b2ea      	uxtb	r2, r5
 802098c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020990:	fb12 f201 	smulbb	r2, r2, r1
 8020994:	b2c0      	uxtb	r0, r0
 8020996:	fb03 2300 	mla	r3, r3, r0, r2
 802099a:	b29b      	uxth	r3, r3
 802099c:	1c5a      	adds	r2, r3, #1
 802099e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80209a2:	7872      	ldrb	r2, [r6, #1]
 80209a4:	fb12 f200 	smulbb	r2, r2, r0
 80209a8:	121b      	asrs	r3, r3, #8
 80209aa:	7033      	strb	r3, [r6, #0]
 80209ac:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80209b0:	0c2d      	lsrs	r5, r5, #16
 80209b2:	fb03 2301 	mla	r3, r3, r1, r2
 80209b6:	b29b      	uxth	r3, r3
 80209b8:	1c5a      	adds	r2, r3, #1
 80209ba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80209be:	121b      	asrs	r3, r3, #8
 80209c0:	7073      	strb	r3, [r6, #1]
 80209c2:	78b3      	ldrb	r3, [r6, #2]
 80209c4:	fb13 f000 	smulbb	r0, r3, r0
 80209c8:	fb05 0501 	mla	r5, r5, r1, r0
 80209cc:	b2ad      	uxth	r5, r5
 80209ce:	1c6b      	adds	r3, r5, #1
 80209d0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80209d4:	122d      	asrs	r5, r5, #8
 80209d6:	70b5      	strb	r5, [r6, #2]
 80209d8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80209da:	3603      	adds	r6, #3
 80209dc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80209de:	4413      	add	r3, r2
 80209e0:	932b      	str	r3, [sp, #172]	; 0xac
 80209e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80209e4:	441c      	add	r4, r3
 80209e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80209e8:	3b01      	subs	r3, #1
 80209ea:	9314      	str	r3, [sp, #80]	; 0x50
 80209ec:	e6c0      	b.n	8020770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80209ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80209f0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80209f2:	4413      	add	r3, r2
 80209f4:	932b      	str	r3, [sp, #172]	; 0xac
 80209f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80209f8:	441c      	add	r4, r3
 80209fa:	9b06      	ldr	r3, [sp, #24]
 80209fc:	3b01      	subs	r3, #1
 80209fe:	9306      	str	r3, [sp, #24]
 8020a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a02:	3303      	adds	r3, #3
 8020a04:	930a      	str	r3, [sp, #40]	; 0x28
 8020a06:	e664      	b.n	80206d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8020a08:	f47f ae75 	bne.w	80206f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8020a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	f340 819a 	ble.w	8020d48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8020a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a1a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020a1e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020a22:	eef0 6a48 	vmov.f32	s13, s16
 8020a26:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020a2a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020a2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a32:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8020a36:	eef0 6a68 	vmov.f32	s13, s17
 8020a3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a3e:	ee16 4a90 	vmov	r4, s13
 8020a42:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020a46:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020a4a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020a4e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020a52:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020a56:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020a5a:	ee18 2a10 	vmov	r2, s16
 8020a5e:	eeb0 8a47 	vmov.f32	s16, s14
 8020a62:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a66:	ee18 2a90 	vmov	r2, s17
 8020a6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8020a6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a6e:	eef0 8a67 	vmov.f32	s17, s15
 8020a72:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a76:	932e      	str	r3, [sp, #184]	; 0xb8
 8020a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020a7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8020a7c:	3b01      	subs	r3, #1
 8020a7e:	9312      	str	r3, [sp, #72]	; 0x48
 8020a80:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a82:	bf08      	it	eq
 8020a84:	4613      	moveq	r3, r2
 8020a86:	9306      	str	r3, [sp, #24]
 8020a88:	e61c      	b.n	80206c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8020a8a:	b151      	cbz	r1, 8020aa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020a8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a8e:	58aa      	ldr	r2, [r5, r2]
 8020a90:	25ff      	movs	r5, #255	; 0xff
 8020a92:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020a96:	9208      	str	r2, [sp, #32]
 8020a98:	46a8      	mov	r8, r5
 8020a9a:	e6a0      	b.n	80207de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8020a9c:	25ff      	movs	r5, #255	; 0xff
 8020a9e:	46aa      	mov	sl, r5
 8020aa0:	e69d      	b.n	80207de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8020aa2:	25ff      	movs	r5, #255	; 0xff
 8020aa4:	46aa      	mov	sl, r5
 8020aa6:	e7f7      	b.n	8020a98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8020aa8:	1c57      	adds	r7, r2, #1
 8020aaa:	d195      	bne.n	80209d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020aac:	9d07      	ldr	r5, [sp, #28]
 8020aae:	4295      	cmp	r5, r2
 8020ab0:	dd92      	ble.n	80209d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020ab2:	1c5d      	adds	r5, r3, #1
 8020ab4:	db90      	blt.n	80209d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020ab6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020ab8:	429d      	cmp	r5, r3
 8020aba:	dd8d      	ble.n	80209d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020abc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020abe:	9201      	str	r2, [sp, #4]
 8020ac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ac2:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8020ac6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ac8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020aca:	9300      	str	r3, [sp, #0]
 8020acc:	9b07      	ldr	r3, [sp, #28]
 8020ace:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8020ad2:	4631      	mov	r1, r6
 8020ad4:	f7ff fc68 	bl	80203a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8020ad8:	e77e      	b.n	80209d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020ada:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020adc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020ae0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020ae2:	9d07      	ldr	r5, [sp, #28]
 8020ae4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020ae8:	1412      	asrs	r2, r2, #16
 8020aea:	1423      	asrs	r3, r4, #16
 8020aec:	fb05 2303 	mla	r3, r5, r3, r2
 8020af0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020af2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8020af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020afa:	0e1e      	lsrs	r6, r3, #24
 8020afc:	2900      	cmp	r1, #0
 8020afe:	f000 8114 	beq.w	8020d2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8020b02:	686a      	ldr	r2, [r5, #4]
 8020b04:	920d      	str	r2, [sp, #52]	; 0x34
 8020b06:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8020b0a:	2800      	cmp	r0, #0
 8020b0c:	f000 8116 	beq.w	8020d3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8020b10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b12:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020b14:	18aa      	adds	r2, r5, r2
 8020b16:	59ed      	ldr	r5, [r5, r7]
 8020b18:	6852      	ldr	r2, [r2, #4]
 8020b1a:	9509      	str	r5, [sp, #36]	; 0x24
 8020b1c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020b20:	0e15      	lsrs	r5, r2, #24
 8020b22:	920f      	str	r2, [sp, #60]	; 0x3c
 8020b24:	b289      	uxth	r1, r1
 8020b26:	b280      	uxth	r0, r0
 8020b28:	fb01 fa00 	mul.w	sl, r1, r0
 8020b2c:	0109      	lsls	r1, r1, #4
 8020b2e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020b32:	eba1 080a 	sub.w	r8, r1, sl
 8020b36:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020b3a:	b280      	uxth	r0, r0
 8020b3c:	fa1f f888 	uxth.w	r8, r8
 8020b40:	1a12      	subs	r2, r2, r0
 8020b42:	fb08 f10c 	mul.w	r1, r8, ip
 8020b46:	b292      	uxth	r2, r2
 8020b48:	fb02 1106 	mla	r1, r2, r6, r1
 8020b4c:	fb00 1109 	mla	r1, r0, r9, r1
 8020b50:	fb0a 1105 	mla	r1, sl, r5, r1
 8020b54:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020b58:	2900      	cmp	r1, #0
 8020b5a:	f000 80da 	beq.w	8020d12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8020b5e:	2eff      	cmp	r6, #255	; 0xff
 8020b60:	d016      	beq.n	8020b90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8020b62:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020b66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020b6a:	4377      	muls	r7, r6
 8020b6c:	435e      	muls	r6, r3
 8020b6e:	0a3b      	lsrs	r3, r7, #8
 8020b70:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020b74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020b78:	443b      	add	r3, r7
 8020b7a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020b7e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8020b82:	0a1b      	lsrs	r3, r3, #8
 8020b84:	0a3f      	lsrs	r7, r7, #8
 8020b86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020b8a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020b8e:	433b      	orrs	r3, r7
 8020b90:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020b94:	d01d      	beq.n	8020bd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8020b96:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020b98:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020b9a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020b9e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020ba2:	fb0c f606 	mul.w	r6, ip, r6
 8020ba6:	fb0c fc07 	mul.w	ip, ip, r7
 8020baa:	0a37      	lsrs	r7, r6, #8
 8020bac:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020bb0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020bb4:	4437      	add	r7, r6
 8020bb6:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8020bba:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8020bbe:	0a3f      	lsrs	r7, r7, #8
 8020bc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020bc4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020bc8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020bcc:	ea47 060c 	orr.w	r6, r7, ip
 8020bd0:	960d      	str	r6, [sp, #52]	; 0x34
 8020bd2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020bd6:	d01d      	beq.n	8020c14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8020bd8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020bda:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020bde:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020be2:	fb09 fc0c 	mul.w	ip, r9, ip
 8020be6:	fb09 f906 	mul.w	r9, r9, r6
 8020bea:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020bee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020bf2:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8020bf6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020bfa:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8020bfe:	4467      	add	r7, ip
 8020c00:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020c04:	0a3f      	lsrs	r7, r7, #8
 8020c06:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020c0a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020c0e:	ea47 0609 	orr.w	r6, r7, r9
 8020c12:	9609      	str	r6, [sp, #36]	; 0x24
 8020c14:	2dff      	cmp	r5, #255	; 0xff
 8020c16:	d01a      	beq.n	8020c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8020c18:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020c1a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020c1e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c22:	fb05 fc0c 	mul.w	ip, r5, ip
 8020c26:	4375      	muls	r5, r6
 8020c28:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8020c2c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020c30:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8020c34:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020c38:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8020c3c:	4467      	add	r7, ip
 8020c3e:	0a2d      	lsrs	r5, r5, #8
 8020c40:	0a3f      	lsrs	r7, r7, #8
 8020c42:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020c46:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020c4a:	433d      	orrs	r5, r7
 8020c4c:	950f      	str	r5, [sp, #60]	; 0x3c
 8020c4e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020c50:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8020c54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c58:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020c5c:	fb08 f505 	mul.w	r5, r8, r5
 8020c60:	fb02 5506 	mla	r5, r2, r6, r5
 8020c64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020c66:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020c6a:	fb00 5506 	mla	r5, r0, r6, r5
 8020c6e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020c70:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020c74:	fb0a 5506 	mla	r5, sl, r6, r5
 8020c78:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020c7a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c7e:	0a2d      	lsrs	r5, r5, #8
 8020c80:	fb08 f806 	mul.w	r8, r8, r6
 8020c84:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020c88:	fb02 8303 	mla	r3, r2, r3, r8
 8020c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c8e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020c92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c94:	fb00 3307 	mla	r3, r0, r7, r3
 8020c98:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020c9c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8020ca0:	fb01 f30b 	mul.w	r3, r1, fp
 8020ca4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ca8:	1c59      	adds	r1, r3, #1
 8020caa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020cae:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020cb2:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020cb6:	ea45 050c 	orr.w	r5, r5, ip
 8020cba:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020cbe:	b2ea      	uxtb	r2, r5
 8020cc0:	b2c9      	uxtb	r1, r1
 8020cc2:	fb12 f20b 	smulbb	r2, r2, fp
 8020cc6:	fb03 2301 	mla	r3, r3, r1, r2
 8020cca:	b29b      	uxth	r3, r3
 8020ccc:	1c5a      	adds	r2, r3, #1
 8020cce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020cd2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020cd6:	fb12 f201 	smulbb	r2, r2, r1
 8020cda:	121b      	asrs	r3, r3, #8
 8020cdc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020ce0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020ce4:	0c2d      	lsrs	r5, r5, #16
 8020ce6:	fb03 230b 	mla	r3, r3, fp, r2
 8020cea:	b29b      	uxth	r3, r3
 8020cec:	1c5a      	adds	r2, r3, #1
 8020cee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020cf2:	121b      	asrs	r3, r3, #8
 8020cf4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020cf8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020cfc:	fb13 f101 	smulbb	r1, r3, r1
 8020d00:	fb05 150b 	mla	r5, r5, fp, r1
 8020d04:	b2ad      	uxth	r5, r5
 8020d06:	1c69      	adds	r1, r5, #1
 8020d08:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8020d0c:	122d      	asrs	r5, r5, #8
 8020d0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8020d12:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020d14:	f10e 0e03 	add.w	lr, lr, #3
 8020d18:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020d1a:	4413      	add	r3, r2
 8020d1c:	932b      	str	r3, [sp, #172]	; 0xac
 8020d1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020d20:	441c      	add	r4, r3
 8020d22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020d24:	3b01      	subs	r3, #1
 8020d26:	9313      	str	r3, [sp, #76]	; 0x4c
 8020d28:	e501      	b.n	802072e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8020d2a:	b150      	cbz	r0, 8020d42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8020d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020d2e:	58aa      	ldr	r2, [r5, r2]
 8020d30:	25ff      	movs	r5, #255	; 0xff
 8020d32:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020d36:	9209      	str	r2, [sp, #36]	; 0x24
 8020d38:	46ac      	mov	ip, r5
 8020d3a:	e6f3      	b.n	8020b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8020d3c:	25ff      	movs	r5, #255	; 0xff
 8020d3e:	46a9      	mov	r9, r5
 8020d40:	e6f0      	b.n	8020b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8020d42:	25ff      	movs	r5, #255	; 0xff
 8020d44:	46a9      	mov	r9, r5
 8020d46:	e7f7      	b.n	8020d38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8020d48:	b019      	add	sp, #100	; 0x64
 8020d4a:	ecbd 8b08 	vpop	{d8-d11}
 8020d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020d54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8020d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d58:	b085      	sub	sp, #20
 8020d5a:	7888      	ldrb	r0, [r1, #2]
 8020d5c:	4691      	mov	r9, r2
 8020d5e:	9000      	str	r0, [sp, #0]
 8020d60:	7848      	ldrb	r0, [r1, #1]
 8020d62:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8020d66:	9001      	str	r0, [sp, #4]
 8020d68:	7808      	ldrb	r0, [r1, #0]
 8020d6a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8020d6e:	9002      	str	r0, [sp, #8]
 8020d70:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020d74:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8020d78:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8020d7c:	fb04 c603 	mla	r6, r4, r3, ip
 8020d80:	2c00      	cmp	r4, #0
 8020d82:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8020d86:	9a00      	ldr	r2, [sp, #0]
 8020d88:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8020d8c:	9a01      	ldr	r2, [sp, #4]
 8020d8e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020d92:	db3a      	blt.n	8020e0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8020d94:	45a0      	cmp	r8, r4
 8020d96:	dd38      	ble.n	8020e0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8020d98:	f1bc 0f00 	cmp.w	ip, #0
 8020d9c:	db33      	blt.n	8020e06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8020d9e:	4563      	cmp	r3, ip
 8020da0:	dd31      	ble.n	8020e06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8020da2:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8020da6:	f11c 0601 	adds.w	r6, ip, #1
 8020daa:	d431      	bmi.n	8020e10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8020dac:	42b3      	cmp	r3, r6
 8020dae:	dd2f      	ble.n	8020e10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8020db0:	b375      	cbz	r5, 8020e10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8020db2:	f8de 6004 	ldr.w	r6, [lr, #4]
 8020db6:	3401      	adds	r4, #1
 8020db8:	d42e      	bmi.n	8020e18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8020dba:	45a0      	cmp	r8, r4
 8020dbc:	dd2c      	ble.n	8020e18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8020dbe:	b35f      	cbz	r7, 8020e18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8020dc0:	f1bc 0f00 	cmp.w	ip, #0
 8020dc4:	db26      	blt.n	8020e14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8020dc6:	4563      	cmp	r3, ip
 8020dc8:	dd24      	ble.n	8020e14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8020dca:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8020dce:	f11c 0c01 	adds.w	ip, ip, #1
 8020dd2:	d405      	bmi.n	8020de0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020dd4:	4563      	cmp	r3, ip
 8020dd6:	dd03      	ble.n	8020de0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020dd8:	b115      	cbz	r5, 8020de0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020dda:	3301      	adds	r3, #1
 8020ddc:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8020de0:	2d0f      	cmp	r5, #15
 8020de2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020de6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020dea:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020dee:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8020df2:	d801      	bhi.n	8020df8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8020df4:	2f0f      	cmp	r7, #15
 8020df6:	d911      	bls.n	8020e1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8020df8:	4b77      	ldr	r3, [pc, #476]	; (8020fd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8020dfa:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020dfe:	4a77      	ldr	r2, [pc, #476]	; (8020fdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8020e00:	4877      	ldr	r0, [pc, #476]	; (8020fe0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8020e02:	f003 f831 	bl	8023e68 <__assert_func>
 8020e06:	4602      	mov	r2, r0
 8020e08:	e7cd      	b.n	8020da6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8020e0a:	4606      	mov	r6, r0
 8020e0c:	4602      	mov	r2, r0
 8020e0e:	e7d2      	b.n	8020db6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8020e10:	4606      	mov	r6, r0
 8020e12:	e7d0      	b.n	8020db6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8020e14:	4604      	mov	r4, r0
 8020e16:	e7da      	b.n	8020dce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8020e18:	4604      	mov	r4, r0
 8020e1a:	e7e1      	b.n	8020de0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020e1c:	b2ab      	uxth	r3, r5
 8020e1e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020e22:	b2bf      	uxth	r7, r7
 8020e24:	fb03 fe07 	mul.w	lr, r3, r7
 8020e28:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8020e2c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020e30:	eba3 0c0e 	sub.w	ip, r3, lr
 8020e34:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8020e38:	b2bf      	uxth	r7, r7
 8020e3a:	fa1f fc8c 	uxth.w	ip, ip
 8020e3e:	eba5 0507 	sub.w	r5, r5, r7
 8020e42:	fb0c f30a 	mul.w	r3, ip, sl
 8020e46:	b2ad      	uxth	r5, r5
 8020e48:	fb05 330b 	mla	r3, r5, fp, r3
 8020e4c:	fb07 3309 	mla	r3, r7, r9, r3
 8020e50:	fb0e 3308 	mla	r3, lr, r8, r3
 8020e54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020e58:	9303      	str	r3, [sp, #12]
 8020e5a:	d018      	beq.n	8020e8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8020e5c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020e60:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020e64:	fb0b f303 	mul.w	r3, fp, r3
 8020e68:	fb0b fb02 	mul.w	fp, fp, r2
 8020e6c:	0a1a      	lsrs	r2, r3, #8
 8020e6e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020e72:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020e76:	441a      	add	r2, r3
 8020e78:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8020e7c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020e80:	0a12      	lsrs	r2, r2, #8
 8020e82:	0a1b      	lsrs	r3, r3, #8
 8020e84:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020e88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e8c:	431a      	orrs	r2, r3
 8020e8e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020e92:	d019      	beq.n	8020ec8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8020e94:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020e98:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020e9c:	fb0a fb0b 	mul.w	fp, sl, fp
 8020ea0:	fb0a fa06 	mul.w	sl, sl, r6
 8020ea4:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020ea8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020eac:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020eb0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020eb4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020eb8:	445e      	add	r6, fp
 8020eba:	0a1b      	lsrs	r3, r3, #8
 8020ebc:	0a36      	lsrs	r6, r6, #8
 8020ebe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ec2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020ec6:	431e      	orrs	r6, r3
 8020ec8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020ecc:	d019      	beq.n	8020f02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8020ece:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020ed2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020ed6:	fb09 fa0a 	mul.w	sl, r9, sl
 8020eda:	fb09 f904 	mul.w	r9, r9, r4
 8020ede:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020ee2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020ee6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8020eea:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020eee:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8020ef2:	4454      	add	r4, sl
 8020ef4:	0a1b      	lsrs	r3, r3, #8
 8020ef6:	0a24      	lsrs	r4, r4, #8
 8020ef8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020efc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020f00:	431c      	orrs	r4, r3
 8020f02:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020f06:	d019      	beq.n	8020f3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8020f08:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8020f0c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020f10:	fb08 f909 	mul.w	r9, r8, r9
 8020f14:	fb08 f800 	mul.w	r8, r8, r0
 8020f18:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8020f1c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020f20:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8020f24:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020f28:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8020f2c:	4448      	add	r0, r9
 8020f2e:	0a1b      	lsrs	r3, r3, #8
 8020f30:	0a00      	lsrs	r0, r0, #8
 8020f32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f36:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020f3a:	4318      	orrs	r0, r3
 8020f3c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020f40:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020f44:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020f48:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020f4c:	fb0c f808 	mul.w	r8, ip, r8
 8020f50:	fb0c f606 	mul.w	r6, ip, r6
 8020f54:	fb05 8803 	mla	r8, r5, r3, r8
 8020f58:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8020f5c:	fb05 6202 	mla	r2, r5, r2, r6
 8020f60:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020f64:	fb07 8803 	mla	r8, r7, r3, r8
 8020f68:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8020f6c:	fb07 2704 	mla	r7, r7, r4, r2
 8020f70:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020f74:	fb0e 8303 	mla	r3, lr, r3, r8
 8020f78:	fb0e 7e00 	mla	lr, lr, r0, r7
 8020f7c:	9802      	ldr	r0, [sp, #8]
 8020f7e:	0a1b      	lsrs	r3, r3, #8
 8020f80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f88:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020f8c:	ea43 0e0e 	orr.w	lr, r3, lr
 8020f90:	9b03      	ldr	r3, [sp, #12]
 8020f92:	43db      	mvns	r3, r3
 8020f94:	b2db      	uxtb	r3, r3
 8020f96:	4358      	muls	r0, r3
 8020f98:	1c42      	adds	r2, r0, #1
 8020f9a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020f9e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8020fa2:	700a      	strb	r2, [r1, #0]
 8020fa4:	9a01      	ldr	r2, [sp, #4]
 8020fa6:	435a      	muls	r2, r3
 8020fa8:	1c50      	adds	r0, r2, #1
 8020faa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020fae:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8020fb2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020fb6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020fba:	704a      	strb	r2, [r1, #1]
 8020fbc:	9a00      	ldr	r2, [sp, #0]
 8020fbe:	435a      	muls	r2, r3
 8020fc0:	4613      	mov	r3, r2
 8020fc2:	3201      	adds	r2, #1
 8020fc4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020fc8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8020fcc:	f881 e002 	strb.w	lr, [r1, #2]
 8020fd0:	b005      	add	sp, #20
 8020fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fd6:	bf00      	nop
 8020fd8:	0802877f 	.word	0x0802877f
 8020fdc:	08028c76 	.word	0x08028c76
 8020fe0:	08028848 	.word	0x08028848

08020fe4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fe8:	ed2d 8b08 	vpush	{d8-d11}
 8020fec:	b097      	sub	sp, #92	; 0x5c
 8020fee:	eeb0 aa40 	vmov.f32	s20, s0
 8020ff2:	eef0 9a60 	vmov.f32	s19, s1
 8020ff6:	9306      	str	r3, [sp, #24]
 8020ff8:	eeb0 9a41 	vmov.f32	s18, s2
 8020ffc:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8021000:	eeb0 8a62 	vmov.f32	s16, s5
 8021004:	9214      	str	r2, [sp, #80]	; 0x50
 8021006:	eef0 8a43 	vmov.f32	s17, s6
 802100a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802100c:	eef0 ba44 	vmov.f32	s23, s8
 8021010:	9307      	str	r3, [sp, #28]
 8021012:	eeb0 ba64 	vmov.f32	s22, s9
 8021016:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802101a:	eef0 aa45 	vmov.f32	s21, s10
 802101e:	9015      	str	r0, [sp, #84]	; 0x54
 8021020:	9112      	str	r1, [sp, #72]	; 0x48
 8021022:	6850      	ldr	r0, [r2, #4]
 8021024:	9310      	str	r3, [sp, #64]	; 0x40
 8021026:	6812      	ldr	r2, [r2, #0]
 8021028:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802102a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802102e:	fb00 1303 	mla	r3, r0, r3, r1
 8021032:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021036:	18d3      	adds	r3, r2, r3
 8021038:	930a      	str	r3, [sp, #40]	; 0x28
 802103a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802103c:	681b      	ldr	r3, [r3, #0]
 802103e:	9311      	str	r3, [sp, #68]	; 0x44
 8021040:	9b07      	ldr	r3, [sp, #28]
 8021042:	009b      	lsls	r3, r3, #2
 8021044:	930e      	str	r3, [sp, #56]	; 0x38
 8021046:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021048:	2b00      	cmp	r3, #0
 802104a:	dc03      	bgt.n	8021054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802104c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802104e:	2b00      	cmp	r3, #0
 8021050:	f340 832e 	ble.w	80216b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021054:	9b06      	ldr	r3, [sp, #24]
 8021056:	2b00      	cmp	r3, #0
 8021058:	f340 8186 	ble.w	8021368 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 802105c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802105e:	1423      	asrs	r3, r4, #16
 8021060:	1412      	asrs	r2, r2, #16
 8021062:	d42f      	bmi.n	80210c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021064:	1c51      	adds	r1, r2, #1
 8021066:	9807      	ldr	r0, [sp, #28]
 8021068:	4288      	cmp	r0, r1
 802106a:	dd2e      	ble.n	80210ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802106c:	2b00      	cmp	r3, #0
 802106e:	db2c      	blt.n	80210ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021070:	1c59      	adds	r1, r3, #1
 8021072:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021074:	4288      	cmp	r0, r1
 8021076:	dd28      	ble.n	80210ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021078:	9b06      	ldr	r3, [sp, #24]
 802107a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802107c:	3b01      	subs	r3, #1
 802107e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021080:	fb02 1203 	mla	r2, r2, r3, r1
 8021084:	1412      	asrs	r2, r2, #16
 8021086:	d42b      	bmi.n	80210e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021088:	3201      	adds	r2, #1
 802108a:	9907      	ldr	r1, [sp, #28]
 802108c:	4291      	cmp	r1, r2
 802108e:	dd27      	ble.n	80210e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021090:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021092:	fb02 4303 	mla	r3, r2, r3, r4
 8021096:	141b      	asrs	r3, r3, #16
 8021098:	d422      	bmi.n	80210e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802109a:	3301      	adds	r3, #1
 802109c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802109e:	429a      	cmp	r2, r3
 80210a0:	dd1e      	ble.n	80210e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80210a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210a4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80210a8:	1cdd      	adds	r5, r3, #3
 80210aa:	f1bb 0f00 	cmp.w	fp, #0
 80210ae:	f300 81c4 	bgt.w	802143a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80210b2:	9b06      	ldr	r3, [sp, #24]
 80210b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80210b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80210be:	4423      	add	r3, r4
 80210c0:	930a      	str	r3, [sp, #40]	; 0x28
 80210c2:	e153      	b.n	802136c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 80210c4:	1c51      	adds	r1, r2, #1
 80210c6:	f040 8142 	bne.w	802134e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80210ca:	9907      	ldr	r1, [sp, #28]
 80210cc:	428a      	cmp	r2, r1
 80210ce:	f280 813e 	bge.w	802134e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80210d2:	1c5a      	adds	r2, r3, #1
 80210d4:	f2c0 813b 	blt.w	802134e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80210d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80210da:	4293      	cmp	r3, r2
 80210dc:	f280 8137 	bge.w	802134e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80210e0:	9b06      	ldr	r3, [sp, #24]
 80210e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80210e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80210e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80210e8:	2b00      	cmp	r3, #0
 80210ea:	dde2      	ble.n	80210b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 80210ec:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80210ee:	1423      	asrs	r3, r4, #16
 80210f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80210f2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80210f6:	1409      	asrs	r1, r1, #16
 80210f8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80210fc:	f100 8187 	bmi.w	802140e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8021100:	1c4e      	adds	r6, r1, #1
 8021102:	9f07      	ldr	r7, [sp, #28]
 8021104:	42b7      	cmp	r7, r6
 8021106:	f340 8184 	ble.w	8021412 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802110a:	2b00      	cmp	r3, #0
 802110c:	f2c0 8181 	blt.w	8021412 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021110:	1c5e      	adds	r6, r3, #1
 8021112:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021114:	42b7      	cmp	r7, r6
 8021116:	f340 817c 	ble.w	8021412 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802111a:	9e07      	ldr	r6, [sp, #28]
 802111c:	fb03 1306 	mla	r3, r3, r6, r1
 8021120:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021122:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021126:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802112a:	0e1f      	lsrs	r7, r3, #24
 802112c:	2a00      	cmp	r2, #0
 802112e:	f000 815c 	beq.w	80213ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8021132:	6871      	ldr	r1, [r6, #4]
 8021134:	910b      	str	r1, [sp, #44]	; 0x2c
 8021136:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802113a:	2800      	cmp	r0, #0
 802113c:	f000 815e 	beq.w	80213fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8021140:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021142:	eb06 0c01 	add.w	ip, r6, r1
 8021146:	5876      	ldr	r6, [r6, r1]
 8021148:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802114c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8021150:	9608      	str	r6, [sp, #32]
 8021152:	0e0e      	lsrs	r6, r1, #24
 8021154:	910c      	str	r1, [sp, #48]	; 0x30
 8021156:	b292      	uxth	r2, r2
 8021158:	b280      	uxth	r0, r0
 802115a:	fb02 fa00 	mul.w	sl, r2, r0
 802115e:	0112      	lsls	r2, r2, #4
 8021160:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021164:	eba2 080a 	sub.w	r8, r2, sl
 8021168:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802116c:	b280      	uxth	r0, r0
 802116e:	fa1f f888 	uxth.w	r8, r8
 8021172:	1a09      	subs	r1, r1, r0
 8021174:	fb08 f20e 	mul.w	r2, r8, lr
 8021178:	b289      	uxth	r1, r1
 802117a:	fb01 2207 	mla	r2, r1, r7, r2
 802117e:	fb00 2209 	mla	r2, r0, r9, r2
 8021182:	fb0a 2206 	mla	r2, sl, r6, r2
 8021186:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802118a:	2a00      	cmp	r2, #0
 802118c:	f000 80d4 	beq.w	8021338 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021190:	2fff      	cmp	r7, #255	; 0xff
 8021192:	d01a      	beq.n	80211ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8021194:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802119c:	fb07 fc0c 	mul.w	ip, r7, ip
 80211a0:	435f      	muls	r7, r3
 80211a2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80211a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80211aa:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80211ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80211b2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80211b6:	4463      	add	r3, ip
 80211b8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80211bc:	0a1b      	lsrs	r3, r3, #8
 80211be:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80211c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80211c6:	ea43 030b 	orr.w	r3, r3, fp
 80211ca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80211ce:	d01e      	beq.n	802120e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80211d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80211d2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80211d6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80211da:	fb0e fb0b 	mul.w	fp, lr, fp
 80211de:	fb0e fe07 	mul.w	lr, lr, r7
 80211e2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80211e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80211ea:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80211ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211f2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80211f6:	44dc      	add	ip, fp
 80211f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80211fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021200:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021204:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021208:	ea4c 070e 	orr.w	r7, ip, lr
 802120c:	970b      	str	r7, [sp, #44]	; 0x2c
 802120e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021212:	d01e      	beq.n	8021252 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021214:	9f08      	ldr	r7, [sp, #32]
 8021216:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802121a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802121e:	fb09 fe0e 	mul.w	lr, r9, lr
 8021222:	fb09 f907 	mul.w	r9, r9, r7
 8021226:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802122a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802122e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8021232:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021236:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802123a:	44f4      	add	ip, lr
 802123c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021240:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021244:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021248:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802124c:	ea4c 0709 	orr.w	r7, ip, r9
 8021250:	9708      	str	r7, [sp, #32]
 8021252:	2eff      	cmp	r6, #255	; 0xff
 8021254:	d01c      	beq.n	8021290 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8021256:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021258:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802125c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021260:	fb06 fe0e 	mul.w	lr, r6, lr
 8021264:	437e      	muls	r6, r7
 8021266:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802126a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802126e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021272:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021276:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802127a:	44f4      	add	ip, lr
 802127c:	0a36      	lsrs	r6, r6, #8
 802127e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021282:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021286:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802128a:	ea4c 0606 	orr.w	r6, ip, r6
 802128e:	960c      	str	r6, [sp, #48]	; 0x30
 8021290:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8021292:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021296:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802129a:	2aff      	cmp	r2, #255	; 0xff
 802129c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212a0:	fb08 f606 	mul.w	r6, r8, r6
 80212a4:	fb01 6607 	mla	r6, r1, r7, r6
 80212a8:	9f08      	ldr	r7, [sp, #32]
 80212aa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80212ae:	fb00 6607 	mla	r6, r0, r7, r6
 80212b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80212b4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80212b8:	fb0a 6607 	mla	r6, sl, r7, r6
 80212bc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80212be:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80212c2:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80212c6:	fb08 f807 	mul.w	r8, r8, r7
 80212ca:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212ce:	fb01 8303 	mla	r3, r1, r3, r8
 80212d2:	9908      	ldr	r1, [sp, #32]
 80212d4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80212d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80212da:	fb00 330c 	mla	r3, r0, ip, r3
 80212de:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80212e2:	fb0a 3a00 	mla	sl, sl, r0, r3
 80212e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80212ee:	ea46 060a 	orr.w	r6, r6, sl
 80212f2:	b2f0      	uxtb	r0, r6
 80212f4:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80212f8:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80212fc:	f000 8084 	beq.w	8021408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8021300:	43d2      	mvns	r2, r2
 8021302:	782b      	ldrb	r3, [r5, #0]
 8021304:	b2d2      	uxtb	r2, r2
 8021306:	fb03 f702 	mul.w	r7, r3, r2
 802130a:	1c7b      	adds	r3, r7, #1
 802130c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021310:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021314:	702b      	strb	r3, [r5, #0]
 8021316:	786b      	ldrb	r3, [r5, #1]
 8021318:	fb03 f002 	mul.w	r0, r3, r2
 802131c:	1c43      	adds	r3, r0, #1
 802131e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021322:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021326:	706b      	strb	r3, [r5, #1]
 8021328:	78ab      	ldrb	r3, [r5, #2]
 802132a:	4353      	muls	r3, r2
 802132c:	1c5a      	adds	r2, r3, #1
 802132e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021332:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021336:	70ae      	strb	r6, [r5, #2]
 8021338:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802133a:	3503      	adds	r5, #3
 802133c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802133e:	4413      	add	r3, r2
 8021340:	9329      	str	r3, [sp, #164]	; 0xa4
 8021342:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021344:	441c      	add	r4, r3
 8021346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021348:	3b01      	subs	r3, #1
 802134a:	9313      	str	r3, [sp, #76]	; 0x4c
 802134c:	e6cb      	b.n	80210e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802134e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021350:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021352:	4413      	add	r3, r2
 8021354:	9329      	str	r3, [sp, #164]	; 0xa4
 8021356:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021358:	441c      	add	r4, r3
 802135a:	9b06      	ldr	r3, [sp, #24]
 802135c:	3b01      	subs	r3, #1
 802135e:	9306      	str	r3, [sp, #24]
 8021360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021362:	3303      	adds	r3, #3
 8021364:	930a      	str	r3, [sp, #40]	; 0x28
 8021366:	e675      	b.n	8021054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021368:	f47f ae86 	bne.w	8021078 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802136c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802136e:	2b00      	cmp	r3, #0
 8021370:	f340 819e 	ble.w	80216b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021378:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802137a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802137e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021382:	eef0 6a48 	vmov.f32	s13, s16
 8021386:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802138a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802138e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021392:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021396:	eef0 6a68 	vmov.f32	s13, s17
 802139a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802139e:	ee16 4a90 	vmov	r4, s13
 80213a2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80213a6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80213aa:	ee37 8a48 	vsub.f32	s16, s14, s16
 80213ae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80213b2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80213b6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80213ba:	ee18 2a10 	vmov	r2, s16
 80213be:	eeb0 8a47 	vmov.f32	s16, s14
 80213c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80213c6:	ee18 2a90 	vmov	r2, s17
 80213ca:	932b      	str	r3, [sp, #172]	; 0xac
 80213cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213ce:	eef0 8a67 	vmov.f32	s17, s15
 80213d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80213d6:	932c      	str	r3, [sp, #176]	; 0xb0
 80213d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80213da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80213dc:	3b01      	subs	r3, #1
 80213de:	9312      	str	r3, [sp, #72]	; 0x48
 80213e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80213e2:	bf08      	it	eq
 80213e4:	4613      	moveq	r3, r2
 80213e6:	9306      	str	r3, [sp, #24]
 80213e8:	e62d      	b.n	8021046 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80213ea:	b150      	cbz	r0, 8021402 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 80213ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80213ee:	5871      	ldr	r1, [r6, r1]
 80213f0:	26ff      	movs	r6, #255	; 0xff
 80213f2:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80213f6:	9108      	str	r1, [sp, #32]
 80213f8:	46b6      	mov	lr, r6
 80213fa:	e6ac      	b.n	8021156 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80213fc:	26ff      	movs	r6, #255	; 0xff
 80213fe:	46b1      	mov	r9, r6
 8021400:	e6a9      	b.n	8021156 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8021402:	26ff      	movs	r6, #255	; 0xff
 8021404:	46b1      	mov	r9, r6
 8021406:	e7f7      	b.n	80213f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8021408:	7028      	strb	r0, [r5, #0]
 802140a:	7069      	strb	r1, [r5, #1]
 802140c:	e793      	b.n	8021336 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 802140e:	1c4f      	adds	r7, r1, #1
 8021410:	d192      	bne.n	8021338 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021412:	9e07      	ldr	r6, [sp, #28]
 8021414:	428e      	cmp	r6, r1
 8021416:	dd8f      	ble.n	8021338 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021418:	1c5e      	adds	r6, r3, #1
 802141a:	db8d      	blt.n	8021338 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802141c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802141e:	429e      	cmp	r6, r3
 8021420:	dd8a      	ble.n	8021338 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021422:	9600      	str	r6, [sp, #0]
 8021424:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8021428:	e9cd 1301 	strd	r1, r3, [sp, #4]
 802142c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802142e:	4629      	mov	r1, r5
 8021430:	9b07      	ldr	r3, [sp, #28]
 8021432:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021434:	f7ff fc8e 	bl	8020d54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8021438:	e77e      	b.n	8021338 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802143a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802143c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021440:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021442:	9e07      	ldr	r6, [sp, #28]
 8021444:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021448:	1409      	asrs	r1, r1, #16
 802144a:	1423      	asrs	r3, r4, #16
 802144c:	fb06 1303 	mla	r3, r6, r3, r1
 8021450:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021452:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021456:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802145a:	0e1f      	lsrs	r7, r3, #24
 802145c:	2a00      	cmp	r2, #0
 802145e:	f000 8113 	beq.w	8021688 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8021462:	6871      	ldr	r1, [r6, #4]
 8021464:	910d      	str	r1, [sp, #52]	; 0x34
 8021466:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802146a:	2800      	cmp	r0, #0
 802146c:	f000 8115 	beq.w	802169a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8021470:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021472:	eb06 0c01 	add.w	ip, r6, r1
 8021476:	5876      	ldr	r6, [r6, r1]
 8021478:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802147c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8021480:	9609      	str	r6, [sp, #36]	; 0x24
 8021482:	0e0e      	lsrs	r6, r1, #24
 8021484:	910f      	str	r1, [sp, #60]	; 0x3c
 8021486:	b292      	uxth	r2, r2
 8021488:	b280      	uxth	r0, r0
 802148a:	fb02 fa00 	mul.w	sl, r2, r0
 802148e:	0112      	lsls	r2, r2, #4
 8021490:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021494:	eba2 080a 	sub.w	r8, r2, sl
 8021498:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802149c:	b280      	uxth	r0, r0
 802149e:	fa1f f888 	uxth.w	r8, r8
 80214a2:	1a09      	subs	r1, r1, r0
 80214a4:	fb08 f20e 	mul.w	r2, r8, lr
 80214a8:	b289      	uxth	r1, r1
 80214aa:	fb01 2207 	mla	r2, r1, r7, r2
 80214ae:	fb00 2209 	mla	r2, r0, r9, r2
 80214b2:	fb0a 2206 	mla	r2, sl, r6, r2
 80214b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80214ba:	2a00      	cmp	r2, #0
 80214bc:	f000 80da 	beq.w	8021674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 80214c0:	2fff      	cmp	r7, #255	; 0xff
 80214c2:	d01a      	beq.n	80214fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 80214c4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80214c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80214cc:	fb07 fc0c 	mul.w	ip, r7, ip
 80214d0:	435f      	muls	r7, r3
 80214d2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80214d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80214da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80214de:	4463      	add	r3, ip
 80214e0:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80214e4:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80214e8:	0a1b      	lsrs	r3, r3, #8
 80214ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80214f2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80214f6:	ea43 030c 	orr.w	r3, r3, ip
 80214fa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80214fe:	d021      	beq.n	8021544 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8021500:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021502:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021506:	fb0e f707 	mul.w	r7, lr, r7
 802150a:	9713      	str	r7, [sp, #76]	; 0x4c
 802150c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802150e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021512:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8021514:	fb0e fe0c 	mul.w	lr, lr, ip
 8021518:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802151c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021520:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021524:	44bc      	add	ip, r7
 8021526:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802152a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802152e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021532:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021536:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802153a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802153e:	ea4c 070e 	orr.w	r7, ip, lr
 8021542:	970d      	str	r7, [sp, #52]	; 0x34
 8021544:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021548:	d01e      	beq.n	8021588 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 802154a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802154c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021550:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021554:	fb09 fe0e 	mul.w	lr, r9, lr
 8021558:	fb09 f907 	mul.w	r9, r9, r7
 802155c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021560:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021564:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8021568:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802156c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8021570:	44f4      	add	ip, lr
 8021572:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021576:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802157a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802157e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021582:	ea4c 0709 	orr.w	r7, ip, r9
 8021586:	9709      	str	r7, [sp, #36]	; 0x24
 8021588:	2eff      	cmp	r6, #255	; 0xff
 802158a:	d01c      	beq.n	80215c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 802158c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802158e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021592:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021596:	fb06 fe0e 	mul.w	lr, r6, lr
 802159a:	437e      	muls	r6, r7
 802159c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80215a0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80215a4:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80215a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215ac:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80215b0:	44f4      	add	ip, lr
 80215b2:	0a36      	lsrs	r6, r6, #8
 80215b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215b8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80215bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215c0:	ea4c 0606 	orr.w	r6, ip, r6
 80215c4:	960f      	str	r6, [sp, #60]	; 0x3c
 80215c6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80215c8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80215cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80215d0:	2aff      	cmp	r2, #255	; 0xff
 80215d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80215d6:	fb08 f606 	mul.w	r6, r8, r6
 80215da:	fb01 6607 	mla	r6, r1, r7, r6
 80215de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80215e0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80215e4:	fb00 6607 	mla	r6, r0, r7, r6
 80215e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80215ea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80215ee:	fb0a 6607 	mla	r6, sl, r7, r6
 80215f2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80215f4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80215f8:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80215fc:	fb08 f807 	mul.w	r8, r8, r7
 8021600:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021604:	fb01 8303 	mla	r3, r1, r3, r8
 8021608:	9909      	ldr	r1, [sp, #36]	; 0x24
 802160a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802160e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021610:	fb00 330c 	mla	r3, r0, ip, r3
 8021614:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8021618:	fb0a 3e0e 	mla	lr, sl, lr, r3
 802161c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021620:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021624:	ea46 060e 	orr.w	r6, r6, lr
 8021628:	b2f0      	uxtb	r0, r6
 802162a:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802162e:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8021632:	d038      	beq.n	80216a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8021634:	43d2      	mvns	r2, r2
 8021636:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 802163a:	b2d2      	uxtb	r2, r2
 802163c:	4357      	muls	r7, r2
 802163e:	1c7b      	adds	r3, r7, #1
 8021640:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021644:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021648:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 802164c:	4350      	muls	r0, r2
 802164e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8021652:	1c43      	adds	r3, r0, #1
 8021654:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021658:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802165c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021660:	4353      	muls	r3, r2
 8021662:	f805 1c02 	strb.w	r1, [r5, #-2]
 8021666:	1c5a      	adds	r2, r3, #1
 8021668:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802166c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8021670:	f805 6c01 	strb.w	r6, [r5, #-1]
 8021674:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021676:	3503      	adds	r5, #3
 8021678:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802167a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802167e:	4413      	add	r3, r2
 8021680:	9329      	str	r3, [sp, #164]	; 0xa4
 8021682:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021684:	441c      	add	r4, r3
 8021686:	e510      	b.n	80210aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8021688:	b150      	cbz	r0, 80216a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 802168a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802168c:	5871      	ldr	r1, [r6, r1]
 802168e:	26ff      	movs	r6, #255	; 0xff
 8021690:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8021694:	9109      	str	r1, [sp, #36]	; 0x24
 8021696:	46b6      	mov	lr, r6
 8021698:	e6f5      	b.n	8021486 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802169a:	26ff      	movs	r6, #255	; 0xff
 802169c:	46b1      	mov	r9, r6
 802169e:	e6f2      	b.n	8021486 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80216a0:	26ff      	movs	r6, #255	; 0xff
 80216a2:	46b1      	mov	r9, r6
 80216a4:	e7f7      	b.n	8021696 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 80216a6:	f805 0c03 	strb.w	r0, [r5, #-3]
 80216aa:	f805 1c02 	strb.w	r1, [r5, #-2]
 80216ae:	e7df      	b.n	8021670 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 80216b0:	b017      	add	sp, #92	; 0x5c
 80216b2:	ecbd 8b08 	vpop	{d8-d11}
 80216b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080216bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80216bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216c0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80216c4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80216c8:	2800      	cmp	r0, #0
 80216ca:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80216ce:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80216d2:	fb0c 0e03 	mla	lr, ip, r3, r0
 80216d6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80216da:	db6b      	blt.n	80217b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80216dc:	4580      	cmp	r8, r0
 80216de:	dd69      	ble.n	80217b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80216e0:	f1bc 0f00 	cmp.w	ip, #0
 80216e4:	db66      	blt.n	80217b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80216e6:	45e1      	cmp	r9, ip
 80216e8:	dd64      	ble.n	80217b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80216ea:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80216ee:	f01e 0f01 	tst.w	lr, #1
 80216f2:	5d16      	ldrb	r6, [r2, r4]
 80216f4:	bf0c      	ite	eq
 80216f6:	f006 060f 	andeq.w	r6, r6, #15
 80216fa:	1136      	asrne	r6, r6, #4
 80216fc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021700:	b2f6      	uxtb	r6, r6
 8021702:	f110 0a01 	adds.w	sl, r0, #1
 8021706:	d457      	bmi.n	80217b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021708:	45d0      	cmp	r8, sl
 802170a:	dd55      	ble.n	80217b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802170c:	f1bc 0f00 	cmp.w	ip, #0
 8021710:	db52      	blt.n	80217b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021712:	45e1      	cmp	r9, ip
 8021714:	dd50      	ble.n	80217b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8021716:	2f00      	cmp	r7, #0
 8021718:	f000 80ac 	beq.w	8021874 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 802171c:	f10e 0b01 	add.w	fp, lr, #1
 8021720:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8021724:	f01b 0f01 	tst.w	fp, #1
 8021728:	5d14      	ldrb	r4, [r2, r4]
 802172a:	bf0c      	ite	eq
 802172c:	f004 040f 	andeq.w	r4, r4, #15
 8021730:	1124      	asrne	r4, r4, #4
 8021732:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021736:	b2e4      	uxtb	r4, r4
 8021738:	2d00      	cmp	r5, #0
 802173a:	f000 8096 	beq.w	802186a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 802173e:	2800      	cmp	r0, #0
 8021740:	f10c 0c01 	add.w	ip, ip, #1
 8021744:	db3c      	blt.n	80217c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021746:	4580      	cmp	r8, r0
 8021748:	dd3a      	ble.n	80217c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802174a:	f1bc 0f00 	cmp.w	ip, #0
 802174e:	db37      	blt.n	80217c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021750:	45e1      	cmp	r9, ip
 8021752:	dd35      	ble.n	80217c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8021754:	eb03 0b0e 	add.w	fp, r3, lr
 8021758:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802175c:	f01b 0f01 	tst.w	fp, #1
 8021760:	5c10      	ldrb	r0, [r2, r0]
 8021762:	bf0c      	ite	eq
 8021764:	f000 000f 	andeq.w	r0, r0, #15
 8021768:	1100      	asrne	r0, r0, #4
 802176a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802176e:	b2c0      	uxtb	r0, r0
 8021770:	f1ba 0f00 	cmp.w	sl, #0
 8021774:	db26      	blt.n	80217c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021776:	45d0      	cmp	r8, sl
 8021778:	dd24      	ble.n	80217c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802177a:	f1bc 0f00 	cmp.w	ip, #0
 802177e:	db21      	blt.n	80217c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021780:	45e1      	cmp	r9, ip
 8021782:	dd1f      	ble.n	80217c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8021784:	b307      	cbz	r7, 80217c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8021786:	3301      	adds	r3, #1
 8021788:	449e      	add	lr, r3
 802178a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802178e:	f01e 0f01 	tst.w	lr, #1
 8021792:	5cd3      	ldrb	r3, [r2, r3]
 8021794:	bf0c      	ite	eq
 8021796:	f003 030f 	andeq.w	r3, r3, #15
 802179a:	111b      	asrne	r3, r3, #4
 802179c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80217a0:	b2db      	uxtb	r3, r3
 80217a2:	2f0f      	cmp	r7, #15
 80217a4:	d911      	bls.n	80217ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80217a6:	4b35      	ldr	r3, [pc, #212]	; (802187c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80217a8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80217ac:	4a34      	ldr	r2, [pc, #208]	; (8021880 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 80217ae:	4835      	ldr	r0, [pc, #212]	; (8021884 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80217b0:	f002 fb5a 	bl	8023e68 <__assert_func>
 80217b4:	2600      	movs	r6, #0
 80217b6:	e7a4      	b.n	8021702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 80217b8:	2400      	movs	r4, #0
 80217ba:	e7bd      	b.n	8021738 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80217bc:	463c      	mov	r4, r7
 80217be:	e7be      	b.n	802173e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80217c0:	2000      	movs	r0, #0
 80217c2:	e7d5      	b.n	8021770 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80217c4:	2300      	movs	r3, #0
 80217c6:	e7ec      	b.n	80217a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 80217c8:	463b      	mov	r3, r7
 80217ca:	2d0f      	cmp	r5, #15
 80217cc:	d8eb      	bhi.n	80217a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80217ce:	b2bf      	uxth	r7, r7
 80217d0:	b2ad      	uxth	r5, r5
 80217d2:	fb07 f205 	mul.w	r2, r7, r5
 80217d6:	013f      	lsls	r7, r7, #4
 80217d8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80217dc:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80217e0:	1abf      	subs	r7, r7, r2
 80217e2:	b2ad      	uxth	r5, r5
 80217e4:	b2bf      	uxth	r7, r7
 80217e6:	ebac 0c05 	sub.w	ip, ip, r5
 80217ea:	437c      	muls	r4, r7
 80217ec:	fa1f fc8c 	uxth.w	ip, ip
 80217f0:	fb06 440c 	mla	r4, r6, ip, r4
 80217f4:	fb05 4400 	mla	r4, r5, r0, r4
 80217f8:	fb02 4203 	mla	r2, r2, r3, r4
 80217fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021800:	b38a      	cbz	r2, 8021866 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8021802:	4b21      	ldr	r3, [pc, #132]	; (8021888 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8021804:	681c      	ldr	r4, [r3, #0]
 8021806:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802180a:	b2e5      	uxtb	r5, r4
 802180c:	4353      	muls	r3, r2
 802180e:	1c5a      	adds	r2, r3, #1
 8021810:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021814:	1212      	asrs	r2, r2, #8
 8021816:	b290      	uxth	r0, r2
 8021818:	43d2      	mvns	r2, r2
 802181a:	fb15 f500 	smulbb	r5, r5, r0
 802181e:	b2d3      	uxtb	r3, r2
 8021820:	780a      	ldrb	r2, [r1, #0]
 8021822:	fb02 5203 	mla	r2, r2, r3, r5
 8021826:	b292      	uxth	r2, r2
 8021828:	1c55      	adds	r5, r2, #1
 802182a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802182e:	784d      	ldrb	r5, [r1, #1]
 8021830:	fb15 f503 	smulbb	r5, r5, r3
 8021834:	1212      	asrs	r2, r2, #8
 8021836:	700a      	strb	r2, [r1, #0]
 8021838:	f3c4 2207 	ubfx	r2, r4, #8, #8
 802183c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8021840:	fb02 5200 	mla	r2, r2, r0, r5
 8021844:	b292      	uxth	r2, r2
 8021846:	1c55      	adds	r5, r2, #1
 8021848:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802184c:	1212      	asrs	r2, r2, #8
 802184e:	704a      	strb	r2, [r1, #1]
 8021850:	788a      	ldrb	r2, [r1, #2]
 8021852:	fb12 f303 	smulbb	r3, r2, r3
 8021856:	fb04 3300 	mla	r3, r4, r0, r3
 802185a:	b29b      	uxth	r3, r3
 802185c:	1c5a      	adds	r2, r3, #1
 802185e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021862:	121b      	asrs	r3, r3, #8
 8021864:	708b      	strb	r3, [r1, #2]
 8021866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802186a:	2f0f      	cmp	r7, #15
 802186c:	d89b      	bhi.n	80217a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802186e:	462b      	mov	r3, r5
 8021870:	4628      	mov	r0, r5
 8021872:	e7ac      	b.n	80217ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8021874:	2d00      	cmp	r5, #0
 8021876:	d1a1      	bne.n	80217bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8021878:	462c      	mov	r4, r5
 802187a:	e7f8      	b.n	802186e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 802187c:	0802877f 	.word	0x0802877f
 8021880:	08028c76 	.word	0x08028c76
 8021884:	08028848 	.word	0x08028848
 8021888:	2000bc90 	.word	0x2000bc90

0802188c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802188c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021890:	ed2d 8b08 	vpush	{d8-d11}
 8021894:	b097      	sub	sp, #92	; 0x5c
 8021896:	eeb0 aa40 	vmov.f32	s20, s0
 802189a:	eef0 9a60 	vmov.f32	s19, s1
 802189e:	9308      	str	r3, [sp, #32]
 80218a0:	eeb0 9a41 	vmov.f32	s18, s2
 80218a4:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80218a8:	eeb0 8a62 	vmov.f32	s16, s5
 80218ac:	9214      	str	r2, [sp, #80]	; 0x50
 80218ae:	eef0 8a43 	vmov.f32	s17, s6
 80218b2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80218b4:	eef0 ba44 	vmov.f32	s23, s8
 80218b8:	9309      	str	r3, [sp, #36]	; 0x24
 80218ba:	eeb0 ba64 	vmov.f32	s22, s9
 80218be:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80218c2:	eef0 aa45 	vmov.f32	s21, s10
 80218c6:	9015      	str	r0, [sp, #84]	; 0x54
 80218c8:	910c      	str	r1, [sp, #48]	; 0x30
 80218ca:	930e      	str	r3, [sp, #56]	; 0x38
 80218cc:	6850      	ldr	r0, [r2, #4]
 80218ce:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 80218d2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80218d6:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 80218da:	fb00 1803 	mla	r8, r0, r3, r1
 80218de:	6813      	ldr	r3, [r2, #0]
 80218e0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80218e4:	4498      	add	r8, r3
 80218e6:	f10b 0301 	add.w	r3, fp, #1
 80218ea:	f023 0301 	bic.w	r3, r3, #1
 80218ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80218f0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80218f2:	681f      	ldr	r7, [r3, #0]
 80218f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	dc03      	bgt.n	8021902 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80218fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	f340 8238 	ble.w	8021d72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8021902:	9b08      	ldr	r3, [sp, #32]
 8021904:	2b00      	cmp	r3, #0
 8021906:	f340 810c 	ble.w	8021b22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802190a:	142a      	asrs	r2, r5, #16
 802190c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021910:	d42c      	bmi.n	802196c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021912:	1c51      	adds	r1, r2, #1
 8021914:	458b      	cmp	fp, r1
 8021916:	dd2c      	ble.n	8021972 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021918:	2b00      	cmp	r3, #0
 802191a:	db2a      	blt.n	8021972 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802191c:	1c59      	adds	r1, r3, #1
 802191e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021920:	4288      	cmp	r0, r1
 8021922:	dd26      	ble.n	8021972 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021924:	9b08      	ldr	r3, [sp, #32]
 8021926:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021928:	3b01      	subs	r3, #1
 802192a:	fb02 5203 	mla	r2, r2, r3, r5
 802192e:	1412      	asrs	r2, r2, #16
 8021930:	d429      	bmi.n	8021986 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021932:	3201      	adds	r2, #1
 8021934:	4593      	cmp	fp, r2
 8021936:	dd26      	ble.n	8021986 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021938:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802193a:	fb02 6303 	mla	r3, r2, r3, r6
 802193e:	141b      	asrs	r3, r3, #16
 8021940:	d421      	bmi.n	8021986 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8021942:	3301      	adds	r3, #1
 8021944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021946:	429a      	cmp	r2, r3
 8021948:	dd1d      	ble.n	8021986 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802194a:	f108 0e03 	add.w	lr, r8, #3
 802194e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021952:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8021956:	f1b9 0f00 	cmp.w	r9, #0
 802195a:	f300 814f 	bgt.w	8021bfc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 802195e:	9b08      	ldr	r3, [sp, #32]
 8021960:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021964:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021968:	44a0      	add	r8, r4
 802196a:	e0dc      	b.n	8021b26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 802196c:	1c51      	adds	r1, r2, #1
 802196e:	f040 80ce 	bne.w	8021b0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021972:	4593      	cmp	fp, r2
 8021974:	f340 80cb 	ble.w	8021b0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021978:	1c5a      	adds	r2, r3, #1
 802197a:	f2c0 80c8 	blt.w	8021b0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802197e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021980:	4293      	cmp	r3, r2
 8021982:	f280 80c4 	bge.w	8021b0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021986:	9b08      	ldr	r3, [sp, #32]
 8021988:	46c1      	mov	r9, r8
 802198a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802198e:	930d      	str	r3, [sp, #52]	; 0x34
 8021990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021992:	2b00      	cmp	r3, #0
 8021994:	dde3      	ble.n	802195e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8021996:	1428      	asrs	r0, r5, #16
 8021998:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802199c:	ea4f 4326 	mov.w	r3, r6, asr #16
 80219a0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80219a4:	f100 8111 	bmi.w	8021bca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80219a8:	f100 0c01 	add.w	ip, r0, #1
 80219ac:	45e3      	cmp	fp, ip
 80219ae:	f340 810e 	ble.w	8021bce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80219b2:	2b00      	cmp	r3, #0
 80219b4:	f2c0 810b 	blt.w	8021bce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80219b8:	f103 0c01 	add.w	ip, r3, #1
 80219bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80219be:	4564      	cmp	r4, ip
 80219c0:	f340 8105 	ble.w	8021bce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80219c4:	fb03 030a 	mla	r3, r3, sl, r0
 80219c8:	0858      	lsrs	r0, r3, #1
 80219ca:	07dc      	lsls	r4, r3, #31
 80219cc:	5c38      	ldrb	r0, [r7, r0]
 80219ce:	bf54      	ite	pl
 80219d0:	f000 000f 	andpl.w	r0, r0, #15
 80219d4:	1100      	asrmi	r0, r0, #4
 80219d6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80219da:	b2c0      	uxtb	r0, r0
 80219dc:	2a00      	cmp	r2, #0
 80219de:	f000 80e1 	beq.w	8021ba4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 80219e2:	f103 0e01 	add.w	lr, r3, #1
 80219e6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80219ea:	f01e 0f01 	tst.w	lr, #1
 80219ee:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80219f2:	bf0c      	ite	eq
 80219f4:	f00c 0c0f 	andeq.w	ip, ip, #15
 80219f8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80219fc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021a00:	fa5f f48c 	uxtb.w	r4, ip
 8021a04:	9410      	str	r4, [sp, #64]	; 0x40
 8021a06:	b1f9      	cbz	r1, 8021a48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8021a08:	4453      	add	r3, sl
 8021a0a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021a0e:	07dc      	lsls	r4, r3, #31
 8021a10:	f103 0301 	add.w	r3, r3, #1
 8021a14:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021a18:	bf54      	ite	pl
 8021a1a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021a1e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021a22:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021a26:	fa5f f48c 	uxtb.w	r4, ip
 8021a2a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021a2e:	940a      	str	r4, [sp, #40]	; 0x28
 8021a30:	07dc      	lsls	r4, r3, #31
 8021a32:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021a36:	bf54      	ite	pl
 8021a38:	f00c 030f 	andpl.w	r3, ip, #15
 8021a3c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8021a40:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021a44:	b2db      	uxtb	r3, r3
 8021a46:	9311      	str	r3, [sp, #68]	; 0x44
 8021a48:	b292      	uxth	r2, r2
 8021a4a:	b289      	uxth	r1, r1
 8021a4c:	0113      	lsls	r3, r2, #4
 8021a4e:	fb02 fc01 	mul.w	ip, r2, r1
 8021a52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021a54:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021a58:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8021a5c:	eba3 030c 	sub.w	r3, r3, ip
 8021a60:	b289      	uxth	r1, r1
 8021a62:	b29b      	uxth	r3, r3
 8021a64:	ebae 0e01 	sub.w	lr, lr, r1
 8021a68:	4353      	muls	r3, r2
 8021a6a:	fa1f fe8e 	uxth.w	lr, lr
 8021a6e:	fb00 320e 	mla	r2, r0, lr, r3
 8021a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a74:	fb01 2203 	mla	r2, r1, r3, r2
 8021a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021a7a:	fb0c 2203 	mla	r2, ip, r3, r2
 8021a7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021a82:	2a00      	cmp	r2, #0
 8021a84:	d039      	beq.n	8021afa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021a86:	4bbd      	ldr	r3, [pc, #756]	; (8021d7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8021a88:	6819      	ldr	r1, [r3, #0]
 8021a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a8c:	fa5f fc81 	uxtb.w	ip, r1
 8021a90:	435a      	muls	r2, r3
 8021a92:	1c53      	adds	r3, r2, #1
 8021a94:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021a98:	1212      	asrs	r2, r2, #8
 8021a9a:	b290      	uxth	r0, r2
 8021a9c:	43d2      	mvns	r2, r2
 8021a9e:	fb1c fc00 	smulbb	ip, ip, r0
 8021aa2:	b2d3      	uxtb	r3, r2
 8021aa4:	f899 2000 	ldrb.w	r2, [r9]
 8021aa8:	fb02 c203 	mla	r2, r2, r3, ip
 8021aac:	b292      	uxth	r2, r2
 8021aae:	f102 0c01 	add.w	ip, r2, #1
 8021ab2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021ab6:	f899 c001 	ldrb.w	ip, [r9, #1]
 8021aba:	fb1c fc03 	smulbb	ip, ip, r3
 8021abe:	1212      	asrs	r2, r2, #8
 8021ac0:	f889 2000 	strb.w	r2, [r9]
 8021ac4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8021ac8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8021acc:	fb02 c200 	mla	r2, r2, r0, ip
 8021ad0:	b292      	uxth	r2, r2
 8021ad2:	f102 0c01 	add.w	ip, r2, #1
 8021ad6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021ada:	1212      	asrs	r2, r2, #8
 8021adc:	f889 2001 	strb.w	r2, [r9, #1]
 8021ae0:	f899 2002 	ldrb.w	r2, [r9, #2]
 8021ae4:	fb12 f303 	smulbb	r3, r2, r3
 8021ae8:	fb01 3300 	mla	r3, r1, r0, r3
 8021aec:	b29b      	uxth	r3, r3
 8021aee:	1c5a      	adds	r2, r3, #1
 8021af0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021af4:	121b      	asrs	r3, r3, #8
 8021af6:	f889 3002 	strb.w	r3, [r9, #2]
 8021afa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021afc:	f109 0903 	add.w	r9, r9, #3
 8021b00:	441d      	add	r5, r3
 8021b02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021b04:	441e      	add	r6, r3
 8021b06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021b08:	3b01      	subs	r3, #1
 8021b0a:	930d      	str	r3, [sp, #52]	; 0x34
 8021b0c:	e740      	b.n	8021990 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8021b0e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021b10:	f108 0803 	add.w	r8, r8, #3
 8021b14:	441d      	add	r5, r3
 8021b16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021b18:	441e      	add	r6, r3
 8021b1a:	9b08      	ldr	r3, [sp, #32]
 8021b1c:	3b01      	subs	r3, #1
 8021b1e:	9308      	str	r3, [sp, #32]
 8021b20:	e6ef      	b.n	8021902 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021b22:	f47f aeff 	bne.w	8021924 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8021b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	f340 8122 	ble.w	8021d72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8021b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b34:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021b38:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021b3c:	eef0 6a48 	vmov.f32	s13, s16
 8021b40:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021b44:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021b48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b4c:	ee16 5a90 	vmov	r5, s13
 8021b50:	eef0 6a68 	vmov.f32	s13, s17
 8021b54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b58:	ee16 6a90 	vmov	r6, s13
 8021b5c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021b60:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021b64:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021b68:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021b6c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021b70:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021b74:	ee18 2a10 	vmov	r2, s16
 8021b78:	eeb0 8a47 	vmov.f32	s16, s14
 8021b7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b80:	ee18 2a90 	vmov	r2, s17
 8021b84:	932b      	str	r3, [sp, #172]	; 0xac
 8021b86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b88:	eef0 8a67 	vmov.f32	s17, s15
 8021b8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b90:	932c      	str	r3, [sp, #176]	; 0xb0
 8021b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021b96:	3b01      	subs	r3, #1
 8021b98:	930c      	str	r3, [sp, #48]	; 0x30
 8021b9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b9c:	bf08      	it	eq
 8021b9e:	4613      	moveq	r3, r2
 8021ba0:	9308      	str	r3, [sp, #32]
 8021ba2:	e6a7      	b.n	80218f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8021ba4:	2900      	cmp	r1, #0
 8021ba6:	f43f af4f 	beq.w	8021a48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8021baa:	4453      	add	r3, sl
 8021bac:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021bb0:	07db      	lsls	r3, r3, #31
 8021bb2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021bb6:	bf54      	ite	pl
 8021bb8:	f00c 030f 	andpl.w	r3, ip, #15
 8021bbc:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8021bc0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021bc4:	b2db      	uxtb	r3, r3
 8021bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8021bc8:	e73e      	b.n	8021a48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8021bca:	1c44      	adds	r4, r0, #1
 8021bcc:	d195      	bne.n	8021afa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021bce:	4583      	cmp	fp, r0
 8021bd0:	dd93      	ble.n	8021afa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021bd2:	1c5c      	adds	r4, r3, #1
 8021bd4:	db91      	blt.n	8021afa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021bd6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021bd8:	429c      	cmp	r4, r3
 8021bda:	dd8e      	ble.n	8021afa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021bdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021bde:	9002      	str	r0, [sp, #8]
 8021be0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021be2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8021be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021be8:	463a      	mov	r2, r7
 8021bea:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021bee:	e9cd b300 	strd	fp, r3, [sp]
 8021bf2:	4649      	mov	r1, r9
 8021bf4:	4653      	mov	r3, sl
 8021bf6:	f7ff fd61 	bl	80216bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8021bfa:	e77e      	b.n	8021afa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021bfc:	142a      	asrs	r2, r5, #16
 8021bfe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021c02:	1433      	asrs	r3, r6, #16
 8021c04:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021c08:	fb0a 2303 	mla	r3, sl, r3, r2
 8021c0c:	085a      	lsrs	r2, r3, #1
 8021c0e:	07dc      	lsls	r4, r3, #31
 8021c10:	5cba      	ldrb	r2, [r7, r2]
 8021c12:	bf54      	ite	pl
 8021c14:	f002 020f 	andpl.w	r2, r2, #15
 8021c18:	1112      	asrmi	r2, r2, #4
 8021c1a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021c1e:	b2d2      	uxtb	r2, r2
 8021c20:	2900      	cmp	r1, #0
 8021c22:	f000 8093 	beq.w	8021d4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8021c26:	1c5c      	adds	r4, r3, #1
 8021c28:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8021c2c:	07e4      	lsls	r4, r4, #31
 8021c2e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021c32:	bf54      	ite	pl
 8021c34:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021c38:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021c3c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021c40:	fa5f f48c 	uxtb.w	r4, ip
 8021c44:	9412      	str	r4, [sp, #72]	; 0x48
 8021c46:	b300      	cbz	r0, 8021c8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8021c48:	4453      	add	r3, sl
 8021c4a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021c4e:	07dc      	lsls	r4, r3, #31
 8021c50:	f103 0301 	add.w	r3, r3, #1
 8021c54:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021c58:	bf54      	ite	pl
 8021c5a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021c5e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021c62:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021c66:	fa5f f48c 	uxtb.w	r4, ip
 8021c6a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021c6e:	940b      	str	r4, [sp, #44]	; 0x2c
 8021c70:	07dc      	lsls	r4, r3, #31
 8021c72:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021c76:	bf54      	ite	pl
 8021c78:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021c7c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021c80:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021c84:	fa5f f38c 	uxtb.w	r3, ip
 8021c88:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c8a:	b289      	uxth	r1, r1
 8021c8c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021c8e:	b280      	uxth	r0, r0
 8021c90:	fb01 f300 	mul.w	r3, r1, r0
 8021c94:	0109      	lsls	r1, r1, #4
 8021c96:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8021c9a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8021c9e:	1ac9      	subs	r1, r1, r3
 8021ca0:	b280      	uxth	r0, r0
 8021ca2:	b289      	uxth	r1, r1
 8021ca4:	ebac 0c00 	sub.w	ip, ip, r0
 8021ca8:	4361      	muls	r1, r4
 8021caa:	fa1f fc8c 	uxth.w	ip, ip
 8021cae:	fb02 120c 	mla	r2, r2, ip, r1
 8021cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021cb4:	fb00 2001 	mla	r0, r0, r1, r2
 8021cb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021cba:	fb03 0302 	mla	r3, r3, r2, r0
 8021cbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d039      	beq.n	8021d3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8021cc6:	4a2d      	ldr	r2, [pc, #180]	; (8021d7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8021cc8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8021ccc:	6810      	ldr	r0, [r2, #0]
 8021cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021cd0:	fa5f fc80 	uxtb.w	ip, r0
 8021cd4:	4353      	muls	r3, r2
 8021cd6:	1c5a      	adds	r2, r3, #1
 8021cd8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021cdc:	121b      	asrs	r3, r3, #8
 8021cde:	b29a      	uxth	r2, r3
 8021ce0:	43db      	mvns	r3, r3
 8021ce2:	fb1c fc02 	smulbb	ip, ip, r2
 8021ce6:	b2db      	uxtb	r3, r3
 8021ce8:	fb01 c103 	mla	r1, r1, r3, ip
 8021cec:	b289      	uxth	r1, r1
 8021cee:	f101 0c01 	add.w	ip, r1, #1
 8021cf2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8021cf6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8021cfa:	fb1c fc03 	smulbb	ip, ip, r3
 8021cfe:	1209      	asrs	r1, r1, #8
 8021d00:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8021d04:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8021d08:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8021d0c:	fb01 c102 	mla	r1, r1, r2, ip
 8021d10:	b289      	uxth	r1, r1
 8021d12:	f101 0c01 	add.w	ip, r1, #1
 8021d16:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8021d1a:	1209      	asrs	r1, r1, #8
 8021d1c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8021d20:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8021d24:	fb11 f303 	smulbb	r3, r1, r3
 8021d28:	fb00 3002 	mla	r0, r0, r2, r3
 8021d2c:	b280      	uxth	r0, r0
 8021d2e:	1c42      	adds	r2, r0, #1
 8021d30:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021d34:	1200      	asrs	r0, r0, #8
 8021d36:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8021d3a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021d3c:	f10e 0e03 	add.w	lr, lr, #3
 8021d40:	f109 39ff 	add.w	r9, r9, #4294967295
 8021d44:	441d      	add	r5, r3
 8021d46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021d48:	441e      	add	r6, r3
 8021d4a:	e604      	b.n	8021956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8021d4c:	2800      	cmp	r0, #0
 8021d4e:	d09c      	beq.n	8021c8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8021d50:	4453      	add	r3, sl
 8021d52:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021d56:	07db      	lsls	r3, r3, #31
 8021d58:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021d5c:	bf54      	ite	pl
 8021d5e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021d62:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021d66:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021d6a:	fa5f f38c 	uxtb.w	r3, ip
 8021d6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021d70:	e78b      	b.n	8021c8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8021d72:	b017      	add	sp, #92	; 0x5c
 8021d74:	ecbd 8b08 	vpop	{d8-d11}
 8021d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d7c:	2000bc90 	.word	0x2000bc90

08021d80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8021d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d84:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8021d88:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021d8c:	2800      	cmp	r0, #0
 8021d8e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8021d92:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8021d96:	fb0c 0e03 	mla	lr, ip, r3, r0
 8021d9a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8021d9e:	db6b      	blt.n	8021e78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8021da0:	4580      	cmp	r8, r0
 8021da2:	dd69      	ble.n	8021e78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8021da4:	f1bc 0f00 	cmp.w	ip, #0
 8021da8:	db66      	blt.n	8021e78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8021daa:	45e1      	cmp	r9, ip
 8021dac:	dd64      	ble.n	8021e78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8021dae:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021db2:	f01e 0f01 	tst.w	lr, #1
 8021db6:	5d16      	ldrb	r6, [r2, r4]
 8021db8:	bf0c      	ite	eq
 8021dba:	f006 060f 	andeq.w	r6, r6, #15
 8021dbe:	1136      	asrne	r6, r6, #4
 8021dc0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021dc4:	b2f6      	uxtb	r6, r6
 8021dc6:	f110 0a01 	adds.w	sl, r0, #1
 8021dca:	d457      	bmi.n	8021e7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8021dcc:	45d0      	cmp	r8, sl
 8021dce:	dd55      	ble.n	8021e7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8021dd0:	f1bc 0f00 	cmp.w	ip, #0
 8021dd4:	db52      	blt.n	8021e7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8021dd6:	45e1      	cmp	r9, ip
 8021dd8:	dd50      	ble.n	8021e7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8021dda:	2f00      	cmp	r7, #0
 8021ddc:	f000 80a5 	beq.w	8021f2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8021de0:	f10e 0b01 	add.w	fp, lr, #1
 8021de4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8021de8:	f01b 0f01 	tst.w	fp, #1
 8021dec:	5d14      	ldrb	r4, [r2, r4]
 8021dee:	bf0c      	ite	eq
 8021df0:	f004 040f 	andeq.w	r4, r4, #15
 8021df4:	1124      	asrne	r4, r4, #4
 8021df6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021dfa:	b2e4      	uxtb	r4, r4
 8021dfc:	2d00      	cmp	r5, #0
 8021dfe:	f000 808f 	beq.w	8021f20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8021e02:	2800      	cmp	r0, #0
 8021e04:	f10c 0c01 	add.w	ip, ip, #1
 8021e08:	db3c      	blt.n	8021e84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8021e0a:	4580      	cmp	r8, r0
 8021e0c:	dd3a      	ble.n	8021e84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8021e0e:	f1bc 0f00 	cmp.w	ip, #0
 8021e12:	db37      	blt.n	8021e84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8021e14:	45e1      	cmp	r9, ip
 8021e16:	dd35      	ble.n	8021e84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8021e18:	eb03 0b0e 	add.w	fp, r3, lr
 8021e1c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8021e20:	f01b 0f01 	tst.w	fp, #1
 8021e24:	5c10      	ldrb	r0, [r2, r0]
 8021e26:	bf0c      	ite	eq
 8021e28:	f000 000f 	andeq.w	r0, r0, #15
 8021e2c:	1100      	asrne	r0, r0, #4
 8021e2e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021e32:	b2c0      	uxtb	r0, r0
 8021e34:	f1ba 0f00 	cmp.w	sl, #0
 8021e38:	db26      	blt.n	8021e88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8021e3a:	45d0      	cmp	r8, sl
 8021e3c:	dd24      	ble.n	8021e88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8021e3e:	f1bc 0f00 	cmp.w	ip, #0
 8021e42:	db21      	blt.n	8021e88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8021e44:	45e1      	cmp	r9, ip
 8021e46:	dd1f      	ble.n	8021e88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8021e48:	b307      	cbz	r7, 8021e8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8021e4a:	3301      	adds	r3, #1
 8021e4c:	449e      	add	lr, r3
 8021e4e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021e52:	f01e 0f01 	tst.w	lr, #1
 8021e56:	5cd3      	ldrb	r3, [r2, r3]
 8021e58:	bf0c      	ite	eq
 8021e5a:	f003 030f 	andeq.w	r3, r3, #15
 8021e5e:	111b      	asrne	r3, r3, #4
 8021e60:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021e64:	b2db      	uxtb	r3, r3
 8021e66:	2f0f      	cmp	r7, #15
 8021e68:	d911      	bls.n	8021e8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8021e6a:	4b32      	ldr	r3, [pc, #200]	; (8021f34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8021e6c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021e70:	4a31      	ldr	r2, [pc, #196]	; (8021f38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8021e72:	4832      	ldr	r0, [pc, #200]	; (8021f3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8021e74:	f001 fff8 	bl	8023e68 <__assert_func>
 8021e78:	2600      	movs	r6, #0
 8021e7a:	e7a4      	b.n	8021dc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8021e7c:	2400      	movs	r4, #0
 8021e7e:	e7bd      	b.n	8021dfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8021e80:	463c      	mov	r4, r7
 8021e82:	e7be      	b.n	8021e02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8021e84:	2000      	movs	r0, #0
 8021e86:	e7d5      	b.n	8021e34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8021e88:	2300      	movs	r3, #0
 8021e8a:	e7ec      	b.n	8021e66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8021e8c:	463b      	mov	r3, r7
 8021e8e:	2d0f      	cmp	r5, #15
 8021e90:	d8eb      	bhi.n	8021e6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8021e92:	b2bf      	uxth	r7, r7
 8021e94:	b2ad      	uxth	r5, r5
 8021e96:	fb07 f205 	mul.w	r2, r7, r5
 8021e9a:	013f      	lsls	r7, r7, #4
 8021e9c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8021ea0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8021ea4:	1abf      	subs	r7, r7, r2
 8021ea6:	b2ad      	uxth	r5, r5
 8021ea8:	b2bf      	uxth	r7, r7
 8021eaa:	ebac 0c05 	sub.w	ip, ip, r5
 8021eae:	437c      	muls	r4, r7
 8021eb0:	fa1f fc8c 	uxth.w	ip, ip
 8021eb4:	fb06 440c 	mla	r4, r6, ip, r4
 8021eb8:	fb05 4400 	mla	r4, r5, r0, r4
 8021ebc:	fb02 4303 	mla	r3, r2, r3, r4
 8021ec0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021ec4:	b353      	cbz	r3, 8021f1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8021ec6:	4a1e      	ldr	r2, [pc, #120]	; (8021f40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8021ec8:	7808      	ldrb	r0, [r1, #0]
 8021eca:	6814      	ldr	r4, [r2, #0]
 8021ecc:	b29a      	uxth	r2, r3
 8021ece:	43db      	mvns	r3, r3
 8021ed0:	b2e5      	uxtb	r5, r4
 8021ed2:	b2db      	uxtb	r3, r3
 8021ed4:	fb15 f502 	smulbb	r5, r5, r2
 8021ed8:	fb00 5003 	mla	r0, r0, r3, r5
 8021edc:	b280      	uxth	r0, r0
 8021ede:	1c45      	adds	r5, r0, #1
 8021ee0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021ee4:	784d      	ldrb	r5, [r1, #1]
 8021ee6:	fb15 f503 	smulbb	r5, r5, r3
 8021eea:	1200      	asrs	r0, r0, #8
 8021eec:	7008      	strb	r0, [r1, #0]
 8021eee:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8021ef2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8021ef6:	fb00 5002 	mla	r0, r0, r2, r5
 8021efa:	b280      	uxth	r0, r0
 8021efc:	1c45      	adds	r5, r0, #1
 8021efe:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021f02:	1200      	asrs	r0, r0, #8
 8021f04:	7048      	strb	r0, [r1, #1]
 8021f06:	7888      	ldrb	r0, [r1, #2]
 8021f08:	fb10 f303 	smulbb	r3, r0, r3
 8021f0c:	fb04 3202 	mla	r2, r4, r2, r3
 8021f10:	b292      	uxth	r2, r2
 8021f12:	1c53      	adds	r3, r2, #1
 8021f14:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021f18:	1212      	asrs	r2, r2, #8
 8021f1a:	708a      	strb	r2, [r1, #2]
 8021f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f20:	2f0f      	cmp	r7, #15
 8021f22:	d8a2      	bhi.n	8021e6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8021f24:	462b      	mov	r3, r5
 8021f26:	4628      	mov	r0, r5
 8021f28:	e7b3      	b.n	8021e92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8021f2a:	2d00      	cmp	r5, #0
 8021f2c:	d1a8      	bne.n	8021e80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8021f2e:	462c      	mov	r4, r5
 8021f30:	e7f8      	b.n	8021f24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8021f32:	bf00      	nop
 8021f34:	0802877f 	.word	0x0802877f
 8021f38:	08028c76 	.word	0x08028c76
 8021f3c:	08028848 	.word	0x08028848
 8021f40:	2000bc90 	.word	0x2000bc90

08021f44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f48:	ed2d 8b08 	vpush	{d8-d11}
 8021f4c:	b095      	sub	sp, #84	; 0x54
 8021f4e:	461c      	mov	r4, r3
 8021f50:	eeb0 aa40 	vmov.f32	s20, s0
 8021f54:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8021f58:	eef0 9a60 	vmov.f32	s19, s1
 8021f5c:	920e      	str	r2, [sp, #56]	; 0x38
 8021f5e:	eeb0 9a41 	vmov.f32	s18, s2
 8021f62:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021f64:	eeb0 8a62 	vmov.f32	s16, s5
 8021f68:	9307      	str	r3, [sp, #28]
 8021f6a:	eef0 8a43 	vmov.f32	s17, s6
 8021f6e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8021f72:	eef0 ba44 	vmov.f32	s23, s8
 8021f76:	9013      	str	r0, [sp, #76]	; 0x4c
 8021f78:	eeb0 ba64 	vmov.f32	s22, s9
 8021f7c:	9109      	str	r1, [sp, #36]	; 0x24
 8021f7e:	eef0 aa45 	vmov.f32	s21, s10
 8021f82:	9308      	str	r3, [sp, #32]
 8021f84:	6850      	ldr	r0, [r2, #4]
 8021f86:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8021f8a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8021f8e:	fb00 1803 	mla	r8, r0, r3, r1
 8021f92:	6813      	ldr	r3, [r2, #0]
 8021f94:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021f98:	4498      	add	r8, r3
 8021f9a:	9b07      	ldr	r3, [sp, #28]
 8021f9c:	3301      	adds	r3, #1
 8021f9e:	f023 0301 	bic.w	r3, r3, #1
 8021fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8021fa4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021fa6:	681f      	ldr	r7, [r3, #0]
 8021fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021faa:	2b00      	cmp	r3, #0
 8021fac:	dc03      	bgt.n	8021fb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8021fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021fb0:	2b00      	cmp	r3, #0
 8021fb2:	f340 8238 	ble.w	8022426 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8021fb6:	2c00      	cmp	r4, #0
 8021fb8:	f340 8109 	ble.w	80221ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8021fbc:	142a      	asrs	r2, r5, #16
 8021fbe:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021fc2:	d42b      	bmi.n	802201c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021fc4:	1c51      	adds	r1, r2, #1
 8021fc6:	9807      	ldr	r0, [sp, #28]
 8021fc8:	4288      	cmp	r0, r1
 8021fca:	dd2a      	ble.n	8022022 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	db28      	blt.n	8022022 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8021fd0:	1c59      	adds	r1, r3, #1
 8021fd2:	9808      	ldr	r0, [sp, #32]
 8021fd4:	4288      	cmp	r0, r1
 8021fd6:	dd24      	ble.n	8022022 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8021fd8:	1e63      	subs	r3, r4, #1
 8021fda:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021fdc:	fb02 5203 	mla	r2, r2, r3, r5
 8021fe0:	1412      	asrs	r2, r2, #16
 8021fe2:	d429      	bmi.n	8022038 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021fe4:	3201      	adds	r2, #1
 8021fe6:	9907      	ldr	r1, [sp, #28]
 8021fe8:	4291      	cmp	r1, r2
 8021fea:	dd25      	ble.n	8022038 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021fec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021fee:	fb02 6303 	mla	r3, r2, r3, r6
 8021ff2:	141b      	asrs	r3, r3, #16
 8021ff4:	d420      	bmi.n	8022038 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021ff6:	3301      	adds	r3, #1
 8021ff8:	9a08      	ldr	r2, [sp, #32]
 8021ffa:	429a      	cmp	r2, r3
 8021ffc:	dd1c      	ble.n	8022038 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021ffe:	f108 0e03 	add.w	lr, r8, #3
 8022002:	46a1      	mov	r9, r4
 8022004:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022008:	f1b9 0f00 	cmp.w	r9, #0
 802200c:	f300 8155 	bgt.w	80222ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8022010:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022014:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022018:	44a0      	add	r8, r4
 802201a:	e0da      	b.n	80221d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802201c:	1c50      	adds	r0, r2, #1
 802201e:	f040 80ce 	bne.w	80221be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022022:	9907      	ldr	r1, [sp, #28]
 8022024:	4291      	cmp	r1, r2
 8022026:	f340 80ca 	ble.w	80221be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802202a:	1c59      	adds	r1, r3, #1
 802202c:	f2c0 80c7 	blt.w	80221be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022030:	9a08      	ldr	r2, [sp, #32]
 8022032:	4293      	cmp	r3, r2
 8022034:	f280 80c3 	bge.w	80221be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022038:	46a3      	mov	fp, r4
 802203a:	46c1      	mov	r9, r8
 802203c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022040:	f1bb 0f00 	cmp.w	fp, #0
 8022044:	dde4      	ble.n	8022010 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8022046:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802204a:	1428      	asrs	r0, r5, #16
 802204c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022050:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022054:	920a      	str	r2, [sp, #40]	; 0x28
 8022056:	f100 8116 	bmi.w	8022286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802205a:	f100 0c01 	add.w	ip, r0, #1
 802205e:	9a07      	ldr	r2, [sp, #28]
 8022060:	4562      	cmp	r2, ip
 8022062:	f340 8112 	ble.w	802228a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022066:	2b00      	cmp	r3, #0
 8022068:	f2c0 810f 	blt.w	802228a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802206c:	f103 0c01 	add.w	ip, r3, #1
 8022070:	9a08      	ldr	r2, [sp, #32]
 8022072:	4562      	cmp	r2, ip
 8022074:	f340 8109 	ble.w	802228a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022078:	fb03 030a 	mla	r3, r3, sl, r0
 802207c:	0858      	lsrs	r0, r3, #1
 802207e:	07da      	lsls	r2, r3, #31
 8022080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022082:	5c38      	ldrb	r0, [r7, r0]
 8022084:	bf54      	ite	pl
 8022086:	f000 000f 	andpl.w	r0, r0, #15
 802208a:	1100      	asrmi	r0, r0, #4
 802208c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022090:	b2c0      	uxtb	r0, r0
 8022092:	2a00      	cmp	r2, #0
 8022094:	f000 80dd 	beq.w	8022252 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8022098:	f103 0e01 	add.w	lr, r3, #1
 802209c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80220a0:	f01e 0f01 	tst.w	lr, #1
 80220a4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80220a8:	bf0c      	ite	eq
 80220aa:	f00c 0c0f 	andeq.w	ip, ip, #15
 80220ae:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80220b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80220b6:	fa5f fc8c 	uxtb.w	ip, ip
 80220ba:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80220be:	b301      	cbz	r1, 8022102 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80220c0:	4453      	add	r3, sl
 80220c2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80220c6:	07da      	lsls	r2, r3, #31
 80220c8:	f103 0301 	add.w	r3, r3, #1
 80220cc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80220d0:	bf54      	ite	pl
 80220d2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80220d6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80220da:	07da      	lsls	r2, r3, #31
 80220dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80220e0:	fa5f fc8c 	uxtb.w	ip, ip
 80220e4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80220e8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80220ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80220f0:	bf54      	ite	pl
 80220f2:	f00c 030f 	andpl.w	r3, ip, #15
 80220f6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80220fa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80220fe:	b2db      	uxtb	r3, r3
 8022100:	9310      	str	r3, [sp, #64]	; 0x40
 8022102:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022106:	b289      	uxth	r1, r1
 8022108:	fb02 f301 	mul.w	r3, r2, r1
 802210c:	0112      	lsls	r2, r2, #4
 802210e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022112:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022116:	1ad2      	subs	r2, r2, r3
 8022118:	fa1f fe81 	uxth.w	lr, r1
 802211c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802211e:	b292      	uxth	r2, r2
 8022120:	ebac 0c0e 	sub.w	ip, ip, lr
 8022124:	434a      	muls	r2, r1
 8022126:	fa1f fc8c 	uxth.w	ip, ip
 802212a:	fb00 200c 	mla	r0, r0, ip, r2
 802212e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022130:	fb0e 0002 	mla	r0, lr, r2, r0
 8022134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022136:	fb03 0002 	mla	r0, r3, r2, r0
 802213a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802213e:	b3a8      	cbz	r0, 80221ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022140:	4bbb      	ldr	r3, [pc, #748]	; (8022430 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8022142:	28ff      	cmp	r0, #255	; 0xff
 8022144:	681b      	ldr	r3, [r3, #0]
 8022146:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 802214a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 802214e:	b2db      	uxtb	r3, r3
 8022150:	f000 8092 	beq.w	8022278 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8022154:	b282      	uxth	r2, r0
 8022156:	43c0      	mvns	r0, r0
 8022158:	f899 e000 	ldrb.w	lr, [r9]
 802215c:	fb13 f302 	smulbb	r3, r3, r2
 8022160:	b2c0      	uxtb	r0, r0
 8022162:	fb11 f102 	smulbb	r1, r1, r2
 8022166:	fb0e 3300 	mla	r3, lr, r0, r3
 802216a:	fb1c f202 	smulbb	r2, ip, r2
 802216e:	b29b      	uxth	r3, r3
 8022170:	f103 0e01 	add.w	lr, r3, #1
 8022174:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022178:	121b      	asrs	r3, r3, #8
 802217a:	f889 3000 	strb.w	r3, [r9]
 802217e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022182:	fb03 1100 	mla	r1, r3, r0, r1
 8022186:	b289      	uxth	r1, r1
 8022188:	1c4b      	adds	r3, r1, #1
 802218a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802218e:	f899 3002 	ldrb.w	r3, [r9, #2]
 8022192:	fb03 2000 	mla	r0, r3, r0, r2
 8022196:	1209      	asrs	r1, r1, #8
 8022198:	b280      	uxth	r0, r0
 802219a:	f889 1001 	strb.w	r1, [r9, #1]
 802219e:	f100 0c01 	add.w	ip, r0, #1
 80221a2:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80221a6:	1200      	asrs	r0, r0, #8
 80221a8:	f889 0002 	strb.w	r0, [r9, #2]
 80221ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80221ae:	f109 0903 	add.w	r9, r9, #3
 80221b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80221b6:	441d      	add	r5, r3
 80221b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80221ba:	441e      	add	r6, r3
 80221bc:	e740      	b.n	8022040 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80221be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80221c0:	3c01      	subs	r4, #1
 80221c2:	f108 0803 	add.w	r8, r8, #3
 80221c6:	441d      	add	r5, r3
 80221c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80221ca:	441e      	add	r6, r3
 80221cc:	e6f3      	b.n	8021fb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80221ce:	f47f af03 	bne.w	8021fd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80221d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221d4:	2b00      	cmp	r3, #0
 80221d6:	f340 8126 	ble.w	8022426 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80221da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80221de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80221e0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80221e4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80221e8:	eef0 6a48 	vmov.f32	s13, s16
 80221ec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80221f0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80221f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80221f8:	ee16 5a90 	vmov	r5, s13
 80221fc:	eef0 6a68 	vmov.f32	s13, s17
 8022200:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022204:	ee16 6a90 	vmov	r6, s13
 8022208:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802220c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022210:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022214:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022218:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802221c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022220:	ee18 2a10 	vmov	r2, s16
 8022224:	eeb0 8a47 	vmov.f32	s16, s14
 8022228:	fb92 f3f3 	sdiv	r3, r2, r3
 802222c:	ee18 2a90 	vmov	r2, s17
 8022230:	9329      	str	r3, [sp, #164]	; 0xa4
 8022232:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022234:	eef0 8a67 	vmov.f32	s17, s15
 8022238:	fb92 f3f3 	sdiv	r3, r2, r3
 802223c:	932a      	str	r3, [sp, #168]	; 0xa8
 802223e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022242:	3b01      	subs	r3, #1
 8022244:	9309      	str	r3, [sp, #36]	; 0x24
 8022246:	bf08      	it	eq
 8022248:	4614      	moveq	r4, r2
 802224a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802224c:	bf18      	it	ne
 802224e:	461c      	movne	r4, r3
 8022250:	e6aa      	b.n	8021fa8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022252:	2900      	cmp	r1, #0
 8022254:	f43f af55 	beq.w	8022102 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022258:	4453      	add	r3, sl
 802225a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802225e:	07db      	lsls	r3, r3, #31
 8022260:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022264:	bf54      	ite	pl
 8022266:	f00c 030f 	andpl.w	r3, ip, #15
 802226a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802226e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022272:	b2db      	uxtb	r3, r3
 8022274:	930c      	str	r3, [sp, #48]	; 0x30
 8022276:	e744      	b.n	8022102 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022278:	f889 3000 	strb.w	r3, [r9]
 802227c:	f889 1001 	strb.w	r1, [r9, #1]
 8022280:	f889 c002 	strb.w	ip, [r9, #2]
 8022284:	e792      	b.n	80221ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022286:	1c42      	adds	r2, r0, #1
 8022288:	d190      	bne.n	80221ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802228a:	9a07      	ldr	r2, [sp, #28]
 802228c:	4282      	cmp	r2, r0
 802228e:	dd8d      	ble.n	80221ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022290:	1c5a      	adds	r2, r3, #1
 8022292:	db8b      	blt.n	80221ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022294:	9a08      	ldr	r2, [sp, #32]
 8022296:	429a      	cmp	r2, r3
 8022298:	dd88      	ble.n	80221ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802229a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802229c:	9105      	str	r1, [sp, #20]
 802229e:	4649      	mov	r1, r9
 80222a0:	9002      	str	r0, [sp, #8]
 80222a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80222a4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80222a8:	9b08      	ldr	r3, [sp, #32]
 80222aa:	463a      	mov	r2, r7
 80222ac:	9301      	str	r3, [sp, #4]
 80222ae:	9b07      	ldr	r3, [sp, #28]
 80222b0:	9300      	str	r3, [sp, #0]
 80222b2:	4653      	mov	r3, sl
 80222b4:	f7ff fd64 	bl	8021d80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80222b8:	e778      	b.n	80221ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80222ba:	142a      	asrs	r2, r5, #16
 80222bc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80222c0:	1433      	asrs	r3, r6, #16
 80222c2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80222c6:	fb0a 2303 	mla	r3, sl, r3, r2
 80222ca:	085a      	lsrs	r2, r3, #1
 80222cc:	07d9      	lsls	r1, r3, #31
 80222ce:	5cba      	ldrb	r2, [r7, r2]
 80222d0:	bf54      	ite	pl
 80222d2:	f002 020f 	andpl.w	r2, r2, #15
 80222d6:	1112      	asrmi	r2, r2, #4
 80222d8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80222dc:	b2d2      	uxtb	r2, r2
 80222de:	2800      	cmp	r0, #0
 80222e0:	f000 808a 	beq.w	80223f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 80222e4:	f103 0b01 	add.w	fp, r3, #1
 80222e8:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80222ec:	f01b 0f01 	tst.w	fp, #1
 80222f0:	5c79      	ldrb	r1, [r7, r1]
 80222f2:	bf0c      	ite	eq
 80222f4:	f001 010f 	andeq.w	r1, r1, #15
 80222f8:	1109      	asrne	r1, r1, #4
 80222fa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80222fe:	b2c9      	uxtb	r1, r1
 8022300:	9111      	str	r1, [sp, #68]	; 0x44
 8022302:	f1bc 0f00 	cmp.w	ip, #0
 8022306:	d019      	beq.n	802233c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8022308:	4453      	add	r3, sl
 802230a:	0859      	lsrs	r1, r3, #1
 802230c:	f013 0f01 	tst.w	r3, #1
 8022310:	f103 0301 	add.w	r3, r3, #1
 8022314:	5c79      	ldrb	r1, [r7, r1]
 8022316:	bf0c      	ite	eq
 8022318:	f001 010f 	andeq.w	r1, r1, #15
 802231c:	1109      	asrne	r1, r1, #4
 802231e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022322:	b2c9      	uxtb	r1, r1
 8022324:	910d      	str	r1, [sp, #52]	; 0x34
 8022326:	0859      	lsrs	r1, r3, #1
 8022328:	07db      	lsls	r3, r3, #31
 802232a:	5c79      	ldrb	r1, [r7, r1]
 802232c:	bf54      	ite	pl
 802232e:	f001 010f 	andpl.w	r1, r1, #15
 8022332:	1109      	asrmi	r1, r1, #4
 8022334:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022338:	b2c9      	uxtb	r1, r1
 802233a:	9112      	str	r1, [sp, #72]	; 0x48
 802233c:	b280      	uxth	r0, r0
 802233e:	fa1f fc8c 	uxth.w	ip, ip
 8022342:	fb00 f30c 	mul.w	r3, r0, ip
 8022346:	0100      	lsls	r0, r0, #4
 8022348:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802234c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022350:	1ac0      	subs	r0, r0, r3
 8022352:	fa1f fc8c 	uxth.w	ip, ip
 8022356:	b280      	uxth	r0, r0
 8022358:	eba1 010c 	sub.w	r1, r1, ip
 802235c:	fa1f fb81 	uxth.w	fp, r1
 8022360:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022362:	4348      	muls	r0, r1
 8022364:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022366:	fb02 020b 	mla	r2, r2, fp, r0
 802236a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802236e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022370:	fb03 c302 	mla	r3, r3, r2, ip
 8022374:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022378:	b3ab      	cbz	r3, 80223e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802237a:	4a2d      	ldr	r2, [pc, #180]	; (8022430 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802237c:	2bff      	cmp	r3, #255	; 0xff
 802237e:	6811      	ldr	r1, [r2, #0]
 8022380:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8022384:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8022388:	b2c9      	uxtb	r1, r1
 802238a:	d045      	beq.n	8022418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802238c:	b298      	uxth	r0, r3
 802238e:	43db      	mvns	r3, r3
 8022390:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8022394:	fb11 f100 	smulbb	r1, r1, r0
 8022398:	b2db      	uxtb	r3, r3
 802239a:	fb1c fc00 	smulbb	ip, ip, r0
 802239e:	fb02 1103 	mla	r1, r2, r3, r1
 80223a2:	fb1b f000 	smulbb	r0, fp, r0
 80223a6:	b289      	uxth	r1, r1
 80223a8:	1c4a      	adds	r2, r1, #1
 80223aa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80223ae:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80223b2:	fb02 cc03 	mla	ip, r2, r3, ip
 80223b6:	1209      	asrs	r1, r1, #8
 80223b8:	fa1f fc8c 	uxth.w	ip, ip
 80223bc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80223c0:	f10c 0201 	add.w	r2, ip, #1
 80223c4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80223c8:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 80223cc:	fb02 0303 	mla	r3, r2, r3, r0
 80223d0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80223d4:	b29b      	uxth	r3, r3
 80223d6:	f80e cc02 	strb.w	ip, [lr, #-2]
 80223da:	1c5a      	adds	r2, r3, #1
 80223dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80223e0:	121b      	asrs	r3, r3, #8
 80223e2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80223e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80223e8:	f10e 0e03 	add.w	lr, lr, #3
 80223ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80223f0:	441d      	add	r5, r3
 80223f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223f4:	441e      	add	r6, r3
 80223f6:	e607      	b.n	8022008 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 80223f8:	f1bc 0f00 	cmp.w	ip, #0
 80223fc:	d09e      	beq.n	802233c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80223fe:	4453      	add	r3, sl
 8022400:	0859      	lsrs	r1, r3, #1
 8022402:	07db      	lsls	r3, r3, #31
 8022404:	5c79      	ldrb	r1, [r7, r1]
 8022406:	bf54      	ite	pl
 8022408:	f001 010f 	andpl.w	r1, r1, #15
 802240c:	1109      	asrmi	r1, r1, #4
 802240e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022412:	b2c9      	uxtb	r1, r1
 8022414:	910d      	str	r1, [sp, #52]	; 0x34
 8022416:	e791      	b.n	802233c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8022418:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802241c:	f80e cc02 	strb.w	ip, [lr, #-2]
 8022420:	f80e bc01 	strb.w	fp, [lr, #-1]
 8022424:	e7df      	b.n	80223e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022426:	b015      	add	sp, #84	; 0x54
 8022428:	ecbd 8b08 	vpop	{d8-d11}
 802242c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022430:	2000bc90 	.word	0x2000bc90

08022434 <CRC_Lock>:
 8022434:	4a1d      	ldr	r2, [pc, #116]	; (80224ac <CRC_Lock+0x78>)
 8022436:	b530      	push	{r4, r5, lr}
 8022438:	6813      	ldr	r3, [r2, #0]
 802243a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802243e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8022442:	f023 0301 	bic.w	r3, r3, #1
 8022446:	6013      	str	r3, [r2, #0]
 8022448:	4b19      	ldr	r3, [pc, #100]	; (80224b0 <CRC_Lock+0x7c>)
 802244a:	681a      	ldr	r2, [r3, #0]
 802244c:	4022      	ands	r2, r4
 802244e:	42aa      	cmp	r2, r5
 8022450:	d005      	beq.n	802245e <CRC_Lock+0x2a>
 8022452:	681b      	ldr	r3, [r3, #0]
 8022454:	f24c 2270 	movw	r2, #49776	; 0xc270
 8022458:	4023      	ands	r3, r4
 802245a:	4293      	cmp	r3, r2
 802245c:	d11d      	bne.n	802249a <CRC_Lock+0x66>
 802245e:	4b15      	ldr	r3, [pc, #84]	; (80224b4 <CRC_Lock+0x80>)
 8022460:	681b      	ldr	r3, [r3, #0]
 8022462:	b9d3      	cbnz	r3, 802249a <CRC_Lock+0x66>
 8022464:	4a14      	ldr	r2, [pc, #80]	; (80224b8 <CRC_Lock+0x84>)
 8022466:	6813      	ldr	r3, [r2, #0]
 8022468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802246c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8022470:	d006      	beq.n	8022480 <CRC_Lock+0x4c>
 8022472:	6813      	ldr	r3, [r2, #0]
 8022474:	f240 4283 	movw	r2, #1155	; 0x483
 8022478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802247c:	4293      	cmp	r3, r2
 802247e:	d10c      	bne.n	802249a <CRC_Lock+0x66>
 8022480:	4b0e      	ldr	r3, [pc, #56]	; (80224bc <CRC_Lock+0x88>)
 8022482:	2201      	movs	r2, #1
 8022484:	601a      	str	r2, [r3, #0]
 8022486:	681a      	ldr	r2, [r3, #0]
 8022488:	2a00      	cmp	r2, #0
 802248a:	d1fc      	bne.n	8022486 <CRC_Lock+0x52>
 802248c:	4b0c      	ldr	r3, [pc, #48]	; (80224c0 <CRC_Lock+0x8c>)
 802248e:	6018      	str	r0, [r3, #0]
 8022490:	6818      	ldr	r0, [r3, #0]
 8022492:	1a43      	subs	r3, r0, r1
 8022494:	4258      	negs	r0, r3
 8022496:	4158      	adcs	r0, r3
 8022498:	bd30      	pop	{r4, r5, pc}
 802249a:	4b0a      	ldr	r3, [pc, #40]	; (80224c4 <CRC_Lock+0x90>)
 802249c:	2201      	movs	r2, #1
 802249e:	601a      	str	r2, [r3, #0]
 80224a0:	681a      	ldr	r2, [r3, #0]
 80224a2:	2a00      	cmp	r2, #0
 80224a4:	d1fc      	bne.n	80224a0 <CRC_Lock+0x6c>
 80224a6:	4b08      	ldr	r3, [pc, #32]	; (80224c8 <CRC_Lock+0x94>)
 80224a8:	e7f1      	b.n	802248e <CRC_Lock+0x5a>
 80224aa:	bf00      	nop
 80224ac:	e0002000 	.word	0xe0002000
 80224b0:	e000ed00 	.word	0xe000ed00
 80224b4:	e0042000 	.word	0xe0042000
 80224b8:	5c001000 	.word	0x5c001000
 80224bc:	58024c08 	.word	0x58024c08
 80224c0:	58024c00 	.word	0x58024c00
 80224c4:	40023008 	.word	0x40023008
 80224c8:	40023000 	.word	0x40023000

080224cc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80224cc:	6101      	str	r1, [r0, #16]
 80224ce:	4770      	bx	lr

080224d0 <_ZN8touchgfx8Gestures4tickEv>:
 80224d0:	7b83      	ldrb	r3, [r0, #14]
 80224d2:	b14b      	cbz	r3, 80224e8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80224d4:	8903      	ldrh	r3, [r0, #8]
 80224d6:	3301      	adds	r3, #1
 80224d8:	b29b      	uxth	r3, r3
 80224da:	2b07      	cmp	r3, #7
 80224dc:	8103      	strh	r3, [r0, #8]
 80224de:	bf81      	itttt	hi
 80224e0:	2300      	movhi	r3, #0
 80224e2:	8143      	strhhi	r3, [r0, #10]
 80224e4:	8183      	strhhi	r3, [r0, #12]
 80224e6:	7383      	strbhi	r3, [r0, #14]
 80224e8:	4770      	bx	lr
	...

080224ec <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80224ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80224f0:	4604      	mov	r4, r0
 80224f2:	4698      	mov	r8, r3
 80224f4:	8880      	ldrh	r0, [r0, #4]
 80224f6:	4617      	mov	r7, r2
 80224f8:	4b1d      	ldr	r3, [pc, #116]	; (8022570 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80224fa:	460e      	mov	r6, r1
 80224fc:	f8ad 0006 	strh.w	r0, [sp, #6]
 8022500:	eba8 0000 	sub.w	r0, r8, r0
 8022504:	9300      	str	r3, [sp, #0]
 8022506:	2300      	movs	r3, #0
 8022508:	b280      	uxth	r0, r0
 802250a:	8aa2      	ldrh	r2, [r4, #20]
 802250c:	f88d 3004 	strb.w	r3, [sp, #4]
 8022510:	b203      	sxth	r3, r0
 8022512:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8022516:	88e1      	ldrh	r1, [r4, #6]
 8022518:	2b00      	cmp	r3, #0
 802251a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802251e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022522:	bfb8      	it	lt
 8022524:	4240      	neglt	r0, r0
 8022526:	f8ad 500c 	strh.w	r5, [sp, #12]
 802252a:	bfb8      	it	lt
 802252c:	b203      	sxthlt	r3, r0
 802252e:	4293      	cmp	r3, r2
 8022530:	dc08      	bgt.n	8022544 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8022532:	1a69      	subs	r1, r5, r1
 8022534:	b289      	uxth	r1, r1
 8022536:	b20b      	sxth	r3, r1
 8022538:	2b00      	cmp	r3, #0
 802253a:	bfbc      	itt	lt
 802253c:	4249      	neglt	r1, r1
 802253e:	b20b      	sxthlt	r3, r1
 8022540:	429a      	cmp	r2, r3
 8022542:	da13      	bge.n	802256c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8022544:	6920      	ldr	r0, [r4, #16]
 8022546:	4669      	mov	r1, sp
 8022548:	eba8 0606 	sub.w	r6, r8, r6
 802254c:	1bef      	subs	r7, r5, r7
 802254e:	6803      	ldr	r3, [r0, #0]
 8022550:	685b      	ldr	r3, [r3, #4]
 8022552:	4798      	blx	r3
 8022554:	2300      	movs	r3, #0
 8022556:	2001      	movs	r0, #1
 8022558:	8166      	strh	r6, [r4, #10]
 802255a:	8123      	strh	r3, [r4, #8]
 802255c:	81a7      	strh	r7, [r4, #12]
 802255e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022562:	80e5      	strh	r5, [r4, #6]
 8022564:	73a0      	strb	r0, [r4, #14]
 8022566:	b004      	add	sp, #16
 8022568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802256c:	2000      	movs	r0, #0
 802256e:	e7fa      	b.n	8022566 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8022570:	0802791c 	.word	0x0802791c

08022574 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022576:	461e      	mov	r6, r3
 8022578:	1e4b      	subs	r3, r1, #1
 802257a:	b085      	sub	sp, #20
 802257c:	4604      	mov	r4, r0
 802257e:	2b01      	cmp	r3, #1
 8022580:	460d      	mov	r5, r1
 8022582:	4617      	mov	r7, r2
 8022584:	d84b      	bhi.n	802261e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8022586:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802258a:	1cd3      	adds	r3, r2, #3
 802258c:	b29b      	uxth	r3, r3
 802258e:	2b06      	cmp	r3, #6
 8022590:	d916      	bls.n	80225c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8022592:	f8df c098 	ldr.w	ip, [pc, #152]	; 802262c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8022596:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802259a:	f8cd c004 	str.w	ip, [sp, #4]
 802259e:	f04f 0c00 	mov.w	ip, #0
 80225a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80225a6:	6900      	ldr	r0, [r0, #16]
 80225a8:	f8ad 100c 	strh.w	r1, [sp, #12]
 80225ac:	a901      	add	r1, sp, #4
 80225ae:	f88d c008 	strb.w	ip, [sp, #8]
 80225b2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80225b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80225ba:	6803      	ldr	r3, [r0, #0]
 80225bc:	689b      	ldr	r3, [r3, #8]
 80225be:	4798      	blx	r3
 80225c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80225c4:	1cd3      	adds	r3, r2, #3
 80225c6:	b29b      	uxth	r3, r3
 80225c8:	2b06      	cmp	r3, #6
 80225ca:	d916      	bls.n	80225fa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80225cc:	f8df c05c 	ldr.w	ip, [pc, #92]	; 802262c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80225d0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80225d4:	f8cd c004 	str.w	ip, [sp, #4]
 80225d8:	f04f 0c01 	mov.w	ip, #1
 80225dc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80225e0:	6920      	ldr	r0, [r4, #16]
 80225e2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80225e6:	a901      	add	r1, sp, #4
 80225e8:	f88d c008 	strb.w	ip, [sp, #8]
 80225ec:	f8ad 200a 	strh.w	r2, [sp, #10]
 80225f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80225f4:	6803      	ldr	r3, [r0, #0]
 80225f6:	689b      	ldr	r3, [r3, #8]
 80225f8:	4798      	blx	r3
 80225fa:	4b0b      	ldr	r3, [pc, #44]	; (8022628 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 80225fc:	a901      	add	r1, sp, #4
 80225fe:	6920      	ldr	r0, [r4, #16]
 8022600:	9301      	str	r3, [sp, #4]
 8022602:	2300      	movs	r3, #0
 8022604:	f88d 5008 	strb.w	r5, [sp, #8]
 8022608:	f8ad 700a 	strh.w	r7, [sp, #10]
 802260c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022610:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022614:	6803      	ldr	r3, [r0, #0]
 8022616:	681b      	ldr	r3, [r3, #0]
 8022618:	4798      	blx	r3
 802261a:	b005      	add	sp, #20
 802261c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802261e:	2900      	cmp	r1, #0
 8022620:	d1eb      	bne.n	80225fa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022622:	80a2      	strh	r2, [r4, #4]
 8022624:	80c6      	strh	r6, [r0, #6]
 8022626:	e7e8      	b.n	80225fa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022628:	08027908 	.word	0x08027908
 802262c:	08027930 	.word	0x08027930

08022630 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8022630:	10c9      	asrs	r1, r1, #3
 8022632:	2900      	cmp	r1, #0
 8022634:	bfb8      	it	lt
 8022636:	4249      	neglt	r1, r1
 8022638:	2801      	cmp	r0, #1
 802263a:	d108      	bne.n	802264e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 802263c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8022640:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8022644:	4601      	mov	r1, r0
 8022646:	dd02      	ble.n	802264e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8022648:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802264c:	4770      	bx	lr
 802264e:	29ff      	cmp	r1, #255	; 0xff
 8022650:	bfa8      	it	ge
 8022652:	21ff      	movge	r1, #255	; 0xff
 8022654:	4608      	mov	r0, r1
 8022656:	4770      	bx	lr

08022658 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8022658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802265c:	688c      	ldr	r4, [r1, #8]
 802265e:	b087      	sub	sp, #28
 8022660:	4607      	mov	r7, r0
 8022662:	2c00      	cmp	r4, #0
 8022664:	db2b      	blt.n	80226be <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8022666:	6803      	ldr	r3, [r0, #0]
 8022668:	68da      	ldr	r2, [r3, #12]
 802266a:	42a2      	cmp	r2, r4
 802266c:	dd27      	ble.n	80226be <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802266e:	681a      	ldr	r2, [r3, #0]
 8022670:	691e      	ldr	r6, [r3, #16]
 8022672:	68cd      	ldr	r5, [r1, #12]
 8022674:	fb06 2604 	mla	r6, r6, r4, r2
 8022678:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802267c:	698a      	ldr	r2, [r1, #24]
 802267e:	f893 a004 	ldrb.w	sl, [r3, #4]
 8022682:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8022686:	9205      	str	r2, [sp, #20]
 8022688:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802268c:	9b05      	ldr	r3, [sp, #20]
 802268e:	6839      	ldr	r1, [r7, #0]
 8022690:	eb03 0c02 	add.w	ip, r3, r2
 8022694:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8022698:	6889      	ldr	r1, [r1, #8]
 802269a:	1898      	adds	r0, r3, r2
 802269c:	4288      	cmp	r0, r1
 802269e:	db02      	blt.n	80226a6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 80226a0:	1a8b      	subs	r3, r1, r2
 80226a2:	2b00      	cmp	r3, #0
 80226a4:	dd09      	ble.n	80226ba <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 80226a6:	6878      	ldr	r0, [r7, #4]
 80226a8:	6801      	ldr	r1, [r0, #0]
 80226aa:	9400      	str	r4, [sp, #0]
 80226ac:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80226b0:	4653      	mov	r3, sl
 80226b2:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80226b6:	4631      	mov	r1, r6
 80226b8:	47d8      	blx	fp
 80226ba:	3d01      	subs	r5, #1
 80226bc:	d1e4      	bne.n	8022688 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80226be:	b007      	add	sp, #28
 80226c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080226c4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80226c4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80226c8:	b90b      	cbnz	r3, 80226ce <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 80226ca:	f001 b974 	b.w	80239b6 <_ZN8touchgfx7Outline6lineToEii>
 80226ce:	4770      	bx	lr

080226d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80226d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80226d4:	4604      	mov	r4, r0
 80226d6:	2600      	movs	r6, #0
 80226d8:	4b8e      	ldr	r3, [pc, #568]	; (8022914 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 80226da:	f100 0518 	add.w	r5, r0, #24
 80226de:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80226e2:	b086      	sub	sp, #24
 80226e4:	4690      	mov	r8, r2
 80226e6:	e9c0 3100 	strd	r3, r1, [r0]
 80226ea:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80226ee:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80226f2:	4628      	mov	r0, r5
 80226f4:	f001 fb75 	bl	8023de2 <_ZN8touchgfx15RenderingBufferC1Ev>
 80226f8:	4638      	mov	r0, r7
 80226fa:	f000 fb45 	bl	8022d88 <_ZN8touchgfx7OutlineC1Ev>
 80226fe:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8022702:	f001 fb23 	bl	8023d4c <_ZN8touchgfx8ScanlineC1Ev>
 8022706:	2301      	movs	r3, #1
 8022708:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 802270c:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8022710:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022714:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8022718:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 802271c:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8022720:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8022724:	f7f4 fbe6 	bl	8016ef4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8022728:	b928      	cbnz	r0, 8022736 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 802272a:	4b7b      	ldr	r3, [pc, #492]	; (8022918 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802272c:	2118      	movs	r1, #24
 802272e:	4a7b      	ldr	r2, [pc, #492]	; (802291c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8022730:	487b      	ldr	r0, [pc, #492]	; (8022920 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8022732:	f001 fb99 	bl	8023e68 <__assert_func>
 8022736:	f9b8 2000 	ldrsh.w	r2, [r8]
 802273a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802273e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8022742:	4410      	add	r0, r2
 8022744:	9602      	str	r6, [sp, #8]
 8022746:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802274a:	b280      	uxth	r0, r0
 802274c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8022750:	fa0f fa80 	sxth.w	sl, r0
 8022754:	f1ba 0f00 	cmp.w	sl, #0
 8022758:	dd70      	ble.n	802283c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802275a:	4591      	cmp	r9, r2
 802275c:	dd6e      	ble.n	802283c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802275e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8022762:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8022766:	440b      	add	r3, r1
 8022768:	b29b      	uxth	r3, r3
 802276a:	b21e      	sxth	r6, r3
 802276c:	2e00      	cmp	r6, #0
 802276e:	dd65      	ble.n	802283c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022770:	458e      	cmp	lr, r1
 8022772:	dd63      	ble.n	802283c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8022774:	45d1      	cmp	r9, sl
 8022776:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802277a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802277e:	bfb8      	it	lt
 8022780:	fa1f f089 	uxthlt.w	r0, r9
 8022784:	45b6      	cmp	lr, r6
 8022786:	f8ad 2008 	strh.w	r2, [sp, #8]
 802278a:	bfb8      	it	lt
 802278c:	fa1f f38e 	uxthlt.w	r3, lr
 8022790:	1a80      	subs	r0, r0, r2
 8022792:	f8ad 100a 	strh.w	r1, [sp, #10]
 8022796:	1a5b      	subs	r3, r3, r1
 8022798:	f8ad 000c 	strh.w	r0, [sp, #12]
 802279c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80227a0:	f10d 0808 	add.w	r8, sp, #8
 80227a4:	ae04      	add	r6, sp, #16
 80227a6:	e898 0003 	ldmia.w	r8, {r0, r1}
 80227aa:	e886 0003 	stmia.w	r6, {r0, r1}
 80227ae:	f8dc 3000 	ldr.w	r3, [ip]
 80227b2:	4660      	mov	r0, ip
 80227b4:	4631      	mov	r1, r6
 80227b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80227b8:	4798      	blx	r3
 80227ba:	6861      	ldr	r1, [r4, #4]
 80227bc:	4640      	mov	r0, r8
 80227be:	3104      	adds	r1, #4
 80227c0:	f7f5 fa06 	bl	8017bd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80227c4:	4630      	mov	r0, r6
 80227c6:	f7f5 fa1b 	bl	8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80227ca:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80227ce:	f7f4 fb21 	bl	8016e14 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80227d2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 80227d6:	4638      	mov	r0, r7
 80227d8:	f000 fab2 	bl	8022d40 <_ZN8touchgfx7Outline5resetEv>
 80227dc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80227e0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80227e4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 80227e8:	015b      	lsls	r3, r3, #5
 80227ea:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 80227ee:	0152      	lsls	r2, r2, #5
 80227f0:	60e3      	str	r3, [r4, #12]
 80227f2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80227f6:	60a2      	str	r2, [r4, #8]
 80227f8:	015b      	lsls	r3, r3, #5
 80227fa:	6123      	str	r3, [r4, #16]
 80227fc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8022800:	015b      	lsls	r3, r3, #5
 8022802:	6163      	str	r3, [r4, #20]
 8022804:	4b47      	ldr	r3, [pc, #284]	; (8022924 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8022806:	6818      	ldr	r0, [r3, #0]
 8022808:	6803      	ldr	r3, [r0, #0]
 802280a:	6a1b      	ldr	r3, [r3, #32]
 802280c:	4798      	blx	r3
 802280e:	4606      	mov	r6, r0
 8022810:	f7ec fc12 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8022814:	6803      	ldr	r3, [r0, #0]
 8022816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022818:	4798      	blx	r3
 802281a:	4607      	mov	r7, r0
 802281c:	f7ec fc0c 	bl	800f038 <_ZN8touchgfx3HAL3lcdEv>
 8022820:	6803      	ldr	r3, [r0, #0]
 8022822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022824:	4798      	blx	r3
 8022826:	280c      	cmp	r0, #12
 8022828:	d854      	bhi.n	80228d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 802282a:	e8df f000 	tbb	[pc, r0]
 802282e:	554b      	.short	0x554b
 8022830:	2b6e0a66 	.word	0x2b6e0a66
 8022834:	5f5f5f3b 	.word	0x5f5f5f3b
 8022838:	5f5f      	.short	0x5f5f
 802283a:	6e          	.byte	0x6e
 802283b:	00          	.byte	0x00
 802283c:	2300      	movs	r3, #0
 802283e:	9303      	str	r3, [sp, #12]
 8022840:	e7ae      	b.n	80227a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8022842:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022846:	2108      	movs	r1, #8
 8022848:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802284c:	fb92 f1f1 	sdiv	r1, r2, r1
 8022850:	fb07 1303 	mla	r3, r7, r3, r1
 8022854:	441e      	add	r6, r3
 8022856:	4253      	negs	r3, r2
 8022858:	f002 0207 	and.w	r2, r2, #7
 802285c:	f003 0307 	and.w	r3, r3, #7
 8022860:	bf58      	it	pl
 8022862:	425a      	negpl	r2, r3
 8022864:	b2d2      	uxtb	r2, r2
 8022866:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802286a:	4628      	mov	r0, r5
 802286c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8022870:	66e1      	str	r1, [r4, #108]	; 0x6c
 8022872:	e9cd 1700 	strd	r1, r7, [sp]
 8022876:	4631      	mov	r1, r6
 8022878:	f001 fabb 	bl	8023df2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802287c:	4620      	mov	r0, r4
 802287e:	b006      	add	sp, #24
 8022880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022884:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022888:	2104      	movs	r1, #4
 802288a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802288e:	fb92 f1f1 	sdiv	r1, r2, r1
 8022892:	fb07 1303 	mla	r3, r7, r3, r1
 8022896:	441e      	add	r6, r3
 8022898:	4253      	negs	r3, r2
 802289a:	f002 0203 	and.w	r2, r2, #3
 802289e:	f003 0303 	and.w	r3, r3, #3
 80228a2:	e7dd      	b.n	8022860 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 80228a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80228a8:	2102      	movs	r1, #2
 80228aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80228ae:	2a00      	cmp	r2, #0
 80228b0:	fb92 f1f1 	sdiv	r1, r2, r1
 80228b4:	f002 0201 	and.w	r2, r2, #1
 80228b8:	fb07 1303 	mla	r3, r7, r3, r1
 80228bc:	bfb8      	it	lt
 80228be:	4252      	neglt	r2, r2
 80228c0:	441e      	add	r6, r3
 80228c2:	e7cf      	b.n	8022864 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 80228c4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80228c8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80228cc:	437b      	muls	r3, r7
 80228ce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80228d2:	441e      	add	r6, r3
 80228d4:	2200      	movs	r2, #0
 80228d6:	e7c6      	b.n	8022866 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 80228d8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80228dc:	2103      	movs	r1, #3
 80228de:	fb07 f203 	mul.w	r2, r7, r3
 80228e2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80228e6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80228ea:	e7f2      	b.n	80228d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80228ec:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80228f0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80228f4:	fb07 2303 	mla	r3, r7, r3, r2
 80228f8:	e7eb      	b.n	80228d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80228fa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80228fe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022902:	437b      	muls	r3, r7
 8022904:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022908:	e7e3      	b.n	80228d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802290a:	4b07      	ldr	r3, [pc, #28]	; (8022928 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802290c:	2156      	movs	r1, #86	; 0x56
 802290e:	4a03      	ldr	r2, [pc, #12]	; (802291c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8022910:	e70e      	b.n	8022730 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8022912:	bf00      	nop
 8022914:	08028f9c 	.word	0x08028f9c
 8022918:	08028ee6 	.word	0x08028ee6
 802291c:	08028fa4 	.word	0x08028fa4
 8022920:	08028f42 	.word	0x08028f42
 8022924:	2000bc68 	.word	0x2000bc68
 8022928:	08028f76 	.word	0x08028f76

0802292c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802292c:	6812      	ldr	r2, [r2, #0]
 802292e:	2a00      	cmp	r2, #0
 8022930:	db0b      	blt.n	802294a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8022932:	9800      	ldr	r0, [sp, #0]
 8022934:	6800      	ldr	r0, [r0, #0]
 8022936:	4290      	cmp	r0, r2
 8022938:	bfd4      	ite	le
 802293a:	2002      	movle	r0, #2
 802293c:	2000      	movgt	r0, #0
 802293e:	680a      	ldr	r2, [r1, #0]
 8022940:	2a00      	cmp	r2, #0
 8022942:	da04      	bge.n	802294e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8022944:	f040 0004 	orr.w	r0, r0, #4
 8022948:	4770      	bx	lr
 802294a:	2001      	movs	r0, #1
 802294c:	e7f7      	b.n	802293e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802294e:	681b      	ldr	r3, [r3, #0]
 8022950:	4293      	cmp	r3, r2
 8022952:	bfd8      	it	le
 8022954:	f040 0008 	orrle.w	r0, r0, #8
 8022958:	4770      	bx	lr
	...

0802295c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802295c:	4b07      	ldr	r3, [pc, #28]	; (802297c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802295e:	b510      	push	{r4, lr}
 8022960:	781b      	ldrb	r3, [r3, #0]
 8022962:	2b01      	cmp	r3, #1
 8022964:	d108      	bne.n	8022978 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8022966:	6843      	ldr	r3, [r0, #4]
 8022968:	6814      	ldr	r4, [r2, #0]
 802296a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802296e:	680b      	ldr	r3, [r1, #0]
 8022970:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8022974:	6013      	str	r3, [r2, #0]
 8022976:	600c      	str	r4, [r1, #0]
 8022978:	bd10      	pop	{r4, pc}
 802297a:	bf00      	nop
 802297c:	2000bc60 	.word	0x2000bc60

08022980 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8022980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022982:	b085      	sub	sp, #20
 8022984:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8022988:	4604      	mov	r4, r0
 802298a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802298e:	b33b      	cbz	r3, 80229e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8022990:	aa02      	add	r2, sp, #8
 8022992:	a903      	add	r1, sp, #12
 8022994:	f7ff ffe2 	bl	802295c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022998:	68a3      	ldr	r3, [r4, #8]
 802299a:	9e03      	ldr	r6, [sp, #12]
 802299c:	aa02      	add	r2, sp, #8
 802299e:	9f02      	ldr	r7, [sp, #8]
 80229a0:	a903      	add	r1, sp, #12
 80229a2:	1af6      	subs	r6, r6, r3
 80229a4:	68e3      	ldr	r3, [r4, #12]
 80229a6:	4620      	mov	r0, r4
 80229a8:	1aff      	subs	r7, r7, r3
 80229aa:	f104 0314 	add.w	r3, r4, #20
 80229ae:	9603      	str	r6, [sp, #12]
 80229b0:	9300      	str	r3, [sp, #0]
 80229b2:	f104 0310 	add.w	r3, r4, #16
 80229b6:	9702      	str	r7, [sp, #8]
 80229b8:	f7ff ffb8 	bl	802292c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80229bc:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80229c0:	4605      	mov	r5, r0
 80229c2:	b97b      	cbnz	r3, 80229e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80229c4:	463a      	mov	r2, r7
 80229c6:	4631      	mov	r1, r6
 80229c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80229cc:	f7ff fe7a 	bl	80226c4 <_ZN8touchgfx10Rasterizer6lineToEii>
 80229d0:	9b03      	ldr	r3, [sp, #12]
 80229d2:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80229d6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 80229da:	9b02      	ldr	r3, [sp, #8]
 80229dc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80229e0:	b005      	add	sp, #20
 80229e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80229e4:	b110      	cbz	r0, 80229ec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80229e6:	ea13 0200 	ands.w	r2, r3, r0
 80229ea:	d11c      	bne.n	8022a26 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80229ec:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 80229f0:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80229f4:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 80229f8:	b188      	cbz	r0, 8022a1e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80229fa:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 80229fe:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8022a02:	b913      	cbnz	r3, 8022a0a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8022a04:	4630      	mov	r0, r6
 8022a06:	f001 f806 	bl	8023a16 <_ZN8touchgfx7Outline6moveToEii>
 8022a0a:	2300      	movs	r3, #0
 8022a0c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022a10:	2301      	movs	r3, #1
 8022a12:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8022a16:	4630      	mov	r0, r6
 8022a18:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8022a1c:	e7d6      	b.n	80229cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8022a1e:	4630      	mov	r0, r6
 8022a20:	f7ff fe50 	bl	80226c4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022a24:	e7f7      	b.n	8022a16 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8022a26:	4615      	mov	r5, r2
 8022a28:	e7d2      	b.n	80229d0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08022a2a <_ZN8touchgfx6Canvas5closeEv>:
 8022a2a:	b538      	push	{r3, r4, r5, lr}
 8022a2c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8022a30:	4604      	mov	r4, r0
 8022a32:	b993      	cbnz	r3, 8022a5a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022a34:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8022a38:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8022a3c:	4213      	tst	r3, r2
 8022a3e:	d10c      	bne.n	8022a5a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022a40:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8022a44:	b123      	cbz	r3, 8022a50 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8022a46:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8022a4a:	4628      	mov	r0, r5
 8022a4c:	f7ff fe3a 	bl	80226c4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022a50:	4628      	mov	r0, r5
 8022a52:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8022a56:	f7ff fe35 	bl	80226c4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022a5a:	2300      	movs	r3, #0
 8022a5c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022a60:	bd38      	pop	{r3, r4, r5, pc}

08022a62 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8022a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a64:	b085      	sub	sp, #20
 8022a66:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8022a6a:	4604      	mov	r4, r0
 8022a6c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8022a70:	b353      	cbz	r3, 8022ac8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8022a72:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8022a76:	b90b      	cbnz	r3, 8022a7c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8022a78:	f7ff ffd7 	bl	8022a2a <_ZN8touchgfx6Canvas5closeEv>
 8022a7c:	aa02      	add	r2, sp, #8
 8022a7e:	a903      	add	r1, sp, #12
 8022a80:	4620      	mov	r0, r4
 8022a82:	f7ff ff6b 	bl	802295c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022a86:	68a3      	ldr	r3, [r4, #8]
 8022a88:	9d03      	ldr	r5, [sp, #12]
 8022a8a:	aa02      	add	r2, sp, #8
 8022a8c:	9e02      	ldr	r6, [sp, #8]
 8022a8e:	a903      	add	r1, sp, #12
 8022a90:	1aed      	subs	r5, r5, r3
 8022a92:	68e3      	ldr	r3, [r4, #12]
 8022a94:	4620      	mov	r0, r4
 8022a96:	1af6      	subs	r6, r6, r3
 8022a98:	f104 0314 	add.w	r3, r4, #20
 8022a9c:	9503      	str	r5, [sp, #12]
 8022a9e:	9300      	str	r3, [sp, #0]
 8022aa0:	f104 0310 	add.w	r3, r4, #16
 8022aa4:	9602      	str	r6, [sp, #8]
 8022aa6:	f7ff ff41 	bl	802292c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8022aaa:	4607      	mov	r7, r0
 8022aac:	b170      	cbz	r0, 8022acc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8022aae:	2301      	movs	r3, #1
 8022ab0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022ab4:	9a03      	ldr	r2, [sp, #12]
 8022ab6:	9b02      	ldr	r3, [sp, #8]
 8022ab8:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8022abc:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8022ac0:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8022ac4:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8022ac8:	b005      	add	sp, #20
 8022aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022acc:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8022ad0:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8022ad4:	b92b      	cbnz	r3, 8022ae2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8022ad6:	4632      	mov	r2, r6
 8022ad8:	4629      	mov	r1, r5
 8022ada:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8022ade:	f000 ff9a 	bl	8023a16 <_ZN8touchgfx7Outline6moveToEii>
 8022ae2:	2300      	movs	r3, #0
 8022ae4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022ae8:	2301      	movs	r3, #1
 8022aea:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8022aee:	e7e1      	b.n	8022ab4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08022af0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8022af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022af4:	4604      	mov	r4, r0
 8022af6:	b087      	sub	sp, #28
 8022af8:	9105      	str	r1, [sp, #20]
 8022afa:	f001 f8d0 	bl	8023c9e <_ZN8touchgfx7Outline8getCellsEv>
 8022afe:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8022b02:	4605      	mov	r5, r0
 8022b04:	f1b9 0f00 	cmp.w	r9, #0
 8022b08:	d103      	bne.n	8022b12 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8022b0a:	2001      	movs	r0, #1
 8022b0c:	b007      	add	sp, #28
 8022b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b12:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8022b16:	2e00      	cmp	r6, #0
 8022b18:	d139      	bne.n	8022b8e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8022b1a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8022b1e:	f105 0708 	add.w	r7, r5, #8
 8022b22:	4640      	mov	r0, r8
 8022b24:	f001 f8fd 	bl	8023d22 <_ZN8touchgfx8Scanline5resetEv>
 8022b28:	f109 33ff 	add.w	r3, r9, #4294967295
 8022b2c:	9303      	str	r3, [sp, #12]
 8022b2e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8022b32:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8022b36:	46da      	mov	sl, fp
 8022b38:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8022b3c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8022b40:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8022b44:	9b03      	ldr	r3, [sp, #12]
 8022b46:	4416      	add	r6, r2
 8022b48:	9504      	str	r5, [sp, #16]
 8022b4a:	463d      	mov	r5, r7
 8022b4c:	3b01      	subs	r3, #1
 8022b4e:	9303      	str	r3, [sp, #12]
 8022b50:	3301      	adds	r3, #1
 8022b52:	d01e      	beq.n	8022b92 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8022b54:	3708      	adds	r7, #8
 8022b56:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8022b5a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8022b5e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8022b62:	4290      	cmp	r0, r2
 8022b64:	d11e      	bne.n	8022ba4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8022b66:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8022b6a:	4411      	add	r1, r2
 8022b6c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8022b70:	e7e8      	b.n	8022b44 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8022b72:	1c91      	adds	r1, r2, #2
 8022b74:	f04f 0301 	mov.w	r3, #1
 8022b78:	65e1      	str	r1, [r4, #92]	; 0x5c
 8022b7a:	8053      	strh	r3, [r2, #2]
 8022b7c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8022b7e:	1c91      	adds	r1, r2, #2
 8022b80:	65a1      	str	r1, [r4, #88]	; 0x58
 8022b82:	f8a2 b002 	strh.w	fp, [r2, #2]
 8022b86:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8022b88:	3201      	adds	r2, #1
 8022b8a:	6562      	str	r2, [r4, #84]	; 0x54
 8022b8c:	e03a      	b.n	8022c04 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8022b8e:	2000      	movs	r0, #0
 8022b90:	e7bc      	b.n	8022b0c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8022b92:	b951      	cbnz	r1, 8022baa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8022b94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022b96:	2b00      	cmp	r3, #0
 8022b98:	d0b7      	beq.n	8022b0a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8022b9a:	4641      	mov	r1, r8
 8022b9c:	9805      	ldr	r0, [sp, #20]
 8022b9e:	f7ff fd5b 	bl	8022658 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8022ba2:	e7b2      	b.n	8022b0a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8022ba4:	2900      	cmp	r1, #0
 8022ba6:	d035      	beq.n	8022c14 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8022ba8:	9504      	str	r5, [sp, #16]
 8022baa:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8022bae:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8022bb2:	f7ff fd3d 	bl	8022630 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8022bb6:	4605      	mov	r5, r0
 8022bb8:	b330      	cbz	r0, 8022c08 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8022bba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8022bbc:	b182      	cbz	r2, 8022be0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8022bbe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8022bc0:	454a      	cmp	r2, r9
 8022bc2:	d00d      	beq.n	8022be0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8022bc4:	4641      	mov	r1, r8
 8022bc6:	9805      	ldr	r0, [sp, #20]
 8022bc8:	f7ff fd46 	bl	8022658 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8022bcc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022bd0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8022bd2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8022bd6:	65e2      	str	r2, [r4, #92]	; 0x5c
 8022bd8:	2300      	movs	r3, #0
 8022bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022bdc:	6563      	str	r3, [r4, #84]	; 0x54
 8022bde:	65a2      	str	r2, [r4, #88]	; 0x58
 8022be0:	f1bb 0f00 	cmp.w	fp, #0
 8022be4:	db10      	blt.n	8022c08 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8022be6:	f7f4 f993 	bl	8016f10 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022bea:	4583      	cmp	fp, r0
 8022bec:	d20c      	bcs.n	8022c08 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8022bee:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8022bf0:	f802 500b 	strb.w	r5, [r2, fp]
 8022bf4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8022bf6:	3201      	adds	r2, #1
 8022bf8:	455a      	cmp	r2, fp
 8022bfa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8022bfc:	d1b9      	bne.n	8022b72 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8022bfe:	8811      	ldrh	r1, [r2, #0]
 8022c00:	3101      	adds	r1, #1
 8022c02:	8011      	strh	r1, [r2, #0]
 8022c04:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8022c08:	9b03      	ldr	r3, [sp, #12]
 8022c0a:	3301      	adds	r3, #1
 8022c0c:	d0c2      	beq.n	8022b94 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8022c0e:	f10b 0a01 	add.w	sl, fp, #1
 8022c12:	9d04      	ldr	r5, [sp, #16]
 8022c14:	f9b5 3000 	ldrsh.w	r3, [r5]
 8022c18:	4553      	cmp	r3, sl
 8022c1a:	dd88      	ble.n	8022b2e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8022c1c:	01b1      	lsls	r1, r6, #6
 8022c1e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8022c22:	f7ff fd05 	bl	8022630 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8022c26:	4683      	mov	fp, r0
 8022c28:	2800      	cmp	r0, #0
 8022c2a:	d080      	beq.n	8022b2e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8022c2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022c2e:	b183      	cbz	r3, 8022c52 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8022c30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8022c32:	454b      	cmp	r3, r9
 8022c34:	d00d      	beq.n	8022c52 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8022c36:	4641      	mov	r1, r8
 8022c38:	9805      	ldr	r0, [sp, #20]
 8022c3a:	f7ff fd0d 	bl	8022658 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8022c3e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022c42:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8022c46:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8022c48:	65e3      	str	r3, [r4, #92]	; 0x5c
 8022c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022c4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8022c4e:	2300      	movs	r3, #0
 8022c50:	6563      	str	r3, [r4, #84]	; 0x54
 8022c52:	f9b5 3000 	ldrsh.w	r3, [r5]
 8022c56:	464a      	mov	r2, r9
 8022c58:	f8cd b000 	str.w	fp, [sp]
 8022c5c:	4651      	mov	r1, sl
 8022c5e:	eba3 030a 	sub.w	r3, r3, sl
 8022c62:	4640      	mov	r0, r8
 8022c64:	f001 f884 	bl	8023d70 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8022c68:	e761      	b.n	8022b2e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08022c6a <_ZN8touchgfx6Canvas6renderEv>:
 8022c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022c6c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8022c70:	4604      	mov	r4, r0
 8022c72:	b913      	cbnz	r3, 8022c7a <_ZN8touchgfx6Canvas6renderEv+0x10>
 8022c74:	2001      	movs	r0, #1
 8022c76:	b003      	add	sp, #12
 8022c78:	bd30      	pop	{r4, r5, pc}
 8022c7a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8022c7e:	2b00      	cmp	r3, #0
 8022c80:	d131      	bne.n	8022ce6 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8022c82:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8022c86:	2b00      	cmp	r3, #0
 8022c88:	d0f4      	beq.n	8022c74 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8022c8a:	6840      	ldr	r0, [r0, #4]
 8022c8c:	6803      	ldr	r3, [r0, #0]
 8022c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022c90:	4798      	blx	r3
 8022c92:	2800      	cmp	r0, #0
 8022c94:	d0ee      	beq.n	8022c74 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8022c96:	4620      	mov	r0, r4
 8022c98:	f7ff fec7 	bl	8022a2a <_ZN8touchgfx6Canvas5closeEv>
 8022c9c:	6860      	ldr	r0, [r4, #4]
 8022c9e:	6803      	ldr	r3, [r0, #0]
 8022ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022ca2:	4798      	blx	r3
 8022ca4:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8022ca8:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8022cac:	f7f3 f8c9 	bl	8015e42 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8022cb0:	6860      	ldr	r0, [r4, #4]
 8022cb2:	6803      	ldr	r3, [r0, #0]
 8022cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022cb6:	4798      	blx	r3
 8022cb8:	4605      	mov	r5, r0
 8022cba:	6860      	ldr	r0, [r4, #4]
 8022cbc:	6803      	ldr	r3, [r0, #0]
 8022cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022cc0:	4798      	blx	r3
 8022cc2:	4601      	mov	r1, r0
 8022cc4:	4628      	mov	r0, r5
 8022cc6:	f7f3 f8bf 	bl	8015e48 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8022cca:	6860      	ldr	r0, [r4, #4]
 8022ccc:	6803      	ldr	r3, [r0, #0]
 8022cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022cd0:	4798      	blx	r3
 8022cd2:	f104 0318 	add.w	r3, r4, #24
 8022cd6:	4669      	mov	r1, sp
 8022cd8:	e9cd 3000 	strd	r3, r0, [sp]
 8022cdc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8022ce0:	f7ff ff06 	bl	8022af0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8022ce4:	e7c7      	b.n	8022c76 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8022ce6:	2000      	movs	r0, #0
 8022ce8:	e7c5      	b.n	8022c76 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08022cec <_ZN8touchgfx6CanvasD1Ev>:
 8022cec:	b538      	push	{r3, r4, r5, lr}
 8022cee:	4605      	mov	r5, r0
 8022cf0:	4b08      	ldr	r3, [pc, #32]	; (8022d14 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8022cf2:	4604      	mov	r4, r0
 8022cf4:	f845 3b2c 	str.w	r3, [r5], #44
 8022cf8:	4b07      	ldr	r3, [pc, #28]	; (8022d18 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8022cfa:	6818      	ldr	r0, [r3, #0]
 8022cfc:	6803      	ldr	r3, [r0, #0]
 8022cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d00:	4798      	blx	r3
 8022d02:	4628      	mov	r0, r5
 8022d04:	f000 f814 	bl	8022d30 <_ZN8touchgfx7OutlineD1Ev>
 8022d08:	f104 0018 	add.w	r0, r4, #24
 8022d0c:	f001 f870 	bl	8023df0 <_ZN8touchgfx15RenderingBufferD1Ev>
 8022d10:	4620      	mov	r0, r4
 8022d12:	bd38      	pop	{r3, r4, r5, pc}
 8022d14:	08028f9c 	.word	0x08028f9c
 8022d18:	2000bc68 	.word	0x2000bc68

08022d1c <_ZN8touchgfx6CanvasD0Ev>:
 8022d1c:	b510      	push	{r4, lr}
 8022d1e:	4604      	mov	r4, r0
 8022d20:	f7ff ffe4 	bl	8022cec <_ZN8touchgfx6CanvasD1Ev>
 8022d24:	21b8      	movs	r1, #184	; 0xb8
 8022d26:	4620      	mov	r0, r4
 8022d28:	f001 f873 	bl	8023e12 <_ZdlPvj>
 8022d2c:	4620      	mov	r0, r4
 8022d2e:	bd10      	pop	{r4, pc}

08022d30 <_ZN8touchgfx7OutlineD1Ev>:
 8022d30:	4770      	bx	lr

08022d32 <_ZN8touchgfx7OutlineD0Ev>:
 8022d32:	b510      	push	{r4, lr}
 8022d34:	4604      	mov	r4, r0
 8022d36:	2148      	movs	r1, #72	; 0x48
 8022d38:	f001 f86b 	bl	8023e12 <_ZdlPvj>
 8022d3c:	4620      	mov	r0, r4
 8022d3e:	bd10      	pop	{r4, pc}

08022d40 <_ZN8touchgfx7Outline5resetEv>:
 8022d40:	b510      	push	{r4, lr}
 8022d42:	4604      	mov	r4, r0
 8022d44:	f7f4 f8fc 	bl	8016f40 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8022d48:	60e0      	str	r0, [r4, #12]
 8022d4a:	f7f4 f8ff 	bl	8016f4c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8022d4e:	68e3      	ldr	r3, [r4, #12]
 8022d50:	2200      	movs	r2, #0
 8022d52:	08c0      	lsrs	r0, r0, #3
 8022d54:	6123      	str	r3, [r4, #16]
 8022d56:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022d5a:	6060      	str	r0, [r4, #4]
 8022d5c:	82a3      	strh	r3, [r4, #20]
 8022d5e:	82e3      	strh	r3, [r4, #22]
 8022d60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022d62:	60a2      	str	r2, [r4, #8]
 8022d64:	f023 0301 	bic.w	r3, r3, #1
 8022d68:	8322      	strh	r2, [r4, #24]
 8022d6a:	8362      	strh	r2, [r4, #26]
 8022d6c:	f043 0302 	orr.w	r3, r3, #2
 8022d70:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022d74:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022d76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022d7a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8022d7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022d82:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8022d86:	bd10      	pop	{r4, pc}

08022d88 <_ZN8touchgfx7OutlineC1Ev>:
 8022d88:	4b0f      	ldr	r3, [pc, #60]	; (8022dc8 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8022d8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8022d8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8022d92:	b510      	push	{r4, lr}
 8022d94:	6003      	str	r3, [r0, #0]
 8022d96:	2300      	movs	r3, #0
 8022d98:	4604      	mov	r4, r0
 8022d9a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8022d9e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8022da2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022da6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8022daa:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8022dae:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8022db2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8022db6:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8022dba:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8022dbe:	f7ff ffbf 	bl	8022d40 <_ZN8touchgfx7Outline5resetEv>
 8022dc2:	4620      	mov	r0, r4
 8022dc4:	bd10      	pop	{r4, pc}
 8022dc6:	bf00      	nop
 8022dc8:	08028ffc 	.word	0x08028ffc

08022dcc <_ZN8touchgfx7Outline10renderLineEiiii>:
 8022dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dd0:	b093      	sub	sp, #76	; 0x4c
 8022dd2:	4604      	mov	r4, r0
 8022dd4:	1156      	asrs	r6, r2, #5
 8022dd6:	f002 0e1f 	and.w	lr, r2, #31
 8022dda:	981c      	ldr	r0, [sp, #112]	; 0x70
 8022ddc:	9305      	str	r3, [sp, #20]
 8022dde:	1143      	asrs	r3, r0, #5
 8022de0:	1145      	asrs	r5, r0, #5
 8022de2:	930c      	str	r3, [sp, #48]	; 0x30
 8022de4:	f000 031f 	and.w	r3, r0, #31
 8022de8:	9303      	str	r3, [sp, #12]
 8022dea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022dec:	42b3      	cmp	r3, r6
 8022dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022df0:	bfc8      	it	gt
 8022df2:	6326      	strgt	r6, [r4, #48]	; 0x30
 8022df4:	42b3      	cmp	r3, r6
 8022df6:	bfdc      	itt	le
 8022df8:	1c73      	addle	r3, r6, #1
 8022dfa:	63a3      	strle	r3, [r4, #56]	; 0x38
 8022dfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022dfe:	42ab      	cmp	r3, r5
 8022e00:	bfc8      	it	gt
 8022e02:	462b      	movgt	r3, r5
 8022e04:	ea4f 1560 	mov.w	r5, r0, asr #5
 8022e08:	bfc8      	it	gt
 8022e0a:	6323      	strgt	r3, [r4, #48]	; 0x30
 8022e0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022e0e:	42ab      	cmp	r3, r5
 8022e10:	bfd8      	it	le
 8022e12:	462b      	movle	r3, r5
 8022e14:	ea4f 1561 	mov.w	r5, r1, asr #5
 8022e18:	bfdc      	itt	le
 8022e1a:	3301      	addle	r3, #1
 8022e1c:	63a3      	strle	r3, [r4, #56]	; 0x38
 8022e1e:	9b05      	ldr	r3, [sp, #20]
 8022e20:	eba3 0a01 	sub.w	sl, r3, r1
 8022e24:	1143      	asrs	r3, r0, #5
 8022e26:	429e      	cmp	r6, r3
 8022e28:	f040 8119 	bne.w	802305e <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8022e2c:	9b05      	ldr	r3, [sp, #20]
 8022e2e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8022e32:	9b03      	ldr	r3, [sp, #12]
 8022e34:	459e      	cmp	lr, r3
 8022e36:	d12c      	bne.n	8022e92 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8022e38:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022e3c:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8022e40:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8022e44:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8022e48:	4291      	cmp	r1, r2
 8022e4a:	d037      	beq.n	8022ebc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8022e4c:	8b61      	ldrh	r1, [r4, #26]
 8022e4e:	8b22      	ldrh	r2, [r4, #24]
 8022e50:	430a      	orrs	r2, r1
 8022e52:	d00b      	beq.n	8022e6c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8022e54:	2b00      	cmp	r3, #0
 8022e56:	db09      	blt.n	8022e6c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8022e58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022e5a:	429a      	cmp	r2, r3
 8022e5c:	dd06      	ble.n	8022e6c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8022e5e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8022e62:	429a      	cmp	r2, r3
 8022e64:	d308      	bcc.n	8022e78 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8022e66:	2301      	movs	r3, #1
 8022e68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022e6c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8022e70:	82e6      	strh	r6, [r4, #22]
 8022e72:	2300      	movs	r3, #0
 8022e74:	8323      	strh	r3, [r4, #24]
 8022e76:	e0c6      	b.n	8023006 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8022e78:	f104 0314 	add.w	r3, r4, #20
 8022e7c:	6922      	ldr	r2, [r4, #16]
 8022e7e:	cb03      	ldmia	r3!, {r0, r1}
 8022e80:	6010      	str	r0, [r2, #0]
 8022e82:	6051      	str	r1, [r2, #4]
 8022e84:	6923      	ldr	r3, [r4, #16]
 8022e86:	3308      	adds	r3, #8
 8022e88:	6123      	str	r3, [r4, #16]
 8022e8a:	68a3      	ldr	r3, [r4, #8]
 8022e8c:	3301      	adds	r3, #1
 8022e8e:	60a3      	str	r3, [r4, #8]
 8022e90:	e7ec      	b.n	8022e6c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8022e92:	9b05      	ldr	r3, [sp, #20]
 8022e94:	45ac      	cmp	ip, r5
 8022e96:	f001 011f 	and.w	r1, r1, #31
 8022e9a:	8b20      	ldrh	r0, [r4, #24]
 8022e9c:	f003 031f 	and.w	r3, r3, #31
 8022ea0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8022ea4:	9304      	str	r3, [sp, #16]
 8022ea6:	9b03      	ldr	r3, [sp, #12]
 8022ea8:	eba3 020e 	sub.w	r2, r3, lr
 8022eac:	d109      	bne.n	8022ec2 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8022eae:	9b04      	ldr	r3, [sp, #16]
 8022eb0:	4410      	add	r0, r2
 8022eb2:	4419      	add	r1, r3
 8022eb4:	8320      	strh	r0, [r4, #24]
 8022eb6:	fb02 8201 	mla	r2, r2, r1, r8
 8022eba:	8362      	strh	r2, [r4, #26]
 8022ebc:	b013      	add	sp, #76	; 0x4c
 8022ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ec2:	f1ba 0f00 	cmp.w	sl, #0
 8022ec6:	f2c0 80a0 	blt.w	802300a <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8022eca:	f1c1 0320 	rsb	r3, r1, #32
 8022ece:	f04f 0b20 	mov.w	fp, #32
 8022ed2:	435a      	muls	r2, r3
 8022ed4:	2301      	movs	r3, #1
 8022ed6:	9302      	str	r3, [sp, #8]
 8022ed8:	4459      	add	r1, fp
 8022eda:	fb92 f7fa 	sdiv	r7, r2, sl
 8022ede:	fb0a 2217 	mls	r2, sl, r7, r2
 8022ee2:	2a00      	cmp	r2, #0
 8022ee4:	bfbc      	itt	lt
 8022ee6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8022eea:	4452      	addlt	r2, sl
 8022eec:	fb07 8101 	mla	r1, r7, r1, r8
 8022ef0:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8022ef4:	4438      	add	r0, r7
 8022ef6:	b20b      	sxth	r3, r1
 8022ef8:	9902      	ldr	r1, [sp, #8]
 8022efa:	b200      	sxth	r0, r0
 8022efc:	9301      	str	r3, [sp, #4]
 8022efe:	8363      	strh	r3, [r4, #26]
 8022f00:	186b      	adds	r3, r5, r1
 8022f02:	0435      	lsls	r5, r6, #16
 8022f04:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8022f08:	8320      	strh	r0, [r4, #24]
 8022f0a:	eb03 0905 	add.w	r9, r3, r5
 8022f0e:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8022f12:	9300      	str	r3, [sp, #0]
 8022f14:	45c1      	cmp	r9, r8
 8022f16:	9505      	str	r5, [sp, #20]
 8022f18:	d014      	beq.n	8022f44 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8022f1a:	9b01      	ldr	r3, [sp, #4]
 8022f1c:	4303      	orrs	r3, r0
 8022f1e:	d00b      	beq.n	8022f38 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8022f20:	2900      	cmp	r1, #0
 8022f22:	db09      	blt.n	8022f38 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8022f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022f26:	428b      	cmp	r3, r1
 8022f28:	dd06      	ble.n	8022f38 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8022f2a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8022f2e:	4299      	cmp	r1, r3
 8022f30:	d374      	bcc.n	802301c <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8022f32:	2301      	movs	r3, #1
 8022f34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022f38:	9b00      	ldr	r3, [sp, #0]
 8022f3a:	82e6      	strh	r6, [r4, #22]
 8022f3c:	82a3      	strh	r3, [r4, #20]
 8022f3e:	2300      	movs	r3, #0
 8022f40:	8323      	strh	r3, [r4, #24]
 8022f42:	8363      	strh	r3, [r4, #26]
 8022f44:	9900      	ldr	r1, [sp, #0]
 8022f46:	eb0e 0307 	add.w	r3, lr, r7
 8022f4a:	458c      	cmp	ip, r1
 8022f4c:	d04e      	beq.n	8022fec <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8022f4e:	9903      	ldr	r1, [sp, #12]
 8022f50:	eba2 020a 	sub.w	r2, r2, sl
 8022f54:	1ac9      	subs	r1, r1, r3
 8022f56:	9201      	str	r2, [sp, #4]
 8022f58:	440f      	add	r7, r1
 8022f5a:	017f      	lsls	r7, r7, #5
 8022f5c:	fb97 fefa 	sdiv	lr, r7, sl
 8022f60:	fb0a 771e 	mls	r7, sl, lr, r7
 8022f64:	2f00      	cmp	r7, #0
 8022f66:	bfbc      	itt	lt
 8022f68:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8022f6c:	4457      	addlt	r7, sl
 8022f6e:	f10e 0101 	add.w	r1, lr, #1
 8022f72:	9106      	str	r1, [sp, #24]
 8022f74:	9a01      	ldr	r2, [sp, #4]
 8022f76:	8b20      	ldrh	r0, [r4, #24]
 8022f78:	19d2      	adds	r2, r2, r7
 8022f7a:	8b61      	ldrh	r1, [r4, #26]
 8022f7c:	9d02      	ldr	r5, [sp, #8]
 8022f7e:	9201      	str	r2, [sp, #4]
 8022f80:	bf5b      	ittet	pl
 8022f82:	eba2 020a 	subpl.w	r2, r2, sl
 8022f86:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8022f8a:	46f0      	movmi	r8, lr
 8022f8c:	9201      	strpl	r2, [sp, #4]
 8022f8e:	9a00      	ldr	r2, [sp, #0]
 8022f90:	4440      	add	r0, r8
 8022f92:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8022f96:	4443      	add	r3, r8
 8022f98:	442a      	add	r2, r5
 8022f9a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8022f9e:	9d05      	ldr	r5, [sp, #20]
 8022fa0:	b200      	sxth	r0, r0
 8022fa2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8022fa6:	b209      	sxth	r1, r1
 8022fa8:	4415      	add	r5, r2
 8022faa:	8320      	strh	r0, [r4, #24]
 8022fac:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8022fb0:	8361      	strh	r1, [r4, #26]
 8022fb2:	9200      	str	r2, [sp, #0]
 8022fb4:	454d      	cmp	r5, r9
 8022fb6:	d016      	beq.n	8022fe6 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8022fb8:	4301      	orrs	r1, r0
 8022fba:	d00d      	beq.n	8022fd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8022fbc:	f1b8 0f00 	cmp.w	r8, #0
 8022fc0:	db0a      	blt.n	8022fd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8022fc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022fc4:	4541      	cmp	r1, r8
 8022fc6:	dd07      	ble.n	8022fd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8022fc8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022fcc:	4288      	cmp	r0, r1
 8022fce:	d335      	bcc.n	802303c <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8022fd0:	f04f 0101 	mov.w	r1, #1
 8022fd4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8022fd8:	9900      	ldr	r1, [sp, #0]
 8022fda:	82e6      	strh	r6, [r4, #22]
 8022fdc:	82a1      	strh	r1, [r4, #20]
 8022fde:	f04f 0100 	mov.w	r1, #0
 8022fe2:	8321      	strh	r1, [r4, #24]
 8022fe4:	8361      	strh	r1, [r4, #26]
 8022fe6:	9a00      	ldr	r2, [sp, #0]
 8022fe8:	4594      	cmp	ip, r2
 8022fea:	d1c3      	bne.n	8022f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8022fec:	9a03      	ldr	r2, [sp, #12]
 8022fee:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8022ff2:	1ad3      	subs	r3, r2, r3
 8022ff4:	8b22      	ldrh	r2, [r4, #24]
 8022ff6:	441a      	add	r2, r3
 8022ff8:	8322      	strh	r2, [r4, #24]
 8022ffa:	9a04      	ldr	r2, [sp, #16]
 8022ffc:	3220      	adds	r2, #32
 8022ffe:	eba2 020b 	sub.w	r2, r2, fp
 8023002:	fb03 c302 	mla	r3, r3, r2, ip
 8023006:	8363      	strh	r3, [r4, #26]
 8023008:	e758      	b.n	8022ebc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802300a:	f04f 33ff 	mov.w	r3, #4294967295
 802300e:	434a      	muls	r2, r1
 8023010:	f1ca 0a00 	rsb	sl, sl, #0
 8023014:	f04f 0b00 	mov.w	fp, #0
 8023018:	9302      	str	r3, [sp, #8]
 802301a:	e75d      	b.n	8022ed8 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 802301c:	f104 0314 	add.w	r3, r4, #20
 8023020:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023024:	cb03      	ldmia	r3!, {r0, r1}
 8023026:	f8c8 0000 	str.w	r0, [r8]
 802302a:	f8c8 1004 	str.w	r1, [r8, #4]
 802302e:	6923      	ldr	r3, [r4, #16]
 8023030:	3308      	adds	r3, #8
 8023032:	6123      	str	r3, [r4, #16]
 8023034:	68a3      	ldr	r3, [r4, #8]
 8023036:	3301      	adds	r3, #1
 8023038:	60a3      	str	r3, [r4, #8]
 802303a:	e77d      	b.n	8022f38 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802303c:	f104 0814 	add.w	r8, r4, #20
 8023040:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023044:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023048:	f8c9 0000 	str.w	r0, [r9]
 802304c:	f8c9 1004 	str.w	r1, [r9, #4]
 8023050:	6921      	ldr	r1, [r4, #16]
 8023052:	3108      	adds	r1, #8
 8023054:	6121      	str	r1, [r4, #16]
 8023056:	68a1      	ldr	r1, [r4, #8]
 8023058:	3101      	adds	r1, #1
 802305a:	60a1      	str	r1, [r4, #8]
 802305c:	e7bc      	b.n	8022fd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802305e:	1a83      	subs	r3, r0, r2
 8023060:	9301      	str	r3, [sp, #4]
 8023062:	f1ba 0f00 	cmp.w	sl, #0
 8023066:	f040 8094 	bne.w	8023192 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 802306a:	9a01      	ldr	r2, [sp, #4]
 802306c:	0049      	lsls	r1, r1, #1
 802306e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023072:	2a00      	cmp	r2, #0
 8023074:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023078:	8b62      	ldrh	r2, [r4, #26]
 802307a:	bfaa      	itet	ge
 802307c:	f04f 0a20 	movge.w	sl, #32
 8023080:	f04f 38ff 	movlt.w	r8, #4294967295
 8023084:	f04f 0801 	movge.w	r8, #1
 8023088:	8b21      	ldrh	r1, [r4, #24]
 802308a:	ebaa 0e0e 	sub.w	lr, sl, lr
 802308e:	4471      	add	r1, lr
 8023090:	fb0e 2e03 	mla	lr, lr, r3, r2
 8023094:	eb08 0206 	add.w	r2, r8, r6
 8023098:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 802309c:	b209      	sxth	r1, r1
 802309e:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80230a2:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 80230a6:	8321      	strh	r1, [r4, #24]
 80230a8:	fa0f fe8e 	sxth.w	lr, lr
 80230ac:	42b7      	cmp	r7, r6
 80230ae:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80230b2:	d013      	beq.n	80230dc <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 80230b4:	ea51 010e 	orrs.w	r1, r1, lr
 80230b8:	d00b      	beq.n	80230d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80230ba:	2800      	cmp	r0, #0
 80230bc:	db09      	blt.n	80230d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80230be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80230c0:	4281      	cmp	r1, r0
 80230c2:	dd06      	ble.n	80230d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80230c4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80230c8:	4288      	cmp	r0, r1
 80230ca:	d339      	bcc.n	8023140 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 80230cc:	2101      	movs	r1, #1
 80230ce:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80230d2:	2100      	movs	r1, #0
 80230d4:	82a5      	strh	r5, [r4, #20]
 80230d6:	82e2      	strh	r2, [r4, #22]
 80230d8:	8321      	strh	r1, [r4, #24]
 80230da:	8361      	strh	r1, [r4, #26]
 80230dc:	f1aa 0610 	sub.w	r6, sl, #16
 80230e0:	f04f 0e00 	mov.w	lr, #0
 80230e4:	f04f 0b01 	mov.w	fp, #1
 80230e8:	0076      	lsls	r6, r6, #1
 80230ea:	fb06 f703 	mul.w	r7, r6, r3
 80230ee:	b236      	sxth	r6, r6
 80230f0:	b23f      	sxth	r7, r7
 80230f2:	ea46 0107 	orr.w	r1, r6, r7
 80230f6:	9100      	str	r1, [sp, #0]
 80230f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80230fa:	428a      	cmp	r2, r1
 80230fc:	d03e      	beq.n	802317c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 80230fe:	4442      	add	r2, r8
 8023100:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023104:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023108:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 802310c:	8326      	strh	r6, [r4, #24]
 802310e:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8023112:	8367      	strh	r7, [r4, #26]
 8023114:	4584      	cmp	ip, r0
 8023116:	d0ef      	beq.n	80230f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023118:	9800      	ldr	r0, [sp, #0]
 802311a:	b150      	cbz	r0, 8023132 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802311c:	2900      	cmp	r1, #0
 802311e:	db08      	blt.n	8023132 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023120:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8023122:	4288      	cmp	r0, r1
 8023124:	dd05      	ble.n	8023132 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023126:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802312a:	4288      	cmp	r0, r1
 802312c:	d315      	bcc.n	802315a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802312e:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8023132:	82a5      	strh	r5, [r4, #20]
 8023134:	82e2      	strh	r2, [r4, #22]
 8023136:	f8a4 e018 	strh.w	lr, [r4, #24]
 802313a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802313e:	e7db      	b.n	80230f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023140:	f104 0614 	add.w	r6, r4, #20
 8023144:	6927      	ldr	r7, [r4, #16]
 8023146:	ce03      	ldmia	r6!, {r0, r1}
 8023148:	6038      	str	r0, [r7, #0]
 802314a:	6079      	str	r1, [r7, #4]
 802314c:	6921      	ldr	r1, [r4, #16]
 802314e:	3108      	adds	r1, #8
 8023150:	6121      	str	r1, [r4, #16]
 8023152:	68a1      	ldr	r1, [r4, #8]
 8023154:	3101      	adds	r1, #1
 8023156:	60a1      	str	r1, [r4, #8]
 8023158:	e7bb      	b.n	80230d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802315a:	f104 0c14 	add.w	ip, r4, #20
 802315e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023162:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8023166:	f8c9 0000 	str.w	r0, [r9]
 802316a:	f8c9 1004 	str.w	r1, [r9, #4]
 802316e:	6921      	ldr	r1, [r4, #16]
 8023170:	3108      	adds	r1, #8
 8023172:	6121      	str	r1, [r4, #16]
 8023174:	68a1      	ldr	r1, [r4, #8]
 8023176:	3101      	adds	r1, #1
 8023178:	60a1      	str	r1, [r4, #8]
 802317a:	e7da      	b.n	8023132 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802317c:	9a03      	ldr	r2, [sp, #12]
 802317e:	8b61      	ldrh	r1, [r4, #26]
 8023180:	f1a2 0c20 	sub.w	ip, r2, #32
 8023184:	8b22      	ldrh	r2, [r4, #24]
 8023186:	44d4      	add	ip, sl
 8023188:	4462      	add	r2, ip
 802318a:	fb0c 1303 	mla	r3, ip, r3, r1
 802318e:	8322      	strh	r2, [r4, #24]
 8023190:	e739      	b.n	8023006 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023192:	9b01      	ldr	r3, [sp, #4]
 8023194:	2b00      	cmp	r3, #0
 8023196:	db3f      	blt.n	8023218 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8023198:	2201      	movs	r2, #1
 802319a:	f1ce 0320 	rsb	r3, lr, #32
 802319e:	920b      	str	r2, [sp, #44]	; 0x2c
 80231a0:	2220      	movs	r2, #32
 80231a2:	fb0a f303 	mul.w	r3, sl, r3
 80231a6:	9202      	str	r2, [sp, #8]
 80231a8:	9a01      	ldr	r2, [sp, #4]
 80231aa:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80231ae:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80231b2:	fb93 f7f2 	sdiv	r7, r3, r2
 80231b6:	fb02 3317 	mls	r3, r2, r7, r3
 80231ba:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80231be:	2b00      	cmp	r3, #0
 80231c0:	9308      	str	r3, [sp, #32]
 80231c2:	bfbc      	itt	lt
 80231c4:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80231c8:	189b      	addlt	r3, r3, r2
 80231ca:	eb07 0b01 	add.w	fp, r7, r1
 80231ce:	bfb8      	it	lt
 80231d0:	9308      	strlt	r3, [sp, #32]
 80231d2:	ea4f 136b 	mov.w	r3, fp, asr #5
 80231d6:	9304      	str	r3, [sp, #16]
 80231d8:	9b02      	ldr	r3, [sp, #8]
 80231da:	4573      	cmp	r3, lr
 80231dc:	d133      	bne.n	8023246 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 80231de:	9b04      	ldr	r3, [sp, #16]
 80231e0:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80231e4:	454b      	cmp	r3, r9
 80231e6:	d045      	beq.n	8023274 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80231e8:	8b62      	ldrh	r2, [r4, #26]
 80231ea:	8b23      	ldrh	r3, [r4, #24]
 80231ec:	4313      	orrs	r3, r2
 80231ee:	d00c      	beq.n	802320a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80231f0:	f1b8 0f00 	cmp.w	r8, #0
 80231f4:	db09      	blt.n	802320a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80231f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80231f8:	4543      	cmp	r3, r8
 80231fa:	dd06      	ble.n	802320a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80231fc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023200:	429a      	cmp	r2, r3
 8023202:	d313      	bcc.n	802322c <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8023204:	2301      	movs	r3, #1
 8023206:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802320a:	9b04      	ldr	r3, [sp, #16]
 802320c:	82e6      	strh	r6, [r4, #22]
 802320e:	82a3      	strh	r3, [r4, #20]
 8023210:	2300      	movs	r3, #0
 8023212:	8323      	strh	r3, [r4, #24]
 8023214:	8363      	strh	r3, [r4, #26]
 8023216:	e02d      	b.n	8023274 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8023218:	9a01      	ldr	r2, [sp, #4]
 802321a:	fb0a f30e 	mul.w	r3, sl, lr
 802321e:	4252      	negs	r2, r2
 8023220:	9201      	str	r2, [sp, #4]
 8023222:	f04f 32ff 	mov.w	r2, #4294967295
 8023226:	920b      	str	r2, [sp, #44]	; 0x2c
 8023228:	2200      	movs	r2, #0
 802322a:	e7bc      	b.n	80231a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 802322c:	f104 0314 	add.w	r3, r4, #20
 8023230:	6922      	ldr	r2, [r4, #16]
 8023232:	cb03      	ldmia	r3!, {r0, r1}
 8023234:	6010      	str	r0, [r2, #0]
 8023236:	6051      	str	r1, [r2, #4]
 8023238:	6923      	ldr	r3, [r4, #16]
 802323a:	3308      	adds	r3, #8
 802323c:	6123      	str	r3, [r4, #16]
 802323e:	68a3      	ldr	r3, [r4, #8]
 8023240:	3301      	adds	r3, #1
 8023242:	60a3      	str	r3, [r4, #8]
 8023244:	e7e1      	b.n	802320a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023246:	f00b 031f 	and.w	r3, fp, #31
 802324a:	f001 011f 	and.w	r1, r1, #31
 802324e:	8b20      	ldrh	r0, [r4, #24]
 8023250:	9309      	str	r3, [sp, #36]	; 0x24
 8023252:	9b02      	ldr	r3, [sp, #8]
 8023254:	eba3 020e 	sub.w	r2, r3, lr
 8023258:	8b63      	ldrh	r3, [r4, #26]
 802325a:	9300      	str	r3, [sp, #0]
 802325c:	9b04      	ldr	r3, [sp, #16]
 802325e:	42ab      	cmp	r3, r5
 8023260:	f040 80ef 	bne.w	8023442 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8023264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023266:	4410      	add	r0, r2
 8023268:	4419      	add	r1, r3
 802326a:	9b00      	ldr	r3, [sp, #0]
 802326c:	8320      	strh	r0, [r4, #24]
 802326e:	fb02 3101 	mla	r1, r2, r1, r3
 8023272:	8361      	strh	r1, [r4, #26]
 8023274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023276:	9904      	ldr	r1, [sp, #16]
 8023278:	4433      	add	r3, r6
 802327a:	9300      	str	r3, [sp, #0]
 802327c:	9a00      	ldr	r2, [sp, #0]
 802327e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023282:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8023286:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802328a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802328e:	4288      	cmp	r0, r1
 8023290:	d018      	beq.n	80232c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8023292:	8b60      	ldrh	r0, [r4, #26]
 8023294:	8b21      	ldrh	r1, [r4, #24]
 8023296:	ea50 0201 	orrs.w	r2, r0, r1
 802329a:	d00c      	beq.n	80232b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802329c:	2b00      	cmp	r3, #0
 802329e:	db0a      	blt.n	80232b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80232a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80232a2:	4299      	cmp	r1, r3
 80232a4:	dd07      	ble.n	80232b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80232a6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80232aa:	4299      	cmp	r1, r3
 80232ac:	f0c0 818b 	bcc.w	80235c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 80232b0:	2301      	movs	r3, #1
 80232b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80232b6:	9b04      	ldr	r3, [sp, #16]
 80232b8:	82a3      	strh	r3, [r4, #20]
 80232ba:	9b00      	ldr	r3, [sp, #0]
 80232bc:	82e3      	strh	r3, [r4, #22]
 80232be:	2300      	movs	r3, #0
 80232c0:	8323      	strh	r3, [r4, #24]
 80232c2:	8363      	strh	r3, [r4, #26]
 80232c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80232c6:	9a00      	ldr	r2, [sp, #0]
 80232c8:	4293      	cmp	r3, r2
 80232ca:	f000 808d 	beq.w	80233e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 80232ce:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80232d2:	9901      	ldr	r1, [sp, #4]
 80232d4:	9801      	ldr	r0, [sp, #4]
 80232d6:	fb93 f1f1 	sdiv	r1, r3, r1
 80232da:	fb00 3311 	mls	r3, r0, r1, r3
 80232de:	9106      	str	r1, [sp, #24]
 80232e0:	2b00      	cmp	r3, #0
 80232e2:	9307      	str	r3, [sp, #28]
 80232e4:	da04      	bge.n	80232f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 80232e6:	1e4b      	subs	r3, r1, #1
 80232e8:	9306      	str	r3, [sp, #24]
 80232ea:	9b07      	ldr	r3, [sp, #28]
 80232ec:	4403      	add	r3, r0
 80232ee:	9307      	str	r3, [sp, #28]
 80232f0:	9b08      	ldr	r3, [sp, #32]
 80232f2:	f04f 0c00 	mov.w	ip, #0
 80232f6:	9901      	ldr	r1, [sp, #4]
 80232f8:	1a5b      	subs	r3, r3, r1
 80232fa:	4659      	mov	r1, fp
 80232fc:	9308      	str	r3, [sp, #32]
 80232fe:	9b02      	ldr	r3, [sp, #8]
 8023300:	f1c3 0320 	rsb	r3, r3, #32
 8023304:	930a      	str	r3, [sp, #40]	; 0x28
 8023306:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023308:	9b02      	ldr	r3, [sp, #8]
 802330a:	1a1b      	subs	r3, r3, r0
 802330c:	9309      	str	r3, [sp, #36]	; 0x24
 802330e:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8023312:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023316:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 802331a:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 802331e:	181b      	adds	r3, r3, r0
 8023320:	bf58      	it	pl
 8023322:	9801      	ldrpl	r0, [sp, #4]
 8023324:	9308      	str	r3, [sp, #32]
 8023326:	bf54      	ite	pl
 8023328:	1a1b      	subpl	r3, r3, r0
 802332a:	9d06      	ldrmi	r5, [sp, #24]
 802332c:	9802      	ldr	r0, [sp, #8]
 802332e:	bf5e      	ittt	pl
 8023330:	9308      	strpl	r3, [sp, #32]
 8023332:	9b06      	ldrpl	r3, [sp, #24]
 8023334:	1c5d      	addpl	r5, r3, #1
 8023336:	44ab      	add	fp, r5
 8023338:	ea4f 136b 	mov.w	r3, fp, asr #5
 802333c:	9304      	str	r3, [sp, #16]
 802333e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023340:	4283      	cmp	r3, r0
 8023342:	f040 815a 	bne.w	80235fa <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8023346:	9b04      	ldr	r3, [sp, #16]
 8023348:	9a00      	ldr	r2, [sp, #0]
 802334a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802334e:	4543      	cmp	r3, r8
 8023350:	d01a      	beq.n	8023388 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023352:	8b61      	ldrh	r1, [r4, #26]
 8023354:	8b23      	ldrh	r3, [r4, #24]
 8023356:	430b      	orrs	r3, r1
 8023358:	d00e      	beq.n	8023378 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802335a:	f1be 0f00 	cmp.w	lr, #0
 802335e:	db0b      	blt.n	8023378 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023360:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023362:	4573      	cmp	r3, lr
 8023364:	dd08      	ble.n	8023378 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8023366:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802336a:	4299      	cmp	r1, r3
 802336c:	f0c0 8138 	bcc.w	80235e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8023370:	f04f 0301 	mov.w	r3, #1
 8023374:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023378:	9b04      	ldr	r3, [sp, #16]
 802337a:	f8a4 c018 	strh.w	ip, [r4, #24]
 802337e:	82a3      	strh	r3, [r4, #20]
 8023380:	9b00      	ldr	r3, [sp, #0]
 8023382:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8023386:	82e3      	strh	r3, [r4, #22]
 8023388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802338a:	9a00      	ldr	r2, [sp, #0]
 802338c:	441a      	add	r2, r3
 802338e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023392:	9200      	str	r2, [sp, #0]
 8023394:	9900      	ldr	r1, [sp, #0]
 8023396:	9a04      	ldr	r2, [sp, #16]
 8023398:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 802339c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80233a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80233a4:	4288      	cmp	r0, r1
 80233a6:	d01a      	beq.n	80233de <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 80233a8:	8b60      	ldrh	r0, [r4, #26]
 80233aa:	8b21      	ldrh	r1, [r4, #24]
 80233ac:	ea50 0201 	orrs.w	r2, r0, r1
 80233b0:	d00d      	beq.n	80233ce <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	db0b      	blt.n	80233ce <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80233b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80233b8:	4299      	cmp	r1, r3
 80233ba:	dd08      	ble.n	80233ce <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80233bc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80233c0:	4299      	cmp	r1, r3
 80233c2:	f0c0 81f9 	bcc.w	80237b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 80233c6:	f04f 0301 	mov.w	r3, #1
 80233ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80233ce:	9b04      	ldr	r3, [sp, #16]
 80233d0:	f8a4 c018 	strh.w	ip, [r4, #24]
 80233d4:	82a3      	strh	r3, [r4, #20]
 80233d6:	9b00      	ldr	r3, [sp, #0]
 80233d8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80233dc:	82e3      	strh	r3, [r4, #22]
 80233de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233e0:	4659      	mov	r1, fp
 80233e2:	9a00      	ldr	r2, [sp, #0]
 80233e4:	4293      	cmp	r3, r2
 80233e6:	d192      	bne.n	802330e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80233e8:	9b02      	ldr	r3, [sp, #8]
 80233ea:	f1c3 0c20 	rsb	ip, r3, #32
 80233ee:	9b05      	ldr	r3, [sp, #20]
 80233f0:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80233f4:	9b03      	ldr	r3, [sp, #12]
 80233f6:	459c      	cmp	ip, r3
 80233f8:	f040 81f8 	bne.w	80237ec <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 80233fc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023400:	9a00      	ldr	r2, [sp, #0]
 8023402:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8023406:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 802340a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802340e:	4288      	cmp	r0, r1
 8023410:	f43f ad54 	beq.w	8022ebc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023414:	8b60      	ldrh	r0, [r4, #26]
 8023416:	8b21      	ldrh	r1, [r4, #24]
 8023418:	ea50 0201 	orrs.w	r2, r0, r1
 802341c:	d00c      	beq.n	8023438 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802341e:	2b00      	cmp	r3, #0
 8023420:	db0a      	blt.n	8023438 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023422:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023424:	4299      	cmp	r1, r3
 8023426:	dd07      	ble.n	8023438 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8023428:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802342c:	4299      	cmp	r1, r3
 802342e:	f0c0 81d0 	bcc.w	80237d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8023432:	2301      	movs	r3, #1
 8023434:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023438:	9b00      	ldr	r3, [sp, #0]
 802343a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802343e:	82e3      	strh	r3, [r4, #22]
 8023440:	e517      	b.n	8022e72 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8023442:	2f00      	cmp	r7, #0
 8023444:	f2c0 8097 	blt.w	8023576 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8023448:	2301      	movs	r3, #1
 802344a:	f1c1 0c20 	rsb	ip, r1, #32
 802344e:	9307      	str	r3, [sp, #28]
 8023450:	2320      	movs	r3, #32
 8023452:	fb02 f20c 	mul.w	r2, r2, ip
 8023456:	9306      	str	r3, [sp, #24]
 8023458:	9b06      	ldr	r3, [sp, #24]
 802345a:	fb92 fcf7 	sdiv	ip, r2, r7
 802345e:	fb07 221c 	mls	r2, r7, ip, r2
 8023462:	4419      	add	r1, r3
 8023464:	9b00      	ldr	r3, [sp, #0]
 8023466:	2a00      	cmp	r2, #0
 8023468:	bfbc      	itt	lt
 802346a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802346e:	19d2      	addlt	r2, r2, r7
 8023470:	fb0c 3101 	mla	r1, ip, r1, r3
 8023474:	9b07      	ldr	r3, [sp, #28]
 8023476:	4460      	add	r0, ip
 8023478:	441d      	add	r5, r3
 802347a:	0433      	lsls	r3, r6, #16
 802347c:	b200      	sxth	r0, r0
 802347e:	930a      	str	r3, [sp, #40]	; 0x28
 8023480:	18eb      	adds	r3, r5, r3
 8023482:	b209      	sxth	r1, r1
 8023484:	8320      	strh	r0, [r4, #24]
 8023486:	454b      	cmp	r3, r9
 8023488:	8361      	strh	r1, [r4, #26]
 802348a:	d014      	beq.n	80234b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 802348c:	ea50 0301 	orrs.w	r3, r0, r1
 8023490:	d00c      	beq.n	80234ac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023492:	f1b8 0f00 	cmp.w	r8, #0
 8023496:	db09      	blt.n	80234ac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8023498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802349a:	4543      	cmp	r3, r8
 802349c:	dd06      	ble.n	80234ac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802349e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80234a2:	4299      	cmp	r1, r3
 80234a4:	d36e      	bcc.n	8023584 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80234a6:	2301      	movs	r3, #1
 80234a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80234ac:	2300      	movs	r3, #0
 80234ae:	82a5      	strh	r5, [r4, #20]
 80234b0:	82e6      	strh	r6, [r4, #22]
 80234b2:	8323      	strh	r3, [r4, #24]
 80234b4:	8363      	strh	r3, [r4, #26]
 80234b6:	9904      	ldr	r1, [sp, #16]
 80234b8:	eb0e 030c 	add.w	r3, lr, ip
 80234bc:	42a9      	cmp	r1, r5
 80234be:	d04d      	beq.n	802355c <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 80234c0:	9902      	ldr	r1, [sp, #8]
 80234c2:	1bd2      	subs	r2, r2, r7
 80234c4:	1ac9      	subs	r1, r1, r3
 80234c6:	9200      	str	r2, [sp, #0]
 80234c8:	448c      	add	ip, r1
 80234ca:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80234ce:	fb9c fef7 	sdiv	lr, ip, r7
 80234d2:	fb07 cc1e 	mls	ip, r7, lr, ip
 80234d6:	f1bc 0f00 	cmp.w	ip, #0
 80234da:	bfbc      	itt	lt
 80234dc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80234e0:	44bc      	addlt	ip, r7
 80234e2:	f10e 0101 	add.w	r1, lr, #1
 80234e6:	910d      	str	r1, [sp, #52]	; 0x34
 80234e8:	9a00      	ldr	r2, [sp, #0]
 80234ea:	8b20      	ldrh	r0, [r4, #24]
 80234ec:	eb12 020c 	adds.w	r2, r2, ip
 80234f0:	8b61      	ldrh	r1, [r4, #26]
 80234f2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80234f6:	9200      	str	r2, [sp, #0]
 80234f8:	bf5b      	ittet	pl
 80234fa:	1bd2      	subpl	r2, r2, r7
 80234fc:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8023500:	46f0      	movmi	r8, lr
 8023502:	9200      	strpl	r2, [sp, #0]
 8023504:	9a07      	ldr	r2, [sp, #28]
 8023506:	4440      	add	r0, r8
 8023508:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802350c:	4443      	add	r3, r8
 802350e:	4415      	add	r5, r2
 8023510:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023516:	b200      	sxth	r0, r0
 8023518:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802351c:	442a      	add	r2, r5
 802351e:	b209      	sxth	r1, r1
 8023520:	8320      	strh	r0, [r4, #24]
 8023522:	454a      	cmp	r2, r9
 8023524:	8361      	strh	r1, [r4, #26]
 8023526:	d016      	beq.n	8023556 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8023528:	ea50 0201 	orrs.w	r2, r0, r1
 802352c:	d00d      	beq.n	802354a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802352e:	f1b8 0f00 	cmp.w	r8, #0
 8023532:	db0a      	blt.n	802354a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8023534:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023536:	4541      	cmp	r1, r8
 8023538:	dd07      	ble.n	802354a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802353a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802353e:	4288      	cmp	r0, r1
 8023540:	d330      	bcc.n	80235a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8023542:	f04f 0201 	mov.w	r2, #1
 8023546:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802354a:	f04f 0200 	mov.w	r2, #0
 802354e:	82a5      	strh	r5, [r4, #20]
 8023550:	82e6      	strh	r6, [r4, #22]
 8023552:	8322      	strh	r2, [r4, #24]
 8023554:	8362      	strh	r2, [r4, #26]
 8023556:	9904      	ldr	r1, [sp, #16]
 8023558:	42a9      	cmp	r1, r5
 802355a:	d1c5      	bne.n	80234e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 802355c:	9a02      	ldr	r2, [sp, #8]
 802355e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023560:	1ad3      	subs	r3, r2, r3
 8023562:	8b22      	ldrh	r2, [r4, #24]
 8023564:	3120      	adds	r1, #32
 8023566:	441a      	add	r2, r3
 8023568:	8322      	strh	r2, [r4, #24]
 802356a:	9a06      	ldr	r2, [sp, #24]
 802356c:	1a89      	subs	r1, r1, r2
 802356e:	8b62      	ldrh	r2, [r4, #26]
 8023570:	fb03 2301 	mla	r3, r3, r1, r2
 8023574:	e64e      	b.n	8023214 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8023576:	f04f 33ff 	mov.w	r3, #4294967295
 802357a:	434a      	muls	r2, r1
 802357c:	427f      	negs	r7, r7
 802357e:	9307      	str	r3, [sp, #28]
 8023580:	2300      	movs	r3, #0
 8023582:	e768      	b.n	8023456 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8023584:	f104 0314 	add.w	r3, r4, #20
 8023588:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802358c:	cb03      	ldmia	r3!, {r0, r1}
 802358e:	f8c8 0000 	str.w	r0, [r8]
 8023592:	f8c8 1004 	str.w	r1, [r8, #4]
 8023596:	6923      	ldr	r3, [r4, #16]
 8023598:	3308      	adds	r3, #8
 802359a:	6123      	str	r3, [r4, #16]
 802359c:	68a3      	ldr	r3, [r4, #8]
 802359e:	3301      	adds	r3, #1
 80235a0:	60a3      	str	r3, [r4, #8]
 80235a2:	e783      	b.n	80234ac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80235a4:	f104 0814 	add.w	r8, r4, #20
 80235a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80235ac:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80235b0:	f8c9 0000 	str.w	r0, [r9]
 80235b4:	f8c9 1004 	str.w	r1, [r9, #4]
 80235b8:	6921      	ldr	r1, [r4, #16]
 80235ba:	3108      	adds	r1, #8
 80235bc:	6121      	str	r1, [r4, #16]
 80235be:	68a1      	ldr	r1, [r4, #8]
 80235c0:	3101      	adds	r1, #1
 80235c2:	60a1      	str	r1, [r4, #8]
 80235c4:	e7c1      	b.n	802354a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80235c6:	f104 0314 	add.w	r3, r4, #20
 80235ca:	6925      	ldr	r5, [r4, #16]
 80235cc:	cb03      	ldmia	r3!, {r0, r1}
 80235ce:	6028      	str	r0, [r5, #0]
 80235d0:	6069      	str	r1, [r5, #4]
 80235d2:	6923      	ldr	r3, [r4, #16]
 80235d4:	3308      	adds	r3, #8
 80235d6:	6123      	str	r3, [r4, #16]
 80235d8:	68a3      	ldr	r3, [r4, #8]
 80235da:	3301      	adds	r3, #1
 80235dc:	60a3      	str	r3, [r4, #8]
 80235de:	e66a      	b.n	80232b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80235e0:	f104 0314 	add.w	r3, r4, #20
 80235e4:	6925      	ldr	r5, [r4, #16]
 80235e6:	cb03      	ldmia	r3!, {r0, r1}
 80235e8:	6028      	str	r0, [r5, #0]
 80235ea:	6069      	str	r1, [r5, #4]
 80235ec:	6923      	ldr	r3, [r4, #16]
 80235ee:	3308      	adds	r3, #8
 80235f0:	6123      	str	r3, [r4, #16]
 80235f2:	68a3      	ldr	r3, [r4, #8]
 80235f4:	3301      	adds	r3, #1
 80235f6:	60a3      	str	r3, [r4, #8]
 80235f8:	e6be      	b.n	8023378 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80235fa:	f00b 031f 	and.w	r3, fp, #31
 80235fe:	114f      	asrs	r7, r1, #5
 8023600:	8b20      	ldrh	r0, [r4, #24]
 8023602:	f001 011f 	and.w	r1, r1, #31
 8023606:	930f      	str	r3, [sp, #60]	; 0x3c
 8023608:	9b04      	ldr	r3, [sp, #16]
 802360a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802360e:	429f      	cmp	r7, r3
 8023610:	d10a      	bne.n	8023628 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8023612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023614:	4418      	add	r0, r3
 8023616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023618:	4419      	add	r1, r3
 802361a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802361c:	8320      	strh	r0, [r4, #24]
 802361e:	fb03 9901 	mla	r9, r3, r1, r9
 8023622:	f8a4 901a 	strh.w	r9, [r4, #26]
 8023626:	e6af      	b.n	8023388 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023628:	2d00      	cmp	r5, #0
 802362a:	f2c0 809b 	blt.w	8023764 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802362e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023630:	f1c1 0320 	rsb	r3, r1, #32
 8023634:	4373      	muls	r3, r6
 8023636:	2601      	movs	r6, #1
 8023638:	960e      	str	r6, [sp, #56]	; 0x38
 802363a:	2620      	movs	r6, #32
 802363c:	960d      	str	r6, [sp, #52]	; 0x34
 802363e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023640:	fb93 f6f5 	sdiv	r6, r3, r5
 8023644:	4411      	add	r1, r2
 8023646:	fb05 3316 	mls	r3, r5, r6, r3
 802364a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802364c:	2b00      	cmp	r3, #0
 802364e:	4417      	add	r7, r2
 8023650:	9a00      	ldr	r2, [sp, #0]
 8023652:	bfbc      	itt	lt
 8023654:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8023658:	195b      	addlt	r3, r3, r5
 802365a:	0412      	lsls	r2, r2, #16
 802365c:	fb06 9101 	mla	r1, r6, r1, r9
 8023660:	4430      	add	r0, r6
 8023662:	eb07 0902 	add.w	r9, r7, r2
 8023666:	9210      	str	r2, [sp, #64]	; 0x40
 8023668:	b200      	sxth	r0, r0
 802366a:	b209      	sxth	r1, r1
 802366c:	45c1      	cmp	r9, r8
 802366e:	8320      	strh	r0, [r4, #24]
 8023670:	8361      	strh	r1, [r4, #26]
 8023672:	d017      	beq.n	80236a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8023674:	ea50 0201 	orrs.w	r2, r0, r1
 8023678:	d00d      	beq.n	8023696 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802367a:	f1be 0f00 	cmp.w	lr, #0
 802367e:	db0a      	blt.n	8023696 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023680:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023682:	4571      	cmp	r1, lr
 8023684:	dd07      	ble.n	8023696 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023686:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802368a:	4288      	cmp	r0, r1
 802368c:	d372      	bcc.n	8023774 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 802368e:	f04f 0201 	mov.w	r2, #1
 8023692:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023696:	9a00      	ldr	r2, [sp, #0]
 8023698:	82a7      	strh	r7, [r4, #20]
 802369a:	82e2      	strh	r2, [r4, #22]
 802369c:	f8a4 c018 	strh.w	ip, [r4, #24]
 80236a0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80236a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80236a6:	eb02 0e06 	add.w	lr, r2, r6
 80236aa:	9a04      	ldr	r2, [sp, #16]
 80236ac:	42ba      	cmp	r2, r7
 80236ae:	d049      	beq.n	8023744 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 80236b0:	9a02      	ldr	r2, [sp, #8]
 80236b2:	1b5b      	subs	r3, r3, r5
 80236b4:	eba2 010e 	sub.w	r1, r2, lr
 80236b8:	440e      	add	r6, r1
 80236ba:	0176      	lsls	r6, r6, #5
 80236bc:	fb96 f8f5 	sdiv	r8, r6, r5
 80236c0:	fb05 6618 	mls	r6, r5, r8, r6
 80236c4:	2e00      	cmp	r6, #0
 80236c6:	bfbc      	itt	lt
 80236c8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80236cc:	1976      	addlt	r6, r6, r5
 80236ce:	f108 0201 	add.w	r2, r8, #1
 80236d2:	9211      	str	r2, [sp, #68]	; 0x44
 80236d4:	199b      	adds	r3, r3, r6
 80236d6:	8b20      	ldrh	r0, [r4, #24]
 80236d8:	8b61      	ldrh	r1, [r4, #26]
 80236da:	bf54      	ite	pl
 80236dc:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 80236e0:	46c1      	movmi	r9, r8
 80236e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80236e4:	bf58      	it	pl
 80236e6:	1b5b      	subpl	r3, r3, r5
 80236e8:	4448      	add	r0, r9
 80236ea:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80236ee:	4417      	add	r7, r2
 80236f0:	44ce      	add	lr, r9
 80236f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236f4:	b200      	sxth	r0, r0
 80236f6:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80236fa:	b209      	sxth	r1, r1
 80236fc:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8023700:	443a      	add	r2, r7
 8023702:	8320      	strh	r0, [r4, #24]
 8023704:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8023708:	8361      	strh	r1, [r4, #26]
 802370a:	4552      	cmp	r2, sl
 802370c:	d017      	beq.n	802373e <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802370e:	ea50 0201 	orrs.w	r2, r0, r1
 8023712:	d00d      	beq.n	8023730 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023714:	f1b9 0f00 	cmp.w	r9, #0
 8023718:	db0a      	blt.n	8023730 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802371a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802371c:	4549      	cmp	r1, r9
 802371e:	dd07      	ble.n	8023730 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8023720:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023724:	4288      	cmp	r0, r1
 8023726:	d336      	bcc.n	8023796 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8023728:	f04f 0201 	mov.w	r2, #1
 802372c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023730:	9a00      	ldr	r2, [sp, #0]
 8023732:	82a7      	strh	r7, [r4, #20]
 8023734:	82e2      	strh	r2, [r4, #22]
 8023736:	f8a4 c018 	strh.w	ip, [r4, #24]
 802373a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802373e:	9a04      	ldr	r2, [sp, #16]
 8023740:	42ba      	cmp	r2, r7
 8023742:	d1c7      	bne.n	80236d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8023744:	9b02      	ldr	r3, [sp, #8]
 8023746:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023748:	eba3 0e0e 	sub.w	lr, r3, lr
 802374c:	8b23      	ldrh	r3, [r4, #24]
 802374e:	3120      	adds	r1, #32
 8023750:	4473      	add	r3, lr
 8023752:	8323      	strh	r3, [r4, #24]
 8023754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023756:	1ac9      	subs	r1, r1, r3
 8023758:	8b63      	ldrh	r3, [r4, #26]
 802375a:	fb0e 3e01 	mla	lr, lr, r1, r3
 802375e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023762:	e611      	b.n	8023388 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8023764:	f04f 36ff 	mov.w	r6, #4294967295
 8023768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802376a:	426d      	negs	r5, r5
 802376c:	960e      	str	r6, [sp, #56]	; 0x38
 802376e:	2600      	movs	r6, #0
 8023770:	434b      	muls	r3, r1
 8023772:	e763      	b.n	802363c <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8023774:	f104 0e14 	add.w	lr, r4, #20
 8023778:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802377c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8023780:	f8c8 0000 	str.w	r0, [r8]
 8023784:	f8c8 1004 	str.w	r1, [r8, #4]
 8023788:	6921      	ldr	r1, [r4, #16]
 802378a:	3108      	adds	r1, #8
 802378c:	6121      	str	r1, [r4, #16]
 802378e:	68a1      	ldr	r1, [r4, #8]
 8023790:	3101      	adds	r1, #1
 8023792:	60a1      	str	r1, [r4, #8]
 8023794:	e77f      	b.n	8023696 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8023796:	f104 0914 	add.w	r9, r4, #20
 802379a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802379e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80237a2:	f8ca 0000 	str.w	r0, [sl]
 80237a6:	f8ca 1004 	str.w	r1, [sl, #4]
 80237aa:	6921      	ldr	r1, [r4, #16]
 80237ac:	3108      	adds	r1, #8
 80237ae:	6121      	str	r1, [r4, #16]
 80237b0:	68a1      	ldr	r1, [r4, #8]
 80237b2:	3101      	adds	r1, #1
 80237b4:	60a1      	str	r1, [r4, #8]
 80237b6:	e7bb      	b.n	8023730 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80237b8:	f104 0314 	add.w	r3, r4, #20
 80237bc:	6925      	ldr	r5, [r4, #16]
 80237be:	cb03      	ldmia	r3!, {r0, r1}
 80237c0:	6028      	str	r0, [r5, #0]
 80237c2:	6069      	str	r1, [r5, #4]
 80237c4:	6923      	ldr	r3, [r4, #16]
 80237c6:	3308      	adds	r3, #8
 80237c8:	6123      	str	r3, [r4, #16]
 80237ca:	68a3      	ldr	r3, [r4, #8]
 80237cc:	3301      	adds	r3, #1
 80237ce:	60a3      	str	r3, [r4, #8]
 80237d0:	e5fd      	b.n	80233ce <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80237d2:	f104 0314 	add.w	r3, r4, #20
 80237d6:	6925      	ldr	r5, [r4, #16]
 80237d8:	cb03      	ldmia	r3!, {r0, r1}
 80237da:	6028      	str	r0, [r5, #0]
 80237dc:	6069      	str	r1, [r5, #4]
 80237de:	6923      	ldr	r3, [r4, #16]
 80237e0:	3308      	adds	r3, #8
 80237e2:	6123      	str	r3, [r4, #16]
 80237e4:	68a3      	ldr	r3, [r4, #8]
 80237e6:	3301      	adds	r3, #1
 80237e8:	60a3      	str	r3, [r4, #8]
 80237ea:	e625      	b.n	8023438 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80237ec:	9b05      	ldr	r3, [sp, #20]
 80237ee:	ea4f 176b 	mov.w	r7, fp, asr #5
 80237f2:	f00b 081f 	and.w	r8, fp, #31
 80237f6:	8b20      	ldrh	r0, [r4, #24]
 80237f8:	f003 031f 	and.w	r3, r3, #31
 80237fc:	4577      	cmp	r7, lr
 80237fe:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8023802:	9302      	str	r3, [sp, #8]
 8023804:	9b03      	ldr	r3, [sp, #12]
 8023806:	eba3 050c 	sub.w	r5, r3, ip
 802380a:	d108      	bne.n	802381e <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 802380c:	9b02      	ldr	r3, [sp, #8]
 802380e:	4428      	add	r0, r5
 8023810:	4498      	add	r8, r3
 8023812:	8320      	strh	r0, [r4, #24]
 8023814:	fb05 9508 	mla	r5, r5, r8, r9
 8023818:	8365      	strh	r5, [r4, #26]
 802381a:	f7ff bb4f 	b.w	8022ebc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802381e:	9b05      	ldr	r3, [sp, #20]
 8023820:	ebb3 030b 	subs.w	r3, r3, fp
 8023824:	f100 809c 	bmi.w	8023960 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8023828:	f1c8 0120 	rsb	r1, r8, #32
 802382c:	2201      	movs	r2, #1
 802382e:	f04f 0b20 	mov.w	fp, #32
 8023832:	434d      	muls	r5, r1
 8023834:	9201      	str	r2, [sp, #4]
 8023836:	9a01      	ldr	r2, [sp, #4]
 8023838:	44d8      	add	r8, fp
 802383a:	fb95 f6f3 	sdiv	r6, r5, r3
 802383e:	fb03 5516 	mls	r5, r3, r6, r5
 8023842:	4417      	add	r7, r2
 8023844:	9a00      	ldr	r2, [sp, #0]
 8023846:	2d00      	cmp	r5, #0
 8023848:	ea4f 4202 	mov.w	r2, r2, lsl #16
 802384c:	bfbc      	itt	lt
 802384e:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8023852:	18ed      	addlt	r5, r5, r3
 8023854:	eb07 0a02 	add.w	sl, r7, r2
 8023858:	9204      	str	r2, [sp, #16]
 802385a:	fb06 9808 	mla	r8, r6, r8, r9
 802385e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023862:	4430      	add	r0, r6
 8023864:	fa0f f188 	sxth.w	r1, r8
 8023868:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802386c:	b200      	sxth	r0, r0
 802386e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023872:	8361      	strh	r1, [r4, #26]
 8023874:	8320      	strh	r0, [r4, #24]
 8023876:	45ca      	cmp	sl, r9
 8023878:	d015      	beq.n	80238a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802387a:	ea50 0201 	orrs.w	r2, r0, r1
 802387e:	d00c      	beq.n	802389a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8023880:	f1b8 0f00 	cmp.w	r8, #0
 8023884:	db09      	blt.n	802389a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8023886:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023888:	4541      	cmp	r1, r8
 802388a:	dd06      	ble.n	802389a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802388c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023890:	4288      	cmp	r0, r1
 8023892:	d36e      	bcc.n	8023972 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8023894:	2101      	movs	r1, #1
 8023896:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802389a:	2100      	movs	r1, #0
 802389c:	9a00      	ldr	r2, [sp, #0]
 802389e:	82a7      	strh	r7, [r4, #20]
 80238a0:	82e2      	strh	r2, [r4, #22]
 80238a2:	8321      	strh	r1, [r4, #24]
 80238a4:	8361      	strh	r1, [r4, #26]
 80238a6:	45be      	cmp	lr, r7
 80238a8:	44b4      	add	ip, r6
 80238aa:	d048      	beq.n	802393e <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 80238ac:	9a03      	ldr	r2, [sp, #12]
 80238ae:	1aed      	subs	r5, r5, r3
 80238b0:	eba2 010c 	sub.w	r1, r2, ip
 80238b4:	440e      	add	r6, r1
 80238b6:	0176      	lsls	r6, r6, #5
 80238b8:	fb96 f8f3 	sdiv	r8, r6, r3
 80238bc:	fb03 6618 	mls	r6, r3, r8, r6
 80238c0:	2e00      	cmp	r6, #0
 80238c2:	bfbc      	itt	lt
 80238c4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80238c8:	18f6      	addlt	r6, r6, r3
 80238ca:	f108 0201 	add.w	r2, r8, #1
 80238ce:	9205      	str	r2, [sp, #20]
 80238d0:	19ad      	adds	r5, r5, r6
 80238d2:	8b20      	ldrh	r0, [r4, #24]
 80238d4:	8b61      	ldrh	r1, [r4, #26]
 80238d6:	bf54      	ite	pl
 80238d8:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 80238dc:	46c1      	movmi	r9, r8
 80238de:	9a01      	ldr	r2, [sp, #4]
 80238e0:	bf58      	it	pl
 80238e2:	1aed      	subpl	r5, r5, r3
 80238e4:	4448      	add	r0, r9
 80238e6:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80238ea:	4417      	add	r7, r2
 80238ec:	44cc      	add	ip, r9
 80238ee:	9a04      	ldr	r2, [sp, #16]
 80238f0:	b200      	sxth	r0, r0
 80238f2:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80238f6:	b209      	sxth	r1, r1
 80238f8:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80238fc:	443a      	add	r2, r7
 80238fe:	8320      	strh	r0, [r4, #24]
 8023900:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8023904:	8361      	strh	r1, [r4, #26]
 8023906:	4552      	cmp	r2, sl
 8023908:	d017      	beq.n	802393a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802390a:	ea50 0201 	orrs.w	r2, r0, r1
 802390e:	d00d      	beq.n	802392c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8023910:	f1b9 0f00 	cmp.w	r9, #0
 8023914:	db0a      	blt.n	802392c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8023916:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023918:	4549      	cmp	r1, r9
 802391a:	dd07      	ble.n	802392c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802391c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023920:	4288      	cmp	r0, r1
 8023922:	d337      	bcc.n	8023994 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8023924:	f04f 0201 	mov.w	r2, #1
 8023928:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802392c:	9a00      	ldr	r2, [sp, #0]
 802392e:	82a7      	strh	r7, [r4, #20]
 8023930:	82e2      	strh	r2, [r4, #22]
 8023932:	f04f 0200 	mov.w	r2, #0
 8023936:	8322      	strh	r2, [r4, #24]
 8023938:	8362      	strh	r2, [r4, #26]
 802393a:	45be      	cmp	lr, r7
 802393c:	d1c8      	bne.n	80238d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802393e:	9b03      	ldr	r3, [sp, #12]
 8023940:	8b62      	ldrh	r2, [r4, #26]
 8023942:	eba3 0c0c 	sub.w	ip, r3, ip
 8023946:	8b23      	ldrh	r3, [r4, #24]
 8023948:	4463      	add	r3, ip
 802394a:	8323      	strh	r3, [r4, #24]
 802394c:	9b02      	ldr	r3, [sp, #8]
 802394e:	3320      	adds	r3, #32
 8023950:	eba3 030b 	sub.w	r3, r3, fp
 8023954:	fb0c 2c03 	mla	ip, ip, r3, r2
 8023958:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802395c:	f7ff baae 	b.w	8022ebc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023960:	f04f 32ff 	mov.w	r2, #4294967295
 8023964:	fb05 f508 	mul.w	r5, r5, r8
 8023968:	425b      	negs	r3, r3
 802396a:	f04f 0b00 	mov.w	fp, #0
 802396e:	9201      	str	r2, [sp, #4]
 8023970:	e761      	b.n	8023836 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8023972:	f104 0814 	add.w	r8, r4, #20
 8023976:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802397a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802397e:	f8c9 0000 	str.w	r0, [r9]
 8023982:	f8c9 1004 	str.w	r1, [r9, #4]
 8023986:	6921      	ldr	r1, [r4, #16]
 8023988:	3108      	adds	r1, #8
 802398a:	6121      	str	r1, [r4, #16]
 802398c:	68a1      	ldr	r1, [r4, #8]
 802398e:	3101      	adds	r1, #1
 8023990:	60a1      	str	r1, [r4, #8]
 8023992:	e782      	b.n	802389a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8023994:	f104 0914 	add.w	r9, r4, #20
 8023998:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802399c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80239a0:	f8ca 0000 	str.w	r0, [sl]
 80239a4:	f8ca 1004 	str.w	r1, [sl, #4]
 80239a8:	6921      	ldr	r1, [r4, #16]
 80239aa:	3108      	adds	r1, #8
 80239ac:	6121      	str	r1, [r4, #16]
 80239ae:	68a1      	ldr	r1, [r4, #8]
 80239b0:	3101      	adds	r1, #1
 80239b2:	60a1      	str	r1, [r4, #8]
 80239b4:	e7ba      	b.n	802392c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

080239b6 <_ZN8touchgfx7Outline6lineToEii>:
 80239b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80239b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80239ba:	4604      	mov	r4, r0
 80239bc:	460d      	mov	r5, r1
 80239be:	4616      	mov	r6, r2
 80239c0:	079b      	lsls	r3, r3, #30
 80239c2:	d526      	bpl.n	8023a12 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80239c4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80239c8:	ea85 0001 	eor.w	r0, r5, r1
 80239cc:	ea86 0302 	eor.w	r3, r6, r2
 80239d0:	4303      	orrs	r3, r0
 80239d2:	d01e      	beq.n	8023a12 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80239d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80239d6:	114b      	asrs	r3, r1, #5
 80239d8:	9600      	str	r6, [sp, #0]
 80239da:	4283      	cmp	r3, r0
 80239dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80239de:	bfb8      	it	lt
 80239e0:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80239e2:	3301      	adds	r3, #1
 80239e4:	4283      	cmp	r3, r0
 80239e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80239e8:	bfc8      	it	gt
 80239ea:	6363      	strgt	r3, [r4, #52]	; 0x34
 80239ec:	116b      	asrs	r3, r5, #5
 80239ee:	4283      	cmp	r3, r0
 80239f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80239f2:	bfb8      	it	lt
 80239f4:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80239f6:	3301      	adds	r3, #1
 80239f8:	4283      	cmp	r3, r0
 80239fa:	4620      	mov	r0, r4
 80239fc:	bfc8      	it	gt
 80239fe:	6363      	strgt	r3, [r4, #52]	; 0x34
 8023a00:	462b      	mov	r3, r5
 8023a02:	f7ff f9e3 	bl	8022dcc <_ZN8touchgfx7Outline10renderLineEiiii>
 8023a06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023a08:	f043 0301 	orr.w	r3, r3, #1
 8023a0c:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8023a10:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023a12:	b002      	add	sp, #8
 8023a14:	bd70      	pop	{r4, r5, r6, pc}

08023a16 <_ZN8touchgfx7Outline6moveToEii>:
 8023a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a18:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8023a1a:	4615      	mov	r5, r2
 8023a1c:	4604      	mov	r4, r0
 8023a1e:	460e      	mov	r6, r1
 8023a20:	079a      	lsls	r2, r3, #30
 8023a22:	d401      	bmi.n	8023a28 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8023a24:	f7ff f98c 	bl	8022d40 <_ZN8touchgfx7Outline5resetEv>
 8023a28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023a2a:	07db      	lsls	r3, r3, #31
 8023a2c:	d504      	bpl.n	8023a38 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8023a2e:	4620      	mov	r0, r4
 8023a30:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8023a34:	f7ff ffbf 	bl	80239b6 <_ZN8touchgfx7Outline6lineToEii>
 8023a38:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8023a3c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023a40:	116f      	asrs	r7, r5, #5
 8023a42:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8023a46:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8023a4a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8023a4e:	4291      	cmp	r1, r2
 8023a50:	d015      	beq.n	8023a7e <_ZN8touchgfx7Outline6moveToEii+0x68>
 8023a52:	8b61      	ldrh	r1, [r4, #26]
 8023a54:	8b22      	ldrh	r2, [r4, #24]
 8023a56:	430a      	orrs	r2, r1
 8023a58:	d00b      	beq.n	8023a72 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8023a5a:	2b00      	cmp	r3, #0
 8023a5c:	db09      	blt.n	8023a72 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8023a5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023a60:	429a      	cmp	r2, r3
 8023a62:	dd06      	ble.n	8023a72 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8023a64:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023a68:	429a      	cmp	r2, r3
 8023a6a:	d30d      	bcc.n	8023a88 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8023a6c:	2301      	movs	r3, #1
 8023a6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023a72:	2300      	movs	r3, #0
 8023a74:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023a78:	82e7      	strh	r7, [r4, #22]
 8023a7a:	8323      	strh	r3, [r4, #24]
 8023a7c:	8363      	strh	r3, [r4, #26]
 8023a7e:	61e6      	str	r6, [r4, #28]
 8023a80:	62a5      	str	r5, [r4, #40]	; 0x28
 8023a82:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8023a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023a88:	f104 0314 	add.w	r3, r4, #20
 8023a8c:	6922      	ldr	r2, [r4, #16]
 8023a8e:	cb03      	ldmia	r3!, {r0, r1}
 8023a90:	6010      	str	r0, [r2, #0]
 8023a92:	6051      	str	r1, [r2, #4]
 8023a94:	6923      	ldr	r3, [r4, #16]
 8023a96:	3308      	adds	r3, #8
 8023a98:	6123      	str	r3, [r4, #16]
 8023a9a:	68a3      	ldr	r3, [r4, #8]
 8023a9c:	3301      	adds	r3, #1
 8023a9e:	60a3      	str	r3, [r4, #8]
 8023aa0:	e7e7      	b.n	8023a72 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08023aa2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8023aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023aa6:	b0d1      	sub	sp, #324	; 0x144
 8023aa8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8023aac:	466c      	mov	r4, sp
 8023aae:	1a0d      	subs	r5, r1, r0
 8023ab0:	f100 0208 	add.w	r2, r0, #8
 8023ab4:	2d48      	cmp	r5, #72	; 0x48
 8023ab6:	f340 80ba 	ble.w	8023c2e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8023aba:	112d      	asrs	r5, r5, #4
 8023abc:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8023ac0:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8023ac4:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8023ac8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8023acc:	f9b0 8000 	ldrsh.w	r8, [r0]
 8023ad0:	681e      	ldr	r6, [r3, #0]
 8023ad2:	6006      	str	r6, [r0, #0]
 8023ad4:	685e      	ldr	r6, [r3, #4]
 8023ad6:	6046      	str	r6, [r0, #4]
 8023ad8:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8023adc:	f8a3 c004 	strh.w	ip, [r3, #4]
 8023ae0:	f8a3 e002 	strh.w	lr, [r3, #2]
 8023ae4:	80df      	strh	r7, [r3, #6]
 8023ae6:	f1a1 0308 	sub.w	r3, r1, #8
 8023aea:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8023aee:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8023af2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8023af6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8023afa:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8023afe:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8023b02:	45ac      	cmp	ip, r5
 8023b04:	dd0f      	ble.n	8023b26 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8023b06:	681d      	ldr	r5, [r3, #0]
 8023b08:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8023b0c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8023b10:	6015      	str	r5, [r2, #0]
 8023b12:	685d      	ldr	r5, [r3, #4]
 8023b14:	6055      	str	r5, [r2, #4]
 8023b16:	f821 7c08 	strh.w	r7, [r1, #-8]
 8023b1a:	f821 6c06 	strh.w	r6, [r1, #-6]
 8023b1e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8023b22:	f821 cc02 	strh.w	ip, [r1, #-2]
 8023b26:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8023b2a:	f9b0 7000 	ldrsh.w	r7, [r0]
 8023b2e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8023b32:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8023b36:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8023b3a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8023b3e:	4565      	cmp	r5, ip
 8023b40:	dd0d      	ble.n	8023b5e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8023b42:	6815      	ldr	r5, [r2, #0]
 8023b44:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8023b48:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8023b4c:	6005      	str	r5, [r0, #0]
 8023b4e:	6855      	ldr	r5, [r2, #4]
 8023b50:	8107      	strh	r7, [r0, #8]
 8023b52:	6045      	str	r5, [r0, #4]
 8023b54:	8146      	strh	r6, [r0, #10]
 8023b56:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8023b5a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8023b5e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8023b62:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8023b66:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8023b6a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8023b6e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8023b72:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8023b76:	45ac      	cmp	ip, r5
 8023b78:	dd0f      	ble.n	8023b9a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8023b7a:	681d      	ldr	r5, [r3, #0]
 8023b7c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8023b80:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8023b84:	6005      	str	r5, [r0, #0]
 8023b86:	685d      	ldr	r5, [r3, #4]
 8023b88:	6045      	str	r5, [r0, #4]
 8023b8a:	f821 7c08 	strh.w	r7, [r1, #-8]
 8023b8e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8023b92:	f821 ec04 	strh.w	lr, [r1, #-4]
 8023b96:	f821 cc02 	strh.w	ip, [r1, #-2]
 8023b9a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8023b9e:	f102 0508 	add.w	r5, r2, #8
 8023ba2:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8023ba6:	f9b0 e000 	ldrsh.w	lr, [r0]
 8023baa:	462f      	mov	r7, r5
 8023bac:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8023bb0:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8023bb4:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8023bb8:	45b2      	cmp	sl, r6
 8023bba:	dc18      	bgt.n	8023bee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8023bbc:	3b08      	subs	r3, #8
 8023bbe:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8023bc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8023bc6:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8023bca:	45b2      	cmp	sl, r6
 8023bcc:	dbf6      	blt.n	8023bbc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8023bce:	42ab      	cmp	r3, r5
 8023bd0:	681e      	ldr	r6, [r3, #0]
 8023bd2:	d30e      	bcc.n	8023bf2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8023bd4:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8023bd8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8023bdc:	602e      	str	r6, [r5, #0]
 8023bde:	685e      	ldr	r6, [r3, #4]
 8023be0:	606e      	str	r6, [r5, #4]
 8023be2:	f8a3 9000 	strh.w	r9, [r3]
 8023be6:	f8a3 8002 	strh.w	r8, [r3, #2]
 8023bea:	809f      	strh	r7, [r3, #4]
 8023bec:	80da      	strh	r2, [r3, #6]
 8023bee:	462a      	mov	r2, r5
 8023bf0:	e7d3      	b.n	8023b9a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8023bf2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8023bf6:	6006      	str	r6, [r0, #0]
 8023bf8:	685e      	ldr	r6, [r3, #4]
 8023bfa:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8023bfe:	6046      	str	r6, [r0, #4]
 8023c00:	1a1e      	subs	r6, r3, r0
 8023c02:	80da      	strh	r2, [r3, #6]
 8023c04:	1b4a      	subs	r2, r1, r5
 8023c06:	f8a3 e000 	strh.w	lr, [r3]
 8023c0a:	10d2      	asrs	r2, r2, #3
 8023c0c:	f8a3 c002 	strh.w	ip, [r3, #2]
 8023c10:	f8a3 8004 	strh.w	r8, [r3, #4]
 8023c14:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8023c18:	bfb5      	itete	lt
 8023c1a:	e9c4 0300 	strdlt	r0, r3, [r4]
 8023c1e:	4607      	movge	r7, r0
 8023c20:	460b      	movlt	r3, r1
 8023c22:	e9c4 5100 	strdge	r5, r1, [r4]
 8023c26:	4638      	mov	r0, r7
 8023c28:	3408      	adds	r4, #8
 8023c2a:	4619      	mov	r1, r3
 8023c2c:	e73f      	b.n	8023aae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8023c2e:	4291      	cmp	r1, r2
 8023c30:	d925      	bls.n	8023c7e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8023c32:	f1a2 0310 	sub.w	r3, r2, #16
 8023c36:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8023c3a:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8023c3e:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8023c42:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8023c46:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8023c4a:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8023c4e:	42b5      	cmp	r5, r6
 8023c50:	dd13      	ble.n	8023c7a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8023c52:	461d      	mov	r5, r3
 8023c54:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8023c58:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8023c5c:	3b08      	subs	r3, #8
 8023c5e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8023c62:	619e      	str	r6, [r3, #24]
 8023c64:	42a8      	cmp	r0, r5
 8023c66:	686e      	ldr	r6, [r5, #4]
 8023c68:	f8a3 c010 	strh.w	ip, [r3, #16]
 8023c6c:	61de      	str	r6, [r3, #28]
 8023c6e:	825f      	strh	r7, [r3, #18]
 8023c70:	f8a3 8014 	strh.w	r8, [r3, #20]
 8023c74:	f8a3 e016 	strh.w	lr, [r3, #22]
 8023c78:	d1dd      	bne.n	8023c36 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8023c7a:	3208      	adds	r2, #8
 8023c7c:	e7d7      	b.n	8023c2e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8023c7e:	466b      	mov	r3, sp
 8023c80:	429c      	cmp	r4, r3
 8023c82:	d903      	bls.n	8023c8c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8023c84:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8023c88:	3c08      	subs	r4, #8
 8023c8a:	e710      	b.n	8023aae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8023c8c:	b051      	add	sp, #324	; 0x144
 8023c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023c92 <_ZN8touchgfx7Outline9sortCellsEv>:
 8023c92:	6881      	ldr	r1, [r0, #8]
 8023c94:	b111      	cbz	r1, 8023c9c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8023c96:	68c0      	ldr	r0, [r0, #12]
 8023c98:	f7ff bf03 	b.w	8023aa2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8023c9c:	4770      	bx	lr

08023c9e <_ZN8touchgfx7Outline8getCellsEv>:
 8023c9e:	b510      	push	{r4, lr}
 8023ca0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8023ca2:	4604      	mov	r4, r0
 8023ca4:	07da      	lsls	r2, r3, #31
 8023ca6:	d507      	bpl.n	8023cb8 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8023ca8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8023cac:	f7ff fe83 	bl	80239b6 <_ZN8touchgfx7Outline6lineToEii>
 8023cb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023cb2:	f023 0301 	bic.w	r3, r3, #1
 8023cb6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023cb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023cba:	079b      	lsls	r3, r3, #30
 8023cbc:	d51a      	bpl.n	8023cf4 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8023cbe:	8b62      	ldrh	r2, [r4, #26]
 8023cc0:	8b23      	ldrh	r3, [r4, #24]
 8023cc2:	4313      	orrs	r3, r2
 8023cc4:	d00d      	beq.n	8023ce2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8023cc6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023cca:	2b00      	cmp	r3, #0
 8023ccc:	db09      	blt.n	8023ce2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8023cce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023cd0:	4293      	cmp	r3, r2
 8023cd2:	da06      	bge.n	8023ce2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8023cd4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8023cd8:	429a      	cmp	r2, r3
 8023cda:	d80d      	bhi.n	8023cf8 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8023cdc:	2301      	movs	r3, #1
 8023cde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023ce2:	68a0      	ldr	r0, [r4, #8]
 8023ce4:	b138      	cbz	r0, 8023cf6 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8023ce6:	4620      	mov	r0, r4
 8023ce8:	f7ff ffd3 	bl	8023c92 <_ZN8touchgfx7Outline9sortCellsEv>
 8023cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023cee:	f023 0302 	bic.w	r3, r3, #2
 8023cf2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023cf4:	68e0      	ldr	r0, [r4, #12]
 8023cf6:	bd10      	pop	{r4, pc}
 8023cf8:	f104 0314 	add.w	r3, r4, #20
 8023cfc:	6922      	ldr	r2, [r4, #16]
 8023cfe:	cb03      	ldmia	r3!, {r0, r1}
 8023d00:	6010      	str	r0, [r2, #0]
 8023d02:	6051      	str	r1, [r2, #4]
 8023d04:	6923      	ldr	r3, [r4, #16]
 8023d06:	3308      	adds	r3, #8
 8023d08:	6123      	str	r3, [r4, #16]
 8023d0a:	68a3      	ldr	r3, [r4, #8]
 8023d0c:	3301      	adds	r3, #1
 8023d0e:	60a3      	str	r3, [r4, #8]
 8023d10:	e7e7      	b.n	8023ce2 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08023d12 <_ZN8touchgfx8ScanlineD1Ev>:
 8023d12:	4770      	bx	lr

08023d14 <_ZN8touchgfx8ScanlineD0Ev>:
 8023d14:	b510      	push	{r4, lr}
 8023d16:	4604      	mov	r4, r0
 8023d18:	2124      	movs	r1, #36	; 0x24
 8023d1a:	f000 f87a 	bl	8023e12 <_ZdlPvj>
 8023d1e:	4620      	mov	r0, r4
 8023d20:	bd10      	pop	{r4, pc}

08023d22 <_ZN8touchgfx8Scanline5resetEv>:
 8023d22:	b510      	push	{r4, lr}
 8023d24:	4604      	mov	r4, r0
 8023d26:	f7f3 f8f9 	bl	8016f1c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8023d2a:	61a0      	str	r0, [r4, #24]
 8023d2c:	f7f3 f8fc 	bl	8016f28 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8023d30:	61e0      	str	r0, [r4, #28]
 8023d32:	f7f3 f8ff 	bl	8016f34 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8023d36:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023d3a:	6220      	str	r0, [r4, #32]
 8023d3c:	6160      	str	r0, [r4, #20]
 8023d3e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8023d42:	69e3      	ldr	r3, [r4, #28]
 8023d44:	6123      	str	r3, [r4, #16]
 8023d46:	2300      	movs	r3, #0
 8023d48:	60e3      	str	r3, [r4, #12]
 8023d4a:	bd10      	pop	{r4, pc}

08023d4c <_ZN8touchgfx8ScanlineC1Ev>:
 8023d4c:	4b07      	ldr	r3, [pc, #28]	; (8023d6c <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8023d4e:	b510      	push	{r4, lr}
 8023d50:	6003      	str	r3, [r0, #0]
 8023d52:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023d56:	4604      	mov	r4, r0
 8023d58:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8023d5c:	2300      	movs	r3, #0
 8023d5e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023d62:	6143      	str	r3, [r0, #20]
 8023d64:	f7ff ffdd 	bl	8023d22 <_ZN8touchgfx8Scanline5resetEv>
 8023d68:	4620      	mov	r0, r4
 8023d6a:	bd10      	pop	{r4, pc}
 8023d6c:	0802900c 	.word	0x0802900c

08023d70 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8023d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d74:	1e0c      	subs	r4, r1, #0
 8023d76:	4605      	mov	r5, r0
 8023d78:	4617      	mov	r7, r2
 8023d7a:	461e      	mov	r6, r3
 8023d7c:	da03      	bge.n	8023d86 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8023d7e:	4426      	add	r6, r4
 8023d80:	2e01      	cmp	r6, #1
 8023d82:	d421      	bmi.n	8023dc8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8023d84:	2400      	movs	r4, #0
 8023d86:	f7f3 f8c3 	bl	8016f10 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023d8a:	42a0      	cmp	r0, r4
 8023d8c:	d91c      	bls.n	8023dc8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8023d8e:	eb04 0806 	add.w	r8, r4, r6
 8023d92:	f7f3 f8bd 	bl	8016f10 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023d96:	4580      	cmp	r8, r0
 8023d98:	d902      	bls.n	8023da0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8023d9a:	f7f3 f8b9 	bl	8016f10 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023d9e:	1b06      	subs	r6, r0, r4
 8023da0:	69a8      	ldr	r0, [r5, #24]
 8023da2:	4632      	mov	r2, r6
 8023da4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8023da8:	4420      	add	r0, r4
 8023daa:	f7f4 fdb0 	bl	801890e <_ZN8touchgfx6memsetEPvhm>
 8023dae:	686b      	ldr	r3, [r5, #4]
 8023db0:	b2b2      	uxth	r2, r6
 8023db2:	3301      	adds	r3, #1
 8023db4:	42a3      	cmp	r3, r4
 8023db6:	696b      	ldr	r3, [r5, #20]
 8023db8:	d108      	bne.n	8023dcc <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8023dba:	8819      	ldrh	r1, [r3, #0]
 8023dbc:	440a      	add	r2, r1
 8023dbe:	801a      	strh	r2, [r3, #0]
 8023dc0:	3c01      	subs	r4, #1
 8023dc2:	4434      	add	r4, r6
 8023dc4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8023dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023dcc:	1c99      	adds	r1, r3, #2
 8023dce:	6169      	str	r1, [r5, #20]
 8023dd0:	805a      	strh	r2, [r3, #2]
 8023dd2:	692b      	ldr	r3, [r5, #16]
 8023dd4:	1c9a      	adds	r2, r3, #2
 8023dd6:	612a      	str	r2, [r5, #16]
 8023dd8:	805c      	strh	r4, [r3, #2]
 8023dda:	68eb      	ldr	r3, [r5, #12]
 8023ddc:	3301      	adds	r3, #1
 8023dde:	60eb      	str	r3, [r5, #12]
 8023de0:	e7ee      	b.n	8023dc0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08023de2 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8023de2:	2200      	movs	r2, #0
 8023de4:	6002      	str	r2, [r0, #0]
 8023de6:	7102      	strb	r2, [r0, #4]
 8023de8:	6102      	str	r2, [r0, #16]
 8023dea:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8023dee:	4770      	bx	lr

08023df0 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8023df0:	4770      	bx	lr

08023df2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8023df2:	6083      	str	r3, [r0, #8]
 8023df4:	9b00      	ldr	r3, [sp, #0]
 8023df6:	6001      	str	r1, [r0, #0]
 8023df8:	60c3      	str	r3, [r0, #12]
 8023dfa:	9b01      	ldr	r3, [sp, #4]
 8023dfc:	7102      	strb	r2, [r0, #4]
 8023dfe:	6103      	str	r3, [r0, #16]
 8023e00:	4770      	bx	lr

08023e02 <__aeabi_atexit>:
 8023e02:	460b      	mov	r3, r1
 8023e04:	4601      	mov	r1, r0
 8023e06:	4618      	mov	r0, r3
 8023e08:	f000 b852 	b.w	8023eb0 <__cxa_atexit>

08023e0c <__cxa_pure_virtual>:
 8023e0c:	b508      	push	{r3, lr}
 8023e0e:	f000 f81f 	bl	8023e50 <_ZSt9terminatev>

08023e12 <_ZdlPvj>:
 8023e12:	f000 b80f 	b.w	8023e34 <_ZdlPv>

08023e16 <__cxa_guard_acquire>:
 8023e16:	6803      	ldr	r3, [r0, #0]
 8023e18:	07db      	lsls	r3, r3, #31
 8023e1a:	d406      	bmi.n	8023e2a <__cxa_guard_acquire+0x14>
 8023e1c:	7843      	ldrb	r3, [r0, #1]
 8023e1e:	b103      	cbz	r3, 8023e22 <__cxa_guard_acquire+0xc>
 8023e20:	deff      	udf	#255	; 0xff
 8023e22:	2301      	movs	r3, #1
 8023e24:	7043      	strb	r3, [r0, #1]
 8023e26:	4618      	mov	r0, r3
 8023e28:	4770      	bx	lr
 8023e2a:	2000      	movs	r0, #0
 8023e2c:	4770      	bx	lr

08023e2e <__cxa_guard_release>:
 8023e2e:	2301      	movs	r3, #1
 8023e30:	6003      	str	r3, [r0, #0]
 8023e32:	4770      	bx	lr

08023e34 <_ZdlPv>:
 8023e34:	f000 b88e 	b.w	8023f54 <free>

08023e38 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8023e38:	b508      	push	{r3, lr}
 8023e3a:	4780      	blx	r0
 8023e3c:	f000 f80d 	bl	8023e5a <abort>

08023e40 <_ZSt13get_terminatev>:
 8023e40:	4b02      	ldr	r3, [pc, #8]	; (8023e4c <_ZSt13get_terminatev+0xc>)
 8023e42:	6818      	ldr	r0, [r3, #0]
 8023e44:	f3bf 8f5b 	dmb	ish
 8023e48:	4770      	bx	lr
 8023e4a:	bf00      	nop
 8023e4c:	20000094 	.word	0x20000094

08023e50 <_ZSt9terminatev>:
 8023e50:	b508      	push	{r3, lr}
 8023e52:	f7ff fff5 	bl	8023e40 <_ZSt13get_terminatev>
 8023e56:	f7ff ffef 	bl	8023e38 <_ZN10__cxxabiv111__terminateEPFvvE>

08023e5a <abort>:
 8023e5a:	b508      	push	{r3, lr}
 8023e5c:	2006      	movs	r0, #6
 8023e5e:	f000 fc3d 	bl	80246dc <raise>
 8023e62:	2001      	movs	r0, #1
 8023e64:	f7df f822 	bl	8002eac <_exit>

08023e68 <__assert_func>:
 8023e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023e6a:	461c      	mov	r4, r3
 8023e6c:	4b09      	ldr	r3, [pc, #36]	; (8023e94 <__assert_func+0x2c>)
 8023e6e:	681b      	ldr	r3, [r3, #0]
 8023e70:	4605      	mov	r5, r0
 8023e72:	68d8      	ldr	r0, [r3, #12]
 8023e74:	b152      	cbz	r2, 8023e8c <__assert_func+0x24>
 8023e76:	4b08      	ldr	r3, [pc, #32]	; (8023e98 <__assert_func+0x30>)
 8023e78:	9100      	str	r1, [sp, #0]
 8023e7a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8023e7e:	4907      	ldr	r1, [pc, #28]	; (8023e9c <__assert_func+0x34>)
 8023e80:	462b      	mov	r3, r5
 8023e82:	4622      	mov	r2, r4
 8023e84:	f000 f828 	bl	8023ed8 <fiprintf>
 8023e88:	f7ff ffe7 	bl	8023e5a <abort>
 8023e8c:	4b04      	ldr	r3, [pc, #16]	; (8023ea0 <__assert_func+0x38>)
 8023e8e:	461a      	mov	r2, r3
 8023e90:	e7f2      	b.n	8023e78 <__assert_func+0x10>
 8023e92:	bf00      	nop
 8023e94:	20000098 	.word	0x20000098
 8023e98:	08029014 	.word	0x08029014
 8023e9c:	08029021 	.word	0x08029021
 8023ea0:	0802904f 	.word	0x0802904f

08023ea4 <atexit>:
 8023ea4:	2300      	movs	r3, #0
 8023ea6:	4601      	mov	r1, r0
 8023ea8:	461a      	mov	r2, r3
 8023eaa:	4618      	mov	r0, r3
 8023eac:	f000 bcf2 	b.w	8024894 <__register_exitproc>

08023eb0 <__cxa_atexit>:
 8023eb0:	b510      	push	{r4, lr}
 8023eb2:	4c05      	ldr	r4, [pc, #20]	; (8023ec8 <__cxa_atexit+0x18>)
 8023eb4:	4613      	mov	r3, r2
 8023eb6:	b12c      	cbz	r4, 8023ec4 <__cxa_atexit+0x14>
 8023eb8:	460a      	mov	r2, r1
 8023eba:	4601      	mov	r1, r0
 8023ebc:	2002      	movs	r0, #2
 8023ebe:	f000 fce9 	bl	8024894 <__register_exitproc>
 8023ec2:	bd10      	pop	{r4, pc}
 8023ec4:	4620      	mov	r0, r4
 8023ec6:	e7fc      	b.n	8023ec2 <__cxa_atexit+0x12>
 8023ec8:	08024895 	.word	0x08024895

08023ecc <__errno>:
 8023ecc:	4b01      	ldr	r3, [pc, #4]	; (8023ed4 <__errno+0x8>)
 8023ece:	6818      	ldr	r0, [r3, #0]
 8023ed0:	4770      	bx	lr
 8023ed2:	bf00      	nop
 8023ed4:	20000098 	.word	0x20000098

08023ed8 <fiprintf>:
 8023ed8:	b40e      	push	{r1, r2, r3}
 8023eda:	b503      	push	{r0, r1, lr}
 8023edc:	4601      	mov	r1, r0
 8023ede:	ab03      	add	r3, sp, #12
 8023ee0:	4805      	ldr	r0, [pc, #20]	; (8023ef8 <fiprintf+0x20>)
 8023ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8023ee6:	6800      	ldr	r0, [r0, #0]
 8023ee8:	9301      	str	r3, [sp, #4]
 8023eea:	f000 f921 	bl	8024130 <_vfiprintf_r>
 8023eee:	b002      	add	sp, #8
 8023ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8023ef4:	b003      	add	sp, #12
 8023ef6:	4770      	bx	lr
 8023ef8:	20000098 	.word	0x20000098

08023efc <__libc_init_array>:
 8023efc:	b570      	push	{r4, r5, r6, lr}
 8023efe:	4e0d      	ldr	r6, [pc, #52]	; (8023f34 <__libc_init_array+0x38>)
 8023f00:	4c0d      	ldr	r4, [pc, #52]	; (8023f38 <__libc_init_array+0x3c>)
 8023f02:	1ba4      	subs	r4, r4, r6
 8023f04:	10a4      	asrs	r4, r4, #2
 8023f06:	2500      	movs	r5, #0
 8023f08:	42a5      	cmp	r5, r4
 8023f0a:	d109      	bne.n	8023f20 <__libc_init_array+0x24>
 8023f0c:	4e0b      	ldr	r6, [pc, #44]	; (8023f3c <__libc_init_array+0x40>)
 8023f0e:	4c0c      	ldr	r4, [pc, #48]	; (8023f40 <__libc_init_array+0x44>)
 8023f10:	f000 ffb0 	bl	8024e74 <_init>
 8023f14:	1ba4      	subs	r4, r4, r6
 8023f16:	10a4      	asrs	r4, r4, #2
 8023f18:	2500      	movs	r5, #0
 8023f1a:	42a5      	cmp	r5, r4
 8023f1c:	d105      	bne.n	8023f2a <__libc_init_array+0x2e>
 8023f1e:	bd70      	pop	{r4, r5, r6, pc}
 8023f20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8023f24:	4798      	blx	r3
 8023f26:	3501      	adds	r5, #1
 8023f28:	e7ee      	b.n	8023f08 <__libc_init_array+0xc>
 8023f2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8023f2e:	4798      	blx	r3
 8023f30:	3501      	adds	r5, #1
 8023f32:	e7f2      	b.n	8023f1a <__libc_init_array+0x1e>
 8023f34:	08043990 	.word	0x08043990
 8023f38:	08043990 	.word	0x08043990
 8023f3c:	08043990 	.word	0x08043990
 8023f40:	080439a4 	.word	0x080439a4

08023f44 <malloc>:
 8023f44:	4b02      	ldr	r3, [pc, #8]	; (8023f50 <malloc+0xc>)
 8023f46:	4601      	mov	r1, r0
 8023f48:	6818      	ldr	r0, [r3, #0]
 8023f4a:	f000 b86d 	b.w	8024028 <_malloc_r>
 8023f4e:	bf00      	nop
 8023f50:	20000098 	.word	0x20000098

08023f54 <free>:
 8023f54:	4b02      	ldr	r3, [pc, #8]	; (8023f60 <free+0xc>)
 8023f56:	4601      	mov	r1, r0
 8023f58:	6818      	ldr	r0, [r3, #0]
 8023f5a:	f000 b817 	b.w	8023f8c <_free_r>
 8023f5e:	bf00      	nop
 8023f60:	20000098 	.word	0x20000098

08023f64 <memcpy>:
 8023f64:	b510      	push	{r4, lr}
 8023f66:	1e43      	subs	r3, r0, #1
 8023f68:	440a      	add	r2, r1
 8023f6a:	4291      	cmp	r1, r2
 8023f6c:	d100      	bne.n	8023f70 <memcpy+0xc>
 8023f6e:	bd10      	pop	{r4, pc}
 8023f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023f78:	e7f7      	b.n	8023f6a <memcpy+0x6>

08023f7a <memset>:
 8023f7a:	4402      	add	r2, r0
 8023f7c:	4603      	mov	r3, r0
 8023f7e:	4293      	cmp	r3, r2
 8023f80:	d100      	bne.n	8023f84 <memset+0xa>
 8023f82:	4770      	bx	lr
 8023f84:	f803 1b01 	strb.w	r1, [r3], #1
 8023f88:	e7f9      	b.n	8023f7e <memset+0x4>
	...

08023f8c <_free_r>:
 8023f8c:	b538      	push	{r3, r4, r5, lr}
 8023f8e:	4605      	mov	r5, r0
 8023f90:	2900      	cmp	r1, #0
 8023f92:	d045      	beq.n	8024020 <_free_r+0x94>
 8023f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023f98:	1f0c      	subs	r4, r1, #4
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	bfb8      	it	lt
 8023f9e:	18e4      	addlt	r4, r4, r3
 8023fa0:	f000 feba 	bl	8024d18 <__malloc_lock>
 8023fa4:	4a1f      	ldr	r2, [pc, #124]	; (8024024 <_free_r+0x98>)
 8023fa6:	6813      	ldr	r3, [r2, #0]
 8023fa8:	4610      	mov	r0, r2
 8023faa:	b933      	cbnz	r3, 8023fba <_free_r+0x2e>
 8023fac:	6063      	str	r3, [r4, #4]
 8023fae:	6014      	str	r4, [r2, #0]
 8023fb0:	4628      	mov	r0, r5
 8023fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023fb6:	f000 beb0 	b.w	8024d1a <__malloc_unlock>
 8023fba:	42a3      	cmp	r3, r4
 8023fbc:	d90c      	bls.n	8023fd8 <_free_r+0x4c>
 8023fbe:	6821      	ldr	r1, [r4, #0]
 8023fc0:	1862      	adds	r2, r4, r1
 8023fc2:	4293      	cmp	r3, r2
 8023fc4:	bf04      	itt	eq
 8023fc6:	681a      	ldreq	r2, [r3, #0]
 8023fc8:	685b      	ldreq	r3, [r3, #4]
 8023fca:	6063      	str	r3, [r4, #4]
 8023fcc:	bf04      	itt	eq
 8023fce:	1852      	addeq	r2, r2, r1
 8023fd0:	6022      	streq	r2, [r4, #0]
 8023fd2:	6004      	str	r4, [r0, #0]
 8023fd4:	e7ec      	b.n	8023fb0 <_free_r+0x24>
 8023fd6:	4613      	mov	r3, r2
 8023fd8:	685a      	ldr	r2, [r3, #4]
 8023fda:	b10a      	cbz	r2, 8023fe0 <_free_r+0x54>
 8023fdc:	42a2      	cmp	r2, r4
 8023fde:	d9fa      	bls.n	8023fd6 <_free_r+0x4a>
 8023fe0:	6819      	ldr	r1, [r3, #0]
 8023fe2:	1858      	adds	r0, r3, r1
 8023fe4:	42a0      	cmp	r0, r4
 8023fe6:	d10b      	bne.n	8024000 <_free_r+0x74>
 8023fe8:	6820      	ldr	r0, [r4, #0]
 8023fea:	4401      	add	r1, r0
 8023fec:	1858      	adds	r0, r3, r1
 8023fee:	4282      	cmp	r2, r0
 8023ff0:	6019      	str	r1, [r3, #0]
 8023ff2:	d1dd      	bne.n	8023fb0 <_free_r+0x24>
 8023ff4:	6810      	ldr	r0, [r2, #0]
 8023ff6:	6852      	ldr	r2, [r2, #4]
 8023ff8:	605a      	str	r2, [r3, #4]
 8023ffa:	4401      	add	r1, r0
 8023ffc:	6019      	str	r1, [r3, #0]
 8023ffe:	e7d7      	b.n	8023fb0 <_free_r+0x24>
 8024000:	d902      	bls.n	8024008 <_free_r+0x7c>
 8024002:	230c      	movs	r3, #12
 8024004:	602b      	str	r3, [r5, #0]
 8024006:	e7d3      	b.n	8023fb0 <_free_r+0x24>
 8024008:	6820      	ldr	r0, [r4, #0]
 802400a:	1821      	adds	r1, r4, r0
 802400c:	428a      	cmp	r2, r1
 802400e:	bf04      	itt	eq
 8024010:	6811      	ldreq	r1, [r2, #0]
 8024012:	6852      	ldreq	r2, [r2, #4]
 8024014:	6062      	str	r2, [r4, #4]
 8024016:	bf04      	itt	eq
 8024018:	1809      	addeq	r1, r1, r0
 802401a:	6021      	streq	r1, [r4, #0]
 802401c:	605c      	str	r4, [r3, #4]
 802401e:	e7c7      	b.n	8023fb0 <_free_r+0x24>
 8024020:	bd38      	pop	{r3, r4, r5, pc}
 8024022:	bf00      	nop
 8024024:	2000bd84 	.word	0x2000bd84

08024028 <_malloc_r>:
 8024028:	b570      	push	{r4, r5, r6, lr}
 802402a:	1ccd      	adds	r5, r1, #3
 802402c:	f025 0503 	bic.w	r5, r5, #3
 8024030:	3508      	adds	r5, #8
 8024032:	2d0c      	cmp	r5, #12
 8024034:	bf38      	it	cc
 8024036:	250c      	movcc	r5, #12
 8024038:	2d00      	cmp	r5, #0
 802403a:	4606      	mov	r6, r0
 802403c:	db01      	blt.n	8024042 <_malloc_r+0x1a>
 802403e:	42a9      	cmp	r1, r5
 8024040:	d903      	bls.n	802404a <_malloc_r+0x22>
 8024042:	230c      	movs	r3, #12
 8024044:	6033      	str	r3, [r6, #0]
 8024046:	2000      	movs	r0, #0
 8024048:	bd70      	pop	{r4, r5, r6, pc}
 802404a:	f000 fe65 	bl	8024d18 <__malloc_lock>
 802404e:	4a21      	ldr	r2, [pc, #132]	; (80240d4 <_malloc_r+0xac>)
 8024050:	6814      	ldr	r4, [r2, #0]
 8024052:	4621      	mov	r1, r4
 8024054:	b991      	cbnz	r1, 802407c <_malloc_r+0x54>
 8024056:	4c20      	ldr	r4, [pc, #128]	; (80240d8 <_malloc_r+0xb0>)
 8024058:	6823      	ldr	r3, [r4, #0]
 802405a:	b91b      	cbnz	r3, 8024064 <_malloc_r+0x3c>
 802405c:	4630      	mov	r0, r6
 802405e:	f000 fb05 	bl	802466c <_sbrk_r>
 8024062:	6020      	str	r0, [r4, #0]
 8024064:	4629      	mov	r1, r5
 8024066:	4630      	mov	r0, r6
 8024068:	f000 fb00 	bl	802466c <_sbrk_r>
 802406c:	1c43      	adds	r3, r0, #1
 802406e:	d124      	bne.n	80240ba <_malloc_r+0x92>
 8024070:	230c      	movs	r3, #12
 8024072:	6033      	str	r3, [r6, #0]
 8024074:	4630      	mov	r0, r6
 8024076:	f000 fe50 	bl	8024d1a <__malloc_unlock>
 802407a:	e7e4      	b.n	8024046 <_malloc_r+0x1e>
 802407c:	680b      	ldr	r3, [r1, #0]
 802407e:	1b5b      	subs	r3, r3, r5
 8024080:	d418      	bmi.n	80240b4 <_malloc_r+0x8c>
 8024082:	2b0b      	cmp	r3, #11
 8024084:	d90f      	bls.n	80240a6 <_malloc_r+0x7e>
 8024086:	600b      	str	r3, [r1, #0]
 8024088:	50cd      	str	r5, [r1, r3]
 802408a:	18cc      	adds	r4, r1, r3
 802408c:	4630      	mov	r0, r6
 802408e:	f000 fe44 	bl	8024d1a <__malloc_unlock>
 8024092:	f104 000b 	add.w	r0, r4, #11
 8024096:	1d23      	adds	r3, r4, #4
 8024098:	f020 0007 	bic.w	r0, r0, #7
 802409c:	1ac3      	subs	r3, r0, r3
 802409e:	d0d3      	beq.n	8024048 <_malloc_r+0x20>
 80240a0:	425a      	negs	r2, r3
 80240a2:	50e2      	str	r2, [r4, r3]
 80240a4:	e7d0      	b.n	8024048 <_malloc_r+0x20>
 80240a6:	428c      	cmp	r4, r1
 80240a8:	684b      	ldr	r3, [r1, #4]
 80240aa:	bf16      	itet	ne
 80240ac:	6063      	strne	r3, [r4, #4]
 80240ae:	6013      	streq	r3, [r2, #0]
 80240b0:	460c      	movne	r4, r1
 80240b2:	e7eb      	b.n	802408c <_malloc_r+0x64>
 80240b4:	460c      	mov	r4, r1
 80240b6:	6849      	ldr	r1, [r1, #4]
 80240b8:	e7cc      	b.n	8024054 <_malloc_r+0x2c>
 80240ba:	1cc4      	adds	r4, r0, #3
 80240bc:	f024 0403 	bic.w	r4, r4, #3
 80240c0:	42a0      	cmp	r0, r4
 80240c2:	d005      	beq.n	80240d0 <_malloc_r+0xa8>
 80240c4:	1a21      	subs	r1, r4, r0
 80240c6:	4630      	mov	r0, r6
 80240c8:	f000 fad0 	bl	802466c <_sbrk_r>
 80240cc:	3001      	adds	r0, #1
 80240ce:	d0cf      	beq.n	8024070 <_malloc_r+0x48>
 80240d0:	6025      	str	r5, [r4, #0]
 80240d2:	e7db      	b.n	802408c <_malloc_r+0x64>
 80240d4:	2000bd84 	.word	0x2000bd84
 80240d8:	2000bd88 	.word	0x2000bd88

080240dc <__sfputc_r>:
 80240dc:	6893      	ldr	r3, [r2, #8]
 80240de:	3b01      	subs	r3, #1
 80240e0:	2b00      	cmp	r3, #0
 80240e2:	b410      	push	{r4}
 80240e4:	6093      	str	r3, [r2, #8]
 80240e6:	da08      	bge.n	80240fa <__sfputc_r+0x1e>
 80240e8:	6994      	ldr	r4, [r2, #24]
 80240ea:	42a3      	cmp	r3, r4
 80240ec:	db01      	blt.n	80240f2 <__sfputc_r+0x16>
 80240ee:	290a      	cmp	r1, #10
 80240f0:	d103      	bne.n	80240fa <__sfputc_r+0x1e>
 80240f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80240f6:	f000 bb0d 	b.w	8024714 <__swbuf_r>
 80240fa:	6813      	ldr	r3, [r2, #0]
 80240fc:	1c58      	adds	r0, r3, #1
 80240fe:	6010      	str	r0, [r2, #0]
 8024100:	7019      	strb	r1, [r3, #0]
 8024102:	4608      	mov	r0, r1
 8024104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024108:	4770      	bx	lr

0802410a <__sfputs_r>:
 802410a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802410c:	4606      	mov	r6, r0
 802410e:	460f      	mov	r7, r1
 8024110:	4614      	mov	r4, r2
 8024112:	18d5      	adds	r5, r2, r3
 8024114:	42ac      	cmp	r4, r5
 8024116:	d101      	bne.n	802411c <__sfputs_r+0x12>
 8024118:	2000      	movs	r0, #0
 802411a:	e007      	b.n	802412c <__sfputs_r+0x22>
 802411c:	463a      	mov	r2, r7
 802411e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024122:	4630      	mov	r0, r6
 8024124:	f7ff ffda 	bl	80240dc <__sfputc_r>
 8024128:	1c43      	adds	r3, r0, #1
 802412a:	d1f3      	bne.n	8024114 <__sfputs_r+0xa>
 802412c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024130 <_vfiprintf_r>:
 8024130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024134:	460c      	mov	r4, r1
 8024136:	b09d      	sub	sp, #116	; 0x74
 8024138:	4617      	mov	r7, r2
 802413a:	461d      	mov	r5, r3
 802413c:	4606      	mov	r6, r0
 802413e:	b118      	cbz	r0, 8024148 <_vfiprintf_r+0x18>
 8024140:	6983      	ldr	r3, [r0, #24]
 8024142:	b90b      	cbnz	r3, 8024148 <_vfiprintf_r+0x18>
 8024144:	f000 fcfa 	bl	8024b3c <__sinit>
 8024148:	4b7c      	ldr	r3, [pc, #496]	; (802433c <_vfiprintf_r+0x20c>)
 802414a:	429c      	cmp	r4, r3
 802414c:	d158      	bne.n	8024200 <_vfiprintf_r+0xd0>
 802414e:	6874      	ldr	r4, [r6, #4]
 8024150:	89a3      	ldrh	r3, [r4, #12]
 8024152:	0718      	lsls	r0, r3, #28
 8024154:	d55e      	bpl.n	8024214 <_vfiprintf_r+0xe4>
 8024156:	6923      	ldr	r3, [r4, #16]
 8024158:	2b00      	cmp	r3, #0
 802415a:	d05b      	beq.n	8024214 <_vfiprintf_r+0xe4>
 802415c:	2300      	movs	r3, #0
 802415e:	9309      	str	r3, [sp, #36]	; 0x24
 8024160:	2320      	movs	r3, #32
 8024162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024166:	2330      	movs	r3, #48	; 0x30
 8024168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802416c:	9503      	str	r5, [sp, #12]
 802416e:	f04f 0b01 	mov.w	fp, #1
 8024172:	46b8      	mov	r8, r7
 8024174:	4645      	mov	r5, r8
 8024176:	f815 3b01 	ldrb.w	r3, [r5], #1
 802417a:	b10b      	cbz	r3, 8024180 <_vfiprintf_r+0x50>
 802417c:	2b25      	cmp	r3, #37	; 0x25
 802417e:	d154      	bne.n	802422a <_vfiprintf_r+0xfa>
 8024180:	ebb8 0a07 	subs.w	sl, r8, r7
 8024184:	d00b      	beq.n	802419e <_vfiprintf_r+0x6e>
 8024186:	4653      	mov	r3, sl
 8024188:	463a      	mov	r2, r7
 802418a:	4621      	mov	r1, r4
 802418c:	4630      	mov	r0, r6
 802418e:	f7ff ffbc 	bl	802410a <__sfputs_r>
 8024192:	3001      	adds	r0, #1
 8024194:	f000 80c2 	beq.w	802431c <_vfiprintf_r+0x1ec>
 8024198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802419a:	4453      	add	r3, sl
 802419c:	9309      	str	r3, [sp, #36]	; 0x24
 802419e:	f898 3000 	ldrb.w	r3, [r8]
 80241a2:	2b00      	cmp	r3, #0
 80241a4:	f000 80ba 	beq.w	802431c <_vfiprintf_r+0x1ec>
 80241a8:	2300      	movs	r3, #0
 80241aa:	f04f 32ff 	mov.w	r2, #4294967295
 80241ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80241b2:	9304      	str	r3, [sp, #16]
 80241b4:	9307      	str	r3, [sp, #28]
 80241b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80241ba:	931a      	str	r3, [sp, #104]	; 0x68
 80241bc:	46a8      	mov	r8, r5
 80241be:	2205      	movs	r2, #5
 80241c0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80241c4:	485e      	ldr	r0, [pc, #376]	; (8024340 <_vfiprintf_r+0x210>)
 80241c6:	f7dc f823 	bl	8000210 <memchr>
 80241ca:	9b04      	ldr	r3, [sp, #16]
 80241cc:	bb78      	cbnz	r0, 802422e <_vfiprintf_r+0xfe>
 80241ce:	06d9      	lsls	r1, r3, #27
 80241d0:	bf44      	itt	mi
 80241d2:	2220      	movmi	r2, #32
 80241d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80241d8:	071a      	lsls	r2, r3, #28
 80241da:	bf44      	itt	mi
 80241dc:	222b      	movmi	r2, #43	; 0x2b
 80241de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80241e2:	782a      	ldrb	r2, [r5, #0]
 80241e4:	2a2a      	cmp	r2, #42	; 0x2a
 80241e6:	d02a      	beq.n	802423e <_vfiprintf_r+0x10e>
 80241e8:	9a07      	ldr	r2, [sp, #28]
 80241ea:	46a8      	mov	r8, r5
 80241ec:	2000      	movs	r0, #0
 80241ee:	250a      	movs	r5, #10
 80241f0:	4641      	mov	r1, r8
 80241f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80241f6:	3b30      	subs	r3, #48	; 0x30
 80241f8:	2b09      	cmp	r3, #9
 80241fa:	d969      	bls.n	80242d0 <_vfiprintf_r+0x1a0>
 80241fc:	b360      	cbz	r0, 8024258 <_vfiprintf_r+0x128>
 80241fe:	e024      	b.n	802424a <_vfiprintf_r+0x11a>
 8024200:	4b50      	ldr	r3, [pc, #320]	; (8024344 <_vfiprintf_r+0x214>)
 8024202:	429c      	cmp	r4, r3
 8024204:	d101      	bne.n	802420a <_vfiprintf_r+0xda>
 8024206:	68b4      	ldr	r4, [r6, #8]
 8024208:	e7a2      	b.n	8024150 <_vfiprintf_r+0x20>
 802420a:	4b4f      	ldr	r3, [pc, #316]	; (8024348 <_vfiprintf_r+0x218>)
 802420c:	429c      	cmp	r4, r3
 802420e:	bf08      	it	eq
 8024210:	68f4      	ldreq	r4, [r6, #12]
 8024212:	e79d      	b.n	8024150 <_vfiprintf_r+0x20>
 8024214:	4621      	mov	r1, r4
 8024216:	4630      	mov	r0, r6
 8024218:	f000 face 	bl	80247b8 <__swsetup_r>
 802421c:	2800      	cmp	r0, #0
 802421e:	d09d      	beq.n	802415c <_vfiprintf_r+0x2c>
 8024220:	f04f 30ff 	mov.w	r0, #4294967295
 8024224:	b01d      	add	sp, #116	; 0x74
 8024226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802422a:	46a8      	mov	r8, r5
 802422c:	e7a2      	b.n	8024174 <_vfiprintf_r+0x44>
 802422e:	4a44      	ldr	r2, [pc, #272]	; (8024340 <_vfiprintf_r+0x210>)
 8024230:	1a80      	subs	r0, r0, r2
 8024232:	fa0b f000 	lsl.w	r0, fp, r0
 8024236:	4318      	orrs	r0, r3
 8024238:	9004      	str	r0, [sp, #16]
 802423a:	4645      	mov	r5, r8
 802423c:	e7be      	b.n	80241bc <_vfiprintf_r+0x8c>
 802423e:	9a03      	ldr	r2, [sp, #12]
 8024240:	1d11      	adds	r1, r2, #4
 8024242:	6812      	ldr	r2, [r2, #0]
 8024244:	9103      	str	r1, [sp, #12]
 8024246:	2a00      	cmp	r2, #0
 8024248:	db01      	blt.n	802424e <_vfiprintf_r+0x11e>
 802424a:	9207      	str	r2, [sp, #28]
 802424c:	e004      	b.n	8024258 <_vfiprintf_r+0x128>
 802424e:	4252      	negs	r2, r2
 8024250:	f043 0302 	orr.w	r3, r3, #2
 8024254:	9207      	str	r2, [sp, #28]
 8024256:	9304      	str	r3, [sp, #16]
 8024258:	f898 3000 	ldrb.w	r3, [r8]
 802425c:	2b2e      	cmp	r3, #46	; 0x2e
 802425e:	d10e      	bne.n	802427e <_vfiprintf_r+0x14e>
 8024260:	f898 3001 	ldrb.w	r3, [r8, #1]
 8024264:	2b2a      	cmp	r3, #42	; 0x2a
 8024266:	d138      	bne.n	80242da <_vfiprintf_r+0x1aa>
 8024268:	9b03      	ldr	r3, [sp, #12]
 802426a:	1d1a      	adds	r2, r3, #4
 802426c:	681b      	ldr	r3, [r3, #0]
 802426e:	9203      	str	r2, [sp, #12]
 8024270:	2b00      	cmp	r3, #0
 8024272:	bfb8      	it	lt
 8024274:	f04f 33ff 	movlt.w	r3, #4294967295
 8024278:	f108 0802 	add.w	r8, r8, #2
 802427c:	9305      	str	r3, [sp, #20]
 802427e:	4d33      	ldr	r5, [pc, #204]	; (802434c <_vfiprintf_r+0x21c>)
 8024280:	f898 1000 	ldrb.w	r1, [r8]
 8024284:	2203      	movs	r2, #3
 8024286:	4628      	mov	r0, r5
 8024288:	f7db ffc2 	bl	8000210 <memchr>
 802428c:	b140      	cbz	r0, 80242a0 <_vfiprintf_r+0x170>
 802428e:	2340      	movs	r3, #64	; 0x40
 8024290:	1b40      	subs	r0, r0, r5
 8024292:	fa03 f000 	lsl.w	r0, r3, r0
 8024296:	9b04      	ldr	r3, [sp, #16]
 8024298:	4303      	orrs	r3, r0
 802429a:	f108 0801 	add.w	r8, r8, #1
 802429e:	9304      	str	r3, [sp, #16]
 80242a0:	f898 1000 	ldrb.w	r1, [r8]
 80242a4:	482a      	ldr	r0, [pc, #168]	; (8024350 <_vfiprintf_r+0x220>)
 80242a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80242aa:	2206      	movs	r2, #6
 80242ac:	f108 0701 	add.w	r7, r8, #1
 80242b0:	f7db ffae 	bl	8000210 <memchr>
 80242b4:	2800      	cmp	r0, #0
 80242b6:	d037      	beq.n	8024328 <_vfiprintf_r+0x1f8>
 80242b8:	4b26      	ldr	r3, [pc, #152]	; (8024354 <_vfiprintf_r+0x224>)
 80242ba:	bb1b      	cbnz	r3, 8024304 <_vfiprintf_r+0x1d4>
 80242bc:	9b03      	ldr	r3, [sp, #12]
 80242be:	3307      	adds	r3, #7
 80242c0:	f023 0307 	bic.w	r3, r3, #7
 80242c4:	3308      	adds	r3, #8
 80242c6:	9303      	str	r3, [sp, #12]
 80242c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242ca:	444b      	add	r3, r9
 80242cc:	9309      	str	r3, [sp, #36]	; 0x24
 80242ce:	e750      	b.n	8024172 <_vfiprintf_r+0x42>
 80242d0:	fb05 3202 	mla	r2, r5, r2, r3
 80242d4:	2001      	movs	r0, #1
 80242d6:	4688      	mov	r8, r1
 80242d8:	e78a      	b.n	80241f0 <_vfiprintf_r+0xc0>
 80242da:	2300      	movs	r3, #0
 80242dc:	f108 0801 	add.w	r8, r8, #1
 80242e0:	9305      	str	r3, [sp, #20]
 80242e2:	4619      	mov	r1, r3
 80242e4:	250a      	movs	r5, #10
 80242e6:	4640      	mov	r0, r8
 80242e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80242ec:	3a30      	subs	r2, #48	; 0x30
 80242ee:	2a09      	cmp	r2, #9
 80242f0:	d903      	bls.n	80242fa <_vfiprintf_r+0x1ca>
 80242f2:	2b00      	cmp	r3, #0
 80242f4:	d0c3      	beq.n	802427e <_vfiprintf_r+0x14e>
 80242f6:	9105      	str	r1, [sp, #20]
 80242f8:	e7c1      	b.n	802427e <_vfiprintf_r+0x14e>
 80242fa:	fb05 2101 	mla	r1, r5, r1, r2
 80242fe:	2301      	movs	r3, #1
 8024300:	4680      	mov	r8, r0
 8024302:	e7f0      	b.n	80242e6 <_vfiprintf_r+0x1b6>
 8024304:	ab03      	add	r3, sp, #12
 8024306:	9300      	str	r3, [sp, #0]
 8024308:	4622      	mov	r2, r4
 802430a:	4b13      	ldr	r3, [pc, #76]	; (8024358 <_vfiprintf_r+0x228>)
 802430c:	a904      	add	r1, sp, #16
 802430e:	4630      	mov	r0, r6
 8024310:	f3af 8000 	nop.w
 8024314:	f1b0 3fff 	cmp.w	r0, #4294967295
 8024318:	4681      	mov	r9, r0
 802431a:	d1d5      	bne.n	80242c8 <_vfiprintf_r+0x198>
 802431c:	89a3      	ldrh	r3, [r4, #12]
 802431e:	065b      	lsls	r3, r3, #25
 8024320:	f53f af7e 	bmi.w	8024220 <_vfiprintf_r+0xf0>
 8024324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024326:	e77d      	b.n	8024224 <_vfiprintf_r+0xf4>
 8024328:	ab03      	add	r3, sp, #12
 802432a:	9300      	str	r3, [sp, #0]
 802432c:	4622      	mov	r2, r4
 802432e:	4b0a      	ldr	r3, [pc, #40]	; (8024358 <_vfiprintf_r+0x228>)
 8024330:	a904      	add	r1, sp, #16
 8024332:	4630      	mov	r0, r6
 8024334:	f000 f888 	bl	8024448 <_printf_i>
 8024338:	e7ec      	b.n	8024314 <_vfiprintf_r+0x1e4>
 802433a:	bf00      	nop
 802433c:	080290ac 	.word	0x080290ac
 8024340:	08029054 	.word	0x08029054
 8024344:	080290cc 	.word	0x080290cc
 8024348:	0802908c 	.word	0x0802908c
 802434c:	0802905a 	.word	0x0802905a
 8024350:	0802905e 	.word	0x0802905e
 8024354:	00000000 	.word	0x00000000
 8024358:	0802410b 	.word	0x0802410b

0802435c <_printf_common>:
 802435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024360:	4691      	mov	r9, r2
 8024362:	461f      	mov	r7, r3
 8024364:	688a      	ldr	r2, [r1, #8]
 8024366:	690b      	ldr	r3, [r1, #16]
 8024368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802436c:	4293      	cmp	r3, r2
 802436e:	bfb8      	it	lt
 8024370:	4613      	movlt	r3, r2
 8024372:	f8c9 3000 	str.w	r3, [r9]
 8024376:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802437a:	4606      	mov	r6, r0
 802437c:	460c      	mov	r4, r1
 802437e:	b112      	cbz	r2, 8024386 <_printf_common+0x2a>
 8024380:	3301      	adds	r3, #1
 8024382:	f8c9 3000 	str.w	r3, [r9]
 8024386:	6823      	ldr	r3, [r4, #0]
 8024388:	0699      	lsls	r1, r3, #26
 802438a:	bf42      	ittt	mi
 802438c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8024390:	3302      	addmi	r3, #2
 8024392:	f8c9 3000 	strmi.w	r3, [r9]
 8024396:	6825      	ldr	r5, [r4, #0]
 8024398:	f015 0506 	ands.w	r5, r5, #6
 802439c:	d107      	bne.n	80243ae <_printf_common+0x52>
 802439e:	f104 0a19 	add.w	sl, r4, #25
 80243a2:	68e3      	ldr	r3, [r4, #12]
 80243a4:	f8d9 2000 	ldr.w	r2, [r9]
 80243a8:	1a9b      	subs	r3, r3, r2
 80243aa:	42ab      	cmp	r3, r5
 80243ac:	dc28      	bgt.n	8024400 <_printf_common+0xa4>
 80243ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80243b2:	6822      	ldr	r2, [r4, #0]
 80243b4:	3300      	adds	r3, #0
 80243b6:	bf18      	it	ne
 80243b8:	2301      	movne	r3, #1
 80243ba:	0692      	lsls	r2, r2, #26
 80243bc:	d42d      	bmi.n	802441a <_printf_common+0xbe>
 80243be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80243c2:	4639      	mov	r1, r7
 80243c4:	4630      	mov	r0, r6
 80243c6:	47c0      	blx	r8
 80243c8:	3001      	adds	r0, #1
 80243ca:	d020      	beq.n	802440e <_printf_common+0xb2>
 80243cc:	6823      	ldr	r3, [r4, #0]
 80243ce:	68e5      	ldr	r5, [r4, #12]
 80243d0:	f8d9 2000 	ldr.w	r2, [r9]
 80243d4:	f003 0306 	and.w	r3, r3, #6
 80243d8:	2b04      	cmp	r3, #4
 80243da:	bf08      	it	eq
 80243dc:	1aad      	subeq	r5, r5, r2
 80243de:	68a3      	ldr	r3, [r4, #8]
 80243e0:	6922      	ldr	r2, [r4, #16]
 80243e2:	bf0c      	ite	eq
 80243e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80243e8:	2500      	movne	r5, #0
 80243ea:	4293      	cmp	r3, r2
 80243ec:	bfc4      	itt	gt
 80243ee:	1a9b      	subgt	r3, r3, r2
 80243f0:	18ed      	addgt	r5, r5, r3
 80243f2:	f04f 0900 	mov.w	r9, #0
 80243f6:	341a      	adds	r4, #26
 80243f8:	454d      	cmp	r5, r9
 80243fa:	d11a      	bne.n	8024432 <_printf_common+0xd6>
 80243fc:	2000      	movs	r0, #0
 80243fe:	e008      	b.n	8024412 <_printf_common+0xb6>
 8024400:	2301      	movs	r3, #1
 8024402:	4652      	mov	r2, sl
 8024404:	4639      	mov	r1, r7
 8024406:	4630      	mov	r0, r6
 8024408:	47c0      	blx	r8
 802440a:	3001      	adds	r0, #1
 802440c:	d103      	bne.n	8024416 <_printf_common+0xba>
 802440e:	f04f 30ff 	mov.w	r0, #4294967295
 8024412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024416:	3501      	adds	r5, #1
 8024418:	e7c3      	b.n	80243a2 <_printf_common+0x46>
 802441a:	18e1      	adds	r1, r4, r3
 802441c:	1c5a      	adds	r2, r3, #1
 802441e:	2030      	movs	r0, #48	; 0x30
 8024420:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024424:	4422      	add	r2, r4
 8024426:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802442a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802442e:	3302      	adds	r3, #2
 8024430:	e7c5      	b.n	80243be <_printf_common+0x62>
 8024432:	2301      	movs	r3, #1
 8024434:	4622      	mov	r2, r4
 8024436:	4639      	mov	r1, r7
 8024438:	4630      	mov	r0, r6
 802443a:	47c0      	blx	r8
 802443c:	3001      	adds	r0, #1
 802443e:	d0e6      	beq.n	802440e <_printf_common+0xb2>
 8024440:	f109 0901 	add.w	r9, r9, #1
 8024444:	e7d8      	b.n	80243f8 <_printf_common+0x9c>
	...

08024448 <_printf_i>:
 8024448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802444c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8024450:	460c      	mov	r4, r1
 8024452:	7e09      	ldrb	r1, [r1, #24]
 8024454:	b085      	sub	sp, #20
 8024456:	296e      	cmp	r1, #110	; 0x6e
 8024458:	4617      	mov	r7, r2
 802445a:	4606      	mov	r6, r0
 802445c:	4698      	mov	r8, r3
 802445e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024460:	f000 80b3 	beq.w	80245ca <_printf_i+0x182>
 8024464:	d822      	bhi.n	80244ac <_printf_i+0x64>
 8024466:	2963      	cmp	r1, #99	; 0x63
 8024468:	d036      	beq.n	80244d8 <_printf_i+0x90>
 802446a:	d80a      	bhi.n	8024482 <_printf_i+0x3a>
 802446c:	2900      	cmp	r1, #0
 802446e:	f000 80b9 	beq.w	80245e4 <_printf_i+0x19c>
 8024472:	2958      	cmp	r1, #88	; 0x58
 8024474:	f000 8083 	beq.w	802457e <_printf_i+0x136>
 8024478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802447c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8024480:	e032      	b.n	80244e8 <_printf_i+0xa0>
 8024482:	2964      	cmp	r1, #100	; 0x64
 8024484:	d001      	beq.n	802448a <_printf_i+0x42>
 8024486:	2969      	cmp	r1, #105	; 0x69
 8024488:	d1f6      	bne.n	8024478 <_printf_i+0x30>
 802448a:	6820      	ldr	r0, [r4, #0]
 802448c:	6813      	ldr	r3, [r2, #0]
 802448e:	0605      	lsls	r5, r0, #24
 8024490:	f103 0104 	add.w	r1, r3, #4
 8024494:	d52a      	bpl.n	80244ec <_printf_i+0xa4>
 8024496:	681b      	ldr	r3, [r3, #0]
 8024498:	6011      	str	r1, [r2, #0]
 802449a:	2b00      	cmp	r3, #0
 802449c:	da03      	bge.n	80244a6 <_printf_i+0x5e>
 802449e:	222d      	movs	r2, #45	; 0x2d
 80244a0:	425b      	negs	r3, r3
 80244a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80244a6:	486f      	ldr	r0, [pc, #444]	; (8024664 <_printf_i+0x21c>)
 80244a8:	220a      	movs	r2, #10
 80244aa:	e039      	b.n	8024520 <_printf_i+0xd8>
 80244ac:	2973      	cmp	r1, #115	; 0x73
 80244ae:	f000 809d 	beq.w	80245ec <_printf_i+0x1a4>
 80244b2:	d808      	bhi.n	80244c6 <_printf_i+0x7e>
 80244b4:	296f      	cmp	r1, #111	; 0x6f
 80244b6:	d020      	beq.n	80244fa <_printf_i+0xb2>
 80244b8:	2970      	cmp	r1, #112	; 0x70
 80244ba:	d1dd      	bne.n	8024478 <_printf_i+0x30>
 80244bc:	6823      	ldr	r3, [r4, #0]
 80244be:	f043 0320 	orr.w	r3, r3, #32
 80244c2:	6023      	str	r3, [r4, #0]
 80244c4:	e003      	b.n	80244ce <_printf_i+0x86>
 80244c6:	2975      	cmp	r1, #117	; 0x75
 80244c8:	d017      	beq.n	80244fa <_printf_i+0xb2>
 80244ca:	2978      	cmp	r1, #120	; 0x78
 80244cc:	d1d4      	bne.n	8024478 <_printf_i+0x30>
 80244ce:	2378      	movs	r3, #120	; 0x78
 80244d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80244d4:	4864      	ldr	r0, [pc, #400]	; (8024668 <_printf_i+0x220>)
 80244d6:	e055      	b.n	8024584 <_printf_i+0x13c>
 80244d8:	6813      	ldr	r3, [r2, #0]
 80244da:	1d19      	adds	r1, r3, #4
 80244dc:	681b      	ldr	r3, [r3, #0]
 80244de:	6011      	str	r1, [r2, #0]
 80244e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80244e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80244e8:	2301      	movs	r3, #1
 80244ea:	e08c      	b.n	8024606 <_printf_i+0x1be>
 80244ec:	681b      	ldr	r3, [r3, #0]
 80244ee:	6011      	str	r1, [r2, #0]
 80244f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80244f4:	bf18      	it	ne
 80244f6:	b21b      	sxthne	r3, r3
 80244f8:	e7cf      	b.n	802449a <_printf_i+0x52>
 80244fa:	6813      	ldr	r3, [r2, #0]
 80244fc:	6825      	ldr	r5, [r4, #0]
 80244fe:	1d18      	adds	r0, r3, #4
 8024500:	6010      	str	r0, [r2, #0]
 8024502:	0628      	lsls	r0, r5, #24
 8024504:	d501      	bpl.n	802450a <_printf_i+0xc2>
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	e002      	b.n	8024510 <_printf_i+0xc8>
 802450a:	0668      	lsls	r0, r5, #25
 802450c:	d5fb      	bpl.n	8024506 <_printf_i+0xbe>
 802450e:	881b      	ldrh	r3, [r3, #0]
 8024510:	4854      	ldr	r0, [pc, #336]	; (8024664 <_printf_i+0x21c>)
 8024512:	296f      	cmp	r1, #111	; 0x6f
 8024514:	bf14      	ite	ne
 8024516:	220a      	movne	r2, #10
 8024518:	2208      	moveq	r2, #8
 802451a:	2100      	movs	r1, #0
 802451c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024520:	6865      	ldr	r5, [r4, #4]
 8024522:	60a5      	str	r5, [r4, #8]
 8024524:	2d00      	cmp	r5, #0
 8024526:	f2c0 8095 	blt.w	8024654 <_printf_i+0x20c>
 802452a:	6821      	ldr	r1, [r4, #0]
 802452c:	f021 0104 	bic.w	r1, r1, #4
 8024530:	6021      	str	r1, [r4, #0]
 8024532:	2b00      	cmp	r3, #0
 8024534:	d13d      	bne.n	80245b2 <_printf_i+0x16a>
 8024536:	2d00      	cmp	r5, #0
 8024538:	f040 808e 	bne.w	8024658 <_printf_i+0x210>
 802453c:	4665      	mov	r5, ip
 802453e:	2a08      	cmp	r2, #8
 8024540:	d10b      	bne.n	802455a <_printf_i+0x112>
 8024542:	6823      	ldr	r3, [r4, #0]
 8024544:	07db      	lsls	r3, r3, #31
 8024546:	d508      	bpl.n	802455a <_printf_i+0x112>
 8024548:	6923      	ldr	r3, [r4, #16]
 802454a:	6862      	ldr	r2, [r4, #4]
 802454c:	429a      	cmp	r2, r3
 802454e:	bfde      	ittt	le
 8024550:	2330      	movle	r3, #48	; 0x30
 8024552:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024556:	f105 35ff 	addle.w	r5, r5, #4294967295
 802455a:	ebac 0305 	sub.w	r3, ip, r5
 802455e:	6123      	str	r3, [r4, #16]
 8024560:	f8cd 8000 	str.w	r8, [sp]
 8024564:	463b      	mov	r3, r7
 8024566:	aa03      	add	r2, sp, #12
 8024568:	4621      	mov	r1, r4
 802456a:	4630      	mov	r0, r6
 802456c:	f7ff fef6 	bl	802435c <_printf_common>
 8024570:	3001      	adds	r0, #1
 8024572:	d14d      	bne.n	8024610 <_printf_i+0x1c8>
 8024574:	f04f 30ff 	mov.w	r0, #4294967295
 8024578:	b005      	add	sp, #20
 802457a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802457e:	4839      	ldr	r0, [pc, #228]	; (8024664 <_printf_i+0x21c>)
 8024580:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8024584:	6813      	ldr	r3, [r2, #0]
 8024586:	6821      	ldr	r1, [r4, #0]
 8024588:	1d1d      	adds	r5, r3, #4
 802458a:	681b      	ldr	r3, [r3, #0]
 802458c:	6015      	str	r5, [r2, #0]
 802458e:	060a      	lsls	r2, r1, #24
 8024590:	d50b      	bpl.n	80245aa <_printf_i+0x162>
 8024592:	07ca      	lsls	r2, r1, #31
 8024594:	bf44      	itt	mi
 8024596:	f041 0120 	orrmi.w	r1, r1, #32
 802459a:	6021      	strmi	r1, [r4, #0]
 802459c:	b91b      	cbnz	r3, 80245a6 <_printf_i+0x15e>
 802459e:	6822      	ldr	r2, [r4, #0]
 80245a0:	f022 0220 	bic.w	r2, r2, #32
 80245a4:	6022      	str	r2, [r4, #0]
 80245a6:	2210      	movs	r2, #16
 80245a8:	e7b7      	b.n	802451a <_printf_i+0xd2>
 80245aa:	064d      	lsls	r5, r1, #25
 80245ac:	bf48      	it	mi
 80245ae:	b29b      	uxthmi	r3, r3
 80245b0:	e7ef      	b.n	8024592 <_printf_i+0x14a>
 80245b2:	4665      	mov	r5, ip
 80245b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80245b8:	fb02 3311 	mls	r3, r2, r1, r3
 80245bc:	5cc3      	ldrb	r3, [r0, r3]
 80245be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80245c2:	460b      	mov	r3, r1
 80245c4:	2900      	cmp	r1, #0
 80245c6:	d1f5      	bne.n	80245b4 <_printf_i+0x16c>
 80245c8:	e7b9      	b.n	802453e <_printf_i+0xf6>
 80245ca:	6813      	ldr	r3, [r2, #0]
 80245cc:	6825      	ldr	r5, [r4, #0]
 80245ce:	6961      	ldr	r1, [r4, #20]
 80245d0:	1d18      	adds	r0, r3, #4
 80245d2:	6010      	str	r0, [r2, #0]
 80245d4:	0628      	lsls	r0, r5, #24
 80245d6:	681b      	ldr	r3, [r3, #0]
 80245d8:	d501      	bpl.n	80245de <_printf_i+0x196>
 80245da:	6019      	str	r1, [r3, #0]
 80245dc:	e002      	b.n	80245e4 <_printf_i+0x19c>
 80245de:	066a      	lsls	r2, r5, #25
 80245e0:	d5fb      	bpl.n	80245da <_printf_i+0x192>
 80245e2:	8019      	strh	r1, [r3, #0]
 80245e4:	2300      	movs	r3, #0
 80245e6:	6123      	str	r3, [r4, #16]
 80245e8:	4665      	mov	r5, ip
 80245ea:	e7b9      	b.n	8024560 <_printf_i+0x118>
 80245ec:	6813      	ldr	r3, [r2, #0]
 80245ee:	1d19      	adds	r1, r3, #4
 80245f0:	6011      	str	r1, [r2, #0]
 80245f2:	681d      	ldr	r5, [r3, #0]
 80245f4:	6862      	ldr	r2, [r4, #4]
 80245f6:	2100      	movs	r1, #0
 80245f8:	4628      	mov	r0, r5
 80245fa:	f7db fe09 	bl	8000210 <memchr>
 80245fe:	b108      	cbz	r0, 8024604 <_printf_i+0x1bc>
 8024600:	1b40      	subs	r0, r0, r5
 8024602:	6060      	str	r0, [r4, #4]
 8024604:	6863      	ldr	r3, [r4, #4]
 8024606:	6123      	str	r3, [r4, #16]
 8024608:	2300      	movs	r3, #0
 802460a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802460e:	e7a7      	b.n	8024560 <_printf_i+0x118>
 8024610:	6923      	ldr	r3, [r4, #16]
 8024612:	462a      	mov	r2, r5
 8024614:	4639      	mov	r1, r7
 8024616:	4630      	mov	r0, r6
 8024618:	47c0      	blx	r8
 802461a:	3001      	adds	r0, #1
 802461c:	d0aa      	beq.n	8024574 <_printf_i+0x12c>
 802461e:	6823      	ldr	r3, [r4, #0]
 8024620:	079b      	lsls	r3, r3, #30
 8024622:	d413      	bmi.n	802464c <_printf_i+0x204>
 8024624:	68e0      	ldr	r0, [r4, #12]
 8024626:	9b03      	ldr	r3, [sp, #12]
 8024628:	4298      	cmp	r0, r3
 802462a:	bfb8      	it	lt
 802462c:	4618      	movlt	r0, r3
 802462e:	e7a3      	b.n	8024578 <_printf_i+0x130>
 8024630:	2301      	movs	r3, #1
 8024632:	464a      	mov	r2, r9
 8024634:	4639      	mov	r1, r7
 8024636:	4630      	mov	r0, r6
 8024638:	47c0      	blx	r8
 802463a:	3001      	adds	r0, #1
 802463c:	d09a      	beq.n	8024574 <_printf_i+0x12c>
 802463e:	3501      	adds	r5, #1
 8024640:	68e3      	ldr	r3, [r4, #12]
 8024642:	9a03      	ldr	r2, [sp, #12]
 8024644:	1a9b      	subs	r3, r3, r2
 8024646:	42ab      	cmp	r3, r5
 8024648:	dcf2      	bgt.n	8024630 <_printf_i+0x1e8>
 802464a:	e7eb      	b.n	8024624 <_printf_i+0x1dc>
 802464c:	2500      	movs	r5, #0
 802464e:	f104 0919 	add.w	r9, r4, #25
 8024652:	e7f5      	b.n	8024640 <_printf_i+0x1f8>
 8024654:	2b00      	cmp	r3, #0
 8024656:	d1ac      	bne.n	80245b2 <_printf_i+0x16a>
 8024658:	7803      	ldrb	r3, [r0, #0]
 802465a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802465e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024662:	e76c      	b.n	802453e <_printf_i+0xf6>
 8024664:	08029065 	.word	0x08029065
 8024668:	08029076 	.word	0x08029076

0802466c <_sbrk_r>:
 802466c:	b538      	push	{r3, r4, r5, lr}
 802466e:	4c06      	ldr	r4, [pc, #24]	; (8024688 <_sbrk_r+0x1c>)
 8024670:	2300      	movs	r3, #0
 8024672:	4605      	mov	r5, r0
 8024674:	4608      	mov	r0, r1
 8024676:	6023      	str	r3, [r4, #0]
 8024678:	f7de fc90 	bl	8002f9c <_sbrk>
 802467c:	1c43      	adds	r3, r0, #1
 802467e:	d102      	bne.n	8024686 <_sbrk_r+0x1a>
 8024680:	6823      	ldr	r3, [r4, #0]
 8024682:	b103      	cbz	r3, 8024686 <_sbrk_r+0x1a>
 8024684:	602b      	str	r3, [r5, #0]
 8024686:	bd38      	pop	{r3, r4, r5, pc}
 8024688:	2000cb28 	.word	0x2000cb28

0802468c <_raise_r>:
 802468c:	291f      	cmp	r1, #31
 802468e:	b538      	push	{r3, r4, r5, lr}
 8024690:	4604      	mov	r4, r0
 8024692:	460d      	mov	r5, r1
 8024694:	d904      	bls.n	80246a0 <_raise_r+0x14>
 8024696:	2316      	movs	r3, #22
 8024698:	6003      	str	r3, [r0, #0]
 802469a:	f04f 30ff 	mov.w	r0, #4294967295
 802469e:	bd38      	pop	{r3, r4, r5, pc}
 80246a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80246a2:	b112      	cbz	r2, 80246aa <_raise_r+0x1e>
 80246a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80246a8:	b94b      	cbnz	r3, 80246be <_raise_r+0x32>
 80246aa:	4620      	mov	r0, r4
 80246ac:	f000 f830 	bl	8024710 <_getpid_r>
 80246b0:	462a      	mov	r2, r5
 80246b2:	4601      	mov	r1, r0
 80246b4:	4620      	mov	r0, r4
 80246b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80246ba:	f000 b817 	b.w	80246ec <_kill_r>
 80246be:	2b01      	cmp	r3, #1
 80246c0:	d00a      	beq.n	80246d8 <_raise_r+0x4c>
 80246c2:	1c59      	adds	r1, r3, #1
 80246c4:	d103      	bne.n	80246ce <_raise_r+0x42>
 80246c6:	2316      	movs	r3, #22
 80246c8:	6003      	str	r3, [r0, #0]
 80246ca:	2001      	movs	r0, #1
 80246cc:	e7e7      	b.n	802469e <_raise_r+0x12>
 80246ce:	2400      	movs	r4, #0
 80246d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80246d4:	4628      	mov	r0, r5
 80246d6:	4798      	blx	r3
 80246d8:	2000      	movs	r0, #0
 80246da:	e7e0      	b.n	802469e <_raise_r+0x12>

080246dc <raise>:
 80246dc:	4b02      	ldr	r3, [pc, #8]	; (80246e8 <raise+0xc>)
 80246de:	4601      	mov	r1, r0
 80246e0:	6818      	ldr	r0, [r3, #0]
 80246e2:	f7ff bfd3 	b.w	802468c <_raise_r>
 80246e6:	bf00      	nop
 80246e8:	20000098 	.word	0x20000098

080246ec <_kill_r>:
 80246ec:	b538      	push	{r3, r4, r5, lr}
 80246ee:	4c07      	ldr	r4, [pc, #28]	; (802470c <_kill_r+0x20>)
 80246f0:	2300      	movs	r3, #0
 80246f2:	4605      	mov	r5, r0
 80246f4:	4608      	mov	r0, r1
 80246f6:	4611      	mov	r1, r2
 80246f8:	6023      	str	r3, [r4, #0]
 80246fa:	f7de fbc7 	bl	8002e8c <_kill>
 80246fe:	1c43      	adds	r3, r0, #1
 8024700:	d102      	bne.n	8024708 <_kill_r+0x1c>
 8024702:	6823      	ldr	r3, [r4, #0]
 8024704:	b103      	cbz	r3, 8024708 <_kill_r+0x1c>
 8024706:	602b      	str	r3, [r5, #0]
 8024708:	bd38      	pop	{r3, r4, r5, pc}
 802470a:	bf00      	nop
 802470c:	2000cb28 	.word	0x2000cb28

08024710 <_getpid_r>:
 8024710:	f7de bbb4 	b.w	8002e7c <_getpid>

08024714 <__swbuf_r>:
 8024714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024716:	460e      	mov	r6, r1
 8024718:	4614      	mov	r4, r2
 802471a:	4605      	mov	r5, r0
 802471c:	b118      	cbz	r0, 8024726 <__swbuf_r+0x12>
 802471e:	6983      	ldr	r3, [r0, #24]
 8024720:	b90b      	cbnz	r3, 8024726 <__swbuf_r+0x12>
 8024722:	f000 fa0b 	bl	8024b3c <__sinit>
 8024726:	4b21      	ldr	r3, [pc, #132]	; (80247ac <__swbuf_r+0x98>)
 8024728:	429c      	cmp	r4, r3
 802472a:	d12a      	bne.n	8024782 <__swbuf_r+0x6e>
 802472c:	686c      	ldr	r4, [r5, #4]
 802472e:	69a3      	ldr	r3, [r4, #24]
 8024730:	60a3      	str	r3, [r4, #8]
 8024732:	89a3      	ldrh	r3, [r4, #12]
 8024734:	071a      	lsls	r2, r3, #28
 8024736:	d52e      	bpl.n	8024796 <__swbuf_r+0x82>
 8024738:	6923      	ldr	r3, [r4, #16]
 802473a:	b363      	cbz	r3, 8024796 <__swbuf_r+0x82>
 802473c:	6923      	ldr	r3, [r4, #16]
 802473e:	6820      	ldr	r0, [r4, #0]
 8024740:	1ac0      	subs	r0, r0, r3
 8024742:	6963      	ldr	r3, [r4, #20]
 8024744:	b2f6      	uxtb	r6, r6
 8024746:	4283      	cmp	r3, r0
 8024748:	4637      	mov	r7, r6
 802474a:	dc04      	bgt.n	8024756 <__swbuf_r+0x42>
 802474c:	4621      	mov	r1, r4
 802474e:	4628      	mov	r0, r5
 8024750:	f000 f98a 	bl	8024a68 <_fflush_r>
 8024754:	bb28      	cbnz	r0, 80247a2 <__swbuf_r+0x8e>
 8024756:	68a3      	ldr	r3, [r4, #8]
 8024758:	3b01      	subs	r3, #1
 802475a:	60a3      	str	r3, [r4, #8]
 802475c:	6823      	ldr	r3, [r4, #0]
 802475e:	1c5a      	adds	r2, r3, #1
 8024760:	6022      	str	r2, [r4, #0]
 8024762:	701e      	strb	r6, [r3, #0]
 8024764:	6963      	ldr	r3, [r4, #20]
 8024766:	3001      	adds	r0, #1
 8024768:	4283      	cmp	r3, r0
 802476a:	d004      	beq.n	8024776 <__swbuf_r+0x62>
 802476c:	89a3      	ldrh	r3, [r4, #12]
 802476e:	07db      	lsls	r3, r3, #31
 8024770:	d519      	bpl.n	80247a6 <__swbuf_r+0x92>
 8024772:	2e0a      	cmp	r6, #10
 8024774:	d117      	bne.n	80247a6 <__swbuf_r+0x92>
 8024776:	4621      	mov	r1, r4
 8024778:	4628      	mov	r0, r5
 802477a:	f000 f975 	bl	8024a68 <_fflush_r>
 802477e:	b190      	cbz	r0, 80247a6 <__swbuf_r+0x92>
 8024780:	e00f      	b.n	80247a2 <__swbuf_r+0x8e>
 8024782:	4b0b      	ldr	r3, [pc, #44]	; (80247b0 <__swbuf_r+0x9c>)
 8024784:	429c      	cmp	r4, r3
 8024786:	d101      	bne.n	802478c <__swbuf_r+0x78>
 8024788:	68ac      	ldr	r4, [r5, #8]
 802478a:	e7d0      	b.n	802472e <__swbuf_r+0x1a>
 802478c:	4b09      	ldr	r3, [pc, #36]	; (80247b4 <__swbuf_r+0xa0>)
 802478e:	429c      	cmp	r4, r3
 8024790:	bf08      	it	eq
 8024792:	68ec      	ldreq	r4, [r5, #12]
 8024794:	e7cb      	b.n	802472e <__swbuf_r+0x1a>
 8024796:	4621      	mov	r1, r4
 8024798:	4628      	mov	r0, r5
 802479a:	f000 f80d 	bl	80247b8 <__swsetup_r>
 802479e:	2800      	cmp	r0, #0
 80247a0:	d0cc      	beq.n	802473c <__swbuf_r+0x28>
 80247a2:	f04f 37ff 	mov.w	r7, #4294967295
 80247a6:	4638      	mov	r0, r7
 80247a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80247aa:	bf00      	nop
 80247ac:	080290ac 	.word	0x080290ac
 80247b0:	080290cc 	.word	0x080290cc
 80247b4:	0802908c 	.word	0x0802908c

080247b8 <__swsetup_r>:
 80247b8:	4b32      	ldr	r3, [pc, #200]	; (8024884 <__swsetup_r+0xcc>)
 80247ba:	b570      	push	{r4, r5, r6, lr}
 80247bc:	681d      	ldr	r5, [r3, #0]
 80247be:	4606      	mov	r6, r0
 80247c0:	460c      	mov	r4, r1
 80247c2:	b125      	cbz	r5, 80247ce <__swsetup_r+0x16>
 80247c4:	69ab      	ldr	r3, [r5, #24]
 80247c6:	b913      	cbnz	r3, 80247ce <__swsetup_r+0x16>
 80247c8:	4628      	mov	r0, r5
 80247ca:	f000 f9b7 	bl	8024b3c <__sinit>
 80247ce:	4b2e      	ldr	r3, [pc, #184]	; (8024888 <__swsetup_r+0xd0>)
 80247d0:	429c      	cmp	r4, r3
 80247d2:	d10f      	bne.n	80247f4 <__swsetup_r+0x3c>
 80247d4:	686c      	ldr	r4, [r5, #4]
 80247d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80247da:	b29a      	uxth	r2, r3
 80247dc:	0715      	lsls	r5, r2, #28
 80247de:	d42c      	bmi.n	802483a <__swsetup_r+0x82>
 80247e0:	06d0      	lsls	r0, r2, #27
 80247e2:	d411      	bmi.n	8024808 <__swsetup_r+0x50>
 80247e4:	2209      	movs	r2, #9
 80247e6:	6032      	str	r2, [r6, #0]
 80247e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80247ec:	81a3      	strh	r3, [r4, #12]
 80247ee:	f04f 30ff 	mov.w	r0, #4294967295
 80247f2:	e03e      	b.n	8024872 <__swsetup_r+0xba>
 80247f4:	4b25      	ldr	r3, [pc, #148]	; (802488c <__swsetup_r+0xd4>)
 80247f6:	429c      	cmp	r4, r3
 80247f8:	d101      	bne.n	80247fe <__swsetup_r+0x46>
 80247fa:	68ac      	ldr	r4, [r5, #8]
 80247fc:	e7eb      	b.n	80247d6 <__swsetup_r+0x1e>
 80247fe:	4b24      	ldr	r3, [pc, #144]	; (8024890 <__swsetup_r+0xd8>)
 8024800:	429c      	cmp	r4, r3
 8024802:	bf08      	it	eq
 8024804:	68ec      	ldreq	r4, [r5, #12]
 8024806:	e7e6      	b.n	80247d6 <__swsetup_r+0x1e>
 8024808:	0751      	lsls	r1, r2, #29
 802480a:	d512      	bpl.n	8024832 <__swsetup_r+0x7a>
 802480c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802480e:	b141      	cbz	r1, 8024822 <__swsetup_r+0x6a>
 8024810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024814:	4299      	cmp	r1, r3
 8024816:	d002      	beq.n	802481e <__swsetup_r+0x66>
 8024818:	4630      	mov	r0, r6
 802481a:	f7ff fbb7 	bl	8023f8c <_free_r>
 802481e:	2300      	movs	r3, #0
 8024820:	6363      	str	r3, [r4, #52]	; 0x34
 8024822:	89a3      	ldrh	r3, [r4, #12]
 8024824:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024828:	81a3      	strh	r3, [r4, #12]
 802482a:	2300      	movs	r3, #0
 802482c:	6063      	str	r3, [r4, #4]
 802482e:	6923      	ldr	r3, [r4, #16]
 8024830:	6023      	str	r3, [r4, #0]
 8024832:	89a3      	ldrh	r3, [r4, #12]
 8024834:	f043 0308 	orr.w	r3, r3, #8
 8024838:	81a3      	strh	r3, [r4, #12]
 802483a:	6923      	ldr	r3, [r4, #16]
 802483c:	b94b      	cbnz	r3, 8024852 <__swsetup_r+0x9a>
 802483e:	89a3      	ldrh	r3, [r4, #12]
 8024840:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024848:	d003      	beq.n	8024852 <__swsetup_r+0x9a>
 802484a:	4621      	mov	r1, r4
 802484c:	4630      	mov	r0, r6
 802484e:	f000 fa23 	bl	8024c98 <__smakebuf_r>
 8024852:	89a2      	ldrh	r2, [r4, #12]
 8024854:	f012 0301 	ands.w	r3, r2, #1
 8024858:	d00c      	beq.n	8024874 <__swsetup_r+0xbc>
 802485a:	2300      	movs	r3, #0
 802485c:	60a3      	str	r3, [r4, #8]
 802485e:	6963      	ldr	r3, [r4, #20]
 8024860:	425b      	negs	r3, r3
 8024862:	61a3      	str	r3, [r4, #24]
 8024864:	6923      	ldr	r3, [r4, #16]
 8024866:	b953      	cbnz	r3, 802487e <__swsetup_r+0xc6>
 8024868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802486c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8024870:	d1ba      	bne.n	80247e8 <__swsetup_r+0x30>
 8024872:	bd70      	pop	{r4, r5, r6, pc}
 8024874:	0792      	lsls	r2, r2, #30
 8024876:	bf58      	it	pl
 8024878:	6963      	ldrpl	r3, [r4, #20]
 802487a:	60a3      	str	r3, [r4, #8]
 802487c:	e7f2      	b.n	8024864 <__swsetup_r+0xac>
 802487e:	2000      	movs	r0, #0
 8024880:	e7f7      	b.n	8024872 <__swsetup_r+0xba>
 8024882:	bf00      	nop
 8024884:	20000098 	.word	0x20000098
 8024888:	080290ac 	.word	0x080290ac
 802488c:	080290cc 	.word	0x080290cc
 8024890:	0802908c 	.word	0x0802908c

08024894 <__register_exitproc>:
 8024894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024898:	4d2c      	ldr	r5, [pc, #176]	; (802494c <__register_exitproc+0xb8>)
 802489a:	682c      	ldr	r4, [r5, #0]
 802489c:	4607      	mov	r7, r0
 802489e:	460e      	mov	r6, r1
 80248a0:	4691      	mov	r9, r2
 80248a2:	4698      	mov	r8, r3
 80248a4:	b934      	cbnz	r4, 80248b4 <__register_exitproc+0x20>
 80248a6:	4b2a      	ldr	r3, [pc, #168]	; (8024950 <__register_exitproc+0xbc>)
 80248a8:	4c2a      	ldr	r4, [pc, #168]	; (8024954 <__register_exitproc+0xc0>)
 80248aa:	602c      	str	r4, [r5, #0]
 80248ac:	b113      	cbz	r3, 80248b4 <__register_exitproc+0x20>
 80248ae:	681b      	ldr	r3, [r3, #0]
 80248b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80248b4:	6863      	ldr	r3, [r4, #4]
 80248b6:	2b1f      	cmp	r3, #31
 80248b8:	dd3d      	ble.n	8024936 <__register_exitproc+0xa2>
 80248ba:	4b27      	ldr	r3, [pc, #156]	; (8024958 <__register_exitproc+0xc4>)
 80248bc:	b91b      	cbnz	r3, 80248c6 <__register_exitproc+0x32>
 80248be:	f04f 30ff 	mov.w	r0, #4294967295
 80248c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80248c6:	208c      	movs	r0, #140	; 0x8c
 80248c8:	f7ff fb3c 	bl	8023f44 <malloc>
 80248cc:	4604      	mov	r4, r0
 80248ce:	2800      	cmp	r0, #0
 80248d0:	d0f5      	beq.n	80248be <__register_exitproc+0x2a>
 80248d2:	2300      	movs	r3, #0
 80248d4:	682a      	ldr	r2, [r5, #0]
 80248d6:	6002      	str	r2, [r0, #0]
 80248d8:	6043      	str	r3, [r0, #4]
 80248da:	6028      	str	r0, [r5, #0]
 80248dc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80248e0:	b30f      	cbz	r7, 8024926 <__register_exitproc+0x92>
 80248e2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80248e6:	f7ff fb2d 	bl	8023f44 <malloc>
 80248ea:	2800      	cmp	r0, #0
 80248ec:	d0e7      	beq.n	80248be <__register_exitproc+0x2a>
 80248ee:	2300      	movs	r3, #0
 80248f0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80248f4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80248f8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80248fc:	6862      	ldr	r2, [r4, #4]
 80248fe:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8024902:	2301      	movs	r3, #1
 8024904:	4093      	lsls	r3, r2
 8024906:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802490a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802490e:	431a      	orrs	r2, r3
 8024910:	2f02      	cmp	r7, #2
 8024912:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8024916:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802491a:	bf02      	ittt	eq
 802491c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8024920:	4313      	orreq	r3, r2
 8024922:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8024926:	6863      	ldr	r3, [r4, #4]
 8024928:	1c5a      	adds	r2, r3, #1
 802492a:	3302      	adds	r3, #2
 802492c:	6062      	str	r2, [r4, #4]
 802492e:	2000      	movs	r0, #0
 8024930:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8024934:	e7c5      	b.n	80248c2 <__register_exitproc+0x2e>
 8024936:	2f00      	cmp	r7, #0
 8024938:	d0f5      	beq.n	8024926 <__register_exitproc+0x92>
 802493a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802493e:	2800      	cmp	r0, #0
 8024940:	d1dc      	bne.n	80248fc <__register_exitproc+0x68>
 8024942:	4b05      	ldr	r3, [pc, #20]	; (8024958 <__register_exitproc+0xc4>)
 8024944:	2b00      	cmp	r3, #0
 8024946:	d0ba      	beq.n	80248be <__register_exitproc+0x2a>
 8024948:	e7cb      	b.n	80248e2 <__register_exitproc+0x4e>
 802494a:	bf00      	nop
 802494c:	2000bf20 	.word	0x2000bf20
 8024950:	08029088 	.word	0x08029088
 8024954:	2000be94 	.word	0x2000be94
 8024958:	08023f45 	.word	0x08023f45

0802495c <__sflush_r>:
 802495c:	898a      	ldrh	r2, [r1, #12]
 802495e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024962:	4605      	mov	r5, r0
 8024964:	0710      	lsls	r0, r2, #28
 8024966:	460c      	mov	r4, r1
 8024968:	d458      	bmi.n	8024a1c <__sflush_r+0xc0>
 802496a:	684b      	ldr	r3, [r1, #4]
 802496c:	2b00      	cmp	r3, #0
 802496e:	dc05      	bgt.n	802497c <__sflush_r+0x20>
 8024970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024972:	2b00      	cmp	r3, #0
 8024974:	dc02      	bgt.n	802497c <__sflush_r+0x20>
 8024976:	2000      	movs	r0, #0
 8024978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802497c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802497e:	2e00      	cmp	r6, #0
 8024980:	d0f9      	beq.n	8024976 <__sflush_r+0x1a>
 8024982:	2300      	movs	r3, #0
 8024984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024988:	682f      	ldr	r7, [r5, #0]
 802498a:	6a21      	ldr	r1, [r4, #32]
 802498c:	602b      	str	r3, [r5, #0]
 802498e:	d032      	beq.n	80249f6 <__sflush_r+0x9a>
 8024990:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024992:	89a3      	ldrh	r3, [r4, #12]
 8024994:	075a      	lsls	r2, r3, #29
 8024996:	d505      	bpl.n	80249a4 <__sflush_r+0x48>
 8024998:	6863      	ldr	r3, [r4, #4]
 802499a:	1ac0      	subs	r0, r0, r3
 802499c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802499e:	b10b      	cbz	r3, 80249a4 <__sflush_r+0x48>
 80249a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80249a2:	1ac0      	subs	r0, r0, r3
 80249a4:	2300      	movs	r3, #0
 80249a6:	4602      	mov	r2, r0
 80249a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80249aa:	6a21      	ldr	r1, [r4, #32]
 80249ac:	4628      	mov	r0, r5
 80249ae:	47b0      	blx	r6
 80249b0:	1c43      	adds	r3, r0, #1
 80249b2:	89a3      	ldrh	r3, [r4, #12]
 80249b4:	d106      	bne.n	80249c4 <__sflush_r+0x68>
 80249b6:	6829      	ldr	r1, [r5, #0]
 80249b8:	291d      	cmp	r1, #29
 80249ba:	d848      	bhi.n	8024a4e <__sflush_r+0xf2>
 80249bc:	4a29      	ldr	r2, [pc, #164]	; (8024a64 <__sflush_r+0x108>)
 80249be:	40ca      	lsrs	r2, r1
 80249c0:	07d6      	lsls	r6, r2, #31
 80249c2:	d544      	bpl.n	8024a4e <__sflush_r+0xf2>
 80249c4:	2200      	movs	r2, #0
 80249c6:	6062      	str	r2, [r4, #4]
 80249c8:	04d9      	lsls	r1, r3, #19
 80249ca:	6922      	ldr	r2, [r4, #16]
 80249cc:	6022      	str	r2, [r4, #0]
 80249ce:	d504      	bpl.n	80249da <__sflush_r+0x7e>
 80249d0:	1c42      	adds	r2, r0, #1
 80249d2:	d101      	bne.n	80249d8 <__sflush_r+0x7c>
 80249d4:	682b      	ldr	r3, [r5, #0]
 80249d6:	b903      	cbnz	r3, 80249da <__sflush_r+0x7e>
 80249d8:	6560      	str	r0, [r4, #84]	; 0x54
 80249da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80249dc:	602f      	str	r7, [r5, #0]
 80249de:	2900      	cmp	r1, #0
 80249e0:	d0c9      	beq.n	8024976 <__sflush_r+0x1a>
 80249e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80249e6:	4299      	cmp	r1, r3
 80249e8:	d002      	beq.n	80249f0 <__sflush_r+0x94>
 80249ea:	4628      	mov	r0, r5
 80249ec:	f7ff face 	bl	8023f8c <_free_r>
 80249f0:	2000      	movs	r0, #0
 80249f2:	6360      	str	r0, [r4, #52]	; 0x34
 80249f4:	e7c0      	b.n	8024978 <__sflush_r+0x1c>
 80249f6:	2301      	movs	r3, #1
 80249f8:	4628      	mov	r0, r5
 80249fa:	47b0      	blx	r6
 80249fc:	1c41      	adds	r1, r0, #1
 80249fe:	d1c8      	bne.n	8024992 <__sflush_r+0x36>
 8024a00:	682b      	ldr	r3, [r5, #0]
 8024a02:	2b00      	cmp	r3, #0
 8024a04:	d0c5      	beq.n	8024992 <__sflush_r+0x36>
 8024a06:	2b1d      	cmp	r3, #29
 8024a08:	d001      	beq.n	8024a0e <__sflush_r+0xb2>
 8024a0a:	2b16      	cmp	r3, #22
 8024a0c:	d101      	bne.n	8024a12 <__sflush_r+0xb6>
 8024a0e:	602f      	str	r7, [r5, #0]
 8024a10:	e7b1      	b.n	8024976 <__sflush_r+0x1a>
 8024a12:	89a3      	ldrh	r3, [r4, #12]
 8024a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024a18:	81a3      	strh	r3, [r4, #12]
 8024a1a:	e7ad      	b.n	8024978 <__sflush_r+0x1c>
 8024a1c:	690f      	ldr	r7, [r1, #16]
 8024a1e:	2f00      	cmp	r7, #0
 8024a20:	d0a9      	beq.n	8024976 <__sflush_r+0x1a>
 8024a22:	0793      	lsls	r3, r2, #30
 8024a24:	680e      	ldr	r6, [r1, #0]
 8024a26:	bf08      	it	eq
 8024a28:	694b      	ldreq	r3, [r1, #20]
 8024a2a:	600f      	str	r7, [r1, #0]
 8024a2c:	bf18      	it	ne
 8024a2e:	2300      	movne	r3, #0
 8024a30:	eba6 0807 	sub.w	r8, r6, r7
 8024a34:	608b      	str	r3, [r1, #8]
 8024a36:	f1b8 0f00 	cmp.w	r8, #0
 8024a3a:	dd9c      	ble.n	8024976 <__sflush_r+0x1a>
 8024a3c:	4643      	mov	r3, r8
 8024a3e:	463a      	mov	r2, r7
 8024a40:	6a21      	ldr	r1, [r4, #32]
 8024a42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024a44:	4628      	mov	r0, r5
 8024a46:	47b0      	blx	r6
 8024a48:	2800      	cmp	r0, #0
 8024a4a:	dc06      	bgt.n	8024a5a <__sflush_r+0xfe>
 8024a4c:	89a3      	ldrh	r3, [r4, #12]
 8024a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024a52:	81a3      	strh	r3, [r4, #12]
 8024a54:	f04f 30ff 	mov.w	r0, #4294967295
 8024a58:	e78e      	b.n	8024978 <__sflush_r+0x1c>
 8024a5a:	4407      	add	r7, r0
 8024a5c:	eba8 0800 	sub.w	r8, r8, r0
 8024a60:	e7e9      	b.n	8024a36 <__sflush_r+0xda>
 8024a62:	bf00      	nop
 8024a64:	20400001 	.word	0x20400001

08024a68 <_fflush_r>:
 8024a68:	b538      	push	{r3, r4, r5, lr}
 8024a6a:	690b      	ldr	r3, [r1, #16]
 8024a6c:	4605      	mov	r5, r0
 8024a6e:	460c      	mov	r4, r1
 8024a70:	b1db      	cbz	r3, 8024aaa <_fflush_r+0x42>
 8024a72:	b118      	cbz	r0, 8024a7c <_fflush_r+0x14>
 8024a74:	6983      	ldr	r3, [r0, #24]
 8024a76:	b90b      	cbnz	r3, 8024a7c <_fflush_r+0x14>
 8024a78:	f000 f860 	bl	8024b3c <__sinit>
 8024a7c:	4b0c      	ldr	r3, [pc, #48]	; (8024ab0 <_fflush_r+0x48>)
 8024a7e:	429c      	cmp	r4, r3
 8024a80:	d109      	bne.n	8024a96 <_fflush_r+0x2e>
 8024a82:	686c      	ldr	r4, [r5, #4]
 8024a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024a88:	b17b      	cbz	r3, 8024aaa <_fflush_r+0x42>
 8024a8a:	4621      	mov	r1, r4
 8024a8c:	4628      	mov	r0, r5
 8024a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024a92:	f7ff bf63 	b.w	802495c <__sflush_r>
 8024a96:	4b07      	ldr	r3, [pc, #28]	; (8024ab4 <_fflush_r+0x4c>)
 8024a98:	429c      	cmp	r4, r3
 8024a9a:	d101      	bne.n	8024aa0 <_fflush_r+0x38>
 8024a9c:	68ac      	ldr	r4, [r5, #8]
 8024a9e:	e7f1      	b.n	8024a84 <_fflush_r+0x1c>
 8024aa0:	4b05      	ldr	r3, [pc, #20]	; (8024ab8 <_fflush_r+0x50>)
 8024aa2:	429c      	cmp	r4, r3
 8024aa4:	bf08      	it	eq
 8024aa6:	68ec      	ldreq	r4, [r5, #12]
 8024aa8:	e7ec      	b.n	8024a84 <_fflush_r+0x1c>
 8024aaa:	2000      	movs	r0, #0
 8024aac:	bd38      	pop	{r3, r4, r5, pc}
 8024aae:	bf00      	nop
 8024ab0:	080290ac 	.word	0x080290ac
 8024ab4:	080290cc 	.word	0x080290cc
 8024ab8:	0802908c 	.word	0x0802908c

08024abc <std>:
 8024abc:	2300      	movs	r3, #0
 8024abe:	b510      	push	{r4, lr}
 8024ac0:	4604      	mov	r4, r0
 8024ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8024ac6:	6083      	str	r3, [r0, #8]
 8024ac8:	8181      	strh	r1, [r0, #12]
 8024aca:	6643      	str	r3, [r0, #100]	; 0x64
 8024acc:	81c2      	strh	r2, [r0, #14]
 8024ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024ad2:	6183      	str	r3, [r0, #24]
 8024ad4:	4619      	mov	r1, r3
 8024ad6:	2208      	movs	r2, #8
 8024ad8:	305c      	adds	r0, #92	; 0x5c
 8024ada:	f7ff fa4e 	bl	8023f7a <memset>
 8024ade:	4b05      	ldr	r3, [pc, #20]	; (8024af4 <std+0x38>)
 8024ae0:	6263      	str	r3, [r4, #36]	; 0x24
 8024ae2:	4b05      	ldr	r3, [pc, #20]	; (8024af8 <std+0x3c>)
 8024ae4:	62a3      	str	r3, [r4, #40]	; 0x28
 8024ae6:	4b05      	ldr	r3, [pc, #20]	; (8024afc <std+0x40>)
 8024ae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024aea:	4b05      	ldr	r3, [pc, #20]	; (8024b00 <std+0x44>)
 8024aec:	6224      	str	r4, [r4, #32]
 8024aee:	6323      	str	r3, [r4, #48]	; 0x30
 8024af0:	bd10      	pop	{r4, pc}
 8024af2:	bf00      	nop
 8024af4:	08024d1d 	.word	0x08024d1d
 8024af8:	08024d3f 	.word	0x08024d3f
 8024afc:	08024d77 	.word	0x08024d77
 8024b00:	08024d9b 	.word	0x08024d9b

08024b04 <_cleanup_r>:
 8024b04:	4901      	ldr	r1, [pc, #4]	; (8024b0c <_cleanup_r+0x8>)
 8024b06:	f000 b885 	b.w	8024c14 <_fwalk_reent>
 8024b0a:	bf00      	nop
 8024b0c:	08024a69 	.word	0x08024a69

08024b10 <__sfmoreglue>:
 8024b10:	b570      	push	{r4, r5, r6, lr}
 8024b12:	1e4a      	subs	r2, r1, #1
 8024b14:	2568      	movs	r5, #104	; 0x68
 8024b16:	4355      	muls	r5, r2
 8024b18:	460e      	mov	r6, r1
 8024b1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024b1e:	f7ff fa83 	bl	8024028 <_malloc_r>
 8024b22:	4604      	mov	r4, r0
 8024b24:	b140      	cbz	r0, 8024b38 <__sfmoreglue+0x28>
 8024b26:	2100      	movs	r1, #0
 8024b28:	e9c0 1600 	strd	r1, r6, [r0]
 8024b2c:	300c      	adds	r0, #12
 8024b2e:	60a0      	str	r0, [r4, #8]
 8024b30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024b34:	f7ff fa21 	bl	8023f7a <memset>
 8024b38:	4620      	mov	r0, r4
 8024b3a:	bd70      	pop	{r4, r5, r6, pc}

08024b3c <__sinit>:
 8024b3c:	6983      	ldr	r3, [r0, #24]
 8024b3e:	b510      	push	{r4, lr}
 8024b40:	4604      	mov	r4, r0
 8024b42:	bb33      	cbnz	r3, 8024b92 <__sinit+0x56>
 8024b44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8024b48:	6503      	str	r3, [r0, #80]	; 0x50
 8024b4a:	4b12      	ldr	r3, [pc, #72]	; (8024b94 <__sinit+0x58>)
 8024b4c:	4a12      	ldr	r2, [pc, #72]	; (8024b98 <__sinit+0x5c>)
 8024b4e:	681b      	ldr	r3, [r3, #0]
 8024b50:	6282      	str	r2, [r0, #40]	; 0x28
 8024b52:	4298      	cmp	r0, r3
 8024b54:	bf04      	itt	eq
 8024b56:	2301      	moveq	r3, #1
 8024b58:	6183      	streq	r3, [r0, #24]
 8024b5a:	f000 f81f 	bl	8024b9c <__sfp>
 8024b5e:	6060      	str	r0, [r4, #4]
 8024b60:	4620      	mov	r0, r4
 8024b62:	f000 f81b 	bl	8024b9c <__sfp>
 8024b66:	60a0      	str	r0, [r4, #8]
 8024b68:	4620      	mov	r0, r4
 8024b6a:	f000 f817 	bl	8024b9c <__sfp>
 8024b6e:	2200      	movs	r2, #0
 8024b70:	60e0      	str	r0, [r4, #12]
 8024b72:	2104      	movs	r1, #4
 8024b74:	6860      	ldr	r0, [r4, #4]
 8024b76:	f7ff ffa1 	bl	8024abc <std>
 8024b7a:	2201      	movs	r2, #1
 8024b7c:	2109      	movs	r1, #9
 8024b7e:	68a0      	ldr	r0, [r4, #8]
 8024b80:	f7ff ff9c 	bl	8024abc <std>
 8024b84:	2202      	movs	r2, #2
 8024b86:	2112      	movs	r1, #18
 8024b88:	68e0      	ldr	r0, [r4, #12]
 8024b8a:	f7ff ff97 	bl	8024abc <std>
 8024b8e:	2301      	movs	r3, #1
 8024b90:	61a3      	str	r3, [r4, #24]
 8024b92:	bd10      	pop	{r4, pc}
 8024b94:	08029050 	.word	0x08029050
 8024b98:	08024b05 	.word	0x08024b05

08024b9c <__sfp>:
 8024b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b9e:	4b1b      	ldr	r3, [pc, #108]	; (8024c0c <__sfp+0x70>)
 8024ba0:	681e      	ldr	r6, [r3, #0]
 8024ba2:	69b3      	ldr	r3, [r6, #24]
 8024ba4:	4607      	mov	r7, r0
 8024ba6:	b913      	cbnz	r3, 8024bae <__sfp+0x12>
 8024ba8:	4630      	mov	r0, r6
 8024baa:	f7ff ffc7 	bl	8024b3c <__sinit>
 8024bae:	3648      	adds	r6, #72	; 0x48
 8024bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024bb4:	3b01      	subs	r3, #1
 8024bb6:	d503      	bpl.n	8024bc0 <__sfp+0x24>
 8024bb8:	6833      	ldr	r3, [r6, #0]
 8024bba:	b133      	cbz	r3, 8024bca <__sfp+0x2e>
 8024bbc:	6836      	ldr	r6, [r6, #0]
 8024bbe:	e7f7      	b.n	8024bb0 <__sfp+0x14>
 8024bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024bc4:	b16d      	cbz	r5, 8024be2 <__sfp+0x46>
 8024bc6:	3468      	adds	r4, #104	; 0x68
 8024bc8:	e7f4      	b.n	8024bb4 <__sfp+0x18>
 8024bca:	2104      	movs	r1, #4
 8024bcc:	4638      	mov	r0, r7
 8024bce:	f7ff ff9f 	bl	8024b10 <__sfmoreglue>
 8024bd2:	6030      	str	r0, [r6, #0]
 8024bd4:	2800      	cmp	r0, #0
 8024bd6:	d1f1      	bne.n	8024bbc <__sfp+0x20>
 8024bd8:	230c      	movs	r3, #12
 8024bda:	603b      	str	r3, [r7, #0]
 8024bdc:	4604      	mov	r4, r0
 8024bde:	4620      	mov	r0, r4
 8024be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024be2:	4b0b      	ldr	r3, [pc, #44]	; (8024c10 <__sfp+0x74>)
 8024be4:	6665      	str	r5, [r4, #100]	; 0x64
 8024be6:	e9c4 5500 	strd	r5, r5, [r4]
 8024bea:	60a5      	str	r5, [r4, #8]
 8024bec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8024bf0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8024bf4:	2208      	movs	r2, #8
 8024bf6:	4629      	mov	r1, r5
 8024bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024bfc:	f7ff f9bd 	bl	8023f7a <memset>
 8024c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024c08:	e7e9      	b.n	8024bde <__sfp+0x42>
 8024c0a:	bf00      	nop
 8024c0c:	08029050 	.word	0x08029050
 8024c10:	ffff0001 	.word	0xffff0001

08024c14 <_fwalk_reent>:
 8024c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024c18:	4680      	mov	r8, r0
 8024c1a:	4689      	mov	r9, r1
 8024c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024c20:	2600      	movs	r6, #0
 8024c22:	b914      	cbnz	r4, 8024c2a <_fwalk_reent+0x16>
 8024c24:	4630      	mov	r0, r6
 8024c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024c2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8024c2e:	3f01      	subs	r7, #1
 8024c30:	d501      	bpl.n	8024c36 <_fwalk_reent+0x22>
 8024c32:	6824      	ldr	r4, [r4, #0]
 8024c34:	e7f5      	b.n	8024c22 <_fwalk_reent+0xe>
 8024c36:	89ab      	ldrh	r3, [r5, #12]
 8024c38:	2b01      	cmp	r3, #1
 8024c3a:	d907      	bls.n	8024c4c <_fwalk_reent+0x38>
 8024c3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024c40:	3301      	adds	r3, #1
 8024c42:	d003      	beq.n	8024c4c <_fwalk_reent+0x38>
 8024c44:	4629      	mov	r1, r5
 8024c46:	4640      	mov	r0, r8
 8024c48:	47c8      	blx	r9
 8024c4a:	4306      	orrs	r6, r0
 8024c4c:	3568      	adds	r5, #104	; 0x68
 8024c4e:	e7ee      	b.n	8024c2e <_fwalk_reent+0x1a>

08024c50 <__swhatbuf_r>:
 8024c50:	b570      	push	{r4, r5, r6, lr}
 8024c52:	460e      	mov	r6, r1
 8024c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024c58:	2900      	cmp	r1, #0
 8024c5a:	b096      	sub	sp, #88	; 0x58
 8024c5c:	4614      	mov	r4, r2
 8024c5e:	461d      	mov	r5, r3
 8024c60:	da07      	bge.n	8024c72 <__swhatbuf_r+0x22>
 8024c62:	2300      	movs	r3, #0
 8024c64:	602b      	str	r3, [r5, #0]
 8024c66:	89b3      	ldrh	r3, [r6, #12]
 8024c68:	061a      	lsls	r2, r3, #24
 8024c6a:	d410      	bmi.n	8024c8e <__swhatbuf_r+0x3e>
 8024c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024c70:	e00e      	b.n	8024c90 <__swhatbuf_r+0x40>
 8024c72:	466a      	mov	r2, sp
 8024c74:	f000 f8b8 	bl	8024de8 <_fstat_r>
 8024c78:	2800      	cmp	r0, #0
 8024c7a:	dbf2      	blt.n	8024c62 <__swhatbuf_r+0x12>
 8024c7c:	9a01      	ldr	r2, [sp, #4]
 8024c7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024c82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024c86:	425a      	negs	r2, r3
 8024c88:	415a      	adcs	r2, r3
 8024c8a:	602a      	str	r2, [r5, #0]
 8024c8c:	e7ee      	b.n	8024c6c <__swhatbuf_r+0x1c>
 8024c8e:	2340      	movs	r3, #64	; 0x40
 8024c90:	2000      	movs	r0, #0
 8024c92:	6023      	str	r3, [r4, #0]
 8024c94:	b016      	add	sp, #88	; 0x58
 8024c96:	bd70      	pop	{r4, r5, r6, pc}

08024c98 <__smakebuf_r>:
 8024c98:	898b      	ldrh	r3, [r1, #12]
 8024c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024c9c:	079d      	lsls	r5, r3, #30
 8024c9e:	4606      	mov	r6, r0
 8024ca0:	460c      	mov	r4, r1
 8024ca2:	d507      	bpl.n	8024cb4 <__smakebuf_r+0x1c>
 8024ca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024ca8:	6023      	str	r3, [r4, #0]
 8024caa:	6123      	str	r3, [r4, #16]
 8024cac:	2301      	movs	r3, #1
 8024cae:	6163      	str	r3, [r4, #20]
 8024cb0:	b002      	add	sp, #8
 8024cb2:	bd70      	pop	{r4, r5, r6, pc}
 8024cb4:	ab01      	add	r3, sp, #4
 8024cb6:	466a      	mov	r2, sp
 8024cb8:	f7ff ffca 	bl	8024c50 <__swhatbuf_r>
 8024cbc:	9900      	ldr	r1, [sp, #0]
 8024cbe:	4605      	mov	r5, r0
 8024cc0:	4630      	mov	r0, r6
 8024cc2:	f7ff f9b1 	bl	8024028 <_malloc_r>
 8024cc6:	b948      	cbnz	r0, 8024cdc <__smakebuf_r+0x44>
 8024cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ccc:	059a      	lsls	r2, r3, #22
 8024cce:	d4ef      	bmi.n	8024cb0 <__smakebuf_r+0x18>
 8024cd0:	f023 0303 	bic.w	r3, r3, #3
 8024cd4:	f043 0302 	orr.w	r3, r3, #2
 8024cd8:	81a3      	strh	r3, [r4, #12]
 8024cda:	e7e3      	b.n	8024ca4 <__smakebuf_r+0xc>
 8024cdc:	4b0d      	ldr	r3, [pc, #52]	; (8024d14 <__smakebuf_r+0x7c>)
 8024cde:	62b3      	str	r3, [r6, #40]	; 0x28
 8024ce0:	89a3      	ldrh	r3, [r4, #12]
 8024ce2:	6020      	str	r0, [r4, #0]
 8024ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024ce8:	81a3      	strh	r3, [r4, #12]
 8024cea:	9b00      	ldr	r3, [sp, #0]
 8024cec:	6163      	str	r3, [r4, #20]
 8024cee:	9b01      	ldr	r3, [sp, #4]
 8024cf0:	6120      	str	r0, [r4, #16]
 8024cf2:	b15b      	cbz	r3, 8024d0c <__smakebuf_r+0x74>
 8024cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024cf8:	4630      	mov	r0, r6
 8024cfa:	f000 f887 	bl	8024e0c <_isatty_r>
 8024cfe:	b128      	cbz	r0, 8024d0c <__smakebuf_r+0x74>
 8024d00:	89a3      	ldrh	r3, [r4, #12]
 8024d02:	f023 0303 	bic.w	r3, r3, #3
 8024d06:	f043 0301 	orr.w	r3, r3, #1
 8024d0a:	81a3      	strh	r3, [r4, #12]
 8024d0c:	89a3      	ldrh	r3, [r4, #12]
 8024d0e:	431d      	orrs	r5, r3
 8024d10:	81a5      	strh	r5, [r4, #12]
 8024d12:	e7cd      	b.n	8024cb0 <__smakebuf_r+0x18>
 8024d14:	08024b05 	.word	0x08024b05

08024d18 <__malloc_lock>:
 8024d18:	4770      	bx	lr

08024d1a <__malloc_unlock>:
 8024d1a:	4770      	bx	lr

08024d1c <__sread>:
 8024d1c:	b510      	push	{r4, lr}
 8024d1e:	460c      	mov	r4, r1
 8024d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d24:	f000 f894 	bl	8024e50 <_read_r>
 8024d28:	2800      	cmp	r0, #0
 8024d2a:	bfab      	itete	ge
 8024d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8024d30:	181b      	addge	r3, r3, r0
 8024d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024d36:	bfac      	ite	ge
 8024d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8024d3a:	81a3      	strhlt	r3, [r4, #12]
 8024d3c:	bd10      	pop	{r4, pc}

08024d3e <__swrite>:
 8024d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d42:	461f      	mov	r7, r3
 8024d44:	898b      	ldrh	r3, [r1, #12]
 8024d46:	05db      	lsls	r3, r3, #23
 8024d48:	4605      	mov	r5, r0
 8024d4a:	460c      	mov	r4, r1
 8024d4c:	4616      	mov	r6, r2
 8024d4e:	d505      	bpl.n	8024d5c <__swrite+0x1e>
 8024d50:	2302      	movs	r3, #2
 8024d52:	2200      	movs	r2, #0
 8024d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d58:	f000 f868 	bl	8024e2c <_lseek_r>
 8024d5c:	89a3      	ldrh	r3, [r4, #12]
 8024d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024d66:	81a3      	strh	r3, [r4, #12]
 8024d68:	4632      	mov	r2, r6
 8024d6a:	463b      	mov	r3, r7
 8024d6c:	4628      	mov	r0, r5
 8024d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d72:	f000 b817 	b.w	8024da4 <_write_r>

08024d76 <__sseek>:
 8024d76:	b510      	push	{r4, lr}
 8024d78:	460c      	mov	r4, r1
 8024d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d7e:	f000 f855 	bl	8024e2c <_lseek_r>
 8024d82:	1c43      	adds	r3, r0, #1
 8024d84:	89a3      	ldrh	r3, [r4, #12]
 8024d86:	bf15      	itete	ne
 8024d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8024d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024d92:	81a3      	strheq	r3, [r4, #12]
 8024d94:	bf18      	it	ne
 8024d96:	81a3      	strhne	r3, [r4, #12]
 8024d98:	bd10      	pop	{r4, pc}

08024d9a <__sclose>:
 8024d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d9e:	f000 b813 	b.w	8024dc8 <_close_r>
	...

08024da4 <_write_r>:
 8024da4:	b538      	push	{r3, r4, r5, lr}
 8024da6:	4c07      	ldr	r4, [pc, #28]	; (8024dc4 <_write_r+0x20>)
 8024da8:	4605      	mov	r5, r0
 8024daa:	4608      	mov	r0, r1
 8024dac:	4611      	mov	r1, r2
 8024dae:	2200      	movs	r2, #0
 8024db0:	6022      	str	r2, [r4, #0]
 8024db2:	461a      	mov	r2, r3
 8024db4:	f7de f8a1 	bl	8002efa <_write>
 8024db8:	1c43      	adds	r3, r0, #1
 8024dba:	d102      	bne.n	8024dc2 <_write_r+0x1e>
 8024dbc:	6823      	ldr	r3, [r4, #0]
 8024dbe:	b103      	cbz	r3, 8024dc2 <_write_r+0x1e>
 8024dc0:	602b      	str	r3, [r5, #0]
 8024dc2:	bd38      	pop	{r3, r4, r5, pc}
 8024dc4:	2000cb28 	.word	0x2000cb28

08024dc8 <_close_r>:
 8024dc8:	b538      	push	{r3, r4, r5, lr}
 8024dca:	4c06      	ldr	r4, [pc, #24]	; (8024de4 <_close_r+0x1c>)
 8024dcc:	2300      	movs	r3, #0
 8024dce:	4605      	mov	r5, r0
 8024dd0:	4608      	mov	r0, r1
 8024dd2:	6023      	str	r3, [r4, #0]
 8024dd4:	f7de f8ad 	bl	8002f32 <_close>
 8024dd8:	1c43      	adds	r3, r0, #1
 8024dda:	d102      	bne.n	8024de2 <_close_r+0x1a>
 8024ddc:	6823      	ldr	r3, [r4, #0]
 8024dde:	b103      	cbz	r3, 8024de2 <_close_r+0x1a>
 8024de0:	602b      	str	r3, [r5, #0]
 8024de2:	bd38      	pop	{r3, r4, r5, pc}
 8024de4:	2000cb28 	.word	0x2000cb28

08024de8 <_fstat_r>:
 8024de8:	b538      	push	{r3, r4, r5, lr}
 8024dea:	4c07      	ldr	r4, [pc, #28]	; (8024e08 <_fstat_r+0x20>)
 8024dec:	2300      	movs	r3, #0
 8024dee:	4605      	mov	r5, r0
 8024df0:	4608      	mov	r0, r1
 8024df2:	4611      	mov	r1, r2
 8024df4:	6023      	str	r3, [r4, #0]
 8024df6:	f7de f8a8 	bl	8002f4a <_fstat>
 8024dfa:	1c43      	adds	r3, r0, #1
 8024dfc:	d102      	bne.n	8024e04 <_fstat_r+0x1c>
 8024dfe:	6823      	ldr	r3, [r4, #0]
 8024e00:	b103      	cbz	r3, 8024e04 <_fstat_r+0x1c>
 8024e02:	602b      	str	r3, [r5, #0]
 8024e04:	bd38      	pop	{r3, r4, r5, pc}
 8024e06:	bf00      	nop
 8024e08:	2000cb28 	.word	0x2000cb28

08024e0c <_isatty_r>:
 8024e0c:	b538      	push	{r3, r4, r5, lr}
 8024e0e:	4c06      	ldr	r4, [pc, #24]	; (8024e28 <_isatty_r+0x1c>)
 8024e10:	2300      	movs	r3, #0
 8024e12:	4605      	mov	r5, r0
 8024e14:	4608      	mov	r0, r1
 8024e16:	6023      	str	r3, [r4, #0]
 8024e18:	f7de f8a7 	bl	8002f6a <_isatty>
 8024e1c:	1c43      	adds	r3, r0, #1
 8024e1e:	d102      	bne.n	8024e26 <_isatty_r+0x1a>
 8024e20:	6823      	ldr	r3, [r4, #0]
 8024e22:	b103      	cbz	r3, 8024e26 <_isatty_r+0x1a>
 8024e24:	602b      	str	r3, [r5, #0]
 8024e26:	bd38      	pop	{r3, r4, r5, pc}
 8024e28:	2000cb28 	.word	0x2000cb28

08024e2c <_lseek_r>:
 8024e2c:	b538      	push	{r3, r4, r5, lr}
 8024e2e:	4c07      	ldr	r4, [pc, #28]	; (8024e4c <_lseek_r+0x20>)
 8024e30:	4605      	mov	r5, r0
 8024e32:	4608      	mov	r0, r1
 8024e34:	4611      	mov	r1, r2
 8024e36:	2200      	movs	r2, #0
 8024e38:	6022      	str	r2, [r4, #0]
 8024e3a:	461a      	mov	r2, r3
 8024e3c:	f7de f8a0 	bl	8002f80 <_lseek>
 8024e40:	1c43      	adds	r3, r0, #1
 8024e42:	d102      	bne.n	8024e4a <_lseek_r+0x1e>
 8024e44:	6823      	ldr	r3, [r4, #0]
 8024e46:	b103      	cbz	r3, 8024e4a <_lseek_r+0x1e>
 8024e48:	602b      	str	r3, [r5, #0]
 8024e4a:	bd38      	pop	{r3, r4, r5, pc}
 8024e4c:	2000cb28 	.word	0x2000cb28

08024e50 <_read_r>:
 8024e50:	b538      	push	{r3, r4, r5, lr}
 8024e52:	4c07      	ldr	r4, [pc, #28]	; (8024e70 <_read_r+0x20>)
 8024e54:	4605      	mov	r5, r0
 8024e56:	4608      	mov	r0, r1
 8024e58:	4611      	mov	r1, r2
 8024e5a:	2200      	movs	r2, #0
 8024e5c:	6022      	str	r2, [r4, #0]
 8024e5e:	461a      	mov	r2, r3
 8024e60:	f7de f82e 	bl	8002ec0 <_read>
 8024e64:	1c43      	adds	r3, r0, #1
 8024e66:	d102      	bne.n	8024e6e <_read_r+0x1e>
 8024e68:	6823      	ldr	r3, [r4, #0]
 8024e6a:	b103      	cbz	r3, 8024e6e <_read_r+0x1e>
 8024e6c:	602b      	str	r3, [r5, #0]
 8024e6e:	bd38      	pop	{r3, r4, r5, pc}
 8024e70:	2000cb28 	.word	0x2000cb28

08024e74 <_init>:
 8024e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e76:	bf00      	nop
 8024e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024e7a:	bc08      	pop	{r3}
 8024e7c:	469e      	mov	lr, r3
 8024e7e:	4770      	bx	lr

08024e80 <_fini>:
 8024e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e82:	bf00      	nop
 8024e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024e86:	bc08      	pop	{r3}
 8024e88:	469e      	mov	lr, r3
 8024e8a:	4770      	bx	lr
